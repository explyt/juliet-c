!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc154)
  cir.func private @usleep(!u32i) -> !s32i loc(#loc155)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc156)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Sleep time possibly too long\00" : !cir.array<!s8i x 29>> : !cir.array<!s8i x 29> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_sleep_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc158)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc17)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc17)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc19)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc19)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc19)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc19)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc19)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc19)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc19)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc19)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc19)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc19)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc19)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc19)
          cir.yield %22 : !u32i loc(#loc19)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc19)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc19)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc19)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc19)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc19)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc19)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc19)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc19)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc19)
          %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc19)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc19)
          %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc19)
          %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc19)
          cir.yield %26 : !u32i loc(#loc19)
        }) : (!cir.bool) -> !u32i loc(#loc19)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc19)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc162)
      } loc(#loc161)
    } loc(#loc160)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc23)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc23)
      cir.if %4 {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
        %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc25)
        %7 = cir.call @usleep(%6) : (!u32i) -> !s32i loc(#loc26)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc7)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc7)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc27)
      } loc(#loc164)
    } loc(#loc163)
    cir.return loc(#loc9)
  } loc(#loc157)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_sleep_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc166)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc167)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc168)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc169)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    cir.return loc(#loc29)
  } loc(#loc165)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Sleep time OK\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Sleep time too long\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc40)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc171)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc46)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc50)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc50)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc52)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc52)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc52)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc52)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc52)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc52)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc52)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc52)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc52)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc52)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc52)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc52)
          cir.yield %22 : !u32i loc(#loc52)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc52)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc52)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc52)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc52)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc52)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc52)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc52)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc52)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc52)
          %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc52)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc52)
          %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc52)
          %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc52)
          cir.yield %26 : !u32i loc(#loc52)
        }) : (!cir.bool) -> !u32i loc(#loc52)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc52)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc175)
      } loc(#loc174)
    } loc(#loc173)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc56)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc56)
      cir.if %4 {
        %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc38)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc38)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc60)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc63)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc64)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc179)
          %8 = cir.ternary(%7, true {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
            %10 = cir.const #cir.int<2000> : !s32i loc(#loc67)
            %11 = cir.cmp(le, %9, %10) : !s32i, !cir.bool loc(#loc180)
            %12 = cir.ternary(%11, true {
              %13 = cir.const #true loc(#loc65)
              cir.yield %13 : !cir.bool loc(#loc65)
            }, false {
              %13 = cir.const #false loc(#loc65)
              cir.yield %13 : !cir.bool loc(#loc65)
            }) : (!cir.bool) -> !cir.bool loc(#loc65)
            cir.yield %12 : !cir.bool loc(#loc65)
          }, false {
            %9 = cir.const #false loc(#loc65)
            cir.yield %9 : !cir.bool loc(#loc65)
          }) : (!cir.bool) -> !cir.bool loc(#loc65)
          cir.if %8 {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc71)
            %11 = cir.call @usleep(%10) : (!u32i) -> !s32i loc(#loc72)
            %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc39)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc39)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc73)
          } else {
            %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc40)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc40)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc74)
          } loc(#loc181)
        } loc(#loc178)
      } loc(#loc177)
    } loc(#loc176)
    cir.return loc(#loc42)
  } loc(#loc170)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc183)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc80)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc84)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc84)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc86)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc86)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc86)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc86)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc86)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc86)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc86)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc86)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc86)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc86)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc86)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc86)
          cir.yield %22 : !u32i loc(#loc86)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc86)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc86)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc86)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc86)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc86)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc86)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc86)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc86)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc86)
          %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc86)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc86)
          %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc86)
          %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc86)
          cir.yield %26 : !u32i loc(#loc86)
        }) : (!cir.bool) -> !u32i loc(#loc86)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc86)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
      } loc(#loc186)
    } loc(#loc185)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc90)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc90)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc95)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc191)
          %8 = cir.ternary(%7, true {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc97)
            %10 = cir.const #cir.int<2000> : !s32i loc(#loc98)
            %11 = cir.cmp(le, %9, %10) : !s32i, !cir.bool loc(#loc192)
            %12 = cir.ternary(%11, true {
              %13 = cir.const #true loc(#loc96)
              cir.yield %13 : !cir.bool loc(#loc96)
            }, false {
              %13 = cir.const #false loc(#loc96)
              cir.yield %13 : !cir.bool loc(#loc96)
            }) : (!cir.bool) -> !cir.bool loc(#loc96)
            cir.yield %12 : !cir.bool loc(#loc96)
          }, false {
            %9 = cir.const #false loc(#loc96)
            cir.yield %9 : !cir.bool loc(#loc96)
          }) : (!cir.bool) -> !cir.bool loc(#loc96)
          cir.if %8 {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc102)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc102)
            %11 = cir.call @usleep(%10) : (!u32i) -> !s32i loc(#loc103)
            %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc104)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc104)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc105)
          } else {
            %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc106)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc106)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc107)
          } loc(#loc193)
        } loc(#loc190)
      } loc(#loc189)
    } loc(#loc188)
    cir.return loc(#loc76)
  } loc(#loc182)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc195)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc112)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc113)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc117)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc117)
      cir.if %4 {
        %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc121)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc121)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc122)
      } else {
        %5 = cir.const #cir.int<20> : !s32i loc(#loc123)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc199)
      } loc(#loc198)
    } loc(#loc197)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc127)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc127)
      cir.if %4 {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
        %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc129)
        %7 = cir.call @usleep(%6) : (!u32i) -> !s32i loc(#loc130)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc131)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc131)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc132)
      } loc(#loc201)
    } loc(#loc200)
    cir.return loc(#loc109)
  } loc(#loc194)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc203)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc137)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc138)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc142)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc142)
      cir.if %4 {
        %5 = cir.const #cir.int<20> : !s32i loc(#loc144)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc207)
      } loc(#loc206)
    } loc(#loc205)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc148)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc148)
      cir.if %4 {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc150)
        %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc150)
        %7 = cir.call @usleep(%6) : (!u32i) -> !s32i loc(#loc151)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc152)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc152)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc153)
      } loc(#loc209)
    } loc(#loc208)
    cir.return loc(#loc134)
  } loc(#loc202)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_04.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/unistd.h":480:1)
#loc4 = loc("/usr/include/unistd.h":480:43)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":50:19)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":36:1)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":52:1)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":38:5)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":38:9)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":40:14)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":40:13)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":40:5)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":41:5)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":45:5)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":41:8)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":42:5)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":44:17)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":44:9)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":46:5)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":51:5)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":46:8)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":47:5)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":49:15)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":49:9)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":50:9)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":158:1)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":164:1)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":160:5)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":160:14)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":161:5)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":161:14)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":162:5)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":162:14)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":163:5)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":163:14)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":72:19)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":80:23)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":84:23)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":59:1)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":87:1)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":61:5)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":61:9)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":63:14)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":63:13)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":63:5)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":64:5)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":68:5)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":64:8)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":65:5)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":67:17)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":67:9)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":69:5)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":86:5)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":69:8)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":70:5)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":73:5)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":75:5)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":72:9)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":77:9)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":85:9)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":77:13)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":77:21)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":77:23)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":77:26)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":77:35)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":78:9)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":81:9)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":83:9)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":79:19)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":79:13)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":80:13)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":84:13)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":90:1)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":113:1)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":92:5)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":92:9)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":94:14)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":94:13)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":94:5)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":95:5)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":99:5)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":95:8)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":96:5)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":98:17)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":98:9)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":100:5)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":112:5)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":100:8)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":101:5)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":103:9)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":111:9)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":103:13)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":103:21)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":103:23)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":103:26)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":103:35)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":104:9)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":107:9)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":109:9)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":105:19)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":105:13)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":106:23)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":106:13)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":110:23)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":110:13)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":116:1)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":137:1)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":118:5)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":118:9)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":120:14)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":120:13)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":120:5)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":121:5)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":130:5)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":121:8)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":122:5)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":125:5)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":127:5)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":124:19)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":124:9)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":129:17)
#loc124 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":129:9)
#loc125 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":131:5)
#loc126 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":136:5)
#loc127 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":131:8)
#loc128 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":132:5)
#loc129 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":134:15)
#loc130 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":134:9)
#loc131 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":135:19)
#loc132 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":135:9)
#loc133 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":140:1)
#loc134 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":156:1)
#loc135 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":142:5)
#loc136 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":142:9)
#loc137 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":144:14)
#loc138 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":144:13)
#loc139 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":144:5)
#loc140 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":145:5)
#loc141 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":149:5)
#loc142 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":145:8)
#loc143 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":146:5)
#loc144 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":148:17)
#loc145 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":148:9)
#loc146 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":150:5)
#loc147 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":155:5)
#loc148 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":150:8)
#loc149 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":151:5)
#loc150 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":153:15)
#loc151 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":153:9)
#loc152 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":154:19)
#loc153 = loc("CWE400_Resource_Exhaustion__rand_sleep_04.c":154:9)
#loc154 = loc(fused[#loc1, #loc2])
#loc155 = loc(fused[#loc3, #loc4])
#loc156 = loc(fused[#loc5, #loc6])
#loc157 = loc(fused[#loc8, #loc9])
#loc158 = loc(fused[#loc10, #loc11])
#loc159 = loc(fused[#loc14, #loc12])
#loc160 = loc(fused[#loc15, #loc16])
#loc161 = loc(fused[#loc18, #loc16])
#loc162 = loc(fused[#loc20, #loc19])
#loc163 = loc(fused[#loc21, #loc22])
#loc164 = loc(fused[#loc24, #loc22])
#loc165 = loc(fused[#loc28, #loc29])
#loc166 = loc(fused[#loc30, #loc31])
#loc167 = loc(fused[#loc32, #loc33])
#loc168 = loc(fused[#loc34, #loc35])
#loc169 = loc(fused[#loc36, #loc37])
#loc170 = loc(fused[#loc41, #loc42])
#loc171 = loc(fused[#loc43, #loc44])
#loc172 = loc(fused[#loc47, #loc45])
#loc173 = loc(fused[#loc48, #loc49])
#loc174 = loc(fused[#loc51, #loc49])
#loc175 = loc(fused[#loc53, #loc52])
#loc176 = loc(fused[#loc54, #loc55])
#loc177 = loc(fused[#loc57, #loc58, #loc59, #loc55])
#loc178 = loc(fused[#loc61, #loc62])
#loc179 = loc(fused[#loc63, #loc64])
#loc180 = loc(fused[#loc66, #loc67])
#loc181 = loc(fused[#loc68, #loc69, #loc70, #loc62])
#loc182 = loc(fused[#loc75, #loc76])
#loc183 = loc(fused[#loc77, #loc78])
#loc184 = loc(fused[#loc81, #loc79])
#loc185 = loc(fused[#loc82, #loc83])
#loc186 = loc(fused[#loc85, #loc83])
#loc187 = loc(fused[#loc87, #loc86])
#loc188 = loc(fused[#loc88, #loc89])
#loc189 = loc(fused[#loc91, #loc89])
#loc190 = loc(fused[#loc92, #loc93])
#loc191 = loc(fused[#loc94, #loc95])
#loc192 = loc(fused[#loc97, #loc98])
#loc193 = loc(fused[#loc99, #loc100, #loc101, #loc93])
#loc194 = loc(fused[#loc108, #loc109])
#loc195 = loc(fused[#loc110, #loc111])
#loc196 = loc(fused[#loc114, #loc112])
#loc197 = loc(fused[#loc115, #loc116])
#loc198 = loc(fused[#loc118, #loc119, #loc120, #loc116])
#loc199 = loc(fused[#loc124, #loc123])
#loc200 = loc(fused[#loc125, #loc126])
#loc201 = loc(fused[#loc128, #loc126])
#loc202 = loc(fused[#loc133, #loc134])
#loc203 = loc(fused[#loc135, #loc136])
#loc204 = loc(fused[#loc139, #loc137])
#loc205 = loc(fused[#loc140, #loc141])
#loc206 = loc(fused[#loc143, #loc141])
#loc207 = loc(fused[#loc145, #loc144])
#loc208 = loc(fused[#loc146, #loc147])
#loc209 = loc(fused[#loc149, #loc147])
