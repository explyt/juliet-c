!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_putchar_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @putchar(!s32i) -> !s32i loc(#loc64)
  cir.func no_proto  @CWE252_Unchecked_Return_Value__char_putchar_08_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc67)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc7)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc7)
      cir.if %2 {
        %3 = cir.const #cir.int<65> : !s32i loc(#loc10)
        %4 = cir.call @putchar(%3) : (!s32i) -> !s32i loc(#loc11)
      } loc(#loc68)
    } loc(#loc66)
    cir.return loc(#loc4)
  } loc(#loc65)
  cir.func no_proto  @CWE252_Unchecked_Return_Value__char_putchar_08_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc70)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc14)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc71)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc16)
    cir.return loc(#loc13)
  } loc(#loc69)
  cir.func no_proto internal private  @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc19)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc20)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc73)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
    cir.return %2 : !s32i loc(#loc73)
  } loc(#loc72)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc74)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc24)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"putchar failed!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc25)
  cir.func no_proto internal private  @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc77)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc30)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc30)
      cir.if %2 {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc24)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc24)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc35)
      } else {
        cir.scope {
          %3 = cir.const #cir.int<65> : !s32i loc(#loc38)
          %4 = cir.call @putchar(%3) : (!s32i) -> !s32i loc(#loc39)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc40)
          %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc40)
          %7 = cir.cmp(eq, %4, %6) : !s32i, !s32i loc(#loc80)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc41)
          cir.if %8 {
            %9 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc25)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc25)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc43)
          } loc(#loc81)
        } loc(#loc79)
      } loc(#loc78)
    } loc(#loc76)
    cir.return loc(#loc27)
  } loc(#loc75)
  cir.func no_proto internal private  @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc45)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc46)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc83)
    cir.return %2 : !s32i loc(#loc83)
  } loc(#loc82)
  cir.func no_proto internal private  @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc86)
      %1 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc52)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc52)
      cir.if %2 {
        cir.scope {
          %3 = cir.const #cir.int<65> : !s32i loc(#loc57)
          %4 = cir.call @putchar(%3) : (!s32i) -> !s32i loc(#loc58)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc59)
          %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc59)
          %7 = cir.cmp(eq, %4, %6) : !s32i, !s32i loc(#loc89)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc60)
          cir.if %8 {
            %9 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc62)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc62)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc63)
          } loc(#loc90)
        } loc(#loc88)
      } loc(#loc87)
    } loc(#loc85)
    cir.return loc(#loc49)
  } loc(#loc84)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_putchar_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":618:1)
#loc2 = loc("/usr/include/stdio.h":618:28)
#loc3 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":37:1)
#loc4 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":44:1)
#loc5 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":39:5)
#loc6 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":43:5)
#loc7 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":39:8)
#loc8 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":39:26)
#loc9 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":40:5)
#loc10 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":42:22)
#loc11 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":42:9)
#loc12 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":81:1)
#loc13 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":85:1)
#loc14 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":83:5)
#loc15 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":83:11)
#loc16 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":84:5)
#loc17 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":84:11)
#loc18 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":25:1)
#loc19 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":28:1)
#loc20 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":27:12)
#loc21 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":27:5)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":56:19)
#loc25 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":63:23)
#loc26 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":51:1)
#loc27 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":66:1)
#loc28 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":53:5)
#loc29 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":65:5)
#loc30 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":53:8)
#loc31 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":53:27)
#loc32 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":54:5)
#loc33 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":57:5)
#loc34 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":59:5)
#loc35 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":56:9)
#loc36 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":61:9)
#loc37 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":64:9)
#loc38 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":61:26)
#loc39 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":61:13)
#loc40 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":61:34)
#loc41 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":61:31)
#loc42 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":62:9)
#loc43 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":63:13)
#loc44 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":30:1)
#loc45 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":33:1)
#loc46 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":32:12)
#loc47 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":32:5)
#loc48 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":69:1)
#loc49 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":79:1)
#loc50 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":71:5)
#loc51 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":78:5)
#loc52 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":71:8)
#loc53 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":71:26)
#loc54 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":72:5)
#loc55 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":74:9)
#loc56 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":77:9)
#loc57 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":74:26)
#loc58 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":74:13)
#loc59 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":74:34)
#loc60 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":74:31)
#loc61 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":75:9)
#loc62 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":76:23)
#loc63 = loc("CWE252_Unchecked_Return_Value__char_putchar_08.c":76:13)
#loc64 = loc(fused[#loc1, #loc2])
#loc65 = loc(fused[#loc3, #loc4])
#loc66 = loc(fused[#loc5, #loc6])
#loc67 = loc(fused[#loc7, #loc8])
#loc68 = loc(fused[#loc9, #loc6])
#loc69 = loc(fused[#loc12, #loc13])
#loc70 = loc(fused[#loc14, #loc15])
#loc71 = loc(fused[#loc16, #loc17])
#loc72 = loc(fused[#loc18, #loc19])
#loc73 = loc(fused[#loc21, #loc20])
#loc74 = loc(fused[#loc22, #loc23])
#loc75 = loc(fused[#loc26, #loc27])
#loc76 = loc(fused[#loc28, #loc29])
#loc77 = loc(fused[#loc30, #loc31])
#loc78 = loc(fused[#loc32, #loc33, #loc34, #loc29])
#loc79 = loc(fused[#loc36, #loc37])
#loc80 = loc(fused[#loc39, #loc40])
#loc81 = loc(fused[#loc42, #loc37])
#loc82 = loc(fused[#loc44, #loc45])
#loc83 = loc(fused[#loc47, #loc46])
#loc84 = loc(fused[#loc48, #loc49])
#loc85 = loc(fused[#loc50, #loc51])
#loc86 = loc(fused[#loc52, #loc53])
#loc87 = loc(fused[#loc54, #loc51])
#loc88 = loc(fused[#loc55, #loc56])
#loc89 = loc(fused[#loc58, #loc59])
#loc90 = loc(fused[#loc61, #loc56])
