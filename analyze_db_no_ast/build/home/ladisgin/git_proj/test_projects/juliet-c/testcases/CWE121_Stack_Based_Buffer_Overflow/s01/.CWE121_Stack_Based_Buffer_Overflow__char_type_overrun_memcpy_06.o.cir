!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__charVoid = !cir.struct<struct "_charVoid" {!cir.array<!s8i x 16>, !cir.ptr<!void>, !cir.ptr<!void>}>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"0123456789abcdef0123456789abcde\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc1)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc132)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc8)
      %1 = cir.const #cir.int<5> : !s32i loc(#loc9)
      %2 = cir.cmp(eq, %0, %1) : !s32i, !s32i loc(#loc135)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc10)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !ty__charVoid, !cir.ptr<!ty__charVoid>, ["structCharVoid"] {alignment = 8 : i64} loc(#loc138)
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc1)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc1)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc1)
          %8 = cir.get_member %4[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc16)
          cir.store %7, %8 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc139)
          %9 = cir.get_member %4[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc16)
          %10 = cir.load %9 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc18)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc140)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc20)
          %12 = cir.get_member %4[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc21)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc141)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc141)
          %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc24)
          %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc24)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc24)
          %18 = cir.const #cir.int<32> : !u64i loc(#loc142)
          cir.libc.memcpy %18 bytes from %17 to %14 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc143)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc29)
          %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc29)
          %21 = cir.get_member %4[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc21)
          %22 = cir.const #cir.int<16> : !u64i loc(#loc144)
          %23 = cir.const #cir.int<1> : !u64i loc(#loc145)
          %24 = cir.binop(div, %22, %23) : !u64i loc(#loc146)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc34)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc34)
          %27 = cir.binop(sub, %24, %26) : !u64i loc(#loc147)
          %28 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc36)
          %29 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %27 : !u64i), !cir.ptr<!s8i> loc(#loc37)
          cir.store %20, %29 : !s8i, !cir.ptr<!s8i> loc(#loc148)
          %30 = cir.get_member %4[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc21)
          %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc149)
          cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc40)
          %32 = cir.get_member %4[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc16)
          %33 = cir.load %32 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc41)
          %34 = cir.cast(bitcast, %33 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc150)
          cir.call @printLine(%34) : (!cir.ptr<!s8i>) -> () loc(#loc43)
        } loc(#loc137)
      } loc(#loc136)
    } loc(#loc134)
    cir.return loc(#loc5)
  } loc(#loc133)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc152)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc153)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    cir.return loc(#loc45)
  } loc(#loc151)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc50)
  cir.func no_proto internal private  @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc55)
      %1 = cir.const #cir.int<5> : !s32i loc(#loc56)
      %2 = cir.cmp(ne, %0, %1) : !s32i, !s32i loc(#loc156)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc57)
      cir.if %3 {
        %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc50)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc50)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc61)
      } else {
        cir.scope {
          %4 = cir.alloca !ty__charVoid, !cir.ptr<!ty__charVoid>, ["structCharVoid"] {alignment = 8 : i64} loc(#loc159)
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc66)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc66)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc66)
          %8 = cir.get_member %4[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc16)
          cir.store %7, %8 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc160)
          %9 = cir.get_member %4[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc16)
          %10 = cir.load %9 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc68)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc161)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc70)
          %12 = cir.get_member %4[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc21)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc162)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc162)
          %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc73)
          %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc73)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc73)
          %18 = cir.const #cir.int<16> : !u64i loc(#loc163)
          cir.libc.memcpy %18 bytes from %17 to %14 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc164)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc78)
          %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc78)
          %21 = cir.get_member %4[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc21)
          %22 = cir.const #cir.int<16> : !u64i loc(#loc165)
          %23 = cir.const #cir.int<1> : !u64i loc(#loc166)
          %24 = cir.binop(div, %22, %23) : !u64i loc(#loc167)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc83)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc83)
          %27 = cir.binop(sub, %24, %26) : !u64i loc(#loc168)
          %28 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc85)
          %29 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %27 : !u64i), !cir.ptr<!s8i> loc(#loc86)
          cir.store %20, %29 : !s8i, !cir.ptr<!s8i> loc(#loc169)
          %30 = cir.get_member %4[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc21)
          %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc170)
          cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc89)
          %32 = cir.get_member %4[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc16)
          %33 = cir.load %32 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc90)
          %34 = cir.cast(bitcast, %33 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc171)
          cir.call @printLine(%34) : (!cir.ptr<!s8i>) -> () loc(#loc92)
        } loc(#loc158)
      } loc(#loc157)
    } loc(#loc155)
    cir.return loc(#loc52)
  } loc(#loc154)
  cir.func no_proto internal private  @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc97)
      %1 = cir.const #cir.int<5> : !s32i loc(#loc98)
      %2 = cir.cmp(eq, %0, %1) : !s32i, !s32i loc(#loc174)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc99)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !ty__charVoid, !cir.ptr<!ty__charVoid>, ["structCharVoid"] {alignment = 8 : i64} loc(#loc177)
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc105)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc105)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc105)
          %8 = cir.get_member %4[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc16)
          cir.store %7, %8 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc178)
          %9 = cir.get_member %4[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc16)
          %10 = cir.load %9 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc107)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc179)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc109)
          %12 = cir.get_member %4[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc21)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc180)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc180)
          %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc112)
          %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc112)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc112)
          %18 = cir.const #cir.int<16> : !u64i loc(#loc181)
          cir.libc.memcpy %18 bytes from %17 to %14 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc182)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc117)
          %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc117)
          %21 = cir.get_member %4[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc21)
          %22 = cir.const #cir.int<16> : !u64i loc(#loc183)
          %23 = cir.const #cir.int<1> : !u64i loc(#loc184)
          %24 = cir.binop(div, %22, %23) : !u64i loc(#loc185)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc122)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc122)
          %27 = cir.binop(sub, %24, %26) : !u64i loc(#loc186)
          %28 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc124)
          %29 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %27 : !u64i), !cir.ptr<!s8i> loc(#loc125)
          cir.store %20, %29 : !s8i, !cir.ptr<!s8i> loc(#loc187)
          %30 = cir.get_member %4[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc21)
          %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc188)
          cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc128)
          %32 = cir.get_member %4[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc16)
          %33 = cir.load %32 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc129)
          %34 = cir.cast(bitcast, %33 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc189)
          cir.call @printLine(%34) : (!cir.ptr<!s8i>) -> () loc(#loc131)
        } loc(#loc176)
      } loc(#loc175)
    } loc(#loc173)
    cir.return loc(#loc94)
  } loc(#loc172)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":45:49)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":39:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":55:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":41:5)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":54:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":41:8)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":41:27)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":41:25)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":42:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":43:9)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":53:9)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":44:13)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":44:22)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":28:12)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":45:13)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":47:46)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":47:31)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":47:13)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":27:10)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":49:20)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":49:35)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":49:46)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":49:55)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":49:76)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":49:13)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":49:77)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":50:91)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":50:39)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":50:70)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":50:72)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":50:83)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":50:86)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":50:38)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":50:13)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":50:28)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":51:31)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":51:46)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":51:13)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":52:46)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":52:31)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":52:13)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":104:1)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":108:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":106:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":106:11)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":107:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":107:11)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":67:19)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":62:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":83:1)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":64:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":82:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":64:8)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":64:27)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":64:25)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":65:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":68:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":70:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":67:9)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":71:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":81:9)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":72:13)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":72:22)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":73:49)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":73:13)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":75:46)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":75:31)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":75:13)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":77:20)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":77:35)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":77:46)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":77:55)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":77:86)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":77:13)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":77:87)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":78:91)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":78:39)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":78:70)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":78:72)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":78:83)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":78:86)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":78:38)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":78:13)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":78:28)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":79:31)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":79:46)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":79:13)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":80:46)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":80:31)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":80:13)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":86:1)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":102:1)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":88:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":101:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":88:8)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":88:27)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":88:25)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":89:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":90:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":100:9)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":91:13)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":91:22)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":92:49)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":92:13)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":94:46)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":94:31)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":94:13)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":96:20)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":96:35)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":96:46)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":96:55)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":96:86)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":96:13)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":96:87)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":97:91)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":97:39)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":97:70)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":97:72)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":97:83)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":97:86)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":97:38)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":97:13)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":97:28)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":98:31)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":98:46)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":98:13)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":99:46)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":99:31)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c":99:13)
#loc132 = loc(fused[#loc2, #loc3])
#loc133 = loc(fused[#loc4, #loc5])
#loc134 = loc(fused[#loc6, #loc7])
#loc135 = loc(fused[#loc8, #loc9])
#loc136 = loc(fused[#loc11, #loc7])
#loc137 = loc(fused[#loc12, #loc13])
#loc138 = loc(fused[#loc14, #loc15])
#loc139 = loc(fused[#loc17, #loc1])
#loc140 = loc(fused[#loc19, #loc18])
#loc141 = loc(fused[#loc22, #loc23])
#loc142 = loc(fused[#loc25, #loc26])
#loc143 = loc(fused[#loc27, #loc28])
#loc144 = loc(fused[#loc30, #loc31])
#loc145 = loc(fused[#loc32, #loc33])
#loc146 = loc(fused[#loc30, #loc33])
#loc147 = loc(fused[#loc35, #loc34])
#loc148 = loc(fused[#loc36, #loc29])
#loc149 = loc(fused[#loc38, #loc39])
#loc150 = loc(fused[#loc42, #loc41])
#loc151 = loc(fused[#loc44, #loc45])
#loc152 = loc(fused[#loc46, #loc47])
#loc153 = loc(fused[#loc48, #loc49])
#loc154 = loc(fused[#loc51, #loc52])
#loc155 = loc(fused[#loc53, #loc54])
#loc156 = loc(fused[#loc55, #loc56])
#loc157 = loc(fused[#loc58, #loc59, #loc60, #loc54])
#loc158 = loc(fused[#loc62, #loc63])
#loc159 = loc(fused[#loc64, #loc65])
#loc160 = loc(fused[#loc67, #loc66])
#loc161 = loc(fused[#loc69, #loc68])
#loc162 = loc(fused[#loc71, #loc72])
#loc163 = loc(fused[#loc74, #loc75])
#loc164 = loc(fused[#loc76, #loc77])
#loc165 = loc(fused[#loc79, #loc80])
#loc166 = loc(fused[#loc81, #loc82])
#loc167 = loc(fused[#loc79, #loc82])
#loc168 = loc(fused[#loc84, #loc83])
#loc169 = loc(fused[#loc85, #loc78])
#loc170 = loc(fused[#loc87, #loc88])
#loc171 = loc(fused[#loc91, #loc90])
#loc172 = loc(fused[#loc93, #loc94])
#loc173 = loc(fused[#loc95, #loc96])
#loc174 = loc(fused[#loc97, #loc98])
#loc175 = loc(fused[#loc100, #loc96])
#loc176 = loc(fused[#loc101, #loc102])
#loc177 = loc(fused[#loc103, #loc104])
#loc178 = loc(fused[#loc106, #loc105])
#loc179 = loc(fused[#loc108, #loc107])
#loc180 = loc(fused[#loc110, #loc111])
#loc181 = loc(fused[#loc113, #loc114])
#loc182 = loc(fused[#loc115, #loc116])
#loc183 = loc(fused[#loc118, #loc119])
#loc184 = loc(fused[#loc120, #loc121])
#loc185 = loc(fused[#loc118, #loc121])
#loc186 = loc(fused[#loc123, #loc122])
#loc187 = loc(fused[#loc124, #loc117])
#loc188 = loc(fused[#loc126, #loc127])
#loc189 = loc(fused[#loc130, #loc129])
