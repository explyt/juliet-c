!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_square_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc123)
  cir.func private @printIntLine(!s32i) loc(#loc124)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_square_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc126)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc127)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc128)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc127)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc128)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc13)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc131)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc18)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc131)
      %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc20)
      %9 = cir.binop(and, %7, %8) : !s32i loc(#loc20)
      %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc20)
      %11 = cir.ternary(%10, true {
        %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
        %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc20)
        %17 = cir.const #cir.int<30> : !s32i loc(#loc20)
        %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc20)
        %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
        %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc20)
        %21 = cir.const #cir.int<15> : !s32i loc(#loc20)
        %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc20)
        %23 = cir.binop(xor, %18, %22) : !u32i loc(#loc20)
        %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
        %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc20)
        %26 = cir.binop(xor, %23, %25) : !u32i loc(#loc20)
        cir.yield %26 : !u32i loc(#loc20)
      }, false {
        %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
        %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc20)
        %17 = cir.const #cir.int<30> : !s32i loc(#loc20)
        %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc20)
        %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
        %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc20)
        %21 = cir.const #cir.int<15> : !s32i loc(#loc20)
        %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc20)
        %23 = cir.binop(xor, %18, %22) : !u32i loc(#loc20)
        %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
        %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc20)
        %26 = cir.binop(xor, %23, %25) : !u32i loc(#loc20)
        %27 = cir.unary(minus, %26) : !u32i, !u32i loc(#loc20)
        %28 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc20)
        %30 = cir.binop(sub, %27, %29) : !u32i loc(#loc20)
        cir.yield %30 : !u32i loc(#loc20)
      }) : (!cir.bool) -> !u32i loc(#loc20)
      %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc20)
      cir.store %12, %4 : !s32i, !cir.ptr<!s32i> loc(#loc132)
      %13 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc22)
      %14 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc23)
      cir.store %13, %14 : !s32i, !cir.ptr<!s32i> loc(#loc133)
    } loc(#loc130)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc135)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc28)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc29)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc135)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc137)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc34)
        %9 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc33)
        %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc34)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc137)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc35)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc36)
      } loc(#loc136)
    } loc(#loc134)
    cir.return loc(#loc6)
  } loc(#loc125)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_square_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc139)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc140)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    cir.return loc(#loc38)
  } loc(#loc138)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc142)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc143)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc144)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc143)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc144)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc51)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc147)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc56)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc57)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc147)
      %7 = cir.const #cir.int<2> : !s32i loc(#loc58)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc148)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc60)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc61)
      cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    } loc(#loc146)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc151)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc66)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc67)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc151)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc153)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc72)
        %9 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc71)
        %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc72)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc153)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc73)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc74)
      } loc(#loc152)
    } loc(#loc150)
    cir.return loc(#loc44)
  } loc(#loc141)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc75)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc154)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc78)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc156)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc157)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc158)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc157)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc158)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc87)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc161)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc92)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc93)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc161)
      %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc94)
      %9 = cir.binop(and, %7, %8) : !s32i loc(#loc94)
      %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc94)
      %11 = cir.ternary(%10, true {
        %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
        %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc94)
        %17 = cir.const #cir.int<30> : !s32i loc(#loc94)
        %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc94)
        %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
        %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc94)
        %21 = cir.const #cir.int<15> : !s32i loc(#loc94)
        %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc94)
        %23 = cir.binop(xor, %18, %22) : !u32i loc(#loc94)
        %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
        %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc94)
        %26 = cir.binop(xor, %23, %25) : !u32i loc(#loc94)
        cir.yield %26 : !u32i loc(#loc94)
      }, false {
        %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
        %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc94)
        %17 = cir.const #cir.int<30> : !s32i loc(#loc94)
        %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc94)
        %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
        %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc94)
        %21 = cir.const #cir.int<15> : !s32i loc(#loc94)
        %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc94)
        %23 = cir.binop(xor, %18, %22) : !u32i loc(#loc94)
        %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
        %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc94)
        %26 = cir.binop(xor, %23, %25) : !u32i loc(#loc94)
        %27 = cir.unary(minus, %26) : !u32i, !u32i loc(#loc94)
        %28 = cir.const #cir.int<1> : !s32i loc(#loc94)
        %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc94)
        %30 = cir.binop(sub, %27, %29) : !u32i loc(#loc94)
        cir.yield %30 : !u32i loc(#loc94)
      }) : (!cir.bool) -> !u32i loc(#loc94)
      %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc94)
      cir.store %12, %4 : !s32i, !cir.ptr<!s32i> loc(#loc162)
      %13 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc96)
      %14 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc97)
      cir.store %13, %14 : !s32i, !cir.ptr<!s32i> loc(#loc163)
    } loc(#loc160)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc165)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc102)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc103)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc165)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc106)
        %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc107)
        %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc107)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc107)
        %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc107)
        %12 = cir.cmp(gt, %7, %11) : !s32i, !cir.bool loc(#loc167)
        %13 = cir.ternary(%12, true {
          %14 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc109)
          %15 = cir.abs %14 poison : !s32i loc(#loc110)
          %16 = cir.cast(integral, %15 : !s32i), !s64i loc(#loc110)
          %17 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc111)
          %18 = cir.const #cir.int<2147483647> : !s32i loc(#loc112)
          %19 = cir.cast(int_to_float, %18 : !s32i), !cir.double loc(#loc112)
          %20 = cir.call @sqrt(%19) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc111)
          %21 = cir.cast(float_to_int, %20 : !cir.double), !s64i loc(#loc111)
          %22 = cir.cmp(lt, %16, %21) : !s64i, !cir.bool loc(#loc168)
          %23 = cir.ternary(%22, true {
            %24 = cir.const #true loc(#loc108)
            cir.yield %24 : !cir.bool loc(#loc108)
          }, false {
            %24 = cir.const #false loc(#loc108)
            cir.yield %24 : !cir.bool loc(#loc108)
          }) : (!cir.bool) -> !cir.bool loc(#loc108)
          cir.yield %23 : !cir.bool loc(#loc108)
        }, false {
          %14 = cir.const #false loc(#loc108)
          cir.yield %14 : !cir.bool loc(#loc108)
        }) : (!cir.bool) -> !cir.bool loc(#loc108)
        cir.if %13 {
          %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc170)
          %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc119)
          %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc118)
          %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc119)
          cir.store %17, %14 : !s32i, !cir.ptr<!s32i> loc(#loc170)
          %18 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc120)
          cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc121)
        } else {
          %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc78)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc78)
          cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc122)
        } loc(#loc169)
      } loc(#loc166)
    } loc(#loc164)
    cir.return loc(#loc80)
  } loc(#loc155)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_square_32.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":24:1)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":45:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":26:5)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":26:9)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":27:5)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":27:22)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":28:5)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":28:22)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":30:12)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":30:5)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":31:5)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":36:5)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":32:9)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":32:21)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":32:20)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":34:16)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":34:9)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":35:21)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":35:10)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":35:9)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":37:5)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":44:5)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":38:9)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":38:21)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":38:20)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":39:9)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":43:9)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":41:13)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":41:33)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":41:26)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":42:26)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":42:13)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":104:1)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":108:1)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":106:5)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":106:13)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":107:5)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":107:13)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":52:1)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":73:1)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":54:5)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":54:9)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":55:5)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":55:22)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":56:5)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":56:22)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":58:12)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":58:5)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":59:5)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":64:5)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":60:9)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":60:21)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":60:20)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":62:16)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":62:9)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":63:21)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":63:10)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":63:9)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":65:5)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":72:5)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":66:9)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":66:21)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":66:20)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":67:9)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":71:9)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":69:13)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":69:33)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":69:26)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":70:26)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":70:13)
#loc75 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc76 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc77 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":99:23)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":76:1)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":102:1)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":78:5)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":78:9)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":79:5)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":79:22)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":80:5)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":80:22)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":82:12)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":82:5)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":83:5)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":88:5)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":84:9)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":84:21)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":84:20)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":86:16)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":86:9)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":87:21)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":87:10)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":87:9)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":89:5)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":101:5)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":90:9)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":90:21)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":90:20)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":92:9)
#loc105 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":100:9)
#loc106 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":92:13)
#loc107 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":92:20)
#loc108 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":92:28)
#loc109 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":92:35)
#loc110 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":92:31)
#loc111 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":92:49)
#loc112 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":92:62)
#loc113 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":92:69)
#loc114 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":93:9)
#loc115 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":96:9)
#loc116 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":98:9)
#loc117 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":94:13)
#loc118 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":94:33)
#loc119 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":94:26)
#loc120 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":95:26)
#loc121 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":95:13)
#loc122 = loc("CWE190_Integer_Overflow__int_rand_square_32.c":99:13)
#loc123 = loc(fused[#loc1, #loc2])
#loc124 = loc(fused[#loc3, #loc4])
#loc125 = loc(fused[#loc5, #loc6])
#loc126 = loc(fused[#loc7, #loc8])
#loc127 = loc(fused[#loc9, #loc10])
#loc128 = loc(fused[#loc11, #loc12])
#loc129 = loc(fused[#loc14, #loc13])
#loc130 = loc(fused[#loc15, #loc16])
#loc131 = loc(fused[#loc17, #loc18])
#loc132 = loc(fused[#loc21, #loc20])
#loc133 = loc(fused[#loc24, #loc22])
#loc134 = loc(fused[#loc25, #loc26])
#loc135 = loc(fused[#loc27, #loc28])
#loc136 = loc(fused[#loc30, #loc31])
#loc137 = loc(fused[#loc32, #loc33])
#loc138 = loc(fused[#loc37, #loc38])
#loc139 = loc(fused[#loc39, #loc40])
#loc140 = loc(fused[#loc41, #loc42])
#loc141 = loc(fused[#loc43, #loc44])
#loc142 = loc(fused[#loc45, #loc46])
#loc143 = loc(fused[#loc47, #loc48])
#loc144 = loc(fused[#loc49, #loc50])
#loc145 = loc(fused[#loc52, #loc51])
#loc146 = loc(fused[#loc53, #loc54])
#loc147 = loc(fused[#loc55, #loc56])
#loc148 = loc(fused[#loc59, #loc58])
#loc149 = loc(fused[#loc62, #loc60])
#loc150 = loc(fused[#loc63, #loc64])
#loc151 = loc(fused[#loc65, #loc66])
#loc152 = loc(fused[#loc68, #loc69])
#loc153 = loc(fused[#loc70, #loc71])
#loc154 = loc(fused[#loc76, #loc77])
#loc155 = loc(fused[#loc79, #loc80])
#loc156 = loc(fused[#loc81, #loc82])
#loc157 = loc(fused[#loc83, #loc84])
#loc158 = loc(fused[#loc85, #loc86])
#loc159 = loc(fused[#loc88, #loc87])
#loc160 = loc(fused[#loc89, #loc90])
#loc161 = loc(fused[#loc91, #loc92])
#loc162 = loc(fused[#loc95, #loc94])
#loc163 = loc(fused[#loc98, #loc96])
#loc164 = loc(fused[#loc99, #loc100])
#loc165 = loc(fused[#loc101, #loc102])
#loc166 = loc(fused[#loc104, #loc105])
#loc167 = loc(fused[#loc106, #loc107])
#loc168 = loc(fused[#loc110, #loc113])
#loc169 = loc(fused[#loc114, #loc115, #loc116, #loc105])
#loc170 = loc(fused[#loc117, #loc118])
