!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc137)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_zero_17_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc139)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc140)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc141)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc10)
    cir.store %3, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc142)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc14)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc144)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc145)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc18)
        cir.condition(%8) loc(#loc18)
      } body {
        cir.scope {
          %5 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc20)
          cir.store %5, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc147)
        } loc(#loc146)
        cir.yield loc(#loc13)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc23)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc148)
        cir.yield loc(#loc143)
      } loc(#loc143)
    } loc(#loc143)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc26)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc150)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc28)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc151)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc30)
        cir.condition(%8) loc(#loc30)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc154)
            %6 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc36)
            %7 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc37)
            %8 = cir.cast(floating, %7 : !cir.float), !cir.double loc(#loc37)
            %9 = cir.binop(div, %6, %8) : !cir.double loc(#loc155)
            %10 = cir.cast(float_to_int, %9 : !cir.double), !s32i loc(#loc155)
            cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc154)
            %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc38)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc39)
          } loc(#loc153)
        } loc(#loc152)
        cir.yield loc(#loc25)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc40)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc41)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc156)
        cir.yield loc(#loc149)
      } loc(#loc149)
    } loc(#loc149)
    cir.return loc(#loc4)
  } loc(#loc138)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_zero_17_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc158)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc159)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    cir.return loc(#loc43)
  } loc(#loc157)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc160)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc50)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc162)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc163)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc164)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc58)
    cir.store %3, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc165)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc62)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc167)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc65)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc168)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc66)
        cir.condition(%8) loc(#loc66)
      } body {
        cir.scope {
          %5 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc68)
          cir.store %5, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc170)
        } loc(#loc169)
        cir.yield loc(#loc61)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc71)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc171)
        cir.yield loc(#loc166)
      } loc(#loc166)
    } loc(#loc166)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc74)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc173)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc76)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc77)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc174)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc78)
        cir.condition(%8) loc(#loc78)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc82)
            %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc82)
            %7 = cir.fabs %6 : !cir.double loc(#loc82)
            %8 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc83)
            %9 = cir.cmp(gt, %7, %8) : !cir.double, !s32i loc(#loc177)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc85)
            cir.if %10 {
              %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc179)
              %12 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc91)
              %13 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc92)
              %14 = cir.cast(floating, %13 : !cir.float), !cir.double loc(#loc92)
              %15 = cir.binop(div, %12, %14) : !cir.double loc(#loc180)
              %16 = cir.cast(float_to_int, %15 : !cir.double), !s32i loc(#loc180)
              cir.store %16, %11 : !s32i, !cir.ptr<!s32i> loc(#loc179)
              %17 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc93)
              cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc94)
            } else {
              %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc50)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc50)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc95)
            } loc(#loc178)
          } loc(#loc176)
        } loc(#loc175)
        cir.yield loc(#loc73)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc96)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc97)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc181)
        cir.yield loc(#loc172)
      } loc(#loc172)
    } loc(#loc172)
    cir.return loc(#loc52)
  } loc(#loc161)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc183)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc184)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc185)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc105)
    cir.store %3, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc186)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc109)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc188)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc112)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc189)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc113)
        cir.condition(%8) loc(#loc113)
      } body {
        cir.scope {
          %5 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc115)
          cir.store %5, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc191)
        } loc(#loc190)
        cir.yield loc(#loc108)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc118)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc192)
        cir.yield loc(#loc187)
      } loc(#loc187)
    } loc(#loc187)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc121)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc194)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc123)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc124)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc195)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc125)
        cir.condition(%8) loc(#loc125)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc198)
            %6 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc131)
            %7 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc132)
            %8 = cir.cast(floating, %7 : !cir.float), !cir.double loc(#loc132)
            %9 = cir.binop(div, %6, %8) : !cir.double loc(#loc199)
            %10 = cir.cast(float_to_int, %9 : !cir.double), !s32i loc(#loc199)
            cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc198)
            %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc133)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc134)
          } loc(#loc197)
        } loc(#loc196)
        cir.yield loc(#loc120)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc135)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc136)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc200)
        cir.yield loc(#loc193)
      } loc(#loc193)
    } loc(#loc193)
    cir.return loc(#loc99)
  } loc(#loc182)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_17.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__float_zero_17.c":24:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_zero_17.c":43:1)
#loc5 = loc("CWE369_Divide_by_Zero__float_zero_17.c":26:5)
#loc6 = loc("CWE369_Divide_by_Zero__float_zero_17.c":26:9)
#loc7 = loc("CWE369_Divide_by_Zero__float_zero_17.c":26:11)
#loc8 = loc("CWE369_Divide_by_Zero__float_zero_17.c":27:5)
#loc9 = loc("CWE369_Divide_by_Zero__float_zero_17.c":27:11)
#loc10 = loc("CWE369_Divide_by_Zero__float_zero_17.c":29:12)
#loc11 = loc("CWE369_Divide_by_Zero__float_zero_17.c":29:5)
#loc12 = loc("CWE369_Divide_by_Zero__float_zero_17.c":30:5)
#loc13 = loc("CWE369_Divide_by_Zero__float_zero_17.c":34:5)
#loc14 = loc("CWE369_Divide_by_Zero__float_zero_17.c":30:13)
#loc15 = loc("CWE369_Divide_by_Zero__float_zero_17.c":30:9)
#loc16 = loc("CWE369_Divide_by_Zero__float_zero_17.c":30:16)
#loc17 = loc("CWE369_Divide_by_Zero__float_zero_17.c":30:20)
#loc18 = loc("CWE369_Divide_by_Zero__float_zero_17.c":30:18)
#loc19 = loc("CWE369_Divide_by_Zero__float_zero_17.c":31:5)
#loc20 = loc("CWE369_Divide_by_Zero__float_zero_17.c":33:16)
#loc21 = loc("CWE369_Divide_by_Zero__float_zero_17.c":33:9)
#loc22 = loc("CWE369_Divide_by_Zero__float_zero_17.c":30:24)
#loc23 = loc("CWE369_Divide_by_Zero__float_zero_17.c":30:23)
#loc24 = loc("CWE369_Divide_by_Zero__float_zero_17.c":35:5)
#loc25 = loc("CWE369_Divide_by_Zero__float_zero_17.c":42:5)
#loc26 = loc("CWE369_Divide_by_Zero__float_zero_17.c":35:13)
#loc27 = loc("CWE369_Divide_by_Zero__float_zero_17.c":35:9)
#loc28 = loc("CWE369_Divide_by_Zero__float_zero_17.c":35:16)
#loc29 = loc("CWE369_Divide_by_Zero__float_zero_17.c":35:20)
#loc30 = loc("CWE369_Divide_by_Zero__float_zero_17.c":35:18)
#loc31 = loc("CWE369_Divide_by_Zero__float_zero_17.c":36:5)
#loc32 = loc("CWE369_Divide_by_Zero__float_zero_17.c":37:9)
#loc33 = loc("CWE369_Divide_by_Zero__float_zero_17.c":41:9)
#loc34 = loc("CWE369_Divide_by_Zero__float_zero_17.c":39:13)
#loc35 = loc("CWE369_Divide_by_Zero__float_zero_17.c":39:44)
#loc36 = loc("CWE369_Divide_by_Zero__float_zero_17.c":39:32)
#loc37 = loc("CWE369_Divide_by_Zero__float_zero_17.c":39:40)
#loc38 = loc("CWE369_Divide_by_Zero__float_zero_17.c":40:26)
#loc39 = loc("CWE369_Divide_by_Zero__float_zero_17.c":40:13)
#loc40 = loc("CWE369_Divide_by_Zero__float_zero_17.c":35:24)
#loc41 = loc("CWE369_Divide_by_Zero__float_zero_17.c":35:23)
#loc42 = loc("CWE369_Divide_by_Zero__float_zero_17.c":98:1)
#loc43 = loc("CWE369_Divide_by_Zero__float_zero_17.c":102:1)
#loc44 = loc("CWE369_Divide_by_Zero__float_zero_17.c":100:5)
#loc45 = loc("CWE369_Divide_by_Zero__float_zero_17.c":100:13)
#loc46 = loc("CWE369_Divide_by_Zero__float_zero_17.c":101:5)
#loc47 = loc("CWE369_Divide_by_Zero__float_zero_17.c":101:13)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE369_Divide_by_Zero__float_zero_17.c":71:23)
#loc51 = loc("CWE369_Divide_by_Zero__float_zero_17.c":50:1)
#loc52 = loc("CWE369_Divide_by_Zero__float_zero_17.c":74:1)
#loc53 = loc("CWE369_Divide_by_Zero__float_zero_17.c":52:5)
#loc54 = loc("CWE369_Divide_by_Zero__float_zero_17.c":52:9)
#loc55 = loc("CWE369_Divide_by_Zero__float_zero_17.c":52:11)
#loc56 = loc("CWE369_Divide_by_Zero__float_zero_17.c":53:5)
#loc57 = loc("CWE369_Divide_by_Zero__float_zero_17.c":53:11)
#loc58 = loc("CWE369_Divide_by_Zero__float_zero_17.c":55:12)
#loc59 = loc("CWE369_Divide_by_Zero__float_zero_17.c":55:5)
#loc60 = loc("CWE369_Divide_by_Zero__float_zero_17.c":56:5)
#loc61 = loc("CWE369_Divide_by_Zero__float_zero_17.c":60:5)
#loc62 = loc("CWE369_Divide_by_Zero__float_zero_17.c":56:13)
#loc63 = loc("CWE369_Divide_by_Zero__float_zero_17.c":56:9)
#loc64 = loc("CWE369_Divide_by_Zero__float_zero_17.c":56:16)
#loc65 = loc("CWE369_Divide_by_Zero__float_zero_17.c":56:20)
#loc66 = loc("CWE369_Divide_by_Zero__float_zero_17.c":56:18)
#loc67 = loc("CWE369_Divide_by_Zero__float_zero_17.c":57:5)
#loc68 = loc("CWE369_Divide_by_Zero__float_zero_17.c":59:16)
#loc69 = loc("CWE369_Divide_by_Zero__float_zero_17.c":59:9)
#loc70 = loc("CWE369_Divide_by_Zero__float_zero_17.c":56:24)
#loc71 = loc("CWE369_Divide_by_Zero__float_zero_17.c":56:23)
#loc72 = loc("CWE369_Divide_by_Zero__float_zero_17.c":61:5)
#loc73 = loc("CWE369_Divide_by_Zero__float_zero_17.c":73:5)
#loc74 = loc("CWE369_Divide_by_Zero__float_zero_17.c":61:13)
#loc75 = loc("CWE369_Divide_by_Zero__float_zero_17.c":61:9)
#loc76 = loc("CWE369_Divide_by_Zero__float_zero_17.c":61:16)
#loc77 = loc("CWE369_Divide_by_Zero__float_zero_17.c":61:20)
#loc78 = loc("CWE369_Divide_by_Zero__float_zero_17.c":61:18)
#loc79 = loc("CWE369_Divide_by_Zero__float_zero_17.c":62:5)
#loc80 = loc("CWE369_Divide_by_Zero__float_zero_17.c":64:9)
#loc81 = loc("CWE369_Divide_by_Zero__float_zero_17.c":72:9)
#loc82 = loc("CWE369_Divide_by_Zero__float_zero_17.c":64:17)
#loc83 = loc("CWE369_Divide_by_Zero__float_zero_17.c":64:25)
#loc84 = loc("CWE369_Divide_by_Zero__float_zero_17.c":64:12)
#loc85 = loc("CWE369_Divide_by_Zero__float_zero_17.c":64:23)
#loc86 = loc("CWE369_Divide_by_Zero__float_zero_17.c":65:9)
#loc87 = loc("CWE369_Divide_by_Zero__float_zero_17.c":68:9)
#loc88 = loc("CWE369_Divide_by_Zero__float_zero_17.c":70:9)
#loc89 = loc("CWE369_Divide_by_Zero__float_zero_17.c":66:13)
#loc90 = loc("CWE369_Divide_by_Zero__float_zero_17.c":66:44)
#loc91 = loc("CWE369_Divide_by_Zero__float_zero_17.c":66:32)
#loc92 = loc("CWE369_Divide_by_Zero__float_zero_17.c":66:40)
#loc93 = loc("CWE369_Divide_by_Zero__float_zero_17.c":67:26)
#loc94 = loc("CWE369_Divide_by_Zero__float_zero_17.c":67:13)
#loc95 = loc("CWE369_Divide_by_Zero__float_zero_17.c":71:13)
#loc96 = loc("CWE369_Divide_by_Zero__float_zero_17.c":61:24)
#loc97 = loc("CWE369_Divide_by_Zero__float_zero_17.c":61:23)
#loc98 = loc("CWE369_Divide_by_Zero__float_zero_17.c":77:1)
#loc99 = loc("CWE369_Divide_by_Zero__float_zero_17.c":96:1)
#loc100 = loc("CWE369_Divide_by_Zero__float_zero_17.c":79:5)
#loc101 = loc("CWE369_Divide_by_Zero__float_zero_17.c":79:9)
#loc102 = loc("CWE369_Divide_by_Zero__float_zero_17.c":79:11)
#loc103 = loc("CWE369_Divide_by_Zero__float_zero_17.c":80:5)
#loc104 = loc("CWE369_Divide_by_Zero__float_zero_17.c":80:11)
#loc105 = loc("CWE369_Divide_by_Zero__float_zero_17.c":82:12)
#loc106 = loc("CWE369_Divide_by_Zero__float_zero_17.c":82:5)
#loc107 = loc("CWE369_Divide_by_Zero__float_zero_17.c":83:5)
#loc108 = loc("CWE369_Divide_by_Zero__float_zero_17.c":87:5)
#loc109 = loc("CWE369_Divide_by_Zero__float_zero_17.c":83:13)
#loc110 = loc("CWE369_Divide_by_Zero__float_zero_17.c":83:9)
#loc111 = loc("CWE369_Divide_by_Zero__float_zero_17.c":83:16)
#loc112 = loc("CWE369_Divide_by_Zero__float_zero_17.c":83:20)
#loc113 = loc("CWE369_Divide_by_Zero__float_zero_17.c":83:18)
#loc114 = loc("CWE369_Divide_by_Zero__float_zero_17.c":84:5)
#loc115 = loc("CWE369_Divide_by_Zero__float_zero_17.c":86:16)
#loc116 = loc("CWE369_Divide_by_Zero__float_zero_17.c":86:9)
#loc117 = loc("CWE369_Divide_by_Zero__float_zero_17.c":83:24)
#loc118 = loc("CWE369_Divide_by_Zero__float_zero_17.c":83:23)
#loc119 = loc("CWE369_Divide_by_Zero__float_zero_17.c":88:5)
#loc120 = loc("CWE369_Divide_by_Zero__float_zero_17.c":95:5)
#loc121 = loc("CWE369_Divide_by_Zero__float_zero_17.c":88:13)
#loc122 = loc("CWE369_Divide_by_Zero__float_zero_17.c":88:9)
#loc123 = loc("CWE369_Divide_by_Zero__float_zero_17.c":88:16)
#loc124 = loc("CWE369_Divide_by_Zero__float_zero_17.c":88:20)
#loc125 = loc("CWE369_Divide_by_Zero__float_zero_17.c":88:18)
#loc126 = loc("CWE369_Divide_by_Zero__float_zero_17.c":89:5)
#loc127 = loc("CWE369_Divide_by_Zero__float_zero_17.c":90:9)
#loc128 = loc("CWE369_Divide_by_Zero__float_zero_17.c":94:9)
#loc129 = loc("CWE369_Divide_by_Zero__float_zero_17.c":92:13)
#loc130 = loc("CWE369_Divide_by_Zero__float_zero_17.c":92:44)
#loc131 = loc("CWE369_Divide_by_Zero__float_zero_17.c":92:32)
#loc132 = loc("CWE369_Divide_by_Zero__float_zero_17.c":92:40)
#loc133 = loc("CWE369_Divide_by_Zero__float_zero_17.c":93:26)
#loc134 = loc("CWE369_Divide_by_Zero__float_zero_17.c":93:13)
#loc135 = loc("CWE369_Divide_by_Zero__float_zero_17.c":88:24)
#loc136 = loc("CWE369_Divide_by_Zero__float_zero_17.c":88:23)
#loc137 = loc(fused[#loc1, #loc2])
#loc138 = loc(fused[#loc3, #loc4])
#loc139 = loc(fused[#loc5, #loc6])
#loc140 = loc(fused[#loc5, #loc7])
#loc141 = loc(fused[#loc8, #loc9])
#loc142 = loc(fused[#loc11, #loc10])
#loc143 = loc(fused[#loc12, #loc13])
#loc144 = loc(fused[#loc15, #loc14])
#loc145 = loc(fused[#loc16, #loc17])
#loc146 = loc(fused[#loc19, #loc13])
#loc147 = loc(fused[#loc21, #loc20])
#loc148 = loc(fused[#loc23, #loc22])
#loc149 = loc(fused[#loc24, #loc25])
#loc150 = loc(fused[#loc27, #loc26])
#loc151 = loc(fused[#loc28, #loc29])
#loc152 = loc(fused[#loc31, #loc25])
#loc153 = loc(fused[#loc32, #loc33])
#loc154 = loc(fused[#loc34, #loc35])
#loc155 = loc(fused[#loc36, #loc37])
#loc156 = loc(fused[#loc41, #loc40])
#loc157 = loc(fused[#loc42, #loc43])
#loc158 = loc(fused[#loc44, #loc45])
#loc159 = loc(fused[#loc46, #loc47])
#loc160 = loc(fused[#loc48, #loc49])
#loc161 = loc(fused[#loc51, #loc52])
#loc162 = loc(fused[#loc53, #loc54])
#loc163 = loc(fused[#loc53, #loc55])
#loc164 = loc(fused[#loc56, #loc57])
#loc165 = loc(fused[#loc59, #loc58])
#loc166 = loc(fused[#loc60, #loc61])
#loc167 = loc(fused[#loc63, #loc62])
#loc168 = loc(fused[#loc64, #loc65])
#loc169 = loc(fused[#loc67, #loc61])
#loc170 = loc(fused[#loc69, #loc68])
#loc171 = loc(fused[#loc71, #loc70])
#loc172 = loc(fused[#loc72, #loc73])
#loc173 = loc(fused[#loc75, #loc74])
#loc174 = loc(fused[#loc76, #loc77])
#loc175 = loc(fused[#loc79, #loc73])
#loc176 = loc(fused[#loc80, #loc81])
#loc177 = loc(fused[#loc84, #loc83])
#loc178 = loc(fused[#loc86, #loc87, #loc88, #loc81])
#loc179 = loc(fused[#loc89, #loc90])
#loc180 = loc(fused[#loc91, #loc92])
#loc181 = loc(fused[#loc97, #loc96])
#loc182 = loc(fused[#loc98, #loc99])
#loc183 = loc(fused[#loc100, #loc101])
#loc184 = loc(fused[#loc100, #loc102])
#loc185 = loc(fused[#loc103, #loc104])
#loc186 = loc(fused[#loc106, #loc105])
#loc187 = loc(fused[#loc107, #loc108])
#loc188 = loc(fused[#loc110, #loc109])
#loc189 = loc(fused[#loc111, #loc112])
#loc190 = loc(fused[#loc114, #loc108])
#loc191 = loc(fused[#loc116, #loc115])
#loc192 = loc(fused[#loc118, #loc117])
#loc193 = loc(fused[#loc119, #loc120])
#loc194 = loc(fused[#loc122, #loc121])
#loc195 = loc(fused[#loc123, #loc124])
#loc196 = loc(fused[#loc126, #loc120])
#loc197 = loc(fused[#loc127, #loc128])
#loc198 = loc(fused[#loc129, #loc130])
#loc199 = loc(fused[#loc131, #loc132])
#loc200 = loc(fused[#loc136, #loc135])
