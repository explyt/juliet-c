!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc62 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":127:10)
#loc63 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":127:14)
#loc64 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":127:20)
#loc65 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":127:32)
#true = #cir.bool<true> : !cir.bool
#loc189 = loc(fused[#loc62, #loc63])
#loc190 = loc(fused[#loc64, #loc65])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_negative_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc165)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc166)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE124_Buffer_Underwrite__CWE839_negative_01_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc168)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc169)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc13)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc14)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc170)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc172)
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc173)
      %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc173)
      cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc173)
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
        %9 = cir.const #cir.int<10> : !s32i loc(#loc25)
        %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc175)
        cir.if %10 {
          %11 = cir.const #cir.int<1> : !s32i loc(#loc29)
          %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
          %13 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc31)
          %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc31)
          cir.store %11, %14 : !s32i, !cir.ptr<!s32i> loc(#loc177)
          cir.scope {
            %15 = cir.const #cir.int<0> : !s32i loc(#loc34)
            cir.store %15, %5 : !s32i, !cir.ptr<!s32i> loc(#loc179)
            cir.for : cond {
              %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc36)
              %17 = cir.const #cir.int<10> : !s32i loc(#loc37)
              %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc180)
              cir.condition(%18) loc(#loc38)
            } body {
              cir.scope {
                %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc40)
                %17 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc41)
                %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc41)
                %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc41)
                cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc42)
              } loc(#loc181)
              cir.yield loc(#loc33)
            } step {
              %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc43)
              %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc44)
              cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc182)
              cir.yield loc(#loc178)
            } loc(#loc178)
          } loc(#loc178)
        } else {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc45)
        } loc(#loc176)
      } loc(#loc174)
    } loc(#loc171)
    cir.return loc(#loc7)
  } loc(#loc167)
  cir.func no_proto @CWE124_Buffer_Underwrite__CWE839_negative_01_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc184)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc185)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    cir.return loc(#loc47)
  } loc(#loc183)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc186)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc187)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc59)
  cir.func @main(%arg0: !s32i loc(fused[#loc62, #loc63]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc64, #loc65])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc189)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc190)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc61)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc66)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc66)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc67)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc68)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc68)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc69)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc56)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %8 = cir.get_global @CWE124_Buffer_Underwrite__CWE839_negative_01_good : !cir.ptr<!cir.func<!void ()>> loc(#loc191)
    cir.call @CWE124_Buffer_Underwrite__CWE839_negative_01_good() : () -> () loc(#loc71)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc57)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc58)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %13 = cir.get_global @CWE124_Buffer_Underwrite__CWE839_negative_01_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc192)
    cir.call @CWE124_Buffer_Underwrite__CWE839_negative_01_bad() : () -> () loc(#loc75)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc59)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc78)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc193)
    cir.return %17 : !s32i loc(#loc193)
  } loc(#loc188)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc195)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc85)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc87)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc199)
      %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc200)
      %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc200)
      cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc200)
      cir.scope {
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc97)
        %8 = cir.const #cir.int<10> : !s32i loc(#loc98)
        %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc202)
        cir.if %9 {
          %10 = cir.const #cir.int<1> : !s32i loc(#loc102)
          %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
          %12 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc104)
          %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc104)
          cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc204)
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc107)
            cir.store %14, %4 : !s32i, !cir.ptr<!s32i> loc(#loc206)
            cir.for : cond {
              %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc109)
              %16 = cir.const #cir.int<10> : !s32i loc(#loc110)
              %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc207)
              cir.condition(%17) loc(#loc111)
            } body {
              cir.scope {
                %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc113)
                %16 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc114)
                %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc114)
                %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc114)
                cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc115)
              } loc(#loc208)
              cir.yield loc(#loc106)
            } step {
              %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc116)
              %16 = cir.unary(inc, %15) : !s32i, !s32i loc(#loc117)
              cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc209)
              cir.yield loc(#loc205)
            } loc(#loc205)
          } loc(#loc205)
        } else {
          %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc118)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc118)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc119)
        } loc(#loc203)
      } loc(#loc201)
    } loc(#loc198)
    cir.return loc(#loc81)
  } loc(#loc194)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc120)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc211)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc125)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc126)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc128)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc129)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc215)
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc216)
      %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc216)
      cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc216)
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc139)
        %9 = cir.const #cir.int<0> : !s32i loc(#loc140)
        %10 = cir.cmp(ge, %8, %9) : !s32i, !cir.bool loc(#loc218)
        %11 = cir.ternary(%10, true {
          %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc142)
          %13 = cir.const #cir.int<10> : !s32i loc(#loc143)
          %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc219)
          %15 = cir.ternary(%14, true {
            %16 = cir.const #true loc(#loc141)
            cir.yield %16 : !cir.bool loc(#loc141)
          }, false {
            %16 = cir.const #false loc(#loc141)
            cir.yield %16 : !cir.bool loc(#loc141)
          }) : (!cir.bool) -> !cir.bool loc(#loc141)
          cir.yield %15 : !cir.bool loc(#loc141)
        }, false {
          %12 = cir.const #false loc(#loc141)
          cir.yield %12 : !cir.bool loc(#loc141)
        }) : (!cir.bool) -> !cir.bool loc(#loc141)
        cir.if %11 {
          %12 = cir.const #cir.int<1> : !s32i loc(#loc148)
          %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc149)
          %14 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc150)
          %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc150)
          cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc221)
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc153)
            cir.store %16, %5 : !s32i, !cir.ptr<!s32i> loc(#loc223)
            cir.for : cond {
              %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc155)
              %18 = cir.const #cir.int<10> : !s32i loc(#loc156)
              %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc224)
              cir.condition(%19) loc(#loc157)
            } body {
              cir.scope {
                %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc159)
                %18 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc160)
                %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc160)
                %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc160)
                cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc161)
              } loc(#loc225)
              cir.yield loc(#loc152)
            } step {
              %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc162)
              %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc163)
              cir.store %18, %5 : !s32i, !cir.ptr<!s32i> loc(#loc226)
              cir.yield loc(#loc222)
            } loc(#loc222)
          } loc(#loc222)
        } else {
          %12 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc120)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc120)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc164)
        } loc(#loc220)
      } loc(#loc217)
    } loc(#loc214)
    cir.return loc(#loc122)
  } loc(#loc210)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_negative_01.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":45:23)
#loc6 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":22:1)
#loc7 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":48:1)
#loc8 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":24:5)
#loc9 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":24:9)
#loc10 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":26:13)
#loc11 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":26:12)
#loc12 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":26:5)
#loc13 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":28:13)
#loc14 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":28:12)
#loc15 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":28:5)
#loc16 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":29:5)
#loc17 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":47:5)
#loc18 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":30:9)
#loc19 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":30:13)
#loc20 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":31:9)
#loc21 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":31:30)
#loc22 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":34:9)
#loc23 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":46:9)
#loc24 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":34:13)
#loc25 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":34:20)
#loc26 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":35:9)
#loc27 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":42:9)
#loc28 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":44:9)
#loc29 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":36:28)
#loc30 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":36:20)
#loc31 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":36:13)
#loc32 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":38:13)
#loc33 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":41:13)
#loc34 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":38:21)
#loc35 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":38:17)
#loc36 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":38:24)
#loc37 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":38:28)
#loc38 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":38:26)
#loc39 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":39:13)
#loc40 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":40:37)
#loc41 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":40:30)
#loc42 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":40:17)
#loc43 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":38:33)
#loc44 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":38:32)
#loc45 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":45:13)
#loc46 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":112:1)
#loc47 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":116:1)
#loc48 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":114:5)
#loc49 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":114:13)
#loc50 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":115:5)
#loc51 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":115:13)
#loc52 = loc("/usr/include/stdlib.h":575:1)
#loc53 = loc("/usr/include/stdlib.h":575:41)
#loc54 = loc("/usr/include/time.h":76:1)
#loc55 = loc("/usr/include/time.h":76:38)
#loc56 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":132:15)
#loc57 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":134:15)
#loc58 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":137:15)
#loc59 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":139:15)
#loc60 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":127:1)
#loc61 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":142:1)
#loc66 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":128:1)
#loc67 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":130:27)
#loc68 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":130:22)
#loc69 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":130:5)
#loc70 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":132:5)
#loc71 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":133:5)
#loc72 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":133:55)
#loc73 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":134:5)
#loc74 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":137:5)
#loc75 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":138:5)
#loc76 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":138:54)
#loc77 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":139:5)
#loc78 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":141:12)
#loc79 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":141:5)
#loc80 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":55:1)
#loc81 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":82:1)
#loc82 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":57:5)
#loc83 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":57:9)
#loc84 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":59:13)
#loc85 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":59:12)
#loc86 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":59:5)
#loc87 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":62:12)
#loc88 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":62:5)
#loc89 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":63:5)
#loc90 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":81:5)
#loc91 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":64:9)
#loc92 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":64:13)
#loc93 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":65:9)
#loc94 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":65:30)
#loc95 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":68:9)
#loc96 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":80:9)
#loc97 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":68:13)
#loc98 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":68:20)
#loc99 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":69:9)
#loc100 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":76:9)
#loc101 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":78:9)
#loc102 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":70:28)
#loc103 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":70:20)
#loc104 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":70:13)
#loc105 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":72:13)
#loc106 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":75:13)
#loc107 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":72:21)
#loc108 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":72:17)
#loc109 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":72:24)
#loc110 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":72:28)
#loc111 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":72:26)
#loc112 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":73:13)
#loc113 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":74:37)
#loc114 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":74:30)
#loc115 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":74:17)
#loc116 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":72:33)
#loc117 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":72:32)
#loc118 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":79:23)
#loc119 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":79:13)
#loc120 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":107:23)
#loc121 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":85:1)
#loc122 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":110:1)
#loc123 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":87:5)
#loc124 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":87:9)
#loc125 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":89:13)
#loc126 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":89:12)
#loc127 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":89:5)
#loc128 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":91:13)
#loc129 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":91:12)
#loc130 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":91:5)
#loc131 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":92:5)
#loc132 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":109:5)
#loc133 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":93:9)
#loc134 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":93:13)
#loc135 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":94:9)
#loc136 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":94:30)
#loc137 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":96:9)
#loc138 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":108:9)
#loc139 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":96:13)
#loc140 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":96:21)
#loc141 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":96:23)
#loc142 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":96:26)
#loc143 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":96:34)
#loc144 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":96:36)
#loc145 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":97:9)
#loc146 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":104:9)
#loc147 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":106:9)
#loc148 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":98:28)
#loc149 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":98:20)
#loc150 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":98:13)
#loc151 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":100:13)
#loc152 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":103:13)
#loc153 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":100:21)
#loc154 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":100:17)
#loc155 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":100:24)
#loc156 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":100:28)
#loc157 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":100:26)
#loc158 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":101:13)
#loc159 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":102:37)
#loc160 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":102:30)
#loc161 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":102:17)
#loc162 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":100:33)
#loc163 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":100:32)
#loc164 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":107:13)
#loc165 = loc(fused[#loc1, #loc2])
#loc166 = loc(fused[#loc3, #loc4])
#loc167 = loc(fused[#loc6, #loc7])
#loc168 = loc(fused[#loc8, #loc9])
#loc169 = loc(fused[#loc12, #loc10])
#loc170 = loc(fused[#loc15, #loc13])
#loc171 = loc(fused[#loc16, #loc17])
#loc172 = loc(fused[#loc18, #loc19])
#loc173 = loc(fused[#loc20, #loc21])
#loc174 = loc(fused[#loc22, #loc23])
#loc175 = loc(fused[#loc24, #loc25])
#loc176 = loc(fused[#loc26, #loc27, #loc28, #loc23])
#loc177 = loc(fused[#loc31, #loc29])
#loc178 = loc(fused[#loc32, #loc33])
#loc179 = loc(fused[#loc35, #loc34])
#loc180 = loc(fused[#loc36, #loc37])
#loc181 = loc(fused[#loc39, #loc33])
#loc182 = loc(fused[#loc44, #loc43])
#loc183 = loc(fused[#loc46, #loc47])
#loc184 = loc(fused[#loc48, #loc49])
#loc185 = loc(fused[#loc50, #loc51])
#loc186 = loc(fused[#loc52, #loc53])
#loc187 = loc(fused[#loc54, #loc55])
#loc188 = loc(fused[#loc60, #loc61])
#loc191 = loc(fused[#loc71, #loc72])
#loc192 = loc(fused[#loc75, #loc76])
#loc193 = loc(fused[#loc79, #loc78])
#loc194 = loc(fused[#loc80, #loc81])
#loc195 = loc(fused[#loc82, #loc83])
#loc196 = loc(fused[#loc86, #loc84])
#loc197 = loc(fused[#loc88, #loc87])
#loc198 = loc(fused[#loc89, #loc90])
#loc199 = loc(fused[#loc91, #loc92])
#loc200 = loc(fused[#loc93, #loc94])
#loc201 = loc(fused[#loc95, #loc96])
#loc202 = loc(fused[#loc97, #loc98])
#loc203 = loc(fused[#loc99, #loc100, #loc101, #loc96])
#loc204 = loc(fused[#loc104, #loc102])
#loc205 = loc(fused[#loc105, #loc106])
#loc206 = loc(fused[#loc108, #loc107])
#loc207 = loc(fused[#loc109, #loc110])
#loc208 = loc(fused[#loc112, #loc106])
#loc209 = loc(fused[#loc117, #loc116])
#loc210 = loc(fused[#loc121, #loc122])
#loc211 = loc(fused[#loc123, #loc124])
#loc212 = loc(fused[#loc127, #loc125])
#loc213 = loc(fused[#loc130, #loc128])
#loc214 = loc(fused[#loc131, #loc132])
#loc215 = loc(fused[#loc133, #loc134])
#loc216 = loc(fused[#loc135, #loc136])
#loc217 = loc(fused[#loc137, #loc138])
#loc218 = loc(fused[#loc139, #loc140])
#loc219 = loc(fused[#loc142, #loc144])
#loc220 = loc(fused[#loc145, #loc146, #loc147, #loc138])
#loc221 = loc(fused[#loc150, #loc148])
#loc222 = loc(fused[#loc151, #loc152])
#loc223 = loc(fused[#loc154, #loc153])
#loc224 = loc(fused[#loc155, #loc156])
#loc225 = loc(fused[#loc158, #loc152])
#loc226 = loc(fused[#loc163, #loc162])
