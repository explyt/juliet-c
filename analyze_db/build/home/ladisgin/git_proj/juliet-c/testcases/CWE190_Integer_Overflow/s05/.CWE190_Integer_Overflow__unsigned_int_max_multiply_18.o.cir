!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printUnsignedLine(!u32i) loc(#loc88)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_multiply_18_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc90)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc91)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc9)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc9)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc92)
    cir.br ^bb1 loc(#loc93)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc13)
    %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc13)
    %6 = cir.const #cir.int<2> : !u32i loc(#loc13)
    %7 = cir.binop(mul, %5, %6) : !u32i loc(#loc13)
    %8 = cir.const #cir.int<1> : !u32i loc(#loc13)
    %9 = cir.binop(add, %7, %8) : !u32i loc(#loc13)
    cir.store %9, %1 : !u32i, !cir.ptr<!u32i> loc(#loc94)
    cir.br ^bb2 loc(#loc95)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc96)
  ^bb3:  // pred: ^bb2
    %10 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc19)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc20)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc20)
    %13 = cir.cmp(gt, %10, %12) : !u32i, !cir.bool loc(#loc97)
    cir.brcond %13 ^bb4, ^bb5 loc(#loc98)
  ^bb4:  // pred: ^bb3
    %14 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc22)
    %15 = cir.const #cir.int<2> : !s32i loc(#loc6)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc6)
    %17 = cir.binop(mul, %14, %16) : !u32i loc(#loc99)
    cir.store %17, %0 : !u32i, !cir.ptr<!u32i> loc(#loc90)
    %18 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc23)
    cir.call @printUnsignedLine(%18) : (!u32i) -> () loc(#loc24)
    cir.br ^bb5 loc(#loc18)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc18)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc4)
  } loc(#loc89)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_multiply_18_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc101)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc102)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    cir.return loc(#loc26)
  } loc(#loc100)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc103)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc33)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc105)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc106)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc40)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc40)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc107)
    cir.br ^bb1 loc(#loc108)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc44)
    %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc44)
    %6 = cir.const #cir.int<2> : !u32i loc(#loc44)
    %7 = cir.binop(mul, %5, %6) : !u32i loc(#loc44)
    %8 = cir.const #cir.int<1> : !u32i loc(#loc44)
    %9 = cir.binop(add, %7, %8) : !u32i loc(#loc44)
    cir.store %9, %1 : !u32i, !cir.ptr<!u32i> loc(#loc109)
    cir.br ^bb2 loc(#loc110)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc111)
  ^bb3:  // pred: ^bb2
    %10 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc50)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc51)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc51)
    %13 = cir.cmp(gt, %10, %12) : !u32i, !cir.bool loc(#loc112)
    cir.brcond %13 ^bb4, ^bb10 loc(#loc113)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc114)
  ^bb5:  // pred: ^bb4
    %14 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc55)
    %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc56)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc56)
    %17 = cir.const #cir.int<2> : !u32i loc(#loc56)
    %18 = cir.binop(mul, %16, %17) : !u32i loc(#loc56)
    %19 = cir.const #cir.int<1> : !u32i loc(#loc56)
    %20 = cir.binop(add, %18, %19) : !u32i loc(#loc56)
    %21 = cir.const #cir.int<2> : !s32i loc(#loc57)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc57)
    %23 = cir.binop(div, %20, %22) : !u32i loc(#loc115)
    %24 = cir.cmp(lt, %14, %23) : !u32i, !cir.bool loc(#loc116)
    cir.brcond %24 ^bb6, ^bb7 loc(#loc117)
  ^bb6:  // pred: ^bb5
    %25 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc62)
    %26 = cir.const #cir.int<2> : !s32i loc(#loc37)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc37)
    %28 = cir.binop(mul, %25, %27) : !u32i loc(#loc118)
    cir.store %28, %0 : !u32i, !cir.ptr<!u32i> loc(#loc105)
    %29 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc63)
    cir.call @printUnsignedLine(%29) : (!u32i) -> () loc(#loc64)
    cir.br ^bb8 loc(#loc60)
  ^bb7:  // pred: ^bb5
    %30 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc33)
    %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    cir.br ^bb8 loc(#loc54)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc54)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc49)
  ^bb10:  // 2 preds: ^bb3, ^bb9
    cir.br ^bb11 loc(#loc49)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc35)
  } loc(#loc104)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc120)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc121)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc72)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc72)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc122)
    cir.br ^bb1 loc(#loc123)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<2> : !s32i loc(#loc76)
    %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc76)
    cir.store %5, %1 : !u32i, !cir.ptr<!u32i> loc(#loc124)
    cir.br ^bb2 loc(#loc125)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc126)
  ^bb3:  // pred: ^bb2
    %6 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc82)
    %7 = cir.const #cir.int<0> : !s32i loc(#loc83)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc83)
    %9 = cir.cmp(gt, %6, %8) : !u32i, !cir.bool loc(#loc127)
    cir.brcond %9 ^bb4, ^bb5 loc(#loc128)
  ^bb4:  // pred: ^bb3
    %10 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc85)
    %11 = cir.const #cir.int<2> : !s32i loc(#loc69)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc69)
    %13 = cir.binop(mul, %10, %12) : !u32i loc(#loc129)
    cir.store %13, %0 : !u32i, !cir.ptr<!u32i> loc(#loc120)
    %14 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc86)
    cir.call @printUnsignedLine(%14) : (!u32i) -> () loc(#loc87)
    cir.br ^bb5 loc(#loc81)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc81)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc67)
  } loc(#loc119)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc3 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":38:1)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":35:9)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":35:38)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":24:5)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":24:18)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":25:12)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":25:5)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":26:5)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":26:10)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":29:12)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":29:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":30:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":30:10)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":32:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":37:5)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":32:8)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":32:15)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":33:5)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":35:31)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":36:27)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":36:9)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":89:1)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":93:1)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":91:5)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":91:13)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":92:5)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":92:13)
#loc31 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc32 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":65:23)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":45:1)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":68:1)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":60:13)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":60:42)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":47:5)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":47:18)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":48:12)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":48:5)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":49:5)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":49:10)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":52:12)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":52:5)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":53:5)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":53:10)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":55:5)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":67:5)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":55:8)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":55:15)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":56:5)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":58:9)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":66:9)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":58:13)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":58:21)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":58:30)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":58:31)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":59:9)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":62:9)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":64:9)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":60:35)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":61:31)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":61:13)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":65:13)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":71:1)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":87:1)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":84:9)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":84:38)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":73:5)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":73:18)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":74:12)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":74:5)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":75:5)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":75:10)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":78:12)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":78:5)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":79:5)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":79:10)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":81:5)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":86:5)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":81:8)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":81:15)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":82:5)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":84:31)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":85:27)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_18.c":85:9)
#loc88 = loc(fused[#loc1, #loc2])
#loc89 = loc(fused[#loc3, #loc4])
#loc90 = loc(fused[#loc5, #loc6])
#loc91 = loc(fused[#loc7, #loc8])
#loc92 = loc(fused[#loc10, #loc9])
#loc93 = loc(fused[#loc11, #loc12])
#loc94 = loc(fused[#loc14, #loc13])
#loc95 = loc(fused[#loc15, #loc16])
#loc96 = loc(fused[#loc17, #loc18])
#loc97 = loc(fused[#loc19, #loc20])
#loc98 = loc(fused[#loc21, #loc18])
#loc99 = loc(fused[#loc22, #loc6])
#loc100 = loc(fused[#loc25, #loc26])
#loc101 = loc(fused[#loc27, #loc28])
#loc102 = loc(fused[#loc29, #loc30])
#loc103 = loc(fused[#loc31, #loc32])
#loc104 = loc(fused[#loc34, #loc35])
#loc105 = loc(fused[#loc36, #loc37])
#loc106 = loc(fused[#loc38, #loc39])
#loc107 = loc(fused[#loc41, #loc40])
#loc108 = loc(fused[#loc42, #loc43])
#loc109 = loc(fused[#loc45, #loc44])
#loc110 = loc(fused[#loc46, #loc47])
#loc111 = loc(fused[#loc48, #loc49])
#loc112 = loc(fused[#loc50, #loc51])
#loc113 = loc(fused[#loc52, #loc49])
#loc114 = loc(fused[#loc53, #loc54])
#loc115 = loc(fused[#loc56, #loc57])
#loc116 = loc(fused[#loc55, #loc58])
#loc117 = loc(fused[#loc59, #loc60, #loc61, #loc54])
#loc118 = loc(fused[#loc62, #loc37])
#loc119 = loc(fused[#loc66, #loc67])
#loc120 = loc(fused[#loc68, #loc69])
#loc121 = loc(fused[#loc70, #loc71])
#loc122 = loc(fused[#loc73, #loc72])
#loc123 = loc(fused[#loc74, #loc75])
#loc124 = loc(fused[#loc77, #loc76])
#loc125 = loc(fused[#loc78, #loc79])
#loc126 = loc(fused[#loc80, #loc81])
#loc127 = loc(fused[#loc82, #loc83])
#loc128 = loc(fused[#loc84, #loc81])
#loc129 = loc(fused[#loc85, #loc69])
