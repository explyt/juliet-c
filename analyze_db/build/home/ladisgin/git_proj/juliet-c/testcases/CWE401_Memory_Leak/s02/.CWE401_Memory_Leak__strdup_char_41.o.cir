!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc11 = loc("CWE401_Memory_Leak__strdup_char_41.c":24:21)
#loc12 = loc("CWE401_Memory_Leak__strdup_char_41.c":24:28)
#loc40 = loc("CWE401_Memory_Leak__strdup_char_41.c":70:25)
#loc41 = loc("CWE401_Memory_Leak__strdup_char_41.c":70:32)
#loc66 = loc("CWE401_Memory_Leak__strdup_char_41.c":50:25)
#loc67 = loc("CWE401_Memory_Leak__strdup_char_41.c":50:32)
#loc88 = loc(fused[#loc11, #loc12])
#loc99 = loc(fused[#loc40, #loc41])
#loc107 = loc(fused[#loc66, #loc67])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s02/CWE401_Memory_Leak__strdup_char_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const.goodB2G.myString = #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc83)
  cir.global "private" constant cir_private @__const.CWE401_Memory_Leak__strdup_char_41_bad.myString = #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc84)
  cir.func private @strdup(!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc85)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc86)
  cir.func internal private @badSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc11, #loc12])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc88)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc13)
    cir.return loc(#loc10)
  } loc(#loc87)
  cir.func no_proto @CWE401_Memory_Leak__strdup_char_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc84)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc90)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc18)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc91)
    cir.br ^bb1 loc(#loc92)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @__const.CWE401_Memory_Leak__strdup_char_41_bad.myString : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc84)
    cir.copy %3 to %0 : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc84)
    %4 = cir.get_global @strdup : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>)>> loc(#loc22)
    %5 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc23)
    %6 = cir.call @strdup(%5) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc22)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc93)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc26)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc27)
    cir.br ^bb2 loc(#loc21)
  ^bb2:  // pred: ^bb1
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
    cir.call @badSink(%8) : (!cir.ptr<!s8i>) -> () loc(#loc29)
    cir.return loc(#loc15)
  } loc(#loc89)
  cir.func no_proto @CWE401_Memory_Leak__strdup_char_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc95)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc96)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc94)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc97)
  cir.func internal private @goodB2GSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc40, #loc41])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc99)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc42)
    %1 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc43)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc44)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc44)
    cir.call @free(%3) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc43)
    cir.return loc(#loc39)
  } loc(#loc98)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc83)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc101)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc49)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc102)
    cir.br ^bb1 loc(#loc103)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @__const.goodB2G.myString : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc83)
    cir.copy %3 to %0 : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc83)
    %4 = cir.get_global @strdup : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>)>> loc(#loc53)
    %5 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc54)
    %6 = cir.call @strdup(%5) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc53)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc104)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    cir.br ^bb2 loc(#loc52)
  ^bb2:  // pred: ^bb1
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
    cir.call @goodB2GSink(%8) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    cir.return loc(#loc46)
  } loc(#loc100)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc105)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"a string\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc63)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc66, #loc67])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc107)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc68)
    cir.return loc(#loc65)
  } loc(#loc106)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc109)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc73)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc110)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc75)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc75)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc75)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc75)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc75)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc75)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc75)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc111)
    %9 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc77)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc63)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc63)
    %13 = cir.call @strcpy(%10, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc77)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc81)
    cir.call @goodG2BSink(%15) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    cir.return loc(#loc70)
  } loc(#loc108)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s02/CWE401_Memory_Leak__strdup_char_41.c":0:0)
#loc1 = loc("CWE401_Memory_Leak__strdup_char_41.c":81:9)
#loc2 = loc("CWE401_Memory_Leak__strdup_char_41.c":81:27)
#loc3 = loc("CWE401_Memory_Leak__strdup_char_41.c":36:9)
#loc4 = loc("CWE401_Memory_Leak__strdup_char_41.c":36:27)
#loc5 = loc("/usr/include/string.h":187:1)
#loc6 = loc("/usr/include/string.h":188:35)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE401_Memory_Leak__strdup_char_41.c":24:1)
#loc10 = loc("CWE401_Memory_Leak__strdup_char_41.c":29:1)
#loc13 = loc("CWE401_Memory_Leak__strdup_char_41.c":25:1)
#loc14 = loc("CWE401_Memory_Leak__strdup_char_41.c":31:1)
#loc15 = loc("CWE401_Memory_Leak__strdup_char_41.c":43:1)
#loc16 = loc("CWE401_Memory_Leak__strdup_char_41.c":33:5)
#loc17 = loc("CWE401_Memory_Leak__strdup_char_41.c":33:12)
#loc18 = loc("CWE401_Memory_Leak__strdup_char_41.c":34:12)
#loc19 = loc("CWE401_Memory_Leak__strdup_char_41.c":34:5)
#loc20 = loc("CWE401_Memory_Leak__strdup_char_41.c":35:5)
#loc21 = loc("CWE401_Memory_Leak__strdup_char_41.c":41:5)
#loc22 = loc("CWE401_Memory_Leak__strdup_char_41.c":38:16)
#loc23 = loc("CWE401_Memory_Leak__strdup_char_41.c":38:23)
#loc24 = loc("CWE401_Memory_Leak__strdup_char_41.c":38:9)
#loc25 = loc("CWE401_Memory_Leak__strdup_char_41.c":38:31)
#loc26 = loc("CWE401_Memory_Leak__strdup_char_41.c":40:19)
#loc27 = loc("CWE401_Memory_Leak__strdup_char_41.c":40:9)
#loc28 = loc("CWE401_Memory_Leak__strdup_char_41.c":42:13)
#loc29 = loc("CWE401_Memory_Leak__strdup_char_41.c":42:5)
#loc30 = loc("CWE401_Memory_Leak__strdup_char_41.c":90:1)
#loc31 = loc("CWE401_Memory_Leak__strdup_char_41.c":94:1)
#loc32 = loc("CWE401_Memory_Leak__strdup_char_41.c":92:5)
#loc33 = loc("CWE401_Memory_Leak__strdup_char_41.c":92:13)
#loc34 = loc("CWE401_Memory_Leak__strdup_char_41.c":93:5)
#loc35 = loc("CWE401_Memory_Leak__strdup_char_41.c":93:13)
#loc36 = loc("/usr/include/stdlib.h":687:1)
#loc37 = loc("/usr/include/stdlib.h":687:32)
#loc38 = loc("CWE401_Memory_Leak__strdup_char_41.c":70:1)
#loc39 = loc("CWE401_Memory_Leak__strdup_char_41.c":74:1)
#loc42 = loc("CWE401_Memory_Leak__strdup_char_41.c":71:1)
#loc43 = loc("CWE401_Memory_Leak__strdup_char_41.c":73:5)
#loc44 = loc("CWE401_Memory_Leak__strdup_char_41.c":73:10)
#loc45 = loc("CWE401_Memory_Leak__strdup_char_41.c":76:1)
#loc46 = loc("CWE401_Memory_Leak__strdup_char_41.c":88:1)
#loc47 = loc("CWE401_Memory_Leak__strdup_char_41.c":78:5)
#loc48 = loc("CWE401_Memory_Leak__strdup_char_41.c":78:12)
#loc49 = loc("CWE401_Memory_Leak__strdup_char_41.c":79:12)
#loc50 = loc("CWE401_Memory_Leak__strdup_char_41.c":79:5)
#loc51 = loc("CWE401_Memory_Leak__strdup_char_41.c":80:5)
#loc52 = loc("CWE401_Memory_Leak__strdup_char_41.c":86:5)
#loc53 = loc("CWE401_Memory_Leak__strdup_char_41.c":83:16)
#loc54 = loc("CWE401_Memory_Leak__strdup_char_41.c":83:23)
#loc55 = loc("CWE401_Memory_Leak__strdup_char_41.c":83:9)
#loc56 = loc("CWE401_Memory_Leak__strdup_char_41.c":83:31)
#loc57 = loc("CWE401_Memory_Leak__strdup_char_41.c":85:19)
#loc58 = loc("CWE401_Memory_Leak__strdup_char_41.c":85:9)
#loc59 = loc("CWE401_Memory_Leak__strdup_char_41.c":87:17)
#loc60 = loc("CWE401_Memory_Leak__strdup_char_41.c":87:5)
#loc61 = loc("/usr/include/string.h":141:1)
#loc62 = loc("/usr/include/string.h":142:14)
#loc63 = loc("CWE401_Memory_Leak__strdup_char_41.c":64:18)
#loc64 = loc("CWE401_Memory_Leak__strdup_char_41.c":50:1)
#loc65 = loc("CWE401_Memory_Leak__strdup_char_41.c":55:1)
#loc68 = loc("CWE401_Memory_Leak__strdup_char_41.c":51:1)
#loc69 = loc("CWE401_Memory_Leak__strdup_char_41.c":57:1)
#loc70 = loc("CWE401_Memory_Leak__strdup_char_41.c":67:1)
#loc71 = loc("CWE401_Memory_Leak__strdup_char_41.c":59:5)
#loc72 = loc("CWE401_Memory_Leak__strdup_char_41.c":59:12)
#loc73 = loc("CWE401_Memory_Leak__strdup_char_41.c":60:12)
#loc74 = loc("CWE401_Memory_Leak__strdup_char_41.c":60:5)
#loc75 = loc("CWE401_Memory_Leak__strdup_char_41.c":62:20)
#loc76 = loc("CWE401_Memory_Leak__strdup_char_41.c":62:5)
#loc77 = loc("CWE401_Memory_Leak__strdup_char_41.c":64:5)
#loc78 = loc("CWE401_Memory_Leak__strdup_char_41.c":64:12)
#loc79 = loc("CWE401_Memory_Leak__strdup_char_41.c":65:15)
#loc80 = loc("CWE401_Memory_Leak__strdup_char_41.c":65:5)
#loc81 = loc("CWE401_Memory_Leak__strdup_char_41.c":66:17)
#loc82 = loc("CWE401_Memory_Leak__strdup_char_41.c":66:5)
#loc83 = loc(fused[#loc1, #loc2])
#loc84 = loc(fused[#loc3, #loc4])
#loc85 = loc(fused[#loc5, #loc6])
#loc86 = loc(fused[#loc7, #loc8])
#loc87 = loc(fused[#loc9, #loc10])
#loc89 = loc(fused[#loc14, #loc15])
#loc90 = loc(fused[#loc16, #loc17])
#loc91 = loc(fused[#loc19, #loc18])
#loc92 = loc(fused[#loc20, #loc21])
#loc93 = loc(fused[#loc24, #loc25])
#loc94 = loc(fused[#loc30, #loc31])
#loc95 = loc(fused[#loc32, #loc33])
#loc96 = loc(fused[#loc34, #loc35])
#loc97 = loc(fused[#loc36, #loc37])
#loc98 = loc(fused[#loc38, #loc39])
#loc100 = loc(fused[#loc45, #loc46])
#loc101 = loc(fused[#loc47, #loc48])
#loc102 = loc(fused[#loc50, #loc49])
#loc103 = loc(fused[#loc51, #loc52])
#loc104 = loc(fused[#loc55, #loc56])
#loc105 = loc(fused[#loc61, #loc62])
#loc106 = loc(fused[#loc64, #loc65])
#loc108 = loc(fused[#loc69, #loc70])
#loc109 = loc(fused[#loc71, #loc72])
#loc110 = loc(fused[#loc74, #loc73])
#loc111 = loc(fused[#loc76, #loc75])
