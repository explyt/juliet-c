!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_09.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  constant external @GLOBAL_CONST_TRUE : !s32i {alignment = 4 : i64} loc(#loc212)
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc213)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc214)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Hello\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_for_loop_09_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc216)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc212)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc17)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc19)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc19)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc19)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc19)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc19)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc19)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc19)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc19)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc19)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc19)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc19)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc19)
          cir.yield %23 : !u32i loc(#loc19)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc19)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc19)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc19)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc19)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc19)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc19)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc19)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc19)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc19)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc19)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc19)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc19)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc19)
          cir.yield %27 : !u32i loc(#loc19)
        }) : (!cir.bool) -> !u32i loc(#loc19)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc19)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc220)
      } loc(#loc219)
    } loc(#loc218)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc212)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc23)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc23)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc224)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc28)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc28)
          cir.store %8, %6 : !u64i, !cir.ptr<!u64i> loc(#loc224)
          cir.scope {
            %9 = cir.const #cir.int<0> : !s32i loc(#loc31)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc31)
            cir.store %10, %6 : !u64i, !cir.ptr<!u64i> loc(#loc226)
            cir.for : cond {
              %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc33)
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc34)
              %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc34)
              %14 = cir.cmp(lt, %11, %13) : !u64i, !s32i loc(#loc227)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc35)
              cir.condition(%15) loc(#loc35)
            } body {
              cir.scope {
                %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc7)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc7)
                cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc37)
              } loc(#loc228)
              cir.yield loc(#loc30)
            } step {
              %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc38)
              %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc39)
              cir.store %12, %6 : !u64i, !cir.ptr<!u64i> loc(#loc229)
              cir.yield loc(#loc225)
            } loc(#loc225)
          } loc(#loc225)
        } loc(#loc223)
      } loc(#loc222)
    } loc(#loc221)
    cir.return loc(#loc9)
  } loc(#loc215)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_for_loop_09_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc231)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc232)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc233)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc234)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    cir.return loc(#loc41)
  } loc(#loc230)
  cir.global "private"  constant external @GLOBAL_CONST_FALSE : !s32i {alignment = 4 : i64} loc(#loc235)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc52)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc237)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc58)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc238)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc212)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc62)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc62)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc64)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc64)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc64)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc64)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc64)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc64)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc64)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc64)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc64)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc64)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc64)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc64)
          cir.yield %23 : !u32i loc(#loc64)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc64)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc64)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc64)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc64)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc64)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc64)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc64)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc64)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc64)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc64)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc64)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc64)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc64)
          cir.yield %27 : !u32i loc(#loc64)
        }) : (!cir.bool) -> !u32i loc(#loc64)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc64)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc241)
      } loc(#loc240)
    } loc(#loc239)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc235)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc68)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc68)
      cir.if %5 {
        %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc52)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc52)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc72)
      } else {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc245)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc76)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc76)
          cir.store %8, %6 : !u64i, !cir.ptr<!u64i> loc(#loc245)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc80)
            %11 = cir.cmp(gt, %9, %10) : !s32i, !s32i loc(#loc247)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc81)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc83)
              %15 = cir.const #cir.int<20> : !s32i loc(#loc84)
              %16 = cir.cmp(le, %14, %15) : !s32i, !s32i loc(#loc248)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc85)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc82)
                cir.yield %19 : !cir.bool loc(#loc82)
              }, false {
                %19 = cir.const #false loc(#loc82)
                cir.yield %19 : !cir.bool loc(#loc82)
              }) : (!cir.bool) -> !cir.bool loc(#loc82)
              cir.yield %18 : !cir.bool loc(#loc82)
            }, false {
              %14 = cir.const #false loc(#loc82)
              cir.yield %14 : !cir.bool loc(#loc82)
            }) : (!cir.bool) -> !cir.bool loc(#loc82)
            cir.if %13 {
              cir.scope {
                %14 = cir.const #cir.int<0> : !s32i loc(#loc89)
                %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc89)
                cir.store %15, %6 : !u64i, !cir.ptr<!u64i> loc(#loc251)
                cir.for : cond {
                  %16 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc91)
                  %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc92)
                  %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc92)
                  %19 = cir.cmp(lt, %16, %18) : !u64i, !s32i loc(#loc252)
                  %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc93)
                  cir.condition(%20) loc(#loc93)
                } body {
                  cir.scope {
                    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc95)
                    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc95)
                    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc96)
                  } loc(#loc253)
                  cir.yield loc(#loc88)
                } step {
                  %16 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc97)
                  %17 = cir.unary(inc, %16) : !u64i, !u64i loc(#loc98)
                  cir.store %17, %6 : !u64i, !cir.ptr<!u64i> loc(#loc254)
                  cir.yield loc(#loc250)
                } loc(#loc250)
              } loc(#loc250)
            } loc(#loc249)
          } loc(#loc246)
        } loc(#loc244)
      } loc(#loc243)
    } loc(#loc242)
    cir.return loc(#loc54)
  } loc(#loc236)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc256)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc103)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc104)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc257)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc212)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc108)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc108)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc110)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc110)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc110)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc110)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc110)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc110)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc110)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc110)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc110)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc110)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc110)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc110)
          cir.yield %23 : !u32i loc(#loc110)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc110)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc110)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc110)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc110)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc110)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc110)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc110)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc110)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc110)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc110)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc110)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc110)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc110)
          cir.yield %27 : !u32i loc(#loc110)
        }) : (!cir.bool) -> !u32i loc(#loc110)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc110)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc260)
      } loc(#loc259)
    } loc(#loc258)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc212)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc114)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc114)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc264)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc119)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc119)
          cir.store %8, %6 : !u64i, !cir.ptr<!u64i> loc(#loc264)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc123)
            %11 = cir.cmp(gt, %9, %10) : !s32i, !s32i loc(#loc266)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc124)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc126)
              %15 = cir.const #cir.int<20> : !s32i loc(#loc127)
              %16 = cir.cmp(le, %14, %15) : !s32i, !s32i loc(#loc267)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc128)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc125)
                cir.yield %19 : !cir.bool loc(#loc125)
              }, false {
                %19 = cir.const #false loc(#loc125)
                cir.yield %19 : !cir.bool loc(#loc125)
              }) : (!cir.bool) -> !cir.bool loc(#loc125)
              cir.yield %18 : !cir.bool loc(#loc125)
            }, false {
              %14 = cir.const #false loc(#loc125)
              cir.yield %14 : !cir.bool loc(#loc125)
            }) : (!cir.bool) -> !cir.bool loc(#loc125)
            cir.if %13 {
              cir.scope {
                %14 = cir.const #cir.int<0> : !s32i loc(#loc132)
                %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc132)
                cir.store %15, %6 : !u64i, !cir.ptr<!u64i> loc(#loc270)
                cir.for : cond {
                  %16 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc134)
                  %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc135)
                  %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc135)
                  %19 = cir.cmp(lt, %16, %18) : !u64i, !s32i loc(#loc271)
                  %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc136)
                  cir.condition(%20) loc(#loc136)
                } body {
                  cir.scope {
                    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc138)
                    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc138)
                    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc139)
                  } loc(#loc272)
                  cir.yield loc(#loc131)
                } step {
                  %16 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc140)
                  %17 = cir.unary(inc, %16) : !u64i, !u64i loc(#loc141)
                  cir.store %17, %6 : !u64i, !cir.ptr<!u64i> loc(#loc273)
                  cir.yield loc(#loc269)
                } loc(#loc269)
              } loc(#loc269)
            } loc(#loc268)
          } loc(#loc265)
        } loc(#loc263)
      } loc(#loc262)
    } loc(#loc261)
    cir.return loc(#loc100)
  } loc(#loc255)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc275)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc146)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc147)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc276)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc235)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc151)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc151)
      cir.if %5 {
        %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc155)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc155)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc156)
      } else {
        %6 = cir.const #cir.int<20> : !s32i loc(#loc157)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc279)
      } loc(#loc278)
    } loc(#loc277)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc212)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc161)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc161)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc283)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc166)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc166)
          cir.store %8, %6 : !u64i, !cir.ptr<!u64i> loc(#loc283)
          cir.scope {
            %9 = cir.const #cir.int<0> : !s32i loc(#loc169)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc169)
            cir.store %10, %6 : !u64i, !cir.ptr<!u64i> loc(#loc285)
            cir.for : cond {
              %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc171)
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc172)
              %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc172)
              %14 = cir.cmp(lt, %11, %13) : !u64i, !s32i loc(#loc286)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc173)
              cir.condition(%15) loc(#loc173)
            } body {
              cir.scope {
                %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc175)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc175)
                cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc176)
              } loc(#loc287)
              cir.yield loc(#loc168)
            } step {
              %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc177)
              %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc178)
              cir.store %12, %6 : !u64i, !cir.ptr<!u64i> loc(#loc288)
              cir.yield loc(#loc284)
            } loc(#loc284)
          } loc(#loc284)
        } loc(#loc282)
      } loc(#loc281)
    } loc(#loc280)
    cir.return loc(#loc143)
  } loc(#loc274)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc290)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc183)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc184)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc291)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc212)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc188)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc188)
      cir.if %5 {
        %6 = cir.const #cir.int<20> : !s32i loc(#loc190)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc294)
      } loc(#loc293)
    } loc(#loc292)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc212)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc194)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc194)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc298)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc199)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc199)
          cir.store %8, %6 : !u64i, !cir.ptr<!u64i> loc(#loc298)
          cir.scope {
            %9 = cir.const #cir.int<0> : !s32i loc(#loc202)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc202)
            cir.store %10, %6 : !u64i, !cir.ptr<!u64i> loc(#loc300)
            cir.for : cond {
              %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc204)
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc205)
              %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc205)
              %14 = cir.cmp(lt, %11, %13) : !u64i, !s32i loc(#loc301)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc206)
              cir.condition(%15) loc(#loc206)
            } body {
              cir.scope {
                %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc208)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc208)
                cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc209)
              } loc(#loc302)
              cir.yield loc(#loc201)
            } step {
              %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc210)
              %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc211)
              cir.store %12, %6 : !u64i, !cir.ptr<!u64i> loc(#loc303)
              cir.yield loc(#loc299)
            } loc(#loc299)
          } loc(#loc299)
        } loc(#loc297)
      } loc(#loc296)
    } loc(#loc295)
    cir.return loc(#loc180)
  } loc(#loc289)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_09.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":109:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":109:18)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":39:27)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":22:1)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":43:1)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":24:5)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":24:9)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":26:14)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":26:13)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":26:5)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":27:5)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":31:5)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":27:8)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":28:5)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":30:17)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":30:9)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":32:5)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":42:5)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":32:8)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":33:5)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":34:9)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":41:9)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":35:13)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":35:24)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":37:13)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":40:13)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":37:22)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":37:18)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":37:25)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":37:37)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":37:27)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":38:13)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":39:17)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":37:45)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":37:44)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":161:1)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":167:1)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":163:5)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":163:14)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":164:5)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":164:14)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":165:5)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":165:14)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":166:5)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":166:14)
#loc50 = loc("../../../testcasesupport/std_testcase.h":110:1)
#loc51 = loc("../../../testcasesupport/std_testcase.h":110:18)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":63:19)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":50:1)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":79:1)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":52:5)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":52:9)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":54:14)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":54:13)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":54:5)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":55:5)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":59:5)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":55:8)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":56:5)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":58:17)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":58:9)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":60:5)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":78:5)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":60:8)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":61:5)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":64:5)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":66:5)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":63:9)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":67:9)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":77:9)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":68:13)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":68:24)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":70:13)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":76:13)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":70:17)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":70:25)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":70:23)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":70:27)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":70:30)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":70:39)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":70:36)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":71:13)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":72:17)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":75:17)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":72:26)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":72:22)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":72:29)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":72:41)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":72:31)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":73:17)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":74:31)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":74:21)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":72:49)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":72:48)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":82:1)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":106:1)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":84:5)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":84:9)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":86:14)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":86:13)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":86:5)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":87:5)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":91:5)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":87:8)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":88:5)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":90:17)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":90:9)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":92:5)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":105:5)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":92:8)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":93:5)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":94:9)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":104:9)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":95:13)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":95:24)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":97:13)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":103:13)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":97:17)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":97:25)
#loc124 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":97:23)
#loc125 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":97:27)
#loc126 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":97:30)
#loc127 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":97:39)
#loc128 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":97:36)
#loc129 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":98:13)
#loc130 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":99:17)
#loc131 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":102:17)
#loc132 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":99:26)
#loc133 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":99:22)
#loc134 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":99:29)
#loc135 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":99:41)
#loc136 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":99:31)
#loc137 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":100:17)
#loc138 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":101:31)
#loc139 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":101:21)
#loc140 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":99:49)
#loc141 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":99:48)
#loc142 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":109:1)
#loc143 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":135:1)
#loc144 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":111:5)
#loc145 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":111:9)
#loc146 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":113:14)
#loc147 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":113:13)
#loc148 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":113:5)
#loc149 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":114:5)
#loc150 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":123:5)
#loc151 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":114:8)
#loc152 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":115:5)
#loc153 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":118:5)
#loc154 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":120:5)
#loc155 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":117:19)
#loc156 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":117:9)
#loc157 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":122:17)
#loc158 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":122:9)
#loc159 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":124:5)
#loc160 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":134:5)
#loc161 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":124:8)
#loc162 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":125:5)
#loc163 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":126:9)
#loc164 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":133:9)
#loc165 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":127:13)
#loc166 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":127:24)
#loc167 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":129:13)
#loc168 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":132:13)
#loc169 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":129:22)
#loc170 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":129:18)
#loc171 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":129:25)
#loc172 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":129:37)
#loc173 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":129:27)
#loc174 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":130:13)
#loc175 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":131:27)
#loc176 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":131:17)
#loc177 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":129:45)
#loc178 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":129:44)
#loc179 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":138:1)
#loc180 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":159:1)
#loc181 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":140:5)
#loc182 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":140:9)
#loc183 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":142:14)
#loc184 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":142:13)
#loc185 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":142:5)
#loc186 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":143:5)
#loc187 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":147:5)
#loc188 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":143:8)
#loc189 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":144:5)
#loc190 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":146:17)
#loc191 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":146:9)
#loc192 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":148:5)
#loc193 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":158:5)
#loc194 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":148:8)
#loc195 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":149:5)
#loc196 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":150:9)
#loc197 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":157:9)
#loc198 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":151:13)
#loc199 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":151:24)
#loc200 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":153:13)
#loc201 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":156:13)
#loc202 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":153:22)
#loc203 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":153:18)
#loc204 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":153:25)
#loc205 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":153:37)
#loc206 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":153:27)
#loc207 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":154:13)
#loc208 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":155:27)
#loc209 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":155:17)
#loc210 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":153:45)
#loc211 = loc("CWE400_Resource_Exhaustion__rand_for_loop_09.c":153:44)
#loc212 = loc(fused[#loc1, #loc2])
#loc213 = loc(fused[#loc3, #loc4])
#loc214 = loc(fused[#loc5, #loc6])
#loc215 = loc(fused[#loc8, #loc9])
#loc216 = loc(fused[#loc10, #loc11])
#loc217 = loc(fused[#loc14, #loc12])
#loc218 = loc(fused[#loc15, #loc16])
#loc219 = loc(fused[#loc18, #loc16])
#loc220 = loc(fused[#loc20, #loc19])
#loc221 = loc(fused[#loc21, #loc22])
#loc222 = loc(fused[#loc24, #loc22])
#loc223 = loc(fused[#loc25, #loc26])
#loc224 = loc(fused[#loc27, #loc28])
#loc225 = loc(fused[#loc29, #loc30])
#loc226 = loc(fused[#loc32, #loc31])
#loc227 = loc(fused[#loc33, #loc34])
#loc228 = loc(fused[#loc36, #loc30])
#loc229 = loc(fused[#loc39, #loc38])
#loc230 = loc(fused[#loc40, #loc41])
#loc231 = loc(fused[#loc42, #loc43])
#loc232 = loc(fused[#loc44, #loc45])
#loc233 = loc(fused[#loc46, #loc47])
#loc234 = loc(fused[#loc48, #loc49])
#loc235 = loc(fused[#loc50, #loc51])
#loc236 = loc(fused[#loc53, #loc54])
#loc237 = loc(fused[#loc55, #loc56])
#loc238 = loc(fused[#loc59, #loc57])
#loc239 = loc(fused[#loc60, #loc61])
#loc240 = loc(fused[#loc63, #loc61])
#loc241 = loc(fused[#loc65, #loc64])
#loc242 = loc(fused[#loc66, #loc67])
#loc243 = loc(fused[#loc69, #loc70, #loc71, #loc67])
#loc244 = loc(fused[#loc73, #loc74])
#loc245 = loc(fused[#loc75, #loc76])
#loc246 = loc(fused[#loc77, #loc78])
#loc247 = loc(fused[#loc79, #loc80])
#loc248 = loc(fused[#loc83, #loc84])
#loc249 = loc(fused[#loc86, #loc78])
#loc250 = loc(fused[#loc87, #loc88])
#loc251 = loc(fused[#loc90, #loc89])
#loc252 = loc(fused[#loc91, #loc92])
#loc253 = loc(fused[#loc94, #loc88])
#loc254 = loc(fused[#loc98, #loc97])
#loc255 = loc(fused[#loc99, #loc100])
#loc256 = loc(fused[#loc101, #loc102])
#loc257 = loc(fused[#loc105, #loc103])
#loc258 = loc(fused[#loc106, #loc107])
#loc259 = loc(fused[#loc109, #loc107])
#loc260 = loc(fused[#loc111, #loc110])
#loc261 = loc(fused[#loc112, #loc113])
#loc262 = loc(fused[#loc115, #loc113])
#loc263 = loc(fused[#loc116, #loc117])
#loc264 = loc(fused[#loc118, #loc119])
#loc265 = loc(fused[#loc120, #loc121])
#loc266 = loc(fused[#loc122, #loc123])
#loc267 = loc(fused[#loc126, #loc127])
#loc268 = loc(fused[#loc129, #loc121])
#loc269 = loc(fused[#loc130, #loc131])
#loc270 = loc(fused[#loc133, #loc132])
#loc271 = loc(fused[#loc134, #loc135])
#loc272 = loc(fused[#loc137, #loc131])
#loc273 = loc(fused[#loc141, #loc140])
#loc274 = loc(fused[#loc142, #loc143])
#loc275 = loc(fused[#loc144, #loc145])
#loc276 = loc(fused[#loc148, #loc146])
#loc277 = loc(fused[#loc149, #loc150])
#loc278 = loc(fused[#loc152, #loc153, #loc154, #loc150])
#loc279 = loc(fused[#loc158, #loc157])
#loc280 = loc(fused[#loc159, #loc160])
#loc281 = loc(fused[#loc162, #loc160])
#loc282 = loc(fused[#loc163, #loc164])
#loc283 = loc(fused[#loc165, #loc166])
#loc284 = loc(fused[#loc167, #loc168])
#loc285 = loc(fused[#loc170, #loc169])
#loc286 = loc(fused[#loc171, #loc172])
#loc287 = loc(fused[#loc174, #loc168])
#loc288 = loc(fused[#loc178, #loc177])
#loc289 = loc(fused[#loc179, #loc180])
#loc290 = loc(fused[#loc181, #loc182])
#loc291 = loc(fused[#loc185, #loc183])
#loc292 = loc(fused[#loc186, #loc187])
#loc293 = loc(fused[#loc189, #loc187])
#loc294 = loc(fused[#loc191, #loc190])
#loc295 = loc(fused[#loc192, #loc193])
#loc296 = loc(fused[#loc195, #loc193])
#loc297 = loc(fused[#loc196, #loc197])
#loc298 = loc(fused[#loc198, #loc199])
#loc299 = loc(fused[#loc200, #loc201])
#loc300 = loc(fused[#loc203, #loc202])
#loc301 = loc(fused[#loc204, #loc205])
#loc302 = loc(fused[#loc207, #loc201])
#loc303 = loc(fused[#loc211, #loc210])
