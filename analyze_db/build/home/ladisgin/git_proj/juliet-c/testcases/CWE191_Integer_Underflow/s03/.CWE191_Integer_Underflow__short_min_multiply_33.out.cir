!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc103 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":110:10)
#loc104 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":110:14)
#loc105 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":110:20)
#loc106 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":110:32)
#loc162 = loc(fused[#loc103, #loc104])
#loc163 = loc(fused[#loc105, #loc106])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_min_multiply_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc119)
  cir.func @_ZN47CWE191_Integer_Underflow__short_min_multiply_333badEv() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc121)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc122)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc123)
    %3 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc124)
    cir.store %2, %3 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc12)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc13)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc13)
    cir.store %5, %2 : !s16i, !cir.ptr<!s16i> loc(#loc125)
    %6 = cir.const #cir.int<32767> : !s32i loc(#loc15)
    %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc15)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc15)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc15)
    cir.store %10, %2 : !s16i, !cir.ptr<!s16i> loc(#loc126)
    cir.br ^bb1 loc(#loc127)
  ^bb1:  // pred: ^bb0
    %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc6)
    %12 = cir.load %11 : !cir.ptr<!s16i>, !s16i loc(#loc6)
    cir.store %12, %0 : !s16i, !cir.ptr<!s16i> loc(#loc121)
    cir.br ^bb2 loc(#loc128)
  ^bb2:  // pred: ^bb1
    %13 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc21)
    %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc21)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc22)
    %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc129)
    cir.brcond %16 ^bb3, ^bb4 loc(#loc130)
  ^bb3:  // pred: ^bb2
    %17 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc24)
    %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc24)
    %19 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %20 = cir.binop(mul, %18, %19) nsw : !s32i loc(#loc24)
    %21 = cir.cast(integral, %20 : !s32i), !s16i loc(#loc24)
    cir.store %21, %1 : !s16i, !cir.ptr<!s16i> loc(#loc122)
    %22 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc25)
    %23 = cir.cast(integral, %22 : !s16i), !s32i loc(#loc25)
    cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc26)
    cir.br ^bb4 loc(#loc20)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc20)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc18)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc4)
  } loc(#loc120)
  cir.func internal private @_ZN47CWE191_Integer_Underflow__short_min_multiply_33L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc132)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc133)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc134)
    %3 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc135)
    cir.store %2, %3 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc36)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc37)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc37)
    cir.store %5, %2 : !s16i, !cir.ptr<!s16i> loc(#loc136)
    %6 = cir.const #cir.int<2> : !s32i loc(#loc39)
    %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc40)
    %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc40)
    cir.store %8, %2 : !s16i, !cir.ptr<!s16i> loc(#loc137)
    cir.br ^bb1 loc(#loc138)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %3 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc30)
    %10 = cir.load %9 : !cir.ptr<!s16i>, !s16i loc(#loc30)
    cir.store %10, %0 : !s16i, !cir.ptr<!s16i> loc(#loc132)
    cir.br ^bb2 loc(#loc139)
  ^bb2:  // pred: ^bb1
    %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc46)
    %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc46)
    %13 = cir.const #cir.int<0> : !s32i loc(#loc47)
    %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc140)
    cir.brcond %14 ^bb3, ^bb4 loc(#loc141)
  ^bb3:  // pred: ^bb2
    %15 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc49)
    %16 = cir.cast(integral, %15 : !s16i), !s32i loc(#loc49)
    %17 = cir.const #cir.int<2> : !s32i loc(#loc32)
    %18 = cir.binop(mul, %16, %17) nsw : !s32i loc(#loc49)
    %19 = cir.cast(integral, %18 : !s32i), !s16i loc(#loc49)
    cir.store %19, %1 : !s16i, !cir.ptr<!s16i> loc(#loc133)
    %20 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc50)
    %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc50)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc51)
    cir.br ^bb4 loc(#loc45)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc45)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc43)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc28)
  } loc(#loc131)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc52)
  cir.func internal private @_ZN47CWE191_Integer_Underflow__short_min_multiply_33L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc143)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc144)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc145)
    %3 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc146)
    cir.store %2, %3 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc62)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc63)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc63)
    cir.store %5, %2 : !s16i, !cir.ptr<!s16i> loc(#loc147)
    %6 = cir.const #cir.int<32767> : !s32i loc(#loc65)
    %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc65)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc65)
    %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc65)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc65)
    cir.store %10, %2 : !s16i, !cir.ptr<!s16i> loc(#loc148)
    cir.br ^bb1 loc(#loc149)
  ^bb1:  // pred: ^bb0
    %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc56)
    %12 = cir.load %11 : !cir.ptr<!s16i>, !s16i loc(#loc56)
    cir.store %12, %0 : !s16i, !cir.ptr<!s16i> loc(#loc143)
    cir.br ^bb2 loc(#loc150)
  ^bb2:  // pred: ^bb1
    %13 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc71)
    %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc71)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc72)
    %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc151)
    cir.brcond %16 ^bb3, ^bb9 loc(#loc152)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc153)
  ^bb4:  // pred: ^bb3
    %17 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc76)
    %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc76)
    %19 = cir.const #cir.int<32767> : !s32i loc(#loc77)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc77)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc77)
    %23 = cir.const #cir.int<2> : !s32i loc(#loc78)
    %24 = cir.binop(div, %22, %23) : !s32i loc(#loc154)
    %25 = cir.cmp(gt, %18, %24) : !s32i, !cir.bool loc(#loc155)
    cir.brcond %25 ^bb5, ^bb6 loc(#loc156)
  ^bb5:  // pred: ^bb4
    %26 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc83)
    %27 = cir.cast(integral, %26 : !s16i), !s32i loc(#loc83)
    %28 = cir.const #cir.int<2> : !s32i loc(#loc58)
    %29 = cir.binop(mul, %27, %28) nsw : !s32i loc(#loc83)
    %30 = cir.cast(integral, %29 : !s32i), !s16i loc(#loc83)
    cir.store %30, %1 : !s16i, !cir.ptr<!s16i> loc(#loc144)
    %31 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc84)
    %32 = cir.cast(integral, %31 : !s16i), !s32i loc(#loc84)
    cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc85)
    cir.br ^bb7 loc(#loc81)
  ^bb6:  // pred: ^bb4
    %33 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc52)
    %34 = cir.cast(array_to_ptrdecay, %33 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%34) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    cir.br ^bb7 loc(#loc75)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc75)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc70)
  ^bb9:  // 2 preds: ^bb2, ^bb8
    cir.br ^bb10 loc(#loc70)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc68)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc54)
  } loc(#loc142)
  cir.func @_ZN47CWE191_Integer_Underflow__short_min_multiply_334goodEv() extra(#fn_attr) {
    cir.call @_ZN47CWE191_Integer_Underflow__short_min_multiply_33L7goodG2BEv() : () -> () loc(#loc89)
    cir.call @_ZN47CWE191_Integer_Underflow__short_min_multiply_33L7goodB2GEv() : () -> () loc(#loc90)
    cir.return loc(#loc88)
  } loc(#loc157)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc158)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc159)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc160)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc97)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc98)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc99)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc100)
  cir.func @main(%arg0: !s32i loc(fused[#loc103, #loc104]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc105, #loc106])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc162)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc163)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc102)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc107)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc107)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc108)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc109)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc109)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc110)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc97)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc97)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc111)
    cir.call @_ZN47CWE191_Integer_Underflow__short_min_multiply_334goodEv() : () -> () loc(#loc112)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc98)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc98)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc113)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc99)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc114)
    cir.call @_ZN47CWE191_Integer_Underflow__short_min_multiply_333badEv() : () -> () loc(#loc115)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc100)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc100)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc117)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc164)
    cir.return %15 : !s32i loc(#loc164)
  } loc(#loc161)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_min_multiply_33.cpp":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":25:1)
#loc4 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":41:1)
#loc5 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":33:9)
#loc6 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":33:22)
#loc7 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":37:13)
#loc8 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":37:35)
#loc9 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":27:5)
#loc10 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":27:11)
#loc11 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":28:5)
#loc12 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":28:22)
#loc13 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":29:12)
#loc14 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":29:5)
#loc15 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":31:12)
#loc16 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":31:5)
#loc17 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":32:5)
#loc18 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":40:5)
#loc19 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":34:9)
#loc20 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":39:9)
#loc21 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":34:12)
#loc22 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":34:19)
#loc23 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":35:9)
#loc24 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":37:28)
#loc25 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":38:26)
#loc26 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":38:13)
#loc27 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":48:1)
#loc28 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":64:1)
#loc29 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":56:9)
#loc30 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":56:22)
#loc31 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":60:13)
#loc32 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":60:35)
#loc33 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":50:5)
#loc34 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":50:11)
#loc35 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":51:5)
#loc36 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":51:22)
#loc37 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":52:12)
#loc38 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":52:5)
#loc39 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":54:13)
#loc40 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":54:12)
#loc41 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":54:5)
#loc42 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":55:5)
#loc43 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":63:5)
#loc44 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":57:9)
#loc45 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":62:9)
#loc46 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":57:12)
#loc47 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":57:19)
#loc48 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":58:9)
#loc49 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":60:28)
#loc50 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":61:26)
#loc51 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":61:13)
#loc52 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":86:27)
#loc53 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":67:1)
#loc54 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":90:1)
#loc55 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":75:9)
#loc56 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":75:22)
#loc57 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":81:17)
#loc58 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":81:39)
#loc59 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":69:5)
#loc60 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":69:11)
#loc61 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":70:5)
#loc62 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":70:22)
#loc63 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":71:12)
#loc64 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":71:5)
#loc65 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":73:12)
#loc66 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":73:5)
#loc67 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":74:5)
#loc68 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":89:5)
#loc69 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":76:9)
#loc70 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":88:9)
#loc71 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":76:12)
#loc72 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":76:19)
#loc73 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":77:9)
#loc74 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":79:13)
#loc75 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":87:13)
#loc76 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":79:17)
#loc77 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":79:25)
#loc78 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":79:34)
#loc79 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":79:35)
#loc80 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":80:13)
#loc81 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":83:13)
#loc82 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":85:13)
#loc83 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":81:32)
#loc84 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":82:30)
#loc85 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":82:17)
#loc86 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":86:17)
#loc87 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":92:1)
#loc88 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":96:1)
#loc89 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":94:5)
#loc90 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":95:5)
#loc91 = loc("/usr/include/stdlib.h":575:1)
#loc92 = loc("/usr/include/stdlib.h":575:41)
#loc93 = loc("/usr/include/time.h":76:1)
#loc94 = loc("/usr/include/time.h":76:38)
#loc95 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc96 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc97 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":115:15)
#loc98 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":117:15)
#loc99 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":120:15)
#loc100 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":122:15)
#loc101 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":110:1)
#loc102 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":125:1)
#loc107 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":111:1)
#loc108 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":113:27)
#loc109 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":113:22)
#loc110 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":113:5)
#loc111 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":115:5)
#loc112 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":116:5)
#loc113 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":117:5)
#loc114 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":120:5)
#loc115 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":121:5)
#loc116 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":122:5)
#loc117 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":124:12)
#loc118 = loc("CWE191_Integer_Underflow__short_min_multiply_33.cpp":124:5)
#loc119 = loc(fused[#loc1, #loc2])
#loc120 = loc(fused[#loc3, #loc4])
#loc121 = loc(fused[#loc5, #loc6])
#loc122 = loc(fused[#loc7, #loc8])
#loc123 = loc(fused[#loc9, #loc10])
#loc124 = loc(fused[#loc11, #loc12])
#loc125 = loc(fused[#loc14, #loc13])
#loc126 = loc(fused[#loc16, #loc15])
#loc127 = loc(fused[#loc17, #loc18])
#loc128 = loc(fused[#loc19, #loc20])
#loc129 = loc(fused[#loc21, #loc22])
#loc130 = loc(fused[#loc23, #loc20])
#loc131 = loc(fused[#loc27, #loc28])
#loc132 = loc(fused[#loc29, #loc30])
#loc133 = loc(fused[#loc31, #loc32])
#loc134 = loc(fused[#loc33, #loc34])
#loc135 = loc(fused[#loc35, #loc36])
#loc136 = loc(fused[#loc38, #loc37])
#loc137 = loc(fused[#loc41, #loc39])
#loc138 = loc(fused[#loc42, #loc43])
#loc139 = loc(fused[#loc44, #loc45])
#loc140 = loc(fused[#loc46, #loc47])
#loc141 = loc(fused[#loc48, #loc45])
#loc142 = loc(fused[#loc53, #loc54])
#loc143 = loc(fused[#loc55, #loc56])
#loc144 = loc(fused[#loc57, #loc58])
#loc145 = loc(fused[#loc59, #loc60])
#loc146 = loc(fused[#loc61, #loc62])
#loc147 = loc(fused[#loc64, #loc63])
#loc148 = loc(fused[#loc66, #loc65])
#loc149 = loc(fused[#loc67, #loc68])
#loc150 = loc(fused[#loc69, #loc70])
#loc151 = loc(fused[#loc71, #loc72])
#loc152 = loc(fused[#loc73, #loc70])
#loc153 = loc(fused[#loc74, #loc75])
#loc154 = loc(fused[#loc77, #loc78])
#loc155 = loc(fused[#loc76, #loc79])
#loc156 = loc(fused[#loc80, #loc81, #loc82, #loc75])
#loc157 = loc(fused[#loc87, #loc88])
#loc158 = loc(fused[#loc91, #loc92])
#loc159 = loc(fused[#loc93, #loc94])
#loc160 = loc(fused[#loc95, #loc96])
#loc161 = loc(fused[#loc101, #loc102])
#loc164 = loc(fused[#loc118, #loc117])
