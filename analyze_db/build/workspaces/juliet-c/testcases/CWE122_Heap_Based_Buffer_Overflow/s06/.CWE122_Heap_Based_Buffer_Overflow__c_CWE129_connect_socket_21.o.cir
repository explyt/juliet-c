!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":47:21)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":47:25)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":155:26)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":155:30)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":258:26)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":258:30)
#loc560 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":356:25)
#loc561 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":356:29)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc655 = loc(fused[#loc31, #loc32])
#loc725 = loc(fused[#loc212, #loc213])
#loc792 = loc(fused[#loc387, #loc388])
#loc859 = loc(fused[#loc560, #loc561])
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc641)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc642)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc643)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc644)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc645)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc646)
  cir.func private @close(!s32i) -> !s32i loc(#loc647)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc648)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc649)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc650)
  cir.func private @printIntLine(!s32i) loc(#loc651)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc652)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc26)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc653)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc31, #loc32])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc655)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc33)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc648)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc36)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc36)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc659)
          %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc660)
          %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc44)
          %7 = cir.const #cir.int<10> : !s32i loc(#loc45)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc45)
          %9 = cir.const #cir.int<4> : !u64i loc(#loc661)
          %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc662)
          %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc44)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc663)
          cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc660)
          cir.scope {
            %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc51)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc51)
            %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc665)
            cir.if %19 {
              %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc53)
              %21 = cir.const #cir.int<1> : !s32i loc(#loc54)
              %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc55)
              cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc53)
            } loc(#loc666)
          } loc(#loc664)
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc58)
            cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc668)
            cir.for : cond {
              %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc60)
              %18 = cir.const #cir.int<10> : !s32i loc(#loc61)
              %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc669)
              cir.condition(%19) loc(#loc62)
            } body {
              cir.scope {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc64)
                %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc65)
                %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc66)
                %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc67)
                cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc671)
              } loc(#loc670)
              cir.yield loc(#loc57)
            } step {
              %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc68)
              %18 = cir.unary(inc, %17) nsw : !s32i, !s32i loc(#loc69)
              cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc672)
              cir.yield loc(#loc667)
            } loc(#loc667)
          } loc(#loc667)
          cir.scope {
            %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc73)
            %18 = cir.cmp(ge, %16, %17) : !s32i, !cir.bool loc(#loc674)
            cir.if %18 {
              %19 = cir.const #cir.int<1> : !s32i loc(#loc77)
              %20 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc78)
              %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
              %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc80)
              cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc676)
              cir.scope {
                %23 = cir.const #cir.int<0> : !s32i loc(#loc83)
                cir.store %23, %4 : !s32i, !cir.ptr<!s32i> loc(#loc678)
                cir.for : cond {
                  %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc85)
                  %25 = cir.const #cir.int<10> : !s32i loc(#loc86)
                  %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc679)
                  cir.condition(%26) loc(#loc87)
                } body {
                  cir.scope {
                    %24 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc89)
                    %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc90)
                    %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc91)
                    %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc89)
                    cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc92)
                  } loc(#loc680)
                  cir.yield loc(#loc82)
                } step {
                  %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc93)
                  %25 = cir.unary(inc, %24) nsw : !s32i, !s32i loc(#loc94)
                  cir.store %25, %4 : !s32i, !cir.ptr<!s32i> loc(#loc681)
                  cir.yield loc(#loc677)
                } loc(#loc677)
              } loc(#loc677)
            } else {
              %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc26)
              %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc26)
              cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc95)
            } loc(#loc675)
          } loc(#loc673)
          %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc96)
          %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc97)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc97)
          cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc96)
        } loc(#loc658)
      } loc(#loc657)
    } loc(#loc656)
    cir.return loc(#loc30)
  } loc(#loc654)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc683)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc102)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc103)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc684)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc686)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc687)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc688)
      %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc689)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc112)
      %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc112)
      cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc688)
      cir.scope {
        cir.do {
          cir.scope {
            %12 = cir.const #cir.int<2> : !s32i loc(#loc119)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc120)
            %14 = cir.const #cir.int<6> : !s32i loc(#loc121)
            %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc122)
            cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc692)
            cir.scope {
              %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc127)
              %55 = cir.const #cir.int<1> : !s32i loc(#loc128)
              %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc128)
              %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc694)
              cir.if %57 {
                cir.break loc(#loc130)
              } loc(#loc695)
            } loc(#loc693)
            %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc696)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc133)
            %18 = cir.const #cir.int<16> : !u64i loc(#loc697)
            cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc698)
            %19 = cir.const #cir.int<2> : !s32i loc(#loc138)
            %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc138)
            %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc139)
            cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc699)
            %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
            %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
            %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc141)
            %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc142)
            %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc143)
            cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc700)
            %27 = cir.const #cir.int<27015> : !s32i loc(#loc146)
            %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc146)
            %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc147)
            %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc148)
            cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc701)
            cir.scope {
              %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc153)
              %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc703)
              %56 = cir.const #cir.int<16> : !u64i loc(#loc704)
              %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc704)
              %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc158)
              %59 = cir.const #cir.int<1> : !s32i loc(#loc159)
              %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc159)
              %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc705)
              cir.if %61 {
                cir.break loc(#loc161)
              } loc(#loc706)
            } loc(#loc702)
            %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc162)
            %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc163)
            %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc163)
            %34 = cir.const #cir.int<3> : !s32i loc(#loc164)
            %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc164)
            %36 = cir.const #cir.int<4> : !u64i loc(#loc164)
            %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc164)
            %38 = cir.const #cir.int<2> : !s32i loc(#loc164)
            %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc164)
            %40 = cir.binop(add, %37, %39) : !u64i loc(#loc164)
            %41 = cir.const #cir.int<1> : !s32i loc(#loc165)
            %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc165)
            %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc707)
            %44 = cir.const #cir.int<0> : !s32i loc(#loc166)
            %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc167)
            %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc167)
            cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc708)
            cir.scope {
              %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc172)
              %55 = cir.const #cir.int<1> : !s32i loc(#loc173)
              %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc173)
              %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc710)
              %58 = cir.ternary(%57, true {
                %59 = cir.const #true loc(#loc174)
                cir.yield %59 : !cir.bool loc(#loc174)
              }, false {
                %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc175)
                %60 = cir.const #cir.int<0> : !s32i loc(#loc176)
                %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc711)
                %62 = cir.ternary(%61, true {
                  %63 = cir.const #true loc(#loc174)
                  cir.yield %63 : !cir.bool loc(#loc174)
                }, false {
                  %63 = cir.const #false loc(#loc174)
                  cir.yield %63 : !cir.bool loc(#loc174)
                }) : (!cir.bool) -> !cir.bool loc(#loc174)
                cir.yield %62 : !cir.bool loc(#loc174)
              }) : (!cir.bool) -> !cir.bool loc(#loc174)
              cir.if %58 {
                cir.break loc(#loc178)
              } loc(#loc712)
            } loc(#loc709)
            %47 = cir.const #cir.int<0> : !s32i loc(#loc179)
            %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc179)
            %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc180)
            %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc181)
            %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc181)
            cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc713)
            %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc182)
            %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc183)
            cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc714)
          } loc(#loc691)
          cir.yield loc(#loc116)
        } while {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc186)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc186)
          cir.condition(%13) loc(#loc186)
        } loc(#loc690)
      } loc(#loc690)
      cir.scope {
        %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc189)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc190)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc190)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc716)
        cir.if %15 {
          %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc192)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc193)
        } loc(#loc717)
      } loc(#loc715)
    } loc(#loc685)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc194)
    %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc648)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc718)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc196)
    cir.call @badSink(%5) : (!s32i) -> () loc(#loc197)
    cir.return loc(#loc99)
  } loc(#loc682)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc720)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc200)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc721)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc202)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc722)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc204)
    cir.return loc(#loc199)
  } loc(#loc719)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc723)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc208)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc209)
  cir.func internal private @goodB2G1Sink(%arg0: !s32i loc(fused[#loc212, #loc213])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc725)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc723)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc217)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc217)
      cir.if %3 {
        %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc208)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc208)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc221)
      } else {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc729)
          %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc730)
          %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc228)
          %7 = cir.const #cir.int<10> : !s32i loc(#loc229)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc229)
          %9 = cir.const #cir.int<4> : !u64i loc(#loc731)
          %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc732)
          %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc228)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc733)
          cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc730)
          cir.scope {
            %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc234)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc235)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc235)
            %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc735)
            cir.if %19 {
              %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc237)
              %21 = cir.const #cir.int<1> : !s32i loc(#loc238)
              %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc239)
              cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc237)
            } loc(#loc736)
          } loc(#loc734)
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc242)
            cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc738)
            cir.for : cond {
              %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc244)
              %18 = cir.const #cir.int<10> : !s32i loc(#loc245)
              %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc739)
              cir.condition(%19) loc(#loc246)
            } body {
              cir.scope {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc248)
                %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc249)
                %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc250)
                %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc251)
                cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc741)
              } loc(#loc740)
              cir.yield loc(#loc241)
            } step {
              %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc252)
              %18 = cir.unary(inc, %17) nsw : !s32i, !s32i loc(#loc253)
              cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc742)
              cir.yield loc(#loc737)
            } loc(#loc737)
          } loc(#loc737)
          cir.scope {
            %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc256)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc257)
            %18 = cir.cmp(ge, %16, %17) : !s32i, !cir.bool loc(#loc744)
            %19 = cir.ternary(%18, true {
              %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc259)
              %21 = cir.const #cir.int<10> : !s32i loc(#loc260)
              %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc745)
              %23 = cir.ternary(%22, true {
                %24 = cir.const #true loc(#loc258)
                cir.yield %24 : !cir.bool loc(#loc258)
              }, false {
                %24 = cir.const #false loc(#loc258)
                cir.yield %24 : !cir.bool loc(#loc258)
              }) : (!cir.bool) -> !cir.bool loc(#loc258)
              cir.yield %23 : !cir.bool loc(#loc258)
            }, false {
              %20 = cir.const #false loc(#loc258)
              cir.yield %20 : !cir.bool loc(#loc258)
            }) : (!cir.bool) -> !cir.bool loc(#loc258)
            cir.if %19 {
              %20 = cir.const #cir.int<1> : !s32i loc(#loc265)
              %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc266)
              %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc267)
              %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc268)
              cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc747)
              cir.scope {
                %24 = cir.const #cir.int<0> : !s32i loc(#loc271)
                cir.store %24, %4 : !s32i, !cir.ptr<!s32i> loc(#loc749)
                cir.for : cond {
                  %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc273)
                  %26 = cir.const #cir.int<10> : !s32i loc(#loc274)
                  %27 = cir.cmp(lt, %25, %26) : !s32i, !cir.bool loc(#loc750)
                  cir.condition(%27) loc(#loc275)
                } body {
                  cir.scope {
                    %25 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc277)
                    %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc278)
                    %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc279)
                    %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc277)
                    cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc280)
                  } loc(#loc751)
                  cir.yield loc(#loc270)
                } step {
                  %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc281)
                  %26 = cir.unary(inc, %25) nsw : !s32i, !s32i loc(#loc282)
                  cir.store %26, %4 : !s32i, !cir.ptr<!s32i> loc(#loc752)
                  cir.yield loc(#loc748)
                } loc(#loc748)
              } loc(#loc748)
            } else {
              %20 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc209)
              %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc209)
              cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc283)
            } loc(#loc746)
          } loc(#loc743)
          %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc284)
          %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc285)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc285)
          cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc284)
        } loc(#loc728)
      } loc(#loc727)
    } loc(#loc726)
    cir.return loc(#loc211)
  } loc(#loc724)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc754)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc290)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc291)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc755)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc757)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc758)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc759)
      %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc760)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc300)
      %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc300)
      cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc759)
      cir.scope {
        cir.do {
          cir.scope {
            %12 = cir.const #cir.int<2> : !s32i loc(#loc307)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc308)
            %14 = cir.const #cir.int<6> : !s32i loc(#loc309)
            %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc310)
            cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc763)
            cir.scope {
              %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc315)
              %55 = cir.const #cir.int<1> : !s32i loc(#loc316)
              %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc316)
              %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc765)
              cir.if %57 {
                cir.break loc(#loc318)
              } loc(#loc766)
            } loc(#loc764)
            %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc767)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc321)
            %18 = cir.const #cir.int<16> : !u64i loc(#loc768)
            cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc769)
            %19 = cir.const #cir.int<2> : !s32i loc(#loc326)
            %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc326)
            %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc139)
            cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc770)
            %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc328)
            %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc328)
            %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc329)
            %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc142)
            %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc143)
            cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc771)
            %27 = cir.const #cir.int<27015> : !s32i loc(#loc332)
            %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc332)
            %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc333)
            %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc148)
            cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc772)
            cir.scope {
              %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc338)
              %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc774)
              %56 = cir.const #cir.int<16> : !u64i loc(#loc775)
              %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc775)
              %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc343)
              %59 = cir.const #cir.int<1> : !s32i loc(#loc344)
              %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc344)
              %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc776)
              cir.if %61 {
                cir.break loc(#loc346)
              } loc(#loc777)
            } loc(#loc773)
            %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc347)
            %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc348)
            %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc348)
            %34 = cir.const #cir.int<3> : !s32i loc(#loc349)
            %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc349)
            %36 = cir.const #cir.int<4> : !u64i loc(#loc349)
            %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc349)
            %38 = cir.const #cir.int<2> : !s32i loc(#loc349)
            %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc349)
            %40 = cir.binop(add, %37, %39) : !u64i loc(#loc349)
            %41 = cir.const #cir.int<1> : !s32i loc(#loc350)
            %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc350)
            %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc778)
            %44 = cir.const #cir.int<0> : !s32i loc(#loc351)
            %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc352)
            %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc352)
            cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc779)
            cir.scope {
              %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc357)
              %55 = cir.const #cir.int<1> : !s32i loc(#loc358)
              %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc358)
              %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc781)
              %58 = cir.ternary(%57, true {
                %59 = cir.const #true loc(#loc359)
                cir.yield %59 : !cir.bool loc(#loc359)
              }, false {
                %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc360)
                %60 = cir.const #cir.int<0> : !s32i loc(#loc361)
                %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc782)
                %62 = cir.ternary(%61, true {
                  %63 = cir.const #true loc(#loc359)
                  cir.yield %63 : !cir.bool loc(#loc359)
                }, false {
                  %63 = cir.const #false loc(#loc359)
                  cir.yield %63 : !cir.bool loc(#loc359)
                }) : (!cir.bool) -> !cir.bool loc(#loc359)
                cir.yield %62 : !cir.bool loc(#loc359)
              }) : (!cir.bool) -> !cir.bool loc(#loc359)
              cir.if %58 {
                cir.break loc(#loc363)
              } loc(#loc783)
            } loc(#loc780)
            %47 = cir.const #cir.int<0> : !s32i loc(#loc364)
            %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc364)
            %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc365)
            %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc366)
            %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc366)
            cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc784)
            %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc367)
            %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc368)
            cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc785)
          } loc(#loc762)
          cir.yield loc(#loc304)
        } while {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc371)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc371)
          cir.condition(%13) loc(#loc371)
        } loc(#loc761)
      } loc(#loc761)
      cir.scope {
        %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc374)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc375)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc375)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc787)
        cir.if %15 {
          %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc377)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc378)
        } loc(#loc788)
      } loc(#loc786)
    } loc(#loc756)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc379)
    %4 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc723)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc789)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc381)
    cir.call @goodB2G1Sink(%5) : (!s32i) -> () loc(#loc382)
    cir.return loc(#loc287)
  } loc(#loc753)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc790)
  cir.func internal private @goodB2G2Sink(%arg0: !s32i loc(fused[#loc387, #loc388])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc792)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc389)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc790)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc392)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc392)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc796)
          %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc797)
          %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc400)
          %7 = cir.const #cir.int<10> : !s32i loc(#loc401)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc401)
          %9 = cir.const #cir.int<4> : !u64i loc(#loc798)
          %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc799)
          %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc400)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc800)
          cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc797)
          cir.scope {
            %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc406)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc407)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc407)
            %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc802)
            cir.if %19 {
              %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc409)
              %21 = cir.const #cir.int<1> : !s32i loc(#loc410)
              %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc411)
              cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc409)
            } loc(#loc803)
          } loc(#loc801)
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc414)
            cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc805)
            cir.for : cond {
              %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc416)
              %18 = cir.const #cir.int<10> : !s32i loc(#loc417)
              %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc806)
              cir.condition(%19) loc(#loc418)
            } body {
              cir.scope {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc420)
                %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc421)
                %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc422)
                %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc423)
                cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc808)
              } loc(#loc807)
              cir.yield loc(#loc413)
            } step {
              %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc424)
              %18 = cir.unary(inc, %17) nsw : !s32i, !s32i loc(#loc425)
              cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc809)
              cir.yield loc(#loc804)
            } loc(#loc804)
          } loc(#loc804)
          cir.scope {
            %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc428)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc429)
            %18 = cir.cmp(ge, %16, %17) : !s32i, !cir.bool loc(#loc811)
            %19 = cir.ternary(%18, true {
              %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc431)
              %21 = cir.const #cir.int<10> : !s32i loc(#loc432)
              %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc812)
              %23 = cir.ternary(%22, true {
                %24 = cir.const #true loc(#loc430)
                cir.yield %24 : !cir.bool loc(#loc430)
              }, false {
                %24 = cir.const #false loc(#loc430)
                cir.yield %24 : !cir.bool loc(#loc430)
              }) : (!cir.bool) -> !cir.bool loc(#loc430)
              cir.yield %23 : !cir.bool loc(#loc430)
            }, false {
              %20 = cir.const #false loc(#loc430)
              cir.yield %20 : !cir.bool loc(#loc430)
            }) : (!cir.bool) -> !cir.bool loc(#loc430)
            cir.if %19 {
              %20 = cir.const #cir.int<1> : !s32i loc(#loc437)
              %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc438)
              %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc439)
              %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc440)
              cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc814)
              cir.scope {
                %24 = cir.const #cir.int<0> : !s32i loc(#loc443)
                cir.store %24, %4 : !s32i, !cir.ptr<!s32i> loc(#loc816)
                cir.for : cond {
                  %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc445)
                  %26 = cir.const #cir.int<10> : !s32i loc(#loc446)
                  %27 = cir.cmp(lt, %25, %26) : !s32i, !cir.bool loc(#loc817)
                  cir.condition(%27) loc(#loc447)
                } body {
                  cir.scope {
                    %25 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc449)
                    %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc450)
                    %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc451)
                    %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc449)
                    cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc452)
                  } loc(#loc818)
                  cir.yield loc(#loc442)
                } step {
                  %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc453)
                  %26 = cir.unary(inc, %25) nsw : !s32i, !s32i loc(#loc454)
                  cir.store %26, %4 : !s32i, !cir.ptr<!s32i> loc(#loc819)
                  cir.yield loc(#loc815)
                } loc(#loc815)
              } loc(#loc815)
            } else {
              %20 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc455)
              %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc455)
              cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc456)
            } loc(#loc813)
          } loc(#loc810)
          %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc457)
          %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc458)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc458)
          cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc457)
        } loc(#loc795)
      } loc(#loc794)
    } loc(#loc793)
    cir.return loc(#loc386)
  } loc(#loc791)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc821)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc463)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc464)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc822)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc824)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc825)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc826)
      %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc827)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc473)
      %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc473)
      cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc826)
      cir.scope {
        cir.do {
          cir.scope {
            %12 = cir.const #cir.int<2> : !s32i loc(#loc480)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc481)
            %14 = cir.const #cir.int<6> : !s32i loc(#loc482)
            %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc483)
            cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc830)
            cir.scope {
              %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc488)
              %55 = cir.const #cir.int<1> : !s32i loc(#loc489)
              %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc489)
              %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc832)
              cir.if %57 {
                cir.break loc(#loc491)
              } loc(#loc833)
            } loc(#loc831)
            %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc834)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc494)
            %18 = cir.const #cir.int<16> : !u64i loc(#loc835)
            cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc836)
            %19 = cir.const #cir.int<2> : !s32i loc(#loc499)
            %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc499)
            %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc139)
            cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc837)
            %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc501)
            %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc501)
            %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc502)
            %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc142)
            %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc143)
            cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc838)
            %27 = cir.const #cir.int<27015> : !s32i loc(#loc505)
            %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc505)
            %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc506)
            %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc148)
            cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc839)
            cir.scope {
              %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc511)
              %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc841)
              %56 = cir.const #cir.int<16> : !u64i loc(#loc842)
              %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc842)
              %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc516)
              %59 = cir.const #cir.int<1> : !s32i loc(#loc517)
              %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc517)
              %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc843)
              cir.if %61 {
                cir.break loc(#loc519)
              } loc(#loc844)
            } loc(#loc840)
            %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc520)
            %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc521)
            %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc521)
            %34 = cir.const #cir.int<3> : !s32i loc(#loc522)
            %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc522)
            %36 = cir.const #cir.int<4> : !u64i loc(#loc522)
            %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc522)
            %38 = cir.const #cir.int<2> : !s32i loc(#loc522)
            %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc522)
            %40 = cir.binop(add, %37, %39) : !u64i loc(#loc522)
            %41 = cir.const #cir.int<1> : !s32i loc(#loc523)
            %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc523)
            %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc845)
            %44 = cir.const #cir.int<0> : !s32i loc(#loc524)
            %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc525)
            %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc525)
            cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc846)
            cir.scope {
              %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc530)
              %55 = cir.const #cir.int<1> : !s32i loc(#loc531)
              %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc531)
              %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc848)
              %58 = cir.ternary(%57, true {
                %59 = cir.const #true loc(#loc532)
                cir.yield %59 : !cir.bool loc(#loc532)
              }, false {
                %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc533)
                %60 = cir.const #cir.int<0> : !s32i loc(#loc534)
                %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc849)
                %62 = cir.ternary(%61, true {
                  %63 = cir.const #true loc(#loc532)
                  cir.yield %63 : !cir.bool loc(#loc532)
                }, false {
                  %63 = cir.const #false loc(#loc532)
                  cir.yield %63 : !cir.bool loc(#loc532)
                }) : (!cir.bool) -> !cir.bool loc(#loc532)
                cir.yield %62 : !cir.bool loc(#loc532)
              }) : (!cir.bool) -> !cir.bool loc(#loc532)
              cir.if %58 {
                cir.break loc(#loc536)
              } loc(#loc850)
            } loc(#loc847)
            %47 = cir.const #cir.int<0> : !s32i loc(#loc537)
            %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc537)
            %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc538)
            %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc539)
            %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc539)
            cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc851)
            %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc540)
            %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc541)
            cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc852)
          } loc(#loc829)
          cir.yield loc(#loc477)
        } while {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc544)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc544)
          cir.condition(%13) loc(#loc544)
        } loc(#loc828)
      } loc(#loc828)
      cir.scope {
        %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc547)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc548)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc548)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc854)
        cir.if %15 {
          %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc550)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc551)
        } loc(#loc855)
      } loc(#loc853)
    } loc(#loc823)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc552)
    %4 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc790)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc856)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc554)
    cir.call @goodB2G2Sink(%5) : (!s32i) -> () loc(#loc555)
    cir.return loc(#loc460)
  } loc(#loc820)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc857)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc560, #loc561])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc859)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc562)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc857)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc565)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc565)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc863)
          %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc864)
          %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc573)
          %7 = cir.const #cir.int<10> : !s32i loc(#loc574)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc574)
          %9 = cir.const #cir.int<4> : !u64i loc(#loc865)
          %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc866)
          %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc573)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc867)
          cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc864)
          cir.scope {
            %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc579)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc580)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc580)
            %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc869)
            cir.if %19 {
              %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc582)
              %21 = cir.const #cir.int<1> : !s32i loc(#loc583)
              %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc584)
              cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc582)
            } loc(#loc870)
          } loc(#loc868)
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc587)
            cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc872)
            cir.for : cond {
              %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc589)
              %18 = cir.const #cir.int<10> : !s32i loc(#loc590)
              %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc873)
              cir.condition(%19) loc(#loc591)
            } body {
              cir.scope {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc593)
                %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc594)
                %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc595)
                %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc596)
                cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc875)
              } loc(#loc874)
              cir.yield loc(#loc586)
            } step {
              %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc597)
              %18 = cir.unary(inc, %17) nsw : !s32i, !s32i loc(#loc598)
              cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc876)
              cir.yield loc(#loc871)
            } loc(#loc871)
          } loc(#loc871)
          cir.scope {
            %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc601)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc602)
            %18 = cir.cmp(ge, %16, %17) : !s32i, !cir.bool loc(#loc878)
            cir.if %18 {
              %19 = cir.const #cir.int<1> : !s32i loc(#loc606)
              %20 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc607)
              %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc608)
              %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc609)
              cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc880)
              cir.scope {
                %23 = cir.const #cir.int<0> : !s32i loc(#loc612)
                cir.store %23, %4 : !s32i, !cir.ptr<!s32i> loc(#loc882)
                cir.for : cond {
                  %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc614)
                  %25 = cir.const #cir.int<10> : !s32i loc(#loc615)
                  %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc883)
                  cir.condition(%26) loc(#loc616)
                } body {
                  cir.scope {
                    %24 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc618)
                    %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc619)
                    %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc620)
                    %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc618)
                    cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc621)
                  } loc(#loc884)
                  cir.yield loc(#loc611)
                } step {
                  %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc622)
                  %25 = cir.unary(inc, %24) nsw : !s32i, !s32i loc(#loc623)
                  cir.store %25, %4 : !s32i, !cir.ptr<!s32i> loc(#loc885)
                  cir.yield loc(#loc881)
                } loc(#loc881)
              } loc(#loc881)
            } else {
              %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc624)
              %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc624)
              cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc625)
            } loc(#loc879)
          } loc(#loc877)
          %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc626)
          %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc627)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc627)
          cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc626)
        } loc(#loc862)
      } loc(#loc861)
    } loc(#loc860)
    cir.return loc(#loc559)
  } loc(#loc858)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc887)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc632)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc633)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc888)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc635)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc889)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc637)
    %5 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc857)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc890)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc639)
    cir.call @goodG2BSink(%6) : (!s32i) -> () loc(#loc640)
    cir.return loc(#loc629)
  } loc(#loc886)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":111:49)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":45:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":45:24)
#loc18 = loc("/usr/include/stdlib.h":672:1)
#loc19 = loc("/usr/include/stdlib.h":672:45)
#loc20 = loc("/usr/include/stdlib.h":756:1)
#loc21 = loc("/usr/include/stdlib.h":756:70)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc24 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":73:27)
#loc27 = loc("/usr/include/stdlib.h":687:1)
#loc28 = loc("/usr/include/stdlib.h":687:32)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":47:1)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":78:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":48:1)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":49:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":77:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":49:8)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":50:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":51:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":76:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":52:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":52:17)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":53:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":53:58)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":53:35)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":53:42)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":53:47)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":53:57)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":54:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":54:43)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":54:17)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":54:27)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":54:33)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":54:34)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":54:40)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":54:39)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":56:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":59:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":56:22)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":56:18)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":56:25)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":56:29)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":56:27)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":57:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":58:29)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":58:17)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":58:24)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":58:25)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":56:34)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":56:33)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":62:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":74:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":62:17)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":62:25)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":63:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":70:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":72:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":64:32)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":64:17)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":64:24)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":64:28)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":66:17)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":69:17)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":66:25)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":66:21)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":66:28)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":66:32)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":66:30)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":67:17)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":68:34)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":68:41)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":68:42)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":68:21)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":66:37)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":66:36)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":73:17)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":75:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":75:18)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":80:1)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":143:1)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":82:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":82:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":84:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":84:12)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":84:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":85:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":140:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":90:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":90:13)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":91:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":91:28)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":92:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":92:32)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":93:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":93:41)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":94:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":129:17)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":95:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":128:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":104:36)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":104:45)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":104:58)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":104:29)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":104:13)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":104:69)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":105:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":108:13)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":105:17)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":105:34)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":106:13)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":107:17)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":109:20)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":109:21)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":109:30)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":109:33)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":109:47)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":109:13)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":109:48)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":110:34)
#loc139 = loc("/usr/include/netinet/in.h":249:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":110:13)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":111:39)
#loc142 = loc("/usr/include/netinet/in.h":251:20)
#loc143 = loc("/usr/include/netinet/in.h":33:15)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":111:13)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":111:59)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":112:38)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":112:32)
#loc148 = loc("/usr/include/netinet/in.h":250:15)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":112:13)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":112:46)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":113:13)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":116:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":113:25)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":113:58)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":113:59)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":113:68)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":113:82)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":113:17)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":113:88)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":114:13)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":115:17)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":119:31)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":119:46)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":119:59)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":119:77)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":119:80)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":119:26)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":119:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":119:81)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":120:13)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":123:13)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":120:17)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":120:31)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":120:44)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":120:47)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":120:61)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":121:13)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":122:17)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":125:39)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":125:25)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":125:13)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":127:25)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":127:20)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":127:13)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":127:36)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":129:16)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":130:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":133:9)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":130:13)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":130:30)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":131:9)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":132:26)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":132:13)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":141:17)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":141:5)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":142:13)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":142:5)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":401:1)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":406:1)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":403:5)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":403:14)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":404:5)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":404:14)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":405:5)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":405:13)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":150:1)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":150:29)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":160:19)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":185:27)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":155:1)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":190:1)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":156:1)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":157:5)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":189:5)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":157:8)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":158:5)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":161:5)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":163:5)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":160:9)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":164:9)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":188:9)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":165:13)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":165:17)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":166:13)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":166:58)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":166:35)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":166:42)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":166:47)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":166:57)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":167:13)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":167:43)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":167:17)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":167:27)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":167:33)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":167:34)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":167:40)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":167:39)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":169:13)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":172:13)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":169:22)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":169:18)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":169:25)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":169:29)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":169:27)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":170:13)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":171:29)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":171:17)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":171:24)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":171:25)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":169:34)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":169:33)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":174:13)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":186:13)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":174:17)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":174:25)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":174:27)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":174:30)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":174:38)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":174:40)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":175:13)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":182:13)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":184:13)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":176:32)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":176:17)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":176:24)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":176:28)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":178:17)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":181:17)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":178:25)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":178:21)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":178:28)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":178:32)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":178:30)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":179:17)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":180:34)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":180:41)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":180:42)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":180:21)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":178:37)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":178:36)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":185:17)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":187:13)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":187:18)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":192:1)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":255:1)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":194:5)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":194:9)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":196:13)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":196:12)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":196:5)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":197:5)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":252:5)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":202:9)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":202:13)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":203:9)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":203:28)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":204:9)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":204:32)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":205:9)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":205:41)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":206:9)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":241:17)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":207:9)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":240:9)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":216:36)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":216:45)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":216:58)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":216:29)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":216:13)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":216:69)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":217:13)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":220:13)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":217:17)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":217:34)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":218:13)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":219:17)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":221:20)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":221:21)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":221:30)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":221:33)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":221:47)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":221:13)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":221:48)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":222:34)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":222:13)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":223:49)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":223:39)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":223:13)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":223:59)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":224:38)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":224:32)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":224:13)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":224:46)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":225:13)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":228:13)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":225:25)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":225:58)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":225:59)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":225:68)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":225:82)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":225:17)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":225:88)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":226:13)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":227:17)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":231:31)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":231:46)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":231:59)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":231:77)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":231:80)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":231:26)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":231:13)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":231:81)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":232:13)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":235:13)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":232:17)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":232:31)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":232:44)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":232:47)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":232:61)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":233:13)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":234:17)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":237:39)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":237:25)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":237:13)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":239:25)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":239:20)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":239:13)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":239:36)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":241:16)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":242:9)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":245:9)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":242:13)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":242:30)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":243:9)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":244:26)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":244:13)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":253:22)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":253:5)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":254:18)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":254:5)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":151:1)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":151:29)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":258:1)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":288:1)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":259:1)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":260:5)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":287:5)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":260:8)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":261:5)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":262:9)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":286:9)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":263:13)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":263:17)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":264:13)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":264:58)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":264:35)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":264:42)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":264:47)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":264:57)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":265:13)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":265:43)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":265:17)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":265:27)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":265:33)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":265:34)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":265:40)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":265:39)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":267:13)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":270:13)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":267:22)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":267:18)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":267:25)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":267:29)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":267:27)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":268:13)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":269:29)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":269:17)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":269:24)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":269:25)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":267:34)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":267:33)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":272:13)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":284:13)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":272:17)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":272:25)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":272:27)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":272:30)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":272:38)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":272:40)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":273:13)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":280:13)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":282:13)
#loc437 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":274:32)
#loc438 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":274:17)
#loc439 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":274:24)
#loc440 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":274:28)
#loc441 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":276:17)
#loc442 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":279:17)
#loc443 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":276:25)
#loc444 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":276:21)
#loc445 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":276:28)
#loc446 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":276:32)
#loc447 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":276:30)
#loc448 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":277:17)
#loc449 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":278:34)
#loc450 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":278:41)
#loc451 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":278:42)
#loc452 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":278:21)
#loc453 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":276:37)
#loc454 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":276:36)
#loc455 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":283:27)
#loc456 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":283:17)
#loc457 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":285:13)
#loc458 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":285:18)
#loc459 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":290:1)
#loc460 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":353:1)
#loc461 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":292:5)
#loc462 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":292:9)
#loc463 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":294:13)
#loc464 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":294:12)
#loc465 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":294:5)
#loc466 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":295:5)
#loc467 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":350:5)
#loc468 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":300:9)
#loc469 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":300:13)
#loc470 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":301:9)
#loc471 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":301:28)
#loc472 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":302:9)
#loc473 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":302:32)
#loc474 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":303:9)
#loc475 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":303:41)
#loc476 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":304:9)
#loc477 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":339:17)
#loc478 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":305:9)
#loc479 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":338:9)
#loc480 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":314:36)
#loc481 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":314:45)
#loc482 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":314:58)
#loc483 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":314:29)
#loc484 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":314:13)
#loc485 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":314:69)
#loc486 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":315:13)
#loc487 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":318:13)
#loc488 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":315:17)
#loc489 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":315:34)
#loc490 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":316:13)
#loc491 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":317:17)
#loc492 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":319:20)
#loc493 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":319:21)
#loc494 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":319:30)
#loc495 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":319:33)
#loc496 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":319:47)
#loc497 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":319:13)
#loc498 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":319:48)
#loc499 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":320:34)
#loc500 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":320:13)
#loc501 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":321:49)
#loc502 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":321:39)
#loc503 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":321:13)
#loc504 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":321:59)
#loc505 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":322:38)
#loc506 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":322:32)
#loc507 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":322:13)
#loc508 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":322:46)
#loc509 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":323:13)
#loc510 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":326:13)
#loc511 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":323:25)
#loc512 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":323:58)
#loc513 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":323:59)
#loc514 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":323:68)
#loc515 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":323:82)
#loc516 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":323:17)
#loc517 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":323:88)
#loc518 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":324:13)
#loc519 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":325:17)
#loc520 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":329:31)
#loc521 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":329:46)
#loc522 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":329:59)
#loc523 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":329:77)
#loc524 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":329:80)
#loc525 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":329:26)
#loc526 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":329:13)
#loc527 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":329:81)
#loc528 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":330:13)
#loc529 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":333:13)
#loc530 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":330:17)
#loc531 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":330:31)
#loc532 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":330:44)
#loc533 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":330:47)
#loc534 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":330:61)
#loc535 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":331:13)
#loc536 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":332:17)
#loc537 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":335:39)
#loc538 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":335:25)
#loc539 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":335:13)
#loc540 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":337:25)
#loc541 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":337:20)
#loc542 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":337:13)
#loc543 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":337:36)
#loc544 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":339:16)
#loc545 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":340:9)
#loc546 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":343:9)
#loc547 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":340:13)
#loc548 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":340:30)
#loc549 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":341:9)
#loc550 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":342:26)
#loc551 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":342:13)
#loc552 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":351:22)
#loc553 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":351:5)
#loc554 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":352:18)
#loc555 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":352:5)
#loc556 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":152:1)
#loc557 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":152:28)
#loc558 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":356:1)
#loc559 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":387:1)
#loc562 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":357:1)
#loc563 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":358:5)
#loc564 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":386:5)
#loc565 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":358:8)
#loc566 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":359:5)
#loc567 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":360:9)
#loc568 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":385:9)
#loc569 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":361:13)
#loc570 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":361:17)
#loc571 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":362:13)
#loc572 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":362:58)
#loc573 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":362:35)
#loc574 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":362:42)
#loc575 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":362:47)
#loc576 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":362:57)
#loc577 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":363:13)
#loc578 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":363:43)
#loc579 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":363:17)
#loc580 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":363:27)
#loc581 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":363:33)
#loc582 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":363:34)
#loc583 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":363:40)
#loc584 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":363:39)
#loc585 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":365:13)
#loc586 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":368:13)
#loc587 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":365:22)
#loc588 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":365:18)
#loc589 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":365:25)
#loc590 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":365:29)
#loc591 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":365:27)
#loc592 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":366:13)
#loc593 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":367:29)
#loc594 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":367:17)
#loc595 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":367:24)
#loc596 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":367:25)
#loc597 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":365:34)
#loc598 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":365:33)
#loc599 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":371:13)
#loc600 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":383:13)
#loc601 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":371:17)
#loc602 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":371:25)
#loc603 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":372:13)
#loc604 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":379:13)
#loc605 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":381:13)
#loc606 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":373:32)
#loc607 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":373:17)
#loc608 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":373:24)
#loc609 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":373:28)
#loc610 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":375:17)
#loc611 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":378:17)
#loc612 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":375:25)
#loc613 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":375:21)
#loc614 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":375:28)
#loc615 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":375:32)
#loc616 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":375:30)
#loc617 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":376:17)
#loc618 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":377:34)
#loc619 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":377:41)
#loc620 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":377:42)
#loc621 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":377:21)
#loc622 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":375:37)
#loc623 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":375:36)
#loc624 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":382:27)
#loc625 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":382:17)
#loc626 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":384:13)
#loc627 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":384:18)
#loc628 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":389:1)
#loc629 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":399:1)
#loc630 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":391:5)
#loc631 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":391:9)
#loc632 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":393:13)
#loc633 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":393:12)
#loc634 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":393:5)
#loc635 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":396:12)
#loc636 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":396:5)
#loc637 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":397:21)
#loc638 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":397:5)
#loc639 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":398:17)
#loc640 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c":398:5)
#loc641 = loc(fused[#loc1, #loc2])
#loc642 = loc(fused[#loc3, #loc4])
#loc643 = loc(fused[#loc6, #loc7])
#loc644 = loc(fused[#loc8, #loc9])
#loc645 = loc(fused[#loc10, #loc11])
#loc646 = loc(fused[#loc12, #loc13])
#loc647 = loc(fused[#loc14, #loc15])
#loc648 = loc(fused[#loc16, #loc17])
#loc649 = loc(fused[#loc18, #loc19])
#loc650 = loc(fused[#loc20, #loc21])
#loc651 = loc(fused[#loc22, #loc23])
#loc652 = loc(fused[#loc24, #loc25])
#loc653 = loc(fused[#loc27, #loc28])
#loc654 = loc(fused[#loc29, #loc30])
#loc656 = loc(fused[#loc34, #loc35])
#loc657 = loc(fused[#loc37, #loc35])
#loc658 = loc(fused[#loc38, #loc39])
#loc659 = loc(fused[#loc40, #loc41])
#loc660 = loc(fused[#loc42, #loc43])
#loc661 = loc(fused[#loc46, #loc47])
#loc662 = loc(fused[#loc45, #loc47])
#loc663 = loc(fused[#loc44, #loc43])
#loc664 = loc(fused[#loc48, #loc49])
#loc665 = loc(fused[#loc50, #loc51])
#loc666 = loc(fused[#loc52, #loc49])
#loc667 = loc(fused[#loc56, #loc57])
#loc668 = loc(fused[#loc59, #loc58])
#loc669 = loc(fused[#loc60, #loc61])
#loc670 = loc(fused[#loc63, #loc57])
#loc671 = loc(fused[#loc65, #loc64])
#loc672 = loc(fused[#loc69, #loc68])
#loc673 = loc(fused[#loc70, #loc71])
#loc674 = loc(fused[#loc72, #loc73])
#loc675 = loc(fused[#loc74, #loc75, #loc76, #loc71])
#loc676 = loc(fused[#loc78, #loc77])
#loc677 = loc(fused[#loc81, #loc82])
#loc678 = loc(fused[#loc84, #loc83])
#loc679 = loc(fused[#loc85, #loc86])
#loc680 = loc(fused[#loc88, #loc82])
#loc681 = loc(fused[#loc94, #loc93])
#loc682 = loc(fused[#loc98, #loc99])
#loc683 = loc(fused[#loc100, #loc101])
#loc684 = loc(fused[#loc104, #loc102])
#loc685 = loc(fused[#loc105, #loc106])
#loc686 = loc(fused[#loc107, #loc108])
#loc687 = loc(fused[#loc109, #loc110])
#loc688 = loc(fused[#loc111, #loc112])
#loc689 = loc(fused[#loc113, #loc114])
#loc690 = loc(fused[#loc115, #loc116])
#loc691 = loc(fused[#loc117, #loc118])
#loc692 = loc(fused[#loc123, #loc124])
#loc693 = loc(fused[#loc125, #loc126])
#loc694 = loc(fused[#loc127, #loc128])
#loc695 = loc(fused[#loc129, #loc126])
#loc696 = loc(fused[#loc131, #loc132])
#loc697 = loc(fused[#loc134, #loc135])
#loc698 = loc(fused[#loc136, #loc137])
#loc699 = loc(fused[#loc140, #loc138])
#loc700 = loc(fused[#loc144, #loc145])
#loc701 = loc(fused[#loc149, #loc150])
#loc702 = loc(fused[#loc151, #loc152])
#loc703 = loc(fused[#loc154, #loc155])
#loc704 = loc(fused[#loc156, #loc157])
#loc705 = loc(fused[#loc158, #loc159])
#loc706 = loc(fused[#loc160, #loc152])
#loc707 = loc(fused[#loc164, #loc165])
#loc708 = loc(fused[#loc168, #loc169])
#loc709 = loc(fused[#loc170, #loc171])
#loc710 = loc(fused[#loc172, #loc173])
#loc711 = loc(fused[#loc175, #loc176])
#loc712 = loc(fused[#loc177, #loc171])
#loc713 = loc(fused[#loc181, #loc179])
#loc714 = loc(fused[#loc184, #loc185])
#loc715 = loc(fused[#loc187, #loc188])
#loc716 = loc(fused[#loc189, #loc190])
#loc717 = loc(fused[#loc191, #loc188])
#loc718 = loc(fused[#loc195, #loc194])
#loc719 = loc(fused[#loc198, #loc199])
#loc720 = loc(fused[#loc200, #loc201])
#loc721 = loc(fused[#loc202, #loc203])
#loc722 = loc(fused[#loc204, #loc205])
#loc723 = loc(fused[#loc206, #loc207])
#loc724 = loc(fused[#loc210, #loc211])
#loc726 = loc(fused[#loc215, #loc216])
#loc727 = loc(fused[#loc218, #loc219, #loc220, #loc216])
#loc728 = loc(fused[#loc222, #loc223])
#loc729 = loc(fused[#loc224, #loc225])
#loc730 = loc(fused[#loc226, #loc227])
#loc731 = loc(fused[#loc230, #loc231])
#loc732 = loc(fused[#loc229, #loc231])
#loc733 = loc(fused[#loc228, #loc227])
#loc734 = loc(fused[#loc232, #loc233])
#loc735 = loc(fused[#loc234, #loc235])
#loc736 = loc(fused[#loc236, #loc233])
#loc737 = loc(fused[#loc240, #loc241])
#loc738 = loc(fused[#loc243, #loc242])
#loc739 = loc(fused[#loc244, #loc245])
#loc740 = loc(fused[#loc247, #loc241])
#loc741 = loc(fused[#loc249, #loc248])
#loc742 = loc(fused[#loc253, #loc252])
#loc743 = loc(fused[#loc254, #loc255])
#loc744 = loc(fused[#loc256, #loc257])
#loc745 = loc(fused[#loc259, #loc261])
#loc746 = loc(fused[#loc262, #loc263, #loc264, #loc255])
#loc747 = loc(fused[#loc266, #loc265])
#loc748 = loc(fused[#loc269, #loc270])
#loc749 = loc(fused[#loc272, #loc271])
#loc750 = loc(fused[#loc273, #loc274])
#loc751 = loc(fused[#loc276, #loc270])
#loc752 = loc(fused[#loc282, #loc281])
#loc753 = loc(fused[#loc286, #loc287])
#loc754 = loc(fused[#loc288, #loc289])
#loc755 = loc(fused[#loc292, #loc290])
#loc756 = loc(fused[#loc293, #loc294])
#loc757 = loc(fused[#loc295, #loc296])
#loc758 = loc(fused[#loc297, #loc298])
#loc759 = loc(fused[#loc299, #loc300])
#loc760 = loc(fused[#loc301, #loc302])
#loc761 = loc(fused[#loc303, #loc304])
#loc762 = loc(fused[#loc305, #loc306])
#loc763 = loc(fused[#loc311, #loc312])
#loc764 = loc(fused[#loc313, #loc314])
#loc765 = loc(fused[#loc315, #loc316])
#loc766 = loc(fused[#loc317, #loc314])
#loc767 = loc(fused[#loc319, #loc320])
#loc768 = loc(fused[#loc322, #loc323])
#loc769 = loc(fused[#loc324, #loc325])
#loc770 = loc(fused[#loc327, #loc326])
#loc771 = loc(fused[#loc330, #loc331])
#loc772 = loc(fused[#loc334, #loc335])
#loc773 = loc(fused[#loc336, #loc337])
#loc774 = loc(fused[#loc339, #loc340])
#loc775 = loc(fused[#loc341, #loc342])
#loc776 = loc(fused[#loc343, #loc344])
#loc777 = loc(fused[#loc345, #loc337])
#loc778 = loc(fused[#loc349, #loc350])
#loc779 = loc(fused[#loc353, #loc354])
#loc780 = loc(fused[#loc355, #loc356])
#loc781 = loc(fused[#loc357, #loc358])
#loc782 = loc(fused[#loc360, #loc361])
#loc783 = loc(fused[#loc362, #loc356])
#loc784 = loc(fused[#loc366, #loc364])
#loc785 = loc(fused[#loc369, #loc370])
#loc786 = loc(fused[#loc372, #loc373])
#loc787 = loc(fused[#loc374, #loc375])
#loc788 = loc(fused[#loc376, #loc373])
#loc789 = loc(fused[#loc380, #loc379])
#loc790 = loc(fused[#loc383, #loc384])
#loc791 = loc(fused[#loc385, #loc386])
#loc793 = loc(fused[#loc390, #loc391])
#loc794 = loc(fused[#loc393, #loc391])
#loc795 = loc(fused[#loc394, #loc395])
#loc796 = loc(fused[#loc396, #loc397])
#loc797 = loc(fused[#loc398, #loc399])
#loc798 = loc(fused[#loc402, #loc403])
#loc799 = loc(fused[#loc401, #loc403])
#loc800 = loc(fused[#loc400, #loc399])
#loc801 = loc(fused[#loc404, #loc405])
#loc802 = loc(fused[#loc406, #loc407])
#loc803 = loc(fused[#loc408, #loc405])
#loc804 = loc(fused[#loc412, #loc413])
#loc805 = loc(fused[#loc415, #loc414])
#loc806 = loc(fused[#loc416, #loc417])
#loc807 = loc(fused[#loc419, #loc413])
#loc808 = loc(fused[#loc421, #loc420])
#loc809 = loc(fused[#loc425, #loc424])
#loc810 = loc(fused[#loc426, #loc427])
#loc811 = loc(fused[#loc428, #loc429])
#loc812 = loc(fused[#loc431, #loc433])
#loc813 = loc(fused[#loc434, #loc435, #loc436, #loc427])
#loc814 = loc(fused[#loc438, #loc437])
#loc815 = loc(fused[#loc441, #loc442])
#loc816 = loc(fused[#loc444, #loc443])
#loc817 = loc(fused[#loc445, #loc446])
#loc818 = loc(fused[#loc448, #loc442])
#loc819 = loc(fused[#loc454, #loc453])
#loc820 = loc(fused[#loc459, #loc460])
#loc821 = loc(fused[#loc461, #loc462])
#loc822 = loc(fused[#loc465, #loc463])
#loc823 = loc(fused[#loc466, #loc467])
#loc824 = loc(fused[#loc468, #loc469])
#loc825 = loc(fused[#loc470, #loc471])
#loc826 = loc(fused[#loc472, #loc473])
#loc827 = loc(fused[#loc474, #loc475])
#loc828 = loc(fused[#loc476, #loc477])
#loc829 = loc(fused[#loc478, #loc479])
#loc830 = loc(fused[#loc484, #loc485])
#loc831 = loc(fused[#loc486, #loc487])
#loc832 = loc(fused[#loc488, #loc489])
#loc833 = loc(fused[#loc490, #loc487])
#loc834 = loc(fused[#loc492, #loc493])
#loc835 = loc(fused[#loc495, #loc496])
#loc836 = loc(fused[#loc497, #loc498])
#loc837 = loc(fused[#loc500, #loc499])
#loc838 = loc(fused[#loc503, #loc504])
#loc839 = loc(fused[#loc507, #loc508])
#loc840 = loc(fused[#loc509, #loc510])
#loc841 = loc(fused[#loc512, #loc513])
#loc842 = loc(fused[#loc514, #loc515])
#loc843 = loc(fused[#loc516, #loc517])
#loc844 = loc(fused[#loc518, #loc510])
#loc845 = loc(fused[#loc522, #loc523])
#loc846 = loc(fused[#loc526, #loc527])
#loc847 = loc(fused[#loc528, #loc529])
#loc848 = loc(fused[#loc530, #loc531])
#loc849 = loc(fused[#loc533, #loc534])
#loc850 = loc(fused[#loc535, #loc529])
#loc851 = loc(fused[#loc539, #loc537])
#loc852 = loc(fused[#loc542, #loc543])
#loc853 = loc(fused[#loc545, #loc546])
#loc854 = loc(fused[#loc547, #loc548])
#loc855 = loc(fused[#loc549, #loc546])
#loc856 = loc(fused[#loc553, #loc552])
#loc857 = loc(fused[#loc556, #loc557])
#loc858 = loc(fused[#loc558, #loc559])
#loc860 = loc(fused[#loc563, #loc564])
#loc861 = loc(fused[#loc566, #loc564])
#loc862 = loc(fused[#loc567, #loc568])
#loc863 = loc(fused[#loc569, #loc570])
#loc864 = loc(fused[#loc571, #loc572])
#loc865 = loc(fused[#loc575, #loc576])
#loc866 = loc(fused[#loc574, #loc576])
#loc867 = loc(fused[#loc573, #loc572])
#loc868 = loc(fused[#loc577, #loc578])
#loc869 = loc(fused[#loc579, #loc580])
#loc870 = loc(fused[#loc581, #loc578])
#loc871 = loc(fused[#loc585, #loc586])
#loc872 = loc(fused[#loc588, #loc587])
#loc873 = loc(fused[#loc589, #loc590])
#loc874 = loc(fused[#loc592, #loc586])
#loc875 = loc(fused[#loc594, #loc593])
#loc876 = loc(fused[#loc598, #loc597])
#loc877 = loc(fused[#loc599, #loc600])
#loc878 = loc(fused[#loc601, #loc602])
#loc879 = loc(fused[#loc603, #loc604, #loc605, #loc600])
#loc880 = loc(fused[#loc607, #loc606])
#loc881 = loc(fused[#loc610, #loc611])
#loc882 = loc(fused[#loc613, #loc612])
#loc883 = loc(fused[#loc614, #loc615])
#loc884 = loc(fused[#loc617, #loc611])
#loc885 = loc(fused[#loc623, #loc622])
#loc886 = loc(fused[#loc628, #loc629])
#loc887 = loc(fused[#loc630, #loc631])
#loc888 = loc(fused[#loc634, #loc632])
#loc889 = loc(fused[#loc636, #loc635])
#loc890 = loc(fused[#loc638, #loc637])
