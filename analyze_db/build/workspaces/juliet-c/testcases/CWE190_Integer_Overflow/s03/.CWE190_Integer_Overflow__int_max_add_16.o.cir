!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_add_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc93)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_add_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc95)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc96)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    cir.br ^bb1 loc(#loc98)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc98)
  ^bb2:  // 2 preds: ^bb1, ^bb5
    %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %4 ^bb3, ^bb6 loc(#loc13)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc99)
  ^bb4:  // pred: ^bb3
    %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc15)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    cir.br ^bb6 loc(#loc17)
  ^bb5:  // no predecessors
    cir.br ^bb2 loc(#loc12)
  ^bb6:  // 2 preds: ^bb2, ^bb4
    cir.br ^bb7 loc(#loc12)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc101)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc101)
  ^bb9:  // 2 preds: ^bb8, ^bb14
    %6 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %7 ^bb10, ^bb15 loc(#loc20)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc102)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc103)
  ^bb12:  // pred: ^bb11
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc6)
    %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc24)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc95)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc26)
    cir.br ^bb13 loc(#loc23)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc27)
  ^bb14:  // no predecessors
    cir.br ^bb9 loc(#loc19)
  ^bb15:  // 2 preds: ^bb9, ^bb13
    cir.br ^bb16 loc(#loc19)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc4)
  } loc(#loc94)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_add_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc105)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc106)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc104)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc36)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc109)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc110)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc43)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    cir.br ^bb1 loc(#loc112)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc112)
  ^bb2:  // 2 preds: ^bb1, ^bb5
    %3 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc47)
    cir.brcond %4 ^bb3, ^bb6 loc(#loc47)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc113)
  ^bb4:  // pred: ^bb3
    %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc49)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    cir.br ^bb6 loc(#loc51)
  ^bb5:  // no predecessors
    cir.br ^bb2 loc(#loc46)
  ^bb6:  // 2 preds: ^bb2, ^bb4
    cir.br ^bb7 loc(#loc46)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc115)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc115)
  ^bb9:  // 2 preds: ^bb8, ^bb17
    %6 = cir.const #cir.int<1> : !s32i loc(#loc54)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc54)
    cir.brcond %7 ^bb10, ^bb18 loc(#loc54)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc116)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc117)
  ^bb12:  // pred: ^bb11
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc58)
    %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc59)
    %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc118)
    cir.brcond %10 ^bb13, ^bb14 loc(#loc119)
  ^bb13:  // pred: ^bb12
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc63)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc40)
    %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc63)
    cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc65)
    cir.br ^bb15 loc(#loc61)
  ^bb14:  // pred: ^bb12
    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc36)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    cir.br ^bb15 loc(#loc57)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc57)
  ^bb16:  // pred: ^bb15
    cir.br ^bb18 loc(#loc67)
  ^bb17:  // no predecessors
    cir.br ^bb9 loc(#loc53)
  ^bb18:  // 2 preds: ^bb9, ^bb16
    cir.br ^bb19 loc(#loc53)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc38)
  } loc(#loc108)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc121)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc122)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc74)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc123)
    cir.br ^bb1 loc(#loc124)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc124)
  ^bb2:  // 2 preds: ^bb1, ^bb5
    %3 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc78)
    cir.brcond %4 ^bb3, ^bb6 loc(#loc78)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc125)
  ^bb4:  // pred: ^bb3
    %5 = cir.const #cir.int<2> : !s32i loc(#loc80)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    cir.br ^bb6 loc(#loc82)
  ^bb5:  // no predecessors
    cir.br ^bb2 loc(#loc77)
  ^bb6:  // 2 preds: ^bb2, ^bb4
    cir.br ^bb7 loc(#loc77)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc127)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc127)
  ^bb9:  // 2 preds: ^bb8, ^bb14
    %6 = cir.const #cir.int<1> : !s32i loc(#loc85)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc85)
    cir.brcond %7 ^bb10, ^bb15 loc(#loc85)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc128)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc129)
  ^bb12:  // pred: ^bb11
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc71)
    %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc89)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc90)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc91)
    cir.br ^bb13 loc(#loc88)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc92)
  ^bb14:  // no predecessors
    cir.br ^bb9 loc(#loc84)
  ^bb15:  // 2 preds: ^bb9, ^bb13
    cir.br ^bb16 loc(#loc84)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc69)
  } loc(#loc120)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_add_16.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_add_16.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_add_16.c":42:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_add_16.c":37:13)
#loc6 = loc("CWE190_Integer_Overflow__int_max_add_16.c":37:33)
#loc7 = loc("CWE190_Integer_Overflow__int_max_add_16.c":24:5)
#loc8 = loc("CWE190_Integer_Overflow__int_max_add_16.c":24:9)
#loc9 = loc("CWE190_Integer_Overflow__int_max_add_16.c":26:12)
#loc10 = loc("CWE190_Integer_Overflow__int_max_add_16.c":26:5)
#loc11 = loc("CWE190_Integer_Overflow__int_max_add_16.c":27:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_add_16.c":32:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_add_16.c":27:11)
#loc14 = loc("CWE190_Integer_Overflow__int_max_add_16.c":28:5)
#loc15 = loc("CWE190_Integer_Overflow__int_max_add_16.c":30:16)
#loc16 = loc("CWE190_Integer_Overflow__int_max_add_16.c":30:9)
#loc17 = loc("CWE190_Integer_Overflow__int_max_add_16.c":31:9)
#loc18 = loc("CWE190_Integer_Overflow__int_max_add_16.c":33:5)
#loc19 = loc("CWE190_Integer_Overflow__int_max_add_16.c":41:5)
#loc20 = loc("CWE190_Integer_Overflow__int_max_add_16.c":33:11)
#loc21 = loc("CWE190_Integer_Overflow__int_max_add_16.c":34:5)
#loc22 = loc("CWE190_Integer_Overflow__int_max_add_16.c":35:9)
#loc23 = loc("CWE190_Integer_Overflow__int_max_add_16.c":39:9)
#loc24 = loc("CWE190_Integer_Overflow__int_max_add_16.c":37:26)
#loc25 = loc("CWE190_Integer_Overflow__int_max_add_16.c":38:26)
#loc26 = loc("CWE190_Integer_Overflow__int_max_add_16.c":38:13)
#loc27 = loc("CWE190_Integer_Overflow__int_max_add_16.c":40:9)
#loc28 = loc("CWE190_Integer_Overflow__int_max_add_16.c":99:1)
#loc29 = loc("CWE190_Integer_Overflow__int_max_add_16.c":103:1)
#loc30 = loc("CWE190_Integer_Overflow__int_max_add_16.c":101:5)
#loc31 = loc("CWE190_Integer_Overflow__int_max_add_16.c":101:13)
#loc32 = loc("CWE190_Integer_Overflow__int_max_add_16.c":102:5)
#loc33 = loc("CWE190_Integer_Overflow__int_max_add_16.c":102:13)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc36 = loc("CWE190_Integer_Overflow__int_max_add_16.c":70:23)
#loc37 = loc("CWE190_Integer_Overflow__int_max_add_16.c":49:1)
#loc38 = loc("CWE190_Integer_Overflow__int_max_add_16.c":74:1)
#loc39 = loc("CWE190_Integer_Overflow__int_max_add_16.c":65:13)
#loc40 = loc("CWE190_Integer_Overflow__int_max_add_16.c":65:33)
#loc41 = loc("CWE190_Integer_Overflow__int_max_add_16.c":51:5)
#loc42 = loc("CWE190_Integer_Overflow__int_max_add_16.c":51:9)
#loc43 = loc("CWE190_Integer_Overflow__int_max_add_16.c":53:12)
#loc44 = loc("CWE190_Integer_Overflow__int_max_add_16.c":53:5)
#loc45 = loc("CWE190_Integer_Overflow__int_max_add_16.c":54:5)
#loc46 = loc("CWE190_Integer_Overflow__int_max_add_16.c":59:5)
#loc47 = loc("CWE190_Integer_Overflow__int_max_add_16.c":54:11)
#loc48 = loc("CWE190_Integer_Overflow__int_max_add_16.c":55:5)
#loc49 = loc("CWE190_Integer_Overflow__int_max_add_16.c":57:16)
#loc50 = loc("CWE190_Integer_Overflow__int_max_add_16.c":57:9)
#loc51 = loc("CWE190_Integer_Overflow__int_max_add_16.c":58:9)
#loc52 = loc("CWE190_Integer_Overflow__int_max_add_16.c":60:5)
#loc53 = loc("CWE190_Integer_Overflow__int_max_add_16.c":73:5)
#loc54 = loc("CWE190_Integer_Overflow__int_max_add_16.c":60:11)
#loc55 = loc("CWE190_Integer_Overflow__int_max_add_16.c":61:5)
#loc56 = loc("CWE190_Integer_Overflow__int_max_add_16.c":63:9)
#loc57 = loc("CWE190_Integer_Overflow__int_max_add_16.c":71:9)
#loc58 = loc("CWE190_Integer_Overflow__int_max_add_16.c":63:13)
#loc59 = loc("CWE190_Integer_Overflow__int_max_add_16.c":63:20)
#loc60 = loc("CWE190_Integer_Overflow__int_max_add_16.c":64:9)
#loc61 = loc("CWE190_Integer_Overflow__int_max_add_16.c":67:9)
#loc62 = loc("CWE190_Integer_Overflow__int_max_add_16.c":69:9)
#loc63 = loc("CWE190_Integer_Overflow__int_max_add_16.c":65:26)
#loc64 = loc("CWE190_Integer_Overflow__int_max_add_16.c":66:26)
#loc65 = loc("CWE190_Integer_Overflow__int_max_add_16.c":66:13)
#loc66 = loc("CWE190_Integer_Overflow__int_max_add_16.c":70:13)
#loc67 = loc("CWE190_Integer_Overflow__int_max_add_16.c":72:9)
#loc68 = loc("CWE190_Integer_Overflow__int_max_add_16.c":77:1)
#loc69 = loc("CWE190_Integer_Overflow__int_max_add_16.c":97:1)
#loc70 = loc("CWE190_Integer_Overflow__int_max_add_16.c":92:13)
#loc71 = loc("CWE190_Integer_Overflow__int_max_add_16.c":92:33)
#loc72 = loc("CWE190_Integer_Overflow__int_max_add_16.c":79:5)
#loc73 = loc("CWE190_Integer_Overflow__int_max_add_16.c":79:9)
#loc74 = loc("CWE190_Integer_Overflow__int_max_add_16.c":81:12)
#loc75 = loc("CWE190_Integer_Overflow__int_max_add_16.c":81:5)
#loc76 = loc("CWE190_Integer_Overflow__int_max_add_16.c":82:5)
#loc77 = loc("CWE190_Integer_Overflow__int_max_add_16.c":87:5)
#loc78 = loc("CWE190_Integer_Overflow__int_max_add_16.c":82:11)
#loc79 = loc("CWE190_Integer_Overflow__int_max_add_16.c":83:5)
#loc80 = loc("CWE190_Integer_Overflow__int_max_add_16.c":85:16)
#loc81 = loc("CWE190_Integer_Overflow__int_max_add_16.c":85:9)
#loc82 = loc("CWE190_Integer_Overflow__int_max_add_16.c":86:9)
#loc83 = loc("CWE190_Integer_Overflow__int_max_add_16.c":88:5)
#loc84 = loc("CWE190_Integer_Overflow__int_max_add_16.c":96:5)
#loc85 = loc("CWE190_Integer_Overflow__int_max_add_16.c":88:11)
#loc86 = loc("CWE190_Integer_Overflow__int_max_add_16.c":89:5)
#loc87 = loc("CWE190_Integer_Overflow__int_max_add_16.c":90:9)
#loc88 = loc("CWE190_Integer_Overflow__int_max_add_16.c":94:9)
#loc89 = loc("CWE190_Integer_Overflow__int_max_add_16.c":92:26)
#loc90 = loc("CWE190_Integer_Overflow__int_max_add_16.c":93:26)
#loc91 = loc("CWE190_Integer_Overflow__int_max_add_16.c":93:13)
#loc92 = loc("CWE190_Integer_Overflow__int_max_add_16.c":95:9)
#loc93 = loc(fused[#loc1, #loc2])
#loc94 = loc(fused[#loc3, #loc4])
#loc95 = loc(fused[#loc5, #loc6])
#loc96 = loc(fused[#loc7, #loc8])
#loc97 = loc(fused[#loc10, #loc9])
#loc98 = loc(fused[#loc11, #loc12])
#loc99 = loc(fused[#loc14, #loc12])
#loc100 = loc(fused[#loc16, #loc15])
#loc101 = loc(fused[#loc18, #loc19])
#loc102 = loc(fused[#loc21, #loc19])
#loc103 = loc(fused[#loc22, #loc23])
#loc104 = loc(fused[#loc28, #loc29])
#loc105 = loc(fused[#loc30, #loc31])
#loc106 = loc(fused[#loc32, #loc33])
#loc107 = loc(fused[#loc34, #loc35])
#loc108 = loc(fused[#loc37, #loc38])
#loc109 = loc(fused[#loc39, #loc40])
#loc110 = loc(fused[#loc41, #loc42])
#loc111 = loc(fused[#loc44, #loc43])
#loc112 = loc(fused[#loc45, #loc46])
#loc113 = loc(fused[#loc48, #loc46])
#loc114 = loc(fused[#loc50, #loc49])
#loc115 = loc(fused[#loc52, #loc53])
#loc116 = loc(fused[#loc55, #loc53])
#loc117 = loc(fused[#loc56, #loc57])
#loc118 = loc(fused[#loc58, #loc59])
#loc119 = loc(fused[#loc60, #loc61, #loc62, #loc57])
#loc120 = loc(fused[#loc68, #loc69])
#loc121 = loc(fused[#loc70, #loc71])
#loc122 = loc(fused[#loc72, #loc73])
#loc123 = loc(fused[#loc75, #loc74])
#loc124 = loc(fused[#loc76, #loc77])
#loc125 = loc(fused[#loc79, #loc77])
#loc126 = loc(fused[#loc81, #loc80])
#loc127 = loc(fused[#loc83, #loc84])
#loc128 = loc(fused[#loc86, #loc84])
#loc129 = loc(fused[#loc87, #loc88])
