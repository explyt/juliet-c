!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @__isoc23_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc172)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc173)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc174)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc8)
  cir.func private @_Znam(!u64i) -> !cir.ptr<!void> loc(#loc175)
  cir.func private @printIntLine(!s32i) loc(#loc176)
  cir.func @_ZN57CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_153badEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc178)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc18)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc179)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc22)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @__isoc23_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc24)
          %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc173)
          %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc25)
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
          %9 = cir.call @__isoc23_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc24)
          cir.break loc(#loc26)
        } loc(#loc23)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc8)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc8)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc28)
          cir.break loc(#loc29)
        } loc(#loc27)
        cir.yield loc(#loc20)
      } loc(#loc20)
    } loc(#loc180)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc182)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc183)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc184)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc37)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc185)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc186)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc187)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc41)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc42)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc188)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc188)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc189)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc48)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc48)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc191)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc50)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc51)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc192)
          cir.condition(%24) loc(#loc192)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc53)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc55)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc56)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc194)
          } loc(#loc193)
          cir.yield loc(#loc47)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc57)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc58)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc195)
          cir.yield loc(#loc190)
        } loc(#loc190)
      } loc(#loc190)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc59)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc60)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc61)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc59)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc62)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc63)
      cir.delete.array %18 : <!s32i> loc(#loc63)
    } loc(#loc181)
    cir.return loc(#loc14)
  } loc(#loc177)
  cir.func internal private @_ZN57CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15L8goodG2B1Ev() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc197)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc68)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc69)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc198)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc73)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc75)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc75)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc76)
          cir.break loc(#loc77)
        } loc(#loc74)
        cir.case(default, []) {
          %4 = cir.const #cir.int<20> : !s32i loc(#loc79)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc200)
          cir.break loc(#loc81)
        } loc(#loc78)
        cir.yield loc(#loc71)
      } loc(#loc71)
    } loc(#loc199)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc202)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc203)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc204)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc89)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc205)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc206)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc207)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc93)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc94)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc208)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc208)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc209)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc100)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc100)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc211)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc102)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc103)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc212)
          cir.condition(%24) loc(#loc212)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc105)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc106)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc107)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc108)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc214)
          } loc(#loc213)
          cir.yield loc(#loc99)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc109)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc110)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc215)
          cir.yield loc(#loc210)
        } loc(#loc210)
      } loc(#loc210)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc111)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc112)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc113)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc111)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc114)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc115)
      cir.delete.array %18 : <!s32i> loc(#loc115)
    } loc(#loc201)
    cir.return loc(#loc65)
  } loc(#loc196)
  cir.func internal private @_ZN57CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15L8goodG2B2Ev() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc217)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc120)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc121)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc218)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc125)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<20> : !s32i loc(#loc127)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc220)
          cir.break loc(#loc129)
        } loc(#loc126)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc131)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc131)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc132)
          cir.break loc(#loc133)
        } loc(#loc130)
        cir.yield loc(#loc123)
      } loc(#loc123)
    } loc(#loc219)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc222)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc223)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc224)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc141)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc141)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc225)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc226)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc227)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc145)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc146)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc228)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc228)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc229)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc152)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc152)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc231)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc154)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc155)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc155)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc232)
          cir.condition(%24) loc(#loc232)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc157)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc158)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc159)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc160)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc234)
          } loc(#loc233)
          cir.yield loc(#loc151)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc161)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc162)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc235)
          cir.yield loc(#loc230)
        } loc(#loc230)
      } loc(#loc230)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc163)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc164)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc165)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc163)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc166)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc167)
      cir.delete.array %18 : <!s32i> loc(#loc167)
    } loc(#loc221)
    cir.return loc(#loc117)
  } loc(#loc216)
  cir.func @_ZN57CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_154goodEv() extra(#fn_attr) {
    cir.call @_ZN57CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15L8goodG2B1Ev() : () -> () loc(#loc170)
    cir.call @_ZN57CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15L8goodG2B2Ev() : () -> () loc(#loc171)
    cir.return loc(#loc169)
  } loc(#loc236)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":0:0)
#loc1 = loc("/usr/include/stdio.h":442:1)
#loc2 = loc("/usr/include/stdio.h":444:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":33:23)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":37:19)
#loc9 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":128:20)
#loc10 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":129:41)
#loc11 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc12 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":24:1)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":53:1)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":26:5)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":26:9)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":28:13)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":28:12)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":28:5)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":29:5)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":39:5)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":29:12)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":31:5)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":33:9)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":33:16)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":34:9)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":35:5)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":37:9)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":38:9)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":40:5)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":52:5)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":41:9)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":41:16)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":41:26)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":42:9)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":42:14)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":44:21)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":44:28)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":44:38)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":44:9)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":45:37)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":24:6)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":45:28)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":45:46)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":45:9)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":46:9)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":49:9)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":46:18)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":46:14)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":46:21)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":46:33)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":47:9)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":48:29)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":48:13)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":48:24)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":48:25)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":46:40)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":46:39)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":50:22)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":50:33)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":50:34)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":50:9)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":51:19)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":60:1)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":89:1)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":62:5)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":62:9)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":64:13)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":64:12)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":64:5)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":65:5)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":75:5)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":65:12)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":67:5)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":69:19)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":69:9)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":70:9)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":71:5)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":73:16)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":73:9)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":74:9)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":76:5)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":88:5)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":77:9)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":77:16)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":77:26)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":78:9)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":78:14)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":80:21)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":80:28)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":80:38)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":80:9)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":81:37)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":60:13)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":81:28)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":81:46)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":81:9)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":82:9)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":85:9)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":82:18)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":82:14)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":82:21)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":82:33)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":83:9)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":84:29)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":84:13)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":84:24)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":84:25)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":82:40)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":82:39)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":86:22)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":86:33)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":86:34)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":86:9)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":87:19)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":92:1)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":121:1)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":94:5)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":94:9)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":96:13)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":96:12)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":96:5)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":97:5)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":107:5)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":97:12)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":99:5)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":101:16)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":101:9)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":102:9)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":103:5)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":105:19)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":105:9)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":106:9)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":108:5)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":120:5)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":109:9)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":109:16)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":109:26)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":110:9)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":110:14)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":112:21)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":112:28)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":112:38)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":112:9)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":113:37)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":92:13)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":113:28)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":113:46)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":113:9)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":114:9)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":117:9)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":114:18)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":114:14)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":114:21)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":114:33)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":115:9)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":116:29)
#loc158 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":116:13)
#loc159 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":116:24)
#loc160 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":116:25)
#loc161 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":114:40)
#loc162 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":114:39)
#loc163 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":118:22)
#loc164 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":118:33)
#loc165 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":118:34)
#loc166 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":118:9)
#loc167 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":119:19)
#loc168 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":123:1)
#loc169 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":127:1)
#loc170 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":125:5)
#loc171 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_15.cpp":126:5)
#loc172 = loc(fused[#loc1, #loc2])
#loc173 = loc(fused[#loc3, #loc4])
#loc174 = loc(fused[#loc6, #loc7])
#loc175 = loc(fused[#loc9, #loc10])
#loc176 = loc(fused[#loc11, #loc12])
#loc177 = loc(fused[#loc13, #loc14])
#loc178 = loc(fused[#loc15, #loc16])
#loc179 = loc(fused[#loc19, #loc17])
#loc180 = loc(fused[#loc20, #loc21])
#loc181 = loc(fused[#loc30, #loc31])
#loc182 = loc(fused[#loc32, #loc33])
#loc183 = loc(fused[#loc32, #loc34])
#loc184 = loc(fused[#loc35, #loc36])
#loc185 = loc(fused[#loc38, #loc39])
#loc186 = loc(fused[#loc37, #loc39])
#loc187 = loc(fused[#loc40, #loc39])
#loc188 = loc(fused[#loc43, #loc44])
#loc189 = loc(fused[#loc45, #loc44])
#loc190 = loc(fused[#loc46, #loc47])
#loc191 = loc(fused[#loc49, #loc48])
#loc192 = loc(fused[#loc50, #loc51])
#loc193 = loc(fused[#loc52, #loc47])
#loc194 = loc(fused[#loc54, #loc53])
#loc195 = loc(fused[#loc58, #loc57])
#loc196 = loc(fused[#loc64, #loc65])
#loc197 = loc(fused[#loc66, #loc67])
#loc198 = loc(fused[#loc70, #loc68])
#loc199 = loc(fused[#loc71, #loc72])
#loc200 = loc(fused[#loc80, #loc79])
#loc201 = loc(fused[#loc82, #loc83])
#loc202 = loc(fused[#loc84, #loc85])
#loc203 = loc(fused[#loc84, #loc86])
#loc204 = loc(fused[#loc87, #loc88])
#loc205 = loc(fused[#loc90, #loc91])
#loc206 = loc(fused[#loc89, #loc91])
#loc207 = loc(fused[#loc92, #loc91])
#loc208 = loc(fused[#loc95, #loc96])
#loc209 = loc(fused[#loc97, #loc96])
#loc210 = loc(fused[#loc98, #loc99])
#loc211 = loc(fused[#loc101, #loc100])
#loc212 = loc(fused[#loc102, #loc103])
#loc213 = loc(fused[#loc104, #loc99])
#loc214 = loc(fused[#loc106, #loc105])
#loc215 = loc(fused[#loc110, #loc109])
#loc216 = loc(fused[#loc116, #loc117])
#loc217 = loc(fused[#loc118, #loc119])
#loc218 = loc(fused[#loc122, #loc120])
#loc219 = loc(fused[#loc123, #loc124])
#loc220 = loc(fused[#loc128, #loc127])
#loc221 = loc(fused[#loc134, #loc135])
#loc222 = loc(fused[#loc136, #loc137])
#loc223 = loc(fused[#loc136, #loc138])
#loc224 = loc(fused[#loc139, #loc140])
#loc225 = loc(fused[#loc142, #loc143])
#loc226 = loc(fused[#loc141, #loc143])
#loc227 = loc(fused[#loc144, #loc143])
#loc228 = loc(fused[#loc147, #loc148])
#loc229 = loc(fused[#loc149, #loc148])
#loc230 = loc(fused[#loc150, #loc151])
#loc231 = loc(fused[#loc153, #loc152])
#loc232 = loc(fused[#loc154, #loc155])
#loc233 = loc(fused[#loc156, #loc151])
#loc234 = loc(fused[#loc158, #loc157])
#loc235 = loc(fused[#loc162, #loc161])
#loc236 = loc(fused[#loc168, #loc169])
