!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":156:10)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":156:14)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":156:20)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":156:32)
#loc206 = loc(fused[#loc51, #loc52])
#loc207 = loc(fused[#loc53, #loc54])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_13.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant external @GLOBAL_CONST_FIVE : !s32i {alignment = 4 : i64} loc(#loc183)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc184)
  cir.func private @printIntLine(!s32i) loc(#loc185)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_divide_13_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc187)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc12)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc183)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc16)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc17)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc190)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc19)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc19)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc19)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc19)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc19)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc19)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc19)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc19)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc19)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc19)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc19)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc19)
          cir.yield %24 : !u32i loc(#loc19)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc19)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc19)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc19)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc19)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc19)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc19)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc19)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc19)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc19)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc19)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc19)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc19)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc19)
          cir.yield %28 : !u32i loc(#loc19)
        }) : (!cir.bool) -> !u32i loc(#loc19)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc19)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc192)
      } loc(#loc191)
    } loc(#loc189)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc183)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc23)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc24)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc194)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc26)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc196)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc28)
      } loc(#loc195)
    } loc(#loc193)
    cir.return loc(#loc8)
  } loc(#loc186)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_divide_13_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc198)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc199)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc200)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    cir.return loc(#loc30)
  } loc(#loc197)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc202)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc203)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc204)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc48)
  cir.func @main(%arg0: !s32i loc(fused[#loc51, #loc52]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc53, #loc54])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc206)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc207)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc50)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc55)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc55)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc56)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc57)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc57)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc58)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc45)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_rand_divide_13_good : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call @CWE369_Divide_by_Zero__int_rand_divide_13_good() : () -> () loc(#loc60)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc46)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc47)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_rand_divide_13_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc209)
    cir.call @CWE369_Divide_by_Zero__int_rand_divide_13_bad() : () -> () loc(#loc64)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc48)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc67)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc210)
    cir.return %17 : !s32i loc(#loc210)
  } loc(#loc205)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc70)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc212)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc76)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc183)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc80)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc81)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc215)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc83)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc83)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc83)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc83)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc83)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc83)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc83)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc83)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc83)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc83)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc83)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc83)
          cir.yield %24 : !u32i loc(#loc83)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc83)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc83)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc83)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc83)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc83)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc83)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc83)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc83)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc83)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc83)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc83)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc83)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc83)
          cir.yield %28 : !u32i loc(#loc83)
        }) : (!cir.bool) -> !u32i loc(#loc83)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc83)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc217)
      } loc(#loc216)
    } loc(#loc214)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc183)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc87)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc88)
      %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc219)
      cir.if %6 {
        %7 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc69)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc69)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc92)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc95)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc96)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc222)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc100)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
            %12 = cir.binop(div, %10, %11) : !s32i loc(#loc224)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc102)
          } else {
            %10 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc70)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc70)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc103)
          } loc(#loc223)
        } loc(#loc221)
      } loc(#loc220)
    } loc(#loc218)
    cir.return loc(#loc72)
  } loc(#loc211)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc226)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc108)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc109)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc227)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc183)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc113)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc114)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc229)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc116)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc116)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc116)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc116)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc116)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc116)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc116)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc116)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc116)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc116)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc116)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc116)
          cir.yield %24 : !u32i loc(#loc116)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc116)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc116)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc116)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc116)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc116)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc116)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc116)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc116)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc116)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc116)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc116)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc116)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc116)
          cir.yield %28 : !u32i loc(#loc116)
        }) : (!cir.bool) -> !u32i loc(#loc116)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc116)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc231)
      } loc(#loc230)
    } loc(#loc228)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc183)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc120)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc121)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc233)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc125)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc126)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc236)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc130)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc131)
            %12 = cir.binop(div, %10, %11) : !s32i loc(#loc238)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc132)
          } else {
            %10 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc133)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc133)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc134)
          } loc(#loc237)
        } loc(#loc235)
      } loc(#loc234)
    } loc(#loc232)
    cir.return loc(#loc105)
  } loc(#loc225)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc240)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc139)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc140)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc241)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc183)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc144)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc145)
      %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc243)
      cir.if %6 {
        %7 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc149)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc149)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc150)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc151)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc245)
      } loc(#loc244)
    } loc(#loc242)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc183)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc155)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc156)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc247)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc158)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc159)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc249)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc160)
      } loc(#loc248)
    } loc(#loc246)
    cir.return loc(#loc136)
  } loc(#loc239)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc251)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc165)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc166)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc252)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc183)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc170)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc171)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc254)
      cir.if %6 {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc173)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc256)
      } loc(#loc255)
    } loc(#loc253)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc183)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc177)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc178)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc258)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc180)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc181)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc260)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc182)
      } loc(#loc259)
    } loc(#loc257)
    cir.return loc(#loc162)
  } loc(#loc250)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_13.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":111:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":111:18)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":22:1)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":37:1)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":24:5)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":24:9)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":26:13)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":26:12)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":26:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":27:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":31:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":27:8)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":27:27)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":28:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":30:16)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":30:9)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":32:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":36:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":32:8)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":32:27)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":33:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":35:22)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":35:28)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":35:9)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":139:1)
#loc30 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":145:1)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":141:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":141:14)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":142:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":142:14)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":143:5)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":143:14)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":144:5)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":144:14)
#loc39 = loc("/usr/include/stdlib.h":575:1)
#loc40 = loc("/usr/include/stdlib.h":575:41)
#loc41 = loc("/usr/include/time.h":76:1)
#loc42 = loc("/usr/include/time.h":76:38)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":161:15)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":163:15)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":166:15)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":168:15)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":156:1)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":171:1)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":157:1)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":159:27)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":159:22)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":159:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":161:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":162:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":162:52)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":163:5)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":166:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":167:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":167:51)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":168:5)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":170:12)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":170:5)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":57:19)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":68:23)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":44:1)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":71:1)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":46:5)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":46:9)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":48:13)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":48:12)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":48:5)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":49:5)
#loc79 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":53:5)
#loc80 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":49:8)
#loc81 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":49:27)
#loc82 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":50:5)
#loc83 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":52:16)
#loc84 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":52:9)
#loc85 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":54:5)
#loc86 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":70:5)
#loc87 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":54:8)
#loc88 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":54:27)
#loc89 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":55:5)
#loc90 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":58:5)
#loc91 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":60:5)
#loc92 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":57:9)
#loc93 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":62:9)
#loc94 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":69:9)
#loc95 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":62:13)
#loc96 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":62:21)
#loc97 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":63:9)
#loc98 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":65:9)
#loc99 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":67:9)
#loc100 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":64:26)
#loc101 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":64:32)
#loc102 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":64:13)
#loc103 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":68:13)
#loc104 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":74:1)
#loc105 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":96:1)
#loc106 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":76:5)
#loc107 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":76:9)
#loc108 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":78:13)
#loc109 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":78:12)
#loc110 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":78:5)
#loc111 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":79:5)
#loc112 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":83:5)
#loc113 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":79:8)
#loc114 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":79:27)
#loc115 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":80:5)
#loc116 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":82:16)
#loc117 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":82:9)
#loc118 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":84:5)
#loc119 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":95:5)
#loc120 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":84:8)
#loc121 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":84:27)
#loc122 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":85:5)
#loc123 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":87:9)
#loc124 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":94:9)
#loc125 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":87:13)
#loc126 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":87:21)
#loc127 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":88:9)
#loc128 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":90:9)
#loc129 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":92:9)
#loc130 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":89:26)
#loc131 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":89:32)
#loc132 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":89:13)
#loc133 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":93:23)
#loc134 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":93:13)
#loc135 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":99:1)
#loc136 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":119:1)
#loc137 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":101:5)
#loc138 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":101:9)
#loc139 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":103:13)
#loc140 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":103:12)
#loc141 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":103:5)
#loc142 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":104:5)
#loc143 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":113:5)
#loc144 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":104:8)
#loc145 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":104:27)
#loc146 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":105:5)
#loc147 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":108:5)
#loc148 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":110:5)
#loc149 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":107:19)
#loc150 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":107:9)
#loc151 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":112:16)
#loc152 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":112:9)
#loc153 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":114:5)
#loc154 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":118:5)
#loc155 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":114:8)
#loc156 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":114:27)
#loc157 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":115:5)
#loc158 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":117:22)
#loc159 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":117:28)
#loc160 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":117:9)
#loc161 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":122:1)
#loc162 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":137:1)
#loc163 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":124:5)
#loc164 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":124:9)
#loc165 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":126:13)
#loc166 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":126:12)
#loc167 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":126:5)
#loc168 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":127:5)
#loc169 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":131:5)
#loc170 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":127:8)
#loc171 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":127:27)
#loc172 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":128:5)
#loc173 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":130:16)
#loc174 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":130:9)
#loc175 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":132:5)
#loc176 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":136:5)
#loc177 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":132:8)
#loc178 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":132:27)
#loc179 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":133:5)
#loc180 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":135:22)
#loc181 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":135:28)
#loc182 = loc("CWE369_Divide_by_Zero__int_rand_divide_13.c":135:9)
#loc183 = loc(fused[#loc1, #loc2])
#loc184 = loc(fused[#loc3, #loc4])
#loc185 = loc(fused[#loc5, #loc6])
#loc186 = loc(fused[#loc7, #loc8])
#loc187 = loc(fused[#loc9, #loc10])
#loc188 = loc(fused[#loc13, #loc11])
#loc189 = loc(fused[#loc14, #loc15])
#loc190 = loc(fused[#loc16, #loc17])
#loc191 = loc(fused[#loc18, #loc15])
#loc192 = loc(fused[#loc20, #loc19])
#loc193 = loc(fused[#loc21, #loc22])
#loc194 = loc(fused[#loc23, #loc24])
#loc195 = loc(fused[#loc25, #loc22])
#loc196 = loc(fused[#loc26, #loc27])
#loc197 = loc(fused[#loc29, #loc30])
#loc198 = loc(fused[#loc31, #loc32])
#loc199 = loc(fused[#loc33, #loc34])
#loc200 = loc(fused[#loc35, #loc36])
#loc201 = loc(fused[#loc37, #loc38])
#loc202 = loc(fused[#loc39, #loc40])
#loc203 = loc(fused[#loc41, #loc42])
#loc204 = loc(fused[#loc43, #loc44])
#loc205 = loc(fused[#loc49, #loc50])
#loc208 = loc(fused[#loc60, #loc61])
#loc209 = loc(fused[#loc64, #loc65])
#loc210 = loc(fused[#loc68, #loc67])
#loc211 = loc(fused[#loc71, #loc72])
#loc212 = loc(fused[#loc73, #loc74])
#loc213 = loc(fused[#loc77, #loc75])
#loc214 = loc(fused[#loc78, #loc79])
#loc215 = loc(fused[#loc80, #loc81])
#loc216 = loc(fused[#loc82, #loc79])
#loc217 = loc(fused[#loc84, #loc83])
#loc218 = loc(fused[#loc85, #loc86])
#loc219 = loc(fused[#loc87, #loc88])
#loc220 = loc(fused[#loc89, #loc90, #loc91, #loc86])
#loc221 = loc(fused[#loc93, #loc94])
#loc222 = loc(fused[#loc95, #loc96])
#loc223 = loc(fused[#loc97, #loc98, #loc99, #loc94])
#loc224 = loc(fused[#loc100, #loc101])
#loc225 = loc(fused[#loc104, #loc105])
#loc226 = loc(fused[#loc106, #loc107])
#loc227 = loc(fused[#loc110, #loc108])
#loc228 = loc(fused[#loc111, #loc112])
#loc229 = loc(fused[#loc113, #loc114])
#loc230 = loc(fused[#loc115, #loc112])
#loc231 = loc(fused[#loc117, #loc116])
#loc232 = loc(fused[#loc118, #loc119])
#loc233 = loc(fused[#loc120, #loc121])
#loc234 = loc(fused[#loc122, #loc119])
#loc235 = loc(fused[#loc123, #loc124])
#loc236 = loc(fused[#loc125, #loc126])
#loc237 = loc(fused[#loc127, #loc128, #loc129, #loc124])
#loc238 = loc(fused[#loc130, #loc131])
#loc239 = loc(fused[#loc135, #loc136])
#loc240 = loc(fused[#loc137, #loc138])
#loc241 = loc(fused[#loc141, #loc139])
#loc242 = loc(fused[#loc142, #loc143])
#loc243 = loc(fused[#loc144, #loc145])
#loc244 = loc(fused[#loc146, #loc147, #loc148, #loc143])
#loc245 = loc(fused[#loc152, #loc151])
#loc246 = loc(fused[#loc153, #loc154])
#loc247 = loc(fused[#loc155, #loc156])
#loc248 = loc(fused[#loc157, #loc154])
#loc249 = loc(fused[#loc158, #loc159])
#loc250 = loc(fused[#loc161, #loc162])
#loc251 = loc(fused[#loc163, #loc164])
#loc252 = loc(fused[#loc167, #loc165])
#loc253 = loc(fused[#loc168, #loc169])
#loc254 = loc(fused[#loc170, #loc171])
#loc255 = loc(fused[#loc172, #loc169])
#loc256 = loc(fused[#loc174, #loc173])
#loc257 = loc(fused[#loc175, #loc176])
#loc258 = loc(fused[#loc177, #loc178])
#loc259 = loc(fused[#loc179, #loc176])
#loc260 = loc(fused[#loc180, #loc181])
