!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @fputs(!cir.ptr<!s8i>, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" external @stdout : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc58)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"fputs failed!\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc61)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc15)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc63)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc18)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc64)
        cir.condition(%4) loc(#loc19)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc3)
            %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc3)
            %4 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc58)
            %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc23)
            %6 = cir.call @fputs(%3, %5) : (!cir.ptr<!s8i>, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc24)
            %7 = cir.const #cir.int<0> : !s32i loc(#loc25)
            %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc67)
            cir.if %8 {
              %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc8)
              %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc8)
              cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc27)
            } loc(#loc68)
          } loc(#loc66)
        } loc(#loc65)
        cir.yield loc(#loc14)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc29)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc69)
        cir.yield loc(#loc62)
      } loc(#loc62)
    } loc(#loc62)
    cir.return loc(#loc10)
  } loc(#loc60)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc71)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    cir.return loc(#loc31)
  } loc(#loc70)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc73)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc40)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc75)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc43)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc76)
        cir.condition(%4) loc(#loc44)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc48)
            %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc48)
            %4 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc58)
            %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc49)
            %6 = cir.call @fputs(%3, %5) : (!cir.ptr<!s8i>, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc50)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc51)
            %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc51)
            %9 = cir.cmp(eq, %6, %8) : !s32i, !cir.bool loc(#loc79)
            cir.if %9 {
              %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc53)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc53)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc54)
            } loc(#loc80)
          } loc(#loc78)
        } loc(#loc77)
        cir.yield loc(#loc39)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc55)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc56)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
        cir.yield loc(#loc74)
      } loc(#loc74)
    } loc(#loc74)
    cir.return loc(#loc35)
  } loc(#loc72)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":0:0)
#loc1 = loc("/usr/include/stdio.h":717:1)
#loc2 = loc("/usr/include/stdio.h":718:3)
#loc3 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":31:19)
#loc4 = loc("/usr/include/stdio.h":150:1)
#loc5 = loc("/usr/include/stdio.h":150:14)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":33:23)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":24:1)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":36:1)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":26:5)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":26:9)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":27:5)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":35:5)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":27:13)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":27:9)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":27:16)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":27:20)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":27:18)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":28:5)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":31:9)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":34:9)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":31:29)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":31:13)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":31:40)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":32:9)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":33:13)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":27:24)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":27:23)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":56:1)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":59:1)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":58:5)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":58:11)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":43:1)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":54:1)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":45:5)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":45:9)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":46:5)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":53:5)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":46:13)
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":46:9)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":46:16)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":46:20)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":46:18)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":47:5)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":49:9)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":52:9)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":49:19)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":49:29)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":49:13)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":49:40)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":50:9)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":51:23)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":51:13)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":46:24)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputs_17.c":46:23)
#loc57 = loc(fused[#loc1, #loc2])
#loc58 = loc(fused[#loc4, #loc5])
#loc59 = loc(fused[#loc6, #loc7])
#loc60 = loc(fused[#loc9, #loc10])
#loc61 = loc(fused[#loc11, #loc12])
#loc62 = loc(fused[#loc13, #loc14])
#loc63 = loc(fused[#loc16, #loc15])
#loc64 = loc(fused[#loc17, #loc18])
#loc65 = loc(fused[#loc20, #loc14])
#loc66 = loc(fused[#loc21, #loc22])
#loc67 = loc(fused[#loc24, #loc25])
#loc68 = loc(fused[#loc26, #loc22])
#loc69 = loc(fused[#loc29, #loc28])
#loc70 = loc(fused[#loc30, #loc31])
#loc71 = loc(fused[#loc32, #loc33])
#loc72 = loc(fused[#loc34, #loc35])
#loc73 = loc(fused[#loc36, #loc37])
#loc74 = loc(fused[#loc38, #loc39])
#loc75 = loc(fused[#loc41, #loc40])
#loc76 = loc(fused[#loc42, #loc43])
#loc77 = loc(fused[#loc45, #loc39])
#loc78 = loc(fused[#loc46, #loc47])
#loc79 = loc(fused[#loc50, #loc51])
#loc80 = loc(fused[#loc52, #loc47])
#loc81 = loc(fused[#loc56, #loc55])
