!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc44 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":114:10)
#loc45 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":114:14)
#loc46 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":114:20)
#loc47 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":114:32)
#loc145 = loc(fused[#loc44, #loc45])
#loc146 = loc(fused[#loc46, #loc47])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc1)
  cir.func private @printDoubleLine(!cir.double) loc(#loc132)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc133)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_15_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc11)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc137)
            %2 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc17)
            %3 = cir.const #cir.int<1> : !s32i loc(#loc18)
            %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc19)
            %5 = cir.cast(int_to_float, %4 : !s32i), !cir.double loc(#loc19)
            %6 = cir.call @sqrt(%5) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc17)
            cir.store %6, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc138)
            %7 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc22)
            cir.call @printDoubleLine(%7) : (!cir.double) -> () loc(#loc23)
          } loc(#loc136)
          cir.break loc(#loc24)
        } loc(#loc12)
        cir.case(default, []) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc6)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc6)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc26)
          cir.break loc(#loc27)
        } loc(#loc25)
        cir.yield loc(#loc9)
      } loc(#loc9)
    } loc(#loc135)
    cir.return loc(#loc8)
  } loc(#loc134)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc140)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc141)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc139)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc142)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc143)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc41)
  cir.func @main(%arg0: !s32i loc(fused[#loc44, #loc45]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc46, #loc47])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc145)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc146)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc43)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc48)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc48)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc49)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc50)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc50)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc51)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc38)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %8 = cir.get_global @CWE391_Unchecked_Error_Condition__sqrt_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc147)
    cir.call @CWE391_Unchecked_Error_Condition__sqrt_15_good() : () -> () loc(#loc53)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc39)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc40)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %13 = cir.get_global @CWE391_Unchecked_Error_Condition__sqrt_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc148)
    cir.call @CWE391_Unchecked_Error_Condition__sqrt_15_bad() : () -> () loc(#loc57)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc41)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc60)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    cir.return %17 : !s32i loc(#loc149)
  } loc(#loc144)
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc150)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc64)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc151)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc71)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc73)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc73)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc74)
          cir.break loc(#loc75)
        } loc(#loc72)
        cir.case(default, []) {
          cir.scope {
            %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc155)
            %2 = cir.const #cir.int<0> : !s32i loc(#loc81)
            %3 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc82)
            cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc156)
            %4 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc83)
            %5 = cir.const #cir.int<1> : !s32i loc(#loc84)
            %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc85)
            %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc85)
            %8 = cir.call @sqrt(%7) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc83)
            cir.store %8, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc157)
            cir.scope {
              %10 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc90)
              %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc90)
              %12 = cir.const #cir.int<33> : !s32i loc(#loc91)
              %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc159)
              cir.if %13 {
                %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc64)
                %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc64)
                cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc93)
                %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc94)
                %17 = cir.const #cir.int<1> : !s32i loc(#loc95)
                cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc94)
              } loc(#loc160)
            } loc(#loc158)
            %9 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc96)
            cir.call @printDoubleLine(%9) : (!cir.double) -> () loc(#loc97)
          } loc(#loc154)
          cir.break loc(#loc98)
        } loc(#loc76)
        cir.yield loc(#loc69)
      } loc(#loc69)
    } loc(#loc153)
    cir.return loc(#loc68)
  } loc(#loc152)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc103)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc164)
            %2 = cir.const #cir.int<0> : !s32i loc(#loc109)
            %3 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc110)
            cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc165)
            %4 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc111)
            %5 = cir.const #cir.int<1> : !s32i loc(#loc112)
            %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc113)
            %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc113)
            %8 = cir.call @sqrt(%7) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc111)
            cir.store %8, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc166)
            cir.scope {
              %10 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc118)
              %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc118)
              %12 = cir.const #cir.int<33> : !s32i loc(#loc119)
              %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc168)
              cir.if %13 {
                %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc121)
                %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc121)
                cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc122)
                %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc123)
                %17 = cir.const #cir.int<1> : !s32i loc(#loc124)
                cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc123)
              } loc(#loc169)
            } loc(#loc167)
            %9 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc125)
            cir.call @printDoubleLine(%9) : (!cir.double) -> () loc(#loc126)
          } loc(#loc163)
          cir.break loc(#loc127)
        } loc(#loc104)
        cir.case(default, []) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc129)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc129)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc130)
          cir.break loc(#loc131)
        } loc(#loc128)
        cir.yield loc(#loc101)
      } loc(#loc101)
    } loc(#loc162)
    cir.return loc(#loc100)
  } loc(#loc161)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_15.c":0:0)
#loc1 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc6 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":38:19)
#loc7 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":24:1)
#loc8 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":41:1)
#loc9 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":26:5)
#loc10 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":40:5)
#loc11 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":26:12)
#loc12 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":28:5)
#loc13 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":29:5)
#loc14 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":34:5)
#loc15 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":30:9)
#loc16 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":30:16)
#loc17 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":31:32)
#loc18 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":31:46)
#loc19 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":31:45)
#loc20 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":31:9)
#loc21 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":31:47)
#loc22 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":33:25)
#loc23 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":33:9)
#loc24 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":35:5)
#loc25 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":36:5)
#loc26 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":38:9)
#loc27 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":39:9)
#loc28 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":99:1)
#loc29 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":103:1)
#loc30 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":101:5)
#loc31 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":101:11)
#loc32 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":102:5)
#loc33 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":102:11)
#loc34 = loc("/usr/include/stdlib.h":575:1)
#loc35 = loc("/usr/include/stdlib.h":575:41)
#loc36 = loc("/usr/include/time.h":76:1)
#loc37 = loc("/usr/include/time.h":76:38)
#loc38 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":119:15)
#loc39 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":121:15)
#loc40 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":124:15)
#loc41 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":126:15)
#loc42 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":114:1)
#loc43 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":129:1)
#loc48 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":115:1)
#loc49 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":117:27)
#loc50 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":117:22)
#loc51 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":117:5)
#loc52 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":119:5)
#loc53 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":120:5)
#loc54 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":120:52)
#loc55 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":121:5)
#loc56 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":124:5)
#loc57 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":125:5)
#loc58 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":125:51)
#loc59 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":126:5)
#loc60 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":128:12)
#loc61 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":128:5)
#loc62 = loc("/usr/include/errno.h":37:1)
#loc63 = loc("/usr/include/errno.h":37:45)
#loc64 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":64:23)
#loc65 = loc("/usr/include/stdlib.h":756:1)
#loc66 = loc("/usr/include/stdlib.h":756:70)
#loc67 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":48:1)
#loc68 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":71:1)
#loc69 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":50:5)
#loc70 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":70:5)
#loc71 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":50:12)
#loc72 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":52:5)
#loc73 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":54:19)
#loc74 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":54:9)
#loc75 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":55:9)
#loc76 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":56:5)
#loc77 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":57:5)
#loc78 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":68:5)
#loc79 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":58:9)
#loc80 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":58:16)
#loc81 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":59:17)
#loc82 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":59:9)
#loc83 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":60:32)
#loc84 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":60:46)
#loc85 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":60:45)
#loc86 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":60:9)
#loc87 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":60:47)
#loc88 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":62:9)
#loc89 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":66:9)
#loc90 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":62:13)
#loc91 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":62:22)
#loc92 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":63:9)
#loc93 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":64:13)
#loc94 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":65:13)
#loc95 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":65:18)
#loc96 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":67:25)
#loc97 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":67:9)
#loc98 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":69:5)
#loc99 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":74:1)
#loc100 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":97:1)
#loc101 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":76:5)
#loc102 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":96:5)
#loc103 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":76:12)
#loc104 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":78:5)
#loc105 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":79:5)
#loc106 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":90:5)
#loc107 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":80:9)
#loc108 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":80:16)
#loc109 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":81:17)
#loc110 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":81:9)
#loc111 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":82:32)
#loc112 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":82:46)
#loc113 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":82:45)
#loc114 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":82:9)
#loc115 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":82:47)
#loc116 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":84:9)
#loc117 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":88:9)
#loc118 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":84:13)
#loc119 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":84:22)
#loc120 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":85:9)
#loc121 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":86:23)
#loc122 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":86:13)
#loc123 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":87:13)
#loc124 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":87:18)
#loc125 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":89:25)
#loc126 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":89:9)
#loc127 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":91:5)
#loc128 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":92:5)
#loc129 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":94:19)
#loc130 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":94:9)
#loc131 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":95:9)
#loc132 = loc(fused[#loc2, #loc3])
#loc133 = loc(fused[#loc4, #loc5])
#loc134 = loc(fused[#loc7, #loc8])
#loc135 = loc(fused[#loc9, #loc10])
#loc136 = loc(fused[#loc13, #loc14])
#loc137 = loc(fused[#loc15, #loc16])
#loc138 = loc(fused[#loc20, #loc21])
#loc139 = loc(fused[#loc28, #loc29])
#loc140 = loc(fused[#loc30, #loc31])
#loc141 = loc(fused[#loc32, #loc33])
#loc142 = loc(fused[#loc34, #loc35])
#loc143 = loc(fused[#loc36, #loc37])
#loc144 = loc(fused[#loc42, #loc43])
#loc147 = loc(fused[#loc53, #loc54])
#loc148 = loc(fused[#loc57, #loc58])
#loc149 = loc(fused[#loc61, #loc60])
#loc150 = loc(fused[#loc62, #loc63])
#loc151 = loc(fused[#loc65, #loc66])
#loc152 = loc(fused[#loc67, #loc68])
#loc153 = loc(fused[#loc69, #loc70])
#loc154 = loc(fused[#loc77, #loc78])
#loc155 = loc(fused[#loc79, #loc80])
#loc156 = loc(fused[#loc82, #loc81])
#loc157 = loc(fused[#loc86, #loc87])
#loc158 = loc(fused[#loc88, #loc89])
#loc159 = loc(fused[#loc90, #loc91])
#loc160 = loc(fused[#loc92, #loc89])
#loc161 = loc(fused[#loc99, #loc100])
#loc162 = loc(fused[#loc101, #loc102])
#loc163 = loc(fused[#loc105, #loc106])
#loc164 = loc(fused[#loc107, #loc108])
#loc165 = loc(fused[#loc110, #loc109])
#loc166 = loc(fused[#loc114, #loc115])
#loc167 = loc(fused[#loc116, #loc117])
#loc168 = loc(fused[#loc118, #loc119])
#loc169 = loc(fused[#loc120, #loc117])
