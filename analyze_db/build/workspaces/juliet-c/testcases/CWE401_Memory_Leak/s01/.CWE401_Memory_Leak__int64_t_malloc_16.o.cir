!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int64_t_malloc_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc119)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc120)
  cir.func private @printLongLongLine(!s64i) loc(#loc121)
  cir.func no_proto @CWE401_Memory_Leak__int64_t_malloc_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc123)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc11)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc124)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc15)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc15)
        cir.condition(%3) loc(#loc15)
      } do {
        cir.scope {
          %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc17)
          %3 = cir.const #cir.int<100> : !s32i loc(#loc18)
          %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc18)
          %5 = cir.const #cir.int<8> : !u64i loc(#loc127)
          %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc128)
          %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc17)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc129)
          cir.store %8, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc130)
          cir.scope {
            %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc25)
            %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc26)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc26)
            %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s64i>, !cir.bool loc(#loc132)
            cir.if %20 {
              %21 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc28)
              %22 = cir.const #cir.int<1> : !s32i loc(#loc29)
              %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc30)
              cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
            } loc(#loc133)
          } loc(#loc131)
          %9 = cir.const #cir.int<5> : !s64i loc(#loc31)
          %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc32)
          %11 = cir.const #cir.int<0> : !s32i loc(#loc33)
          %12 = cir.ptr_stride(%10 : !cir.ptr<!s64i>, %11 : !s32i), !cir.ptr<!s64i> loc(#loc34)
          cir.store %9, %12 : !s64i, !cir.ptr<!s64i> loc(#loc134)
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc35)
          %14 = cir.const #cir.int<0> : !s32i loc(#loc36)
          %15 = cir.ptr_stride(%13 : !cir.ptr<!s64i>, %14 : !s32i), !cir.ptr<!s64i> loc(#loc37)
          %16 = cir.load %15 : !cir.ptr<!s64i>, !s64i loc(#loc35)
          cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc38)
          cir.break loc(#loc39)
        } loc(#loc126)
        cir.yield loc(#loc14)
      } loc(#loc125)
    } loc(#loc125)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc42)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc42)
        cir.condition(%3) loc(#loc42)
      } do {
        cir.scope {
          cir.break loc(#loc44)
        } loc(#loc136)
        cir.yield loc(#loc41)
      } loc(#loc135)
    } loc(#loc135)
    cir.return loc(#loc8)
  } loc(#loc122)
  cir.func no_proto @CWE401_Memory_Leak__int64_t_malloc_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc138)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc47)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc139)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc49)
    cir.return loc(#loc46)
  } loc(#loc137)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc140)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc142)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc57)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc143)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc61)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc61)
        cir.condition(%3) loc(#loc61)
      } do {
        cir.scope {
          %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc63)
          %3 = cir.const #cir.int<100> : !s32i loc(#loc64)
          %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc64)
          %5 = cir.const #cir.int<8> : !u64i loc(#loc146)
          %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc147)
          %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc63)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc148)
          cir.store %8, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc149)
          cir.scope {
            %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc71)
            %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc72)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc72)
            %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s64i>, !cir.bool loc(#loc151)
            cir.if %20 {
              %21 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc74)
              %22 = cir.const #cir.int<1> : !s32i loc(#loc75)
              %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc76)
              cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc74)
            } loc(#loc152)
          } loc(#loc150)
          %9 = cir.const #cir.int<5> : !s64i loc(#loc77)
          %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc78)
          %11 = cir.const #cir.int<0> : !s32i loc(#loc79)
          %12 = cir.ptr_stride(%10 : !cir.ptr<!s64i>, %11 : !s32i), !cir.ptr<!s64i> loc(#loc80)
          cir.store %9, %12 : !s64i, !cir.ptr<!s64i> loc(#loc153)
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc81)
          %14 = cir.const #cir.int<0> : !s32i loc(#loc82)
          %15 = cir.ptr_stride(%13 : !cir.ptr<!s64i>, %14 : !s32i), !cir.ptr<!s64i> loc(#loc83)
          %16 = cir.load %15 : !cir.ptr<!s64i>, !s64i loc(#loc81)
          cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc84)
          cir.break loc(#loc85)
        } loc(#loc145)
        cir.yield loc(#loc60)
      } loc(#loc144)
    } loc(#loc144)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc88)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc88)
        cir.condition(%3) loc(#loc88)
      } do {
        cir.scope {
          %2 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc90)
          %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc91)
          %4 = cir.cast(bitcast, %3 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc91)
          cir.call @free(%4) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc90)
          cir.break loc(#loc92)
        } loc(#loc155)
        cir.yield loc(#loc87)
      } loc(#loc154)
    } loc(#loc154)
    cir.return loc(#loc54)
  } loc(#loc141)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc157)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc97)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc158)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc101)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc101)
        cir.condition(%3) loc(#loc101)
      } do {
        cir.scope {
          %2 = cir.const #cir.int<100> : !s32i loc(#loc103)
          %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc103)
          %4 = cir.const #cir.int<8> : !u64i loc(#loc103)
          %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc103)
          %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc103)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc103)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc103)
          cir.store %8, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc161)
          %9 = cir.const #cir.int<5> : !s64i loc(#loc105)
          %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc106)
          %11 = cir.const #cir.int<0> : !s32i loc(#loc107)
          %12 = cir.ptr_stride(%10 : !cir.ptr<!s64i>, %11 : !s32i), !cir.ptr<!s64i> loc(#loc108)
          cir.store %9, %12 : !s64i, !cir.ptr<!s64i> loc(#loc162)
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc109)
          %14 = cir.const #cir.int<0> : !s32i loc(#loc110)
          %15 = cir.ptr_stride(%13 : !cir.ptr<!s64i>, %14 : !s32i), !cir.ptr<!s64i> loc(#loc111)
          %16 = cir.load %15 : !cir.ptr<!s64i>, !s64i loc(#loc109)
          cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc112)
          cir.break loc(#loc113)
        } loc(#loc160)
        cir.yield loc(#loc100)
      } loc(#loc159)
    } loc(#loc159)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc116)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc116)
        cir.condition(%3) loc(#loc116)
      } do {
        cir.scope {
          cir.break loc(#loc118)
        } loc(#loc164)
        cir.yield loc(#loc115)
      } loc(#loc163)
    } loc(#loc163)
    cir.return loc(#loc94)
  } loc(#loc156)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int64_t_malloc_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":24:1)
#loc8 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":44:1)
#loc9 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":26:5)
#loc10 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":26:15)
#loc11 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":27:12)
#loc12 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":27:5)
#loc13 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":28:5)
#loc14 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":37:5)
#loc15 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":28:11)
#loc16 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":29:5)
#loc17 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":31:27)
#loc18 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":31:34)
#loc19 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":31:38)
#loc20 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":31:52)
#loc21 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":31:53)
#loc22 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":31:9)
#loc23 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":32:9)
#loc24 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":32:37)
#loc25 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":32:13)
#loc26 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":32:21)
#loc27 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":32:27)
#loc28 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":32:28)
#loc29 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":32:34)
#loc30 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":32:33)
#loc31 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":34:19)
#loc32 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":34:9)
#loc33 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":34:14)
#loc34 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":34:15)
#loc35 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":35:27)
#loc36 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":35:32)
#loc37 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":35:33)
#loc38 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":35:9)
#loc39 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":36:9)
#loc40 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":38:5)
#loc41 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":43:5)
#loc42 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":38:11)
#loc43 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":39:5)
#loc44 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":42:9)
#loc45 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":95:1)
#loc46 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":99:1)
#loc47 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":97:5)
#loc48 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":97:13)
#loc49 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":98:5)
#loc50 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":98:13)
#loc51 = loc("/usr/include/stdlib.h":687:1)
#loc52 = loc("/usr/include/stdlib.h":687:32)
#loc53 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":51:1)
#loc54 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":71:1)
#loc55 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":53:5)
#loc56 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":53:15)
#loc57 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":54:12)
#loc58 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":54:5)
#loc59 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":55:5)
#loc60 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":64:5)
#loc61 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":55:11)
#loc62 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":56:5)
#loc63 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":58:27)
#loc64 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":58:34)
#loc65 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":58:38)
#loc66 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":58:52)
#loc67 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":58:53)
#loc68 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":58:9)
#loc69 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":59:9)
#loc70 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":59:37)
#loc71 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":59:13)
#loc72 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":59:21)
#loc73 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":59:27)
#loc74 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":59:28)
#loc75 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":59:34)
#loc76 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":59:33)
#loc77 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":61:19)
#loc78 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":61:9)
#loc79 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":61:14)
#loc80 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":61:15)
#loc81 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":62:27)
#loc82 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":62:32)
#loc83 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":62:33)
#loc84 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":62:9)
#loc85 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":63:9)
#loc86 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":65:5)
#loc87 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":70:5)
#loc88 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":65:11)
#loc89 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":66:5)
#loc90 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":68:9)
#loc91 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":68:14)
#loc92 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":69:9)
#loc93 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":74:1)
#loc94 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":93:1)
#loc95 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":76:5)
#loc96 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":76:15)
#loc97 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":77:12)
#loc98 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":77:5)
#loc99 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":78:5)
#loc100 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":86:5)
#loc101 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":78:11)
#loc102 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":79:5)
#loc103 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":81:27)
#loc104 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":81:9)
#loc105 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":83:19)
#loc106 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":83:9)
#loc107 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":83:14)
#loc108 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":83:15)
#loc109 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":84:27)
#loc110 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":84:32)
#loc111 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":84:33)
#loc112 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":84:9)
#loc113 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":85:9)
#loc114 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":87:5)
#loc115 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":92:5)
#loc116 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":87:11)
#loc117 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":88:5)
#loc118 = loc("CWE401_Memory_Leak__int64_t_malloc_16.c":91:9)
#loc119 = loc(fused[#loc1, #loc2])
#loc120 = loc(fused[#loc3, #loc4])
#loc121 = loc(fused[#loc5, #loc6])
#loc122 = loc(fused[#loc7, #loc8])
#loc123 = loc(fused[#loc9, #loc10])
#loc124 = loc(fused[#loc12, #loc11])
#loc125 = loc(fused[#loc13, #loc14])
#loc126 = loc(fused[#loc16, #loc14])
#loc127 = loc(fused[#loc19, #loc20])
#loc128 = loc(fused[#loc18, #loc20])
#loc129 = loc(fused[#loc17, #loc21])
#loc130 = loc(fused[#loc22, #loc21])
#loc131 = loc(fused[#loc23, #loc24])
#loc132 = loc(fused[#loc25, #loc26])
#loc133 = loc(fused[#loc27, #loc24])
#loc134 = loc(fused[#loc32, #loc31])
#loc135 = loc(fused[#loc40, #loc41])
#loc136 = loc(fused[#loc43, #loc41])
#loc137 = loc(fused[#loc45, #loc46])
#loc138 = loc(fused[#loc47, #loc48])
#loc139 = loc(fused[#loc49, #loc50])
#loc140 = loc(fused[#loc51, #loc52])
#loc141 = loc(fused[#loc53, #loc54])
#loc142 = loc(fused[#loc55, #loc56])
#loc143 = loc(fused[#loc58, #loc57])
#loc144 = loc(fused[#loc59, #loc60])
#loc145 = loc(fused[#loc62, #loc60])
#loc146 = loc(fused[#loc65, #loc66])
#loc147 = loc(fused[#loc64, #loc66])
#loc148 = loc(fused[#loc63, #loc67])
#loc149 = loc(fused[#loc68, #loc67])
#loc150 = loc(fused[#loc69, #loc70])
#loc151 = loc(fused[#loc71, #loc72])
#loc152 = loc(fused[#loc73, #loc70])
#loc153 = loc(fused[#loc78, #loc77])
#loc154 = loc(fused[#loc86, #loc87])
#loc155 = loc(fused[#loc89, #loc87])
#loc156 = loc(fused[#loc93, #loc94])
#loc157 = loc(fused[#loc95, #loc96])
#loc158 = loc(fused[#loc98, #loc97])
#loc159 = loc(fused[#loc99, #loc100])
#loc160 = loc(fused[#loc102, #loc100])
#loc161 = loc(fused[#loc104, #loc103])
#loc162 = loc(fused[#loc106, #loc105])
#loc163 = loc(fused[#loc114, #loc115])
#loc164 = loc(fused[#loc117, #loc115])
