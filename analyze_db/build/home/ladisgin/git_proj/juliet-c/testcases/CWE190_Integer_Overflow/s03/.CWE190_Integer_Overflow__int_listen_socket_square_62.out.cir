!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc52 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":73:24)
#loc81 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":103:10)
#loc82 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":103:14)
#loc83 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":103:20)
#loc84 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":103:32)
#true = #cir.bool<true> : !cir.bool
#loc124 = loc(fused[#loc81, #loc82])
#loc125 = loc(fused[#loc83, #loc84])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @_ZN52CWE190_Integer_Overflow__int_listen_socket_square_629badSourceERi(!cir.ptr<!s32i>) loc(#loc97)
  cir.func private @printIntLine(!s32i) loc(#loc98)
  cir.func @_ZN52CWE190_Integer_Overflow__int_listen_socket_square_623badEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc100)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc101)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc102)
    cir.call @_ZN52CWE190_Integer_Overflow__int_listen_socket_square_629badSourceERi(%1) : (!cir.ptr<!s32i>) -> () loc(#loc13)
    cir.br ^bb1 loc(#loc103)
  ^bb1:  // pred: ^bb0
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc8)
    %5 = cir.binop(mul, %3, %4) nsw : !s32i loc(#loc16)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc18)
    cir.br ^bb2 loc(#loc15)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc6)
  } loc(#loc99)
  cir.func private @_ZN52CWE190_Integer_Overflow__int_listen_socket_square_6213goodG2BSourceERi(!cir.ptr<!s32i>) loc(#loc104)
  cir.func internal private @_ZN52CWE190_Integer_Overflow__int_listen_socket_square_62L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc106)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc107)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc27)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    cir.call @_ZN52CWE190_Integer_Overflow__int_listen_socket_square_6213goodG2BSourceERi(%1) : (!cir.ptr<!s32i>) -> () loc(#loc29)
    cir.br ^bb1 loc(#loc109)
  ^bb1:  // pred: ^bb0
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %5 = cir.binop(mul, %3, %4) nsw : !s32i loc(#loc32)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc34)
    cir.br ^bb2 loc(#loc31)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc22)
  } loc(#loc105)
  cir.func private @_ZN52CWE190_Integer_Overflow__int_listen_socket_square_6213goodB2GSourceERi(!cir.ptr<!s32i>) loc(#loc110)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc38)
  cir.func internal private @_ZN52CWE190_Integer_Overflow__int_listen_socket_square_62L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc112)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc113)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc45)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    cir.call @_ZN52CWE190_Integer_Overflow__int_listen_socket_square_6213goodB2GSourceERi(%1) : (!cir.ptr<!s32i>) -> () loc(#loc47)
    cir.br ^bb1 loc(#loc115)
  ^bb1:  // pred: ^bb0
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc50)
    %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc51)
    %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc51)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc51)
    %8 = cir.cmp(gt, %3, %7) : !s32i, !cir.bool loc(#loc116)
    cir.brcond %8 ^bb2, ^bb7 loc(#loc52)
  ^bb2:  // pred: ^bb1
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    %10 = cir.abs %9 poison : !s32i loc(#loc54)
    %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc54)
    %12 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc55)
    %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc56)
    %14 = cir.cast(int_to_float, %13 : !s32i), !cir.double loc(#loc56)
    %15 = cir.call @sqrt(%14) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc55)
    %16 = cir.cast(float_to_int, %15 : !cir.double), !s64i loc(#loc55)
    %17 = cir.cmp(lt, %11, %16) : !s64i, !cir.bool loc(#loc117)
    cir.brcond %17 ^bb3, ^bb4 loc(#loc52)
  ^bb3:  // pred: ^bb2
    %18 = cir.const #true loc(#loc52)
    cir.br ^bb5(%18 : !cir.bool) loc(#loc52)
  ^bb4:  // pred: ^bb2
    %19 = cir.const #false loc(#loc52)
    cir.br ^bb5(%19 : !cir.bool) loc(#loc52)
  ^bb5(%20: !cir.bool loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":73:24)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc52)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8(%20 : !cir.bool) loc(#loc52)
  ^bb7:  // pred: ^bb1
    %21 = cir.const #false loc(#loc52)
    cir.br ^bb8(%21 : !cir.bool) loc(#loc52)
  ^bb8(%22: !cir.bool loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":73:24)):  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc52)
  ^bb9:  // pred: ^bb8
    cir.brcond %22 ^bb10, ^bb11 loc(#loc118)
  ^bb10:  // pred: ^bb9
    %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    %24 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc42)
    %25 = cir.binop(mul, %23, %24) nsw : !s32i loc(#loc61)
    cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    %26 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc63)
    cir.br ^bb12 loc(#loc59)
  ^bb11:  // pred: ^bb9
    %27 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc38)
    %28 = cir.cast(array_to_ptrdecay, %27 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    cir.br ^bb12 loc(#loc49)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc49)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc40)
  } loc(#loc111)
  cir.func @_ZN52CWE190_Integer_Overflow__int_listen_socket_square_624goodEv() extra(#fn_attr) {
    cir.call @_ZN52CWE190_Integer_Overflow__int_listen_socket_square_62L7goodG2BEv() : () -> () loc(#loc67)
    cir.call @_ZN52CWE190_Integer_Overflow__int_listen_socket_square_62L7goodB2GEv() : () -> () loc(#loc68)
    cir.return loc(#loc66)
  } loc(#loc119)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc120)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc121)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc122)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc78)
  cir.func @main(%arg0: !s32i loc(fused[#loc81, #loc82]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc83, #loc84])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc124)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc125)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc80)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc85)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc86)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc87)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc87)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc88)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc75)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    cir.call @_ZN52CWE190_Integer_Overflow__int_listen_socket_square_624goodEv() : () -> () loc(#loc90)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc76)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc77)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    cir.call @_ZN52CWE190_Integer_Overflow__int_listen_socket_square_623badEv() : () -> () loc(#loc93)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc78)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc95)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc126)
    cir.return %15 : !s32i loc(#loc126)
  } loc(#loc123)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":28:1)
#loc2 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":28:25)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":30:1)
#loc6 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":41:1)
#loc7 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":38:9)
#loc8 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":38:29)
#loc9 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":32:5)
#loc10 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":32:9)
#loc11 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":34:12)
#loc12 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":34:5)
#loc13 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":35:5)
#loc14 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":36:5)
#loc15 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":40:5)
#loc16 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":38:22)
#loc17 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":39:22)
#loc18 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":39:9)
#loc19 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":48:1)
#loc20 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":48:29)
#loc21 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":50:1)
#loc22 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":61:1)
#loc23 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":58:9)
#loc24 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":58:29)
#loc25 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":52:5)
#loc26 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":52:9)
#loc27 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":54:12)
#loc28 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":54:5)
#loc29 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":55:5)
#loc30 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":56:5)
#loc31 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":60:5)
#loc32 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":58:22)
#loc33 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":59:22)
#loc34 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":59:9)
#loc35 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":64:1)
#loc36 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":64:29)
#loc37 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc38 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":80:19)
#loc39 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":66:1)
#loc40 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":82:1)
#loc41 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":75:9)
#loc42 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":75:29)
#loc43 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":68:5)
#loc44 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":68:9)
#loc45 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":70:12)
#loc46 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":70:5)
#loc47 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":71:5)
#loc48 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":73:5)
#loc49 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":81:5)
#loc50 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":73:9)
#loc51 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":73:16)
#loc53 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":73:31)
#loc54 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":73:27)
#loc55 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":73:45)
#loc56 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":73:58)
#loc57 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":73:65)
#loc58 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":74:5)
#loc59 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":77:5)
#loc60 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":79:5)
#loc61 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":75:22)
#loc62 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":76:22)
#loc63 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":76:9)
#loc64 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":80:9)
#loc65 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":84:1)
#loc66 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":88:1)
#loc67 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":86:5)
#loc68 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":87:5)
#loc69 = loc("/usr/include/stdlib.h":575:1)
#loc70 = loc("/usr/include/stdlib.h":575:41)
#loc71 = loc("/usr/include/time.h":76:1)
#loc72 = loc("/usr/include/time.h":76:38)
#loc73 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc74 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc75 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":108:15)
#loc76 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":110:15)
#loc77 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":113:15)
#loc78 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":115:15)
#loc79 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":103:1)
#loc80 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":118:1)
#loc85 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":104:1)
#loc86 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":106:27)
#loc87 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":106:22)
#loc88 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":106:5)
#loc89 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":108:5)
#loc90 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":109:5)
#loc91 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":110:5)
#loc92 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":113:5)
#loc93 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":114:5)
#loc94 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":115:5)
#loc95 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":117:12)
#loc96 = loc("CWE190_Integer_Overflow__int_listen_socket_square_62a.cpp":117:5)
#loc97 = loc(fused[#loc1, #loc2])
#loc98 = loc(fused[#loc3, #loc4])
#loc99 = loc(fused[#loc5, #loc6])
#loc100 = loc(fused[#loc7, #loc8])
#loc101 = loc(fused[#loc9, #loc10])
#loc102 = loc(fused[#loc12, #loc11])
#loc103 = loc(fused[#loc14, #loc15])
#loc104 = loc(fused[#loc19, #loc20])
#loc105 = loc(fused[#loc21, #loc22])
#loc106 = loc(fused[#loc23, #loc24])
#loc107 = loc(fused[#loc25, #loc26])
#loc108 = loc(fused[#loc28, #loc27])
#loc109 = loc(fused[#loc30, #loc31])
#loc110 = loc(fused[#loc35, #loc36])
#loc111 = loc(fused[#loc39, #loc40])
#loc112 = loc(fused[#loc41, #loc42])
#loc113 = loc(fused[#loc43, #loc44])
#loc114 = loc(fused[#loc46, #loc45])
#loc115 = loc(fused[#loc48, #loc49])
#loc116 = loc(fused[#loc50, #loc51])
#loc117 = loc(fused[#loc54, #loc57])
#loc118 = loc(fused[#loc58, #loc59, #loc60, #loc49])
#loc119 = loc(fused[#loc65, #loc66])
#loc120 = loc(fused[#loc69, #loc70])
#loc121 = loc(fused[#loc71, #loc72])
#loc122 = loc(fused[#loc73, #loc74])
#loc123 = loc(fused[#loc79, #loc80])
#loc126 = loc(fused[#loc96, #loc95])
