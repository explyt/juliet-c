!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":24:21)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":24:28)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":129:10)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":129:14)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":129:20)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":129:32)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":86:25)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":86:32)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":57:25)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":57:32)
#loc272 = loc(fused[#loc17, #loc18])
#loc301 = loc(fused[#loc102, #loc103])
#loc302 = loc(fused[#loc104, #loc105])
#loc309 = loc(fused[#loc126, #loc127])
#loc333 = loc(fused[#loc197, #loc198])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc264)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc265)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc266)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc267)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc268)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc269)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc270)
  cir.func internal private @badSink(%arg0: !cir.ptr<!void> loc(fused[#loc17, #loc18])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc273)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc274)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc272)
    cir.store %arg0, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc23)
    cir.br ^bb1 loc(#loc275)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc26)
    %4 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc27)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc27)
    %6 = cir.call @strlen(%5) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc26)
    cir.store %6, %0 : !u64i, !cir.ptr<!u64i> loc(#loc273)
    %7 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc28)
    %8 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc29)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc30)
    %11 = cir.binop(add, %8, %10) : !u64i loc(#loc276)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc277)
    %13 = cir.call @calloc(%11, %12) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc28)
    cir.store %13, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc274)
    cir.br ^bb2 loc(#loc278)
  ^bb2:  // pred: ^bb1
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc35)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc36)
    %16 = cir.cmp(eq, %14, %15) : !cir.ptr<!void>, !cir.bool loc(#loc279)
    cir.brcond %16 ^bb3, ^bb4 loc(#loc280)
  ^bb3:  // pred: ^bb2
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc38)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc39)
    %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc40)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc38)
    cir.br ^bb4 loc(#loc34)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc34)
  ^bb5:  // pred: ^bb4
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc41)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc41)
    %22 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc42)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc42)
    %24 = cir.call @wcscpy(%21, %23) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc43)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc44)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc45)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc46)
    cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc47)
    cir.br ^bb6 loc(#loc25)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc16)
  } loc(#loc271)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc282)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc283)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc54)
    cir.store %2, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc284)
    cir.br ^bb1 loc(#loc285)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc58)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc59)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc59)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc286)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc287)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc58)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc288)
    cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc282)
    cir.br ^bb2 loc(#loc289)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc64)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc65)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc65)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc290)
    cir.brcond %13 ^bb3, ^bb4 loc(#loc291)
  ^bb3:  // pred: ^bb2
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc67)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc68)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc69)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc67)
    cir.br ^bb4 loc(#loc63)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc63)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc70)
    %18 = cir.const #cir.int<65> : !s32i loc(#loc71)
    %19 = cir.const #cir.int<50> : !s32i loc(#loc72)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc73)
    %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc72)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc72)
    %23 = cir.call @wmemset(%17, %18, %22) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc74)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc75)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc76)
    %26 = cir.const #cir.int<50> : !s32i loc(#loc77)
    %27 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc77)
    %29 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc79)
    cir.store %24, %29 : !s32i, !cir.ptr<!s32i> loc(#loc292)
    %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc80)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc80)
    cir.store %31, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc293)
    cir.br ^bb6 loc(#loc57)
  ^bb6:  // pred: ^bb5
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc82)
    cir.call @badSink(%32) : (!cir.ptr<!void>) -> () loc(#loc83)
    cir.return loc(#loc49)
  } loc(#loc281)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc295)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc86)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc296)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc88)
    cir.return loc(#loc85)
  } loc(#loc294)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc297)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc298)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc299)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc96)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc97)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc98)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc99)
  cir.func @main(%arg0: !s32i loc(fused[#loc102, #loc103]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc104, #loc105])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc301)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc302)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc101)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc106)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc107)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc108)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc108)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc109)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc96)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc96)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc110)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_41_good : !cir.ptr<!cir.func<!void ()>> loc(#loc303)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_41_good() : () -> () loc(#loc111)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc97)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc97)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc113)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc98)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc98)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc114)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_41_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc304)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_41_bad() : () -> () loc(#loc115)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc99)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc117)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc118)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc305)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc305)
    cir.return %17 : !s32i loc(#loc305)
  } loc(#loc300)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc306)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc307)
  cir.func internal private @goodB2GSink(%arg0: !cir.ptr<!void> loc(fused[#loc126, #loc127])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc310)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc311)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc309)
    cir.store %arg0, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc132)
    cir.br ^bb1 loc(#loc312)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc135)
    %4 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc136)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc136)
    %6 = cir.call @wcslen(%5) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc135)
    cir.store %6, %0 : !u64i, !cir.ptr<!u64i> loc(#loc310)
    %7 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc137)
    %8 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc138)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc139)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc139)
    %11 = cir.binop(add, %8, %10) : !u64i loc(#loc313)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc314)
    %13 = cir.call @calloc(%11, %12) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc137)
    cir.store %13, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc311)
    cir.br ^bb2 loc(#loc315)
  ^bb2:  // pred: ^bb1
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc144)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc145)
    %16 = cir.cmp(eq, %14, %15) : !cir.ptr<!void>, !cir.bool loc(#loc316)
    cir.brcond %16 ^bb3, ^bb4 loc(#loc317)
  ^bb3:  // pred: ^bb2
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc147)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc148)
    %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc149)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc147)
    cir.br ^bb4 loc(#loc143)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc143)
  ^bb5:  // pred: ^bb4
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc150)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc150)
    %22 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc151)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc151)
    %24 = cir.call @wcscpy(%21, %23) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc152)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc153)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc153)
    cir.call @printWLine(%26) : (!cir.ptr<!s32i>) -> () loc(#loc154)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc155)
    cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc156)
    cir.br ^bb6 loc(#loc134)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc125)
  } loc(#loc308)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc319)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc320)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc163)
    cir.store %2, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc321)
    cir.br ^bb1 loc(#loc322)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc167)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc168)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc168)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc323)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc324)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc167)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc325)
    cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc319)
    cir.br ^bb2 loc(#loc326)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc173)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc174)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc174)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc327)
    cir.brcond %13 ^bb3, ^bb4 loc(#loc328)
  ^bb3:  // pred: ^bb2
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc176)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc177)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc178)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc176)
    cir.br ^bb4 loc(#loc172)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc172)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc179)
    %18 = cir.const #cir.int<65> : !s32i loc(#loc180)
    %19 = cir.const #cir.int<50> : !s32i loc(#loc181)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc182)
    %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc181)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc181)
    %23 = cir.call @wmemset(%17, %18, %22) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc183)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc184)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc185)
    %26 = cir.const #cir.int<50> : !s32i loc(#loc186)
    %27 = cir.const #cir.int<1> : !s32i loc(#loc187)
    %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc186)
    %29 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc188)
    cir.store %24, %29 : !s32i, !cir.ptr<!s32i> loc(#loc329)
    %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc189)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc189)
    cir.store %31, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc330)
    cir.br ^bb6 loc(#loc166)
  ^bb6:  // pred: ^bb5
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc191)
    cir.call @goodB2GSink(%32) : (!cir.ptr<!void>) -> () loc(#loc192)
    cir.return loc(#loc158)
  } loc(#loc318)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc331)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc197, #loc198])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc334)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc335)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc333)
    cir.store %arg0, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc203)
    cir.br ^bb1 loc(#loc336)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc206)
    %4 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc207)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc207)
    %6 = cir.call @strlen(%5) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc206)
    cir.store %6, %0 : !u64i, !cir.ptr<!u64i> loc(#loc334)
    %7 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc208)
    %8 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc209)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc210)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc210)
    %11 = cir.binop(add, %8, %10) : !u64i loc(#loc337)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc211)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc211)
    %14 = cir.call @calloc(%11, %13) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc208)
    cir.store %14, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc335)
    cir.br ^bb2 loc(#loc338)
  ^bb2:  // pred: ^bb1
    %15 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc214)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc215)
    %17 = cir.cmp(eq, %15, %16) : !cir.ptr<!void>, !cir.bool loc(#loc339)
    cir.brcond %17 ^bb3, ^bb4 loc(#loc340)
  ^bb3:  // pred: ^bb2
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc217)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc218)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc219)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc217)
    cir.br ^bb4 loc(#loc213)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc213)
  ^bb5:  // pred: ^bb4
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc220)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc220)
    %23 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc221)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc221)
    %25 = cir.call @strcpy(%22, %24) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc222)
    %26 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc223)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc223)
    cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc224)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc225)
    cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc226)
    cir.br ^bb6 loc(#loc205)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc196)
  } loc(#loc332)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc342)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc343)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc233)
    cir.store %2, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc344)
    cir.br ^bb1 loc(#loc345)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc237)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc238)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc238)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc346)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc347)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc237)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc348)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc342)
    cir.br ^bb2 loc(#loc349)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc243)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc244)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc244)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc350)
    cir.brcond %13 ^bb3, ^bb4 loc(#loc351)
  ^bb3:  // pred: ^bb2
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc246)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc247)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc248)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc246)
    cir.br ^bb4 loc(#loc242)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc242)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc249)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc249)
    %19 = cir.const #cir.int<65> : !s32i loc(#loc250)
    %20 = cir.const #cir.int<50> : !s32i loc(#loc251)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc252)
    %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc251)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc251)
    cir.libc.memset %23 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc352)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc255)
    %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc255)
    %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc256)
    %27 = cir.const #cir.int<50> : !s32i loc(#loc257)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc258)
    %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc257)
    %30 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc259)
    cir.store %25, %30 : !s8i, !cir.ptr<!s8i> loc(#loc353)
    %31 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc260)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc260)
    cir.store %32, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc354)
    cir.br ^bb6 loc(#loc236)
  ^bb6:  // pred: ^bb5
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc262)
    cir.call @goodG2BSink(%33) : (!cir.ptr<!void>) -> () loc(#loc263)
    cir.return loc(#loc228)
  } loc(#loc341)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/stdlib.h":675:1)
#loc10 = loc("/usr/include/stdlib.h":676:14)
#loc11 = loc("/usr/include/wchar.h":98:1)
#loc12 = loc("/usr/include/wchar.h":100:14)
#loc13 = loc("/usr/include/stdlib.h":687:1)
#loc14 = loc("/usr/include/stdlib.h":687:32)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":24:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":35:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":28:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":28:45)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":29:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":29:64)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":25:1)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":26:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":34:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":28:26)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":28:41)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":29:31)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":29:38)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":29:46)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":29:49)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":29:63)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":30:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":30:37)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":30:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":30:21)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":30:27)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":30:28)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":30:34)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":30:33)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":31:22)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":31:28)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":31:15)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":32:27)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":32:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":33:14)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":33:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":37:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":50:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":42:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":42:71)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":39:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":39:12)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":40:12)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":40:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":41:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":48:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":42:46)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":42:53)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":42:56)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":42:70)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":43:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":43:46)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":43:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":43:30)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":43:36)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":43:37)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":43:43)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":43:42)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":44:17)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":44:32)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":44:38)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":44:41)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":44:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":45:31)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":45:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":45:23)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":45:26)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":45:27)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":47:24)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":47:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":49:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":49:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":114:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":118:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":116:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":116:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":117:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":117:13)
#loc90 = loc("/usr/include/stdlib.h":575:1)
#loc91 = loc("/usr/include/stdlib.h":575:41)
#loc92 = loc("/usr/include/time.h":76:1)
#loc93 = loc("/usr/include/time.h":76:38)
#loc94 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc95 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":134:15)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":136:15)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":139:15)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":141:15)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":129:1)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":144:1)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":130:1)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":132:27)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":132:22)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":132:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":134:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":135:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":135:55)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":136:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":139:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":140:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":140:54)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":141:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":143:12)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":143:5)
#loc120 = loc("/usr/include/wchar.h":247:1)
#loc121 = loc("/usr/include/wchar.h":247:51)
#loc122 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc123 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":86:1)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":97:1)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":90:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":90:48)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":91:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":91:64)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":87:1)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":88:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":96:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":90:26)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":90:44)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":91:31)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":91:38)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":91:46)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":91:49)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":91:63)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":92:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":92:37)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":92:13)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":92:21)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":92:27)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":92:28)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":92:34)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":92:33)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":93:22)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":93:28)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":93:15)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":94:31)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":94:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":95:14)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":95:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":99:1)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":112:1)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":104:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":104:71)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":101:5)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":101:12)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":102:12)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":102:5)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":103:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":110:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":104:46)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":104:53)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":104:56)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":104:70)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":105:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":105:46)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":105:13)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":105:30)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":105:36)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":105:37)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":105:43)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":105:42)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":106:17)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":106:32)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":106:38)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":106:41)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":106:9)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":107:31)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":107:9)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":107:23)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":107:26)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":107:27)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":109:24)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":109:9)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":111:17)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":111:5)
#loc193 = loc("/usr/include/string.h":141:1)
#loc194 = loc("/usr/include/string.h":142:14)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":57:1)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":68:1)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":61:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":61:45)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":62:9)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":62:50)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":58:1)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":59:5)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":67:5)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":61:26)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":61:41)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":62:31)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":62:38)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":62:46)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":62:49)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":63:9)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":63:37)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":63:13)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":63:21)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":63:27)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":63:28)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":63:34)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":63:33)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":64:22)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":64:28)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":64:15)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":65:27)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":65:9)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":66:14)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":66:9)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":70:1)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":83:1)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":75:9)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":75:63)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":72:5)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":72:12)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":73:12)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":73:5)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":74:5)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":81:5)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":75:41)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":75:48)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":75:51)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":75:62)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":76:9)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":76:47)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":76:13)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":76:31)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":76:37)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":76:38)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":76:44)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":76:43)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":77:16)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":77:32)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":77:37)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":77:40)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":77:9)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":77:41)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":78:32)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":78:9)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":78:24)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":78:27)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":78:28)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":80:24)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":80:9)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":82:17)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c":82:5)
#loc264 = loc(fused[#loc1, #loc2])
#loc265 = loc(fused[#loc3, #loc4])
#loc266 = loc(fused[#loc5, #loc6])
#loc267 = loc(fused[#loc7, #loc8])
#loc268 = loc(fused[#loc9, #loc10])
#loc269 = loc(fused[#loc11, #loc12])
#loc270 = loc(fused[#loc13, #loc14])
#loc271 = loc(fused[#loc15, #loc16])
#loc273 = loc(fused[#loc19, #loc20])
#loc274 = loc(fused[#loc21, #loc22])
#loc275 = loc(fused[#loc24, #loc25])
#loc276 = loc(fused[#loc29, #loc30])
#loc277 = loc(fused[#loc31, #loc32])
#loc278 = loc(fused[#loc33, #loc34])
#loc279 = loc(fused[#loc35, #loc36])
#loc280 = loc(fused[#loc37, #loc34])
#loc281 = loc(fused[#loc48, #loc49])
#loc282 = loc(fused[#loc50, #loc51])
#loc283 = loc(fused[#loc52, #loc53])
#loc284 = loc(fused[#loc55, #loc54])
#loc285 = loc(fused[#loc56, #loc57])
#loc286 = loc(fused[#loc60, #loc61])
#loc287 = loc(fused[#loc59, #loc61])
#loc288 = loc(fused[#loc58, #loc51])
#loc289 = loc(fused[#loc62, #loc63])
#loc290 = loc(fused[#loc64, #loc65])
#loc291 = loc(fused[#loc66, #loc63])
#loc292 = loc(fused[#loc76, #loc75])
#loc293 = loc(fused[#loc81, #loc80])
#loc294 = loc(fused[#loc84, #loc85])
#loc295 = loc(fused[#loc86, #loc87])
#loc296 = loc(fused[#loc88, #loc89])
#loc297 = loc(fused[#loc90, #loc91])
#loc298 = loc(fused[#loc92, #loc93])
#loc299 = loc(fused[#loc94, #loc95])
#loc300 = loc(fused[#loc100, #loc101])
#loc303 = loc(fused[#loc111, #loc112])
#loc304 = loc(fused[#loc115, #loc116])
#loc305 = loc(fused[#loc119, #loc118])
#loc306 = loc(fused[#loc120, #loc121])
#loc307 = loc(fused[#loc122, #loc123])
#loc308 = loc(fused[#loc124, #loc125])
#loc310 = loc(fused[#loc128, #loc129])
#loc311 = loc(fused[#loc130, #loc131])
#loc312 = loc(fused[#loc133, #loc134])
#loc313 = loc(fused[#loc138, #loc139])
#loc314 = loc(fused[#loc140, #loc141])
#loc315 = loc(fused[#loc142, #loc143])
#loc316 = loc(fused[#loc144, #loc145])
#loc317 = loc(fused[#loc146, #loc143])
#loc318 = loc(fused[#loc157, #loc158])
#loc319 = loc(fused[#loc159, #loc160])
#loc320 = loc(fused[#loc161, #loc162])
#loc321 = loc(fused[#loc164, #loc163])
#loc322 = loc(fused[#loc165, #loc166])
#loc323 = loc(fused[#loc169, #loc170])
#loc324 = loc(fused[#loc168, #loc170])
#loc325 = loc(fused[#loc167, #loc160])
#loc326 = loc(fused[#loc171, #loc172])
#loc327 = loc(fused[#loc173, #loc174])
#loc328 = loc(fused[#loc175, #loc172])
#loc329 = loc(fused[#loc185, #loc184])
#loc330 = loc(fused[#loc190, #loc189])
#loc331 = loc(fused[#loc193, #loc194])
#loc332 = loc(fused[#loc195, #loc196])
#loc334 = loc(fused[#loc199, #loc200])
#loc335 = loc(fused[#loc201, #loc202])
#loc336 = loc(fused[#loc204, #loc205])
#loc337 = loc(fused[#loc209, #loc210])
#loc338 = loc(fused[#loc212, #loc213])
#loc339 = loc(fused[#loc214, #loc215])
#loc340 = loc(fused[#loc216, #loc213])
#loc341 = loc(fused[#loc227, #loc228])
#loc342 = loc(fused[#loc229, #loc230])
#loc343 = loc(fused[#loc231, #loc232])
#loc344 = loc(fused[#loc234, #loc233])
#loc345 = loc(fused[#loc235, #loc236])
#loc346 = loc(fused[#loc239, #loc240])
#loc347 = loc(fused[#loc238, #loc240])
#loc348 = loc(fused[#loc237, #loc230])
#loc349 = loc(fused[#loc241, #loc242])
#loc350 = loc(fused[#loc243, #loc244])
#loc351 = loc(fused[#loc245, #loc242])
#loc352 = loc(fused[#loc253, #loc254])
#loc353 = loc(fused[#loc256, #loc255])
#loc354 = loc(fused[#loc261, #loc260])
