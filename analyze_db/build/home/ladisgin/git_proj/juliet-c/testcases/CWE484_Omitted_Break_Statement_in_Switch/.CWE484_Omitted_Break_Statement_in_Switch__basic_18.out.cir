!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc43 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":89:10)
#loc44 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":89:14)
#loc45 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":89:20)
#loc46 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":89:32)
#loc97 = loc(fused[#loc43, #loc44])
#loc98 = loc(fused[#loc45, #loc46])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE484_Omitted_Break_Statement_in_Switch/CWE484_Omitted_Break_Statement_in_Switch__basic_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc85)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc86)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc6)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"2\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc7)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Invalid Number\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE484_Omitted_Break_Statement_in_Switch__basic_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc88)
    cir.br ^bb1 loc(#loc89)
  ^bb1:  // pred: ^bb0
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %2 = cir.const #cir.int<3> : !s32i loc(#loc16)
    %3 = cir.binop(rem, %1, %2) : !s32i loc(#loc90)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    cir.br ^bb2 loc(#loc91)
  ^bb2:  // pred: ^bb1
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    cir.br ^bb3 loc(#loc17)
  ^bb3:  // pred: ^bb2
    cir.switch.flat %4 : !s32i, ^bb9 [
      0: ^bb5,
      1: ^bb7,
      2: ^bb8
    ] loc(#loc17)
  ^bb4:  // no predecessors
    cir.br ^bb5 loc(#loc20)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc5)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc21)
    cir.br ^bb6 loc(#loc20)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc22)
  ^bb7:  // 2 preds: ^bb3, ^bb6
    %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc6)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc6)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc23)
    cir.br ^bb10 loc(#loc24)
  ^bb8:  // pred: ^bb3
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc7)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc25)
    cir.br ^bb10 loc(#loc26)
  ^bb9:  // pred: ^bb3
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc8)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc8)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc27)
    cir.br ^bb10 loc(#loc28)
  ^bb10:  // 3 preds: ^bb7, ^bb8, ^bb9
    cir.br ^bb11 loc(#loc18)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc10)
  } loc(#loc87)
  cir.func no_proto @CWE484_Omitted_Break_Statement_in_Switch__basic_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc93)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc30)
  } loc(#loc92)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc94)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc95)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc40)
  cir.func @main(%arg0: !s32i loc(fused[#loc43, #loc44]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc45, #loc46])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc97)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc98)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc42)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc47)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc47)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc48)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc49)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc49)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc50)
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc37)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    %8 = cir.get_global @CWE484_Omitted_Break_Statement_in_Switch__basic_18_good : !cir.ptr<!cir.func<!void ()>> loc(#loc99)
    cir.call @CWE484_Omitted_Break_Statement_in_Switch__basic_18_good() : () -> () loc(#loc52)
    %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc38)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc39)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %13 = cir.get_global @CWE484_Omitted_Break_Statement_in_Switch__basic_18_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc100)
    cir.call @CWE484_Omitted_Break_Statement_in_Switch__basic_18_bad() : () -> () loc(#loc56)
    %14 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc40)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc59)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    cir.return %17 : !s32i loc(#loc101)
  } loc(#loc96)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc103)
    cir.br ^bb1 loc(#loc104)
  ^bb1:  // pred: ^bb0
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
    %2 = cir.const #cir.int<3> : !s32i loc(#loc68)
    %3 = cir.binop(rem, %1, %2) : !s32i loc(#loc105)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    cir.br ^bb2 loc(#loc106)
  ^bb2:  // pred: ^bb1
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
    cir.br ^bb3 loc(#loc69)
  ^bb3:  // pred: ^bb2
    cir.switch.flat %4 : !s32i, ^bb8 [
      0: ^bb5,
      1: ^bb6,
      2: ^bb7
    ] loc(#loc69)
  ^bb4:  // no predecessors
    cir.br ^bb5 loc(#loc72)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc73)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    cir.br ^bb9 loc(#loc75)
  ^bb6:  // pred: ^bb3
    %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc76)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    cir.br ^bb9 loc(#loc78)
  ^bb7:  // pred: ^bb3
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc79)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc79)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    cir.br ^bb9 loc(#loc81)
  ^bb8:  // pred: ^bb3
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc82)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc82)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    cir.br ^bb9 loc(#loc84)
  ^bb9:  // 4 preds: ^bb5, ^bb6, ^bb7, ^bb8
    cir.br ^bb10 loc(#loc70)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc62)
  } loc(#loc102)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE484_Omitted_Break_Statement_in_Switch/CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":30:23)
#loc6 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":32:23)
#loc7 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":35:23)
#loc8 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":38:23)
#loc9 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":20:1)
#loc10 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":42:1)
#loc11 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":25:9)
#loc12 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":25:28)
#loc13 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":22:5)
#loc14 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":22:10)
#loc15 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":25:18)
#loc16 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":25:27)
#loc17 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":27:9)
#loc18 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":40:9)
#loc19 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":27:17)
#loc20 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":29:9)
#loc21 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":30:13)
#loc22 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":31:9)
#loc23 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":32:13)
#loc24 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":33:13)
#loc25 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":35:13)
#loc26 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":36:13)
#loc27 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":38:13)
#loc28 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":39:13)
#loc29 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":75:1)
#loc30 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":78:1)
#loc31 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":77:5)
#loc32 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":77:11)
#loc33 = loc("/usr/include/stdlib.h":575:1)
#loc34 = loc("/usr/include/stdlib.h":575:41)
#loc35 = loc("/usr/include/time.h":76:1)
#loc36 = loc("/usr/include/time.h":76:38)
#loc37 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":94:15)
#loc38 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":96:15)
#loc39 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":99:15)
#loc40 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":101:15)
#loc41 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":89:1)
#loc42 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":104:1)
#loc47 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":90:1)
#loc48 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":92:27)
#loc49 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":92:22)
#loc50 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":92:5)
#loc51 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":94:5)
#loc52 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":95:5)
#loc53 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":95:61)
#loc54 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":96:5)
#loc55 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":99:5)
#loc56 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":100:5)
#loc57 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":100:60)
#loc58 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":101:5)
#loc59 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":103:12)
#loc60 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":103:5)
#loc61 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":49:1)
#loc62 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":73:1)
#loc63 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":54:9)
#loc64 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":54:28)
#loc65 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":51:5)
#loc66 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":51:10)
#loc67 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":54:18)
#loc68 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":54:27)
#loc69 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":57:9)
#loc70 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":71:9)
#loc71 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":57:17)
#loc72 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":59:9)
#loc73 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":60:23)
#loc74 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":60:13)
#loc75 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":61:13)
#loc76 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":63:23)
#loc77 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":63:13)
#loc78 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":64:13)
#loc79 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":66:23)
#loc80 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":66:13)
#loc81 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":67:13)
#loc82 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":69:23)
#loc83 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":69:13)
#loc84 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_18.c":70:13)
#loc85 = loc(fused[#loc1, #loc2])
#loc86 = loc(fused[#loc3, #loc4])
#loc87 = loc(fused[#loc9, #loc10])
#loc88 = loc(fused[#loc11, #loc12])
#loc89 = loc(fused[#loc13, #loc14])
#loc90 = loc(fused[#loc15, #loc16])
#loc91 = loc(fused[#loc17, #loc18])
#loc92 = loc(fused[#loc29, #loc30])
#loc93 = loc(fused[#loc31, #loc32])
#loc94 = loc(fused[#loc33, #loc34])
#loc95 = loc(fused[#loc35, #loc36])
#loc96 = loc(fused[#loc41, #loc42])
#loc99 = loc(fused[#loc52, #loc53])
#loc100 = loc(fused[#loc56, #loc57])
#loc101 = loc(fused[#loc60, #loc59])
#loc102 = loc(fused[#loc61, #loc62])
#loc103 = loc(fused[#loc63, #loc64])
#loc104 = loc(fused[#loc65, #loc66])
#loc105 = loc(fused[#loc67, #loc68])
#loc106 = loc(fused[#loc69, #loc70])
