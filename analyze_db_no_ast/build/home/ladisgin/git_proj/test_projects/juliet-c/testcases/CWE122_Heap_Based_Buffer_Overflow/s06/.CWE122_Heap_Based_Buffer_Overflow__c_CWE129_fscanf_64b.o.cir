!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":22:69)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":22:76)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":61:73)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":61:80)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":96:73)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":96:80)
#true = #cir.bool<true> : !cir.bool
#loc244 = loc(fused[#loc14, #loc15])
#loc272 = loc(fused[#loc87, #loc88])
#loc300 = loc(fused[#loc162, #loc163])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc238)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc239)
  cir.func private  @printIntLine(!s32i) loc(#loc240)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc241)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc242)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc14, #loc15])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc244)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc245)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc246)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc20)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc17)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc17)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc245)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc21)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc22)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc246)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc248)
      %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc249)
      %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc29)
      %10 = cir.const #cir.int<10> : !s32i loc(#loc30)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc30)
      %12 = cir.const #cir.int<4> : !u64i loc(#loc250)
      %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc251)
      %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc29)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc252)
      cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc249)
      cir.scope {
        %19 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc35)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc36)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc36)
        %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !s32i loc(#loc254)
        %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc37)
        cir.if %23 {
          %24 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc39)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc40)
          %26 = cir.unary(minus, %25) : !s32i, !s32i loc(#loc41)
          cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc39)
        } loc(#loc255)
      } loc(#loc253)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc44)
        cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc257)
        cir.for : cond {
          %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc46)
          %21 = cir.const #cir.int<10> : !s32i loc(#loc47)
          %22 = cir.cmp(lt, %20, %21) : !s32i, !s32i loc(#loc258)
          %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc48)
          cir.condition(%23) loc(#loc48)
        } body {
          cir.scope {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc50)
            %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc51)
            %22 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc52)
            %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc53)
            cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc260)
          } loc(#loc259)
          cir.yield loc(#loc43)
        } step {
          %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc54)
          %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc55)
          cir.store %21, %7 : !s32i, !cir.ptr<!s32i> loc(#loc261)
          cir.yield loc(#loc256)
        } loc(#loc256)
      } loc(#loc256)
      cir.scope {
        %19 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc58)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc59)
        %21 = cir.cmp(ge, %19, %20) : !s32i, !s32i loc(#loc263)
        %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc60)
        cir.if %22 {
          %23 = cir.const #cir.int<1> : !s32i loc(#loc64)
          %24 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc65)
          %25 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc66)
          %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc67)
          cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc265)
          cir.scope {
            %27 = cir.const #cir.int<0> : !s32i loc(#loc70)
            cir.store %27, %7 : !s32i, !cir.ptr<!s32i> loc(#loc267)
            cir.for : cond {
              %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc72)
              %29 = cir.const #cir.int<10> : !s32i loc(#loc73)
              %30 = cir.cmp(lt, %28, %29) : !s32i, !s32i loc(#loc268)
              %31 = cir.cast(int_to_bool, %30 : !s32i), !cir.bool loc(#loc74)
              cir.condition(%31) loc(#loc74)
            } body {
              cir.scope {
                %28 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc76)
                %29 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc77)
                %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc78)
                %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc76)
                cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc79)
              } loc(#loc269)
              cir.yield loc(#loc69)
            } step {
              %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc80)
              %29 = cir.unary(inc, %28) : !s32i, !s32i loc(#loc81)
              cir.store %29, %7 : !s32i, !cir.ptr<!s32i> loc(#loc270)
              cir.yield loc(#loc266)
            } loc(#loc266)
          } loc(#loc266)
        } else {
          %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc9)
          %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc82)
        } loc(#loc264)
      } loc(#loc262)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc83)
      %17 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc84)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc84)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc83)
    } loc(#loc247)
    cir.return loc(#loc13)
  } loc(#loc243)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc87, #loc88])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc272)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc273)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc274)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc93)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc90)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc90)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc273)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc94)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc274)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc276)
      %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc277)
      %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc102)
      %10 = cir.const #cir.int<10> : !s32i loc(#loc103)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc103)
      %12 = cir.const #cir.int<4> : !u64i loc(#loc278)
      %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc279)
      %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc102)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc280)
      cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc277)
      cir.scope {
        %19 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc108)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc109)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc109)
        %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !s32i loc(#loc282)
        %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc110)
        cir.if %23 {
          %24 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc112)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc113)
          %26 = cir.unary(minus, %25) : !s32i, !s32i loc(#loc114)
          cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc112)
        } loc(#loc283)
      } loc(#loc281)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc117)
        cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc285)
        cir.for : cond {
          %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc119)
          %21 = cir.const #cir.int<10> : !s32i loc(#loc120)
          %22 = cir.cmp(lt, %20, %21) : !s32i, !s32i loc(#loc286)
          %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc121)
          cir.condition(%23) loc(#loc121)
        } body {
          cir.scope {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc123)
            %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc124)
            %22 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc125)
            %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc126)
            cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc288)
          } loc(#loc287)
          cir.yield loc(#loc116)
        } step {
          %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc127)
          %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc128)
          cir.store %21, %7 : !s32i, !cir.ptr<!s32i> loc(#loc289)
          cir.yield loc(#loc284)
        } loc(#loc284)
      } loc(#loc284)
      cir.scope {
        %19 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc131)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc132)
        %21 = cir.cmp(ge, %19, %20) : !s32i, !s32i loc(#loc291)
        %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc133)
        cir.if %22 {
          %23 = cir.const #cir.int<1> : !s32i loc(#loc137)
          %24 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc138)
          %25 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc139)
          %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc140)
          cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc293)
          cir.scope {
            %27 = cir.const #cir.int<0> : !s32i loc(#loc143)
            cir.store %27, %7 : !s32i, !cir.ptr<!s32i> loc(#loc295)
            cir.for : cond {
              %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc145)
              %29 = cir.const #cir.int<10> : !s32i loc(#loc146)
              %30 = cir.cmp(lt, %28, %29) : !s32i, !s32i loc(#loc296)
              %31 = cir.cast(int_to_bool, %30 : !s32i), !cir.bool loc(#loc147)
              cir.condition(%31) loc(#loc147)
            } body {
              cir.scope {
                %28 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc149)
                %29 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc150)
                %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc151)
                %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc149)
                cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc152)
              } loc(#loc297)
              cir.yield loc(#loc142)
            } step {
              %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc153)
              %29 = cir.unary(inc, %28) : !s32i, !s32i loc(#loc154)
              cir.store %29, %7 : !s32i, !cir.ptr<!s32i> loc(#loc298)
              cir.yield loc(#loc294)
            } loc(#loc294)
          } loc(#loc294)
        } else {
          %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc155)
          %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc155)
          cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc156)
        } loc(#loc292)
      } loc(#loc290)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc157)
      %17 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc158)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc158)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc157)
    } loc(#loc275)
    cir.return loc(#loc86)
  } loc(#loc271)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc159)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b_goodB2GSink(%arg0: !cir.ptr<!void> loc(fused[#loc162, #loc163])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc300)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc301)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc302)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc168)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc165)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc165)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc301)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc169)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc170)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc302)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc304)
      %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc305)
      %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc177)
      %10 = cir.const #cir.int<10> : !s32i loc(#loc178)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc178)
      %12 = cir.const #cir.int<4> : !u64i loc(#loc306)
      %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc307)
      %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc177)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc308)
      cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc305)
      cir.scope {
        %19 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc183)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc184)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc184)
        %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !s32i loc(#loc310)
        %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc185)
        cir.if %23 {
          %24 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc187)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc188)
          %26 = cir.unary(minus, %25) : !s32i, !s32i loc(#loc189)
          cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc187)
        } loc(#loc311)
      } loc(#loc309)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc192)
        cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc313)
        cir.for : cond {
          %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc194)
          %21 = cir.const #cir.int<10> : !s32i loc(#loc195)
          %22 = cir.cmp(lt, %20, %21) : !s32i, !s32i loc(#loc314)
          %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc196)
          cir.condition(%23) loc(#loc196)
        } body {
          cir.scope {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc198)
            %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc199)
            %22 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc200)
            %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc201)
            cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc316)
          } loc(#loc315)
          cir.yield loc(#loc191)
        } step {
          %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc202)
          %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc203)
          cir.store %21, %7 : !s32i, !cir.ptr<!s32i> loc(#loc317)
          cir.yield loc(#loc312)
        } loc(#loc312)
      } loc(#loc312)
      cir.scope {
        %19 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc206)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc207)
        %21 = cir.cmp(ge, %19, %20) : !s32i, !s32i loc(#loc319)
        %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc208)
        %23 = cir.ternary(%22, true {
          %24 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc210)
          %25 = cir.const #cir.int<10> : !s32i loc(#loc211)
          %26 = cir.cmp(lt, %24, %25) : !s32i, !s32i loc(#loc320)
          %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc213)
          %28 = cir.ternary(%27, true {
            %29 = cir.const #true loc(#loc209)
            cir.yield %29 : !cir.bool loc(#loc209)
          }, false {
            %29 = cir.const #false loc(#loc209)
            cir.yield %29 : !cir.bool loc(#loc209)
          }) : (!cir.bool) -> !cir.bool loc(#loc209)
          cir.yield %28 : !cir.bool loc(#loc209)
        }, false {
          %24 = cir.const #false loc(#loc209)
          cir.yield %24 : !cir.bool loc(#loc209)
        }) : (!cir.bool) -> !cir.bool loc(#loc209)
        cir.if %23 {
          %24 = cir.const #cir.int<1> : !s32i loc(#loc217)
          %25 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc218)
          %26 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc219)
          %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc220)
          cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc322)
          cir.scope {
            %28 = cir.const #cir.int<0> : !s32i loc(#loc223)
            cir.store %28, %7 : !s32i, !cir.ptr<!s32i> loc(#loc324)
            cir.for : cond {
              %29 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc225)
              %30 = cir.const #cir.int<10> : !s32i loc(#loc226)
              %31 = cir.cmp(lt, %29, %30) : !s32i, !s32i loc(#loc325)
              %32 = cir.cast(int_to_bool, %31 : !s32i), !cir.bool loc(#loc227)
              cir.condition(%32) loc(#loc227)
            } body {
              cir.scope {
                %29 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc229)
                %30 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc230)
                %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc231)
                %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc229)
                cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc232)
              } loc(#loc326)
              cir.yield loc(#loc222)
            } step {
              %29 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc233)
              %30 = cir.unary(inc, %29) : !s32i, !s32i loc(#loc234)
              cir.store %30, %7 : !s32i, !cir.ptr<!s32i> loc(#loc327)
              cir.yield loc(#loc323)
            } loc(#loc323)
          } loc(#loc323)
        } else {
          %24 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc159)
          %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc159)
          cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc235)
        } loc(#loc321)
      } loc(#loc318)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc236)
      %17 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc237)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc237)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc236)
    } loc(#loc303)
    cir.return loc(#loc161)
  } loc(#loc299)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":50:23)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":22:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":54:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":25:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":25:28)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":27:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":27:25)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":23:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":27:18)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":27:17)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":28:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":53:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":29:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":29:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":30:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":30:54)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":30:31)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":30:38)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":30:43)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":30:53)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":31:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":31:39)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":31:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":31:23)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":31:20)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":31:29)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":31:30)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":31:36)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":31:35)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":33:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":36:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":33:18)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":33:14)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":33:21)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":33:25)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":33:23)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":34:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":35:25)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":35:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":35:20)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":35:21)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":33:30)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":33:29)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":39:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":51:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":39:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":39:21)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":39:18)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":40:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":47:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":49:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":41:28)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":41:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":41:20)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":41:24)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":43:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":46:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":43:21)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":43:17)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":43:24)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":43:28)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":43:26)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":44:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":45:30)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":45:37)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":45:38)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":45:17)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":43:33)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":43:32)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":50:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":52:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":52:14)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":61:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":93:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":64:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":64:28)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":66:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":66:25)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":62:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":66:18)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":66:17)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":67:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":92:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":68:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":68:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":69:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":69:54)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":69:31)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":69:38)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":69:43)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":69:53)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":70:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":70:39)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":70:13)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":70:23)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":70:20)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":70:29)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":70:30)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":70:36)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":70:35)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":72:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":75:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":72:18)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":72:14)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":72:21)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":72:25)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":72:23)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":73:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":74:25)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":74:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":74:20)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":74:21)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":72:30)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":72:29)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":78:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":90:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":78:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":78:21)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":78:18)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":79:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":86:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":88:9)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":80:28)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":80:13)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":80:20)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":80:24)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":82:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":85:13)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":82:21)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":82:17)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":82:24)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":82:28)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":82:26)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":83:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":84:30)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":84:37)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":84:38)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":84:17)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":82:33)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":82:32)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":89:23)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":89:13)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":91:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":91:14)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":123:23)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":96:1)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":127:1)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":99:5)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":99:28)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":101:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":101:25)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":97:1)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":101:18)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":101:17)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":102:5)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":126:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":103:9)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":103:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":104:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":104:54)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":104:31)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":104:38)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":104:43)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":104:53)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":105:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":105:39)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":105:13)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":105:23)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":105:20)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":105:29)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":105:30)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":105:36)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":105:35)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":107:9)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":110:9)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":107:18)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":107:14)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":107:21)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":107:25)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":107:23)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":108:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":109:25)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":109:13)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":109:20)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":109:21)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":107:30)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":107:29)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":112:9)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":124:9)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":112:13)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":112:21)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":112:18)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":112:23)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":112:26)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":112:34)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":112:36)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":112:31)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":113:9)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":120:9)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":122:9)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":114:28)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":114:13)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":114:20)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":114:24)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":116:13)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":119:13)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":116:21)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":116:17)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":116:24)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":116:28)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":116:26)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":117:13)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":118:30)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":118:37)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":118:38)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":118:17)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":116:33)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":116:32)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":123:13)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":125:9)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c":125:14)
#loc238 = loc(fused[#loc1, #loc2])
#loc239 = loc(fused[#loc3, #loc4])
#loc240 = loc(fused[#loc5, #loc6])
#loc241 = loc(fused[#loc7, #loc8])
#loc242 = loc(fused[#loc10, #loc11])
#loc243 = loc(fused[#loc12, #loc13])
#loc245 = loc(fused[#loc16, #loc17])
#loc246 = loc(fused[#loc18, #loc19])
#loc247 = loc(fused[#loc23, #loc24])
#loc248 = loc(fused[#loc25, #loc26])
#loc249 = loc(fused[#loc27, #loc28])
#loc250 = loc(fused[#loc31, #loc32])
#loc251 = loc(fused[#loc30, #loc32])
#loc252 = loc(fused[#loc29, #loc28])
#loc253 = loc(fused[#loc33, #loc34])
#loc254 = loc(fused[#loc35, #loc36])
#loc255 = loc(fused[#loc38, #loc34])
#loc256 = loc(fused[#loc42, #loc43])
#loc257 = loc(fused[#loc45, #loc44])
#loc258 = loc(fused[#loc46, #loc47])
#loc259 = loc(fused[#loc49, #loc43])
#loc260 = loc(fused[#loc51, #loc50])
#loc261 = loc(fused[#loc55, #loc54])
#loc262 = loc(fused[#loc56, #loc57])
#loc263 = loc(fused[#loc58, #loc59])
#loc264 = loc(fused[#loc61, #loc62, #loc63, #loc57])
#loc265 = loc(fused[#loc65, #loc64])
#loc266 = loc(fused[#loc68, #loc69])
#loc267 = loc(fused[#loc71, #loc70])
#loc268 = loc(fused[#loc72, #loc73])
#loc269 = loc(fused[#loc75, #loc69])
#loc270 = loc(fused[#loc81, #loc80])
#loc271 = loc(fused[#loc85, #loc86])
#loc273 = loc(fused[#loc89, #loc90])
#loc274 = loc(fused[#loc91, #loc92])
#loc275 = loc(fused[#loc96, #loc97])
#loc276 = loc(fused[#loc98, #loc99])
#loc277 = loc(fused[#loc100, #loc101])
#loc278 = loc(fused[#loc104, #loc105])
#loc279 = loc(fused[#loc103, #loc105])
#loc280 = loc(fused[#loc102, #loc101])
#loc281 = loc(fused[#loc106, #loc107])
#loc282 = loc(fused[#loc108, #loc109])
#loc283 = loc(fused[#loc111, #loc107])
#loc284 = loc(fused[#loc115, #loc116])
#loc285 = loc(fused[#loc118, #loc117])
#loc286 = loc(fused[#loc119, #loc120])
#loc287 = loc(fused[#loc122, #loc116])
#loc288 = loc(fused[#loc124, #loc123])
#loc289 = loc(fused[#loc128, #loc127])
#loc290 = loc(fused[#loc129, #loc130])
#loc291 = loc(fused[#loc131, #loc132])
#loc292 = loc(fused[#loc134, #loc135, #loc136, #loc130])
#loc293 = loc(fused[#loc138, #loc137])
#loc294 = loc(fused[#loc141, #loc142])
#loc295 = loc(fused[#loc144, #loc143])
#loc296 = loc(fused[#loc145, #loc146])
#loc297 = loc(fused[#loc148, #loc142])
#loc298 = loc(fused[#loc154, #loc153])
#loc299 = loc(fused[#loc160, #loc161])
#loc301 = loc(fused[#loc164, #loc165])
#loc302 = loc(fused[#loc166, #loc167])
#loc303 = loc(fused[#loc171, #loc172])
#loc304 = loc(fused[#loc173, #loc174])
#loc305 = loc(fused[#loc175, #loc176])
#loc306 = loc(fused[#loc179, #loc180])
#loc307 = loc(fused[#loc178, #loc180])
#loc308 = loc(fused[#loc177, #loc176])
#loc309 = loc(fused[#loc181, #loc182])
#loc310 = loc(fused[#loc183, #loc184])
#loc311 = loc(fused[#loc186, #loc182])
#loc312 = loc(fused[#loc190, #loc191])
#loc313 = loc(fused[#loc193, #loc192])
#loc314 = loc(fused[#loc194, #loc195])
#loc315 = loc(fused[#loc197, #loc191])
#loc316 = loc(fused[#loc199, #loc198])
#loc317 = loc(fused[#loc203, #loc202])
#loc318 = loc(fused[#loc204, #loc205])
#loc319 = loc(fused[#loc206, #loc207])
#loc320 = loc(fused[#loc210, #loc212])
#loc321 = loc(fused[#loc214, #loc215, #loc216, #loc205])
#loc322 = loc(fused[#loc218, #loc217])
#loc323 = loc(fused[#loc221, #loc222])
#loc324 = loc(fused[#loc224, #loc223])
#loc325 = loc(fused[#loc225, #loc226])
#loc326 = loc(fused[#loc228, #loc222])
#loc327 = loc(fused[#loc234, #loc233])
