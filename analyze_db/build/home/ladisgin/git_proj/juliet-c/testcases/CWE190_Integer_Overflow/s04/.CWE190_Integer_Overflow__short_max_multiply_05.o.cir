!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_multiply_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc179)
  cir.func private @printIntLine(!s32i) loc(#loc180)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_multiply_05_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc182)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc183)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc11)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc184)
    cir.br ^bb1 loc(#loc185)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc179)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc15)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc186)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<32767> : !s32i loc(#loc17)
    %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc17)
    cir.store %8, %1 : !s16i, !cir.ptr<!s16i> loc(#loc187)
    cir.br ^bb3 loc(#loc14)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc14)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc188)
  ^bb5:  // pred: ^bb4
    %9 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc179)
    %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %11 ^bb6, ^bb11 loc(#loc189)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc190)
  ^bb7:  // pred: ^bb6
    %12 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc25)
    %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc25)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc26)
    %15 = cir.cmp(gt, %13, %14) : !s32i, !cir.bool loc(#loc191)
    cir.brcond %15 ^bb8, ^bb9 loc(#loc192)
  ^bb8:  // pred: ^bb7
    %16 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc28)
    %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc28)
    %18 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %19 = cir.binop(mul, %17, %18) nsw : !s32i loc(#loc28)
    %20 = cir.cast(integral, %19 : !s32i), !s16i loc(#loc28)
    cir.store %20, %0 : !s16i, !cir.ptr<!s16i> loc(#loc182)
    %21 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc29)
    %22 = cir.cast(integral, %21 : !s16i), !s32i loc(#loc29)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc30)
    cir.br ^bb9 loc(#loc24)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc24)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc20)
  ^bb11:  // 2 preds: ^bb5, ^bb10
    cir.br ^bb12 loc(#loc20)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc6)
  } loc(#loc181)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_multiply_05_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc194)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc195)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc196)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc197)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc32)
  } loc(#loc193)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc198)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc199)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc46)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc201)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc202)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc53)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc53)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc203)
    cir.br ^bb1 loc(#loc204)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc179)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc57)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc205)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<32767> : !s32i loc(#loc59)
    %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc59)
    cir.store %8, %1 : !s16i, !cir.ptr<!s16i> loc(#loc206)
    cir.br ^bb3 loc(#loc56)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc56)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc207)
  ^bb5:  // pred: ^bb4
    %9 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc198)
    %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc63)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc63)
    cir.brcond %11 ^bb6, ^bb7 loc(#loc208)
  ^bb6:  // pred: ^bb5
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc45)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    cir.br ^bb17 loc(#loc65)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc209)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc70)
    %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc70)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc71)
    %17 = cir.cmp(gt, %15, %16) : !s32i, !cir.bool loc(#loc210)
    cir.brcond %17 ^bb9, ^bb15 loc(#loc211)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc212)
  ^bb10:  // pred: ^bb9
    %18 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc75)
    %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc75)
    %20 = cir.const #cir.int<32767> : !s32i loc(#loc76)
    %21 = cir.const #cir.int<2> : !s32i loc(#loc77)
    %22 = cir.binop(div, %20, %21) : !s32i loc(#loc213)
    %23 = cir.cmp(lt, %19, %22) : !s32i, !cir.bool loc(#loc214)
    cir.brcond %23 ^bb11, ^bb12 loc(#loc215)
  ^bb11:  // pred: ^bb10
    %24 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc82)
    %25 = cir.cast(integral, %24 : !s16i), !s32i loc(#loc82)
    %26 = cir.const #cir.int<2> : !s32i loc(#loc50)
    %27 = cir.binop(mul, %25, %26) nsw : !s32i loc(#loc82)
    %28 = cir.cast(integral, %27 : !s32i), !s16i loc(#loc82)
    cir.store %28, %0 : !s16i, !cir.ptr<!s16i> loc(#loc201)
    %29 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc83)
    %30 = cir.cast(integral, %29 : !s16i), !s32i loc(#loc83)
    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc84)
    cir.br ^bb13 loc(#loc80)
  ^bb12:  // pred: ^bb10
    %31 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc46)
    %32 = cir.cast(array_to_ptrdecay, %31 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    cir.br ^bb13 loc(#loc74)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc74)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc69)
  ^bb15:  // 2 preds: ^bb8, ^bb14
    cir.br ^bb16 loc(#loc69)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc62)
  ^bb17:  // 2 preds: ^bb6, ^bb16
    cir.br ^bb18 loc(#loc62)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc48)
  } loc(#loc200)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc217)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc218)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc92)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc92)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc219)
    cir.br ^bb1 loc(#loc220)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc179)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc96)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc96)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc221)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<32767> : !s32i loc(#loc98)
    %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc98)
    cir.store %8, %1 : !s16i, !cir.ptr<!s16i> loc(#loc222)
    cir.br ^bb3 loc(#loc95)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc95)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc223)
  ^bb5:  // pred: ^bb4
    %9 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc179)
    %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc102)
    cir.brcond %11 ^bb6, ^bb16 loc(#loc224)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc225)
  ^bb7:  // pred: ^bb6
    %12 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc106)
    %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc106)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc107)
    %15 = cir.cmp(gt, %13, %14) : !s32i, !cir.bool loc(#loc226)
    cir.brcond %15 ^bb8, ^bb14 loc(#loc227)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc228)
  ^bb9:  // pred: ^bb8
    %16 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc111)
    %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc111)
    %18 = cir.const #cir.int<32767> : !s32i loc(#loc112)
    %19 = cir.const #cir.int<2> : !s32i loc(#loc113)
    %20 = cir.binop(div, %18, %19) : !s32i loc(#loc229)
    %21 = cir.cmp(lt, %17, %20) : !s32i, !cir.bool loc(#loc230)
    cir.brcond %21 ^bb10, ^bb11 loc(#loc231)
  ^bb10:  // pred: ^bb9
    %22 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc118)
    %23 = cir.cast(integral, %22 : !s16i), !s32i loc(#loc118)
    %24 = cir.const #cir.int<2> : !s32i loc(#loc89)
    %25 = cir.binop(mul, %23, %24) nsw : !s32i loc(#loc118)
    %26 = cir.cast(integral, %25 : !s32i), !s16i loc(#loc118)
    cir.store %26, %0 : !s16i, !cir.ptr<!s16i> loc(#loc217)
    %27 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc119)
    %28 = cir.cast(integral, %27 : !s16i), !s32i loc(#loc119)
    cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc120)
    cir.br ^bb12 loc(#loc116)
  ^bb11:  // pred: ^bb9
    %29 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc121)
    %30 = cir.cast(array_to_ptrdecay, %29 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc121)
    cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc122)
    cir.br ^bb12 loc(#loc110)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc110)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc105)
  ^bb14:  // 2 preds: ^bb7, ^bb13
    cir.br ^bb15 loc(#loc105)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc101)
  ^bb16:  // 2 preds: ^bb5, ^bb15
    cir.br ^bb17 loc(#loc101)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc87)
  } loc(#loc216)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc233)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc234)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc129)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc129)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc235)
    cir.br ^bb1 loc(#loc236)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc198)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc133)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc133)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc237)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc137)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc137)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc138)
    cir.br ^bb4 loc(#loc135)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<2> : !s32i loc(#loc139)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc139)
    cir.store %10, %1 : !s16i, !cir.ptr<!s16i> loc(#loc238)
    cir.br ^bb4 loc(#loc132)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc132)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc239)
  ^bb6:  // pred: ^bb5
    %11 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc179)
    %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc143)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc143)
    cir.brcond %13 ^bb7, ^bb12 loc(#loc240)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc241)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc147)
    %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc147)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc148)
    %17 = cir.cmp(gt, %15, %16) : !s32i, !cir.bool loc(#loc242)
    cir.brcond %17 ^bb9, ^bb10 loc(#loc243)
  ^bb9:  // pred: ^bb8
    %18 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc150)
    %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc150)
    %20 = cir.const #cir.int<2> : !s32i loc(#loc126)
    %21 = cir.binop(mul, %19, %20) nsw : !s32i loc(#loc150)
    %22 = cir.cast(integral, %21 : !s32i), !s16i loc(#loc150)
    cir.store %22, %0 : !s16i, !cir.ptr<!s16i> loc(#loc233)
    %23 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc151)
    %24 = cir.cast(integral, %23 : !s16i), !s32i loc(#loc151)
    cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc152)
    cir.br ^bb10 loc(#loc146)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc146)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc142)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc142)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc124)
  } loc(#loc232)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc245)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc246)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc159)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc159)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc247)
    cir.br ^bb1 loc(#loc248)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc179)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc163)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc163)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc249)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<2> : !s32i loc(#loc165)
    %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc165)
    cir.store %8, %1 : !s16i, !cir.ptr<!s16i> loc(#loc250)
    cir.br ^bb3 loc(#loc162)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc162)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc251)
  ^bb5:  // pred: ^bb4
    %9 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc179)
    %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc169)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc169)
    cir.brcond %11 ^bb6, ^bb11 loc(#loc252)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc253)
  ^bb7:  // pred: ^bb6
    %12 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc173)
    %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc173)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc174)
    %15 = cir.cmp(gt, %13, %14) : !s32i, !cir.bool loc(#loc254)
    cir.brcond %15 ^bb8, ^bb9 loc(#loc255)
  ^bb8:  // pred: ^bb7
    %16 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc176)
    %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc176)
    %18 = cir.const #cir.int<2> : !s32i loc(#loc156)
    %19 = cir.binop(mul, %17, %18) nsw : !s32i loc(#loc176)
    %20 = cir.cast(integral, %19 : !s32i), !s16i loc(#loc176)
    cir.store %20, %0 : !s16i, !cir.ptr<!s16i> loc(#loc245)
    %21 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc177)
    %22 = cir.cast(integral, %21 : !s16i), !s32i loc(#loc177)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc178)
    cir.br ^bb9 loc(#loc172)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc172)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc168)
  ^bb11:  // 2 preds: ^bb5, ^bb10
    cir.br ^bb12 loc(#loc168)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc154)
  } loc(#loc244)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_multiply_05.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":23:1)
#loc2 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":23:25)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":28:1)
#loc6 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":46:1)
#loc7 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":42:13)
#loc8 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":42:35)
#loc9 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":30:5)
#loc10 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":30:11)
#loc11 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":31:12)
#loc12 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":31:5)
#loc13 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":32:5)
#loc14 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":36:5)
#loc15 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":32:8)
#loc16 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":33:5)
#loc17 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":35:16)
#loc18 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":35:9)
#loc19 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":37:5)
#loc20 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":45:5)
#loc21 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":37:8)
#loc22 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":38:5)
#loc23 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":39:9)
#loc24 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":44:9)
#loc25 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":39:12)
#loc26 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":39:19)
#loc27 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":40:9)
#loc28 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":42:28)
#loc29 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":43:26)
#loc30 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":43:13)
#loc31 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":160:1)
#loc32 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":166:1)
#loc33 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":162:5)
#loc34 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":162:14)
#loc35 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":163:5)
#loc36 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":163:14)
#loc37 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":164:5)
#loc38 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":164:14)
#loc39 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":165:5)
#loc40 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":165:14)
#loc41 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":24:1)
#loc42 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":24:26)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":65:19)
#loc46 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":79:27)
#loc47 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":53:1)
#loc48 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":83:1)
#loc49 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":74:17)
#loc50 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":74:39)
#loc51 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":55:5)
#loc52 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":55:11)
#loc53 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":56:12)
#loc54 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":56:5)
#loc55 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":57:5)
#loc56 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":61:5)
#loc57 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":57:8)
#loc58 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":58:5)
#loc59 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":60:16)
#loc60 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":60:9)
#loc61 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":62:5)
#loc62 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":82:5)
#loc63 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":62:8)
#loc64 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":63:5)
#loc65 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":66:5)
#loc66 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":68:5)
#loc67 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":65:9)
#loc68 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":69:9)
#loc69 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":81:9)
#loc70 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":69:12)
#loc71 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":69:19)
#loc72 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":70:9)
#loc73 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":72:13)
#loc74 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":80:13)
#loc75 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":72:17)
#loc76 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":72:25)
#loc77 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":72:34)
#loc78 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":72:35)
#loc79 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":73:13)
#loc80 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":76:13)
#loc81 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":78:13)
#loc82 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":74:32)
#loc83 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":75:30)
#loc84 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":75:17)
#loc85 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":79:17)
#loc86 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":86:1)
#loc87 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":111:1)
#loc88 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":102:17)
#loc89 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":102:39)
#loc90 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":88:5)
#loc91 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":88:11)
#loc92 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":89:12)
#loc93 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":89:5)
#loc94 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":90:5)
#loc95 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":94:5)
#loc96 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":90:8)
#loc97 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":91:5)
#loc98 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":93:16)
#loc99 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":93:9)
#loc100 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":95:5)
#loc101 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":110:5)
#loc102 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":95:8)
#loc103 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":96:5)
#loc104 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":97:9)
#loc105 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":109:9)
#loc106 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":97:12)
#loc107 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":97:19)
#loc108 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":98:9)
#loc109 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":100:13)
#loc110 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":108:13)
#loc111 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":100:17)
#loc112 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":100:25)
#loc113 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":100:34)
#loc114 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":100:35)
#loc115 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":101:13)
#loc116 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":104:13)
#loc117 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":106:13)
#loc118 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":102:32)
#loc119 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":103:30)
#loc120 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":103:17)
#loc121 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":107:27)
#loc122 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":107:17)
#loc123 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":114:1)
#loc124 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":137:1)
#loc125 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":133:13)
#loc126 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":133:35)
#loc127 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":116:5)
#loc128 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":116:11)
#loc129 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":117:12)
#loc130 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":117:5)
#loc131 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":118:5)
#loc132 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":127:5)
#loc133 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":118:8)
#loc134 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":119:5)
#loc135 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":122:5)
#loc136 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":124:5)
#loc137 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":121:19)
#loc138 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":121:9)
#loc139 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":126:16)
#loc140 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":126:9)
#loc141 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":128:5)
#loc142 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":136:5)
#loc143 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":128:8)
#loc144 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":129:5)
#loc145 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":130:9)
#loc146 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":135:9)
#loc147 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":130:12)
#loc148 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":130:19)
#loc149 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":131:9)
#loc150 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":133:28)
#loc151 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":134:26)
#loc152 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":134:13)
#loc153 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":140:1)
#loc154 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":158:1)
#loc155 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":154:13)
#loc156 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":154:35)
#loc157 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":142:5)
#loc158 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":142:11)
#loc159 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":143:12)
#loc160 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":143:5)
#loc161 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":144:5)
#loc162 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":148:5)
#loc163 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":144:8)
#loc164 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":145:5)
#loc165 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":147:16)
#loc166 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":147:9)
#loc167 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":149:5)
#loc168 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":157:5)
#loc169 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":149:8)
#loc170 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":150:5)
#loc171 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":151:9)
#loc172 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":156:9)
#loc173 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":151:12)
#loc174 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":151:19)
#loc175 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":152:9)
#loc176 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":154:28)
#loc177 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":155:26)
#loc178 = loc("CWE190_Integer_Overflow__short_max_multiply_05.c":155:13)
#loc179 = loc(fused[#loc1, #loc2])
#loc180 = loc(fused[#loc3, #loc4])
#loc181 = loc(fused[#loc5, #loc6])
#loc182 = loc(fused[#loc7, #loc8])
#loc183 = loc(fused[#loc9, #loc10])
#loc184 = loc(fused[#loc12, #loc11])
#loc185 = loc(fused[#loc13, #loc14])
#loc186 = loc(fused[#loc16, #loc14])
#loc187 = loc(fused[#loc18, #loc17])
#loc188 = loc(fused[#loc19, #loc20])
#loc189 = loc(fused[#loc22, #loc20])
#loc190 = loc(fused[#loc23, #loc24])
#loc191 = loc(fused[#loc25, #loc26])
#loc192 = loc(fused[#loc27, #loc24])
#loc193 = loc(fused[#loc31, #loc32])
#loc194 = loc(fused[#loc33, #loc34])
#loc195 = loc(fused[#loc35, #loc36])
#loc196 = loc(fused[#loc37, #loc38])
#loc197 = loc(fused[#loc39, #loc40])
#loc198 = loc(fused[#loc41, #loc42])
#loc199 = loc(fused[#loc43, #loc44])
#loc200 = loc(fused[#loc47, #loc48])
#loc201 = loc(fused[#loc49, #loc50])
#loc202 = loc(fused[#loc51, #loc52])
#loc203 = loc(fused[#loc54, #loc53])
#loc204 = loc(fused[#loc55, #loc56])
#loc205 = loc(fused[#loc58, #loc56])
#loc206 = loc(fused[#loc60, #loc59])
#loc207 = loc(fused[#loc61, #loc62])
#loc208 = loc(fused[#loc64, #loc65, #loc66, #loc62])
#loc209 = loc(fused[#loc68, #loc69])
#loc210 = loc(fused[#loc70, #loc71])
#loc211 = loc(fused[#loc72, #loc69])
#loc212 = loc(fused[#loc73, #loc74])
#loc213 = loc(fused[#loc76, #loc77])
#loc214 = loc(fused[#loc75, #loc78])
#loc215 = loc(fused[#loc79, #loc80, #loc81, #loc74])
#loc216 = loc(fused[#loc86, #loc87])
#loc217 = loc(fused[#loc88, #loc89])
#loc218 = loc(fused[#loc90, #loc91])
#loc219 = loc(fused[#loc93, #loc92])
#loc220 = loc(fused[#loc94, #loc95])
#loc221 = loc(fused[#loc97, #loc95])
#loc222 = loc(fused[#loc99, #loc98])
#loc223 = loc(fused[#loc100, #loc101])
#loc224 = loc(fused[#loc103, #loc101])
#loc225 = loc(fused[#loc104, #loc105])
#loc226 = loc(fused[#loc106, #loc107])
#loc227 = loc(fused[#loc108, #loc105])
#loc228 = loc(fused[#loc109, #loc110])
#loc229 = loc(fused[#loc112, #loc113])
#loc230 = loc(fused[#loc111, #loc114])
#loc231 = loc(fused[#loc115, #loc116, #loc117, #loc110])
#loc232 = loc(fused[#loc123, #loc124])
#loc233 = loc(fused[#loc125, #loc126])
#loc234 = loc(fused[#loc127, #loc128])
#loc235 = loc(fused[#loc130, #loc129])
#loc236 = loc(fused[#loc131, #loc132])
#loc237 = loc(fused[#loc134, #loc135, #loc136, #loc132])
#loc238 = loc(fused[#loc140, #loc139])
#loc239 = loc(fused[#loc141, #loc142])
#loc240 = loc(fused[#loc144, #loc142])
#loc241 = loc(fused[#loc145, #loc146])
#loc242 = loc(fused[#loc147, #loc148])
#loc243 = loc(fused[#loc149, #loc146])
#loc244 = loc(fused[#loc153, #loc154])
#loc245 = loc(fused[#loc155, #loc156])
#loc246 = loc(fused[#loc157, #loc158])
#loc247 = loc(fused[#loc160, #loc159])
#loc248 = loc(fused[#loc161, #loc162])
#loc249 = loc(fused[#loc164, #loc162])
#loc250 = loc(fused[#loc166, #loc165])
#loc251 = loc(fused[#loc167, #loc168])
#loc252 = loc(fused[#loc170, #loc168])
#loc253 = loc(fused[#loc171, #loc172])
#loc254 = loc(fused[#loc173, #loc174])
#loc255 = loc(fused[#loc175, #loc172])
