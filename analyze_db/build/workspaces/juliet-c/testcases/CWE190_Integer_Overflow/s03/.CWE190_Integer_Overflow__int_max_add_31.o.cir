!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_add_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc81)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_add_31_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc83)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc84)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc85)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc86)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc13)
    cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc15)
    cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    cir.br ^bb1 loc(#loc89)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc6)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc8)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    cir.br ^bb2 loc(#loc90)
  ^bb2:  // pred: ^bb1
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc21)
    cir.store %10, %2 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    %11 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc22)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc23)
    cir.br ^bb3 loc(#loc20)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc18)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc4)
  } loc(#loc82)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_add_31_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc92)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc93)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    cir.return loc(#loc25)
  } loc(#loc91)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc95)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc96)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc97)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc98)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc40)
    cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    %5 = cir.const #cir.int<2> : !s32i loc(#loc42)
    cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    cir.br ^bb1 loc(#loc101)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc95)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc35)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    cir.br ^bb2 loc(#loc102)
  ^bb2:  // pred: ^bb1
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc48)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc48)
    cir.store %10, %2 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    %11 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc50)
    cir.br ^bb3 loc(#loc47)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc45)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc31)
  } loc(#loc94)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc103)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc53)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc105)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc106)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc107)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc108)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc64)
    cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc66)
    cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc110)
    cir.br ^bb1 loc(#loc111)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    cir.br ^bb2 loc(#loc112)
  ^bb2:  // pred: ^bb1
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc72)
    %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc73)
    %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc113)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc114)
  ^bb3:  // pred: ^bb2
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc77)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc61)
    %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc77)
    cir.store %13, %2 : !s32i, !cir.ptr<!s32i> loc(#loc107)
    %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc79)
    cir.br ^bb5 loc(#loc75)
  ^bb4:  // pred: ^bb2
    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc53)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    cir.br ^bb5 loc(#loc71)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc71)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc69)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc55)
  } loc(#loc104)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_add_31.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_add_31.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_add_31.c":38:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_add_31.c":30:9)
#loc6 = loc("CWE190_Integer_Overflow__int_max_add_31.c":30:24)
#loc7 = loc("CWE190_Integer_Overflow__int_max_add_31.c":31:9)
#loc8 = loc("CWE190_Integer_Overflow__int_max_add_31.c":31:20)
#loc9 = loc("CWE190_Integer_Overflow__int_max_add_31.c":34:13)
#loc10 = loc("CWE190_Integer_Overflow__int_max_add_31.c":34:33)
#loc11 = loc("CWE190_Integer_Overflow__int_max_add_31.c":24:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_add_31.c":24:9)
#loc13 = loc("CWE190_Integer_Overflow__int_max_add_31.c":26:12)
#loc14 = loc("CWE190_Integer_Overflow__int_max_add_31.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__int_max_add_31.c":28:12)
#loc16 = loc("CWE190_Integer_Overflow__int_max_add_31.c":28:5)
#loc17 = loc("CWE190_Integer_Overflow__int_max_add_31.c":29:5)
#loc18 = loc("CWE190_Integer_Overflow__int_max_add_31.c":37:5)
#loc19 = loc("CWE190_Integer_Overflow__int_max_add_31.c":32:9)
#loc20 = loc("CWE190_Integer_Overflow__int_max_add_31.c":36:9)
#loc21 = loc("CWE190_Integer_Overflow__int_max_add_31.c":34:26)
#loc22 = loc("CWE190_Integer_Overflow__int_max_add_31.c":35:26)
#loc23 = loc("CWE190_Integer_Overflow__int_max_add_31.c":35:13)
#loc24 = loc("CWE190_Integer_Overflow__int_max_add_31.c":87:1)
#loc25 = loc("CWE190_Integer_Overflow__int_max_add_31.c":91:1)
#loc26 = loc("CWE190_Integer_Overflow__int_max_add_31.c":89:5)
#loc27 = loc("CWE190_Integer_Overflow__int_max_add_31.c":89:13)
#loc28 = loc("CWE190_Integer_Overflow__int_max_add_31.c":90:5)
#loc29 = loc("CWE190_Integer_Overflow__int_max_add_31.c":90:13)
#loc30 = loc("CWE190_Integer_Overflow__int_max_add_31.c":45:1)
#loc31 = loc("CWE190_Integer_Overflow__int_max_add_31.c":61:1)
#loc32 = loc("CWE190_Integer_Overflow__int_max_add_31.c":53:9)
#loc33 = loc("CWE190_Integer_Overflow__int_max_add_31.c":53:24)
#loc34 = loc("CWE190_Integer_Overflow__int_max_add_31.c":54:9)
#loc35 = loc("CWE190_Integer_Overflow__int_max_add_31.c":54:20)
#loc36 = loc("CWE190_Integer_Overflow__int_max_add_31.c":57:13)
#loc37 = loc("CWE190_Integer_Overflow__int_max_add_31.c":57:33)
#loc38 = loc("CWE190_Integer_Overflow__int_max_add_31.c":47:5)
#loc39 = loc("CWE190_Integer_Overflow__int_max_add_31.c":47:9)
#loc40 = loc("CWE190_Integer_Overflow__int_max_add_31.c":49:12)
#loc41 = loc("CWE190_Integer_Overflow__int_max_add_31.c":49:5)
#loc42 = loc("CWE190_Integer_Overflow__int_max_add_31.c":51:12)
#loc43 = loc("CWE190_Integer_Overflow__int_max_add_31.c":51:5)
#loc44 = loc("CWE190_Integer_Overflow__int_max_add_31.c":52:5)
#loc45 = loc("CWE190_Integer_Overflow__int_max_add_31.c":60:5)
#loc46 = loc("CWE190_Integer_Overflow__int_max_add_31.c":55:9)
#loc47 = loc("CWE190_Integer_Overflow__int_max_add_31.c":59:9)
#loc48 = loc("CWE190_Integer_Overflow__int_max_add_31.c":57:26)
#loc49 = loc("CWE190_Integer_Overflow__int_max_add_31.c":58:26)
#loc50 = loc("CWE190_Integer_Overflow__int_max_add_31.c":58:13)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc53 = loc("CWE190_Integer_Overflow__int_max_add_31.c":82:23)
#loc54 = loc("CWE190_Integer_Overflow__int_max_add_31.c":64:1)
#loc55 = loc("CWE190_Integer_Overflow__int_max_add_31.c":85:1)
#loc56 = loc("CWE190_Integer_Overflow__int_max_add_31.c":72:9)
#loc57 = loc("CWE190_Integer_Overflow__int_max_add_31.c":72:24)
#loc58 = loc("CWE190_Integer_Overflow__int_max_add_31.c":73:9)
#loc59 = loc("CWE190_Integer_Overflow__int_max_add_31.c":73:20)
#loc60 = loc("CWE190_Integer_Overflow__int_max_add_31.c":77:13)
#loc61 = loc("CWE190_Integer_Overflow__int_max_add_31.c":77:33)
#loc62 = loc("CWE190_Integer_Overflow__int_max_add_31.c":66:5)
#loc63 = loc("CWE190_Integer_Overflow__int_max_add_31.c":66:9)
#loc64 = loc("CWE190_Integer_Overflow__int_max_add_31.c":68:12)
#loc65 = loc("CWE190_Integer_Overflow__int_max_add_31.c":68:5)
#loc66 = loc("CWE190_Integer_Overflow__int_max_add_31.c":70:12)
#loc67 = loc("CWE190_Integer_Overflow__int_max_add_31.c":70:5)
#loc68 = loc("CWE190_Integer_Overflow__int_max_add_31.c":71:5)
#loc69 = loc("CWE190_Integer_Overflow__int_max_add_31.c":84:5)
#loc70 = loc("CWE190_Integer_Overflow__int_max_add_31.c":75:9)
#loc71 = loc("CWE190_Integer_Overflow__int_max_add_31.c":83:9)
#loc72 = loc("CWE190_Integer_Overflow__int_max_add_31.c":75:13)
#loc73 = loc("CWE190_Integer_Overflow__int_max_add_31.c":75:20)
#loc74 = loc("CWE190_Integer_Overflow__int_max_add_31.c":76:9)
#loc75 = loc("CWE190_Integer_Overflow__int_max_add_31.c":79:9)
#loc76 = loc("CWE190_Integer_Overflow__int_max_add_31.c":81:9)
#loc77 = loc("CWE190_Integer_Overflow__int_max_add_31.c":77:26)
#loc78 = loc("CWE190_Integer_Overflow__int_max_add_31.c":78:26)
#loc79 = loc("CWE190_Integer_Overflow__int_max_add_31.c":78:13)
#loc80 = loc("CWE190_Integer_Overflow__int_max_add_31.c":82:13)
#loc81 = loc(fused[#loc1, #loc2])
#loc82 = loc(fused[#loc3, #loc4])
#loc83 = loc(fused[#loc5, #loc6])
#loc84 = loc(fused[#loc7, #loc8])
#loc85 = loc(fused[#loc9, #loc10])
#loc86 = loc(fused[#loc11, #loc12])
#loc87 = loc(fused[#loc14, #loc13])
#loc88 = loc(fused[#loc16, #loc15])
#loc89 = loc(fused[#loc17, #loc18])
#loc90 = loc(fused[#loc19, #loc20])
#loc91 = loc(fused[#loc24, #loc25])
#loc92 = loc(fused[#loc26, #loc27])
#loc93 = loc(fused[#loc28, #loc29])
#loc94 = loc(fused[#loc30, #loc31])
#loc95 = loc(fused[#loc32, #loc33])
#loc96 = loc(fused[#loc34, #loc35])
#loc97 = loc(fused[#loc36, #loc37])
#loc98 = loc(fused[#loc38, #loc39])
#loc99 = loc(fused[#loc41, #loc40])
#loc100 = loc(fused[#loc43, #loc42])
#loc101 = loc(fused[#loc44, #loc45])
#loc102 = loc(fused[#loc46, #loc47])
#loc103 = loc(fused[#loc51, #loc52])
#loc104 = loc(fused[#loc54, #loc55])
#loc105 = loc(fused[#loc56, #loc57])
#loc106 = loc(fused[#loc58, #loc59])
#loc107 = loc(fused[#loc60, #loc61])
#loc108 = loc(fused[#loc62, #loc63])
#loc109 = loc(fused[#loc65, #loc64])
#loc110 = loc(fused[#loc67, #loc66])
#loc111 = loc(fused[#loc68, #loc69])
#loc112 = loc(fused[#loc70, #loc71])
#loc113 = loc(fused[#loc72, #loc73])
#loc114 = loc(fused[#loc74, #loc75, #loc76, #loc71])
