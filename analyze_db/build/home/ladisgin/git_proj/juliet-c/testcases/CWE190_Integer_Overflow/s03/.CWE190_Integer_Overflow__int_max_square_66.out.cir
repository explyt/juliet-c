!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":24:58)
#loc6 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":24:72)
#loc21 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":40:62)
#loc22 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":40:76)
#loc41 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":51:62)
#loc42 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":51:76)
#loc54 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":55:24)
#true = #cir.bool<true> : !cir.bool
#loc69 = loc(fused[#loc5, #loc6])
#loc74 = loc(fused[#loc21, #loc22])
#loc80 = loc(fused[#loc41, #loc42])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_66b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc67)
  cir.func @CWE190_Integer_Overflow__int_max_square_66b_badSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc70)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc69)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc71)
    cir.store %arg0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc11)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc12)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc13)
    %5 = cir.ptr_stride(%3 : !cir.ptr<!s32i>, %4 : !s32i), !cir.ptr<!s32i> loc(#loc10)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc12)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    cir.br ^bb1 loc(#loc72)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc8)
    %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc16)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc70)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc18)
    cir.br ^bb2 loc(#loc15)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc4)
  } loc(#loc68)
  cir.func @CWE190_Integer_Overflow__int_max_square_66b_goodG2BSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc21, #loc22])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc75)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc74)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc76)
    cir.store %arg0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc27)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc28)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc29)
    %5 = cir.ptr_stride(%3 : !cir.ptr<!s32i>, %4 : !s32i), !cir.ptr<!s32i> loc(#loc26)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc76)
    cir.br ^bb1 loc(#loc77)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc32)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc75)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc34)
    cir.br ^bb2 loc(#loc31)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc20)
  } loc(#loc73)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc35)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc38)
  cir.func @CWE190_Integer_Overflow__int_max_square_66b_goodB2GSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc41, #loc42])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc81)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc80)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc82)
    cir.store %arg0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc47)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc48)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc49)
    %5 = cir.ptr_stride(%3 : !cir.ptr<!s32i>, %4 : !s32i), !cir.ptr<!s32i> loc(#loc46)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc48)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    cir.br ^bb1 loc(#loc83)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc53)
    %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc53)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc53)
    %12 = cir.cmp(gt, %7, %11) : !s32i, !cir.bool loc(#loc84)
    cir.brcond %12 ^bb2, ^bb7 loc(#loc54)
  ^bb2:  // pred: ^bb1
    %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    %14 = cir.abs %13 poison : !s32i loc(#loc56)
    %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc56)
    %16 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc57)
    %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc58)
    %18 = cir.cast(int_to_float, %17 : !s32i), !cir.double loc(#loc58)
    %19 = cir.call @sqrt(%18) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc57)
    %20 = cir.cast(float_to_int, %19 : !cir.double), !s64i loc(#loc57)
    %21 = cir.cmp(lt, %15, %20) : !s64i, !cir.bool loc(#loc85)
    cir.brcond %21 ^bb3, ^bb4 loc(#loc54)
  ^bb3:  // pred: ^bb2
    %22 = cir.const #true loc(#loc54)
    cir.br ^bb5(%22 : !cir.bool) loc(#loc54)
  ^bb4:  // pred: ^bb2
    %23 = cir.const #false loc(#loc54)
    cir.br ^bb5(%23 : !cir.bool) loc(#loc54)
  ^bb5(%24: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_66b.c":55:24)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc54)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8(%24 : !cir.bool) loc(#loc54)
  ^bb7:  // pred: ^bb1
    %25 = cir.const #false loc(#loc54)
    cir.br ^bb8(%25 : !cir.bool) loc(#loc54)
  ^bb8(%26: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_66b.c":55:24)):  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc54)
  ^bb9:  // pred: ^bb8
    cir.brcond %26 ^bb10, ^bb11 loc(#loc86)
  ^bb10:  // pred: ^bb9
    %27 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc63)
    %28 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    %29 = cir.binop(mul, %27, %28) nsw : !s32i loc(#loc63)
    cir.store %29, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    %30 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc65)
    cir.br ^bb12 loc(#loc61)
  ^bb11:  // pred: ^bb9
    %31 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc38)
    %32 = cir.cast(array_to_ptrdecay, %31 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    cir.br ^bb12 loc(#loc51)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc51)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc40)
  } loc(#loc79)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_66b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":33:1)
#loc7 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":30:9)
#loc8 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":30:29)
#loc9 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":27:5)
#loc10 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":27:27)
#loc11 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":25:1)
#loc12 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":27:16)
#loc13 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":27:26)
#loc14 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":28:5)
#loc15 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":32:5)
#loc16 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":30:22)
#loc17 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":31:22)
#loc18 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":31:9)
#loc19 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":40:1)
#loc20 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":48:1)
#loc23 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":45:9)
#loc24 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":45:29)
#loc25 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":42:5)
#loc26 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":42:27)
#loc27 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":41:1)
#loc28 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":42:16)
#loc29 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":42:26)
#loc30 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":43:5)
#loc31 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":47:5)
#loc32 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":45:22)
#loc33 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":46:22)
#loc34 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":46:9)
#loc35 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc38 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":62:19)
#loc39 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":51:1)
#loc40 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":64:1)
#loc43 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":57:9)
#loc44 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":57:29)
#loc45 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":53:5)
#loc46 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":53:27)
#loc47 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":52:1)
#loc48 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":53:16)
#loc49 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":53:26)
#loc50 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":55:5)
#loc51 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":63:5)
#loc52 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":55:9)
#loc53 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":55:16)
#loc55 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":55:31)
#loc56 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":55:27)
#loc57 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":55:45)
#loc58 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":55:58)
#loc59 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":55:65)
#loc60 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":56:5)
#loc61 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":59:5)
#loc62 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":61:5)
#loc63 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":57:22)
#loc64 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":58:22)
#loc65 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":58:9)
#loc66 = loc("CWE190_Integer_Overflow__int_max_square_66b.c":62:9)
#loc67 = loc(fused[#loc1, #loc2])
#loc68 = loc(fused[#loc3, #loc4])
#loc70 = loc(fused[#loc7, #loc8])
#loc71 = loc(fused[#loc9, #loc10])
#loc72 = loc(fused[#loc14, #loc15])
#loc73 = loc(fused[#loc19, #loc20])
#loc75 = loc(fused[#loc23, #loc24])
#loc76 = loc(fused[#loc25, #loc26])
#loc77 = loc(fused[#loc30, #loc31])
#loc78 = loc(fused[#loc36, #loc37])
#loc79 = loc(fused[#loc39, #loc40])
#loc81 = loc(fused[#loc43, #loc44])
#loc82 = loc(fused[#loc45, #loc46])
#loc83 = loc(fused[#loc50, #loc51])
#loc84 = loc(fused[#loc52, #loc53])
#loc85 = loc(fused[#loc56, #loc59])
#loc86 = loc(fused[#loc60, #loc61, #loc62, #loc51])
