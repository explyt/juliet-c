!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":22:22)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":22:26)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":111:26)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":111:30)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":68:26)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":68:30)
#true = #cir.bool<true> : !cir.bool
#loc272 = loc(fused[#loc3, #loc4])
#loc312 = loc(fused[#loc102, #loc103])
#loc345 = loc(fused[#loc190, #loc191])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func internal private  @badSource(%arg0: !s32i loc(fused[#loc3, #loc4])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc272)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc2)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc5)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc6)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc273)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc8)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc274)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc274)
    cir.return %4 : !s32i loc(#loc274)
  } loc(#loc271)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc275)
  cir.func private  @exit(!s32i) extra(#fn_attr1) loc(#loc276)
  cir.func private  @printIntLine(!s32i) loc(#loc277)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc278)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc18)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr1) loc(#loc279)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc281)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc26)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc282)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    %4 = cir.call @badSource(%3) : (!s32i) -> !s32i loc(#loc29)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc283)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc285)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc286)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc38)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc39)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc39)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc287)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc288)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc38)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc289)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc286)
      cir.scope {
        %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc45)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc45)
        %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !s32i loc(#loc291)
        %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc46)
        cir.if %21 {
          %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc48)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc49)
          %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc50)
          cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr1) loc(#loc48)
        } loc(#loc292)
      } loc(#loc290)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc53)
        cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc294)
        cir.for : cond {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc55)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc56)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc295)
          %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc57)
          cir.condition(%21) loc(#loc57)
        } body {
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc59)
            %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
            %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc61)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc62)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc297)
          } loc(#loc296)
          cir.yield loc(#loc52)
        } step {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc63)
          %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc64)
          cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc298)
          cir.yield loc(#loc293)
        } loc(#loc293)
      } loc(#loc293)
      cir.scope {
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc67)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc68)
        %19 = cir.cmp(ge, %17, %18) : !s32i, !s32i loc(#loc300)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc69)
        cir.if %20 {
          %21 = cir.const #cir.int<1> : !s32i loc(#loc73)
          %22 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc74)
          %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
          %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc76)
          cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc302)
          cir.scope {
            %25 = cir.const #cir.int<0> : !s32i loc(#loc79)
            cir.store %25, %5 : !s32i, !cir.ptr<!s32i> loc(#loc304)
            cir.for : cond {
              %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc81)
              %27 = cir.const #cir.int<10> : !s32i loc(#loc82)
              %28 = cir.cmp(lt, %26, %27) : !s32i, !s32i loc(#loc305)
              %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc83)
              cir.condition(%29) loc(#loc83)
            } body {
              cir.scope {
                %26 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc85)
                %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc86)
                %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc87)
                %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc85)
                cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc88)
              } loc(#loc306)
              cir.yield loc(#loc78)
            } step {
              %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc89)
              %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc90)
              cir.store %27, %5 : !s32i, !cir.ptr<!s32i> loc(#loc307)
              cir.yield loc(#loc303)
            } loc(#loc303)
          } loc(#loc303)
        } else {
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc18)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc18)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc91)
        } loc(#loc301)
      } loc(#loc299)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc92)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc93)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc93)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc92)
    } loc(#loc284)
    cir.return loc(#loc22)
  } loc(#loc280)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc309)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc96)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc310)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc98)
    cir.return loc(#loc95)
  } loc(#loc308)
  cir.func internal private  @goodB2GSource(%arg0: !s32i loc(fused[#loc102, #loc103])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc312)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc101)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc105)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc313)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc107)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc314)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc314)
    cir.return %4 : !s32i loc(#loc314)
  } loc(#loc311)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc109)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc316)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc114)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc115)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc317)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    %4 = cir.call @goodB2GSource(%3) : (!s32i) -> !s32i loc(#loc118)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc318)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc320)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc321)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc127)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc128)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc128)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc322)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc323)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc127)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc324)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc321)
      cir.scope {
        %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc133)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc134)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc134)
        %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !s32i loc(#loc326)
        %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc135)
        cir.if %21 {
          %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc137)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc138)
          %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc139)
          cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr1) loc(#loc137)
        } loc(#loc327)
      } loc(#loc325)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc142)
        cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc329)
        cir.for : cond {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc144)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc145)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc330)
          %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc146)
          cir.condition(%21) loc(#loc146)
        } body {
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc148)
            %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc149)
            %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc150)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc151)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc332)
          } loc(#loc331)
          cir.yield loc(#loc141)
        } step {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc152)
          %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc153)
          cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc333)
          cir.yield loc(#loc328)
        } loc(#loc328)
      } loc(#loc328)
      cir.scope {
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc156)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc157)
        %19 = cir.cmp(ge, %17, %18) : !s32i, !s32i loc(#loc335)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc158)
        %21 = cir.ternary(%20, true {
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc160)
          %23 = cir.const #cir.int<10> : !s32i loc(#loc161)
          %24 = cir.cmp(lt, %22, %23) : !s32i, !s32i loc(#loc336)
          %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc163)
          %26 = cir.ternary(%25, true {
            %27 = cir.const #true loc(#loc159)
            cir.yield %27 : !cir.bool loc(#loc159)
          }, false {
            %27 = cir.const #false loc(#loc159)
            cir.yield %27 : !cir.bool loc(#loc159)
          }) : (!cir.bool) -> !cir.bool loc(#loc159)
          cir.yield %26 : !cir.bool loc(#loc159)
        }, false {
          %22 = cir.const #false loc(#loc159)
          cir.yield %22 : !cir.bool loc(#loc159)
        }) : (!cir.bool) -> !cir.bool loc(#loc159)
        cir.if %21 {
          %22 = cir.const #cir.int<1> : !s32i loc(#loc167)
          %23 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc168)
          %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc169)
          %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc170)
          cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc338)
          cir.scope {
            %26 = cir.const #cir.int<0> : !s32i loc(#loc173)
            cir.store %26, %5 : !s32i, !cir.ptr<!s32i> loc(#loc340)
            cir.for : cond {
              %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc175)
              %28 = cir.const #cir.int<10> : !s32i loc(#loc176)
              %29 = cir.cmp(lt, %27, %28) : !s32i, !s32i loc(#loc341)
              %30 = cir.cast(int_to_bool, %29 : !s32i), !cir.bool loc(#loc177)
              cir.condition(%30) loc(#loc177)
            } body {
              cir.scope {
                %27 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc179)
                %28 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc180)
                %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc181)
                %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc179)
                cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc182)
              } loc(#loc342)
              cir.yield loc(#loc172)
            } step {
              %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc183)
              %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc184)
              cir.store %28, %5 : !s32i, !cir.ptr<!s32i> loc(#loc343)
              cir.yield loc(#loc339)
            } loc(#loc339)
          } loc(#loc339)
        } else {
          %22 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc109)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc109)
          cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc185)
        } loc(#loc337)
      } loc(#loc334)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc186)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc187)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc187)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc186)
    } loc(#loc319)
    cir.return loc(#loc111)
  } loc(#loc315)
  cir.func internal private  @goodG2BSource(%arg0: !s32i loc(fused[#loc190, #loc191])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc345)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc189)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    %2 = cir.const #cir.int<7> : !s32i loc(#loc193)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc346)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc195)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc347)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc347)
    cir.return %4 : !s32i loc(#loc347)
  } loc(#loc344)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc349)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc201)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc202)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc350)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc204)
    %4 = cir.call @goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc205)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc351)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc353)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc354)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc214)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc215)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc215)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc355)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc356)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc214)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc357)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc354)
      cir.scope {
        %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc220)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc221)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc221)
        %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !s32i loc(#loc359)
        %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc222)
        cir.if %21 {
          %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc224)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc225)
          %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc226)
          cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr1) loc(#loc224)
        } loc(#loc360)
      } loc(#loc358)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc229)
        cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc362)
        cir.for : cond {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc231)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc232)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc363)
          %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc233)
          cir.condition(%21) loc(#loc233)
        } body {
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc235)
            %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc236)
            %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc237)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc238)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc365)
          } loc(#loc364)
          cir.yield loc(#loc228)
        } step {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc239)
          %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc240)
          cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc366)
          cir.yield loc(#loc361)
        } loc(#loc361)
      } loc(#loc361)
      cir.scope {
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc243)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc244)
        %19 = cir.cmp(ge, %17, %18) : !s32i, !s32i loc(#loc368)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc245)
        cir.if %20 {
          %21 = cir.const #cir.int<1> : !s32i loc(#loc249)
          %22 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc250)
          %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc251)
          %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc252)
          cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc370)
          cir.scope {
            %25 = cir.const #cir.int<0> : !s32i loc(#loc255)
            cir.store %25, %5 : !s32i, !cir.ptr<!s32i> loc(#loc372)
            cir.for : cond {
              %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc257)
              %27 = cir.const #cir.int<10> : !s32i loc(#loc258)
              %28 = cir.cmp(lt, %26, %27) : !s32i, !s32i loc(#loc373)
              %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc259)
              cir.condition(%29) loc(#loc259)
            } body {
              cir.scope {
                %26 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc261)
                %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc262)
                %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc263)
                %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc261)
                cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc264)
              } loc(#loc374)
              cir.yield loc(#loc254)
            } step {
              %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc265)
              %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc266)
              cir.store %27, %5 : !s32i, !cir.ptr<!s32i> loc(#loc375)
              cir.yield loc(#loc371)
            } loc(#loc371)
          } loc(#loc371)
        } else {
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc267)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc267)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc268)
        } loc(#loc369)
      } loc(#loc367)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc269)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc270)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc270)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc269)
    } loc(#loc352)
    cir.return loc(#loc198)
  } loc(#loc348)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":22:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":27:1)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":23:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":25:12)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":25:5)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":26:12)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":26:5)
#loc10 = loc("/usr/include/stdlib.h":672:1)
#loc11 = loc("/usr/include/stdlib.h":672:45)
#loc12 = loc("/usr/include/stdlib.h":756:1)
#loc13 = loc("/usr/include/stdlib.h":756:70)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":57:23)
#loc19 = loc("/usr/include/stdlib.h":687:1)
#loc20 = loc("/usr/include/stdlib.h":687:32)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":29:1)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":61:1)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":31:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":31:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":33:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":33:12)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":33:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":34:22)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":34:12)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":34:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":34:26)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":35:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":60:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":36:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":36:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":37:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":37:54)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":37:31)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":37:38)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":37:43)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":37:53)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":38:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":38:39)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":38:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":38:23)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":38:20)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":38:29)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":38:30)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":38:36)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":38:35)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":40:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":43:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":40:18)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":40:14)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":40:21)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":40:25)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":40:23)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":41:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":42:25)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":42:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":42:20)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":42:21)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":40:30)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":40:29)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":46:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":58:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":46:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":46:21)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":46:18)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":47:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":54:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":56:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":48:28)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":48:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":48:20)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":48:24)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":50:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":53:13)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":50:21)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":50:17)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":50:24)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":50:28)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":50:26)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":51:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":52:30)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":52:37)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":52:38)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":52:17)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":50:33)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":50:32)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":57:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":59:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":59:14)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":151:1)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":155:1)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":153:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":153:13)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":154:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":154:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":111:1)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":116:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":112:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":114:12)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":114:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":115:12)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":115:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":145:23)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":118:1)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":149:1)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":120:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":120:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":122:13)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":122:12)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":122:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":123:26)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":123:12)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":123:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":123:30)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":124:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":148:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":125:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":125:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":126:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":126:54)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":126:31)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":126:38)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":126:43)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":126:53)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":127:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":127:39)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":127:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":127:23)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":127:20)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":127:29)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":127:30)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":127:36)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":127:35)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":129:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":132:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":129:18)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":129:14)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":129:21)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":129:25)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":129:23)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":130:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":131:25)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":131:13)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":131:20)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":131:21)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":129:30)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":129:29)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":134:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":146:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":134:13)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":134:21)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":134:18)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":134:23)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":134:26)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":134:34)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":134:36)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":134:31)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":135:9)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":142:9)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":144:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":136:28)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":136:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":136:20)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":136:24)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":138:13)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":141:13)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":138:21)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":138:17)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":138:24)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":138:28)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":138:26)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":139:13)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":140:30)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":140:37)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":140:38)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":140:17)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":138:33)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":138:32)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":145:13)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":147:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":147:14)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":68:1)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":74:1)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":69:1)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":72:12)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":72:5)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":73:12)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":73:5)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":76:1)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":108:1)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":78:5)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":78:9)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":80:13)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":80:12)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":80:5)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":81:26)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":81:12)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":81:5)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":81:30)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":82:5)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":107:5)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":83:9)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":83:13)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":84:9)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":84:54)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":84:31)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":84:38)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":84:43)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":84:53)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":85:9)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":85:39)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":85:13)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":85:23)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":85:20)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":85:29)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":85:30)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":85:36)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":85:35)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":87:9)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":90:9)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":87:18)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":87:14)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":87:21)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":87:25)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":87:23)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":88:9)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":89:25)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":89:13)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":89:20)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":89:21)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":87:30)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":87:29)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":93:9)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":105:9)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":93:13)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":93:21)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":93:18)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":94:9)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":101:9)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":103:9)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":95:28)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":95:13)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":95:20)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":95:24)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":97:13)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":100:13)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":97:21)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":97:17)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":97:24)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":97:28)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":97:26)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":98:13)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":99:30)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":99:37)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":99:38)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":99:17)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":97:33)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":97:32)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":104:23)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":104:13)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":106:9)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c":106:14)
#loc271 = loc(fused[#loc1, #loc2])
#loc273 = loc(fused[#loc7, #loc6])
#loc274 = loc(fused[#loc9, #loc8])
#loc275 = loc(fused[#loc10, #loc11])
#loc276 = loc(fused[#loc12, #loc13])
#loc277 = loc(fused[#loc14, #loc15])
#loc278 = loc(fused[#loc16, #loc17])
#loc279 = loc(fused[#loc19, #loc20])
#loc280 = loc(fused[#loc21, #loc22])
#loc281 = loc(fused[#loc23, #loc24])
#loc282 = loc(fused[#loc27, #loc25])
#loc283 = loc(fused[#loc30, #loc31])
#loc284 = loc(fused[#loc32, #loc33])
#loc285 = loc(fused[#loc34, #loc35])
#loc286 = loc(fused[#loc36, #loc37])
#loc287 = loc(fused[#loc40, #loc41])
#loc288 = loc(fused[#loc39, #loc41])
#loc289 = loc(fused[#loc38, #loc37])
#loc290 = loc(fused[#loc42, #loc43])
#loc291 = loc(fused[#loc44, #loc45])
#loc292 = loc(fused[#loc47, #loc43])
#loc293 = loc(fused[#loc51, #loc52])
#loc294 = loc(fused[#loc54, #loc53])
#loc295 = loc(fused[#loc55, #loc56])
#loc296 = loc(fused[#loc58, #loc52])
#loc297 = loc(fused[#loc60, #loc59])
#loc298 = loc(fused[#loc64, #loc63])
#loc299 = loc(fused[#loc65, #loc66])
#loc300 = loc(fused[#loc67, #loc68])
#loc301 = loc(fused[#loc70, #loc71, #loc72, #loc66])
#loc302 = loc(fused[#loc74, #loc73])
#loc303 = loc(fused[#loc77, #loc78])
#loc304 = loc(fused[#loc80, #loc79])
#loc305 = loc(fused[#loc81, #loc82])
#loc306 = loc(fused[#loc84, #loc78])
#loc307 = loc(fused[#loc90, #loc89])
#loc308 = loc(fused[#loc94, #loc95])
#loc309 = loc(fused[#loc96, #loc97])
#loc310 = loc(fused[#loc98, #loc99])
#loc311 = loc(fused[#loc100, #loc101])
#loc313 = loc(fused[#loc106, #loc105])
#loc314 = loc(fused[#loc108, #loc107])
#loc315 = loc(fused[#loc110, #loc111])
#loc316 = loc(fused[#loc112, #loc113])
#loc317 = loc(fused[#loc116, #loc114])
#loc318 = loc(fused[#loc119, #loc120])
#loc319 = loc(fused[#loc121, #loc122])
#loc320 = loc(fused[#loc123, #loc124])
#loc321 = loc(fused[#loc125, #loc126])
#loc322 = loc(fused[#loc129, #loc130])
#loc323 = loc(fused[#loc128, #loc130])
#loc324 = loc(fused[#loc127, #loc126])
#loc325 = loc(fused[#loc131, #loc132])
#loc326 = loc(fused[#loc133, #loc134])
#loc327 = loc(fused[#loc136, #loc132])
#loc328 = loc(fused[#loc140, #loc141])
#loc329 = loc(fused[#loc143, #loc142])
#loc330 = loc(fused[#loc144, #loc145])
#loc331 = loc(fused[#loc147, #loc141])
#loc332 = loc(fused[#loc149, #loc148])
#loc333 = loc(fused[#loc153, #loc152])
#loc334 = loc(fused[#loc154, #loc155])
#loc335 = loc(fused[#loc156, #loc157])
#loc336 = loc(fused[#loc160, #loc162])
#loc337 = loc(fused[#loc164, #loc165, #loc166, #loc155])
#loc338 = loc(fused[#loc168, #loc167])
#loc339 = loc(fused[#loc171, #loc172])
#loc340 = loc(fused[#loc174, #loc173])
#loc341 = loc(fused[#loc175, #loc176])
#loc342 = loc(fused[#loc178, #loc172])
#loc343 = loc(fused[#loc184, #loc183])
#loc344 = loc(fused[#loc188, #loc189])
#loc346 = loc(fused[#loc194, #loc193])
#loc347 = loc(fused[#loc196, #loc195])
#loc348 = loc(fused[#loc197, #loc198])
#loc349 = loc(fused[#loc199, #loc200])
#loc350 = loc(fused[#loc203, #loc201])
#loc351 = loc(fused[#loc206, #loc207])
#loc352 = loc(fused[#loc208, #loc209])
#loc353 = loc(fused[#loc210, #loc211])
#loc354 = loc(fused[#loc212, #loc213])
#loc355 = loc(fused[#loc216, #loc217])
#loc356 = loc(fused[#loc215, #loc217])
#loc357 = loc(fused[#loc214, #loc213])
#loc358 = loc(fused[#loc218, #loc219])
#loc359 = loc(fused[#loc220, #loc221])
#loc360 = loc(fused[#loc223, #loc219])
#loc361 = loc(fused[#loc227, #loc228])
#loc362 = loc(fused[#loc230, #loc229])
#loc363 = loc(fused[#loc231, #loc232])
#loc364 = loc(fused[#loc234, #loc228])
#loc365 = loc(fused[#loc236, #loc235])
#loc366 = loc(fused[#loc240, #loc239])
#loc367 = loc(fused[#loc241, #loc242])
#loc368 = loc(fused[#loc243, #loc244])
#loc369 = loc(fused[#loc246, #loc247, #loc248, #loc242])
#loc370 = loc(fused[#loc250, #loc249])
#loc371 = loc(fused[#loc253, #loc254])
#loc372 = loc(fused[#loc256, #loc255])
#loc373 = loc(fused[#loc257, #loc258])
#loc374 = loc(fused[#loc260, #loc254])
#loc375 = loc(fused[#loc266, #loc265])
