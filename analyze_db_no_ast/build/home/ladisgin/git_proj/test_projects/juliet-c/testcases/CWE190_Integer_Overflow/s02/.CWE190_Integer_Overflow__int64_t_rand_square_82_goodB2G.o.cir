!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp":28:63)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp":28:70)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp":28:78)
#loc35 = loc(fused[#loc12, #loc13])
!ty_CWE190_Integer_Overflow__int64_t_rand_square_823A3ACWE190_Integer_Overflow__int64_t_rand_square_82_base = !cir.struct<class "CWE190_Integer_Overflow__int64_t_rand_square_82::CWE190_Integer_Overflow__int64_t_rand_square_82_base" {!cir.ptr<!cir.ptr<!cir.func<!u32i ()>>>} #cir.record.decl.ast>
!ty_CWE190_Integer_Overflow__int64_t_rand_square_823A3ACWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G = !cir.struct<class "CWE190_Integer_Overflow__int64_t_rand_square_82::CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G" {!ty_CWE190_Integer_Overflow__int64_t_rand_square_823A3ACWE190_Integer_Overflow__int64_t_rand_square_82_base} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @imaxabs(!s64i) -> !s64i extra(#fn_attr) loc(#loc31)
  cir.func private  @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc3)
  cir.func private  @printLongLongLine(!s64i) loc(#loc32)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc33)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc8)
  cir.func  @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_8255CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G6actionEl(%arg0: !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_823A3ACWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G> loc("CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp":28:63), %arg1: !s64i loc(fused[#loc12, #loc13])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_823A3ACWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_823A3ACWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G>>, ["this", init] {alignment = 8 : i64} loc(#loc11)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc35)
    cir.store %arg0, %0 : !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_823A3ACWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_823A3ACWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G>> loc(#loc14)
    cir.store %arg1, %1 : !s64i, !cir.ptr<!s64i> loc(#loc14)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_823A3ACWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G>>, !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_square_823A3ACWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G> loc(#loc11)
    cir.scope {
      %3 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc17)
      %4 = cir.call @imaxabs(%3) : (!s64i) -> !s64i extra(#fn_attr) loc(#loc18)
      %5 = cir.cast(int_to_float, %4 : !s64i), !cir.long_double<!cir.f80> loc(#loc18)
      %6 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc19)
      %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc20)
      %8 = cir.cast(int_to_float, %7 : !s64i), !cir.long_double<!cir.f80> loc(#loc20)
      %9 = cir.call @sqrtl(%8) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc19)
      %10 = cir.cmp(le, %5, %9) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc37)
      cir.if %10 {
        %11 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc39)
        %12 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc27)
        %13 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc26)
        %14 = cir.binop(mul, %12, %13) nsw : !s64i loc(#loc27)
        cir.store %14, %11 : !s64i, !cir.ptr<!s64i> loc(#loc39)
        %15 = cir.load %11 : !cir.ptr<!s64i>, !s64i loc(#loc28)
        cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc29)
      } else {
        %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc8)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc8)
        cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc30)
      } loc(#loc38)
    } loc(#loc36)
    cir.return loc(#loc10)
  } loc(#loc34)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp":0:0)
#loc1 = loc("/usr/include/inttypes.h":351:1)
#loc2 = loc("/usr/include/inttypes.h":351:74)
#loc3 = loc("/usr/include/bits/mathcalls.h":143:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp":38:19)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp":28:1)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp":40:1)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp":29:1)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp":31:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp":39:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp":31:27)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp":31:9)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp":31:36)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp":31:42)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp":31:51)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp":32:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp":35:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp":37:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp":33:9)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp":33:33)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp":33:26)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp":34:27)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp":34:9)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_square_82_goodB2G.cpp":38:9)
#loc31 = loc(fused[#loc1, #loc2])
#loc32 = loc(fused[#loc4, #loc5])
#loc33 = loc(fused[#loc6, #loc7])
#loc34 = loc(fused[#loc9, #loc10])
#loc36 = loc(fused[#loc15, #loc16])
#loc37 = loc(fused[#loc18, #loc21])
#loc38 = loc(fused[#loc22, #loc23, #loc24, #loc16])
#loc39 = loc(fused[#loc25, #loc26])
