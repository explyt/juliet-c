!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":22:21)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":22:25)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":95:25)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":95:29)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":60:25)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":60:29)
#true = #cir.bool<true> : !cir.bool
#loc167 = loc(fused[#loc13, #loc14])
#loc187 = loc(fused[#loc66, #loc67])
#loc205 = loc(fused[#loc117, #loc118])
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc162)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc163)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc164)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc165)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc10)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc13, #loc14])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc167)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc15)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc169)
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc170)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc170)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc170)
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc25)
        %6 = cir.cmp(ge, %4, %5) : !s32i, !cir.bool loc(#loc172)
        cir.if %6 {
          %7 = cir.const #cir.int<1> : !s32i loc(#loc29)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
          %9 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc31)
          %10 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc31)
          cir.store %7, %10 : !s32i, !cir.ptr<!s32i> loc(#loc174)
          cir.scope {
            %11 = cir.const #cir.int<0> : !s32i loc(#loc34)
            cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc176)
            cir.for : cond {
              %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc36)
              %13 = cir.const #cir.int<10> : !s32i loc(#loc37)
              %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc177)
              cir.condition(%14) loc(#loc38)
            } body {
              cir.scope {
                %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc40)
                %13 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc41)
                %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc41)
                %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc41)
                cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc42)
              } loc(#loc178)
              cir.yield loc(#loc33)
            } step {
              %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc43)
              %13 = cir.unary(inc, %12) nsw : !s32i, !s32i loc(#loc44)
              cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc179)
              cir.yield loc(#loc175)
            } loc(#loc175)
          } loc(#loc175)
        } else {
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc10)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc10)
          cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc45)
        } loc(#loc173)
      } loc(#loc171)
    } loc(#loc168)
    cir.return loc(#loc12)
  } loc(#loc166)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc181)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc51)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc53)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc163)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc54)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc53)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    cir.call @badSink(%9) : (!s32i) -> () loc(#loc56)
    cir.return loc(#loc47)
  } loc(#loc180)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc184)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc59)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc185)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc61)
    cir.return loc(#loc58)
  } loc(#loc183)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc63)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc66, #loc67])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc187)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc68)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc189)
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc190)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc190)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc190)
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc77)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc78)
        %6 = cir.cmp(ge, %4, %5) : !s32i, !cir.bool loc(#loc192)
        %7 = cir.ternary(%6, true {
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc81)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc193)
          %11 = cir.ternary(%10, true {
            %12 = cir.const #true loc(#loc79)
            cir.yield %12 : !cir.bool loc(#loc79)
          }, false {
            %12 = cir.const #false loc(#loc79)
            cir.yield %12 : !cir.bool loc(#loc79)
          }) : (!cir.bool) -> !cir.bool loc(#loc79)
          cir.yield %11 : !cir.bool loc(#loc79)
        }, false {
          %8 = cir.const #false loc(#loc79)
          cir.yield %8 : !cir.bool loc(#loc79)
        }) : (!cir.bool) -> !cir.bool loc(#loc79)
        cir.if %7 {
          %8 = cir.const #cir.int<1> : !s32i loc(#loc86)
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc87)
          %10 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc88)
          %11 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %9 : !s32i), !cir.ptr<!s32i> loc(#loc88)
          cir.store %8, %11 : !s32i, !cir.ptr<!s32i> loc(#loc195)
          cir.scope {
            %12 = cir.const #cir.int<0> : !s32i loc(#loc91)
            cir.store %12, %1 : !s32i, !cir.ptr<!s32i> loc(#loc197)
            cir.for : cond {
              %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc93)
              %14 = cir.const #cir.int<10> : !s32i loc(#loc94)
              %15 = cir.cmp(lt, %13, %14) : !s32i, !cir.bool loc(#loc198)
              cir.condition(%15) loc(#loc95)
            } body {
              cir.scope {
                %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc97)
                %14 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc98)
                %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc98)
                %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc98)
                cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc99)
              } loc(#loc199)
              cir.yield loc(#loc90)
            } step {
              %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc100)
              %14 = cir.unary(inc, %13) nsw : !s32i, !s32i loc(#loc101)
              cir.store %14, %1 : !s32i, !cir.ptr<!s32i> loc(#loc200)
              cir.yield loc(#loc196)
            } loc(#loc196)
          } loc(#loc196)
        } else {
          %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc63)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc63)
          cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc102)
        } loc(#loc194)
      } loc(#loc191)
    } loc(#loc188)
    cir.return loc(#loc65)
  } loc(#loc186)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc202)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc107)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc108)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc110)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc163)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc111)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc112)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc112)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc110)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    cir.call @goodB2GSink(%9) : (!s32i) -> () loc(#loc114)
    cir.return loc(#loc104)
  } loc(#loc201)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc117, #loc118])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc205)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc207)
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc208)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc208)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc208)
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc128)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc129)
        %6 = cir.cmp(ge, %4, %5) : !s32i, !cir.bool loc(#loc210)
        cir.if %6 {
          %7 = cir.const #cir.int<1> : !s32i loc(#loc133)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc134)
          %9 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc135)
          %10 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc135)
          cir.store %7, %10 : !s32i, !cir.ptr<!s32i> loc(#loc212)
          cir.scope {
            %11 = cir.const #cir.int<0> : !s32i loc(#loc138)
            cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc214)
            cir.for : cond {
              %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc140)
              %13 = cir.const #cir.int<10> : !s32i loc(#loc141)
              %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc215)
              cir.condition(%14) loc(#loc142)
            } body {
              cir.scope {
                %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc144)
                %13 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc145)
                %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc145)
                %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc145)
                cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc146)
              } loc(#loc216)
              cir.yield loc(#loc137)
            } step {
              %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc147)
              %13 = cir.unary(inc, %12) nsw : !s32i, !s32i loc(#loc148)
              cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc217)
              cir.yield loc(#loc213)
            } loc(#loc213)
          } loc(#loc213)
        } else {
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc149)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc149)
          cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc150)
        } loc(#loc211)
      } loc(#loc209)
    } loc(#loc206)
    cir.return loc(#loc116)
  } loc(#loc204)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc219)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc155)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc156)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc220)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc158)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc160)
    cir.call @goodG2BSink(%4) : (!s32i) -> () loc(#loc161)
    cir.return loc(#loc152)
  } loc(#loc218)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":51:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":40:23)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":22:1)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":43:1)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":23:1)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":24:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":42:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":25:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":25:13)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":26:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":26:30)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":29:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":41:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":29:13)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":29:21)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":30:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":37:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":39:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":31:28)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":31:20)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":31:13)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":33:13)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":36:13)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":33:21)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":33:17)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":33:24)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":33:28)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":33:26)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":34:13)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":35:37)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":35:30)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":35:17)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":33:33)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":33:32)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":40:13)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":45:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":53:1)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":47:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":47:9)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":49:13)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":49:12)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":49:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":51:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":51:12)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":52:13)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":52:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":127:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":131:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":129:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":129:13)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":130:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":130:13)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":112:23)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":95:1)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":115:1)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":96:1)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":97:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":114:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":98:9)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":98:13)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":99:9)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":99:30)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":101:9)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":113:9)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":101:13)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":101:21)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":101:23)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":101:26)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":101:34)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":101:36)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":102:9)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":109:9)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":111:9)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":103:28)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":103:20)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":103:13)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":105:13)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":108:13)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":105:21)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":105:17)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":105:24)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":105:28)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":105:26)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":106:13)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":107:37)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":107:30)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":107:17)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":105:33)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":105:32)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":112:13)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":117:1)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":125:1)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":119:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":119:9)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":121:13)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":121:12)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":121:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":123:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":123:12)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":123:19)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":124:17)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":124:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":60:1)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":81:1)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":61:1)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":62:5)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":80:5)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":63:9)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":63:13)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":64:9)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":64:30)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":67:9)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":79:9)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":67:13)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":67:21)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":68:9)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":75:9)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":77:9)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":69:28)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":69:20)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":69:13)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":71:13)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":74:13)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":71:21)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":71:17)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":71:24)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":71:28)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":71:26)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":72:13)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":73:37)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":73:30)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":73:17)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":71:33)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":71:32)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":78:23)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":78:13)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":83:1)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":92:1)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":85:5)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":85:9)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":87:13)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":87:12)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":87:5)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":90:12)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":90:5)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":91:17)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c":91:5)
#loc162 = loc(fused[#loc1, #loc2])
#loc163 = loc(fused[#loc3, #loc4])
#loc164 = loc(fused[#loc6, #loc7])
#loc165 = loc(fused[#loc8, #loc9])
#loc166 = loc(fused[#loc11, #loc12])
#loc168 = loc(fused[#loc16, #loc17])
#loc169 = loc(fused[#loc18, #loc19])
#loc170 = loc(fused[#loc20, #loc21])
#loc171 = loc(fused[#loc22, #loc23])
#loc172 = loc(fused[#loc24, #loc25])
#loc173 = loc(fused[#loc26, #loc27, #loc28, #loc23])
#loc174 = loc(fused[#loc31, #loc29])
#loc175 = loc(fused[#loc32, #loc33])
#loc176 = loc(fused[#loc35, #loc34])
#loc177 = loc(fused[#loc36, #loc37])
#loc178 = loc(fused[#loc39, #loc33])
#loc179 = loc(fused[#loc44, #loc43])
#loc180 = loc(fused[#loc46, #loc47])
#loc181 = loc(fused[#loc48, #loc49])
#loc182 = loc(fused[#loc52, #loc50])
#loc183 = loc(fused[#loc57, #loc58])
#loc184 = loc(fused[#loc59, #loc60])
#loc185 = loc(fused[#loc61, #loc62])
#loc186 = loc(fused[#loc64, #loc65])
#loc188 = loc(fused[#loc69, #loc70])
#loc189 = loc(fused[#loc71, #loc72])
#loc190 = loc(fused[#loc73, #loc74])
#loc191 = loc(fused[#loc75, #loc76])
#loc192 = loc(fused[#loc77, #loc78])
#loc193 = loc(fused[#loc80, #loc82])
#loc194 = loc(fused[#loc83, #loc84, #loc85, #loc76])
#loc195 = loc(fused[#loc88, #loc86])
#loc196 = loc(fused[#loc89, #loc90])
#loc197 = loc(fused[#loc92, #loc91])
#loc198 = loc(fused[#loc93, #loc94])
#loc199 = loc(fused[#loc96, #loc90])
#loc200 = loc(fused[#loc101, #loc100])
#loc201 = loc(fused[#loc103, #loc104])
#loc202 = loc(fused[#loc105, #loc106])
#loc203 = loc(fused[#loc109, #loc107])
#loc204 = loc(fused[#loc115, #loc116])
#loc206 = loc(fused[#loc120, #loc121])
#loc207 = loc(fused[#loc122, #loc123])
#loc208 = loc(fused[#loc124, #loc125])
#loc209 = loc(fused[#loc126, #loc127])
#loc210 = loc(fused[#loc128, #loc129])
#loc211 = loc(fused[#loc130, #loc131, #loc132, #loc127])
#loc212 = loc(fused[#loc135, #loc133])
#loc213 = loc(fused[#loc136, #loc137])
#loc214 = loc(fused[#loc139, #loc138])
#loc215 = loc(fused[#loc140, #loc141])
#loc216 = loc(fused[#loc143, #loc137])
#loc217 = loc(fused[#loc148, #loc147])
#loc218 = loc(fused[#loc151, #loc152])
#loc219 = loc(fused[#loc153, #loc154])
#loc220 = loc(fused[#loc157, #loc155])
#loc221 = loc(fused[#loc159, #loc158])
