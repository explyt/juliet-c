!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc3 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_62b.cpp":25:16)
#loc4 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_62b.cpp":25:25)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_62b.cpp":36:20)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_62b.cpp":36:29)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_62b.cpp":43:20)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_62b.cpp":43:29)
#loc24 = loc(fused[#loc3, #loc4])
#loc27 = loc(fused[#loc10, #loc11])
#loc30 = loc(fused[#loc18, #loc19])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_min_multiply_62b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func  @_ZN49CWE191_Integer_Underflow__int64_t_min_multiply_629badSourceERl(%arg0: !cir.ptr<!s64i> loc(fused[#loc3, #loc4])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc24)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc5)
    %1 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc6)
    %2 = cir.unary(minus, %1) : !s64i, !s64i loc(#loc6)
    %3 = cir.const #cir.int<1> : !s64i loc(#loc6)
    %4 = cir.binop(sub, %2, %3) nsw : !s64i loc(#loc6)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc7)
    cir.store %4, %5 : !s64i, !cir.ptr<!s64i> loc(#loc25)
    cir.return loc(#loc2)
  } loc(#loc23)
  cir.func  @_ZN49CWE191_Integer_Underflow__int64_t_min_multiply_6213goodG2BSourceERl(%arg0: !cir.ptr<!s64i> loc(fused[#loc10, #loc11])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc27)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc12)
    %1 = cir.const #cir.int<2> : !s32i loc(#loc13)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc14)
    %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc14)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc15)
    cir.store %3, %4 : !s64i, !cir.ptr<!s64i> loc(#loc28)
    cir.return loc(#loc9)
  } loc(#loc26)
  cir.func  @_ZN49CWE191_Integer_Underflow__int64_t_min_multiply_6213goodB2GSourceERl(%arg0: !cir.ptr<!s64i> loc(fused[#loc18, #loc19])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc30)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc20)
    %1 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc21)
    %2 = cir.unary(minus, %1) : !s64i, !s64i loc(#loc21)
    %3 = cir.const #cir.int<1> : !s64i loc(#loc21)
    %4 = cir.binop(sub, %2, %3) nsw : !s64i loc(#loc21)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc22)
    cir.store %4, %5 : !s64i, !cir.ptr<!s64i> loc(#loc31)
    cir.return loc(#loc17)
  } loc(#loc29)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_min_multiply_62b.cpp":0:0)
#loc1 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_62b.cpp":25:1)
#loc2 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_62b.cpp":29:1)
#loc5 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_62b.cpp":26:1)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_62b.cpp":28:12)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_62b.cpp":28:5)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_62b.cpp":36:1)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_62b.cpp":40:1)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_62b.cpp":37:1)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_62b.cpp":39:13)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_62b.cpp":39:12)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_62b.cpp":39:5)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_62b.cpp":43:1)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_62b.cpp":47:1)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_62b.cpp":44:1)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_62b.cpp":46:12)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_62b.cpp":46:5)
#loc23 = loc(fused[#loc1, #loc2])
#loc25 = loc(fused[#loc7, #loc6])
#loc26 = loc(fused[#loc8, #loc9])
#loc28 = loc(fused[#loc15, #loc13])
#loc29 = loc(fused[#loc16, #loc17])
#loc31 = loc(fused[#loc22, #loc21])
