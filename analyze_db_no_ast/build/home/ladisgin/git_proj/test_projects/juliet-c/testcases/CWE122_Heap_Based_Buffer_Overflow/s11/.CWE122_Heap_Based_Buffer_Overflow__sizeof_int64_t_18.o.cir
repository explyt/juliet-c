!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc75)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc76)
  cir.func private  @printLongLongLine(!s64i) loc(#loc77)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc78)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc80)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc81)
    cir.goto "source" loc(#loc82)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc17)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc18)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc83)
    %4 = cir.call @malloc(%3) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc18)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc84)
    cir.store %5, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc85)
    cir.scope {
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc25)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc26)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc26)
      %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s64i>, !s32i loc(#loc87)
      %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc27)
      cir.if %17 {
        %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc29)
        %19 = cir.const #cir.int<1> : !s32i loc(#loc30)
        %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc31)
        cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc29)
      } loc(#loc88)
    } loc(#loc86)
    %6 = cir.const #cir.int<2147483643> : !s64i loc(#loc32)
    %7 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc33)
    cir.store %6, %7 : !s64i, !cir.ptr<!s64i> loc(#loc89)
    %8 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc35)
    %9 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc36)
    cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc37)
    %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc38)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc39)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc39)
    cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc38)
    cir.return loc(#loc10)
  } loc(#loc79)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc91)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc41)
  } loc(#loc90)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc93)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc48)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc94)
    cir.goto "source" loc(#loc95)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc52)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc53)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc96)
    %4 = cir.call @malloc(%3) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc53)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc97)
    cir.store %5, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc98)
    cir.scope {
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc60)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc61)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc61)
      %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s64i>, !s32i loc(#loc100)
      %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc62)
      cir.if %17 {
        %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc64)
        %19 = cir.const #cir.int<1> : !s32i loc(#loc65)
        %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc66)
        cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc64)
      } loc(#loc101)
    } loc(#loc99)
    %6 = cir.const #cir.int<2147483643> : !s64i loc(#loc67)
    %7 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc68)
    cir.store %6, %7 : !s64i, !cir.ptr<!s64i> loc(#loc102)
    %8 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc70)
    %9 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc71)
    cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc72)
    %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc73)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc74)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc74)
    cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc73)
    cir.return loc(#loc45)
  } loc(#loc92)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":36:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":23:15)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":25:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":25:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":26:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":26:10)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":27:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":30:23)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":30:30)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":30:41)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":30:42)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":30:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":31:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":31:33)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":31:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":31:17)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":31:14)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":31:23)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":31:24)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":31:30)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":31:29)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":32:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":32:6)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":32:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":34:24)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":34:23)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":34:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":35:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":35:10)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":59:1)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":62:1)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":61:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":61:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":43:1)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":57:1)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":45:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":45:15)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":47:12)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":47:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":48:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":48:10)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":49:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":51:23)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":51:30)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":51:42)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":51:43)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":51:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":52:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":52:33)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":52:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":52:17)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":52:14)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":52:23)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":52:24)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":52:30)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":52:29)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":53:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":53:6)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":53:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":55:24)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":55:23)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":55:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":56:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c":56:10)
#loc75 = loc(fused[#loc1, #loc2])
#loc76 = loc(fused[#loc3, #loc4])
#loc77 = loc(fused[#loc5, #loc6])
#loc78 = loc(fused[#loc7, #loc8])
#loc79 = loc(fused[#loc9, #loc10])
#loc80 = loc(fused[#loc11, #loc12])
#loc81 = loc(fused[#loc14, #loc13])
#loc82 = loc(fused[#loc15, #loc16])
#loc83 = loc(fused[#loc19, #loc20])
#loc84 = loc(fused[#loc18, #loc21])
#loc85 = loc(fused[#loc22, #loc21])
#loc86 = loc(fused[#loc23, #loc24])
#loc87 = loc(fused[#loc25, #loc26])
#loc88 = loc(fused[#loc28, #loc24])
#loc89 = loc(fused[#loc34, #loc32])
#loc90 = loc(fused[#loc40, #loc41])
#loc91 = loc(fused[#loc42, #loc43])
#loc92 = loc(fused[#loc44, #loc45])
#loc93 = loc(fused[#loc46, #loc47])
#loc94 = loc(fused[#loc49, #loc48])
#loc95 = loc(fused[#loc50, #loc51])
#loc96 = loc(fused[#loc54, #loc55])
#loc97 = loc(fused[#loc53, #loc56])
#loc98 = loc(fused[#loc57, #loc56])
#loc99 = loc(fused[#loc58, #loc59])
#loc100 = loc(fused[#loc60, #loc61])
#loc101 = loc(fused[#loc63, #loc59])
#loc102 = loc(fused[#loc69, #loc67])
