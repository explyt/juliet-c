!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc61)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__rand_02.c\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__rand_02_bad()\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_02_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc64)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc65)
    cir.scope {
      %4 = cir.const #cir.int<1> : !s32i loc(#loc15)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc17)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc17)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc17)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc17)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc17)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc17)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc17)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc17)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc17)
          cir.yield %23 : !u32i loc(#loc17)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc17)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc17)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc17)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc17)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc17)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc17)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc17)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc17)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc17)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc17)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc17)
          cir.yield %27 : !u32i loc(#loc17)
        }) : (!cir.bool) -> !u32i loc(#loc17)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc17)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc68)
      } loc(#loc67)
    } loc(#loc66)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc5)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc5)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc5)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc5)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc5)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc5)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc5)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc5)
          %11 = cir.const #cir.int<36> : !s32i loc(#loc5)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc5)
          %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc5)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc5)
        } loc(#loc5)
      } loc(#loc5)
    } loc(#loc5)
    cir.return loc(#loc7)
  } loc(#loc63)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc70)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc21)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc71)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc23)
    cir.return loc(#loc20)
  } loc(#loc69)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc27)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc28)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc74)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc34)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc75)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc38)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc38)
      cir.if %5 {
        %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc27)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc27)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc42)
      } else {
        %6 = cir.const #cir.int<5> : !s32i loc(#loc43)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc44)
        %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc43)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc78)
      } loc(#loc77)
    } loc(#loc76)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc28)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc28)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc28)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc28)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc28)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc28)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc28)
          %11 = cir.const #cir.int<60> : !s32i loc(#loc28)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc28)
          %13 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc28)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc28)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc28)
        } loc(#loc28)
      } loc(#loc28)
    } loc(#loc28)
    cir.return loc(#loc30)
  } loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc46)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc80)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc52)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    cir.scope {
      %4 = cir.const #cir.int<1> : !s32i loc(#loc56)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc56)
      cir.if %5 {
        %6 = cir.const #cir.int<5> : !s32i loc(#loc58)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc59)
        %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc58)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc84)
      } loc(#loc83)
    } loc(#loc82)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc46)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc46)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc46)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc46)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc46)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc46)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc46)
          %11 = cir.const #cir.int<75> : !s32i loc(#loc46)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc46)
          %13 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc46)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc46)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc46)
        } loc(#loc46)
      } loc(#loc46)
    } loc(#loc46)
    cir.return loc(#loc48)
  } loc(#loc79)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_02.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/assert.h":69:1)
#loc4 = loc("/usr/include/assert.h":71:43)
#loc5 = loc("CWE617_Reachable_Assertion__rand_02.c":36:5)
#loc6 = loc("CWE617_Reachable_Assertion__rand_02.c":25:1)
#loc7 = loc("CWE617_Reachable_Assertion__rand_02.c":37:1)
#loc8 = loc("CWE617_Reachable_Assertion__rand_02.c":27:5)
#loc9 = loc("CWE617_Reachable_Assertion__rand_02.c":27:9)
#loc10 = loc("CWE617_Reachable_Assertion__rand_02.c":29:13)
#loc11 = loc("CWE617_Reachable_Assertion__rand_02.c":29:12)
#loc12 = loc("CWE617_Reachable_Assertion__rand_02.c":29:5)
#loc13 = loc("CWE617_Reachable_Assertion__rand_02.c":30:5)
#loc14 = loc("CWE617_Reachable_Assertion__rand_02.c":34:5)
#loc15 = loc("CWE617_Reachable_Assertion__rand_02.c":30:8)
#loc16 = loc("CWE617_Reachable_Assertion__rand_02.c":31:5)
#loc17 = loc("CWE617_Reachable_Assertion__rand_02.c":33:16)
#loc18 = loc("CWE617_Reachable_Assertion__rand_02.c":33:9)
#loc19 = loc("CWE617_Reachable_Assertion__rand_02.c":78:1)
#loc20 = loc("CWE617_Reachable_Assertion__rand_02.c":82:1)
#loc21 = loc("CWE617_Reachable_Assertion__rand_02.c":80:5)
#loc22 = loc("CWE617_Reachable_Assertion__rand_02.c":80:14)
#loc23 = loc("CWE617_Reachable_Assertion__rand_02.c":81:5)
#loc24 = loc("CWE617_Reachable_Assertion__rand_02.c":81:14)
#loc25 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc26 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc27 = loc("CWE617_Reachable_Assertion__rand_02.c":52:19)
#loc28 = loc("CWE617_Reachable_Assertion__rand_02.c":60:5)
#loc29 = loc("CWE617_Reachable_Assertion__rand_02.c":44:1)
#loc30 = loc("CWE617_Reachable_Assertion__rand_02.c":61:1)
#loc31 = loc("CWE617_Reachable_Assertion__rand_02.c":46:5)
#loc32 = loc("CWE617_Reachable_Assertion__rand_02.c":46:9)
#loc33 = loc("CWE617_Reachable_Assertion__rand_02.c":48:13)
#loc34 = loc("CWE617_Reachable_Assertion__rand_02.c":48:12)
#loc35 = loc("CWE617_Reachable_Assertion__rand_02.c":48:5)
#loc36 = loc("CWE617_Reachable_Assertion__rand_02.c":49:5)
#loc37 = loc("CWE617_Reachable_Assertion__rand_02.c":58:5)
#loc38 = loc("CWE617_Reachable_Assertion__rand_02.c":49:8)
#loc39 = loc("CWE617_Reachable_Assertion__rand_02.c":50:5)
#loc40 = loc("CWE617_Reachable_Assertion__rand_02.c":53:5)
#loc41 = loc("CWE617_Reachable_Assertion__rand_02.c":55:5)
#loc42 = loc("CWE617_Reachable_Assertion__rand_02.c":52:9)
#loc43 = loc("CWE617_Reachable_Assertion__rand_02.c":57:16)
#loc44 = loc("CWE617_Reachable_Assertion__rand_02.c":57:29)
#loc45 = loc("CWE617_Reachable_Assertion__rand_02.c":57:9)
#loc46 = loc("CWE617_Reachable_Assertion__rand_02.c":75:5)
#loc47 = loc("CWE617_Reachable_Assertion__rand_02.c":64:1)
#loc48 = loc("CWE617_Reachable_Assertion__rand_02.c":76:1)
#loc49 = loc("CWE617_Reachable_Assertion__rand_02.c":66:5)
#loc50 = loc("CWE617_Reachable_Assertion__rand_02.c":66:9)
#loc51 = loc("CWE617_Reachable_Assertion__rand_02.c":68:13)
#loc52 = loc("CWE617_Reachable_Assertion__rand_02.c":68:12)
#loc53 = loc("CWE617_Reachable_Assertion__rand_02.c":68:5)
#loc54 = loc("CWE617_Reachable_Assertion__rand_02.c":69:5)
#loc55 = loc("CWE617_Reachable_Assertion__rand_02.c":73:5)
#loc56 = loc("CWE617_Reachable_Assertion__rand_02.c":69:8)
#loc57 = loc("CWE617_Reachable_Assertion__rand_02.c":70:5)
#loc58 = loc("CWE617_Reachable_Assertion__rand_02.c":72:16)
#loc59 = loc("CWE617_Reachable_Assertion__rand_02.c":72:29)
#loc60 = loc("CWE617_Reachable_Assertion__rand_02.c":72:9)
#loc61 = loc(fused[#loc1, #loc2])
#loc62 = loc(fused[#loc3, #loc4])
#loc63 = loc(fused[#loc6, #loc7])
#loc64 = loc(fused[#loc8, #loc9])
#loc65 = loc(fused[#loc12, #loc10])
#loc66 = loc(fused[#loc13, #loc14])
#loc67 = loc(fused[#loc16, #loc14])
#loc68 = loc(fused[#loc18, #loc17])
#loc69 = loc(fused[#loc19, #loc20])
#loc70 = loc(fused[#loc21, #loc22])
#loc71 = loc(fused[#loc23, #loc24])
#loc72 = loc(fused[#loc25, #loc26])
#loc73 = loc(fused[#loc29, #loc30])
#loc74 = loc(fused[#loc31, #loc32])
#loc75 = loc(fused[#loc35, #loc33])
#loc76 = loc(fused[#loc36, #loc37])
#loc77 = loc(fused[#loc39, #loc40, #loc41, #loc37])
#loc78 = loc(fused[#loc45, #loc44])
#loc79 = loc(fused[#loc47, #loc48])
#loc80 = loc(fused[#loc49, #loc50])
#loc81 = loc(fused[#loc53, #loc51])
#loc82 = loc(fused[#loc54, #loc55])
#loc83 = loc(fused[#loc57, #loc55])
#loc84 = loc(fused[#loc60, #loc59])
