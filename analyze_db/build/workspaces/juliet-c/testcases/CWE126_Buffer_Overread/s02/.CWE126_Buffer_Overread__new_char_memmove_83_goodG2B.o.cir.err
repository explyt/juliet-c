clang: warning: argument unused during compilation: '-c' [-Wunused-command-line-argument]
warning: unknown warning option '-Wno-terminate' [-Wunknown-warning-option]
clang: /workspaces/clangir/clang/lib/CIR/CodeGen/CIRGenExprCXX.cpp:635: mlir::Value emitCXXNewAllocSize(CIRGenFunction &, const CXXNewExpr *, unsigned int, mlir::Value &, mlir::Value &): Assertion `numElementsWidth == sizeWidth && "Expected a size_t array size constant"' failed.
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /workspaces/clangir/install/bin/clang -S -Xclang -emit-cir -std=c++11 -Wno-terminate -std=c++11 -I ../../../testcasesupport -c CWE126_Buffer_Overread__new_char_memmove_83_goodG2B.cpp -o /workspaces/juliet-c/testcases/CWE126_Buffer_Overread/s02/.CWE126_Buffer_Overread__new_char_memmove_83_goodG2B.o.cir
1.	<eof> parser at end of file
2.	CWE126_Buffer_Overread__new_char_memmove_83_goodG2B.cpp:21:11: LLVM IR generation of declaration 'CWE126_Buffer_Overread__new_char_memmove_83'
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang     0x00005644eafdcb68 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 40
1  clang     0x00005644eafda73e llvm::sys::RunSignalHandlers() + 238
2  clang     0x00005644eaf4b946
3  libc.so.6 0x00007f8c70645330
4  libc.so.6 0x00007f8c7069eb2c pthread_kill + 284
5  libc.so.6 0x00007f8c7064527e gsignal + 30
6  libc.so.6 0x00007f8c706288ff abort + 223
7  libc.so.6 0x00007f8c7062881b
8  libc.so.6 0x00007f8c7063b517
9  clang     0x00005644ec4254fc clang::CIRGen::CIRGenFunction::emitCXXNewExpr(clang::CXXNewExpr const*) + 12028
10 clang     0x00005644ec428d1f clang::CIRGen::CIRGenFunction::emitScalarExpr(clang::Expr const*) + 63
11 clang     0x00005644ec3ea7e2 clang::CIRGen::CIRGenFunction::emitAnyExpr(clang::Expr const*, clang::CIRGen::AggValueSlot, bool) + 66
12 clang     0x00005644ec3ea3d4 clang::CIRGen::CIRGenFunction::emitBinaryOperatorLValue(clang::BinaryOperator const*) + 420
13 clang     0x00005644ec3e4694 clang::CIRGen::CIRGenFunction::emitLValue(clang::Expr const*) + 308
14 clang     0x00005644ec3e44f1 clang::CIRGen::CIRGenFunction::emitIgnoredExpr(clang::Expr const*) + 33
15 clang     0x00005644ec45b518 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 120
16 clang     0x00005644ec45bbd4 clang::CIRGen::CIRGenFunction::emitSimpleStmt(clang::Stmt const*, bool) + 356
17 clang     0x00005644ec45b4b0 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 16
18 clang     0x00005644ec44a8f4 clang::CIRGen::CIRGenFunction::emitConstructorBody(clang::CIRGen::FunctionArgList&) + 276
19 clang     0x00005644ec4456a2 clang::CIRGen::CIRGenFunction::generateCode(clang::GlobalDecl, cir::FuncOp, clang::CIRGen::CIRGenFunctionInfo const&) + 1138
20 clang     0x00005644ec49867a clang::CIRGen::CIRGenModule::codegenCXXStructor(clang::GlobalDecl) + 218
21 clang     0x00005644ec453041
22 clang     0x00005644ec398484 clang::CIRGen::CIRGenModule::emitGlobalDefinition(clang::GlobalDecl, mlir::Operation*) + 244
23 clang     0x00005644ec396968 clang::CIRGen::CIRGenModule::emitGlobal(clang::GlobalDecl) + 1656
24 clang     0x00005644ec450805
25 clang     0x00005644ec3a116a clang::CIRGen::CIRGenModule::emitDeclContext(clang::DeclContext const*) + 58
26 clang     0x00005644ec3934af cir::CIRGenerator::HandleTopLevelDecl(clang::DeclGroupRef) + 159
27 clang     0x00005644ec2859e1
28 clang     0x00005644ee387ada clang::ParseAST(clang::Sema&, bool, bool) + 826
29 clang     0x00005644ebaa2d36 clang::FrontendAction::Execute() + 38
30 clang     0x00005644eba0e3ad clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 1149
31 clang     0x00005644ebb8bedf clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 815
32 clang     0x00005644e9daea7a cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 6074
33 clang     0x00005644e9dab06d
34 clang     0x00005644eb855339
35 clang     0x00005644eaf4b686 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 150
36 clang     0x00005644eb854892 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const + 242
37 clang     0x00005644eb810c27 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 455
38 clang     0x00005644eb810f17 clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const + 135
39 clang     0x00005644eb830928 clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 904
40 clang     0x00005644e9daa6ba clang_main(int, char**, llvm::ToolContext const&) + 6090
41 clang     0x00005644e9dba147 main + 87
42 libc.so.6 0x00007f8c7062a1ca
43 libc.so.6 0x00007f8c7062a28b __libc_start_main + 139
44 clang     0x00005644e9da8aa5 _start + 37
clang: error: clang frontend command failed with exit code 134 (use -v to see invocation)
clang version 21.0.0git (git@github.com:llvm/clangir.git 4e7a2236d38507e994cbe5b79c888cf86427e7db)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /workspaces/clangir/install/bin
Build config: +assertions
clang: error: unable to execute command: Aborted (core dumped)
clang: note: diagnostic msg: Error generating preprocessed source(s).
