!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc639)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc640)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc641)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc642)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc643)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc644)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc645)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc646)
  cir.func private @close(!s32i) -> !s32i loc(#loc647)
  cir.func private @printIntLine(!s32i) loc(#loc648)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc649)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc23)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc24)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc651)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc30)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc652)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc654)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc654)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc34)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc34)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc657)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc658)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc659)
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc660)
          %11 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc661)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc46)
          %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc46)
          cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc659)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc48)
          %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc48)
          cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc660)
          cir.scope {
            cir.do {
              cir.scope {
                %16 = cir.const #cir.int<2> : !s32i loc(#loc55)
                %17 = cir.const #cir.int<1> : !s32i loc(#loc56)
                %18 = cir.const #cir.int<6> : !s32i loc(#loc57)
                %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc58)
                cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc664)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc63)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc64)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc64)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc666)
                  cir.if %64 {
                    cir.break loc(#loc66)
                  } loc(#loc667)
                } loc(#loc665)
                %20 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc668)
                %21 = cir.const #cir.int<0> : !s32i loc(#loc69)
                %22 = cir.const #cir.int<16> : !u64i loc(#loc669)
                cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc670)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc74)
                %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc74)
                %25 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc671)
                %26 = cir.const #cir.int<0> : !s32i loc(#loc77)
                %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc77)
                %28 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc78)
                %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc79)
                cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc672)
                %30 = cir.const #cir.int<27015> : !s32i loc(#loc81)
                %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc81)
                %32 = cir.call @htons(%31) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc82)
                %33 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc83)
                cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc673)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc88)
                  %62 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc675)
                  %63 = cir.const #cir.int<16> : !u64i loc(#loc676)
                  %64 = cir.cast(integral, %63 : !u64i), !u32i loc(#loc676)
                  %65 = cir.call @bind(%61, %62, %64) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc93)
                  %66 = cir.const #cir.int<1> : !s32i loc(#loc94)
                  %67 = cir.unary(minus, %66) nsw : !s32i, !s32i loc(#loc94)
                  %68 = cir.cmp(eq, %65, %67) : !s32i, !cir.bool loc(#loc677)
                  cir.if %68 {
                    cir.break loc(#loc96)
                  } loc(#loc678)
                } loc(#loc674)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc99)
                  %62 = cir.const #cir.int<5> : !s32i loc(#loc100)
                  %63 = cir.call @listen(%61, %62) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc101)
                  %64 = cir.const #cir.int<1> : !s32i loc(#loc102)
                  %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc102)
                  %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc680)
                  cir.if %66 {
                    cir.break loc(#loc104)
                  } loc(#loc681)
                } loc(#loc679)
                %34 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                %35 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc106)
                %36 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc107)
                %37 = cir.call @accept(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc108)
                cir.store %37, %10 : !s32i, !cir.ptr<!s32i> loc(#loc682)
                cir.scope {
                  %61 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc113)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc114)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc114)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc684)
                  cir.if %64 {
                    cir.break loc(#loc116)
                  } loc(#loc685)
                } loc(#loc683)
                %38 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc117)
                %39 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc118)
                %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc118)
                %41 = cir.const #cir.int<3> : !s32i loc(#loc119)
                %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc119)
                %43 = cir.const #cir.int<4> : !u64i loc(#loc119)
                %44 = cir.binop(mul, %42, %43) : !u64i loc(#loc119)
                %45 = cir.const #cir.int<2> : !s32i loc(#loc119)
                %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc119)
                %47 = cir.binop(add, %44, %46) : !u64i loc(#loc119)
                %48 = cir.const #cir.int<1> : !s32i loc(#loc120)
                %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc120)
                %50 = cir.binop(sub, %47, %49) : !u64i loc(#loc686)
                %51 = cir.const #cir.int<0> : !s32i loc(#loc121)
                %52 = cir.call @recv(%38, %40, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc122)
                %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc122)
                cir.store %53, %7 : !s32i, !cir.ptr<!s32i> loc(#loc687)
                cir.scope {
                  %61 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc127)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc128)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc128)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc689)
                  %65 = cir.ternary(%64, true {
                    %66 = cir.const #true loc(#loc129)
                    cir.yield %66 : !cir.bool loc(#loc129)
                  }, false {
                    %66 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc130)
                    %67 = cir.const #cir.int<0> : !s32i loc(#loc131)
                    %68 = cir.cmp(eq, %66, %67) : !s32i, !cir.bool loc(#loc690)
                    %69 = cir.ternary(%68, true {
                      %70 = cir.const #true loc(#loc129)
                      cir.yield %70 : !cir.bool loc(#loc129)
                    }, false {
                      %70 = cir.const #false loc(#loc129)
                      cir.yield %70 : !cir.bool loc(#loc129)
                    }) : (!cir.bool) -> !cir.bool loc(#loc129)
                    cir.yield %69 : !cir.bool loc(#loc129)
                  }) : (!cir.bool) -> !cir.bool loc(#loc129)
                  cir.if %65 {
                    cir.break loc(#loc133)
                  } loc(#loc691)
                } loc(#loc688)
                %54 = cir.const #cir.int<0> : !s32i loc(#loc134)
                %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc134)
                %56 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc135)
                %57 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc136)
                %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc136)
                cir.store %55, %58 : !s8i, !cir.ptr<!s8i> loc(#loc692)
                %59 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc137)
                %60 = cir.call @atoi(%59) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc138)
                cir.store %60, %0 : !s32i, !cir.ptr<!s32i> loc(#loc693)
              } loc(#loc663)
              cir.yield loc(#loc52)
            } while {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc141)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc141)
              cir.condition(%17) loc(#loc141)
            } loc(#loc662)
          } loc(#loc662)
          cir.scope {
            %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc144)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc145)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc145)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc695)
            cir.if %19 {
              %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc147)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc148)
            } loc(#loc696)
          } loc(#loc694)
          cir.scope {
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc151)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc152)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc152)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc698)
            cir.if %19 {
              %20 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc154)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc155)
            } loc(#loc699)
          } loc(#loc697)
        } loc(#loc656)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc156)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc700)
      } loc(#loc655)
    } loc(#loc653)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc702)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc702)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc160)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc160)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc705)
          %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc706)
          %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc706)
          cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc706)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc173)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc174)
            %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc708)
            cir.if %12 {
              %13 = cir.const #cir.int<1> : !s32i loc(#loc178)
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc179)
              %15 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc180)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc180)
              cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc710)
              cir.scope {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc183)
                cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc712)
                cir.for : cond {
                  %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc185)
                  %19 = cir.const #cir.int<10> : !s32i loc(#loc186)
                  %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc713)
                  cir.condition(%20) loc(#loc187)
                } body {
                  cir.scope {
                    %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc189)
                    %19 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc190)
                    %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc190)
                    %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc190)
                    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc191)
                  } loc(#loc714)
                  cir.yield loc(#loc182)
                } step {
                  %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc192)
                  %19 = cir.unary(inc, %18) nsw : !s32i, !s32i loc(#loc193)
                  cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc715)
                  cir.yield loc(#loc711)
                } loc(#loc711)
              } loc(#loc711)
            } else {
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc23)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc23)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc194)
            } loc(#loc709)
          } loc(#loc707)
        } loc(#loc704)
      } else {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc717)
          %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc718)
          %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc718)
          cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc718)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc203)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc204)
            %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc720)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc206)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc207)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc721)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc205)
                cir.yield %18 : !cir.bool loc(#loc205)
              }, false {
                %18 = cir.const #false loc(#loc205)
                cir.yield %18 : !cir.bool loc(#loc205)
              }) : (!cir.bool) -> !cir.bool loc(#loc205)
              cir.yield %17 : !cir.bool loc(#loc205)
            }, false {
              %14 = cir.const #false loc(#loc205)
              cir.yield %14 : !cir.bool loc(#loc205)
            }) : (!cir.bool) -> !cir.bool loc(#loc205)
            cir.if %13 {
              %14 = cir.const #cir.int<1> : !s32i loc(#loc212)
              %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc213)
              %16 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc214)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc214)
              cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc723)
              cir.scope {
                %18 = cir.const #cir.int<0> : !s32i loc(#loc217)
                cir.store %18, %7 : !s32i, !cir.ptr<!s32i> loc(#loc725)
                cir.for : cond {
                  %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc219)
                  %20 = cir.const #cir.int<10> : !s32i loc(#loc220)
                  %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc726)
                  cir.condition(%21) loc(#loc221)
                } body {
                  cir.scope {
                    %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc223)
                    %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc224)
                    %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc224)
                    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc224)
                    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc225)
                  } loc(#loc727)
                  cir.yield loc(#loc216)
                } step {
                  %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc226)
                  %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc227)
                  cir.store %20, %7 : !s32i, !cir.ptr<!s32i> loc(#loc728)
                  cir.yield loc(#loc724)
                } loc(#loc724)
              } loc(#loc724)
            } else {
              %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc24)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc24)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc228)
            } loc(#loc722)
          } loc(#loc719)
        } loc(#loc716)
      } loc(#loc703)
    } loc(#loc701)
    cir.return loc(#loc26)
  } loc(#loc650)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc730)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc231)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc731)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc233)
    cir.return loc(#loc230)
  } loc(#loc729)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc733)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc239)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc240)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc734)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc736)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc736)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc244)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc244)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc739)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc740)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc741)
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc742)
          %11 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc743)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc256)
          %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc256)
          cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc741)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc258)
          %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc258)
          cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc742)
          cir.scope {
            cir.do {
              cir.scope {
                %16 = cir.const #cir.int<2> : !s32i loc(#loc265)
                %17 = cir.const #cir.int<1> : !s32i loc(#loc266)
                %18 = cir.const #cir.int<6> : !s32i loc(#loc267)
                %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc268)
                cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc746)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc273)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc274)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc274)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc748)
                  cir.if %64 {
                    cir.break loc(#loc276)
                  } loc(#loc749)
                } loc(#loc747)
                %20 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc750)
                %21 = cir.const #cir.int<0> : !s32i loc(#loc279)
                %22 = cir.const #cir.int<16> : !u64i loc(#loc751)
                cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc752)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc284)
                %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc284)
                %25 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc753)
                %26 = cir.const #cir.int<0> : !s32i loc(#loc286)
                %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc286)
                %28 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc78)
                %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc79)
                cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc754)
                %30 = cir.const #cir.int<27015> : !s32i loc(#loc288)
                %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc288)
                %32 = cir.call @htons(%31) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc289)
                %33 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc83)
                cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc755)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc294)
                  %62 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc757)
                  %63 = cir.const #cir.int<16> : !u64i loc(#loc758)
                  %64 = cir.cast(integral, %63 : !u64i), !u32i loc(#loc758)
                  %65 = cir.call @bind(%61, %62, %64) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc299)
                  %66 = cir.const #cir.int<1> : !s32i loc(#loc300)
                  %67 = cir.unary(minus, %66) nsw : !s32i, !s32i loc(#loc300)
                  %68 = cir.cmp(eq, %65, %67) : !s32i, !cir.bool loc(#loc759)
                  cir.if %68 {
                    cir.break loc(#loc302)
                  } loc(#loc760)
                } loc(#loc756)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc305)
                  %62 = cir.const #cir.int<5> : !s32i loc(#loc306)
                  %63 = cir.call @listen(%61, %62) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc307)
                  %64 = cir.const #cir.int<1> : !s32i loc(#loc308)
                  %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc308)
                  %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc762)
                  cir.if %66 {
                    cir.break loc(#loc310)
                  } loc(#loc763)
                } loc(#loc761)
                %34 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc311)
                %35 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc312)
                %36 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc313)
                %37 = cir.call @accept(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc314)
                cir.store %37, %10 : !s32i, !cir.ptr<!s32i> loc(#loc764)
                cir.scope {
                  %61 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc319)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc320)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc320)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc766)
                  cir.if %64 {
                    cir.break loc(#loc322)
                  } loc(#loc767)
                } loc(#loc765)
                %38 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc323)
                %39 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc324)
                %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc324)
                %41 = cir.const #cir.int<3> : !s32i loc(#loc325)
                %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc325)
                %43 = cir.const #cir.int<4> : !u64i loc(#loc325)
                %44 = cir.binop(mul, %42, %43) : !u64i loc(#loc325)
                %45 = cir.const #cir.int<2> : !s32i loc(#loc325)
                %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc325)
                %47 = cir.binop(add, %44, %46) : !u64i loc(#loc325)
                %48 = cir.const #cir.int<1> : !s32i loc(#loc326)
                %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc326)
                %50 = cir.binop(sub, %47, %49) : !u64i loc(#loc768)
                %51 = cir.const #cir.int<0> : !s32i loc(#loc327)
                %52 = cir.call @recv(%38, %40, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc328)
                %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc328)
                cir.store %53, %7 : !s32i, !cir.ptr<!s32i> loc(#loc769)
                cir.scope {
                  %61 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc333)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc334)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc334)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc771)
                  %65 = cir.ternary(%64, true {
                    %66 = cir.const #true loc(#loc335)
                    cir.yield %66 : !cir.bool loc(#loc335)
                  }, false {
                    %66 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc336)
                    %67 = cir.const #cir.int<0> : !s32i loc(#loc337)
                    %68 = cir.cmp(eq, %66, %67) : !s32i, !cir.bool loc(#loc772)
                    %69 = cir.ternary(%68, true {
                      %70 = cir.const #true loc(#loc335)
                      cir.yield %70 : !cir.bool loc(#loc335)
                    }, false {
                      %70 = cir.const #false loc(#loc335)
                      cir.yield %70 : !cir.bool loc(#loc335)
                    }) : (!cir.bool) -> !cir.bool loc(#loc335)
                    cir.yield %69 : !cir.bool loc(#loc335)
                  }) : (!cir.bool) -> !cir.bool loc(#loc335)
                  cir.if %65 {
                    cir.break loc(#loc339)
                  } loc(#loc773)
                } loc(#loc770)
                %54 = cir.const #cir.int<0> : !s32i loc(#loc340)
                %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc340)
                %56 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc341)
                %57 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc342)
                %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc342)
                cir.store %55, %58 : !s8i, !cir.ptr<!s8i> loc(#loc774)
                %59 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc343)
                %60 = cir.call @atoi(%59) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc344)
                cir.store %60, %0 : !s32i, !cir.ptr<!s32i> loc(#loc775)
              } loc(#loc745)
              cir.yield loc(#loc262)
            } while {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc347)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc347)
              cir.condition(%17) loc(#loc347)
            } loc(#loc744)
          } loc(#loc744)
          cir.scope {
            %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc350)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc351)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc351)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc777)
            cir.if %19 {
              %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc353)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc354)
            } loc(#loc778)
          } loc(#loc776)
          cir.scope {
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc357)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc358)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc358)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc780)
            cir.if %19 {
              %20 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc360)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc361)
            } loc(#loc781)
          } loc(#loc779)
        } loc(#loc738)
      } else {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc783)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc784)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc785)
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc786)
          %11 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc787)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc369)
          %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc369)
          cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc785)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc371)
          %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc371)
          cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc786)
          cir.scope {
            cir.do {
              cir.scope {
                %16 = cir.const #cir.int<2> : !s32i loc(#loc378)
                %17 = cir.const #cir.int<1> : !s32i loc(#loc379)
                %18 = cir.const #cir.int<6> : !s32i loc(#loc380)
                %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc381)
                cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc790)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc386)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc387)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc387)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc792)
                  cir.if %64 {
                    cir.break loc(#loc389)
                  } loc(#loc793)
                } loc(#loc791)
                %20 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc794)
                %21 = cir.const #cir.int<0> : !s32i loc(#loc392)
                %22 = cir.const #cir.int<16> : !u64i loc(#loc795)
                cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc796)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc397)
                %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc397)
                %25 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc797)
                %26 = cir.const #cir.int<0> : !s32i loc(#loc399)
                %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc399)
                %28 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc78)
                %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc79)
                cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc798)
                %30 = cir.const #cir.int<27015> : !s32i loc(#loc401)
                %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc401)
                %32 = cir.call @htons(%31) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc402)
                %33 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc83)
                cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc799)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc407)
                  %62 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc801)
                  %63 = cir.const #cir.int<16> : !u64i loc(#loc802)
                  %64 = cir.cast(integral, %63 : !u64i), !u32i loc(#loc802)
                  %65 = cir.call @bind(%61, %62, %64) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc412)
                  %66 = cir.const #cir.int<1> : !s32i loc(#loc413)
                  %67 = cir.unary(minus, %66) nsw : !s32i, !s32i loc(#loc413)
                  %68 = cir.cmp(eq, %65, %67) : !s32i, !cir.bool loc(#loc803)
                  cir.if %68 {
                    cir.break loc(#loc415)
                  } loc(#loc804)
                } loc(#loc800)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc418)
                  %62 = cir.const #cir.int<5> : !s32i loc(#loc419)
                  %63 = cir.call @listen(%61, %62) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc420)
                  %64 = cir.const #cir.int<1> : !s32i loc(#loc421)
                  %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc421)
                  %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc806)
                  cir.if %66 {
                    cir.break loc(#loc423)
                  } loc(#loc807)
                } loc(#loc805)
                %34 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc424)
                %35 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc425)
                %36 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc426)
                %37 = cir.call @accept(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc427)
                cir.store %37, %10 : !s32i, !cir.ptr<!s32i> loc(#loc808)
                cir.scope {
                  %61 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc432)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc433)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc433)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc810)
                  cir.if %64 {
                    cir.break loc(#loc435)
                  } loc(#loc811)
                } loc(#loc809)
                %38 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc436)
                %39 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc437)
                %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc437)
                %41 = cir.const #cir.int<3> : !s32i loc(#loc438)
                %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc438)
                %43 = cir.const #cir.int<4> : !u64i loc(#loc438)
                %44 = cir.binop(mul, %42, %43) : !u64i loc(#loc438)
                %45 = cir.const #cir.int<2> : !s32i loc(#loc438)
                %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc438)
                %47 = cir.binop(add, %44, %46) : !u64i loc(#loc438)
                %48 = cir.const #cir.int<1> : !s32i loc(#loc439)
                %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc439)
                %50 = cir.binop(sub, %47, %49) : !u64i loc(#loc812)
                %51 = cir.const #cir.int<0> : !s32i loc(#loc440)
                %52 = cir.call @recv(%38, %40, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc441)
                %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc441)
                cir.store %53, %7 : !s32i, !cir.ptr<!s32i> loc(#loc813)
                cir.scope {
                  %61 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc446)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc447)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc447)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc815)
                  %65 = cir.ternary(%64, true {
                    %66 = cir.const #true loc(#loc448)
                    cir.yield %66 : !cir.bool loc(#loc448)
                  }, false {
                    %66 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc449)
                    %67 = cir.const #cir.int<0> : !s32i loc(#loc450)
                    %68 = cir.cmp(eq, %66, %67) : !s32i, !cir.bool loc(#loc816)
                    %69 = cir.ternary(%68, true {
                      %70 = cir.const #true loc(#loc448)
                      cir.yield %70 : !cir.bool loc(#loc448)
                    }, false {
                      %70 = cir.const #false loc(#loc448)
                      cir.yield %70 : !cir.bool loc(#loc448)
                    }) : (!cir.bool) -> !cir.bool loc(#loc448)
                    cir.yield %69 : !cir.bool loc(#loc448)
                  }) : (!cir.bool) -> !cir.bool loc(#loc448)
                  cir.if %65 {
                    cir.break loc(#loc452)
                  } loc(#loc817)
                } loc(#loc814)
                %54 = cir.const #cir.int<0> : !s32i loc(#loc453)
                %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc453)
                %56 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc454)
                %57 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc455)
                %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc455)
                cir.store %55, %58 : !s8i, !cir.ptr<!s8i> loc(#loc818)
                %59 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc456)
                %60 = cir.call @atoi(%59) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc457)
                cir.store %60, %0 : !s32i, !cir.ptr<!s32i> loc(#loc819)
              } loc(#loc789)
              cir.yield loc(#loc375)
            } while {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc460)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc460)
              cir.condition(%17) loc(#loc460)
            } loc(#loc788)
          } loc(#loc788)
          cir.scope {
            %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc463)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc464)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc464)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc821)
            cir.if %19 {
              %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc466)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc467)
            } loc(#loc822)
          } loc(#loc820)
          cir.scope {
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc470)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc471)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc471)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc824)
            cir.if %19 {
              %20 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc473)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc474)
            } loc(#loc825)
          } loc(#loc823)
        } loc(#loc782)
      } loc(#loc737)
    } loc(#loc735)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc827)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc827)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc477)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc477)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc830)
          %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc831)
          %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc831)
          cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc831)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc490)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc491)
            %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc833)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc493)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc494)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc834)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc492)
                cir.yield %18 : !cir.bool loc(#loc492)
              }, false {
                %18 = cir.const #false loc(#loc492)
                cir.yield %18 : !cir.bool loc(#loc492)
              }) : (!cir.bool) -> !cir.bool loc(#loc492)
              cir.yield %17 : !cir.bool loc(#loc492)
            }, false {
              %14 = cir.const #false loc(#loc492)
              cir.yield %14 : !cir.bool loc(#loc492)
            }) : (!cir.bool) -> !cir.bool loc(#loc492)
            cir.if %13 {
              %14 = cir.const #cir.int<1> : !s32i loc(#loc499)
              %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc500)
              %16 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc501)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc501)
              cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc836)
              cir.scope {
                %18 = cir.const #cir.int<0> : !s32i loc(#loc504)
                cir.store %18, %7 : !s32i, !cir.ptr<!s32i> loc(#loc838)
                cir.for : cond {
                  %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc506)
                  %20 = cir.const #cir.int<10> : !s32i loc(#loc507)
                  %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc839)
                  cir.condition(%21) loc(#loc508)
                } body {
                  cir.scope {
                    %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc510)
                    %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc511)
                    %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc511)
                    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc511)
                    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc512)
                  } loc(#loc840)
                  cir.yield loc(#loc503)
                } step {
                  %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc513)
                  %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc514)
                  cir.store %20, %7 : !s32i, !cir.ptr<!s32i> loc(#loc841)
                  cir.yield loc(#loc837)
                } loc(#loc837)
              } loc(#loc837)
            } else {
              %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc515)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc515)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc516)
            } loc(#loc835)
          } loc(#loc832)
        } loc(#loc829)
      } else {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc843)
          %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc844)
          %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc844)
          cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc844)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc525)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc526)
            %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc846)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc528)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc529)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc847)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc527)
                cir.yield %18 : !cir.bool loc(#loc527)
              }, false {
                %18 = cir.const #false loc(#loc527)
                cir.yield %18 : !cir.bool loc(#loc527)
              }) : (!cir.bool) -> !cir.bool loc(#loc527)
              cir.yield %17 : !cir.bool loc(#loc527)
            }, false {
              %14 = cir.const #false loc(#loc527)
              cir.yield %14 : !cir.bool loc(#loc527)
            }) : (!cir.bool) -> !cir.bool loc(#loc527)
            cir.if %13 {
              %14 = cir.const #cir.int<1> : !s32i loc(#loc534)
              %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc535)
              %16 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc536)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc536)
              cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc849)
              cir.scope {
                %18 = cir.const #cir.int<0> : !s32i loc(#loc539)
                cir.store %18, %7 : !s32i, !cir.ptr<!s32i> loc(#loc851)
                cir.for : cond {
                  %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc541)
                  %20 = cir.const #cir.int<10> : !s32i loc(#loc542)
                  %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc852)
                  cir.condition(%21) loc(#loc543)
                } body {
                  cir.scope {
                    %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc545)
                    %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc546)
                    %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc546)
                    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc546)
                    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc547)
                  } loc(#loc853)
                  cir.yield loc(#loc538)
                } step {
                  %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc548)
                  %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc549)
                  cir.store %20, %7 : !s32i, !cir.ptr<!s32i> loc(#loc854)
                  cir.yield loc(#loc850)
                } loc(#loc850)
              } loc(#loc850)
            } else {
              %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc550)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc550)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc551)
            } loc(#loc848)
          } loc(#loc845)
        } loc(#loc842)
      } loc(#loc828)
    } loc(#loc826)
    cir.return loc(#loc236)
  } loc(#loc732)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc856)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc556)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc557)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc857)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc859)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc859)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc561)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc561)
      cir.if %6 {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc566)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc861)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc568)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc862)
      } loc(#loc860)
    } loc(#loc858)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc864)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc864)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc572)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc572)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc867)
          %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc868)
          %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc868)
          cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc868)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc585)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc586)
            %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc870)
            cir.if %12 {
              %13 = cir.const #cir.int<1> : !s32i loc(#loc590)
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc591)
              %15 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc592)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc592)
              cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc872)
              cir.scope {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc595)
                cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc874)
                cir.for : cond {
                  %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc597)
                  %19 = cir.const #cir.int<10> : !s32i loc(#loc598)
                  %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc875)
                  cir.condition(%20) loc(#loc599)
                } body {
                  cir.scope {
                    %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc601)
                    %19 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc602)
                    %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc602)
                    %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc602)
                    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc603)
                  } loc(#loc876)
                  cir.yield loc(#loc594)
                } step {
                  %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc604)
                  %19 = cir.unary(inc, %18) nsw : !s32i, !s32i loc(#loc605)
                  cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc877)
                  cir.yield loc(#loc873)
                } loc(#loc873)
              } loc(#loc873)
            } else {
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc606)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc606)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc607)
            } loc(#loc871)
          } loc(#loc869)
        } loc(#loc866)
      } else {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc879)
          %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc880)
          %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc880)
          cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc880)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc616)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc617)
            %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc882)
            cir.if %12 {
              %13 = cir.const #cir.int<1> : !s32i loc(#loc621)
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc622)
              %15 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc623)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc623)
              cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc884)
              cir.scope {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc626)
                cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc886)
                cir.for : cond {
                  %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc628)
                  %19 = cir.const #cir.int<10> : !s32i loc(#loc629)
                  %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc887)
                  cir.condition(%20) loc(#loc630)
                } body {
                  cir.scope {
                    %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc632)
                    %19 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc633)
                    %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc633)
                    %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc633)
                    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc634)
                  } loc(#loc888)
                  cir.yield loc(#loc625)
                } step {
                  %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc635)
                  %19 = cir.unary(inc, %18) nsw : !s32i, !s32i loc(#loc636)
                  cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc889)
                  cir.yield loc(#loc885)
                } loc(#loc885)
              } loc(#loc885)
            } else {
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc637)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc637)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc638)
            } loc(#loc883)
          } loc(#loc881)
        } loc(#loc878)
      } loc(#loc865)
    } loc(#loc863)
    cir.return loc(#loc553)
  } loc(#loc855)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc4 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":402:1)
#loc6 = loc("/usr/include/netinet/in.h":403:40)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc13 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc14 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc15 = loc("/usr/include/stdlib.h":105:1)
#loc16 = loc("/usr/include/stdlib.h":106:33)
#loc17 = loc("/usr/include/unistd.h":358:1)
#loc18 = loc("/usr/include/unistd.h":358:27)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":145:27)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":166:27)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":44:1)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":170:1)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":46:5)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":46:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":48:13)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":48:12)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":48:5)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":49:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":126:5)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":49:8)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":49:33)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":50:5)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":120:5)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":122:5)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":51:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":119:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":56:13)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":56:17)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":57:13)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":57:32)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":58:13)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":58:35)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":59:13)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":59:35)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":60:13)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":60:45)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":61:13)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":104:21)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":62:13)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":103:13)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":71:39)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":71:48)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":71:61)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":71:32)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":71:17)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":71:72)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":72:17)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":75:17)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":72:21)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":72:37)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":73:17)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":74:21)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":76:24)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":76:25)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":76:34)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":76:37)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":76:51)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":76:17)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":76:52)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":77:38)
#loc75 = loc("/usr/include/netinet/in.h":249:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":77:17)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":78:43)
#loc78 = loc("/usr/include/netinet/in.h":251:20)
#loc79 = loc("/usr/include/netinet/in.h":33:15)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":78:17)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":79:42)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":79:36)
#loc83 = loc("/usr/include/netinet/in.h":250:15)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":79:17)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":79:50)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":80:17)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":83:17)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":80:26)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":80:58)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":80:59)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":80:68)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":80:82)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":80:21)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":80:88)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":81:17)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":82:21)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":84:17)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":87:17)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":84:28)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":84:42)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":84:21)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":84:61)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":85:17)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":86:21)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":88:39)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":88:53)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":88:59)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":88:32)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":88:17)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":88:63)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":89:17)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":92:17)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":89:21)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":89:37)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":90:17)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":91:21)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":94:35)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":94:49)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":94:62)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":94:80)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":94:83)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":94:30)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":94:17)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":94:84)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":95:17)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":98:17)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":95:21)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":95:35)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":95:48)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":95:51)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":95:65)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":96:17)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":97:21)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":100:43)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":100:29)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":100:17)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":102:29)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":102:24)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":102:17)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":102:40)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":104:20)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":105:13)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":108:13)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":105:17)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":105:33)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":106:13)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":107:30)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":107:17)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":109:13)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":112:13)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":109:17)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":109:33)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":110:13)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":111:30)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":111:17)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":125:16)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":125:9)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":127:5)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":169:5)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":127:8)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":127:33)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":128:5)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":148:5)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":150:5)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":129:9)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":147:9)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":130:13)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":130:17)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":131:13)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":131:34)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":134:13)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":146:13)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":134:17)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":134:25)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":135:13)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":142:13)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":144:13)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":136:32)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":136:24)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":136:17)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":138:17)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":141:17)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":138:25)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":138:21)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":138:28)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":138:32)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":138:30)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":139:17)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":140:41)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":140:34)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":140:21)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":138:37)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":138:36)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":145:17)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":151:9)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":168:9)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":152:13)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":152:17)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":153:13)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":153:34)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":155:13)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":167:13)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":155:17)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":155:25)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":155:27)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":155:30)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":155:38)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":155:40)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":156:13)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":163:13)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":165:13)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":157:32)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":157:24)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":157:17)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":159:17)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":162:17)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":159:25)
#loc218 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":159:21)
#loc219 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":159:28)
#loc220 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":159:32)
#loc221 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":159:30)
#loc222 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":160:17)
#loc223 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":161:41)
#loc224 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":161:34)
#loc225 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":161:21)
#loc226 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":159:37)
#loc227 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":159:36)
#loc228 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":166:17)
#loc229 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":438:1)
#loc230 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":442:1)
#loc231 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":440:5)
#loc232 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":440:13)
#loc233 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":441:5)
#loc234 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":441:13)
#loc235 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":179:1)
#loc236 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":370:1)
#loc237 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":181:5)
#loc238 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":181:9)
#loc239 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":183:13)
#loc240 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":183:12)
#loc241 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":183:5)
#loc242 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":184:5)
#loc243 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":327:5)
#loc244 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":184:8)
#loc245 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":184:33)
#loc246 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":185:5)
#loc247 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":255:5)
#loc248 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":257:5)
#loc249 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":186:9)
#loc250 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":254:9)
#loc251 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":191:13)
#loc252 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":191:17)
#loc253 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":192:13)
#loc254 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":192:32)
#loc255 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":193:13)
#loc256 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":193:35)
#loc257 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":194:13)
#loc258 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":194:35)
#loc259 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":195:13)
#loc260 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":195:45)
#loc261 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":196:13)
#loc262 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":239:21)
#loc263 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":197:13)
#loc264 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":238:13)
#loc265 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":206:39)
#loc266 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":206:48)
#loc267 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":206:61)
#loc268 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":206:32)
#loc269 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":206:17)
#loc270 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":206:72)
#loc271 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":207:17)
#loc272 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":210:17)
#loc273 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":207:21)
#loc274 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":207:37)
#loc275 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":208:17)
#loc276 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":209:21)
#loc277 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":211:24)
#loc278 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":211:25)
#loc279 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":211:34)
#loc280 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":211:37)
#loc281 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":211:51)
#loc282 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":211:17)
#loc283 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":211:52)
#loc284 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":212:38)
#loc285 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":212:17)
#loc286 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":213:43)
#loc287 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":213:17)
#loc288 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":214:42)
#loc289 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":214:36)
#loc290 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":214:17)
#loc291 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":214:50)
#loc292 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":215:17)
#loc293 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":218:17)
#loc294 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":215:26)
#loc295 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":215:58)
#loc296 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":215:59)
#loc297 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":215:68)
#loc298 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":215:82)
#loc299 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":215:21)
#loc300 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":215:88)
#loc301 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":216:17)
#loc302 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":217:21)
#loc303 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":219:17)
#loc304 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":222:17)
#loc305 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":219:28)
#loc306 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":219:42)
#loc307 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":219:21)
#loc308 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":219:61)
#loc309 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":220:17)
#loc310 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":221:21)
#loc311 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":223:39)
#loc312 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":223:53)
#loc313 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":223:59)
#loc314 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":223:32)
#loc315 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":223:17)
#loc316 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":223:63)
#loc317 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":224:17)
#loc318 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":227:17)
#loc319 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":224:21)
#loc320 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":224:37)
#loc321 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":225:17)
#loc322 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":226:21)
#loc323 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":229:35)
#loc324 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":229:49)
#loc325 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":229:62)
#loc326 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":229:80)
#loc327 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":229:83)
#loc328 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":229:30)
#loc329 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":229:17)
#loc330 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":229:84)
#loc331 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":230:17)
#loc332 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":233:17)
#loc333 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":230:21)
#loc334 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":230:35)
#loc335 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":230:48)
#loc336 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":230:51)
#loc337 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":230:65)
#loc338 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":231:17)
#loc339 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":232:21)
#loc340 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":235:43)
#loc341 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":235:29)
#loc342 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":235:17)
#loc343 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":237:29)
#loc344 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":237:24)
#loc345 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":237:17)
#loc346 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":237:40)
#loc347 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":239:20)
#loc348 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":240:13)
#loc349 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":243:13)
#loc350 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":240:17)
#loc351 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":240:33)
#loc352 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":241:13)
#loc353 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":242:30)
#loc354 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":242:17)
#loc355 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":244:13)
#loc356 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":247:13)
#loc357 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":244:17)
#loc358 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":244:33)
#loc359 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":245:13)
#loc360 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":246:30)
#loc361 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":246:17)
#loc362 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":258:9)
#loc363 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":326:9)
#loc364 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":263:13)
#loc365 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":263:17)
#loc366 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":264:13)
#loc367 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":264:32)
#loc368 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":265:13)
#loc369 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":265:35)
#loc370 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":266:13)
#loc371 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":266:35)
#loc372 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":267:13)
#loc373 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":267:45)
#loc374 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":268:13)
#loc375 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":311:21)
#loc376 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":269:13)
#loc377 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":310:13)
#loc378 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":278:39)
#loc379 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":278:48)
#loc380 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":278:61)
#loc381 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":278:32)
#loc382 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":278:17)
#loc383 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":278:72)
#loc384 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":279:17)
#loc385 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":282:17)
#loc386 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":279:21)
#loc387 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":279:37)
#loc388 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":280:17)
#loc389 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":281:21)
#loc390 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":283:24)
#loc391 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":283:25)
#loc392 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":283:34)
#loc393 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":283:37)
#loc394 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":283:51)
#loc395 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":283:17)
#loc396 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":283:52)
#loc397 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":284:38)
#loc398 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":284:17)
#loc399 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":285:43)
#loc400 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":285:17)
#loc401 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":286:42)
#loc402 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":286:36)
#loc403 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":286:17)
#loc404 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":286:50)
#loc405 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":287:17)
#loc406 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":290:17)
#loc407 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":287:26)
#loc408 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":287:58)
#loc409 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":287:59)
#loc410 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":287:68)
#loc411 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":287:82)
#loc412 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":287:21)
#loc413 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":287:88)
#loc414 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":288:17)
#loc415 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":289:21)
#loc416 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":291:17)
#loc417 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":294:17)
#loc418 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":291:28)
#loc419 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":291:42)
#loc420 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":291:21)
#loc421 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":291:61)
#loc422 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":292:17)
#loc423 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":293:21)
#loc424 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":295:39)
#loc425 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":295:53)
#loc426 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":295:59)
#loc427 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":295:32)
#loc428 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":295:17)
#loc429 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":295:63)
#loc430 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":296:17)
#loc431 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":299:17)
#loc432 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":296:21)
#loc433 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":296:37)
#loc434 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":297:17)
#loc435 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":298:21)
#loc436 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":301:35)
#loc437 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":301:49)
#loc438 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":301:62)
#loc439 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":301:80)
#loc440 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":301:83)
#loc441 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":301:30)
#loc442 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":301:17)
#loc443 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":301:84)
#loc444 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":302:17)
#loc445 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":305:17)
#loc446 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":302:21)
#loc447 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":302:35)
#loc448 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":302:48)
#loc449 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":302:51)
#loc450 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":302:65)
#loc451 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":303:17)
#loc452 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":304:21)
#loc453 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":307:43)
#loc454 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":307:29)
#loc455 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":307:17)
#loc456 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":309:29)
#loc457 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":309:24)
#loc458 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":309:17)
#loc459 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":309:40)
#loc460 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":311:20)
#loc461 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":312:13)
#loc462 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":315:13)
#loc463 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":312:17)
#loc464 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":312:33)
#loc465 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":313:13)
#loc466 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":314:30)
#loc467 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":314:17)
#loc468 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":316:13)
#loc469 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":319:13)
#loc470 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":316:17)
#loc471 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":316:33)
#loc472 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":317:13)
#loc473 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":318:30)
#loc474 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":318:17)
#loc475 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":328:5)
#loc476 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":369:5)
#loc477 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":328:8)
#loc478 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":328:33)
#loc479 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":329:5)
#loc480 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":348:5)
#loc481 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":350:5)
#loc482 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":330:9)
#loc483 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":347:9)
#loc484 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":331:13)
#loc485 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":331:17)
#loc486 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":332:13)
#loc487 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":332:34)
#loc488 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":334:13)
#loc489 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":346:13)
#loc490 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":334:17)
#loc491 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":334:25)
#loc492 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":334:27)
#loc493 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":334:30)
#loc494 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":334:38)
#loc495 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":334:40)
#loc496 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":335:13)
#loc497 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":342:13)
#loc498 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":344:13)
#loc499 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":336:32)
#loc500 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":336:24)
#loc501 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":336:17)
#loc502 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":338:17)
#loc503 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":341:17)
#loc504 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":338:25)
#loc505 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":338:21)
#loc506 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":338:28)
#loc507 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":338:32)
#loc508 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":338:30)
#loc509 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":339:17)
#loc510 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":340:41)
#loc511 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":340:34)
#loc512 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":340:21)
#loc513 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":338:37)
#loc514 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":338:36)
#loc515 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":345:27)
#loc516 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":345:17)
#loc517 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":351:9)
#loc518 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":368:9)
#loc519 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":352:13)
#loc520 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":352:17)
#loc521 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":353:13)
#loc522 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":353:34)
#loc523 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":355:13)
#loc524 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":367:13)
#loc525 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":355:17)
#loc526 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":355:25)
#loc527 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":355:27)
#loc528 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":355:30)
#loc529 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":355:38)
#loc530 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":355:40)
#loc531 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":356:13)
#loc532 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":363:13)
#loc533 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":365:13)
#loc534 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":357:32)
#loc535 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":357:24)
#loc536 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":357:17)
#loc537 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":359:17)
#loc538 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":362:17)
#loc539 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":359:25)
#loc540 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":359:21)
#loc541 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":359:28)
#loc542 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":359:32)
#loc543 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":359:30)
#loc544 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":360:17)
#loc545 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":361:41)
#loc546 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":361:34)
#loc547 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":361:21)
#loc548 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":359:37)
#loc549 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":359:36)
#loc550 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":366:27)
#loc551 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":366:17)
#loc552 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":375:1)
#loc553 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":436:1)
#loc554 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":377:5)
#loc555 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":377:9)
#loc556 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":379:13)
#loc557 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":379:12)
#loc558 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":379:5)
#loc559 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":380:5)
#loc560 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":391:5)
#loc561 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":380:8)
#loc562 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":380:33)
#loc563 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":381:5)
#loc564 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":385:5)
#loc565 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":387:5)
#loc566 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":384:16)
#loc567 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":384:9)
#loc568 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":390:16)
#loc569 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":390:9)
#loc570 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":392:5)
#loc571 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":435:5)
#loc572 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":392:8)
#loc573 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":392:33)
#loc574 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":393:5)
#loc575 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":413:5)
#loc576 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":415:5)
#loc577 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":394:9)
#loc578 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":412:9)
#loc579 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":395:13)
#loc580 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":395:17)
#loc581 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":396:13)
#loc582 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":396:34)
#loc583 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":399:13)
#loc584 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":411:13)
#loc585 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":399:17)
#loc586 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":399:25)
#loc587 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":400:13)
#loc588 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":407:13)
#loc589 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":409:13)
#loc590 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":401:32)
#loc591 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":401:24)
#loc592 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":401:17)
#loc593 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":403:17)
#loc594 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":406:17)
#loc595 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":403:25)
#loc596 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":403:21)
#loc597 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":403:28)
#loc598 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":403:32)
#loc599 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":403:30)
#loc600 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":404:17)
#loc601 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":405:41)
#loc602 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":405:34)
#loc603 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":405:21)
#loc604 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":403:37)
#loc605 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":403:36)
#loc606 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":410:27)
#loc607 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":410:17)
#loc608 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":416:9)
#loc609 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":434:9)
#loc610 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":417:13)
#loc611 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":417:17)
#loc612 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":418:13)
#loc613 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":418:34)
#loc614 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":421:13)
#loc615 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":433:13)
#loc616 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":421:17)
#loc617 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":421:25)
#loc618 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":422:13)
#loc619 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":429:13)
#loc620 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":431:13)
#loc621 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":423:32)
#loc622 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":423:24)
#loc623 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":423:17)
#loc624 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":425:17)
#loc625 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":428:17)
#loc626 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":425:25)
#loc627 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":425:21)
#loc628 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":425:28)
#loc629 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":425:32)
#loc630 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":425:30)
#loc631 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":426:17)
#loc632 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":427:41)
#loc633 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":427:34)
#loc634 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":427:21)
#loc635 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":425:37)
#loc636 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":425:36)
#loc637 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":432:27)
#loc638 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c":432:17)
#loc639 = loc(fused[#loc1, #loc2])
#loc640 = loc(fused[#loc3, #loc4])
#loc641 = loc(fused[#loc5, #loc6])
#loc642 = loc(fused[#loc7, #loc8])
#loc643 = loc(fused[#loc9, #loc10])
#loc644 = loc(fused[#loc11, #loc12])
#loc645 = loc(fused[#loc13, #loc14])
#loc646 = loc(fused[#loc15, #loc16])
#loc647 = loc(fused[#loc17, #loc18])
#loc648 = loc(fused[#loc19, #loc20])
#loc649 = loc(fused[#loc21, #loc22])
#loc650 = loc(fused[#loc25, #loc26])
#loc651 = loc(fused[#loc27, #loc28])
#loc652 = loc(fused[#loc31, #loc29])
#loc653 = loc(fused[#loc32, #loc33])
#loc654 = loc(fused[#loc34, #loc35])
#loc655 = loc(fused[#loc36, #loc37, #loc38, #loc33])
#loc656 = loc(fused[#loc39, #loc40])
#loc657 = loc(fused[#loc41, #loc42])
#loc658 = loc(fused[#loc43, #loc44])
#loc659 = loc(fused[#loc45, #loc46])
#loc660 = loc(fused[#loc47, #loc48])
#loc661 = loc(fused[#loc49, #loc50])
#loc662 = loc(fused[#loc51, #loc52])
#loc663 = loc(fused[#loc53, #loc54])
#loc664 = loc(fused[#loc59, #loc60])
#loc665 = loc(fused[#loc61, #loc62])
#loc666 = loc(fused[#loc63, #loc64])
#loc667 = loc(fused[#loc65, #loc62])
#loc668 = loc(fused[#loc67, #loc68])
#loc669 = loc(fused[#loc70, #loc71])
#loc670 = loc(fused[#loc72, #loc73])
#loc671 = loc(fused[#loc76, #loc74])
#loc672 = loc(fused[#loc80, #loc77])
#loc673 = loc(fused[#loc84, #loc85])
#loc674 = loc(fused[#loc86, #loc87])
#loc675 = loc(fused[#loc89, #loc90])
#loc676 = loc(fused[#loc91, #loc92])
#loc677 = loc(fused[#loc93, #loc94])
#loc678 = loc(fused[#loc95, #loc87])
#loc679 = loc(fused[#loc97, #loc98])
#loc680 = loc(fused[#loc101, #loc102])
#loc681 = loc(fused[#loc103, #loc98])
#loc682 = loc(fused[#loc109, #loc110])
#loc683 = loc(fused[#loc111, #loc112])
#loc684 = loc(fused[#loc113, #loc114])
#loc685 = loc(fused[#loc115, #loc112])
#loc686 = loc(fused[#loc119, #loc120])
#loc687 = loc(fused[#loc123, #loc124])
#loc688 = loc(fused[#loc125, #loc126])
#loc689 = loc(fused[#loc127, #loc128])
#loc690 = loc(fused[#loc130, #loc131])
#loc691 = loc(fused[#loc132, #loc126])
#loc692 = loc(fused[#loc136, #loc134])
#loc693 = loc(fused[#loc139, #loc140])
#loc694 = loc(fused[#loc142, #loc143])
#loc695 = loc(fused[#loc144, #loc145])
#loc696 = loc(fused[#loc146, #loc143])
#loc697 = loc(fused[#loc149, #loc150])
#loc698 = loc(fused[#loc151, #loc152])
#loc699 = loc(fused[#loc153, #loc150])
#loc700 = loc(fused[#loc157, #loc156])
#loc701 = loc(fused[#loc158, #loc159])
#loc702 = loc(fused[#loc160, #loc161])
#loc703 = loc(fused[#loc162, #loc163, #loc164, #loc159])
#loc704 = loc(fused[#loc165, #loc166])
#loc705 = loc(fused[#loc167, #loc168])
#loc706 = loc(fused[#loc169, #loc170])
#loc707 = loc(fused[#loc171, #loc172])
#loc708 = loc(fused[#loc173, #loc174])
#loc709 = loc(fused[#loc175, #loc176, #loc177, #loc172])
#loc710 = loc(fused[#loc180, #loc178])
#loc711 = loc(fused[#loc181, #loc182])
#loc712 = loc(fused[#loc184, #loc183])
#loc713 = loc(fused[#loc185, #loc186])
#loc714 = loc(fused[#loc188, #loc182])
#loc715 = loc(fused[#loc193, #loc192])
#loc716 = loc(fused[#loc195, #loc196])
#loc717 = loc(fused[#loc197, #loc198])
#loc718 = loc(fused[#loc199, #loc200])
#loc719 = loc(fused[#loc201, #loc202])
#loc720 = loc(fused[#loc203, #loc204])
#loc721 = loc(fused[#loc206, #loc208])
#loc722 = loc(fused[#loc209, #loc210, #loc211, #loc202])
#loc723 = loc(fused[#loc214, #loc212])
#loc724 = loc(fused[#loc215, #loc216])
#loc725 = loc(fused[#loc218, #loc217])
#loc726 = loc(fused[#loc219, #loc220])
#loc727 = loc(fused[#loc222, #loc216])
#loc728 = loc(fused[#loc227, #loc226])
#loc729 = loc(fused[#loc229, #loc230])
#loc730 = loc(fused[#loc231, #loc232])
#loc731 = loc(fused[#loc233, #loc234])
#loc732 = loc(fused[#loc235, #loc236])
#loc733 = loc(fused[#loc237, #loc238])
#loc734 = loc(fused[#loc241, #loc239])
#loc735 = loc(fused[#loc242, #loc243])
#loc736 = loc(fused[#loc244, #loc245])
#loc737 = loc(fused[#loc246, #loc247, #loc248, #loc243])
#loc738 = loc(fused[#loc249, #loc250])
#loc739 = loc(fused[#loc251, #loc252])
#loc740 = loc(fused[#loc253, #loc254])
#loc741 = loc(fused[#loc255, #loc256])
#loc742 = loc(fused[#loc257, #loc258])
#loc743 = loc(fused[#loc259, #loc260])
#loc744 = loc(fused[#loc261, #loc262])
#loc745 = loc(fused[#loc263, #loc264])
#loc746 = loc(fused[#loc269, #loc270])
#loc747 = loc(fused[#loc271, #loc272])
#loc748 = loc(fused[#loc273, #loc274])
#loc749 = loc(fused[#loc275, #loc272])
#loc750 = loc(fused[#loc277, #loc278])
#loc751 = loc(fused[#loc280, #loc281])
#loc752 = loc(fused[#loc282, #loc283])
#loc753 = loc(fused[#loc285, #loc284])
#loc754 = loc(fused[#loc287, #loc286])
#loc755 = loc(fused[#loc290, #loc291])
#loc756 = loc(fused[#loc292, #loc293])
#loc757 = loc(fused[#loc295, #loc296])
#loc758 = loc(fused[#loc297, #loc298])
#loc759 = loc(fused[#loc299, #loc300])
#loc760 = loc(fused[#loc301, #loc293])
#loc761 = loc(fused[#loc303, #loc304])
#loc762 = loc(fused[#loc307, #loc308])
#loc763 = loc(fused[#loc309, #loc304])
#loc764 = loc(fused[#loc315, #loc316])
#loc765 = loc(fused[#loc317, #loc318])
#loc766 = loc(fused[#loc319, #loc320])
#loc767 = loc(fused[#loc321, #loc318])
#loc768 = loc(fused[#loc325, #loc326])
#loc769 = loc(fused[#loc329, #loc330])
#loc770 = loc(fused[#loc331, #loc332])
#loc771 = loc(fused[#loc333, #loc334])
#loc772 = loc(fused[#loc336, #loc337])
#loc773 = loc(fused[#loc338, #loc332])
#loc774 = loc(fused[#loc342, #loc340])
#loc775 = loc(fused[#loc345, #loc346])
#loc776 = loc(fused[#loc348, #loc349])
#loc777 = loc(fused[#loc350, #loc351])
#loc778 = loc(fused[#loc352, #loc349])
#loc779 = loc(fused[#loc355, #loc356])
#loc780 = loc(fused[#loc357, #loc358])
#loc781 = loc(fused[#loc359, #loc356])
#loc782 = loc(fused[#loc362, #loc363])
#loc783 = loc(fused[#loc364, #loc365])
#loc784 = loc(fused[#loc366, #loc367])
#loc785 = loc(fused[#loc368, #loc369])
#loc786 = loc(fused[#loc370, #loc371])
#loc787 = loc(fused[#loc372, #loc373])
#loc788 = loc(fused[#loc374, #loc375])
#loc789 = loc(fused[#loc376, #loc377])
#loc790 = loc(fused[#loc382, #loc383])
#loc791 = loc(fused[#loc384, #loc385])
#loc792 = loc(fused[#loc386, #loc387])
#loc793 = loc(fused[#loc388, #loc385])
#loc794 = loc(fused[#loc390, #loc391])
#loc795 = loc(fused[#loc393, #loc394])
#loc796 = loc(fused[#loc395, #loc396])
#loc797 = loc(fused[#loc398, #loc397])
#loc798 = loc(fused[#loc400, #loc399])
#loc799 = loc(fused[#loc403, #loc404])
#loc800 = loc(fused[#loc405, #loc406])
#loc801 = loc(fused[#loc408, #loc409])
#loc802 = loc(fused[#loc410, #loc411])
#loc803 = loc(fused[#loc412, #loc413])
#loc804 = loc(fused[#loc414, #loc406])
#loc805 = loc(fused[#loc416, #loc417])
#loc806 = loc(fused[#loc420, #loc421])
#loc807 = loc(fused[#loc422, #loc417])
#loc808 = loc(fused[#loc428, #loc429])
#loc809 = loc(fused[#loc430, #loc431])
#loc810 = loc(fused[#loc432, #loc433])
#loc811 = loc(fused[#loc434, #loc431])
#loc812 = loc(fused[#loc438, #loc439])
#loc813 = loc(fused[#loc442, #loc443])
#loc814 = loc(fused[#loc444, #loc445])
#loc815 = loc(fused[#loc446, #loc447])
#loc816 = loc(fused[#loc449, #loc450])
#loc817 = loc(fused[#loc451, #loc445])
#loc818 = loc(fused[#loc455, #loc453])
#loc819 = loc(fused[#loc458, #loc459])
#loc820 = loc(fused[#loc461, #loc462])
#loc821 = loc(fused[#loc463, #loc464])
#loc822 = loc(fused[#loc465, #loc462])
#loc823 = loc(fused[#loc468, #loc469])
#loc824 = loc(fused[#loc470, #loc471])
#loc825 = loc(fused[#loc472, #loc469])
#loc826 = loc(fused[#loc475, #loc476])
#loc827 = loc(fused[#loc477, #loc478])
#loc828 = loc(fused[#loc479, #loc480, #loc481, #loc476])
#loc829 = loc(fused[#loc482, #loc483])
#loc830 = loc(fused[#loc484, #loc485])
#loc831 = loc(fused[#loc486, #loc487])
#loc832 = loc(fused[#loc488, #loc489])
#loc833 = loc(fused[#loc490, #loc491])
#loc834 = loc(fused[#loc493, #loc495])
#loc835 = loc(fused[#loc496, #loc497, #loc498, #loc489])
#loc836 = loc(fused[#loc501, #loc499])
#loc837 = loc(fused[#loc502, #loc503])
#loc838 = loc(fused[#loc505, #loc504])
#loc839 = loc(fused[#loc506, #loc507])
#loc840 = loc(fused[#loc509, #loc503])
#loc841 = loc(fused[#loc514, #loc513])
#loc842 = loc(fused[#loc517, #loc518])
#loc843 = loc(fused[#loc519, #loc520])
#loc844 = loc(fused[#loc521, #loc522])
#loc845 = loc(fused[#loc523, #loc524])
#loc846 = loc(fused[#loc525, #loc526])
#loc847 = loc(fused[#loc528, #loc530])
#loc848 = loc(fused[#loc531, #loc532, #loc533, #loc524])
#loc849 = loc(fused[#loc536, #loc534])
#loc850 = loc(fused[#loc537, #loc538])
#loc851 = loc(fused[#loc540, #loc539])
#loc852 = loc(fused[#loc541, #loc542])
#loc853 = loc(fused[#loc544, #loc538])
#loc854 = loc(fused[#loc549, #loc548])
#loc855 = loc(fused[#loc552, #loc553])
#loc856 = loc(fused[#loc554, #loc555])
#loc857 = loc(fused[#loc558, #loc556])
#loc858 = loc(fused[#loc559, #loc560])
#loc859 = loc(fused[#loc561, #loc562])
#loc860 = loc(fused[#loc563, #loc564, #loc565, #loc560])
#loc861 = loc(fused[#loc567, #loc566])
#loc862 = loc(fused[#loc569, #loc568])
#loc863 = loc(fused[#loc570, #loc571])
#loc864 = loc(fused[#loc572, #loc573])
#loc865 = loc(fused[#loc574, #loc575, #loc576, #loc571])
#loc866 = loc(fused[#loc577, #loc578])
#loc867 = loc(fused[#loc579, #loc580])
#loc868 = loc(fused[#loc581, #loc582])
#loc869 = loc(fused[#loc583, #loc584])
#loc870 = loc(fused[#loc585, #loc586])
#loc871 = loc(fused[#loc587, #loc588, #loc589, #loc584])
#loc872 = loc(fused[#loc592, #loc590])
#loc873 = loc(fused[#loc593, #loc594])
#loc874 = loc(fused[#loc596, #loc595])
#loc875 = loc(fused[#loc597, #loc598])
#loc876 = loc(fused[#loc600, #loc594])
#loc877 = loc(fused[#loc605, #loc604])
#loc878 = loc(fused[#loc608, #loc609])
#loc879 = loc(fused[#loc610, #loc611])
#loc880 = loc(fused[#loc612, #loc613])
#loc881 = loc(fused[#loc614, #loc615])
#loc882 = loc(fused[#loc616, #loc617])
#loc883 = loc(fused[#loc618, #loc619, #loc620, #loc615])
#loc884 = loc(fused[#loc623, #loc621])
#loc885 = loc(fused[#loc624, #loc625])
#loc886 = loc(fused[#loc627, #loc626])
#loc887 = loc(fused[#loc628, #loc629])
#loc888 = loc(fused[#loc631, #loc625])
#loc889 = loc(fused[#loc636, #loc635])
