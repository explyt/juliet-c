!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":22:22)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":22:26)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":70:26)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":70:30)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":48:26)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":48:30)
#loc117 = loc(fused[#loc5, #loc6])
#loc133 = loc(fused[#loc43, #loc44])
#loc150 = loc(fused[#loc87, #loc88])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc115)
  cir.func internal private  @badSource(%arg0: !s32i loc(fused[#loc5, #loc6])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc117)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc4)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc8)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc8)
    %6 = cir.ternary(%5, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc8)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc8)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc8)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc8)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc8)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc8)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc8)
      cir.yield %21 : !u32i loc(#loc8)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc8)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc8)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc8)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc8)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc8)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc8)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc8)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc8)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc8)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc8)
      cir.yield %25 : !u32i loc(#loc8)
    }) : (!cir.bool) -> !u32i loc(#loc8)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc8)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc119)
    cir.return %9 : !s32i loc(#loc119)
  } loc(#loc116)
  cir.func private  @printIntLine(!s32i) loc(#loc120)
  cir.func no_proto  @CWE190_Integer_Overflow__int_rand_multiply_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc122)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc18)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc123)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    %3 = cir.call @badSource(%2) : (!s32i) -> !s32i loc(#loc21)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc27)
      %6 = cir.cmp(gt, %4, %5) : !s32i, !s32i loc(#loc126)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc28)
      cir.if %7 {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc128)
        %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc31)
        %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc32)
        cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc128)
        %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc33)
        cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc34)
      } loc(#loc127)
    } loc(#loc125)
    cir.return loc(#loc15)
  } loc(#loc121)
  cir.func no_proto  @CWE190_Integer_Overflow__int_rand_multiply_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc130)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc131)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc36)
  } loc(#loc129)
  cir.func internal private  @goodB2GSource(%arg0: !s32i loc(fused[#loc43, #loc44])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc133)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc42)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc45)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc46)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc46)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc46)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc46)
    %6 = cir.ternary(%5, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc46)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc46)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc46)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc46)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc46)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc46)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc46)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc46)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc46)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc46)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc46)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc46)
      cir.yield %21 : !u32i loc(#loc46)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc46)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc46)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc46)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc46)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc46)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc46)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc46)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc46)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc46)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc46)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc46)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc46)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc46)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc46)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc46)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc46)
      cir.yield %25 : !u32i loc(#loc46)
    }) : (!cir.bool) -> !u32i loc(#loc46)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc46)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc135)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc135)
    cir.return %9 : !s32i loc(#loc135)
  } loc(#loc132)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc136)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc52)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc138)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc57)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc139)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    %3 = cir.call @goodB2GSource(%2) : (!s32i) -> !s32i loc(#loc60)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc66)
      %6 = cir.cmp(gt, %4, %5) : !s32i, !s32i loc(#loc142)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc67)
      cir.if %7 {
        cir.scope {
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
          %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc72)
          %10 = cir.const #cir.int<2> : !s32i loc(#loc73)
          %11 = cir.binop(div, %9, %10) : !s32i loc(#loc145)
          %12 = cir.cmp(lt, %8, %11) : !s32i, !s32i loc(#loc146)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc75)
          cir.if %13 {
            %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc148)
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
            %16 = cir.const #cir.int<2> : !s32i loc(#loc80)
            %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc81)
            cir.store %17, %14 : !s32i, !cir.ptr<!s32i> loc(#loc148)
            %18 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc82)
            cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc83)
          } else {
            %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc52)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc52)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc84)
          } loc(#loc147)
        } loc(#loc144)
      } loc(#loc143)
    } loc(#loc141)
    cir.return loc(#loc54)
  } loc(#loc137)
  cir.func internal private  @goodG2BSource(%arg0: !s32i loc(fused[#loc87, #loc88])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc150)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc86)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc90)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc152)
    cir.return %4 : !s32i loc(#loc152)
  } loc(#loc149)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc154)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc98)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc155)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
    %3 = cir.call @goodG2BSource(%2) : (!s32i) -> !s32i loc(#loc101)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc156)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc106)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc107)
      %6 = cir.cmp(gt, %4, %5) : !s32i, !s32i loc(#loc158)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc108)
      cir.if %7 {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc160)
        %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc112)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc111)
        %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc112)
        cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc160)
        %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc113)
        cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc114)
      } loc(#loc159)
    } loc(#loc157)
    cir.return loc(#loc95)
  } loc(#loc153)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":27:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":23:1)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":25:12)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":25:5)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":26:12)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":26:5)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":29:1)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":41:1)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":31:5)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":31:9)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":33:12)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":33:5)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":34:22)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":34:12)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":34:5)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":34:26)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":35:5)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":40:5)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":35:8)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":35:15)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":35:13)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":36:5)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":38:9)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":38:29)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":38:22)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":39:22)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":39:9)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":98:1)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":102:1)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":100:5)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":100:13)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":101:5)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":101:13)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":70:1)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":75:1)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":71:1)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":73:12)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":73:5)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":74:12)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":74:5)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":93:23)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":77:1)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":96:1)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":79:5)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":79:9)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":81:12)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":81:5)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":82:26)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":82:12)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":82:5)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":82:30)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":83:5)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":95:5)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":83:8)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":83:15)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":83:13)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":84:5)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":86:9)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":94:9)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":86:13)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":86:21)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":86:29)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":86:30)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":86:18)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":87:9)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":90:9)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":92:9)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":88:13)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":88:33)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":88:26)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":89:26)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":89:13)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":93:13)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":48:1)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":53:1)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":49:1)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":51:12)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":51:5)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":52:12)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":52:5)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":55:1)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":67:1)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":57:5)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":57:9)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":59:12)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":59:5)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":60:26)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":60:12)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":60:5)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":60:30)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":61:5)
#loc105 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":66:5)
#loc106 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":61:8)
#loc107 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":61:15)
#loc108 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":61:13)
#loc109 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":62:5)
#loc110 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":64:9)
#loc111 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":64:29)
#loc112 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":64:22)
#loc113 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":65:22)
#loc114 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":65:9)
#loc115 = loc(fused[#loc1, #loc2])
#loc116 = loc(fused[#loc3, #loc4])
#loc118 = loc(fused[#loc9, #loc8])
#loc119 = loc(fused[#loc11, #loc10])
#loc120 = loc(fused[#loc12, #loc13])
#loc121 = loc(fused[#loc14, #loc15])
#loc122 = loc(fused[#loc16, #loc17])
#loc123 = loc(fused[#loc19, #loc18])
#loc124 = loc(fused[#loc22, #loc23])
#loc125 = loc(fused[#loc24, #loc25])
#loc126 = loc(fused[#loc26, #loc27])
#loc127 = loc(fused[#loc29, #loc25])
#loc128 = loc(fused[#loc30, #loc31])
#loc129 = loc(fused[#loc35, #loc36])
#loc130 = loc(fused[#loc37, #loc38])
#loc131 = loc(fused[#loc39, #loc40])
#loc132 = loc(fused[#loc41, #loc42])
#loc134 = loc(fused[#loc47, #loc46])
#loc135 = loc(fused[#loc49, #loc48])
#loc136 = loc(fused[#loc50, #loc51])
#loc137 = loc(fused[#loc53, #loc54])
#loc138 = loc(fused[#loc55, #loc56])
#loc139 = loc(fused[#loc58, #loc57])
#loc140 = loc(fused[#loc61, #loc62])
#loc141 = loc(fused[#loc63, #loc64])
#loc142 = loc(fused[#loc65, #loc66])
#loc143 = loc(fused[#loc68, #loc64])
#loc144 = loc(fused[#loc69, #loc70])
#loc145 = loc(fused[#loc72, #loc73])
#loc146 = loc(fused[#loc71, #loc74])
#loc147 = loc(fused[#loc76, #loc77, #loc78, #loc70])
#loc148 = loc(fused[#loc79, #loc80])
#loc149 = loc(fused[#loc85, #loc86])
#loc151 = loc(fused[#loc91, #loc90])
#loc152 = loc(fused[#loc93, #loc92])
#loc153 = loc(fused[#loc94, #loc95])
#loc154 = loc(fused[#loc96, #loc97])
#loc155 = loc(fused[#loc99, #loc98])
#loc156 = loc(fused[#loc102, #loc103])
#loc157 = loc(fused[#loc104, #loc105])
#loc158 = loc(fused[#loc106, #loc107])
#loc159 = loc(fused[#loc109, #loc105])
#loc160 = loc(fused[#loc110, #loc111])
