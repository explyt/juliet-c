!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__rand_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc77)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc78)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc79)
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc81)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc12)
  cir.func no_proto @CWE511_Logic_Time_Bomb__rand_15_bad() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc83)
  ^bb1:  // pred: ^bb0
    %0 = cir.const #cir.int<6> : !s32i loc(#loc17)
    cir.br ^bb2 loc(#loc15)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %0 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc15)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc18)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc19)
    %2 = cir.call @time(%1) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc20)
    %3 = cir.cast(integral, %2 : !s64i), !u32i loc(#loc20)
    cir.call @srand(%3) : (!u32i) -> () extra(#fn_attr) loc(#loc21)
    cir.br ^bb5 loc(#loc84)
  ^bb5:  // pred: ^bb4
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %5 = cir.const #cir.int<20000> : !s32i loc(#loc25)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc85)
    cir.brcond %6 ^bb6, ^bb7 loc(#loc86)
  ^bb6:  // pred: ^bb5
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc9)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc9)
    %9 = cir.call @unlink(%8) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc27)
    cir.br ^bb7 loc(#loc23)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc23)
  ^bb8:  // pred: ^bb7
    cir.br ^bb10 loc(#loc28)
  ^bb9:  // pred: ^bb2
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc12)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc12)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc29)
    cir.br ^bb10 loc(#loc30)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc16)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc14)
  } loc(#loc82)
  cir.func no_proto @CWE511_Logic_Time_Bomb__rand_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc88)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc89)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc32)
  } loc(#loc87)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc37)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc91)
  ^bb1:  // pred: ^bb0
    %0 = cir.const #cir.int<5> : !s32i loc(#loc42)
    cir.br ^bb2 loc(#loc40)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %0 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc40)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc43)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc44)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc45)
    cir.br ^bb10 loc(#loc46)
  ^bb5:  // pred: ^bb2
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc47)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc48)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc48)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc49)
    cir.br ^bb6 loc(#loc92)
  ^bb6:  // pred: ^bb5
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %7 = cir.const #cir.int<20000> : !s32i loc(#loc53)
    %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc93)
    cir.brcond %8 ^bb7, ^bb8 loc(#loc94)
  ^bb7:  // pred: ^bb6
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc37)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    cir.br ^bb8 loc(#loc51)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc51)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc56)
  ^bb10:  // 2 preds: ^bb4, ^bb9
    cir.br ^bb11 loc(#loc41)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc39)
  } loc(#loc90)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc96)
  ^bb1:  // pred: ^bb0
    %0 = cir.const #cir.int<6> : !s32i loc(#loc61)
    cir.br ^bb2 loc(#loc59)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %0 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc59)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc62)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc63)
    %2 = cir.call @time(%1) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc64)
    %3 = cir.cast(integral, %2 : !s64i), !u32i loc(#loc64)
    cir.call @srand(%3) : (!u32i) -> () extra(#fn_attr) loc(#loc65)
    cir.br ^bb5 loc(#loc97)
  ^bb5:  // pred: ^bb4
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
    %5 = cir.const #cir.int<20000> : !s32i loc(#loc69)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc98)
    cir.brcond %6 ^bb6, ^bb7 loc(#loc99)
  ^bb6:  // pred: ^bb5
    %7 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc71)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    cir.br ^bb7 loc(#loc67)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc67)
  ^bb8:  // pred: ^bb7
    cir.br ^bb10 loc(#loc73)
  ^bb9:  // pred: ^bb2
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc74)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    cir.br ^bb10 loc(#loc76)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc60)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc58)
  } loc(#loc95)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__rand_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":575:1)
#loc2 = loc("/usr/include/stdlib.h":575:41)
#loc3 = loc("/usr/include/time.h":76:1)
#loc4 = loc("/usr/include/time.h":76:38)
#loc5 = loc("/usr/include/stdlib.h":573:1)
#loc6 = loc("/usr/include/stdlib.h":573:24)
#loc7 = loc("/usr/include/unistd.h":858:1)
#loc8 = loc("/usr/include/unistd.h":858:48)
#loc9 = loc("CWE511_Logic_Time_Bomb__rand_15.c":38:20)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc11 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc12 = loc("CWE511_Logic_Time_Bomb__rand_15.c":43:19)
#loc13 = loc("CWE511_Logic_Time_Bomb__rand_15.c":29:1)
#loc14 = loc("CWE511_Logic_Time_Bomb__rand_15.c":46:1)
#loc15 = loc("CWE511_Logic_Time_Bomb__rand_15.c":31:5)
#loc16 = loc("CWE511_Logic_Time_Bomb__rand_15.c":45:5)
#loc17 = loc("CWE511_Logic_Time_Bomb__rand_15.c":31:12)
#loc18 = loc("CWE511_Logic_Time_Bomb__rand_15.c":33:5)
#loc19 = loc("CWE511_Logic_Time_Bomb__rand_15.c":34:30)
#loc20 = loc("CWE511_Logic_Time_Bomb__rand_15.c":34:25)
#loc21 = loc("CWE511_Logic_Time_Bomb__rand_15.c":34:9)
#loc22 = loc("CWE511_Logic_Time_Bomb__rand_15.c":36:9)
#loc23 = loc("CWE511_Logic_Time_Bomb__rand_15.c":39:9)
#loc24 = loc("CWE511_Logic_Time_Bomb__rand_15.c":36:13)
#loc25 = loc("CWE511_Logic_Time_Bomb__rand_15.c":36:23)
#loc26 = loc("CWE511_Logic_Time_Bomb__rand_15.c":37:9)
#loc27 = loc("CWE511_Logic_Time_Bomb__rand_15.c":38:13)
#loc28 = loc("CWE511_Logic_Time_Bomb__rand_15.c":40:9)
#loc29 = loc("CWE511_Logic_Time_Bomb__rand_15.c":43:9)
#loc30 = loc("CWE511_Logic_Time_Bomb__rand_15.c":44:9)
#loc31 = loc("CWE511_Logic_Time_Bomb__rand_15.c":92:1)
#loc32 = loc("CWE511_Logic_Time_Bomb__rand_15.c":96:1)
#loc33 = loc("CWE511_Logic_Time_Bomb__rand_15.c":94:5)
#loc34 = loc("CWE511_Logic_Time_Bomb__rand_15.c":94:11)
#loc35 = loc("CWE511_Logic_Time_Bomb__rand_15.c":95:5)
#loc36 = loc("CWE511_Logic_Time_Bomb__rand_15.c":95:11)
#loc37 = loc("CWE511_Logic_Time_Bomb__rand_15.c":66:23)
#loc38 = loc("CWE511_Logic_Time_Bomb__rand_15.c":53:1)
#loc39 = loc("CWE511_Logic_Time_Bomb__rand_15.c":70:1)
#loc40 = loc("CWE511_Logic_Time_Bomb__rand_15.c":55:5)
#loc41 = loc("CWE511_Logic_Time_Bomb__rand_15.c":69:5)
#loc42 = loc("CWE511_Logic_Time_Bomb__rand_15.c":55:12)
#loc43 = loc("CWE511_Logic_Time_Bomb__rand_15.c":57:5)
#loc44 = loc("CWE511_Logic_Time_Bomb__rand_15.c":59:19)
#loc45 = loc("CWE511_Logic_Time_Bomb__rand_15.c":59:9)
#loc46 = loc("CWE511_Logic_Time_Bomb__rand_15.c":60:9)
#loc47 = loc("CWE511_Logic_Time_Bomb__rand_15.c":62:30)
#loc48 = loc("CWE511_Logic_Time_Bomb__rand_15.c":62:25)
#loc49 = loc("CWE511_Logic_Time_Bomb__rand_15.c":62:9)
#loc50 = loc("CWE511_Logic_Time_Bomb__rand_15.c":64:9)
#loc51 = loc("CWE511_Logic_Time_Bomb__rand_15.c":67:9)
#loc52 = loc("CWE511_Logic_Time_Bomb__rand_15.c":64:13)
#loc53 = loc("CWE511_Logic_Time_Bomb__rand_15.c":64:23)
#loc54 = loc("CWE511_Logic_Time_Bomb__rand_15.c":65:9)
#loc55 = loc("CWE511_Logic_Time_Bomb__rand_15.c":66:13)
#loc56 = loc("CWE511_Logic_Time_Bomb__rand_15.c":68:9)
#loc57 = loc("CWE511_Logic_Time_Bomb__rand_15.c":73:1)
#loc58 = loc("CWE511_Logic_Time_Bomb__rand_15.c":90:1)
#loc59 = loc("CWE511_Logic_Time_Bomb__rand_15.c":75:5)
#loc60 = loc("CWE511_Logic_Time_Bomb__rand_15.c":89:5)
#loc61 = loc("CWE511_Logic_Time_Bomb__rand_15.c":75:12)
#loc62 = loc("CWE511_Logic_Time_Bomb__rand_15.c":77:5)
#loc63 = loc("CWE511_Logic_Time_Bomb__rand_15.c":78:30)
#loc64 = loc("CWE511_Logic_Time_Bomb__rand_15.c":78:25)
#loc65 = loc("CWE511_Logic_Time_Bomb__rand_15.c":78:9)
#loc66 = loc("CWE511_Logic_Time_Bomb__rand_15.c":80:9)
#loc67 = loc("CWE511_Logic_Time_Bomb__rand_15.c":83:9)
#loc68 = loc("CWE511_Logic_Time_Bomb__rand_15.c":80:13)
#loc69 = loc("CWE511_Logic_Time_Bomb__rand_15.c":80:23)
#loc70 = loc("CWE511_Logic_Time_Bomb__rand_15.c":81:9)
#loc71 = loc("CWE511_Logic_Time_Bomb__rand_15.c":82:23)
#loc72 = loc("CWE511_Logic_Time_Bomb__rand_15.c":82:13)
#loc73 = loc("CWE511_Logic_Time_Bomb__rand_15.c":84:9)
#loc74 = loc("CWE511_Logic_Time_Bomb__rand_15.c":87:19)
#loc75 = loc("CWE511_Logic_Time_Bomb__rand_15.c":87:9)
#loc76 = loc("CWE511_Logic_Time_Bomb__rand_15.c":88:9)
#loc77 = loc(fused[#loc1, #loc2])
#loc78 = loc(fused[#loc3, #loc4])
#loc79 = loc(fused[#loc5, #loc6])
#loc80 = loc(fused[#loc7, #loc8])
#loc81 = loc(fused[#loc10, #loc11])
#loc82 = loc(fused[#loc13, #loc14])
#loc83 = loc(fused[#loc15, #loc16])
#loc84 = loc(fused[#loc22, #loc23])
#loc85 = loc(fused[#loc24, #loc25])
#loc86 = loc(fused[#loc26, #loc23])
#loc87 = loc(fused[#loc31, #loc32])
#loc88 = loc(fused[#loc33, #loc34])
#loc89 = loc(fused[#loc35, #loc36])
#loc90 = loc(fused[#loc38, #loc39])
#loc91 = loc(fused[#loc40, #loc41])
#loc92 = loc(fused[#loc50, #loc51])
#loc93 = loc(fused[#loc52, #loc53])
#loc94 = loc(fused[#loc54, #loc51])
#loc95 = loc(fused[#loc57, #loc58])
#loc96 = loc(fused[#loc59, #loc60])
#loc97 = loc(fused[#loc66, #loc67])
#loc98 = loc(fused[#loc68, #loc69])
#loc99 = loc(fused[#loc70, #loc67])
