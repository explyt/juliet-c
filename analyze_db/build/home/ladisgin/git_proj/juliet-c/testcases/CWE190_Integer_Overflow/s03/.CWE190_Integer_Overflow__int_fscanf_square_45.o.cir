!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":80:24)
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc106)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" internal dsolocal @CWE190_Integer_Overflow__int_fscanf_square_45_badData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc108)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_45_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc110)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc12)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc14)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc107)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc15)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc14)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    %9 = cir.get_global @CWE190_Integer_Overflow__int_fscanf_square_45_badData : !cir.ptr<!s32i> loc(#loc108)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    %10 = cir.get_global @badSink : !cir.ptr<!cir.func<!void ()>> loc(#loc113)
    cir.call %10() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc18)
    cir.return loc(#loc9)
  } loc(#loc109)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_45_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc115)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc22)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc116)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc24)
    cir.return loc(#loc21)
  } loc(#loc114)
  cir.func private @printIntLine(!s32i) loc(#loc117)
  cir.func no_proto internal private @badSink() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc119)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc120)
    %2 = cir.get_global @CWE190_Integer_Overflow__int_fscanf_square_45_badData : !cir.ptr<!s32i> loc(#loc108)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    cir.br ^bb1 loc(#loc121)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc36)
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    %6 = cir.binop(mul, %4, %5) nsw : !s32i loc(#loc36)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc38)
    cir.br ^bb2 loc(#loc35)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc29)
  } loc(#loc118)
  cir.global "private" internal dsolocal @CWE190_Integer_Overflow__int_fscanf_square_45_goodG2BData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc122)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc124)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc45)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc47)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    %4 = cir.get_global @CWE190_Integer_Overflow__int_fscanf_square_45_goodG2BData : !cir.ptr<!s32i> loc(#loc122)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    %5 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void ()>> loc(#loc128)
    cir.call %5() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    cir.return loc(#loc42)
  } loc(#loc123)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc130)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc131)
    %2 = cir.get_global @CWE190_Integer_Overflow__int_fscanf_square_45_goodG2BData : !cir.ptr<!s32i> loc(#loc122)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc58)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    cir.br ^bb1 loc(#loc132)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc56)
    %6 = cir.binop(mul, %4, %5) nsw : !s32i loc(#loc61)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc63)
    cir.br ^bb2 loc(#loc60)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc54)
  } loc(#loc129)
  cir.global "private" internal dsolocal @CWE190_Integer_Overflow__int_fscanf_square_45_goodB2GData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc133)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc135)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc70)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc136)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc72)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc107)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc73)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc74)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc74)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc72)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    %9 = cir.get_global @CWE190_Integer_Overflow__int_fscanf_square_45_goodB2GData : !cir.ptr<!s32i> loc(#loc133)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc137)
    %10 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void ()>> loc(#loc138)
    cir.call %10() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc77)
    cir.return loc(#loc67)
  } loc(#loc134)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc79)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc139)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc82)
  cir.func no_proto internal private @goodB2GSink() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc141)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc142)
    %2 = cir.get_global @CWE190_Integer_Overflow__int_fscanf_square_45_goodB2GData : !cir.ptr<!s32i> loc(#loc133)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc142)
    cir.br ^bb1 loc(#loc143)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc91)
    %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc92)
    %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc92)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc92)
    %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc92)
    %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc144)
    cir.brcond %9 ^bb2, ^bb7 loc(#loc93)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    %11 = cir.abs %10 poison : !s32i loc(#loc95)
    %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc95)
    %13 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc96)
    %14 = cir.const #cir.int<2147483647> : !s32i loc(#loc97)
    %15 = cir.cast(int_to_float, %14 : !s32i), !cir.double loc(#loc97)
    %16 = cir.call @sqrt(%15) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc96)
    %17 = cir.cast(float_to_int, %16 : !cir.double), !s64i loc(#loc96)
    %18 = cir.cmp(lt, %12, %17) : !s64i, !cir.bool loc(#loc145)
    cir.brcond %18 ^bb3, ^bb4 loc(#loc93)
  ^bb3:  // pred: ^bb2
    %19 = cir.const #true loc(#loc93)
    cir.br ^bb5(%19 : !cir.bool) loc(#loc93)
  ^bb4:  // pred: ^bb2
    %20 = cir.const #false loc(#loc93)
    cir.br ^bb5(%20 : !cir.bool) loc(#loc93)
  ^bb5(%21: !cir.bool loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":80:24)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc93)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8(%21 : !cir.bool) loc(#loc93)
  ^bb7:  // pred: ^bb1
    %22 = cir.const #false loc(#loc93)
    cir.br ^bb8(%22 : !cir.bool) loc(#loc93)
  ^bb8(%23: !cir.bool loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":80:24)):  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc93)
  ^bb9:  // pred: ^bb8
    cir.brcond %23 ^bb10, ^bb11 loc(#loc146)
  ^bb10:  // pred: ^bb9
    %24 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    %25 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    %26 = cir.binop(mul, %24, %25) nsw : !s32i loc(#loc102)
    cir.store %26, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    %27 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
    cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc104)
    cir.br ^bb12 loc(#loc100)
  ^bb11:  // pred: ^bb9
    %28 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc82)
    %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc82)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    cir.br ^bb12 loc(#loc90)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc90)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc84)
  } loc(#loc140)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_45.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":44:19)
#loc6 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":22:1)
#loc7 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":22:12)
#loc8 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":38:1)
#loc9 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":47:1)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":40:5)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":40:9)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":42:12)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":42:5)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":44:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":44:12)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":45:61)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":45:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":46:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":46:13)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":102:1)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":106:1)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":104:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":104:13)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":105:5)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":105:13)
#loc26 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc27 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":28:1)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":36:1)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":33:9)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":33:29)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":30:5)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":30:16)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":31:5)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":35:5)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":33:22)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":34:22)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":34:9)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":23:1)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":23:12)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":64:1)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":73:1)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":66:5)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":66:9)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":68:12)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":68:5)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":70:12)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":70:5)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":71:65)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":71:5)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":72:5)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":72:17)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":54:1)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":62:1)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":59:9)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":59:29)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":56:5)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":56:16)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":57:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":61:5)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":59:22)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":60:22)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":60:9)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":24:1)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":24:12)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":91:1)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":100:1)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":93:5)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":93:9)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":95:12)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":95:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":97:5)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":97:12)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":97:19)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":98:65)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":98:5)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":99:5)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":99:17)
#loc79 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc80 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc81 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":87:19)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":76:1)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":89:1)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":82:9)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":82:29)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":78:5)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":78:16)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":80:5)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":88:5)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":80:9)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":80:16)
#loc94 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":80:31)
#loc95 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":80:27)
#loc96 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":80:45)
#loc97 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":80:58)
#loc98 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":80:65)
#loc99 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":81:5)
#loc100 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":84:5)
#loc101 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":86:5)
#loc102 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":82:22)
#loc103 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":83:22)
#loc104 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":83:9)
#loc105 = loc("CWE190_Integer_Overflow__int_fscanf_square_45.c":87:9)
#loc106 = loc(fused[#loc1, #loc2])
#loc107 = loc(fused[#loc3, #loc4])
#loc108 = loc(fused[#loc6, #loc7])
#loc109 = loc(fused[#loc8, #loc9])
#loc110 = loc(fused[#loc10, #loc11])
#loc111 = loc(fused[#loc13, #loc12])
#loc112 = loc(fused[#loc17, #loc16])
#loc113 = loc(fused[#loc18, #loc19])
#loc114 = loc(fused[#loc20, #loc21])
#loc115 = loc(fused[#loc22, #loc23])
#loc116 = loc(fused[#loc24, #loc25])
#loc117 = loc(fused[#loc26, #loc27])
#loc118 = loc(fused[#loc28, #loc29])
#loc119 = loc(fused[#loc30, #loc31])
#loc120 = loc(fused[#loc32, #loc33])
#loc121 = loc(fused[#loc34, #loc35])
#loc122 = loc(fused[#loc39, #loc40])
#loc123 = loc(fused[#loc41, #loc42])
#loc124 = loc(fused[#loc43, #loc44])
#loc125 = loc(fused[#loc46, #loc45])
#loc126 = loc(fused[#loc48, #loc47])
#loc127 = loc(fused[#loc50, #loc49])
#loc128 = loc(fused[#loc51, #loc52])
#loc129 = loc(fused[#loc53, #loc54])
#loc130 = loc(fused[#loc55, #loc56])
#loc131 = loc(fused[#loc57, #loc58])
#loc132 = loc(fused[#loc59, #loc60])
#loc133 = loc(fused[#loc64, #loc65])
#loc134 = loc(fused[#loc66, #loc67])
#loc135 = loc(fused[#loc68, #loc69])
#loc136 = loc(fused[#loc71, #loc70])
#loc137 = loc(fused[#loc76, #loc75])
#loc138 = loc(fused[#loc77, #loc78])
#loc139 = loc(fused[#loc80, #loc81])
#loc140 = loc(fused[#loc83, #loc84])
#loc141 = loc(fused[#loc85, #loc86])
#loc142 = loc(fused[#loc87, #loc88])
#loc143 = loc(fused[#loc89, #loc90])
#loc144 = loc(fused[#loc91, #loc92])
#loc145 = loc(fused[#loc95, #loc98])
#loc146 = loc(fused[#loc99, #loc100, #loc101, #loc90])
