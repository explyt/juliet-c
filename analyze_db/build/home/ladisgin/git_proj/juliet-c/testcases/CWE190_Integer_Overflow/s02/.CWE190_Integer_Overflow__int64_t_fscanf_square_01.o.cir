!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc77)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc79)
  cir.func private @printLongLongLine(!s64i) loc(#loc80)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_square_01_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc82)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc83)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc15)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc84)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc17)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc78)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc18)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc79)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc79)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc17)
    cir.br ^bb1 loc(#loc85)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc21)
    %10 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc12)
    %11 = cir.binop(mul, %9, %10) nsw : !s64i loc(#loc21)
    cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc82)
    %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc22)
    cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc23)
    cir.br ^bb2 loc(#loc20)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc10)
  } loc(#loc81)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_square_01_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc87)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc26)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc88)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    cir.return loc(#loc25)
  } loc(#loc86)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc90)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc91)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc36)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc92)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc38)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc38)
    cir.store %4, %1 : !s64i, !cir.ptr<!s64i> loc(#loc93)
    cir.br ^bb1 loc(#loc94)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc42)
    %6 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc33)
    %7 = cir.binop(mul, %5, %6) nsw : !s64i loc(#loc42)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc90)
    %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc43)
    cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc44)
    cir.br ^bb2 loc(#loc41)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc31)
  } loc(#loc89)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc95)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc47)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc96)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc50)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc98)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc99)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc57)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc100)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc59)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc78)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc60)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc101)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc101)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc59)
    cir.br ^bb1 loc(#loc102)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc65)
    %10 = cir.call @imaxabs(%9) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc66)
    %11 = cir.cast(int_to_float, %10 : !s64i), !cir.long_double<!cir.f80> loc(#loc66)
    %12 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc67)
    %13 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc68)
    %14 = cir.cast(int_to_float, %13 : !s64i), !cir.long_double<!cir.f80> loc(#loc68)
    %15 = cir.call @sqrtl(%14) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc67)
    %16 = cir.cmp(le, %11, %15) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc103)
    cir.brcond %16 ^bb2, ^bb3 loc(#loc104)
  ^bb2:  // pred: ^bb1
    %17 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc73)
    %18 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc54)
    %19 = cir.binop(mul, %17, %18) nsw : !s64i loc(#loc73)
    cir.store %19, %0 : !s64i, !cir.ptr<!s64i> loc(#loc98)
    %20 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc74)
    cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc75)
    cir.br ^bb4 loc(#loc71)
  ^bb3:  // pred: ^bb1
    %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc50)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    cir.br ^bb4 loc(#loc64)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc64)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc52)
  } loc(#loc97)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":30:20)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":30:24)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":25:1)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":36:1)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":33:9)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":33:33)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":27:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":27:13)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":28:12)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":28:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":30:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":30:13)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":31:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":35:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":33:26)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":34:27)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":34:9)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":75:1)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":79:1)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":77:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":77:13)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":78:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":78:13)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":43:1)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":54:1)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":51:9)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":51:33)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":45:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":45:13)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":46:12)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":46:5)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":48:12)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":48:5)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":49:5)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":53:5)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":51:26)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":52:27)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":52:9)
#loc45 = loc("/usr/include/inttypes.h":351:1)
#loc46 = loc("/usr/include/inttypes.h":351:74)
#loc47 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":71:19)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":57:1)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":73:1)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":66:9)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":66:33)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":59:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":59:13)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":60:12)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":60:5)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":62:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":62:13)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":62:20)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":62:24)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":64:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":72:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":64:27)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":64:9)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":64:36)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":64:42)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":64:51)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":65:5)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":68:5)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":70:5)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":66:26)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":67:27)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":67:9)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_01.c":71:9)
#loc77 = loc(fused[#loc1, #loc2])
#loc78 = loc(fused[#loc3, #loc4])
#loc79 = loc(fused[#loc5, #loc6])
#loc80 = loc(fused[#loc7, #loc8])
#loc81 = loc(fused[#loc9, #loc10])
#loc82 = loc(fused[#loc11, #loc12])
#loc83 = loc(fused[#loc13, #loc14])
#loc84 = loc(fused[#loc16, #loc15])
#loc85 = loc(fused[#loc19, #loc20])
#loc86 = loc(fused[#loc24, #loc25])
#loc87 = loc(fused[#loc26, #loc27])
#loc88 = loc(fused[#loc28, #loc29])
#loc89 = loc(fused[#loc30, #loc31])
#loc90 = loc(fused[#loc32, #loc33])
#loc91 = loc(fused[#loc34, #loc35])
#loc92 = loc(fused[#loc37, #loc36])
#loc93 = loc(fused[#loc39, #loc38])
#loc94 = loc(fused[#loc40, #loc41])
#loc95 = loc(fused[#loc45, #loc46])
#loc96 = loc(fused[#loc48, #loc49])
#loc97 = loc(fused[#loc51, #loc52])
#loc98 = loc(fused[#loc53, #loc54])
#loc99 = loc(fused[#loc55, #loc56])
#loc100 = loc(fused[#loc58, #loc57])
#loc101 = loc(fused[#loc61, #loc62])
#loc102 = loc(fused[#loc63, #loc64])
#loc103 = loc(fused[#loc66, #loc69])
#loc104 = loc(fused[#loc70, #loc71, #loc72, #loc64])
