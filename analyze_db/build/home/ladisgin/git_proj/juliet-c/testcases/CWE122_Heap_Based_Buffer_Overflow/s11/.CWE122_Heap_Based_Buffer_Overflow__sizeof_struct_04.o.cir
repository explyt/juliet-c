!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc116)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc117)
  cir.func private @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc118)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc119)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc121)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc122)
    cir.br ^bb1 loc(#loc123)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %3 ^bb2, ^bb7 loc(#loc124)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc19)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc125)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc19)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc126)
    cir.store %7, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc127)
    cir.br ^bb3 loc(#loc128)
  ^bb3:  // pred: ^bb2
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc26)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc27)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc27)
    %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc129)
    cir.brcond %11 ^bb4, ^bb5 loc(#loc130)
  ^bb4:  // pred: ^bb3
    %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc29)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc31)
    cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc29)
    cir.br ^bb5 loc(#loc25)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc25)
  ^bb6:  // pred: ^bb5
    %15 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc33)
    %17 = cir.get_member %16[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc34)
    cir.store %15, %17 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    %18 = cir.const #cir.int<2> : !s32i loc(#loc35)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc36)
    %20 = cir.get_member %19[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc37)
    cir.store %18, %20 : !s32i, !cir.ptr<!s32i> loc(#loc132)
    cir.br ^bb7 loc(#loc16)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc16)
  ^bb8:  // pred: ^bb7
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc38)
    cir.call @printStructLine(%21) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc39)
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc40)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc40)
    cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc41)
    cir.return loc(#loc10)
  } loc(#loc120)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc134)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc135)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    cir.return loc(#loc43)
  } loc(#loc133)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc136)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc50)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc138)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc55)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc139)
    cir.br ^bb1 loc(#loc140)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<0> : !s32i loc(#loc59)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc59)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc141)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc50)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    cir.br ^bb8 loc(#loc61)
  ^bb3:  // pred: ^bb1
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc64)
    %7 = cir.const #cir.int<8> : !u64i loc(#loc142)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc64)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc143)
    cir.store %9, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc144)
    cir.br ^bb4 loc(#loc145)
  ^bb4:  // pred: ^bb3
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc71)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc72)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc72)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc146)
    cir.brcond %13 ^bb5, ^bb6 loc(#loc147)
  ^bb5:  // pred: ^bb4
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc74)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc76)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc74)
    cir.br ^bb6 loc(#loc70)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc70)
  ^bb7:  // pred: ^bb6
    %17 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc78)
    %19 = cir.get_member %18[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc34)
    cir.store %17, %19 : !s32i, !cir.ptr<!s32i> loc(#loc148)
    %20 = cir.const #cir.int<2> : !s32i loc(#loc79)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc80)
    %22 = cir.get_member %21[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc37)
    cir.store %20, %22 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    cir.br ^bb8 loc(#loc58)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc58)
  ^bb9:  // pred: ^bb8
    %23 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc81)
    cir.call @printStructLine(%23) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc82)
    %24 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc83)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc83)
    cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc84)
    cir.return loc(#loc52)
  } loc(#loc137)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc151)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc89)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc152)
    cir.br ^bb1 loc(#loc153)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<1> : !s32i loc(#loc93)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc93)
    cir.brcond %3 ^bb2, ^bb7 loc(#loc154)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc95)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc155)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc95)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc156)
    cir.store %7, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc157)
    cir.br ^bb3 loc(#loc158)
  ^bb3:  // pred: ^bb2
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc102)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc103)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc103)
    %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc159)
    cir.brcond %11 ^bb4, ^bb5 loc(#loc160)
  ^bb4:  // pred: ^bb3
    %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc105)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc106)
    %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc107)
    cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc105)
    cir.br ^bb5 loc(#loc101)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc101)
  ^bb6:  // pred: ^bb5
    %15 = cir.const #cir.int<1> : !s32i loc(#loc108)
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc109)
    %17 = cir.get_member %16[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc34)
    cir.store %15, %17 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    %18 = cir.const #cir.int<2> : !s32i loc(#loc110)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc111)
    %20 = cir.get_member %19[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc37)
    cir.store %18, %20 : !s32i, !cir.ptr<!s32i> loc(#loc162)
    cir.br ^bb7 loc(#loc92)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc92)
  ^bb8:  // pred: ^bb7
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc112)
    cir.call @printStructLine(%21) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc113)
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc114)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc114)
    cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc115)
    cir.return loc(#loc86)
  } loc(#loc150)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":28:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":45:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":30:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":30:21)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":32:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":32:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":33:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":41:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":33:8)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":34:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":37:33)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":37:40)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":37:51)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":37:52)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":37:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":38:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":38:37)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":38:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":38:21)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":38:27)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":38:28)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":38:34)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":38:33)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":39:24)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":39:9)
#loc34 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":40:24)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":40:9)
#loc37 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":43:21)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":43:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":44:10)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":44:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":94:1)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":98:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":96:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":96:14)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":97:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":97:14)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":60:19)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":52:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":73:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":54:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":54:21)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":56:12)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":56:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":57:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":69:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":57:8)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":58:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":61:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":63:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":60:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":65:33)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":65:40)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":65:52)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":65:53)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":65:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":66:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":66:37)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":66:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":66:21)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":66:27)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":66:28)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":66:34)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":66:33)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":67:24)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":67:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":68:24)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":68:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":71:21)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":71:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":72:10)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":72:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":76:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":92:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":78:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":78:21)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":80:12)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":80:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":81:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":88:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":81:8)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":82:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":84:33)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":84:40)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":84:52)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":84:53)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":84:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":85:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":85:37)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":85:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":85:21)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":85:27)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":85:28)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":85:34)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":85:33)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":86:24)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":86:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":87:24)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":87:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":90:21)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":90:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":91:10)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c":91:5)
#loc116 = loc(fused[#loc1, #loc2])
#loc117 = loc(fused[#loc3, #loc4])
#loc118 = loc(fused[#loc5, #loc6])
#loc119 = loc(fused[#loc7, #loc8])
#loc120 = loc(fused[#loc9, #loc10])
#loc121 = loc(fused[#loc11, #loc12])
#loc122 = loc(fused[#loc14, #loc13])
#loc123 = loc(fused[#loc15, #loc16])
#loc124 = loc(fused[#loc18, #loc16])
#loc125 = loc(fused[#loc20, #loc21])
#loc126 = loc(fused[#loc19, #loc22])
#loc127 = loc(fused[#loc23, #loc22])
#loc128 = loc(fused[#loc24, #loc25])
#loc129 = loc(fused[#loc26, #loc27])
#loc130 = loc(fused[#loc28, #loc25])
#loc131 = loc(fused[#loc33, #loc32])
#loc132 = loc(fused[#loc36, #loc35])
#loc133 = loc(fused[#loc42, #loc43])
#loc134 = loc(fused[#loc44, #loc45])
#loc135 = loc(fused[#loc46, #loc47])
#loc136 = loc(fused[#loc48, #loc49])
#loc137 = loc(fused[#loc51, #loc52])
#loc138 = loc(fused[#loc53, #loc54])
#loc139 = loc(fused[#loc56, #loc55])
#loc140 = loc(fused[#loc57, #loc58])
#loc141 = loc(fused[#loc60, #loc61, #loc62, #loc58])
#loc142 = loc(fused[#loc65, #loc66])
#loc143 = loc(fused[#loc64, #loc67])
#loc144 = loc(fused[#loc68, #loc67])
#loc145 = loc(fused[#loc69, #loc70])
#loc146 = loc(fused[#loc71, #loc72])
#loc147 = loc(fused[#loc73, #loc70])
#loc148 = loc(fused[#loc78, #loc77])
#loc149 = loc(fused[#loc80, #loc79])
#loc150 = loc(fused[#loc85, #loc86])
#loc151 = loc(fused[#loc87, #loc88])
#loc152 = loc(fused[#loc90, #loc89])
#loc153 = loc(fused[#loc91, #loc92])
#loc154 = loc(fused[#loc94, #loc92])
#loc155 = loc(fused[#loc96, #loc97])
#loc156 = loc(fused[#loc95, #loc98])
#loc157 = loc(fused[#loc99, #loc98])
#loc158 = loc(fused[#loc100, #loc101])
#loc159 = loc(fused[#loc102, #loc103])
#loc160 = loc(fused[#loc104, #loc101])
#loc161 = loc(fused[#loc109, #loc108])
#loc162 = loc(fused[#loc111, #loc110])
