!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":22:21)
#loc6 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":22:27)
#loc38 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":49:25)
#loc39 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":49:31)
#loc68 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":70:25)
#loc69 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":70:31)
#loc105 = loc(fused[#loc5, #loc6])
#loc119 = loc(fused[#loc38, #loc39])
#loc131 = loc(fused[#loc68, #loc69])
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_multiply_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc103)
  cir.func internal private @badSink(%arg0: !s16i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc105)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc7)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc10)
      %2 = cir.cast(integral, %1 : !s16i), !s32i loc(#loc10)
      %3 = cir.const #cir.int<0> : !s32i loc(#loc11)
      %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc107)
      cir.if %4 {
        %5 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc109)
        %6 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc15)
        %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc15)
        %8 = cir.const #cir.int<2> : !s32i loc(#loc14)
        %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc15)
        %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc15)
        cir.store %10, %5 : !s16i, !cir.ptr<!s16i> loc(#loc109)
        %11 = cir.load %5 : !cir.ptr<!s16i>, !s16i loc(#loc16)
        %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc16)
        cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc17)
      } loc(#loc108)
    } loc(#loc106)
    cir.return loc(#loc4)
  } loc(#loc104)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_multiply_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc111)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s16i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s16i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc112)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!s16i)>> loc(#loc23)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s16i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s16i)>>> loc(#loc112)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc24)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc24)
    cir.store %4, %0 : !s16i, !cir.ptr<!s16i> loc(#loc113)
    %5 = cir.const #cir.int<32767> : !s32i loc(#loc26)
    %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc26)
    cir.store %6, %0 : !s16i, !cir.ptr<!s16i> loc(#loc114)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s16i)>>>, !cir.ptr<!cir.func<(!s16i)>> loc(#loc28)
    %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc29)
    cir.call %7(%8) : (!cir.ptr<!cir.func<(!s16i)>>, !s16i) -> () loc(#loc28)
    cir.return loc(#loc19)
  } loc(#loc110)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_multiply_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc116)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc117)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc115)
  cir.func internal private @goodG2BSink(%arg0: !s16i loc(fused[#loc38, #loc39])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc119)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc40)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc43)
      %2 = cir.cast(integral, %1 : !s16i), !s32i loc(#loc43)
      %3 = cir.const #cir.int<0> : !s32i loc(#loc44)
      %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc121)
      cir.if %4 {
        %5 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc123)
        %6 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc48)
        %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc48)
        %8 = cir.const #cir.int<2> : !s32i loc(#loc47)
        %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc48)
        %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc48)
        cir.store %10, %5 : !s16i, !cir.ptr<!s16i> loc(#loc123)
        %11 = cir.load %5 : !cir.ptr<!s16i>, !s16i loc(#loc49)
        %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc49)
        cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc50)
      } loc(#loc122)
    } loc(#loc120)
    cir.return loc(#loc37)
  } loc(#loc118)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc125)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s16i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s16i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc126)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!s16i)>> loc(#loc56)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s16i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s16i)>>> loc(#loc126)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc57)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc57)
    cir.store %4, %0 : !s16i, !cir.ptr<!s16i> loc(#loc127)
    %5 = cir.const #cir.int<2> : !s32i loc(#loc59)
    %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc59)
    cir.store %6, %0 : !s16i, !cir.ptr<!s16i> loc(#loc128)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s16i)>>>, !cir.ptr<!cir.func<(!s16i)>> loc(#loc61)
    %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc62)
    cir.call %7(%8) : (!cir.ptr<!cir.func<(!s16i)>>, !s16i) -> () loc(#loc61)
    cir.return loc(#loc52)
  } loc(#loc124)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc129)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc65)
  cir.func internal private @goodB2GSink(%arg0: !s16i loc(fused[#loc68, #loc69])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc131)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc70)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc73)
      %2 = cir.cast(integral, %1 : !s16i), !s32i loc(#loc73)
      %3 = cir.const #cir.int<0> : !s32i loc(#loc74)
      %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc133)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc78)
          %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc78)
          %7 = cir.const #cir.int<32767> : !s32i loc(#loc79)
          %8 = cir.const #cir.int<2> : !s32i loc(#loc80)
          %9 = cir.binop(div, %7, %8) : !s32i loc(#loc136)
          %10 = cir.cmp(lt, %6, %9) : !s32i, !cir.bool loc(#loc137)
          cir.if %10 {
            %11 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc139)
            %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc87)
            %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc87)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc86)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc87)
            %16 = cir.cast(integral, %15 : !s32i), !s16i loc(#loc87)
            cir.store %16, %11 : !s16i, !cir.ptr<!s16i> loc(#loc139)
            %17 = cir.load %11 : !cir.ptr<!s16i>, !s16i loc(#loc88)
            %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc88)
            cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc89)
          } else {
            %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc65)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc65)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc90)
          } loc(#loc138)
        } loc(#loc135)
      } loc(#loc134)
    } loc(#loc132)
    cir.return loc(#loc67)
  } loc(#loc130)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc141)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s16i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s16i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc142)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<(!s16i)>> loc(#loc96)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s16i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s16i)>>> loc(#loc142)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc97)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc97)
    cir.store %4, %0 : !s16i, !cir.ptr<!s16i> loc(#loc143)
    %5 = cir.const #cir.int<32767> : !s32i loc(#loc99)
    %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc99)
    cir.store %6, %0 : !s16i, !cir.ptr<!s16i> loc(#loc144)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s16i)>>>, !cir.ptr<!cir.func<(!s16i)>> loc(#loc101)
    %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc102)
    cir.call %7(%8) : (!cir.ptr<!cir.func<(!s16i)>>, !s16i) -> () loc(#loc101)
    cir.return loc(#loc92)
  } loc(#loc140)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_multiply_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":30:1)
#loc7 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":23:1)
#loc8 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":24:5)
#loc9 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":29:5)
#loc10 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":24:8)
#loc11 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":24:15)
#loc12 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":25:5)
#loc13 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":27:9)
#loc14 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":27:31)
#loc15 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":27:24)
#loc16 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":28:22)
#loc17 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":28:9)
#loc18 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":32:1)
#loc19 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":42:1)
#loc20 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":34:5)
#loc21 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":34:11)
#loc22 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":36:5)
#loc23 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":36:31)
#loc24 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":37:12)
#loc25 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":37:5)
#loc26 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":39:12)
#loc27 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":39:5)
#loc28 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":41:5)
#loc29 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":41:13)
#loc30 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":97:1)
#loc31 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":101:1)
#loc32 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":99:5)
#loc33 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":99:13)
#loc34 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":100:5)
#loc35 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":100:13)
#loc36 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":49:1)
#loc37 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":57:1)
#loc40 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":50:1)
#loc41 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":51:5)
#loc42 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":56:5)
#loc43 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":51:8)
#loc44 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":51:15)
#loc45 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":52:5)
#loc46 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":54:9)
#loc47 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":54:31)
#loc48 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":54:24)
#loc49 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":55:22)
#loc50 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":55:9)
#loc51 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":59:1)
#loc52 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":67:1)
#loc53 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":61:5)
#loc54 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":61:11)
#loc55 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":62:5)
#loc56 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":62:31)
#loc57 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":63:12)
#loc58 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":63:5)
#loc59 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":65:12)
#loc60 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":65:5)
#loc61 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":66:5)
#loc62 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":66:13)
#loc63 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc64 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc65 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":82:23)
#loc66 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":70:1)
#loc67 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":85:1)
#loc70 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":71:1)
#loc71 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":72:5)
#loc72 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":84:5)
#loc73 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":72:8)
#loc74 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":72:15)
#loc75 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":73:5)
#loc76 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":75:9)
#loc77 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":83:9)
#loc78 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":75:13)
#loc79 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":75:21)
#loc80 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":75:30)
#loc81 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":75:31)
#loc82 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":76:9)
#loc83 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":79:9)
#loc84 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":81:9)
#loc85 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":77:13)
#loc86 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":77:35)
#loc87 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":77:28)
#loc88 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":78:26)
#loc89 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":78:13)
#loc90 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":82:13)
#loc91 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":87:1)
#loc92 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":95:1)
#loc93 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":89:5)
#loc94 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":89:11)
#loc95 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":90:5)
#loc96 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":90:31)
#loc97 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":91:12)
#loc98 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":91:5)
#loc99 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":93:12)
#loc100 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":93:5)
#loc101 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":94:5)
#loc102 = loc("CWE190_Integer_Overflow__short_max_multiply_44.c":94:13)
#loc103 = loc(fused[#loc1, #loc2])
#loc104 = loc(fused[#loc3, #loc4])
#loc106 = loc(fused[#loc8, #loc9])
#loc107 = loc(fused[#loc10, #loc11])
#loc108 = loc(fused[#loc12, #loc9])
#loc109 = loc(fused[#loc13, #loc14])
#loc110 = loc(fused[#loc18, #loc19])
#loc111 = loc(fused[#loc20, #loc21])
#loc112 = loc(fused[#loc22, #loc23])
#loc113 = loc(fused[#loc25, #loc24])
#loc114 = loc(fused[#loc27, #loc26])
#loc115 = loc(fused[#loc30, #loc31])
#loc116 = loc(fused[#loc32, #loc33])
#loc117 = loc(fused[#loc34, #loc35])
#loc118 = loc(fused[#loc36, #loc37])
#loc120 = loc(fused[#loc41, #loc42])
#loc121 = loc(fused[#loc43, #loc44])
#loc122 = loc(fused[#loc45, #loc42])
#loc123 = loc(fused[#loc46, #loc47])
#loc124 = loc(fused[#loc51, #loc52])
#loc125 = loc(fused[#loc53, #loc54])
#loc126 = loc(fused[#loc55, #loc56])
#loc127 = loc(fused[#loc58, #loc57])
#loc128 = loc(fused[#loc60, #loc59])
#loc129 = loc(fused[#loc63, #loc64])
#loc130 = loc(fused[#loc66, #loc67])
#loc132 = loc(fused[#loc71, #loc72])
#loc133 = loc(fused[#loc73, #loc74])
#loc134 = loc(fused[#loc75, #loc72])
#loc135 = loc(fused[#loc76, #loc77])
#loc136 = loc(fused[#loc79, #loc80])
#loc137 = loc(fused[#loc78, #loc81])
#loc138 = loc(fused[#loc82, #loc83, #loc84, #loc77])
#loc139 = loc(fused[#loc85, #loc86])
#loc140 = loc(fused[#loc91, #loc92])
#loc141 = loc(fused[#loc93, #loc94])
#loc142 = loc(fused[#loc95, #loc96])
#loc143 = loc(fused[#loc98, #loc97])
#loc144 = loc(fused[#loc100, #loc99])
