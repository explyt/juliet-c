!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc21 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":44:21)
#loc22 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":44:25)
#loc164 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":149:25)
#loc165 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":149:29)
#loc302 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":132:25)
#loc303 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":132:29)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc329 = loc(fused[#loc21, #loc22])
#loc383 = loc(fused[#loc164, #loc165])
#loc436 = loc(fused[#loc302, #loc303])
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc319)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc320)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc321)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc322)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc323)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc324)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc325)
  cir.func private @close(!s32i) -> !s32i loc(#loc326)
  cir.func private @printIntLine(!s32i) loc(#loc327)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc21, #loc22])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc329)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc23)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc24)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %3 = cir.binop(rem, %1, %2) : !s32i loc(#loc330)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc26)
    cir.return loc(#loc20)
  } loc(#loc328)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_modulo_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc332)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc32)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc333)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc335)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc336)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc337)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc338)
      %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc339)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc41)
      %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc41)
      cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc337)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc43)
      %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc43)
      cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc338)
      cir.scope {
        cir.do {
          cir.scope {
            %13 = cir.const #cir.int<2> : !s32i loc(#loc50)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc51)
            %15 = cir.const #cir.int<6> : !s32i loc(#loc52)
            %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc53)
            cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc342)
            cir.scope {
              %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc58)
              %59 = cir.const #cir.int<1> : !s32i loc(#loc59)
              %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc59)
              %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc344)
              cir.if %61 {
                cir.break loc(#loc61)
              } loc(#loc345)
            } loc(#loc343)
            %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc346)
            %18 = cir.const #cir.int<0> : !s32i loc(#loc64)
            %19 = cir.const #cir.int<16> : !u64i loc(#loc347)
            cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc348)
            %20 = cir.const #cir.int<2> : !s32i loc(#loc69)
            %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc69)
            %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
            cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc349)
            %23 = cir.const #cir.int<0> : !s32i loc(#loc72)
            %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc72)
            %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
            %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc74)
            cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc350)
            %27 = cir.const #cir.int<27015> : !s32i loc(#loc76)
            %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc76)
            %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc77)
            %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
            cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc351)
            cir.scope {
              %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc83)
              %59 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc353)
              %60 = cir.const #cir.int<16> : !u64i loc(#loc354)
              %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc354)
              %62 = cir.call @bind(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc88)
              %63 = cir.const #cir.int<1> : !s32i loc(#loc89)
              %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc89)
              %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc355)
              cir.if %65 {
                cir.break loc(#loc91)
              } loc(#loc356)
            } loc(#loc352)
            cir.scope {
              %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc94)
              %59 = cir.const #cir.int<5> : !s32i loc(#loc95)
              %60 = cir.call @listen(%58, %59) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc96)
              %61 = cir.const #cir.int<1> : !s32i loc(#loc97)
              %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc97)
              %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc358)
              cir.if %63 {
                cir.break loc(#loc99)
              } loc(#loc359)
            } loc(#loc357)
            %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc100)
            %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc101)
            %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc102)
            %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc103)
            cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc360)
            cir.scope {
              %58 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc108)
              %59 = cir.const #cir.int<1> : !s32i loc(#loc109)
              %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc109)
              %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc362)
              cir.if %61 {
                cir.break loc(#loc111)
              } loc(#loc363)
            } loc(#loc361)
            %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc112)
            %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc113)
            %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc113)
            %38 = cir.const #cir.int<3> : !s32i loc(#loc114)
            %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc114)
            %40 = cir.const #cir.int<4> : !u64i loc(#loc114)
            %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc114)
            %42 = cir.const #cir.int<2> : !s32i loc(#loc114)
            %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc114)
            %44 = cir.binop(add, %41, %43) : !u64i loc(#loc114)
            %45 = cir.const #cir.int<1> : !s32i loc(#loc115)
            %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc115)
            %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc364)
            %48 = cir.const #cir.int<0> : !s32i loc(#loc116)
            %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc117)
            %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc117)
            cir.store %50, %4 : !s32i, !cir.ptr<!s32i> loc(#loc365)
            cir.scope {
              %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc122)
              %59 = cir.const #cir.int<1> : !s32i loc(#loc123)
              %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc123)
              %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc367)
              %62 = cir.ternary(%61, true {
                %63 = cir.const #true loc(#loc124)
                cir.yield %63 : !cir.bool loc(#loc124)
              }, false {
                %63 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc125)
                %64 = cir.const #cir.int<0> : !s32i loc(#loc126)
                %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc368)
                %66 = cir.ternary(%65, true {
                  %67 = cir.const #true loc(#loc124)
                  cir.yield %67 : !cir.bool loc(#loc124)
                }, false {
                  %67 = cir.const #false loc(#loc124)
                  cir.yield %67 : !cir.bool loc(#loc124)
                }) : (!cir.bool) -> !cir.bool loc(#loc124)
                cir.yield %66 : !cir.bool loc(#loc124)
              }) : (!cir.bool) -> !cir.bool loc(#loc124)
              cir.if %62 {
                cir.break loc(#loc128)
              } loc(#loc369)
            } loc(#loc366)
            %51 = cir.const #cir.int<0> : !s32i loc(#loc129)
            %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc129)
            %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc130)
            %54 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc131)
            %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc131)
            cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc370)
            %56 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc132)
            %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc133)
            cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc371)
          } loc(#loc341)
          cir.yield loc(#loc47)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc136)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc136)
          cir.condition(%14) loc(#loc136)
        } loc(#loc340)
      } loc(#loc340)
      cir.scope {
        %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc139)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc140)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc140)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc373)
        cir.if %16 {
          %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc142)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc143)
        } loc(#loc374)
      } loc(#loc372)
      cir.scope {
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc146)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc147)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc147)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc376)
        cir.if %16 {
          %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc149)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc150)
        } loc(#loc377)
      } loc(#loc375)
    } loc(#loc334)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    cir.call @badSink(%3) : (!s32i) -> () loc(#loc152)
    cir.return loc(#loc28)
  } loc(#loc331)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_modulo_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc379)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc155)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc380)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc157)
    cir.return loc(#loc154)
  } loc(#loc378)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc381)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc161)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc164, #loc165])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc383)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc169)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc170)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc385)
      cir.if %3 {
        %4 = cir.const #cir.int<100> : !s32i loc(#loc174)
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc175)
        %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc387)
        cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc176)
      } else {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc161)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc161)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc177)
      } loc(#loc386)
    } loc(#loc384)
    cir.return loc(#loc163)
  } loc(#loc382)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc389)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc182)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc183)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc390)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc392)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc393)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc394)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc395)
      %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc396)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc192)
      %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc192)
      cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc394)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc194)
      %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc194)
      cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc395)
      cir.scope {
        cir.do {
          cir.scope {
            %13 = cir.const #cir.int<2> : !s32i loc(#loc201)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc202)
            %15 = cir.const #cir.int<6> : !s32i loc(#loc203)
            %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc204)
            cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc399)
            cir.scope {
              %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc209)
              %59 = cir.const #cir.int<1> : !s32i loc(#loc210)
              %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc210)
              %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc401)
              cir.if %61 {
                cir.break loc(#loc212)
              } loc(#loc402)
            } loc(#loc400)
            %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc403)
            %18 = cir.const #cir.int<0> : !s32i loc(#loc215)
            %19 = cir.const #cir.int<16> : !u64i loc(#loc404)
            cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc405)
            %20 = cir.const #cir.int<2> : !s32i loc(#loc220)
            %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc220)
            %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
            cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc406)
            %23 = cir.const #cir.int<0> : !s32i loc(#loc222)
            %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc222)
            %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
            %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc74)
            cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc407)
            %27 = cir.const #cir.int<27015> : !s32i loc(#loc224)
            %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc224)
            %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc225)
            %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
            cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc408)
            cir.scope {
              %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc230)
              %59 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc410)
              %60 = cir.const #cir.int<16> : !u64i loc(#loc411)
              %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc411)
              %62 = cir.call @bind(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc235)
              %63 = cir.const #cir.int<1> : !s32i loc(#loc236)
              %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc236)
              %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc412)
              cir.if %65 {
                cir.break loc(#loc238)
              } loc(#loc413)
            } loc(#loc409)
            cir.scope {
              %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc241)
              %59 = cir.const #cir.int<5> : !s32i loc(#loc242)
              %60 = cir.call @listen(%58, %59) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc243)
              %61 = cir.const #cir.int<1> : !s32i loc(#loc244)
              %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc244)
              %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc415)
              cir.if %63 {
                cir.break loc(#loc246)
              } loc(#loc416)
            } loc(#loc414)
            %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc247)
            %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc248)
            %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc249)
            %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc250)
            cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc417)
            cir.scope {
              %58 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc255)
              %59 = cir.const #cir.int<1> : !s32i loc(#loc256)
              %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc256)
              %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc419)
              cir.if %61 {
                cir.break loc(#loc258)
              } loc(#loc420)
            } loc(#loc418)
            %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc259)
            %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc260)
            %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc260)
            %38 = cir.const #cir.int<3> : !s32i loc(#loc261)
            %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc261)
            %40 = cir.const #cir.int<4> : !u64i loc(#loc261)
            %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc261)
            %42 = cir.const #cir.int<2> : !s32i loc(#loc261)
            %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc261)
            %44 = cir.binop(add, %41, %43) : !u64i loc(#loc261)
            %45 = cir.const #cir.int<1> : !s32i loc(#loc262)
            %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc262)
            %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc421)
            %48 = cir.const #cir.int<0> : !s32i loc(#loc263)
            %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc264)
            %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc264)
            cir.store %50, %4 : !s32i, !cir.ptr<!s32i> loc(#loc422)
            cir.scope {
              %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc269)
              %59 = cir.const #cir.int<1> : !s32i loc(#loc270)
              %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc270)
              %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc424)
              %62 = cir.ternary(%61, true {
                %63 = cir.const #true loc(#loc271)
                cir.yield %63 : !cir.bool loc(#loc271)
              }, false {
                %63 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc272)
                %64 = cir.const #cir.int<0> : !s32i loc(#loc273)
                %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc425)
                %66 = cir.ternary(%65, true {
                  %67 = cir.const #true loc(#loc271)
                  cir.yield %67 : !cir.bool loc(#loc271)
                }, false {
                  %67 = cir.const #false loc(#loc271)
                  cir.yield %67 : !cir.bool loc(#loc271)
                }) : (!cir.bool) -> !cir.bool loc(#loc271)
                cir.yield %66 : !cir.bool loc(#loc271)
              }) : (!cir.bool) -> !cir.bool loc(#loc271)
              cir.if %62 {
                cir.break loc(#loc275)
              } loc(#loc426)
            } loc(#loc423)
            %51 = cir.const #cir.int<0> : !s32i loc(#loc276)
            %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc276)
            %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc277)
            %54 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc278)
            %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc278)
            cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc427)
            %56 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc279)
            %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc280)
            cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc428)
          } loc(#loc398)
          cir.yield loc(#loc198)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc283)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc283)
          cir.condition(%14) loc(#loc283)
        } loc(#loc397)
      } loc(#loc397)
      cir.scope {
        %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc286)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc287)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc287)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc430)
        cir.if %16 {
          %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc289)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc290)
        } loc(#loc431)
      } loc(#loc429)
      cir.scope {
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc293)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc294)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc294)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc433)
        cir.if %16 {
          %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc296)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc297)
        } loc(#loc434)
      } loc(#loc432)
    } loc(#loc391)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc298)
    cir.call @goodB2GSink(%3) : (!s32i) -> () loc(#loc299)
    cir.return loc(#loc179)
  } loc(#loc388)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc302, #loc303])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc436)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc304)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc305)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc306)
    %3 = cir.binop(rem, %1, %2) : !s32i loc(#loc437)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc307)
    cir.return loc(#loc301)
  } loc(#loc435)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc439)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc312)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc313)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc440)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc315)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc441)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc317)
    cir.call @goodG2BSink(%4) : (!s32i) -> () loc(#loc318)
    cir.return loc(#loc309)
  } loc(#loc438)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc19 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":44:1)
#loc20 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":48:1)
#loc23 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":45:1)
#loc24 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":47:18)
#loc25 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":47:24)
#loc26 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":47:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":50:1)
#loc28 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":125:1)
#loc29 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":52:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":52:9)
#loc31 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":54:13)
#loc32 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":54:12)
#loc33 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":54:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":55:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":123:5)
#loc36 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":60:9)
#loc37 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":60:13)
#loc38 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":61:9)
#loc39 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":61:28)
#loc40 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":62:9)
#loc41 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":62:31)
#loc42 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":63:9)
#loc43 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":63:31)
#loc44 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":64:9)
#loc45 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":64:41)
#loc46 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":65:9)
#loc47 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":108:17)
#loc48 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":66:9)
#loc49 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":107:9)
#loc50 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":75:35)
#loc51 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":75:44)
#loc52 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":75:57)
#loc53 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":75:28)
#loc54 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":75:13)
#loc55 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":75:68)
#loc56 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":76:13)
#loc57 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":79:13)
#loc58 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":76:17)
#loc59 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":76:33)
#loc60 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":77:13)
#loc61 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":78:17)
#loc62 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":80:20)
#loc63 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":80:21)
#loc64 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":80:30)
#loc65 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":80:33)
#loc66 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":80:47)
#loc67 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":80:13)
#loc68 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":80:48)
#loc69 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":81:34)
#loc70 = loc("/usr/include/netinet/in.h":249:5)
#loc71 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":81:13)
#loc72 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":82:39)
#loc73 = loc("/usr/include/netinet/in.h":251:20)
#loc74 = loc("/usr/include/netinet/in.h":33:15)
#loc75 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":82:13)
#loc76 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":83:38)
#loc77 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":83:32)
#loc78 = loc("/usr/include/netinet/in.h":250:15)
#loc79 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":83:13)
#loc80 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":83:46)
#loc81 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":84:13)
#loc82 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":87:13)
#loc83 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":84:22)
#loc84 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":84:54)
#loc85 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":84:55)
#loc86 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":84:64)
#loc87 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":84:78)
#loc88 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":84:17)
#loc89 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":84:84)
#loc90 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":85:13)
#loc91 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":86:17)
#loc92 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":88:13)
#loc93 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":91:13)
#loc94 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":88:24)
#loc95 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":88:38)
#loc96 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":88:17)
#loc97 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":88:57)
#loc98 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":89:13)
#loc99 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":90:17)
#loc100 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":92:35)
#loc101 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":92:49)
#loc102 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":92:55)
#loc103 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":92:28)
#loc104 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":92:13)
#loc105 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":92:59)
#loc106 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":93:13)
#loc107 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":96:13)
#loc108 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":93:17)
#loc109 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":93:33)
#loc110 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":94:13)
#loc111 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":95:17)
#loc112 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":98:31)
#loc113 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":98:45)
#loc114 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":98:58)
#loc115 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":98:76)
#loc116 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":98:79)
#loc117 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":98:26)
#loc118 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":98:13)
#loc119 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":98:80)
#loc120 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":99:13)
#loc121 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":102:13)
#loc122 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":99:17)
#loc123 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":99:31)
#loc124 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":99:44)
#loc125 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":99:47)
#loc126 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":99:61)
#loc127 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":100:13)
#loc128 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":101:17)
#loc129 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":104:39)
#loc130 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":104:25)
#loc131 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":104:13)
#loc132 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":106:25)
#loc133 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":106:20)
#loc134 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":106:13)
#loc135 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":106:36)
#loc136 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":108:16)
#loc137 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":109:9)
#loc138 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":112:9)
#loc139 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":109:13)
#loc140 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":109:29)
#loc141 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":110:9)
#loc142 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":111:26)
#loc143 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":111:13)
#loc144 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":113:9)
#loc145 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":116:9)
#loc146 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":113:13)
#loc147 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":113:29)
#loc148 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":114:9)
#loc149 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":115:26)
#loc150 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":115:13)
#loc151 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":124:13)
#loc152 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":124:5)
#loc153 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":239:1)
#loc154 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":243:1)
#loc155 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":241:5)
#loc156 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":241:13)
#loc157 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":242:5)
#loc158 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":242:13)
#loc159 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc160 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc161 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":158:19)
#loc162 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":149:1)
#loc163 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":160:1)
#loc166 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":150:1)
#loc167 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":152:5)
#loc168 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":159:5)
#loc169 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":152:9)
#loc170 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":152:17)
#loc171 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":153:5)
#loc172 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":155:5)
#loc173 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":157:5)
#loc174 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":154:22)
#loc175 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":154:28)
#loc176 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":154:9)
#loc177 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":158:9)
#loc178 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":162:1)
#loc179 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":237:1)
#loc180 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":164:5)
#loc181 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":164:9)
#loc182 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":166:13)
#loc183 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":166:12)
#loc184 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":166:5)
#loc185 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":167:5)
#loc186 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":235:5)
#loc187 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":172:9)
#loc188 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":172:13)
#loc189 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":173:9)
#loc190 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":173:28)
#loc191 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":174:9)
#loc192 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":174:31)
#loc193 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":175:9)
#loc194 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":175:31)
#loc195 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":176:9)
#loc196 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":176:41)
#loc197 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":177:9)
#loc198 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":220:17)
#loc199 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":178:9)
#loc200 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":219:9)
#loc201 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":187:35)
#loc202 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":187:44)
#loc203 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":187:57)
#loc204 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":187:28)
#loc205 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":187:13)
#loc206 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":187:68)
#loc207 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":188:13)
#loc208 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":191:13)
#loc209 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":188:17)
#loc210 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":188:33)
#loc211 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":189:13)
#loc212 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":190:17)
#loc213 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":192:20)
#loc214 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":192:21)
#loc215 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":192:30)
#loc216 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":192:33)
#loc217 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":192:47)
#loc218 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":192:13)
#loc219 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":192:48)
#loc220 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":193:34)
#loc221 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":193:13)
#loc222 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":194:39)
#loc223 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":194:13)
#loc224 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":195:38)
#loc225 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":195:32)
#loc226 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":195:13)
#loc227 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":195:46)
#loc228 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":196:13)
#loc229 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":199:13)
#loc230 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":196:22)
#loc231 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":196:54)
#loc232 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":196:55)
#loc233 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":196:64)
#loc234 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":196:78)
#loc235 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":196:17)
#loc236 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":196:84)
#loc237 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":197:13)
#loc238 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":198:17)
#loc239 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":200:13)
#loc240 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":203:13)
#loc241 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":200:24)
#loc242 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":200:38)
#loc243 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":200:17)
#loc244 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":200:57)
#loc245 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":201:13)
#loc246 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":202:17)
#loc247 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":204:35)
#loc248 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":204:49)
#loc249 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":204:55)
#loc250 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":204:28)
#loc251 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":204:13)
#loc252 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":204:59)
#loc253 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":205:13)
#loc254 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":208:13)
#loc255 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":205:17)
#loc256 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":205:33)
#loc257 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":206:13)
#loc258 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":207:17)
#loc259 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":210:31)
#loc260 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":210:45)
#loc261 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":210:58)
#loc262 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":210:76)
#loc263 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":210:79)
#loc264 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":210:26)
#loc265 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":210:13)
#loc266 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":210:80)
#loc267 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":211:13)
#loc268 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":214:13)
#loc269 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":211:17)
#loc270 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":211:31)
#loc271 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":211:44)
#loc272 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":211:47)
#loc273 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":211:61)
#loc274 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":212:13)
#loc275 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":213:17)
#loc276 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":216:39)
#loc277 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":216:25)
#loc278 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":216:13)
#loc279 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":218:25)
#loc280 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":218:20)
#loc281 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":218:13)
#loc282 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":218:36)
#loc283 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":220:16)
#loc284 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":221:9)
#loc285 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":224:9)
#loc286 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":221:13)
#loc287 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":221:29)
#loc288 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":222:9)
#loc289 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":223:26)
#loc290 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":223:13)
#loc291 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":225:9)
#loc292 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":228:9)
#loc293 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":225:13)
#loc294 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":225:29)
#loc295 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":226:9)
#loc296 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":227:26)
#loc297 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":227:13)
#loc298 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":236:17)
#loc299 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":236:5)
#loc300 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":132:1)
#loc301 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":136:1)
#loc304 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":133:1)
#loc305 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":135:18)
#loc306 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":135:24)
#loc307 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":135:5)
#loc308 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":138:1)
#loc309 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":146:1)
#loc310 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":140:5)
#loc311 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":140:9)
#loc312 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":142:13)
#loc313 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":142:12)
#loc314 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":142:5)
#loc315 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":144:12)
#loc316 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":144:5)
#loc317 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":145:17)
#loc318 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_41.c":145:5)
#loc319 = loc(fused[#loc1, #loc2])
#loc320 = loc(fused[#loc3, #loc4])
#loc321 = loc(fused[#loc5, #loc6])
#loc322 = loc(fused[#loc7, #loc8])
#loc323 = loc(fused[#loc9, #loc10])
#loc324 = loc(fused[#loc11, #loc12])
#loc325 = loc(fused[#loc13, #loc14])
#loc326 = loc(fused[#loc15, #loc16])
#loc327 = loc(fused[#loc17, #loc18])
#loc328 = loc(fused[#loc19, #loc20])
#loc330 = loc(fused[#loc24, #loc25])
#loc331 = loc(fused[#loc27, #loc28])
#loc332 = loc(fused[#loc29, #loc30])
#loc333 = loc(fused[#loc33, #loc31])
#loc334 = loc(fused[#loc34, #loc35])
#loc335 = loc(fused[#loc36, #loc37])
#loc336 = loc(fused[#loc38, #loc39])
#loc337 = loc(fused[#loc40, #loc41])
#loc338 = loc(fused[#loc42, #loc43])
#loc339 = loc(fused[#loc44, #loc45])
#loc340 = loc(fused[#loc46, #loc47])
#loc341 = loc(fused[#loc48, #loc49])
#loc342 = loc(fused[#loc54, #loc55])
#loc343 = loc(fused[#loc56, #loc57])
#loc344 = loc(fused[#loc58, #loc59])
#loc345 = loc(fused[#loc60, #loc57])
#loc346 = loc(fused[#loc62, #loc63])
#loc347 = loc(fused[#loc65, #loc66])
#loc348 = loc(fused[#loc67, #loc68])
#loc349 = loc(fused[#loc71, #loc69])
#loc350 = loc(fused[#loc75, #loc72])
#loc351 = loc(fused[#loc79, #loc80])
#loc352 = loc(fused[#loc81, #loc82])
#loc353 = loc(fused[#loc84, #loc85])
#loc354 = loc(fused[#loc86, #loc87])
#loc355 = loc(fused[#loc88, #loc89])
#loc356 = loc(fused[#loc90, #loc82])
#loc357 = loc(fused[#loc92, #loc93])
#loc358 = loc(fused[#loc96, #loc97])
#loc359 = loc(fused[#loc98, #loc93])
#loc360 = loc(fused[#loc104, #loc105])
#loc361 = loc(fused[#loc106, #loc107])
#loc362 = loc(fused[#loc108, #loc109])
#loc363 = loc(fused[#loc110, #loc107])
#loc364 = loc(fused[#loc114, #loc115])
#loc365 = loc(fused[#loc118, #loc119])
#loc366 = loc(fused[#loc120, #loc121])
#loc367 = loc(fused[#loc122, #loc123])
#loc368 = loc(fused[#loc125, #loc126])
#loc369 = loc(fused[#loc127, #loc121])
#loc370 = loc(fused[#loc131, #loc129])
#loc371 = loc(fused[#loc134, #loc135])
#loc372 = loc(fused[#loc137, #loc138])
#loc373 = loc(fused[#loc139, #loc140])
#loc374 = loc(fused[#loc141, #loc138])
#loc375 = loc(fused[#loc144, #loc145])
#loc376 = loc(fused[#loc146, #loc147])
#loc377 = loc(fused[#loc148, #loc145])
#loc378 = loc(fused[#loc153, #loc154])
#loc379 = loc(fused[#loc155, #loc156])
#loc380 = loc(fused[#loc157, #loc158])
#loc381 = loc(fused[#loc159, #loc160])
#loc382 = loc(fused[#loc162, #loc163])
#loc384 = loc(fused[#loc167, #loc168])
#loc385 = loc(fused[#loc169, #loc170])
#loc386 = loc(fused[#loc171, #loc172, #loc173, #loc168])
#loc387 = loc(fused[#loc174, #loc175])
#loc388 = loc(fused[#loc178, #loc179])
#loc389 = loc(fused[#loc180, #loc181])
#loc390 = loc(fused[#loc184, #loc182])
#loc391 = loc(fused[#loc185, #loc186])
#loc392 = loc(fused[#loc187, #loc188])
#loc393 = loc(fused[#loc189, #loc190])
#loc394 = loc(fused[#loc191, #loc192])
#loc395 = loc(fused[#loc193, #loc194])
#loc396 = loc(fused[#loc195, #loc196])
#loc397 = loc(fused[#loc197, #loc198])
#loc398 = loc(fused[#loc199, #loc200])
#loc399 = loc(fused[#loc205, #loc206])
#loc400 = loc(fused[#loc207, #loc208])
#loc401 = loc(fused[#loc209, #loc210])
#loc402 = loc(fused[#loc211, #loc208])
#loc403 = loc(fused[#loc213, #loc214])
#loc404 = loc(fused[#loc216, #loc217])
#loc405 = loc(fused[#loc218, #loc219])
#loc406 = loc(fused[#loc221, #loc220])
#loc407 = loc(fused[#loc223, #loc222])
#loc408 = loc(fused[#loc226, #loc227])
#loc409 = loc(fused[#loc228, #loc229])
#loc410 = loc(fused[#loc231, #loc232])
#loc411 = loc(fused[#loc233, #loc234])
#loc412 = loc(fused[#loc235, #loc236])
#loc413 = loc(fused[#loc237, #loc229])
#loc414 = loc(fused[#loc239, #loc240])
#loc415 = loc(fused[#loc243, #loc244])
#loc416 = loc(fused[#loc245, #loc240])
#loc417 = loc(fused[#loc251, #loc252])
#loc418 = loc(fused[#loc253, #loc254])
#loc419 = loc(fused[#loc255, #loc256])
#loc420 = loc(fused[#loc257, #loc254])
#loc421 = loc(fused[#loc261, #loc262])
#loc422 = loc(fused[#loc265, #loc266])
#loc423 = loc(fused[#loc267, #loc268])
#loc424 = loc(fused[#loc269, #loc270])
#loc425 = loc(fused[#loc272, #loc273])
#loc426 = loc(fused[#loc274, #loc268])
#loc427 = loc(fused[#loc278, #loc276])
#loc428 = loc(fused[#loc281, #loc282])
#loc429 = loc(fused[#loc284, #loc285])
#loc430 = loc(fused[#loc286, #loc287])
#loc431 = loc(fused[#loc288, #loc285])
#loc432 = loc(fused[#loc291, #loc292])
#loc433 = loc(fused[#loc293, #loc294])
#loc434 = loc(fused[#loc295, #loc292])
#loc435 = loc(fused[#loc300, #loc301])
#loc437 = loc(fused[#loc305, #loc306])
#loc438 = loc(fused[#loc308, #loc309])
#loc439 = loc(fused[#loc310, #loc311])
#loc440 = loc(fused[#loc314, #loc312])
#loc441 = loc(fused[#loc316, #loc315])
