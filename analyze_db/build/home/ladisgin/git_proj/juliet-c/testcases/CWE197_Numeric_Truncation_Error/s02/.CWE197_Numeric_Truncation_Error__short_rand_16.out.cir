!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc17 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":29:23)
#loc40 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":77:10)
#loc41 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":77:14)
#loc42 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":77:20)
#loc43 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":77:32)
#loc93 = loc(fused[#loc40, #loc41])
#loc94 = loc(fused[#loc42, #loc43])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s02/CWE197_Numeric_Truncation_Error__short_rand_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc78)
  cir.func private @printHexCharLine(!s8i) loc(#loc79)
  cir.func no_proto @CWE197_Numeric_Truncation_Error__short_rand_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc81)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc82)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc12)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc12)
    cir.store %4, %1 : !s16i, !cir.ptr<!s16i> loc(#loc83)
    cir.br ^bb1 loc(#loc84)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc84)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc16)
    cir.brcond %6 ^bb3, ^bb8 loc(#loc16)
  ^bb3:  // pred: ^bb2
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc17)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %10 ^bb4, ^bb5 loc(#loc17)
  ^bb4:  // pred: ^bb3
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc17)
    %13 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc17)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc17)
    %17 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc17)
    %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc17)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc17)
    %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc17)
    cir.br ^bb6(%22 : !u32i) loc(#loc17)
  ^bb5:  // pred: ^bb3
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc17)
    %25 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc17)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc17)
    %29 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %30 = cir.shift(left, %28 : !u32i, %29 : !s32i) -> !u32i loc(#loc17)
    %31 = cir.binop(xor, %26, %30) : !u32i loc(#loc17)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc17)
    %34 = cir.binop(xor, %31, %33) : !u32i loc(#loc17)
    %35 = cir.unary(minus, %34) : !u32i, !u32i loc(#loc17)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc17)
    %38 = cir.binop(sub, %35, %37) : !u32i loc(#loc17)
    cir.br ^bb6(%38 : !u32i) loc(#loc17)
  ^bb6(%39: !u32i loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":29:23)):  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc17)
  ^bb7:  // pred: ^bb6
    %40 = cir.cast(integral, %39 : !u32i), !s32i loc(#loc17)
    %41 = cir.cast(integral, %40 : !s32i), !s16i loc(#loc17)
    cir.store %41, %1 : !s16i, !cir.ptr<!s16i> loc(#loc85)
    cir.br ^bb8 loc(#loc19)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc15)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc86)
  ^bb10:  // pred: ^bb9
    %42 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc8)
    %43 = cir.cast(integral, %42 : !s16i), !s8i loc(#loc8)
    cir.store %43, %0 : !s8i, !cir.ptr<!s8i> loc(#loc81)
    %44 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc22)
    cir.call @printHexCharLine(%44) : (!s8i) -> () loc(#loc23)
    cir.br ^bb11 loc(#loc21)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc6)
  } loc(#loc80)
  cir.func no_proto @CWE197_Numeric_Truncation_Error__short_rand_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc88)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc26)
    cir.return loc(#loc25)
  } loc(#loc87)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc89)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc90)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc91)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc34)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc35)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc37)
  cir.func @main(%arg0: !s32i loc(fused[#loc40, #loc41]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc42, #loc43])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc93)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc94)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc39)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc44)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc44)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc45)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc46)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc46)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc47)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc34)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    %8 = cir.get_global @CWE197_Numeric_Truncation_Error__short_rand_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc95)
    cir.call @CWE197_Numeric_Truncation_Error__short_rand_16_good() : () -> () loc(#loc49)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc35)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc36)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %13 = cir.get_global @CWE197_Numeric_Truncation_Error__short_rand_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc96)
    cir.call @CWE197_Numeric_Truncation_Error__short_rand_16_bad() : () -> () loc(#loc53)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc37)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc56)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc97)
    cir.return %17 : !s32i loc(#loc97)
  } loc(#loc92)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc99)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc100)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc65)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc65)
    cir.store %4, %1 : !s16i, !cir.ptr<!s16i> loc(#loc101)
    cir.br ^bb1 loc(#loc102)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc102)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<1> : !s32i loc(#loc69)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc69)
    cir.brcond %6 ^bb3, ^bb4 loc(#loc69)
  ^bb3:  // pred: ^bb2
    %7 = cir.const #cir.int<127> : !s32i loc(#loc70)
    %8 = cir.const #cir.int<5> : !s32i loc(#loc71)
    %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc70)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc70)
    cir.store %10, %1 : !s16i, !cir.ptr<!s16i> loc(#loc103)
    cir.br ^bb4 loc(#loc73)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc68)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc104)
  ^bb6:  // pred: ^bb5
    %11 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc61)
    %12 = cir.cast(integral, %11 : !s16i), !s8i loc(#loc61)
    cir.store %12, %0 : !s8i, !cir.ptr<!s8i> loc(#loc99)
    %13 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc76)
    cir.call @printHexCharLine(%13) : (!s8i) -> () loc(#loc77)
    cir.br ^bb7 loc(#loc75)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc59)
  } loc(#loc98)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s02/CWE197_Numeric_Truncation_Error__short_rand_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":21:1)
#loc6 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":37:1)
#loc7 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":34:9)
#loc8 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":34:31)
#loc9 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":23:5)
#loc10 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":23:11)
#loc11 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":25:13)
#loc12 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":25:12)
#loc13 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":25:5)
#loc14 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":26:5)
#loc15 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":31:5)
#loc16 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":26:11)
#loc18 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":29:9)
#loc19 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":30:9)
#loc20 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":32:5)
#loc21 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":36:5)
#loc22 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":35:26)
#loc23 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":35:9)
#loc24 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":62:1)
#loc25 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":65:1)
#loc26 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":64:5)
#loc27 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":64:13)
#loc28 = loc("/usr/include/stdlib.h":575:1)
#loc29 = loc("/usr/include/stdlib.h":575:41)
#loc30 = loc("/usr/include/time.h":76:1)
#loc31 = loc("/usr/include/time.h":76:38)
#loc32 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc34 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":82:15)
#loc35 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":84:15)
#loc36 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":87:15)
#loc37 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":89:15)
#loc38 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":77:1)
#loc39 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":92:1)
#loc44 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":78:1)
#loc45 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":80:27)
#loc46 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":80:22)
#loc47 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":80:5)
#loc48 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":82:5)
#loc49 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":83:5)
#loc50 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":83:57)
#loc51 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":84:5)
#loc52 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":87:5)
#loc53 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":88:5)
#loc54 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":88:56)
#loc55 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":89:5)
#loc56 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":91:12)
#loc57 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":91:5)
#loc58 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":44:1)
#loc59 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":60:1)
#loc60 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":57:9)
#loc61 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":57:31)
#loc62 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":46:5)
#loc63 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":46:11)
#loc64 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":48:13)
#loc65 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":48:12)
#loc66 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":48:5)
#loc67 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":49:5)
#loc68 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":54:5)
#loc69 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":49:11)
#loc70 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":52:16)
#loc71 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":52:25)
#loc72 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":52:9)
#loc73 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":53:9)
#loc74 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":55:5)
#loc75 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":59:5)
#loc76 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":58:26)
#loc77 = loc("CWE197_Numeric_Truncation_Error__short_rand_16.c":58:9)
#loc78 = loc(fused[#loc1, #loc2])
#loc79 = loc(fused[#loc3, #loc4])
#loc80 = loc(fused[#loc5, #loc6])
#loc81 = loc(fused[#loc7, #loc8])
#loc82 = loc(fused[#loc9, #loc10])
#loc83 = loc(fused[#loc13, #loc11])
#loc84 = loc(fused[#loc14, #loc15])
#loc85 = loc(fused[#loc18, #loc17])
#loc86 = loc(fused[#loc20, #loc21])
#loc87 = loc(fused[#loc24, #loc25])
#loc88 = loc(fused[#loc26, #loc27])
#loc89 = loc(fused[#loc28, #loc29])
#loc90 = loc(fused[#loc30, #loc31])
#loc91 = loc(fused[#loc32, #loc33])
#loc92 = loc(fused[#loc38, #loc39])
#loc95 = loc(fused[#loc49, #loc50])
#loc96 = loc(fused[#loc53, #loc54])
#loc97 = loc(fused[#loc57, #loc56])
#loc98 = loc(fused[#loc58, #loc59])
#loc99 = loc(fused[#loc60, #loc61])
#loc100 = loc(fused[#loc62, #loc63])
#loc101 = loc(fused[#loc66, #loc64])
#loc102 = loc(fused[#loc67, #loc68])
#loc103 = loc(fused[#loc72, #loc71])
#loc104 = loc(fused[#loc74, #loc75])
