!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE690_NULL_Deref_From_Return/s01/CWE690_NULL_Deref_From_Return__int_calloc_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc69)
  cir.func private  @printIntLine(!s32i) loc(#loc70)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc71)
  cir.func no_proto  @CWE690_NULL_Deref_From_Return__int_calloc_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc73)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc11)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc74)
    %2 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc13)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc14)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc75)
    %6 = cir.call @calloc(%4, %5) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc13)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc76)
    cir.store %7, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc77)
    cir.scope {
      cir.while {
        %8 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc21)
        cir.condition(%9) loc(#loc21)
      } do {
        %8 = cir.const #cir.int<5> : !s32i loc(#loc22)
        %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc23)
        %10 = cir.const #cir.int<0> : !s32i loc(#loc24)
        %11 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc25)
        cir.store %8, %11 : !s32i, !cir.ptr<!s32i> loc(#loc79)
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc27)
        %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc28)
        %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc26)
        cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc29)
        %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc30)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc31)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc31)
        cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc30)
        cir.break loc(#loc32)
      } loc(#loc78)
    } loc(#loc78)
    cir.return loc(#loc8)
  } loc(#loc72)
  cir.func no_proto  @CWE690_NULL_Deref_From_Return__int_calloc_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc81)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc34)
  } loc(#loc80)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc83)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc41)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc84)
    %2 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc43)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc44)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc44)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc85)
    %6 = cir.call @calloc(%4, %5) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc43)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc86)
    cir.store %7, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc87)
    cir.scope {
      cir.while {
        %8 = cir.const #cir.int<1> : !s32i loc(#loc51)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc51)
        cir.condition(%9) loc(#loc51)
      } do {
        cir.scope {
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
          %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc55)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc55)
          %11 = cir.cmp(ne, %8, %10) : !cir.ptr<!s32i>, !s32i loc(#loc90)
          %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc56)
          cir.if %12 {
            %13 = cir.const #cir.int<5> : !s32i loc(#loc58)
            %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc59)
            %15 = cir.const #cir.int<0> : !s32i loc(#loc60)
            %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc61)
            cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc92)
            %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc62)
            %18 = cir.const #cir.int<0> : !s32i loc(#loc63)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc64)
            %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc62)
            cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc65)
            %21 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc66)
            %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc67)
            %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc67)
            cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc66)
          } loc(#loc91)
        } loc(#loc89)
        cir.break loc(#loc68)
      } loc(#loc88)
    } loc(#loc88)
    cir.return loc(#loc38)
  } loc(#loc82)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE690_NULL_Deref_From_Return/s01/CWE690_NULL_Deref_From_Return__int_calloc_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":675:1)
#loc2 = loc("/usr/include/stdlib.h":676:14)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("/usr/include/stdlib.h":687:1)
#loc6 = loc("/usr/include/stdlib.h":687:32)
#loc7 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":23:1)
#loc8 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":37:1)
#loc9 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":25:5)
#loc10 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":25:11)
#loc11 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":26:12)
#loc12 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":26:5)
#loc13 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":28:19)
#loc14 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":28:26)
#loc15 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":28:29)
#loc16 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":28:39)
#loc17 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":28:40)
#loc18 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":28:5)
#loc19 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":29:5)
#loc20 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":36:5)
#loc21 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":29:11)
#loc22 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":32:19)
#loc23 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":32:9)
#loc24 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":32:14)
#loc25 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":32:15)
#loc26 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":33:22)
#loc27 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":33:27)
#loc28 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":33:28)
#loc29 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":33:9)
#loc30 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":34:9)
#loc31 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":34:14)
#loc32 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":35:9)
#loc33 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":63:1)
#loc34 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":66:1)
#loc35 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":65:5)
#loc36 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":65:13)
#loc37 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":44:1)
#loc38 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":61:1)
#loc39 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":46:5)
#loc40 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":46:11)
#loc41 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":47:12)
#loc42 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":47:5)
#loc43 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":49:19)
#loc44 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":49:26)
#loc45 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":49:29)
#loc46 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":49:39)
#loc47 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":49:40)
#loc48 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":49:5)
#loc49 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":50:5)
#loc50 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":60:5)
#loc51 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":50:11)
#loc52 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":53:9)
#loc53 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":58:9)
#loc54 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":53:13)
#loc55 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":53:21)
#loc56 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":53:18)
#loc57 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":54:9)
#loc58 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":55:23)
#loc59 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":55:13)
#loc60 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":55:18)
#loc61 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":55:19)
#loc62 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":56:26)
#loc63 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":56:31)
#loc64 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":56:32)
#loc65 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":56:13)
#loc66 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":57:13)
#loc67 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":57:18)
#loc68 = loc("CWE690_NULL_Deref_From_Return__int_calloc_16.c":59:9)
#loc69 = loc(fused[#loc1, #loc2])
#loc70 = loc(fused[#loc3, #loc4])
#loc71 = loc(fused[#loc5, #loc6])
#loc72 = loc(fused[#loc7, #loc8])
#loc73 = loc(fused[#loc9, #loc10])
#loc74 = loc(fused[#loc12, #loc11])
#loc75 = loc(fused[#loc15, #loc16])
#loc76 = loc(fused[#loc13, #loc17])
#loc77 = loc(fused[#loc18, #loc17])
#loc78 = loc(fused[#loc19, #loc20])
#loc79 = loc(fused[#loc23, #loc22])
#loc80 = loc(fused[#loc33, #loc34])
#loc81 = loc(fused[#loc35, #loc36])
#loc82 = loc(fused[#loc37, #loc38])
#loc83 = loc(fused[#loc39, #loc40])
#loc84 = loc(fused[#loc42, #loc41])
#loc85 = loc(fused[#loc45, #loc46])
#loc86 = loc(fused[#loc43, #loc47])
#loc87 = loc(fused[#loc48, #loc47])
#loc88 = loc(fused[#loc49, #loc50])
#loc89 = loc(fused[#loc52, #loc53])
#loc90 = loc(fused[#loc54, #loc55])
#loc91 = loc(fused[#loc57, #loc53])
#loc92 = loc(fused[#loc59, #loc58])
