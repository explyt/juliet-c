!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":89:10)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":89:14)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":89:20)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":89:32)
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc161 = loc(fused[#loc71, #loc72])
#loc162 = loc(fused[#loc73, #loc74])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc133)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc134)
  cir.func private @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc135)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc136)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc138)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc139)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc140)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>> loc(#loc139)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>> loc(#loc140)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc17)
    cir.store %3, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc141)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc143)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc22)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc23)
      cir.store %6, %4 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc143)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc24)
      %8 = cir.const #cir.int<8> : !u64i loc(#loc144)
      %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc145)
      cir.store %10, %4 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc146)
      cir.scope {
        %19 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc31)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc32)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc32)
        %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc148)
        cir.if %22 {
          %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc34)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc35)
          %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc36)
          cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc34)
        } loc(#loc149)
      } loc(#loc147)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc37)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc38)
      %13 = cir.get_member %12[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc39)
      cir.store %11, %13 : !s32i, !cir.ptr<!s32i> loc(#loc150)
      %14 = cir.const #cir.int<2> : !s32i loc(#loc40)
      %15 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc41)
      %16 = cir.get_member %15[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc42)
      cir.store %14, %16 : !s32i, !cir.ptr<!s32i> loc(#loc151)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc43)
      %18 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc44)
      cir.store %17, %18 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc152)
    } loc(#loc142)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc154)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc49)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc50)
      cir.store %6, %4 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc154)
      %7 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc51)
      cir.call @printStructLine(%7) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc52)
      %8 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc53)
      %9 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc54)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc54)
      cir.call @free(%10) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc53)
    } loc(#loc153)
    cir.return loc(#loc10)
  } loc(#loc137)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc156)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc57)
    cir.return loc(#loc56)
  } loc(#loc155)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc157)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc158)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc159)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc65)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc66)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc68)
  cir.func @main(%arg0: !s32i loc(fused[#loc71, #loc72]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc73, #loc74])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc161)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc162)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc70)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc75)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc75)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc76)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc77)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc77)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc78)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc65)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32_good : !cir.ptr<!cir.func<!void ()>> loc(#loc163)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32_good() : () -> () loc(#loc80)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc66)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc67)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc164)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32_bad() : () -> () loc(#loc84)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc68)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc87)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc165)
    cir.return %17 : !s32i loc(#loc165)
  } loc(#loc160)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc167)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc168)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc169)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>> loc(#loc168)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>> loc(#loc169)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc97)
    cir.store %3, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc170)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc172)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc102)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc103)
      cir.store %6, %4 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc172)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc104)
      %8 = cir.const #cir.int<8> : !u64i loc(#loc173)
      %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc104)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc174)
      cir.store %10, %4 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc175)
      cir.scope {
        %19 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc111)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc112)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc112)
        %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc177)
        cir.if %22 {
          %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc114)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc115)
          %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc116)
          cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc114)
        } loc(#loc178)
      } loc(#loc176)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc117)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc118)
      %13 = cir.get_member %12[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc39)
      cir.store %11, %13 : !s32i, !cir.ptr<!s32i> loc(#loc179)
      %14 = cir.const #cir.int<2> : !s32i loc(#loc119)
      %15 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc120)
      %16 = cir.get_member %15[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc42)
      cir.store %14, %16 : !s32i, !cir.ptr<!s32i> loc(#loc180)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc121)
      %18 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc122)
      cir.store %17, %18 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc181)
    } loc(#loc171)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc183)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc127)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc128)
      cir.store %6, %4 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc183)
      %7 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc129)
      cir.call @printStructLine(%7) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc130)
      %8 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc131)
      %9 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc132)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc132)
      cir.call @free(%10) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc131)
    } loc(#loc182)
    cir.return loc(#loc90)
  } loc(#loc166)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":44:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":23:21)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":24:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":24:34)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":25:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":25:34)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":27:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":27:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":28:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":37:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":29:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":29:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":29:32)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":32:33)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":32:40)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":32:51)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":32:52)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":32:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":33:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":33:37)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":33:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":33:21)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":33:27)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":33:28)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":33:34)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":33:33)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":34:24)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":34:9)
#loc39 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":35:24)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":35:9)
#loc42 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":36:21)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":36:10)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":36:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":38:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":43:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":39:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":39:33)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":39:32)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":41:25)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":41:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":42:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":42:14)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":75:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":78:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":77:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":77:13)
#loc59 = loc("/usr/include/stdlib.h":575:1)
#loc60 = loc("/usr/include/stdlib.h":575:41)
#loc61 = loc("/usr/include/time.h":76:1)
#loc62 = loc("/usr/include/time.h":76:38)
#loc63 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc64 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":94:15)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":96:15)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":99:15)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":101:15)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":89:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":104:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":90:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":92:27)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":92:22)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":92:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":94:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":95:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":95:62)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":96:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":99:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":100:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":100:61)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":101:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":103:12)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":103:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":51:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":73:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":53:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":53:21)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":54:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":54:34)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":55:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":55:34)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":57:12)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":57:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":58:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":66:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":59:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":59:33)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":59:32)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":61:33)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":61:40)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":61:52)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":61:53)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":61:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":62:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":62:37)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":62:13)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":62:21)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":62:27)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":62:28)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":62:34)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":62:33)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":63:24)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":63:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":64:24)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":64:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":65:21)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":65:10)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":65:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":67:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":72:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":68:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":68:33)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":68:32)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":70:25)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":70:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":71:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c":71:14)
#loc133 = loc(fused[#loc1, #loc2])
#loc134 = loc(fused[#loc3, #loc4])
#loc135 = loc(fused[#loc5, #loc6])
#loc136 = loc(fused[#loc7, #loc8])
#loc137 = loc(fused[#loc9, #loc10])
#loc138 = loc(fused[#loc11, #loc12])
#loc139 = loc(fused[#loc13, #loc14])
#loc140 = loc(fused[#loc15, #loc16])
#loc141 = loc(fused[#loc18, #loc17])
#loc142 = loc(fused[#loc19, #loc20])
#loc143 = loc(fused[#loc21, #loc22])
#loc144 = loc(fused[#loc25, #loc26])
#loc145 = loc(fused[#loc24, #loc27])
#loc146 = loc(fused[#loc28, #loc27])
#loc147 = loc(fused[#loc29, #loc30])
#loc148 = loc(fused[#loc31, #loc32])
#loc149 = loc(fused[#loc33, #loc30])
#loc150 = loc(fused[#loc38, #loc37])
#loc151 = loc(fused[#loc41, #loc40])
#loc152 = loc(fused[#loc45, #loc43])
#loc153 = loc(fused[#loc46, #loc47])
#loc154 = loc(fused[#loc48, #loc49])
#loc155 = loc(fused[#loc55, #loc56])
#loc156 = loc(fused[#loc57, #loc58])
#loc157 = loc(fused[#loc59, #loc60])
#loc158 = loc(fused[#loc61, #loc62])
#loc159 = loc(fused[#loc63, #loc64])
#loc160 = loc(fused[#loc69, #loc70])
#loc163 = loc(fused[#loc80, #loc81])
#loc164 = loc(fused[#loc84, #loc85])
#loc165 = loc(fused[#loc88, #loc87])
#loc166 = loc(fused[#loc89, #loc90])
#loc167 = loc(fused[#loc91, #loc92])
#loc168 = loc(fused[#loc93, #loc94])
#loc169 = loc(fused[#loc95, #loc96])
#loc170 = loc(fused[#loc98, #loc97])
#loc171 = loc(fused[#loc99, #loc100])
#loc172 = loc(fused[#loc101, #loc102])
#loc173 = loc(fused[#loc105, #loc106])
#loc174 = loc(fused[#loc104, #loc107])
#loc175 = loc(fused[#loc108, #loc107])
#loc176 = loc(fused[#loc109, #loc110])
#loc177 = loc(fused[#loc111, #loc112])
#loc178 = loc(fused[#loc113, #loc110])
#loc179 = loc(fused[#loc118, #loc117])
#loc180 = loc(fused[#loc120, #loc119])
#loc181 = loc(fused[#loc123, #loc121])
#loc182 = loc(fused[#loc124, #loc125])
#loc183 = loc(fused[#loc126, #loc127])
