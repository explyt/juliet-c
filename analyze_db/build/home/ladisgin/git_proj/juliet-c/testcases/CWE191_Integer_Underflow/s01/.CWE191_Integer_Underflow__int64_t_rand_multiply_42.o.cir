!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":22:26)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":22:34)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":25:21)
#loc42 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":68:30)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":68:38)
#loc45 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":71:21)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":47:30)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":47:38)
#loc114 = loc(fused[#loc5, #loc6])
#loc130 = loc(fused[#loc42, #loc43])
#loc147 = loc(fused[#loc84, #loc85])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_rand_multiply_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc112)
  cir.func internal private @badSource(%arg0: !s64i loc(fused[#loc5, #loc6])) -> !s64i extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc114)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__retval"] {alignment = 8 : i64} loc(#loc4)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc7)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc8)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc8)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc8)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc8)
    %8 = cir.const #cir.int<60> : !s32i loc(#loc8)
    %9 = cir.shift(left, %7 : !u64i, %8 : !s32i) -> !u64i loc(#loc8)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc8)
    %12 = cir.const #cir.int<45> : !s32i loc(#loc8)
    %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc8)
    %14 = cir.binop(xor, %9, %13) : !u64i loc(#loc8)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc8)
    %17 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc8)
    %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc8)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc8)
    %22 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc8)
    %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc8)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc8)
    %27 = cir.binop(xor, %24, %26) : !u64i loc(#loc8)
    cir.br ^bb3(%27 : !u64i) loc(#loc8)
  ^bb2:  // pred: ^bb0
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc8)
    %30 = cir.const #cir.int<60> : !s32i loc(#loc8)
    %31 = cir.shift(left, %29 : !u64i, %30 : !s32i) -> !u64i loc(#loc8)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc8)
    %34 = cir.const #cir.int<45> : !s32i loc(#loc8)
    %35 = cir.shift(left, %33 : !u64i, %34 : !s32i) -> !u64i loc(#loc8)
    %36 = cir.binop(xor, %31, %35) : !u64i loc(#loc8)
    %37 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc8)
    %39 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %40 = cir.shift(left, %38 : !u64i, %39 : !s32i) -> !u64i loc(#loc8)
    %41 = cir.binop(xor, %36, %40) : !u64i loc(#loc8)
    %42 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc8)
    %44 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %45 = cir.shift(left, %43 : !u64i, %44 : !s32i) -> !u64i loc(#loc8)
    %46 = cir.binop(xor, %41, %45) : !u64i loc(#loc8)
    %47 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc8)
    %49 = cir.binop(xor, %46, %48) : !u64i loc(#loc8)
    %50 = cir.unary(minus, %49) : !u64i, !u64i loc(#loc8)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %52 = cir.cast(integral, %51 : !s32i), !u64i loc(#loc8)
    %53 = cir.binop(sub, %50, %52) : !u64i loc(#loc8)
    cir.br ^bb3(%53 : !u64i) loc(#loc8)
  ^bb3(%54: !u64i loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":25:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc8)
  ^bb4:  // pred: ^bb3
    %55 = cir.cast(integral, %54 : !u64i), !s64i loc(#loc8)
    cir.store %55, %0 : !s64i, !cir.ptr<!s64i> loc(#loc115)
    %56 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc10)
    cir.store %56, %1 : !s64i, !cir.ptr<!s64i> loc(#loc116)
    %57 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc116)
    cir.return %57 : !s64i loc(#loc116)
  } loc(#loc113)
  cir.func private @printLongLongLine(!s64i) loc(#loc117)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_multiply_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc119)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc120)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc20)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc121)
    %3 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc22)
    %4 = cir.call @badSource(%3) : (!s64i) -> !s64i loc(#loc23)
    cir.store %4, %1 : !s64i, !cir.ptr<!s64i> loc(#loc122)
    cir.br ^bb1 loc(#loc123)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc28)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc29)
    %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc29)
    %8 = cir.cmp(lt, %5, %7) : !s64i, !cir.bool loc(#loc124)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc125)
  ^bb2:  // pred: ^bb1
    %9 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc31)
    %10 = cir.const #cir.int<2> : !s32i loc(#loc17)
    %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc17)
    %12 = cir.binop(mul, %9, %11) nsw : !s64i loc(#loc31)
    cir.store %12, %0 : !s64i, !cir.ptr<!s64i> loc(#loc119)
    %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc32)
    cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc33)
    cir.br ^bb3 loc(#loc27)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc27)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc15)
  } loc(#loc118)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_multiply_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc127)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc128)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc35)
  } loc(#loc126)
  cir.func internal private @goodB2GSource(%arg0: !s64i loc(fused[#loc42, #loc43])) -> !s64i extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc130)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__retval"] {alignment = 8 : i64} loc(#loc41)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc44)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc45)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc45)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc45)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc45)
    %8 = cir.const #cir.int<60> : !s32i loc(#loc45)
    %9 = cir.shift(left, %7 : !u64i, %8 : !s32i) -> !u64i loc(#loc45)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc45)
    %12 = cir.const #cir.int<45> : !s32i loc(#loc45)
    %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc45)
    %14 = cir.binop(xor, %9, %13) : !u64i loc(#loc45)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc45)
    %17 = cir.const #cir.int<30> : !s32i loc(#loc45)
    %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc45)
    %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc45)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc45)
    %22 = cir.const #cir.int<15> : !s32i loc(#loc45)
    %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc45)
    %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc45)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc45)
    %27 = cir.binop(xor, %24, %26) : !u64i loc(#loc45)
    cir.br ^bb3(%27 : !u64i) loc(#loc45)
  ^bb2:  // pred: ^bb0
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc45)
    %30 = cir.const #cir.int<60> : !s32i loc(#loc45)
    %31 = cir.shift(left, %29 : !u64i, %30 : !s32i) -> !u64i loc(#loc45)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
    %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc45)
    %34 = cir.const #cir.int<45> : !s32i loc(#loc45)
    %35 = cir.shift(left, %33 : !u64i, %34 : !s32i) -> !u64i loc(#loc45)
    %36 = cir.binop(xor, %31, %35) : !u64i loc(#loc45)
    %37 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
    %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc45)
    %39 = cir.const #cir.int<30> : !s32i loc(#loc45)
    %40 = cir.shift(left, %38 : !u64i, %39 : !s32i) -> !u64i loc(#loc45)
    %41 = cir.binop(xor, %36, %40) : !u64i loc(#loc45)
    %42 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
    %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc45)
    %44 = cir.const #cir.int<15> : !s32i loc(#loc45)
    %45 = cir.shift(left, %43 : !u64i, %44 : !s32i) -> !u64i loc(#loc45)
    %46 = cir.binop(xor, %41, %45) : !u64i loc(#loc45)
    %47 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
    %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc45)
    %49 = cir.binop(xor, %46, %48) : !u64i loc(#loc45)
    %50 = cir.unary(minus, %49) : !u64i, !u64i loc(#loc45)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %52 = cir.cast(integral, %51 : !s32i), !u64i loc(#loc45)
    %53 = cir.binop(sub, %50, %52) : !u64i loc(#loc45)
    cir.br ^bb3(%53 : !u64i) loc(#loc45)
  ^bb3(%54: !u64i loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":71:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc45)
  ^bb4:  // pred: ^bb3
    %55 = cir.cast(integral, %54 : !u64i), !s64i loc(#loc45)
    cir.store %55, %0 : !s64i, !cir.ptr<!s64i> loc(#loc131)
    %56 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc47)
    cir.store %56, %1 : !s64i, !cir.ptr<!s64i> loc(#loc132)
    %57 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc132)
    cir.return %57 : !s64i loc(#loc132)
  } loc(#loc129)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc133)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc51)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc135)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc136)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc58)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc137)
    %3 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc60)
    %4 = cir.call @goodB2GSource(%3) : (!s64i) -> !s64i loc(#loc61)
    cir.store %4, %1 : !s64i, !cir.ptr<!s64i> loc(#loc138)
    cir.br ^bb1 loc(#loc139)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc66)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc67)
    %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc67)
    %8 = cir.cmp(lt, %5, %7) : !s64i, !cir.bool loc(#loc140)
    cir.brcond %8 ^bb2, ^bb8 loc(#loc141)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc142)
  ^bb3:  // pred: ^bb2
    %9 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc71)
    %10 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc72)
    %11 = cir.unary(minus, %10) : !s64i, !s64i loc(#loc72)
    %12 = cir.const #cir.int<1> : !s64i loc(#loc72)
    %13 = cir.binop(sub, %11, %12) nsw : !s64i loc(#loc72)
    %14 = cir.const #cir.int<2> : !s32i loc(#loc73)
    %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc73)
    %16 = cir.binop(div, %13, %15) : !s64i loc(#loc143)
    %17 = cir.cmp(gt, %9, %16) : !s64i, !cir.bool loc(#loc144)
    cir.brcond %17 ^bb4, ^bb5 loc(#loc145)
  ^bb4:  // pred: ^bb3
    %18 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc78)
    %19 = cir.const #cir.int<2> : !s32i loc(#loc55)
    %20 = cir.cast(integral, %19 : !s32i), !s64i loc(#loc55)
    %21 = cir.binop(mul, %18, %20) nsw : !s64i loc(#loc78)
    cir.store %21, %0 : !s64i, !cir.ptr<!s64i> loc(#loc135)
    %22 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc79)
    cir.call @printLongLongLine(%22) : (!s64i) -> () loc(#loc80)
    cir.br ^bb6 loc(#loc76)
  ^bb5:  // pred: ^bb3
    %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc51)
    %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    cir.br ^bb6 loc(#loc70)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc70)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc65)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc65)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc53)
  } loc(#loc134)
  cir.func internal private @goodG2BSource(%arg0: !s64i loc(fused[#loc84, #loc85])) -> !s64i extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc147)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__retval"] {alignment = 8 : i64} loc(#loc83)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc86)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc87)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc88)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc88)
    cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc148)
    %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc90)
    cir.store %5, %1 : !s64i, !cir.ptr<!s64i> loc(#loc149)
    %6 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc149)
    cir.return %6 : !s64i loc(#loc149)
  } loc(#loc146)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc151)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc152)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc98)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc153)
    %3 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc100)
    %4 = cir.call @goodG2BSource(%3) : (!s64i) -> !s64i loc(#loc101)
    cir.store %4, %1 : !s64i, !cir.ptr<!s64i> loc(#loc154)
    cir.br ^bb1 loc(#loc155)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc106)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc107)
    %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc107)
    %8 = cir.cmp(lt, %5, %7) : !s64i, !cir.bool loc(#loc156)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc157)
  ^bb2:  // pred: ^bb1
    %9 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc109)
    %10 = cir.const #cir.int<2> : !s32i loc(#loc95)
    %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc95)
    %12 = cir.binop(mul, %9, %11) nsw : !s64i loc(#loc109)
    cir.store %12, %0 : !s64i, !cir.ptr<!s64i> loc(#loc151)
    %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc110)
    cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc111)
    cir.br ^bb3 loc(#loc105)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc105)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc93)
  } loc(#loc150)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":27:1)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":23:1)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":25:5)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":26:12)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":26:5)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":29:1)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":40:1)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":37:9)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":37:33)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":31:5)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":31:13)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":32:12)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":32:5)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":33:22)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":33:12)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":33:5)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":33:26)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":34:5)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":39:5)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":34:8)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":34:15)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":35:5)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":37:26)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":38:27)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":38:9)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":95:1)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":99:1)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":97:5)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":97:13)
#loc38 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":98:5)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":98:13)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":68:1)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":73:1)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":69:1)
#loc46 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":71:5)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":72:12)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":72:5)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":90:23)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":75:1)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":93:1)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":85:13)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":85:37)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":77:5)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":77:13)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":78:12)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":78:5)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":79:26)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":79:12)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":79:5)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":79:30)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":80:5)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":92:5)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":80:8)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":80:15)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":81:5)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":83:9)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":91:9)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":83:13)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":83:21)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":83:31)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":83:32)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":84:9)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":87:9)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":89:9)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":85:30)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":86:31)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":86:13)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":90:13)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":47:1)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":52:1)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":48:1)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":50:13)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":50:12)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":50:5)
#loc90 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":51:12)
#loc91 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":51:5)
#loc92 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":54:1)
#loc93 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":65:1)
#loc94 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":62:9)
#loc95 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":62:33)
#loc96 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":56:5)
#loc97 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":56:13)
#loc98 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":57:12)
#loc99 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":57:5)
#loc100 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":58:26)
#loc101 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":58:12)
#loc102 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":58:5)
#loc103 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":58:30)
#loc104 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":59:5)
#loc105 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":64:5)
#loc106 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":59:8)
#loc107 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":59:15)
#loc108 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":60:5)
#loc109 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":62:26)
#loc110 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":63:27)
#loc111 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_42.c":63:9)
#loc112 = loc(fused[#loc1, #loc2])
#loc113 = loc(fused[#loc3, #loc4])
#loc115 = loc(fused[#loc9, #loc8])
#loc116 = loc(fused[#loc11, #loc10])
#loc117 = loc(fused[#loc12, #loc13])
#loc118 = loc(fused[#loc14, #loc15])
#loc119 = loc(fused[#loc16, #loc17])
#loc120 = loc(fused[#loc18, #loc19])
#loc121 = loc(fused[#loc21, #loc20])
#loc122 = loc(fused[#loc24, #loc25])
#loc123 = loc(fused[#loc26, #loc27])
#loc124 = loc(fused[#loc28, #loc29])
#loc125 = loc(fused[#loc30, #loc27])
#loc126 = loc(fused[#loc34, #loc35])
#loc127 = loc(fused[#loc36, #loc37])
#loc128 = loc(fused[#loc38, #loc39])
#loc129 = loc(fused[#loc40, #loc41])
#loc131 = loc(fused[#loc46, #loc45])
#loc132 = loc(fused[#loc48, #loc47])
#loc133 = loc(fused[#loc49, #loc50])
#loc134 = loc(fused[#loc52, #loc53])
#loc135 = loc(fused[#loc54, #loc55])
#loc136 = loc(fused[#loc56, #loc57])
#loc137 = loc(fused[#loc59, #loc58])
#loc138 = loc(fused[#loc62, #loc63])
#loc139 = loc(fused[#loc64, #loc65])
#loc140 = loc(fused[#loc66, #loc67])
#loc141 = loc(fused[#loc68, #loc65])
#loc142 = loc(fused[#loc69, #loc70])
#loc143 = loc(fused[#loc72, #loc73])
#loc144 = loc(fused[#loc71, #loc74])
#loc145 = loc(fused[#loc75, #loc76, #loc77, #loc70])
#loc146 = loc(fused[#loc82, #loc83])
#loc148 = loc(fused[#loc89, #loc87])
#loc149 = loc(fused[#loc91, #loc90])
#loc150 = loc(fused[#loc92, #loc93])
#loc151 = loc(fused[#loc94, #loc95])
#loc152 = loc(fused[#loc96, #loc97])
#loc153 = loc(fused[#loc99, #loc98])
#loc154 = loc(fused[#loc102, #loc103])
#loc155 = loc(fused[#loc104, #loc105])
#loc156 = loc(fused[#loc106, #loc107])
#loc157 = loc(fused[#loc108, #loc105])
