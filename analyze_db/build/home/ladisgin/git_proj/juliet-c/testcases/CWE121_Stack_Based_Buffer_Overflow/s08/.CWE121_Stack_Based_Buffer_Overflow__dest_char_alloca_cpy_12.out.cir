!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":99:10)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":99:14)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":99:20)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":99:32)
#loc154 = loc(fused[#loc67, #loc68])
#loc155 = loc(fused[#loc69, #loc70])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc131)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc132)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc133)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc135)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc136)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc137)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc14)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc14)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc14)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc14)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc14)
    %8 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc138)
    %9 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc14)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc14)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc137)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc16)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc16)
    %13 = cir.const #cir.int<1> : !u64i loc(#loc16)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc16)
    %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc16)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc16)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc16)
    cir.store %17, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc138)
    cir.br ^bb1 loc(#loc139)
  ^bb1:  // pred: ^bb0
    %18 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc140)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc140)
    %20 = cir.call %19() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc19)
    %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %21 ^bb2, ^bb3 loc(#loc141)
  ^bb2:  // pred: ^bb1
    %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc24)
    cir.store %22, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc142)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc26)
    %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc26)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
    %26 = cir.const #cir.int<0> : !s32i loc(#loc28)
    %27 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc29)
    cir.store %24, %27 : !s8i, !cir.ptr<!s8i> loc(#loc143)
    cir.br ^bb4 loc(#loc22)
  ^bb3:  // pred: ^bb1
    %28 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
    cir.store %28, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc144)
    %29 = cir.const #cir.int<0> : !s32i loc(#loc32)
    %30 = cir.cast(integral, %29 : !s32i), !s8i loc(#loc32)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc34)
    %33 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %32 : !s32i), !cir.ptr<!s8i> loc(#loc35)
    cir.store %30, %33 : !s8i, !cir.ptr<!s8i> loc(#loc145)
    cir.br ^bb4 loc(#loc18)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc18)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc146)
  ^bb6:  // pred: ^bb5
    %34 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc38)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc38)
    %36 = cir.const #cir.int<67> : !s32i loc(#loc39)
    %37 = cir.const #cir.int<100> : !s32i loc(#loc40)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %39 = cir.binop(sub, %37, %38) nsw : !s32i loc(#loc40)
    %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc40)
    cir.libc.memset %40 bytes from %35 set to %36 : !cir.ptr<!void>, !s32i, !u64i loc(#loc147)
    %41 = cir.const #cir.int<0> : !s32i loc(#loc44)
    %42 = cir.cast(integral, %41 : !s32i), !s8i loc(#loc44)
    %43 = cir.const #cir.int<100> : !s32i loc(#loc45)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc46)
    %45 = cir.binop(sub, %43, %44) nsw : !s32i loc(#loc45)
    %46 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc47)
    %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc47)
    cir.store %42, %47 : !s8i, !cir.ptr<!s8i> loc(#loc148)
    %48 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc48)
    %49 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
    %50 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc50)
    %51 = cir.call @strcpy(%49, %50) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc48)
    %52 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%52) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    cir.br ^bb7 loc(#loc37)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc8)
  } loc(#loc134)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc150)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc55)
    cir.return loc(#loc54)
  } loc(#loc149)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc151)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc152)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc64)
  cir.func @main(%arg0: !s32i loc(fused[#loc67, #loc68]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc69, #loc70])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc154)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc155)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc66)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc71)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc72)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc73)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc73)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc74)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc61)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc156)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12_good() : () -> () loc(#loc76)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc62)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc63)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc157)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12_bad() : () -> () loc(#loc80)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc64)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc83)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    cir.return %17 : !s32i loc(#loc158)
  } loc(#loc153)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc160)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc161)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc162)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc92)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc92)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc92)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc92)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc92)
    %8 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc163)
    %9 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc92)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc92)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc162)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc94)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc94)
    %13 = cir.const #cir.int<1> : !u64i loc(#loc94)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc94)
    %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc94)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc94)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc94)
    cir.store %17, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc163)
    cir.br ^bb1 loc(#loc164)
  ^bb1:  // pred: ^bb0
    %18 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc165)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc165)
    %20 = cir.call %19() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc97)
    %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc97)
    cir.brcond %21 ^bb2, ^bb3 loc(#loc166)
  ^bb2:  // pred: ^bb1
    %22 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc102)
    cir.store %22, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc167)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc104)
    %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc104)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc105)
    %26 = cir.const #cir.int<0> : !s32i loc(#loc106)
    %27 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc107)
    cir.store %24, %27 : !s8i, !cir.ptr<!s8i> loc(#loc168)
    cir.br ^bb4 loc(#loc100)
  ^bb3:  // pred: ^bb1
    %28 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc108)
    cir.store %28, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc169)
    %29 = cir.const #cir.int<0> : !s32i loc(#loc110)
    %30 = cir.cast(integral, %29 : !s32i), !s8i loc(#loc110)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc112)
    %33 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %32 : !s32i), !cir.ptr<!s8i> loc(#loc113)
    cir.store %30, %33 : !s8i, !cir.ptr<!s8i> loc(#loc170)
    cir.br ^bb4 loc(#loc96)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc96)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc171)
  ^bb6:  // pred: ^bb5
    %34 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc116)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc116)
    %36 = cir.const #cir.int<67> : !s32i loc(#loc117)
    %37 = cir.const #cir.int<100> : !s32i loc(#loc118)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc119)
    %39 = cir.binop(sub, %37, %38) nsw : !s32i loc(#loc118)
    %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc118)
    cir.libc.memset %40 bytes from %35 set to %36 : !cir.ptr<!void>, !s32i, !u64i loc(#loc172)
    %41 = cir.const #cir.int<0> : !s32i loc(#loc122)
    %42 = cir.cast(integral, %41 : !s32i), !s8i loc(#loc122)
    %43 = cir.const #cir.int<100> : !s32i loc(#loc123)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc124)
    %45 = cir.binop(sub, %43, %44) nsw : !s32i loc(#loc123)
    %46 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc125)
    %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc125)
    cir.store %42, %47 : !s8i, !cir.ptr<!s8i> loc(#loc173)
    %48 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc126)
    %49 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
    %50 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc128)
    %51 = cir.call @strcpy(%49, %50) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc126)
    %52 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
    cir.call @printLine(%52) : (!cir.ptr<!s8i>) -> () loc(#loc130)
    cir.br ^bb7 loc(#loc115)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc86)
  } loc(#loc159)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/string.h":141:1)
#loc4 = loc("/usr/include/string.h":142:14)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":23:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":49:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":42:9)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":42:24)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":25:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":25:12)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":26:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":26:36)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":27:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":27:37)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":28:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":40:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":28:8)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":28:33)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":29:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":34:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":36:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":32:16)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":32:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":33:19)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":33:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":33:14)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":33:15)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":38:16)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":38:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":39:19)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":39:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":39:14)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":39:15)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":41:5)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":48:5)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":43:16)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":43:24)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":43:29)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":43:33)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":43:9)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":43:34)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":44:25)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":44:16)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":44:20)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":44:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":46:9)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":46:16)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":46:22)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":47:19)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":47:9)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":84:1)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":87:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":86:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":86:13)
#loc57 = loc("/usr/include/stdlib.h":575:1)
#loc58 = loc("/usr/include/stdlib.h":575:41)
#loc59 = loc("/usr/include/time.h":76:1)
#loc60 = loc("/usr/include/time.h":76:38)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":104:15)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":106:15)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":109:15)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":111:15)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":99:1)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":114:1)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":100:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":102:27)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":102:22)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":102:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":104:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":105:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":105:70)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":106:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":109:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":110:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":110:69)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":111:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":113:12)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":113:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":57:1)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":82:1)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":75:9)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":75:24)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":59:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":59:12)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":60:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":60:36)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":61:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":61:37)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":62:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":73:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":62:8)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":62:33)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":63:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":67:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":69:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":65:16)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":65:9)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":66:19)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":66:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":66:14)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":66:15)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":71:16)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":71:9)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":72:19)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":72:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":72:14)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":72:15)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":74:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":81:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":76:16)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":76:24)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":76:29)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":76:33)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":76:9)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":76:34)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":77:25)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":77:16)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":77:20)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":77:9)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":79:9)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":79:16)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":79:22)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":80:19)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c":80:9)
#loc131 = loc(fused[#loc1, #loc2])
#loc132 = loc(fused[#loc3, #loc4])
#loc133 = loc(fused[#loc5, #loc6])
#loc134 = loc(fused[#loc7, #loc8])
#loc135 = loc(fused[#loc9, #loc10])
#loc136 = loc(fused[#loc11, #loc12])
#loc137 = loc(fused[#loc13, #loc14])
#loc138 = loc(fused[#loc15, #loc16])
#loc139 = loc(fused[#loc17, #loc18])
#loc140 = loc(fused[#loc19, #loc20])
#loc141 = loc(fused[#loc21, #loc22, #loc23, #loc18])
#loc142 = loc(fused[#loc25, #loc24])
#loc143 = loc(fused[#loc27, #loc26])
#loc144 = loc(fused[#loc31, #loc30])
#loc145 = loc(fused[#loc33, #loc32])
#loc146 = loc(fused[#loc36, #loc37])
#loc147 = loc(fused[#loc42, #loc43])
#loc148 = loc(fused[#loc47, #loc44])
#loc149 = loc(fused[#loc53, #loc54])
#loc150 = loc(fused[#loc55, #loc56])
#loc151 = loc(fused[#loc57, #loc58])
#loc152 = loc(fused[#loc59, #loc60])
#loc153 = loc(fused[#loc65, #loc66])
#loc156 = loc(fused[#loc76, #loc77])
#loc157 = loc(fused[#loc80, #loc81])
#loc158 = loc(fused[#loc84, #loc83])
#loc159 = loc(fused[#loc85, #loc86])
#loc160 = loc(fused[#loc87, #loc88])
#loc161 = loc(fused[#loc89, #loc90])
#loc162 = loc(fused[#loc91, #loc92])
#loc163 = loc(fused[#loc93, #loc94])
#loc164 = loc(fused[#loc95, #loc96])
#loc165 = loc(fused[#loc97, #loc98])
#loc166 = loc(fused[#loc99, #loc100, #loc101, #loc96])
#loc167 = loc(fused[#loc103, #loc102])
#loc168 = loc(fused[#loc105, #loc104])
#loc169 = loc(fused[#loc109, #loc108])
#loc170 = loc(fused[#loc111, #loc110])
#loc171 = loc(fused[#loc114, #loc115])
#loc172 = loc(fused[#loc120, #loc121])
#loc173 = loc(fused[#loc125, #loc122])
