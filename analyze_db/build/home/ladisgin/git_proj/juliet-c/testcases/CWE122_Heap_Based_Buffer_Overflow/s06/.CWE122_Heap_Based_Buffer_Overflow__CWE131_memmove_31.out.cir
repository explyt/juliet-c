!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":80:10)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":80:14)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":80:20)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":80:32)
#loc153 = loc(fused[#loc66, #loc67])
#loc154 = loc(fused[#loc68, #loc69])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc127)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc128)
  cir.func private @printIntLine(!s32i) loc(#loc129)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc130)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc132)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc133)
    %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc134)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc135)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc19)
    cir.store %4, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc136)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
    %6 = cir.const #cir.int<10> : !s32i loc(#loc22)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc22)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc137)
    cir.store %9, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc138)
    cir.br ^bb1 loc(#loc139)
  ^bb1:  // pred: ^bb0
    %10 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc28)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc140)
    cir.brcond %13 ^bb2, ^bb3 loc(#loc141)
  ^bb2:  // pred: ^bb1
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc30)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc32)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
    cir.br ^bb3 loc(#loc26)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc26)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc142)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc12)
    cir.store %17, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc132)
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc14)
    cir.store %18, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc133)
    cir.br ^bb6 loc(#loc143)
  ^bb6:  // pred: ^bb5
    %19 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc134)
    cir.store %19, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc134)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc37)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc37)
    %22 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc38)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc38)
    %24 = cir.const #cir.int<10> : !s32i loc(#loc39)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc39)
    %26 = cir.const #cir.int<4> : !u64i loc(#loc144)
    %27 = cir.binop(mul, %25, %26) : !u64i loc(#loc145)
    cir.libc.memmove %27 bytes from %23 to %21 : !cir.ptr<!void>, !u64i loc(#loc146)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
    %29 = cir.const #cir.int<0> : !s32i loc(#loc45)
    %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc46)
    %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc47)
    %32 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc48)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
    %34 = cir.cast(bitcast, %33 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc49)
    cir.call @free(%34) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc48)
    cir.br ^bb7 loc(#loc36)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc34)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc10)
  } loc(#loc131)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc148)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    cir.return loc(#loc51)
  } loc(#loc147)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc149)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc150)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc151)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc63)
  cir.func @main(%arg0: !s32i loc(fused[#loc66, #loc67]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc68, #loc69])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc153)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc154)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc65)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc70)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc70)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc71)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc72)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc72)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc73)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc60)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31_good : !cir.ptr<!cir.func<!void ()>> loc(#loc155)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31_good() : () -> () loc(#loc75)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc61)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc62)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc156)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31_bad() : () -> () loc(#loc79)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc63)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc82)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc157)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    cir.return %17 : !s32i loc(#loc157)
  } loc(#loc152)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc159)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc160)
    %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc161)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc162)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc94)
    cir.store %4, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc163)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc96)
    %6 = cir.const #cir.int<10> : !s32i loc(#loc97)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc97)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc164)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc165)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc96)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc166)
    cir.store %11, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc167)
    cir.br ^bb1 loc(#loc168)
  ^bb1:  // pred: ^bb0
    %12 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc104)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc105)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc105)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc169)
    cir.brcond %15 ^bb2, ^bb3 loc(#loc170)
  ^bb2:  // pred: ^bb1
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc107)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc108)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc109)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc107)
    cir.br ^bb3 loc(#loc103)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc103)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc171)
  ^bb5:  // pred: ^bb4
    %19 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc87)
    cir.store %19, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc159)
    %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc89)
    cir.store %20, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc160)
    cir.br ^bb6 loc(#loc172)
  ^bb6:  // pred: ^bb5
    %21 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc161)
    cir.store %21, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc161)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc114)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc114)
    %24 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc115)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc115)
    %26 = cir.const #cir.int<10> : !s32i loc(#loc116)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc116)
    %28 = cir.const #cir.int<4> : !u64i loc(#loc173)
    %29 = cir.binop(mul, %27, %28) : !u64i loc(#loc174)
    cir.libc.memmove %29 bytes from %25 to %23 : !cir.ptr<!void>, !u64i loc(#loc175)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc121)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc122)
    %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !s32i), !cir.ptr<!s32i> loc(#loc123)
    %33 = cir.load %32 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc124)
    %34 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc125)
    %35 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc126)
    %36 = cir.cast(bitcast, %35 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc126)
    cir.call @free(%36) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc125)
    cir.br ^bb7 loc(#loc113)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc111)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc85)
  } loc(#loc158)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":39:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":29:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":29:26)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":30:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":30:22)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":32:13)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":32:32)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":23:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":23:11)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":24:12)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":24:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":26:19)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":26:26)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":26:28)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":26:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":27:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":27:33)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":27:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":27:17)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":27:23)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":27:24)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":27:30)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":27:29)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":28:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":38:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":31:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":37:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":34:21)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":34:27)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":34:35)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":34:38)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":34:48)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":34:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":34:49)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":35:26)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":35:31)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":35:32)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":35:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":36:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":36:18)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":66:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":69:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":68:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":68:13)
#loc54 = loc("/usr/include/stdlib.h":575:1)
#loc55 = loc("/usr/include/stdlib.h":575:41)
#loc56 = loc("/usr/include/time.h":76:1)
#loc57 = loc("/usr/include/time.h":76:38)
#loc58 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc59 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":85:15)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":87:15)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":90:15)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":92:15)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":80:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":95:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":81:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":83:27)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":83:22)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":83:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":85:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":86:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":86:63)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":87:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":90:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":91:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":91:62)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":92:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":94:12)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":94:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":46:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":64:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":54:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":54:26)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":55:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":55:22)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":57:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":57:32)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":48:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":48:11)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":49:12)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":49:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":51:19)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":51:26)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":51:29)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":51:39)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":51:40)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":51:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":52:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":52:33)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":52:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":52:17)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":52:23)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":52:24)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":52:30)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":52:29)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":53:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":63:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":56:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":62:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":59:21)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":59:27)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":59:35)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":59:38)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":59:48)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":59:13)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":59:49)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":60:26)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":60:31)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":60:32)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":60:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":61:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c":61:18)
#loc127 = loc(fused[#loc1, #loc2])
#loc128 = loc(fused[#loc3, #loc4])
#loc129 = loc(fused[#loc5, #loc6])
#loc130 = loc(fused[#loc7, #loc8])
#loc131 = loc(fused[#loc9, #loc10])
#loc132 = loc(fused[#loc11, #loc12])
#loc133 = loc(fused[#loc13, #loc14])
#loc134 = loc(fused[#loc15, #loc16])
#loc135 = loc(fused[#loc17, #loc18])
#loc136 = loc(fused[#loc20, #loc19])
#loc137 = loc(fused[#loc21, #loc23])
#loc138 = loc(fused[#loc24, #loc23])
#loc139 = loc(fused[#loc25, #loc26])
#loc140 = loc(fused[#loc27, #loc28])
#loc141 = loc(fused[#loc29, #loc26])
#loc142 = loc(fused[#loc33, #loc34])
#loc143 = loc(fused[#loc35, #loc36])
#loc144 = loc(fused[#loc40, #loc41])
#loc145 = loc(fused[#loc39, #loc41])
#loc146 = loc(fused[#loc42, #loc43])
#loc147 = loc(fused[#loc50, #loc51])
#loc148 = loc(fused[#loc52, #loc53])
#loc149 = loc(fused[#loc54, #loc55])
#loc150 = loc(fused[#loc56, #loc57])
#loc151 = loc(fused[#loc58, #loc59])
#loc152 = loc(fused[#loc64, #loc65])
#loc155 = loc(fused[#loc75, #loc76])
#loc156 = loc(fused[#loc79, #loc80])
#loc157 = loc(fused[#loc83, #loc82])
#loc158 = loc(fused[#loc84, #loc85])
#loc159 = loc(fused[#loc86, #loc87])
#loc160 = loc(fused[#loc88, #loc89])
#loc161 = loc(fused[#loc90, #loc91])
#loc162 = loc(fused[#loc92, #loc93])
#loc163 = loc(fused[#loc95, #loc94])
#loc164 = loc(fused[#loc98, #loc99])
#loc165 = loc(fused[#loc97, #loc99])
#loc166 = loc(fused[#loc96, #loc100])
#loc167 = loc(fused[#loc101, #loc100])
#loc168 = loc(fused[#loc102, #loc103])
#loc169 = loc(fused[#loc104, #loc105])
#loc170 = loc(fused[#loc106, #loc103])
#loc171 = loc(fused[#loc110, #loc111])
#loc172 = loc(fused[#loc112, #loc113])
#loc173 = loc(fused[#loc117, #loc118])
#loc174 = loc(fused[#loc116, #loc118])
#loc175 = loc(fused[#loc119, #loc120])
