!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":25:75)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":25:82)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":44:79)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":44:86)
#loc78 = loc(fused[#loc7, #loc8])
#loc88 = loc(fused[#loc42, #loc43])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc75)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc76)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d_badSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc78)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc9)
    cir.scope {
      %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc80)
      %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc14)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc14)
      %4 = cir.const #cir.int<67> : !s32i loc(#loc15)
      %5 = cir.const #cir.int<100> : !s32i loc(#loc16)
      %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
      %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc16)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc16)
      cir.libc.memset %8 bytes from %3 set to %4 : !cir.ptr<!void>, !s32i, !u64i loc(#loc81)
      %9 = cir.const #cir.int<0> : !s32i loc(#loc20)
      %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc20)
      %11 = cir.const #cir.int<100> : !s32i loc(#loc21)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc22)
      %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc21)
      %14 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc23)
      %15 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %13 : !s32i), !cir.ptr<!s8i> loc(#loc23)
      cir.store %10, %15 : !s8i, !cir.ptr<!s8i> loc(#loc82)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc24)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc24)
      %18 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc25)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc25)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc26)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc26)
      %22 = cir.const #cir.int<1> : !u64i loc(#loc83)
      %23 = cir.binop(mul, %21, %22) : !u64i loc(#loc84)
      cir.libc.memmove %23 bytes from %19 to %17 : !cir.ptr<!void>, !u64i loc(#loc85)
      %24 = cir.const #cir.int<0> : !s32i loc(#loc31)
      %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc31)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
      %27 = cir.const #cir.int<100> : !s32i loc(#loc33)
      %28 = cir.const #cir.int<1> : !s32i loc(#loc34)
      %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc33)
      %30 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc35)
      cir.store %25, %30 : !s8i, !cir.ptr<!s8i> loc(#loc86)
      %31 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
      cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc37)
      %32 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc38)
      %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
      %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc39)
      cir.call @free(%34) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc38)
    } loc(#loc79)
    cir.return loc(#loc6)
  } loc(#loc77)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d_goodG2BSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc42, #loc43])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc88)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc44)
    cir.scope {
      %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc90)
      %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc49)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc49)
      %4 = cir.const #cir.int<67> : !s32i loc(#loc50)
      %5 = cir.const #cir.int<100> : !s32i loc(#loc51)
      %6 = cir.const #cir.int<1> : !s32i loc(#loc52)
      %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc51)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc51)
      cir.libc.memset %8 bytes from %3 set to %4 : !cir.ptr<!void>, !s32i, !u64i loc(#loc91)
      %9 = cir.const #cir.int<0> : !s32i loc(#loc55)
      %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc55)
      %11 = cir.const #cir.int<100> : !s32i loc(#loc56)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc57)
      %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc56)
      %14 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc58)
      %15 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %13 : !s32i), !cir.ptr<!s8i> loc(#loc58)
      cir.store %10, %15 : !s8i, !cir.ptr<!s8i> loc(#loc92)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc59)
      %18 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc60)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc60)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc61)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc61)
      %22 = cir.const #cir.int<1> : !u64i loc(#loc93)
      %23 = cir.binop(mul, %21, %22) : !u64i loc(#loc94)
      cir.libc.memmove %23 bytes from %19 to %17 : !cir.ptr<!void>, !u64i loc(#loc95)
      %24 = cir.const #cir.int<0> : !s32i loc(#loc66)
      %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc66)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc67)
      %27 = cir.const #cir.int<100> : !s32i loc(#loc68)
      %28 = cir.const #cir.int<1> : !s32i loc(#loc69)
      %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc68)
      %30 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc70)
      cir.store %25, %30 : !s8i, !cir.ptr<!s8i> loc(#loc96)
      %31 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc71)
      cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc72)
      %32 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc73)
      %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc74)
      %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc74)
      cir.call @free(%34) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc73)
    } loc(#loc89)
    cir.return loc(#loc41)
  } loc(#loc87)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":25:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":37:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":26:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":27:5)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":36:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":28:9)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":28:24)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":29:16)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":29:24)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":29:29)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":29:33)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":29:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":29:34)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":30:25)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":30:16)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":30:20)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":30:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":32:17)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":32:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":32:31)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":32:35)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":32:46)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":32:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":32:47)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":33:23)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":33:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":33:14)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":33:18)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":33:19)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":34:19)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":34:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":35:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":35:14)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":44:1)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":56:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":45:1)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":46:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":55:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":47:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":47:24)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":48:16)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":48:24)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":48:29)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":48:33)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":48:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":48:34)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":49:25)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":49:16)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":49:20)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":49:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":51:17)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":51:23)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":51:31)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":51:35)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":51:46)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":51:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":51:47)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":52:23)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":52:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":52:14)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":52:18)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":52:19)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":53:19)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":53:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":54:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c":54:14)
#loc75 = loc(fused[#loc1, #loc2])
#loc76 = loc(fused[#loc3, #loc4])
#loc77 = loc(fused[#loc5, #loc6])
#loc79 = loc(fused[#loc10, #loc11])
#loc80 = loc(fused[#loc12, #loc13])
#loc81 = loc(fused[#loc18, #loc19])
#loc82 = loc(fused[#loc23, #loc20])
#loc83 = loc(fused[#loc27, #loc28])
#loc84 = loc(fused[#loc26, #loc28])
#loc85 = loc(fused[#loc29, #loc30])
#loc86 = loc(fused[#loc32, #loc31])
#loc87 = loc(fused[#loc40, #loc41])
#loc89 = loc(fused[#loc45, #loc46])
#loc90 = loc(fused[#loc47, #loc48])
#loc91 = loc(fused[#loc53, #loc54])
#loc92 = loc(fused[#loc58, #loc55])
#loc93 = loc(fused[#loc62, #loc63])
#loc94 = loc(fused[#loc61, #loc63])
#loc95 = loc(fused[#loc64, #loc65])
#loc96 = loc(fused[#loc67, #loc66])
