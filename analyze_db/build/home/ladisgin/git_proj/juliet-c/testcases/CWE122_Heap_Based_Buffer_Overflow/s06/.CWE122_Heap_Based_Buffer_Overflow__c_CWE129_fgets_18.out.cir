!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":184:10)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":184:14)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":184:20)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":184:32)
#true = #cir.bool<true> : !cir.bool
#loc356 = loc(fused[#loc123, #loc124])
#loc357 = loc(fused[#loc125, #loc126])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc309)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc310)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc311)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc312)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc313)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc314)
  cir.func private @printIntLine(!s32i) loc(#loc315)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc16)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc316)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc318)
    %1 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc319)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc320)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc321)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc30)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc322)
    cir.goto "source" loc(#loc323)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc34)
    %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc319)
    cir.store %6, %1 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc319)
    cir.scope {
      %17 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc37)
      %18 = cir.const #cir.int<3> : !s32i loc(#loc38)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc38)
      %20 = cir.const #cir.int<4> : !u64i loc(#loc38)
      %21 = cir.binop(mul, %19, %20) : !u64i loc(#loc38)
      %22 = cir.const #cir.int<2> : !s32i loc(#loc38)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc38)
      %24 = cir.binop(add, %21, %23) : !u64i loc(#loc38)
      %25 = cir.cast(integral, %24 : !u64i), !s32i loc(#loc38)
      %26 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc310)
      %27 = cir.load %26 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc39)
      %28 = cir.call @fgets(%17, %25, %27) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc40)
      %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc41)
      %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc41)
      %31 = cir.cmp(ne, %28, %30) : !cir.ptr<!s8i>, !cir.bool loc(#loc325)
      cir.if %31 {
        %32 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc45)
        %33 = cir.call @atoi(%32) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc46)
        cir.store %33, %0 : !s32i, !cir.ptr<!s32i> loc(#loc327)
      } else {
        %32 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
        %33 = cir.cast(array_to_ptrdecay, %32 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
        cir.call @printLine(%33) : (!cir.ptr<!s8i>) -> () loc(#loc49)
      } loc(#loc326)
    } loc(#loc324)
    cir.goto "sink" loc(#loc328)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc52)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc53)
    %8 = cir.const #cir.int<10> : !s32i loc(#loc54)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc54)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc329)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc330)
    %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc53)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc331)
    cir.store %13, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc321)
    cir.scope {
      %17 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc59)
      %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc60)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc60)
      %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc333)
      cir.if %20 {
        %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc62)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc63)
        %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc64)
        cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc62)
      } loc(#loc334)
    } loc(#loc332)
    cir.scope {
      %17 = cir.const #cir.int<0> : !s32i loc(#loc67)
      cir.store %17, %2 : !s32i, !cir.ptr<!s32i> loc(#loc336)
      cir.for : cond {
        %18 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc69)
        %19 = cir.const #cir.int<10> : !s32i loc(#loc70)
        %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc337)
        cir.condition(%20) loc(#loc71)
      } body {
        cir.scope {
          %18 = cir.const #cir.int<0> : !s32i loc(#loc73)
          %19 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc74)
          %20 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc75)
          %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc76)
          cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc339)
        } loc(#loc338)
        cir.yield loc(#loc66)
      } step {
        %18 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc77)
        %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc78)
        cir.store %19, %2 : !s32i, !cir.ptr<!s32i> loc(#loc340)
        cir.yield loc(#loc335)
      } loc(#loc335)
    } loc(#loc335)
    cir.scope {
      %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc82)
      %19 = cir.cmp(ge, %17, %18) : !s32i, !cir.bool loc(#loc342)
      cir.if %19 {
        %20 = cir.const #cir.int<1> : !s32i loc(#loc86)
        %21 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc87)
        %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc88)
        %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc89)
        cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc344)
        cir.scope {
          %24 = cir.const #cir.int<0> : !s32i loc(#loc92)
          cir.store %24, %2 : !s32i, !cir.ptr<!s32i> loc(#loc346)
          cir.for : cond {
            %25 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc94)
            %26 = cir.const #cir.int<10> : !s32i loc(#loc95)
            %27 = cir.cmp(lt, %25, %26) : !s32i, !cir.bool loc(#loc347)
            cir.condition(%27) loc(#loc96)
          } body {
            cir.scope {
              %25 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc98)
              %26 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc99)
              %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc100)
              %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc98)
              cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc101)
            } loc(#loc348)
            cir.yield loc(#loc91)
          } step {
            %25 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc102)
            %26 = cir.unary(inc, %25) : !s32i, !s32i loc(#loc103)
            cir.store %26, %2 : !s32i, !cir.ptr<!s32i> loc(#loc349)
            cir.yield loc(#loc345)
          } loc(#loc345)
        } loc(#loc345)
      } else {
        %20 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc16)
        %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc16)
        cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc104)
      } loc(#loc343)
    } loc(#loc341)
    %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc105)
    %15 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc106)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc106)
    cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc105)
    cir.return loc(#loc20)
  } loc(#loc317)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc351)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc109)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc352)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc111)
    cir.return loc(#loc108)
  } loc(#loc350)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc353)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc354)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc117)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc118)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc119)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc120)
  cir.func @main(%arg0: !s32i loc(fused[#loc123, #loc124]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc125, #loc126])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc356)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc357)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc122)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc127)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc128)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc129)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc129)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc130)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc117)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc117)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc131)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18_good : !cir.ptr<!cir.func<!void ()>> loc(#loc358)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18_good() : () -> () loc(#loc132)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc118)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc118)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc134)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc119)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc119)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc135)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc359)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18_bad() : () -> () loc(#loc136)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc120)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc120)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc138)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc139)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc360)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc360)
    cir.return %17 : !s32i loc(#loc360)
  } loc(#loc355)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc141)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc362)
    %1 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc363)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc364)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc365)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc152)
    %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc153)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc366)
    cir.goto "source" loc(#loc367)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc157)
    %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc363)
    cir.store %6, %1 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc363)
    cir.scope {
      %17 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc160)
      %18 = cir.const #cir.int<3> : !s32i loc(#loc161)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc161)
      %20 = cir.const #cir.int<4> : !u64i loc(#loc161)
      %21 = cir.binop(mul, %19, %20) : !u64i loc(#loc161)
      %22 = cir.const #cir.int<2> : !s32i loc(#loc161)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc161)
      %24 = cir.binop(add, %21, %23) : !u64i loc(#loc161)
      %25 = cir.cast(integral, %24 : !u64i), !s32i loc(#loc161)
      %26 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc310)
      %27 = cir.load %26 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc162)
      %28 = cir.call @fgets(%17, %25, %27) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc163)
      %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc164)
      %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc164)
      %31 = cir.cmp(ne, %28, %30) : !cir.ptr<!s8i>, !cir.bool loc(#loc369)
      cir.if %31 {
        %32 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc168)
        %33 = cir.call @atoi(%32) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc169)
        cir.store %33, %0 : !s32i, !cir.ptr<!s32i> loc(#loc371)
      } else {
        %32 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc172)
        %33 = cir.cast(array_to_ptrdecay, %32 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc172)
        cir.call @printLine(%33) : (!cir.ptr<!s8i>) -> () loc(#loc173)
      } loc(#loc370)
    } loc(#loc368)
    cir.goto "sink" loc(#loc372)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc176)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc177)
    %8 = cir.const #cir.int<10> : !s32i loc(#loc178)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc178)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc373)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc374)
    %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc177)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc375)
    cir.store %13, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc365)
    cir.scope {
      %17 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc183)
      %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc184)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc184)
      %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc377)
      cir.if %20 {
        %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc186)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc187)
        %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc188)
        cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc186)
      } loc(#loc378)
    } loc(#loc376)
    cir.scope {
      %17 = cir.const #cir.int<0> : !s32i loc(#loc191)
      cir.store %17, %2 : !s32i, !cir.ptr<!s32i> loc(#loc380)
      cir.for : cond {
        %18 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc193)
        %19 = cir.const #cir.int<10> : !s32i loc(#loc194)
        %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc381)
        cir.condition(%20) loc(#loc195)
      } body {
        cir.scope {
          %18 = cir.const #cir.int<0> : !s32i loc(#loc197)
          %19 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc198)
          %20 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc199)
          %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc200)
          cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc383)
        } loc(#loc382)
        cir.yield loc(#loc190)
      } step {
        %18 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc201)
        %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc202)
        cir.store %19, %2 : !s32i, !cir.ptr<!s32i> loc(#loc384)
        cir.yield loc(#loc379)
      } loc(#loc379)
    } loc(#loc379)
    cir.scope {
      %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc205)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc206)
      %19 = cir.cmp(ge, %17, %18) : !s32i, !cir.bool loc(#loc386)
      %20 = cir.ternary(%19, true {
        %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc208)
        %22 = cir.const #cir.int<10> : !s32i loc(#loc209)
        %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc387)
        %24 = cir.ternary(%23, true {
          %25 = cir.const #true loc(#loc207)
          cir.yield %25 : !cir.bool loc(#loc207)
        }, false {
          %25 = cir.const #false loc(#loc207)
          cir.yield %25 : !cir.bool loc(#loc207)
        }) : (!cir.bool) -> !cir.bool loc(#loc207)
        cir.yield %24 : !cir.bool loc(#loc207)
      }, false {
        %21 = cir.const #false loc(#loc207)
        cir.yield %21 : !cir.bool loc(#loc207)
      }) : (!cir.bool) -> !cir.bool loc(#loc207)
      cir.if %20 {
        %21 = cir.const #cir.int<1> : !s32i loc(#loc214)
        %22 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc215)
        %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc216)
        %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc217)
        cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc389)
        cir.scope {
          %25 = cir.const #cir.int<0> : !s32i loc(#loc220)
          cir.store %25, %2 : !s32i, !cir.ptr<!s32i> loc(#loc391)
          cir.for : cond {
            %26 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc222)
            %27 = cir.const #cir.int<10> : !s32i loc(#loc223)
            %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc392)
            cir.condition(%28) loc(#loc224)
          } body {
            cir.scope {
              %26 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc226)
              %27 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc227)
              %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc228)
              %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc226)
              cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc229)
            } loc(#loc393)
            cir.yield loc(#loc219)
          } step {
            %26 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc230)
            %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc231)
            cir.store %27, %2 : !s32i, !cir.ptr<!s32i> loc(#loc394)
            cir.yield loc(#loc390)
          } loc(#loc390)
        } loc(#loc390)
      } else {
        %21 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc141)
        %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc141)
        cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc232)
      } loc(#loc388)
    } loc(#loc385)
    %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc233)
    %15 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc234)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc234)
    cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc233)
    cir.return loc(#loc143)
  } loc(#loc361)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc396)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc397)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc398)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc243)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc244)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc399)
    cir.goto "source" loc(#loc400)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc248)
    %5 = cir.const #cir.int<7> : !s32i loc(#loc249)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc401)
    cir.goto "sink" loc(#loc402)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc253)
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc254)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc255)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc255)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc403)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc404)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc254)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc405)
    cir.store %12, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc398)
    cir.scope {
      %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc260)
      %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc261)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc261)
      %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc407)
      cir.if %19 {
        %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc263)
        %21 = cir.const #cir.int<1> : !s32i loc(#loc264)
        %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc265)
        cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc263)
      } loc(#loc408)
    } loc(#loc406)
    cir.scope {
      %16 = cir.const #cir.int<0> : !s32i loc(#loc268)
      cir.store %16, %1 : !s32i, !cir.ptr<!s32i> loc(#loc410)
      cir.for : cond {
        %17 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc270)
        %18 = cir.const #cir.int<10> : !s32i loc(#loc271)
        %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc411)
        cir.condition(%19) loc(#loc272)
      } body {
        cir.scope {
          %17 = cir.const #cir.int<0> : !s32i loc(#loc274)
          %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc275)
          %19 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc276)
          %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc277)
          cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc413)
        } loc(#loc412)
        cir.yield loc(#loc267)
      } step {
        %17 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc278)
        %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc279)
        cir.store %18, %1 : !s32i, !cir.ptr<!s32i> loc(#loc414)
        cir.yield loc(#loc409)
      } loc(#loc409)
    } loc(#loc409)
    cir.scope {
      %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc282)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc283)
      %18 = cir.cmp(ge, %16, %17) : !s32i, !cir.bool loc(#loc416)
      cir.if %18 {
        %19 = cir.const #cir.int<1> : !s32i loc(#loc287)
        %20 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc288)
        %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc289)
        %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc290)
        cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc418)
        cir.scope {
          %23 = cir.const #cir.int<0> : !s32i loc(#loc293)
          cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc420)
          cir.for : cond {
            %24 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc295)
            %25 = cir.const #cir.int<10> : !s32i loc(#loc296)
            %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc421)
            cir.condition(%26) loc(#loc297)
          } body {
            cir.scope {
              %24 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc299)
              %25 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc300)
              %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc301)
              %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc299)
              cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc302)
            } loc(#loc422)
            cir.yield loc(#loc292)
          } step {
            %24 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc303)
            %25 = cir.unary(inc, %24) : !s32i, !s32i loc(#loc304)
            cir.store %25, %1 : !s32i, !cir.ptr<!s32i> loc(#loc423)
            cir.yield loc(#loc419)
          } loc(#loc419)
        } loc(#loc419)
      } else {
        %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc305)
        %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc305)
        cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc306)
      } loc(#loc417)
    } loc(#loc415)
    %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc307)
    %14 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc308)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc308)
    cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc307)
    cir.return loc(#loc236)
  } loc(#loc395)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":41:23)
#loc10 = loc("/usr/include/stdlib.h":672:1)
#loc11 = loc("/usr/include/stdlib.h":672:45)
#loc12 = loc("/usr/include/stdlib.h":756:1)
#loc13 = loc("/usr/include/stdlib.h":756:70)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":68:23)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":24:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":72:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":26:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":26:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":32:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":32:45)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":47:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":47:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":48:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":48:54)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":28:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":28:12)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":28:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":29:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":29:10)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":30:1)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":34:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":42:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":34:19)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":34:32)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":34:49)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":34:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":34:59)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":35:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":38:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":40:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":37:25)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":37:20)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":37:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":37:36)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":41:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":44:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":44:10)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":45:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":48:31)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":48:38)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":48:43)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":48:53)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":49:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":49:39)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":49:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":49:23)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":49:29)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":49:30)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":49:36)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":49:35)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":51:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":54:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":51:18)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":51:14)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":51:21)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":51:25)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":51:23)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":52:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":53:25)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":53:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":53:20)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":53:21)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":51:30)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":51:29)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":57:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":69:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":57:13)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":57:21)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":58:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":65:9)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":67:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":59:28)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":59:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":59:20)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":59:24)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":61:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":64:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":61:21)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":61:17)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":61:24)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":61:28)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":61:26)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":62:13)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":63:30)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":63:37)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":63:38)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":63:17)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":61:33)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":61:32)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":68:13)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":70:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":70:14)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":169:1)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":173:1)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":171:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":171:13)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":172:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":172:13)
#loc113 = loc("/usr/include/stdlib.h":575:1)
#loc114 = loc("/usr/include/stdlib.h":575:41)
#loc115 = loc("/usr/include/time.h":76:1)
#loc116 = loc("/usr/include/time.h":76:38)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":189:15)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":191:15)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":194:15)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":196:15)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":184:1)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":199:1)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":185:1)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":187:27)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":187:22)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":187:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":189:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":190:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":190:63)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":191:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":194:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":195:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":195:62)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":196:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":198:12)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":198:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":122:23)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":79:1)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":126:1)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":81:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":81:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":87:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":87:45)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":102:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":102:13)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":103:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":103:54)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":83:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":83:12)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":83:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":84:5)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":84:10)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":85:1)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":89:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":97:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":89:19)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":89:32)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":89:49)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":89:13)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":89:59)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":90:9)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":93:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":95:9)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":92:25)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":92:20)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":92:13)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":92:36)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":96:23)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":96:13)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":99:5)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":99:10)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":100:1)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":103:31)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":103:38)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":103:43)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":103:53)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":104:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":104:39)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":104:13)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":104:23)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":104:29)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":104:30)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":104:36)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":104:35)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":106:9)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":109:9)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":106:18)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":106:14)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":106:21)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":106:25)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":106:23)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":107:9)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":108:25)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":108:13)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":108:20)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":108:21)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":106:30)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":106:29)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":111:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":123:9)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":111:13)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":111:21)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":111:23)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":111:26)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":111:34)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":111:36)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":112:9)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":119:9)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":121:9)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":113:28)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":113:13)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":113:20)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":113:24)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":115:13)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":118:13)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":115:21)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":115:17)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":115:24)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":115:28)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":115:26)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":116:13)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":117:30)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":117:37)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":117:38)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":117:17)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":115:33)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":115:32)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":122:13)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":124:9)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":124:14)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":129:1)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":167:1)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":131:5)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":131:9)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":142:9)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":142:13)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":143:9)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":143:54)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":133:13)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":133:12)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":133:5)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":134:5)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":134:10)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":135:1)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":138:12)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":138:5)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":139:5)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":139:10)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":140:1)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":143:31)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":143:38)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":143:43)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":143:53)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":144:9)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":144:39)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":144:13)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":144:23)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":144:29)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":144:30)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":144:36)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":144:35)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":146:9)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":149:9)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":146:18)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":146:14)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":146:21)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":146:25)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":146:23)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":147:9)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":148:25)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":148:13)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":148:20)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":148:21)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":146:30)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":146:29)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":152:9)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":164:9)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":152:13)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":152:21)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":153:9)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":160:9)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":162:9)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":154:28)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":154:13)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":154:20)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":154:24)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":156:13)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":159:13)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":156:21)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":156:17)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":156:24)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":156:28)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":156:26)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":157:13)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":158:30)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":158:37)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":158:38)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":158:17)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":156:33)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":156:32)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":163:23)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":163:13)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":165:9)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c":165:14)
#loc309 = loc(fused[#loc1, #loc2])
#loc310 = loc(fused[#loc3, #loc4])
#loc311 = loc(fused[#loc5, #loc6])
#loc312 = loc(fused[#loc7, #loc8])
#loc313 = loc(fused[#loc10, #loc11])
#loc314 = loc(fused[#loc12, #loc13])
#loc315 = loc(fused[#loc14, #loc15])
#loc316 = loc(fused[#loc17, #loc18])
#loc317 = loc(fused[#loc19, #loc20])
#loc318 = loc(fused[#loc21, #loc22])
#loc319 = loc(fused[#loc23, #loc24])
#loc320 = loc(fused[#loc25, #loc26])
#loc321 = loc(fused[#loc27, #loc28])
#loc322 = loc(fused[#loc31, #loc29])
#loc323 = loc(fused[#loc32, #loc33])
#loc324 = loc(fused[#loc35, #loc36])
#loc325 = loc(fused[#loc40, #loc41])
#loc326 = loc(fused[#loc42, #loc43, #loc44, #loc36])
#loc327 = loc(fused[#loc47, #loc48])
#loc328 = loc(fused[#loc50, #loc51])
#loc329 = loc(fused[#loc55, #loc56])
#loc330 = loc(fused[#loc54, #loc56])
#loc331 = loc(fused[#loc53, #loc28])
#loc332 = loc(fused[#loc57, #loc58])
#loc333 = loc(fused[#loc59, #loc60])
#loc334 = loc(fused[#loc61, #loc58])
#loc335 = loc(fused[#loc65, #loc66])
#loc336 = loc(fused[#loc68, #loc67])
#loc337 = loc(fused[#loc69, #loc70])
#loc338 = loc(fused[#loc72, #loc66])
#loc339 = loc(fused[#loc74, #loc73])
#loc340 = loc(fused[#loc78, #loc77])
#loc341 = loc(fused[#loc79, #loc80])
#loc342 = loc(fused[#loc81, #loc82])
#loc343 = loc(fused[#loc83, #loc84, #loc85, #loc80])
#loc344 = loc(fused[#loc87, #loc86])
#loc345 = loc(fused[#loc90, #loc91])
#loc346 = loc(fused[#loc93, #loc92])
#loc347 = loc(fused[#loc94, #loc95])
#loc348 = loc(fused[#loc97, #loc91])
#loc349 = loc(fused[#loc103, #loc102])
#loc350 = loc(fused[#loc107, #loc108])
#loc351 = loc(fused[#loc109, #loc110])
#loc352 = loc(fused[#loc111, #loc112])
#loc353 = loc(fused[#loc113, #loc114])
#loc354 = loc(fused[#loc115, #loc116])
#loc355 = loc(fused[#loc121, #loc122])
#loc358 = loc(fused[#loc132, #loc133])
#loc359 = loc(fused[#loc136, #loc137])
#loc360 = loc(fused[#loc140, #loc139])
#loc361 = loc(fused[#loc142, #loc143])
#loc362 = loc(fused[#loc144, #loc145])
#loc363 = loc(fused[#loc146, #loc147])
#loc364 = loc(fused[#loc148, #loc149])
#loc365 = loc(fused[#loc150, #loc151])
#loc366 = loc(fused[#loc154, #loc152])
#loc367 = loc(fused[#loc155, #loc156])
#loc368 = loc(fused[#loc158, #loc159])
#loc369 = loc(fused[#loc163, #loc164])
#loc370 = loc(fused[#loc165, #loc166, #loc167, #loc159])
#loc371 = loc(fused[#loc170, #loc171])
#loc372 = loc(fused[#loc174, #loc175])
#loc373 = loc(fused[#loc179, #loc180])
#loc374 = loc(fused[#loc178, #loc180])
#loc375 = loc(fused[#loc177, #loc151])
#loc376 = loc(fused[#loc181, #loc182])
#loc377 = loc(fused[#loc183, #loc184])
#loc378 = loc(fused[#loc185, #loc182])
#loc379 = loc(fused[#loc189, #loc190])
#loc380 = loc(fused[#loc192, #loc191])
#loc381 = loc(fused[#loc193, #loc194])
#loc382 = loc(fused[#loc196, #loc190])
#loc383 = loc(fused[#loc198, #loc197])
#loc384 = loc(fused[#loc202, #loc201])
#loc385 = loc(fused[#loc203, #loc204])
#loc386 = loc(fused[#loc205, #loc206])
#loc387 = loc(fused[#loc208, #loc210])
#loc388 = loc(fused[#loc211, #loc212, #loc213, #loc204])
#loc389 = loc(fused[#loc215, #loc214])
#loc390 = loc(fused[#loc218, #loc219])
#loc391 = loc(fused[#loc221, #loc220])
#loc392 = loc(fused[#loc222, #loc223])
#loc393 = loc(fused[#loc225, #loc219])
#loc394 = loc(fused[#loc231, #loc230])
#loc395 = loc(fused[#loc235, #loc236])
#loc396 = loc(fused[#loc237, #loc238])
#loc397 = loc(fused[#loc239, #loc240])
#loc398 = loc(fused[#loc241, #loc242])
#loc399 = loc(fused[#loc245, #loc243])
#loc400 = loc(fused[#loc246, #loc247])
#loc401 = loc(fused[#loc250, #loc249])
#loc402 = loc(fused[#loc251, #loc252])
#loc403 = loc(fused[#loc256, #loc257])
#loc404 = loc(fused[#loc255, #loc257])
#loc405 = loc(fused[#loc254, #loc242])
#loc406 = loc(fused[#loc258, #loc259])
#loc407 = loc(fused[#loc260, #loc261])
#loc408 = loc(fused[#loc262, #loc259])
#loc409 = loc(fused[#loc266, #loc267])
#loc410 = loc(fused[#loc269, #loc268])
#loc411 = loc(fused[#loc270, #loc271])
#loc412 = loc(fused[#loc273, #loc267])
#loc413 = loc(fused[#loc275, #loc274])
#loc414 = loc(fused[#loc279, #loc278])
#loc415 = loc(fused[#loc280, #loc281])
#loc416 = loc(fused[#loc282, #loc283])
#loc417 = loc(fused[#loc284, #loc285, #loc286, #loc281])
#loc418 = loc(fused[#loc288, #loc287])
#loc419 = loc(fused[#loc291, #loc292])
#loc420 = loc(fused[#loc294, #loc293])
#loc421 = loc(fused[#loc295, #loc296])
#loc422 = loc(fused[#loc298, #loc292])
#loc423 = loc(fused[#loc304, #loc303])
