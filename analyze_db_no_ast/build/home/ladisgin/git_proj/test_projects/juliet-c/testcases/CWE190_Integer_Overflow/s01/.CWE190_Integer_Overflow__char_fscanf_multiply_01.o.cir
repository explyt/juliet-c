!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_multiply_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc86)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc87)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private  @printHexCharLine(!s8i) loc(#loc88)
  cir.func no_proto  @CWE190_Integer_Overflow__char_fscanf_multiply_01_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc90)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc12)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc12)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc91)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc14)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc87)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc15)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc14)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc18)
      %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc18)
      %11 = cir.const #cir.int<0> : !s32i loc(#loc19)
      %12 = cir.cmp(gt, %10, %11) : !s32i, !s32i loc(#loc93)
      %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc20)
      cir.if %13 {
        %14 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc95)
        %15 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc24)
        %16 = cir.cast(integral, %15 : !s8i), !s32i loc(#loc24)
        %17 = cir.const #cir.int<2> : !s32i loc(#loc23)
        %18 = cir.binop(mul, %16, %17) nsw : !s32i loc(#loc24)
        %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc24)
        cir.store %19, %14 : !s8i, !cir.ptr<!s8i> loc(#loc95)
        %20 = cir.load %14 : !cir.ptr<!s8i>, !s8i loc(#loc25)
        cir.call @printHexCharLine(%20) : (!s8i) -> () loc(#loc26)
      } loc(#loc94)
    } loc(#loc92)
    cir.return loc(#loc9)
  } loc(#loc89)
  cir.func no_proto  @CWE190_Integer_Overflow__char_fscanf_multiply_01_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc97)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc98)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc96)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc100)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc37)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc37)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc101)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc39)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc39)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc102)
    cir.scope {
      %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc43)
      %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc43)
      %7 = cir.const #cir.int<0> : !s32i loc(#loc44)
      %8 = cir.cmp(gt, %6, %7) : !s32i, !s32i loc(#loc104)
      %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc45)
      cir.if %9 {
        %10 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc106)
        %11 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc49)
        %12 = cir.cast(integral, %11 : !s8i), !s32i loc(#loc49)
        %13 = cir.const #cir.int<2> : !s32i loc(#loc48)
        %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc49)
        %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc49)
        cir.store %15, %10 : !s8i, !cir.ptr<!s8i> loc(#loc106)
        %16 = cir.load %10 : !cir.ptr<!s8i>, !s8i loc(#loc50)
        cir.call @printHexCharLine(%16) : (!s8i) -> () loc(#loc51)
      } loc(#loc105)
    } loc(#loc103)
    cir.return loc(#loc34)
  } loc(#loc99)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc107)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc54)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc109)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc59)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc59)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc110)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc61)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc87)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc62)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc63)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc63)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc61)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc66)
      %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc66)
      %11 = cir.const #cir.int<0> : !s32i loc(#loc67)
      %12 = cir.cmp(gt, %10, %11) : !s32i, !s32i loc(#loc112)
      %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc68)
      cir.if %13 {
        cir.scope {
          %14 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc72)
          %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc72)
          %16 = cir.const #cir.int<127> : !s32i loc(#loc73)
          %17 = cir.const #cir.int<2> : !s32i loc(#loc74)
          %18 = cir.binop(div, %16, %17) : !s32i loc(#loc115)
          %19 = cir.cmp(lt, %15, %18) : !s32i, !s32i loc(#loc116)
          %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc76)
          cir.if %20 {
            %21 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc118)
            %22 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc82)
            %23 = cir.cast(integral, %22 : !s8i), !s32i loc(#loc82)
            %24 = cir.const #cir.int<2> : !s32i loc(#loc81)
            %25 = cir.binop(mul, %23, %24) nsw : !s32i loc(#loc82)
            %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc82)
            cir.store %26, %21 : !s8i, !cir.ptr<!s8i> loc(#loc118)
            %27 = cir.load %21 : !cir.ptr<!s8i>, !s8i loc(#loc83)
            cir.call @printHexCharLine(%27) : (!s8i) -> () loc(#loc84)
          } else {
            %21 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc54)
            %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc54)
            cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc85)
          } loc(#loc117)
        } loc(#loc114)
      } loc(#loc113)
    } loc(#loc111)
    cir.return loc(#loc56)
  } loc(#loc108)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_multiply_01.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":27:20)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc8 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":22:1)
#loc9 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":34:1)
#loc10 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":24:5)
#loc11 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":24:10)
#loc12 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":25:12)
#loc13 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":25:5)
#loc14 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":27:5)
#loc15 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":27:13)
#loc16 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":28:5)
#loc17 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":33:5)
#loc18 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":28:8)
#loc19 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":28:15)
#loc20 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":28:13)
#loc21 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":29:5)
#loc22 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":31:9)
#loc23 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":31:30)
#loc24 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":31:23)
#loc25 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":32:26)
#loc26 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":32:9)
#loc27 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":77:1)
#loc28 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":81:1)
#loc29 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":79:5)
#loc30 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":79:13)
#loc31 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":80:5)
#loc32 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":80:13)
#loc33 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":41:1)
#loc34 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":53:1)
#loc35 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":43:5)
#loc36 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":43:10)
#loc37 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":44:12)
#loc38 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":44:5)
#loc39 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":46:12)
#loc40 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":46:5)
#loc41 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":47:5)
#loc42 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":52:5)
#loc43 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":47:8)
#loc44 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":47:15)
#loc45 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":47:13)
#loc46 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":48:5)
#loc47 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":50:9)
#loc48 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":50:30)
#loc49 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":50:23)
#loc50 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":51:26)
#loc51 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":51:9)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc54 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":72:23)
#loc55 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":56:1)
#loc56 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":75:1)
#loc57 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":58:5)
#loc58 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":58:10)
#loc59 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":59:12)
#loc60 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":59:5)
#loc61 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":61:5)
#loc62 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":61:13)
#loc63 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":61:20)
#loc64 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":62:5)
#loc65 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":74:5)
#loc66 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":62:8)
#loc67 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":62:15)
#loc68 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":62:13)
#loc69 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":63:5)
#loc70 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":65:9)
#loc71 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":73:9)
#loc72 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":65:13)
#loc73 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":65:21)
#loc74 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":65:30)
#loc75 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":65:31)
#loc76 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":65:18)
#loc77 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":66:9)
#loc78 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":69:9)
#loc79 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":71:9)
#loc80 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":67:13)
#loc81 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":67:34)
#loc82 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":67:27)
#loc83 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":68:30)
#loc84 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":68:13)
#loc85 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_01.c":72:13)
#loc86 = loc(fused[#loc1, #loc2])
#loc87 = loc(fused[#loc3, #loc4])
#loc88 = loc(fused[#loc6, #loc7])
#loc89 = loc(fused[#loc8, #loc9])
#loc90 = loc(fused[#loc10, #loc11])
#loc91 = loc(fused[#loc13, #loc12])
#loc92 = loc(fused[#loc16, #loc17])
#loc93 = loc(fused[#loc18, #loc19])
#loc94 = loc(fused[#loc21, #loc17])
#loc95 = loc(fused[#loc22, #loc23])
#loc96 = loc(fused[#loc27, #loc28])
#loc97 = loc(fused[#loc29, #loc30])
#loc98 = loc(fused[#loc31, #loc32])
#loc99 = loc(fused[#loc33, #loc34])
#loc100 = loc(fused[#loc35, #loc36])
#loc101 = loc(fused[#loc38, #loc37])
#loc102 = loc(fused[#loc40, #loc39])
#loc103 = loc(fused[#loc41, #loc42])
#loc104 = loc(fused[#loc43, #loc44])
#loc105 = loc(fused[#loc46, #loc42])
#loc106 = loc(fused[#loc47, #loc48])
#loc107 = loc(fused[#loc52, #loc53])
#loc108 = loc(fused[#loc55, #loc56])
#loc109 = loc(fused[#loc57, #loc58])
#loc110 = loc(fused[#loc60, #loc59])
#loc111 = loc(fused[#loc64, #loc65])
#loc112 = loc(fused[#loc66, #loc67])
#loc113 = loc(fused[#loc69, #loc65])
#loc114 = loc(fused[#loc70, #loc71])
#loc115 = loc(fused[#loc73, #loc74])
#loc116 = loc(fused[#loc72, #loc75])
#loc117 = loc(fused[#loc77, #loc78, #loc79, #loc71])
#loc118 = loc(fused[#loc80, #loc81])
