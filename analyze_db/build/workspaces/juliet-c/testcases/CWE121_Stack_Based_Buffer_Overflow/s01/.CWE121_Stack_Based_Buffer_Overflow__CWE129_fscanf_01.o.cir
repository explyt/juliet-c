!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc141)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc142)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc143)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc144)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc10)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc146)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc16)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc18)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc142)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc19)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc18)
    cir.scope {
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc149)
      %10 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc150)
      %11 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc150)
      cir.store %11, %10 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc150)
      cir.scope {
        %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc29)
        %14 = cir.cmp(ge, %12, %13) : !s32i, !cir.bool loc(#loc152)
        cir.if %14 {
          %15 = cir.const #cir.int<1> : !s32i loc(#loc33)
          %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc34)
          %17 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc35)
          %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc35)
          cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc154)
          cir.scope {
            %19 = cir.const #cir.int<0> : !s32i loc(#loc38)
            cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc156)
            cir.for : cond {
              %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc40)
              %21 = cir.const #cir.int<10> : !s32i loc(#loc41)
              %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc157)
              cir.condition(%22) loc(#loc42)
            } body {
              cir.scope {
                %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc44)
                %21 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc45)
                %22 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc45)
                %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc45)
                cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc46)
              } loc(#loc158)
              cir.yield loc(#loc37)
            } step {
              %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc47)
              %21 = cir.unary(inc, %20) nsw : !s32i, !s32i loc(#loc48)
              cir.store %21, %9 : !s32i, !cir.ptr<!s32i> loc(#loc159)
              cir.yield loc(#loc155)
            } loc(#loc155)
          } loc(#loc155)
        } else {
          %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc10)
          %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc10)
          cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc49)
        } loc(#loc153)
      } loc(#loc151)
    } loc(#loc148)
    cir.return loc(#loc12)
  } loc(#loc145)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc161)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc52)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc162)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc54)
    cir.return loc(#loc51)
  } loc(#loc160)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc164)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc61)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc63)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc168)
      %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc169)
      %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc169)
      cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc169)
      cir.scope {
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc74)
        %9 = cir.cmp(ge, %7, %8) : !s32i, !cir.bool loc(#loc171)
        cir.if %9 {
          %10 = cir.const #cir.int<1> : !s32i loc(#loc78)
          %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
          %12 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc80)
          %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc80)
          cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc173)
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc83)
            cir.store %14, %4 : !s32i, !cir.ptr<!s32i> loc(#loc175)
            cir.for : cond {
              %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc85)
              %16 = cir.const #cir.int<10> : !s32i loc(#loc86)
              %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc176)
              cir.condition(%17) loc(#loc87)
            } body {
              cir.scope {
                %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc89)
                %16 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc90)
                %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc90)
                %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc90)
                cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc91)
              } loc(#loc177)
              cir.yield loc(#loc82)
            } step {
              %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc92)
              %16 = cir.unary(inc, %15) nsw : !s32i, !s32i loc(#loc93)
              cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc178)
              cir.yield loc(#loc174)
            } loc(#loc174)
          } loc(#loc174)
        } else {
          %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc94)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc94)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc95)
        } loc(#loc172)
      } loc(#loc170)
    } loc(#loc167)
    cir.return loc(#loc57)
  } loc(#loc163)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc96)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc180)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc101)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc102)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc104)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc142)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc105)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc106)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc106)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc104)
    cir.scope {
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc183)
      %10 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc184)
      %11 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc184)
      cir.store %11, %10 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc184)
      cir.scope {
        %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc115)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc116)
        %14 = cir.cmp(ge, %12, %13) : !s32i, !cir.bool loc(#loc186)
        %15 = cir.ternary(%14, true {
          %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc118)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc119)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc187)
          %19 = cir.ternary(%18, true {
            %20 = cir.const #true loc(#loc117)
            cir.yield %20 : !cir.bool loc(#loc117)
          }, false {
            %20 = cir.const #false loc(#loc117)
            cir.yield %20 : !cir.bool loc(#loc117)
          }) : (!cir.bool) -> !cir.bool loc(#loc117)
          cir.yield %19 : !cir.bool loc(#loc117)
        }, false {
          %16 = cir.const #false loc(#loc117)
          cir.yield %16 : !cir.bool loc(#loc117)
        }) : (!cir.bool) -> !cir.bool loc(#loc117)
        cir.if %15 {
          %16 = cir.const #cir.int<1> : !s32i loc(#loc124)
          %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc125)
          %18 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc126)
          %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc126)
          cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc189)
          cir.scope {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc129)
            cir.store %20, %9 : !s32i, !cir.ptr<!s32i> loc(#loc191)
            cir.for : cond {
              %21 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc131)
              %22 = cir.const #cir.int<10> : !s32i loc(#loc132)
              %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc192)
              cir.condition(%23) loc(#loc133)
            } body {
              cir.scope {
                %21 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc135)
                %22 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc136)
                %23 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc136)
                %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc136)
                cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc137)
              } loc(#loc193)
              cir.yield loc(#loc128)
            } step {
              %21 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc138)
              %22 = cir.unary(inc, %21) nsw : !s32i, !s32i loc(#loc139)
              cir.store %22, %9 : !s32i, !cir.ptr<!s32i> loc(#loc194)
              cir.yield loc(#loc190)
            } loc(#loc190)
          } loc(#loc190)
        } else {
          %16 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc96)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc96)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc140)
        } loc(#loc188)
      } loc(#loc185)
    } loc(#loc182)
    cir.return loc(#loc98)
  } loc(#loc179)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":28:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":45:23)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":22:1)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":48:1)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":24:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":24:9)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":26:13)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":26:12)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":26:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":28:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":28:12)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":29:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":47:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":30:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":30:13)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":31:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":31:30)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":34:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":46:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":34:13)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":34:21)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":35:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":42:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":44:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":36:28)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":36:20)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":36:13)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":38:13)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":41:13)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":38:21)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":38:17)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":38:24)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":38:28)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":38:26)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":39:13)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":40:37)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":40:30)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":40:17)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":38:33)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":38:32)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":45:13)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":112:1)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":116:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":114:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":114:13)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":115:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":115:13)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":55:1)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":82:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":57:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":57:9)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":59:13)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":59:12)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":59:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":62:12)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":62:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":63:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":81:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":64:9)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":64:13)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":65:9)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":65:30)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":68:9)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":80:9)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":68:13)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":68:21)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":69:9)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":76:9)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":78:9)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":70:28)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":70:20)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":70:13)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":72:13)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":75:13)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":72:21)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":72:17)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":72:24)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":72:28)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":72:26)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":73:13)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":74:37)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":74:30)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":74:17)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":72:33)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":72:32)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":79:23)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":79:13)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":107:23)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":85:1)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":110:1)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":87:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":87:9)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":89:13)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":89:12)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":89:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":91:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":91:12)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":91:19)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":92:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":109:5)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":93:9)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":93:13)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":94:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":94:30)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":96:9)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":108:9)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":96:13)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":96:21)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":96:23)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":96:26)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":96:34)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":96:36)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":97:9)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":104:9)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":106:9)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":98:28)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":98:20)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":98:13)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":100:13)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":103:13)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":100:21)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":100:17)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":100:24)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":100:28)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":100:26)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":101:13)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":102:37)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":102:30)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":102:17)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":100:33)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":100:32)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c":107:13)
#loc141 = loc(fused[#loc1, #loc2])
#loc142 = loc(fused[#loc3, #loc4])
#loc143 = loc(fused[#loc6, #loc7])
#loc144 = loc(fused[#loc8, #loc9])
#loc145 = loc(fused[#loc11, #loc12])
#loc146 = loc(fused[#loc13, #loc14])
#loc147 = loc(fused[#loc17, #loc15])
#loc148 = loc(fused[#loc20, #loc21])
#loc149 = loc(fused[#loc22, #loc23])
#loc150 = loc(fused[#loc24, #loc25])
#loc151 = loc(fused[#loc26, #loc27])
#loc152 = loc(fused[#loc28, #loc29])
#loc153 = loc(fused[#loc30, #loc31, #loc32, #loc27])
#loc154 = loc(fused[#loc35, #loc33])
#loc155 = loc(fused[#loc36, #loc37])
#loc156 = loc(fused[#loc39, #loc38])
#loc157 = loc(fused[#loc40, #loc41])
#loc158 = loc(fused[#loc43, #loc37])
#loc159 = loc(fused[#loc48, #loc47])
#loc160 = loc(fused[#loc50, #loc51])
#loc161 = loc(fused[#loc52, #loc53])
#loc162 = loc(fused[#loc54, #loc55])
#loc163 = loc(fused[#loc56, #loc57])
#loc164 = loc(fused[#loc58, #loc59])
#loc165 = loc(fused[#loc62, #loc60])
#loc166 = loc(fused[#loc64, #loc63])
#loc167 = loc(fused[#loc65, #loc66])
#loc168 = loc(fused[#loc67, #loc68])
#loc169 = loc(fused[#loc69, #loc70])
#loc170 = loc(fused[#loc71, #loc72])
#loc171 = loc(fused[#loc73, #loc74])
#loc172 = loc(fused[#loc75, #loc76, #loc77, #loc72])
#loc173 = loc(fused[#loc80, #loc78])
#loc174 = loc(fused[#loc81, #loc82])
#loc175 = loc(fused[#loc84, #loc83])
#loc176 = loc(fused[#loc85, #loc86])
#loc177 = loc(fused[#loc88, #loc82])
#loc178 = loc(fused[#loc93, #loc92])
#loc179 = loc(fused[#loc97, #loc98])
#loc180 = loc(fused[#loc99, #loc100])
#loc181 = loc(fused[#loc103, #loc101])
#loc182 = loc(fused[#loc107, #loc108])
#loc183 = loc(fused[#loc109, #loc110])
#loc184 = loc(fused[#loc111, #loc112])
#loc185 = loc(fused[#loc113, #loc114])
#loc186 = loc(fused[#loc115, #loc116])
#loc187 = loc(fused[#loc118, #loc120])
#loc188 = loc(fused[#loc121, #loc122, #loc123, #loc114])
#loc189 = loc(fused[#loc126, #loc124])
#loc190 = loc(fused[#loc127, #loc128])
#loc191 = loc(fused[#loc130, #loc129])
#loc192 = loc(fused[#loc131, #loc132])
#loc193 = loc(fused[#loc134, #loc128])
#loc194 = loc(fused[#loc139, #loc138])
