!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s01/CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc80)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc81)
  cir.func private @printHexCharLine(!s8i) loc(#loc82)
  cir.func no_proto @CWE197_Numeric_Truncation_Error__int_rand_to_char_05_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc84)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc12)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc80)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc16)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc16)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc18)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc18)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc18)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc18)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc18)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc18)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc18)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc18)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc18)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc18)
          cir.yield %23 : !u32i loc(#loc18)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc18)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc18)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc18)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc18)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc18)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc18)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc18)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc18)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc18)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc18)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc18)
          cir.yield %27 : !u32i loc(#loc18)
        }) : (!cir.bool) -> !u32i loc(#loc18)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc18)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc88)
      } loc(#loc87)
    } loc(#loc86)
    cir.scope {
      %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc90)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
      %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc23)
      cir.store %5, %3 : !s8i, !cir.ptr<!s8i> loc(#loc90)
      %6 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc24)
      cir.call @printHexCharLine(%6) : (!s8i) -> () loc(#loc25)
    } loc(#loc89)
    cir.return loc(#loc8)
  } loc(#loc83)
  cir.func no_proto @CWE197_Numeric_Truncation_Error__int_rand_to_char_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc92)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc93)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc91)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc94)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc95)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc36)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc97)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc42)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc94)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc46)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc46)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc36)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc36)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc50)
      } else {
        %6 = cir.const #cir.int<127> : !s32i loc(#loc51)
        %7 = cir.const #cir.int<5> : !s32i loc(#loc52)
        %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc51)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc101)
      } loc(#loc100)
    } loc(#loc99)
    cir.scope {
      %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc103)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc57)
      %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc57)
      cir.store %5, %3 : !s8i, !cir.ptr<!s8i> loc(#loc103)
      %6 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc58)
      cir.call @printHexCharLine(%6) : (!s8i) -> () loc(#loc59)
    } loc(#loc102)
    cir.return loc(#loc38)
  } loc(#loc96)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc105)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc65)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc80)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc69)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc69)
      cir.if %5 {
        %6 = cir.const #cir.int<127> : !s32i loc(#loc71)
        %7 = cir.const #cir.int<5> : !s32i loc(#loc72)
        %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc71)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc109)
      } loc(#loc108)
    } loc(#loc107)
    cir.scope {
      %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc111)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc77)
      %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc77)
      cir.store %5, %3 : !s8i, !cir.ptr<!s8i> loc(#loc111)
      %6 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc78)
      cir.call @printHexCharLine(%6) : (!s8i) -> () loc(#loc79)
    } loc(#loc110)
    cir.return loc(#loc61)
  } loc(#loc104)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s01/CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":0:0)
#loc1 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":23:1)
#loc2 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":23:25)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc7 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":28:1)
#loc8 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":43:1)
#loc9 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":30:5)
#loc10 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":30:9)
#loc11 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":32:13)
#loc12 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":32:12)
#loc13 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":32:5)
#loc14 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":33:5)
#loc15 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":37:5)
#loc16 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":33:8)
#loc17 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":34:5)
#loc18 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":36:16)
#loc19 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":36:9)
#loc20 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":38:5)
#loc21 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":42:5)
#loc22 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":40:9)
#loc23 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":40:31)
#loc24 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":41:26)
#loc25 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":41:9)
#loc26 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":90:1)
#loc27 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":94:1)
#loc28 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":92:5)
#loc29 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":92:14)
#loc30 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":93:5)
#loc31 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":93:14)
#loc32 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":24:1)
#loc33 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":24:26)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc36 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":58:19)
#loc37 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":50:1)
#loc38 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":70:1)
#loc39 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":52:5)
#loc40 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":52:9)
#loc41 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":54:13)
#loc42 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":54:12)
#loc43 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":54:5)
#loc44 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":55:5)
#loc45 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":64:5)
#loc46 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":55:8)
#loc47 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":56:5)
#loc48 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":59:5)
#loc49 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":61:5)
#loc50 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":58:9)
#loc51 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":63:16)
#loc52 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":63:25)
#loc53 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":63:9)
#loc54 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":65:5)
#loc55 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":69:5)
#loc56 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":67:9)
#loc57 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":67:31)
#loc58 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":68:26)
#loc59 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":68:9)
#loc60 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":73:1)
#loc61 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":88:1)
#loc62 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":75:5)
#loc63 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":75:9)
#loc64 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":77:13)
#loc65 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":77:12)
#loc66 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":77:5)
#loc67 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":78:5)
#loc68 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":82:5)
#loc69 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":78:8)
#loc70 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":79:5)
#loc71 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":81:16)
#loc72 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":81:25)
#loc73 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":81:9)
#loc74 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":83:5)
#loc75 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":87:5)
#loc76 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":85:9)
#loc77 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":85:31)
#loc78 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":86:26)
#loc79 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_05.c":86:9)
#loc80 = loc(fused[#loc1, #loc2])
#loc81 = loc(fused[#loc3, #loc4])
#loc82 = loc(fused[#loc5, #loc6])
#loc83 = loc(fused[#loc7, #loc8])
#loc84 = loc(fused[#loc9, #loc10])
#loc85 = loc(fused[#loc13, #loc11])
#loc86 = loc(fused[#loc14, #loc15])
#loc87 = loc(fused[#loc17, #loc15])
#loc88 = loc(fused[#loc19, #loc18])
#loc89 = loc(fused[#loc20, #loc21])
#loc90 = loc(fused[#loc22, #loc23])
#loc91 = loc(fused[#loc26, #loc27])
#loc92 = loc(fused[#loc28, #loc29])
#loc93 = loc(fused[#loc30, #loc31])
#loc94 = loc(fused[#loc32, #loc33])
#loc95 = loc(fused[#loc34, #loc35])
#loc96 = loc(fused[#loc37, #loc38])
#loc97 = loc(fused[#loc39, #loc40])
#loc98 = loc(fused[#loc43, #loc41])
#loc99 = loc(fused[#loc44, #loc45])
#loc100 = loc(fused[#loc47, #loc48, #loc49, #loc45])
#loc101 = loc(fused[#loc53, #loc52])
#loc102 = loc(fused[#loc54, #loc55])
#loc103 = loc(fused[#loc56, #loc57])
#loc104 = loc(fused[#loc60, #loc61])
#loc105 = loc(fused[#loc62, #loc63])
#loc106 = loc(fused[#loc66, #loc64])
#loc107 = loc(fused[#loc67, #loc68])
#loc108 = loc(fused[#loc70, #loc68])
#loc109 = loc(fused[#loc73, #loc72])
#loc110 = loc(fused[#loc74, #loc75])
#loc111 = loc(fused[#loc76, #loc77])
