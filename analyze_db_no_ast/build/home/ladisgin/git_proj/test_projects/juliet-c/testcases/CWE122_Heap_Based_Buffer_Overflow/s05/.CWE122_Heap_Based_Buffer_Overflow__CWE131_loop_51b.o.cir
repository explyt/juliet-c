!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":23:65)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":23:71)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":43:69)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":43:75)
#loc74 = loc(fused[#loc7, #loc8])
#loc85 = loc(fused[#loc40, #loc41])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc71)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc72)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b_badSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc74)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc9)
    cir.scope {
      %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc76)
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc77)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc76)
      cir.store %3, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc76)
      cir.scope {
        %11 = cir.const #cir.int<0> : !s32i loc(#loc18)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc18)
        cir.store %12, %2 : !u64i, !cir.ptr<!u64i> loc(#loc79)
        cir.for : cond {
          %13 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc20)
          %14 = cir.const #cir.int<10> : !s32i loc(#loc21)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc21)
          %16 = cir.cmp(lt, %13, %15) : !u64i, !s32i loc(#loc80)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc22)
          cir.condition(%17) loc(#loc22)
        } body {
          cir.scope {
            %13 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc24)
            %14 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc25)
            %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !u64i), !cir.ptr<!s32i> loc(#loc25)
            %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc25)
            %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
            %18 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc27)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !u64i), !cir.ptr<!s32i> loc(#loc28)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc82)
          } loc(#loc81)
          cir.yield loc(#loc17)
        } step {
          %13 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc30)
          %14 = cir.unary(inc, %13) : !u64i, !u64i loc(#loc31)
          cir.store %14, %2 : !u64i, !cir.ptr<!u64i> loc(#loc83)
          cir.yield loc(#loc78)
        } loc(#loc78)
      } loc(#loc78)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc33)
      %6 = cir.ptr_stride(%4 : !cir.ptr<!s32i>, %5 : !s32i), !cir.ptr<!s32i> loc(#loc34)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc32)
      cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc35)
      %8 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc36)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc37)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc37)
      cir.call @free(%10) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc36)
    } loc(#loc75)
    cir.return loc(#loc6)
  } loc(#loc73)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b_goodG2BSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc40, #loc41])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc85)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc42)
    cir.scope {
      %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc87)
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc88)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc87)
      cir.store %3, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc87)
      cir.scope {
        %11 = cir.const #cir.int<0> : !s32i loc(#loc51)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc51)
        cir.store %12, %2 : !u64i, !cir.ptr<!u64i> loc(#loc90)
        cir.for : cond {
          %13 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc53)
          %14 = cir.const #cir.int<10> : !s32i loc(#loc54)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc54)
          %16 = cir.cmp(lt, %13, %15) : !u64i, !s32i loc(#loc91)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc55)
          cir.condition(%17) loc(#loc55)
        } body {
          cir.scope {
            %13 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc57)
            %14 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc58)
            %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !u64i), !cir.ptr<!s32i> loc(#loc58)
            %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc58)
            %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc59)
            %18 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc60)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !u64i), !cir.ptr<!s32i> loc(#loc61)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc93)
          } loc(#loc92)
          cir.yield loc(#loc50)
        } step {
          %13 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc63)
          %14 = cir.unary(inc, %13) : !u64i, !u64i loc(#loc64)
          cir.store %14, %2 : !u64i, !cir.ptr<!u64i> loc(#loc94)
          cir.yield loc(#loc89)
        } loc(#loc89)
      } loc(#loc89)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc65)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc66)
      %6 = cir.ptr_stride(%4 : !cir.ptr<!s32i>, %5 : !s32i), !cir.ptr<!s32i> loc(#loc67)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc65)
      cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc68)
      %8 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc69)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc70)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc70)
      cir.call @free(%10) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc69)
    } loc(#loc86)
    cir.return loc(#loc39)
  } loc(#loc84)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":23:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":36:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":24:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":25:5)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":35:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":26:9)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":26:28)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":27:9)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":27:16)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":29:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":32:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":29:18)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":29:14)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":29:21)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":29:25)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":29:23)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":30:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":31:30)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":31:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":31:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":31:18)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":31:19)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":31:31)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":29:30)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":29:29)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":33:22)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":33:27)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":33:28)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":33:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":34:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":34:14)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":43:1)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":56:1)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":44:1)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":45:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":55:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":46:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":46:28)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":47:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":47:16)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":49:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":52:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":49:18)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":49:14)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":49:21)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":49:25)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":49:23)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":50:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":51:30)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":51:23)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":51:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":51:18)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":51:19)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":51:31)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":49:30)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":49:29)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":53:22)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":53:27)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":53:28)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":53:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":54:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c":54:14)
#loc71 = loc(fused[#loc1, #loc2])
#loc72 = loc(fused[#loc3, #loc4])
#loc73 = loc(fused[#loc5, #loc6])
#loc75 = loc(fused[#loc10, #loc11])
#loc76 = loc(fused[#loc12, #loc13])
#loc77 = loc(fused[#loc14, #loc15])
#loc78 = loc(fused[#loc16, #loc17])
#loc79 = loc(fused[#loc19, #loc18])
#loc80 = loc(fused[#loc20, #loc21])
#loc81 = loc(fused[#loc23, #loc17])
#loc82 = loc(fused[#loc26, #loc29])
#loc83 = loc(fused[#loc31, #loc30])
#loc84 = loc(fused[#loc38, #loc39])
#loc86 = loc(fused[#loc43, #loc44])
#loc87 = loc(fused[#loc45, #loc46])
#loc88 = loc(fused[#loc47, #loc48])
#loc89 = loc(fused[#loc49, #loc50])
#loc90 = loc(fused[#loc52, #loc51])
#loc91 = loc(fused[#loc53, #loc54])
#loc92 = loc(fused[#loc56, #loc50])
#loc93 = loc(fused[#loc59, #loc62])
#loc94 = loc(fused[#loc64, #loc63])
