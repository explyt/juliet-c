!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc51 = loc("CWE511_Logic_Time_Bomb__counter_17.c":90:10)
#loc52 = loc("CWE511_Logic_Time_Bomb__counter_17.c":90:14)
#loc53 = loc("CWE511_Logic_Time_Bomb__counter_17.c":90:20)
#loc54 = loc("CWE511_Logic_Time_Bomb__counter_17.c":90:32)
#loc123 = loc(fused[#loc51, #loc52])
#loc124 = loc(fused[#loc53, #loc54])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc101)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc103)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc10)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc105)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc12)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc106)
        cir.condition(%4) loc(#loc14)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc109)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc19)
            cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc109)
            cir.scope {
              cir.do {
                cir.scope {
                  %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc24)
                  %7 = cir.const #cir.int<20000> : !s32i loc(#loc25)
                  %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc112)
                  cir.if %8 {
                    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc3)
                    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc3)
                    %11 = cir.call @unlink(%10) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc27)
                  } loc(#loc113)
                } loc(#loc111)
                %4 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc28)
                %5 = cir.unary(inc, %4) : !s32i, !s32i loc(#loc29)
                cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc114)
                cir.yield loc(#loc21)
              } while {
                %4 = cir.const #cir.int<1> : !s32i loc(#loc30)
                %5 = cir.const #cir.int<1> : !s32i loc(#loc31)
                %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc115)
                cir.condition(%6) loc(#loc32)
              } loc(#loc110)
            } loc(#loc110)
          } loc(#loc108)
        } loc(#loc107)
        cir.yield loc(#loc9)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
        %3 = cir.unary(inc, %2) : !s32i, !s32i loc(#loc34)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc116)
        cir.yield loc(#loc104)
      } loc(#loc104)
    } loc(#loc104)
    cir.return loc(#loc5)
  } loc(#loc102)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc118)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    cir.return loc(#loc36)
  } loc(#loc117)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc119)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc120)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc121)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc48)
  cir.func @main(%arg0: !s32i loc(fused[#loc51, #loc52]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc53, #loc54])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc123)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc124)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc50)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc55)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc55)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc56)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc57)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc57)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc58)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc45)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %8 = cir.get_global @CWE511_Logic_Time_Bomb__counter_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc125)
    cir.call @CWE511_Logic_Time_Bomb__counter_17_good() : () -> () loc(#loc60)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc46)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc47)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %13 = cir.get_global @CWE511_Logic_Time_Bomb__counter_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc126)
    cir.call @CWE511_Logic_Time_Bomb__counter_17_bad() : () -> () loc(#loc64)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc48)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc67)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc127)
    cir.return %17 : !s32i loc(#loc127)
  } loc(#loc122)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc69)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc129)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc76)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc131)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc79)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc132)
        cir.condition(%4) loc(#loc80)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc135)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc85)
            cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc135)
            cir.scope {
              cir.do {
                cir.scope {
                  %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc90)
                  %7 = cir.const #cir.int<20000> : !s32i loc(#loc91)
                  %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc138)
                  cir.if %8 {
                    %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc69)
                    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc69)
                    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc93)
                  } loc(#loc139)
                } loc(#loc137)
                %4 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc94)
                %5 = cir.unary(inc, %4) : !s32i, !s32i loc(#loc95)
                cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc140)
                cir.yield loc(#loc87)
              } while {
                %4 = cir.const #cir.int<1> : !s32i loc(#loc96)
                %5 = cir.const #cir.int<1> : !s32i loc(#loc97)
                %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc141)
                cir.condition(%6) loc(#loc98)
              } loc(#loc136)
            } loc(#loc136)
          } loc(#loc134)
        } loc(#loc133)
        cir.yield loc(#loc75)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc99)
        %3 = cir.unary(inc, %2) : !s32i, !s32i loc(#loc100)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc142)
        cir.yield loc(#loc130)
      } loc(#loc130)
    } loc(#loc130)
    cir.return loc(#loc71)
  } loc(#loc128)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_17.c":0:0)
#loc1 = loc("/usr/include/unistd.h":858:1)
#loc2 = loc("/usr/include/unistd.h":858:48)
#loc3 = loc("CWE511_Logic_Time_Bomb__counter_17.c":41:28)
#loc4 = loc("CWE511_Logic_Time_Bomb__counter_17.c":29:1)
#loc5 = loc("CWE511_Logic_Time_Bomb__counter_17.c":48:1)
#loc6 = loc("CWE511_Logic_Time_Bomb__counter_17.c":31:5)
#loc7 = loc("CWE511_Logic_Time_Bomb__counter_17.c":31:9)
#loc8 = loc("CWE511_Logic_Time_Bomb__counter_17.c":32:5)
#loc9 = loc("CWE511_Logic_Time_Bomb__counter_17.c":47:5)
#loc10 = loc("CWE511_Logic_Time_Bomb__counter_17.c":32:13)
#loc11 = loc("CWE511_Logic_Time_Bomb__counter_17.c":32:9)
#loc12 = loc("CWE511_Logic_Time_Bomb__counter_17.c":32:16)
#loc13 = loc("CWE511_Logic_Time_Bomb__counter_17.c":32:20)
#loc14 = loc("CWE511_Logic_Time_Bomb__counter_17.c":32:18)
#loc15 = loc("CWE511_Logic_Time_Bomb__counter_17.c":33:5)
#loc16 = loc("CWE511_Logic_Time_Bomb__counter_17.c":34:9)
#loc17 = loc("CWE511_Logic_Time_Bomb__counter_17.c":46:9)
#loc18 = loc("CWE511_Logic_Time_Bomb__counter_17.c":35:13)
#loc19 = loc("CWE511_Logic_Time_Bomb__counter_17.c":35:25)
#loc20 = loc("CWE511_Logic_Time_Bomb__counter_17.c":36:13)
#loc21 = loc("CWE511_Logic_Time_Bomb__counter_17.c":45:25)
#loc22 = loc("CWE511_Logic_Time_Bomb__counter_17.c":39:17)
#loc23 = loc("CWE511_Logic_Time_Bomb__counter_17.c":42:17)
#loc24 = loc("CWE511_Logic_Time_Bomb__counter_17.c":39:21)
#loc25 = loc("CWE511_Logic_Time_Bomb__counter_17.c":39:30)
#loc26 = loc("CWE511_Logic_Time_Bomb__counter_17.c":40:17)
#loc27 = loc("CWE511_Logic_Time_Bomb__counter_17.c":41:21)
#loc28 = loc("CWE511_Logic_Time_Bomb__counter_17.c":43:22)
#loc29 = loc("CWE511_Logic_Time_Bomb__counter_17.c":43:17)
#loc30 = loc("CWE511_Logic_Time_Bomb__counter_17.c":45:19)
#loc31 = loc("CWE511_Logic_Time_Bomb__counter_17.c":45:24)
#loc32 = loc("CWE511_Logic_Time_Bomb__counter_17.c":45:21)
#loc33 = loc("CWE511_Logic_Time_Bomb__counter_17.c":32:24)
#loc34 = loc("CWE511_Logic_Time_Bomb__counter_17.c":32:23)
#loc35 = loc("CWE511_Logic_Time_Bomb__counter_17.c":76:1)
#loc36 = loc("CWE511_Logic_Time_Bomb__counter_17.c":79:1)
#loc37 = loc("CWE511_Logic_Time_Bomb__counter_17.c":78:5)
#loc38 = loc("CWE511_Logic_Time_Bomb__counter_17.c":78:11)
#loc39 = loc("/usr/include/stdlib.h":575:1)
#loc40 = loc("/usr/include/stdlib.h":575:41)
#loc41 = loc("/usr/include/time.h":76:1)
#loc42 = loc("/usr/include/time.h":76:38)
#loc43 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE511_Logic_Time_Bomb__counter_17.c":95:15)
#loc46 = loc("CWE511_Logic_Time_Bomb__counter_17.c":97:15)
#loc47 = loc("CWE511_Logic_Time_Bomb__counter_17.c":100:15)
#loc48 = loc("CWE511_Logic_Time_Bomb__counter_17.c":102:15)
#loc49 = loc("CWE511_Logic_Time_Bomb__counter_17.c":90:1)
#loc50 = loc("CWE511_Logic_Time_Bomb__counter_17.c":105:1)
#loc55 = loc("CWE511_Logic_Time_Bomb__counter_17.c":91:1)
#loc56 = loc("CWE511_Logic_Time_Bomb__counter_17.c":93:27)
#loc57 = loc("CWE511_Logic_Time_Bomb__counter_17.c":93:22)
#loc58 = loc("CWE511_Logic_Time_Bomb__counter_17.c":93:5)
#loc59 = loc("CWE511_Logic_Time_Bomb__counter_17.c":95:5)
#loc60 = loc("CWE511_Logic_Time_Bomb__counter_17.c":96:5)
#loc61 = loc("CWE511_Logic_Time_Bomb__counter_17.c":96:45)
#loc62 = loc("CWE511_Logic_Time_Bomb__counter_17.c":97:5)
#loc63 = loc("CWE511_Logic_Time_Bomb__counter_17.c":100:5)
#loc64 = loc("CWE511_Logic_Time_Bomb__counter_17.c":101:5)
#loc65 = loc("CWE511_Logic_Time_Bomb__counter_17.c":101:44)
#loc66 = loc("CWE511_Logic_Time_Bomb__counter_17.c":102:5)
#loc67 = loc("CWE511_Logic_Time_Bomb__counter_17.c":104:12)
#loc68 = loc("CWE511_Logic_Time_Bomb__counter_17.c":104:5)
#loc69 = loc("CWE511_Logic_Time_Bomb__counter_17.c":67:31)
#loc70 = loc("CWE511_Logic_Time_Bomb__counter_17.c":55:1)
#loc71 = loc("CWE511_Logic_Time_Bomb__counter_17.c":74:1)
#loc72 = loc("CWE511_Logic_Time_Bomb__counter_17.c":57:5)
#loc73 = loc("CWE511_Logic_Time_Bomb__counter_17.c":57:9)
#loc74 = loc("CWE511_Logic_Time_Bomb__counter_17.c":58:5)
#loc75 = loc("CWE511_Logic_Time_Bomb__counter_17.c":73:5)
#loc76 = loc("CWE511_Logic_Time_Bomb__counter_17.c":58:13)
#loc77 = loc("CWE511_Logic_Time_Bomb__counter_17.c":58:9)
#loc78 = loc("CWE511_Logic_Time_Bomb__counter_17.c":58:16)
#loc79 = loc("CWE511_Logic_Time_Bomb__counter_17.c":58:20)
#loc80 = loc("CWE511_Logic_Time_Bomb__counter_17.c":58:18)
#loc81 = loc("CWE511_Logic_Time_Bomb__counter_17.c":59:5)
#loc82 = loc("CWE511_Logic_Time_Bomb__counter_17.c":60:9)
#loc83 = loc("CWE511_Logic_Time_Bomb__counter_17.c":72:9)
#loc84 = loc("CWE511_Logic_Time_Bomb__counter_17.c":61:13)
#loc85 = loc("CWE511_Logic_Time_Bomb__counter_17.c":61:25)
#loc86 = loc("CWE511_Logic_Time_Bomb__counter_17.c":62:13)
#loc87 = loc("CWE511_Logic_Time_Bomb__counter_17.c":71:25)
#loc88 = loc("CWE511_Logic_Time_Bomb__counter_17.c":65:17)
#loc89 = loc("CWE511_Logic_Time_Bomb__counter_17.c":68:17)
#loc90 = loc("CWE511_Logic_Time_Bomb__counter_17.c":65:21)
#loc91 = loc("CWE511_Logic_Time_Bomb__counter_17.c":65:30)
#loc92 = loc("CWE511_Logic_Time_Bomb__counter_17.c":66:17)
#loc93 = loc("CWE511_Logic_Time_Bomb__counter_17.c":67:21)
#loc94 = loc("CWE511_Logic_Time_Bomb__counter_17.c":69:22)
#loc95 = loc("CWE511_Logic_Time_Bomb__counter_17.c":69:17)
#loc96 = loc("CWE511_Logic_Time_Bomb__counter_17.c":71:19)
#loc97 = loc("CWE511_Logic_Time_Bomb__counter_17.c":71:24)
#loc98 = loc("CWE511_Logic_Time_Bomb__counter_17.c":71:21)
#loc99 = loc("CWE511_Logic_Time_Bomb__counter_17.c":58:24)
#loc100 = loc("CWE511_Logic_Time_Bomb__counter_17.c":58:23)
#loc101 = loc(fused[#loc1, #loc2])
#loc102 = loc(fused[#loc4, #loc5])
#loc103 = loc(fused[#loc6, #loc7])
#loc104 = loc(fused[#loc8, #loc9])
#loc105 = loc(fused[#loc11, #loc10])
#loc106 = loc(fused[#loc12, #loc13])
#loc107 = loc(fused[#loc15, #loc9])
#loc108 = loc(fused[#loc16, #loc17])
#loc109 = loc(fused[#loc18, #loc19])
#loc110 = loc(fused[#loc20, #loc21])
#loc111 = loc(fused[#loc22, #loc23])
#loc112 = loc(fused[#loc24, #loc25])
#loc113 = loc(fused[#loc26, #loc23])
#loc114 = loc(fused[#loc29, #loc28])
#loc115 = loc(fused[#loc30, #loc31])
#loc116 = loc(fused[#loc34, #loc33])
#loc117 = loc(fused[#loc35, #loc36])
#loc118 = loc(fused[#loc37, #loc38])
#loc119 = loc(fused[#loc39, #loc40])
#loc120 = loc(fused[#loc41, #loc42])
#loc121 = loc(fused[#loc43, #loc44])
#loc122 = loc(fused[#loc49, #loc50])
#loc125 = loc(fused[#loc60, #loc61])
#loc126 = loc(fused[#loc64, #loc65])
#loc127 = loc(fused[#loc68, #loc67])
#loc128 = loc(fused[#loc70, #loc71])
#loc129 = loc(fused[#loc72, #loc73])
#loc130 = loc(fused[#loc74, #loc75])
#loc131 = loc(fused[#loc77, #loc76])
#loc132 = loc(fused[#loc78, #loc79])
#loc133 = loc(fused[#loc81, #loc75])
#loc134 = loc(fused[#loc82, #loc83])
#loc135 = loc(fused[#loc84, #loc85])
#loc136 = loc(fused[#loc86, #loc87])
#loc137 = loc(fused[#loc88, #loc89])
#loc138 = loc(fused[#loc90, #loc91])
#loc139 = loc(fused[#loc92, #loc89])
#loc140 = loc(fused[#loc95, #loc94])
#loc141 = loc(fused[#loc96, #loc97])
#loc142 = loc(fused[#loc100, #loc99])
