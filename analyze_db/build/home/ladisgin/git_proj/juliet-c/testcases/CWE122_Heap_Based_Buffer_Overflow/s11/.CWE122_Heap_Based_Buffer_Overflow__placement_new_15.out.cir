!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc8 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc79 = loc("../../../testcasesupport/std_testcase.h":68:7)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":264:10)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":264:14)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":264:20)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":264:32)
!ty_OneIntClass = !cir.struct<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
#loc486 = loc(fused[#loc353, #loc354])
#loc487 = loc(fused[#loc355, #loc356])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc369)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc370)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc371)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func linkonce_odr @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc8)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc8)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc8)
    cir.return loc(#loc8)
  } loc(#loc8)
  cir.func private @printIntLine(!s32i) loc(#loc372)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc373)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_153badEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc375)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc376)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc377)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc378)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc379)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc376)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc26)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc27)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc381)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc29)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc30)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc31)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc29)
      } loc(#loc382)
    } loc(#loc380)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc32)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc383)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc32)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc384)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc377)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc38)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc386)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc40)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc41)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc42)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc40)
      } loc(#loc387)
    } loc(#loc385)
    cir.scope {
      %11 = cir.const #cir.int<6> : !s32i loc(#loc45)
      cir.switch (%11 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
          cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc389)
          cir.break loc(#loc49)
        } loc(#loc46)
        cir.case(default, []) {
          %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc51)
          cir.break loc(#loc52)
        } loc(#loc50)
        cir.yield loc(#loc43)
      } loc(#loc43)
    } loc(#loc388)
    cir.scope {
      %11 = cir.const #cir.int<7> : !s32i loc(#loc55)
      cir.switch (%11 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %12 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc392)
            %13 = cir.const #cir.int<8> : !u64i loc(#loc393)
            %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
            %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc62)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc393)
            cir.call @_ZN12TwoIntsClassC2Ev(%16) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc60)
            cir.store %16, %12 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc392)
            %17 = cir.const #cir.int<5> : !s32i loc(#loc63)
            %18 = cir.load %12 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc64)
            %19 = cir.get_member %18[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc65)
            cir.store %17, %19 : !s32i, !cir.ptr<!s32i> loc(#loc394)
            %20 = cir.const #cir.int<10> : !s32i loc(#loc66)
            %21 = cir.load %12 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc67)
            %22 = cir.get_member %21[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc68)
            cir.store %20, %22 : !s32i, !cir.ptr<!s32i> loc(#loc395)
            %23 = cir.load %12 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc69)
            %24 = cir.get_member %23[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc65)
            %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc70)
            cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc71)
            %26 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc72)
            %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc73)
            %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc73)
            cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc72)
          } loc(#loc391)
          cir.break loc(#loc74)
        } loc(#loc56)
        cir.case(default, []) {
          %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc76)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc76)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc77)
          cir.break loc(#loc78)
        } loc(#loc75)
        cir.yield loc(#loc53)
      } loc(#loc53)
    } loc(#loc390)
    cir.return loc(#loc14)
  } loc(#loc374)
  cir.func linkonce_odr @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc79)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc79)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc79)
    cir.return loc(#loc79)
  } loc(#loc79)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_15L8goodB2G1Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc397)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc398)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc399)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc88)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc400)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc88)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc401)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc398)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc93)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc94)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc403)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc96)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc97)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc98)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc96)
      } loc(#loc404)
    } loc(#loc402)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc99)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc405)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc99)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc406)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc399)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc104)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc105)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc408)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc107)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc108)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc109)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc107)
      } loc(#loc409)
    } loc(#loc407)
    cir.scope {
      %11 = cir.const #cir.int<6> : !s32i loc(#loc112)
      cir.switch (%11 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc114)
          cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc411)
          cir.break loc(#loc116)
        } loc(#loc113)
        cir.case(default, []) {
          %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc118)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc118)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc119)
          cir.break loc(#loc120)
        } loc(#loc117)
        cir.yield loc(#loc110)
      } loc(#loc110)
    } loc(#loc410)
    cir.scope {
      %11 = cir.const #cir.int<8> : !s32i loc(#loc123)
      cir.switch (%11 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc125)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc125)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc126)
          cir.break loc(#loc127)
        } loc(#loc124)
        cir.case(default, []) {
          cir.scope {
            %12 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc414)
            %13 = cir.const #cir.int<4> : !u64i loc(#loc415)
            %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
            %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc134)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc415)
            cir.call @_ZN11OneIntClassC2Ev(%16) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc132)
            cir.store %16, %12 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc414)
            %17 = cir.const #cir.int<5> : !s32i loc(#loc135)
            %18 = cir.load %12 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc136)
            %19 = cir.get_member %18[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc137)
            cir.store %17, %19 : !s32i, !cir.ptr<!s32i> loc(#loc416)
            %20 = cir.load %12 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc138)
            %21 = cir.get_member %20[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc137)
            %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc139)
            cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc140)
            %23 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc141)
            %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
            %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc142)
            cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc141)
          } loc(#loc413)
          cir.break loc(#loc143)
        } loc(#loc128)
        cir.yield loc(#loc121)
      } loc(#loc121)
    } loc(#loc412)
    cir.return loc(#loc81)
  } loc(#loc396)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_15L8goodB2G2Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc418)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc419)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc420)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc152)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc421)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc152)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc422)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc419)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc157)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc158)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc424)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc160)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc161)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc162)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc160)
      } loc(#loc425)
    } loc(#loc423)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc163)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc426)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc163)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc427)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc420)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc168)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc169)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc429)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc171)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc172)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc173)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc171)
      } loc(#loc430)
    } loc(#loc428)
    cir.scope {
      %11 = cir.const #cir.int<6> : !s32i loc(#loc176)
      cir.switch (%11 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc178)
          cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc432)
          cir.break loc(#loc180)
        } loc(#loc177)
        cir.case(default, []) {
          %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc182)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc182)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc183)
          cir.break loc(#loc184)
        } loc(#loc181)
        cir.yield loc(#loc174)
      } loc(#loc174)
    } loc(#loc431)
    cir.scope {
      %11 = cir.const #cir.int<7> : !s32i loc(#loc187)
      cir.switch (%11 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %12 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc435)
            %13 = cir.const #cir.int<4> : !u64i loc(#loc436)
            %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc194)
            %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc194)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc436)
            cir.call @_ZN11OneIntClassC2Ev(%16) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc192)
            cir.store %16, %12 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc435)
            %17 = cir.const #cir.int<5> : !s32i loc(#loc195)
            %18 = cir.load %12 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc196)
            %19 = cir.get_member %18[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc137)
            cir.store %17, %19 : !s32i, !cir.ptr<!s32i> loc(#loc437)
            %20 = cir.load %12 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc197)
            %21 = cir.get_member %20[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc137)
            %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc198)
            cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc199)
            %23 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc200)
            %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc201)
            %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc201)
            cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc200)
          } loc(#loc434)
          cir.break loc(#loc202)
        } loc(#loc188)
        cir.case(default, []) {
          %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc204)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc204)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc205)
          cir.break loc(#loc206)
        } loc(#loc203)
        cir.yield loc(#loc185)
      } loc(#loc185)
    } loc(#loc433)
    cir.return loc(#loc145)
  } loc(#loc417)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_15L8goodG2B1Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc439)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc440)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc441)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc215)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc442)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc215)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc443)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc440)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc220)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc221)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc445)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc223)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc224)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc225)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc223)
      } loc(#loc446)
    } loc(#loc444)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc226)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc447)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc226)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc448)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc441)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc231)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc232)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc450)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc234)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc235)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc236)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc234)
      } loc(#loc451)
    } loc(#loc449)
    cir.scope {
      %11 = cir.const #cir.int<5> : !s32i loc(#loc239)
      cir.switch (%11 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc241)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc241)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc242)
          cir.break loc(#loc243)
        } loc(#loc240)
        cir.case(default, []) {
          %12 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc245)
          cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc453)
          cir.break loc(#loc247)
        } loc(#loc244)
        cir.yield loc(#loc237)
      } loc(#loc237)
    } loc(#loc452)
    cir.scope {
      %11 = cir.const #cir.int<7> : !s32i loc(#loc250)
      cir.switch (%11 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %12 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc456)
            %13 = cir.const #cir.int<8> : !u64i loc(#loc457)
            %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc257)
            %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc257)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc457)
            cir.call @_ZN12TwoIntsClassC2Ev(%16) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc255)
            cir.store %16, %12 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc456)
            %17 = cir.const #cir.int<5> : !s32i loc(#loc258)
            %18 = cir.load %12 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc259)
            %19 = cir.get_member %18[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc65)
            cir.store %17, %19 : !s32i, !cir.ptr<!s32i> loc(#loc458)
            %20 = cir.const #cir.int<10> : !s32i loc(#loc260)
            %21 = cir.load %12 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc261)
            %22 = cir.get_member %21[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc68)
            cir.store %20, %22 : !s32i, !cir.ptr<!s32i> loc(#loc459)
            %23 = cir.load %12 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc262)
            %24 = cir.get_member %23[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc65)
            %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc263)
            cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc264)
            %26 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc265)
            %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc266)
            %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc266)
            cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc265)
          } loc(#loc455)
          cir.break loc(#loc267)
        } loc(#loc251)
        cir.case(default, []) {
          %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc269)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc269)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc270)
          cir.break loc(#loc271)
        } loc(#loc268)
        cir.yield loc(#loc248)
      } loc(#loc248)
    } loc(#loc454)
    cir.return loc(#loc208)
  } loc(#loc438)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_15L8goodG2B2Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc461)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc462)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc463)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc280)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc464)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc280)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc465)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc462)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc285)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc286)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc467)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc288)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc289)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc290)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc288)
      } loc(#loc468)
    } loc(#loc466)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc291)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc469)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc291)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc470)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc463)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc296)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc297)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc472)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc299)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc300)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc301)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc299)
      } loc(#loc473)
    } loc(#loc471)
    cir.scope {
      %11 = cir.const #cir.int<6> : !s32i loc(#loc304)
      cir.switch (%11 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %12 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc306)
          cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc475)
          cir.break loc(#loc308)
        } loc(#loc305)
        cir.case(default, []) {
          %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc310)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc310)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc311)
          cir.break loc(#loc312)
        } loc(#loc309)
        cir.yield loc(#loc302)
      } loc(#loc302)
    } loc(#loc474)
    cir.scope {
      %11 = cir.const #cir.int<7> : !s32i loc(#loc315)
      cir.switch (%11 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %12 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc478)
            %13 = cir.const #cir.int<8> : !u64i loc(#loc479)
            %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc322)
            %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc322)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc479)
            cir.call @_ZN12TwoIntsClassC2Ev(%16) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc320)
            cir.store %16, %12 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc478)
            %17 = cir.const #cir.int<5> : !s32i loc(#loc323)
            %18 = cir.load %12 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc324)
            %19 = cir.get_member %18[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc65)
            cir.store %17, %19 : !s32i, !cir.ptr<!s32i> loc(#loc480)
            %20 = cir.const #cir.int<10> : !s32i loc(#loc325)
            %21 = cir.load %12 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc326)
            %22 = cir.get_member %21[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc68)
            cir.store %20, %22 : !s32i, !cir.ptr<!s32i> loc(#loc481)
            %23 = cir.load %12 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc327)
            %24 = cir.get_member %23[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc65)
            %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc328)
            cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc329)
            %26 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc330)
            %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc331)
            %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc331)
            cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc330)
          } loc(#loc477)
          cir.break loc(#loc332)
        } loc(#loc316)
        cir.case(default, []) {
          %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc334)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc334)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc335)
          cir.break loc(#loc336)
        } loc(#loc333)
        cir.yield loc(#loc313)
      } loc(#loc313)
    } loc(#loc476)
    cir.return loc(#loc273)
  } loc(#loc460)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_154goodEv() extra(#fn_attr2) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_15L8goodB2G1Ev() : () -> () loc(#loc339)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_15L8goodB2G2Ev() : () -> () loc(#loc340)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_15L8goodG2B1Ev() : () -> () loc(#loc341)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_15L8goodG2B2Ev() : () -> () loc(#loc342)
    cir.return loc(#loc338)
  } loc(#loc482)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc483)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc484)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc347)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc348)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc349)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc350)
  cir.func @main(%arg0: !s32i loc(fused[#loc353, #loc354]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc355, #loc356])) -> !s32i extra(#fn_attr2) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc486)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc487)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc352)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc357)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc357)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc358)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc359)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc359)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc360)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc347)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc347)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc361)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_154goodEv() : () -> () loc(#loc362)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc348)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc348)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc363)
    %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc349)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc349)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc364)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_153badEv() : () -> () loc(#loc365)
    %12 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc350)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc350)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc366)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc367)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc488)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc488)
    cir.return %15 : !s32i loc(#loc488)
  } loc(#loc485)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":39:19)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc11 = loc("/usr/include/stdlib.h":687:1)
#loc12 = loc("/usr/include/stdlib.h":687:32)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":24:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":65:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":26:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":26:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":27:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":27:62)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":29:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":29:64)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":27:36)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":27:43)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":27:61)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":28:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":28:42)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":28:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":28:26)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":28:32)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":28:33)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":28:39)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":28:38)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":29:37)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":29:44)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":29:63)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":30:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":30:43)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":30:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":30:27)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":30:33)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":30:34)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":30:40)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":30:39)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":31:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":41:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":31:12)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":33:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":35:16)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":35:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":36:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":37:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":39:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":40:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":42:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":64:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":42:12)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":44:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":45:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":58:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":51:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":51:45)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":51:35)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":51:39)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":53:28)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":53:9)
#loc65 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":54:28)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":54:9)
#loc68 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":55:22)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":55:32)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":55:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":57:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":57:14)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":59:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":60:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":62:19)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":62:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":63:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":72:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":111:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":74:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":74:12)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":75:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":75:62)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":77:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":77:64)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":75:36)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":75:43)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":75:61)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":76:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":76:42)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":76:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":76:26)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":76:32)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":76:33)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":76:39)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":76:38)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":77:37)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":77:44)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":77:63)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":78:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":78:43)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":78:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":78:27)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":78:33)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":78:34)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":78:40)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":78:39)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":79:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":89:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":79:12)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":81:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":83:16)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":83:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":84:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":85:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":87:19)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":87:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":88:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":90:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":110:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":90:12)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":92:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":94:19)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":94:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":95:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":96:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":97:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":108:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":103:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":103:44)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":103:34)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":103:38)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":105:28)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":105:9)
#loc137 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":106:22)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":106:32)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":106:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":107:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":107:14)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":109:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":114:1)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":153:1)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":116:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":116:12)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":117:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":117:62)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":119:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":119:64)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":117:36)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":117:43)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":117:61)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":118:5)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":118:42)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":118:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":118:26)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":118:32)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":118:33)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":118:39)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":118:38)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":119:37)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":119:44)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":119:63)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":120:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":120:43)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":120:9)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":120:27)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":120:33)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":120:34)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":120:40)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":120:39)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":121:5)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":131:5)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":121:12)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":123:5)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":125:16)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":125:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":126:9)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":127:5)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":129:19)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":129:9)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":130:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":132:5)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":152:5)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":132:12)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":134:5)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":135:5)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":146:5)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":141:9)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":141:44)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":141:34)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":141:38)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":143:28)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":143:9)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":144:22)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":144:32)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":144:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":145:9)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":145:14)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":147:5)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":148:5)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":150:19)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":150:9)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":151:9)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":156:1)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":197:1)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":158:5)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":158:12)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":159:5)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":159:62)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":161:5)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":161:64)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":159:36)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":159:43)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":159:61)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":160:5)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":160:42)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":160:9)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":160:26)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":160:32)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":160:33)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":160:39)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":160:38)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":161:37)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":161:44)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":161:63)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":162:5)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":162:43)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":162:9)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":162:27)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":162:33)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":162:34)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":162:40)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":162:39)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":163:5)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":173:5)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":163:12)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":165:5)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":167:19)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":167:9)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":168:9)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":169:5)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":171:16)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":171:9)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":172:9)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":174:5)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":196:5)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":174:12)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":176:5)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":177:5)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":190:5)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":183:9)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":183:45)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":183:35)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":183:39)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":185:28)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":185:9)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":186:28)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":186:9)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":187:22)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":187:32)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":187:9)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":189:9)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":189:14)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":191:5)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":192:5)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":194:19)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":194:9)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":195:9)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":200:1)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":241:1)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":202:5)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":202:12)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":203:5)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":203:62)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":205:5)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":205:64)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":203:36)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":203:43)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":203:61)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":204:5)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":204:42)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":204:9)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":204:26)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":204:32)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":204:33)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":204:39)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":204:38)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":205:37)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":205:44)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":205:63)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":206:5)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":206:43)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":206:9)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":206:27)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":206:33)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":206:34)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":206:40)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":206:39)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":207:5)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":217:5)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":207:12)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":209:5)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":211:16)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":211:9)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":212:9)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":213:5)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":215:19)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":215:9)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":216:9)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":218:5)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":240:5)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":218:12)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":220:5)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":221:5)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":234:5)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":227:9)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":227:45)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":227:35)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":227:39)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":229:28)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":229:9)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":230:28)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":230:9)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":231:22)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":231:32)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":231:9)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":233:9)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":233:14)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":235:5)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":236:5)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":238:19)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":238:9)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":239:9)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":243:1)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":249:1)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":245:5)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":246:5)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":247:5)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":248:5)
#loc343 = loc("/usr/include/stdlib.h":575:1)
#loc344 = loc("/usr/include/stdlib.h":575:41)
#loc345 = loc("/usr/include/time.h":76:1)
#loc346 = loc("/usr/include/time.h":76:38)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":269:15)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":271:15)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":274:15)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":276:15)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":264:1)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":279:1)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":265:1)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":267:27)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":267:22)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":267:5)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":269:5)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":270:5)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":271:5)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":274:5)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":275:5)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":276:5)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":278:12)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":278:5)
#loc369 = loc(fused[#loc1, #loc2])
#loc370 = loc(fused[#loc3, #loc4])
#loc371 = loc(fused[#loc5, #loc6])
#loc372 = loc(fused[#loc9, #loc10])
#loc373 = loc(fused[#loc11, #loc12])
#loc374 = loc(fused[#loc13, #loc14])
#loc375 = loc(fused[#loc15, #loc16])
#loc376 = loc(fused[#loc17, #loc18])
#loc377 = loc(fused[#loc19, #loc20])
#loc378 = loc(fused[#loc22, #loc23])
#loc379 = loc(fused[#loc21, #loc18])
#loc380 = loc(fused[#loc24, #loc25])
#loc381 = loc(fused[#loc26, #loc27])
#loc382 = loc(fused[#loc28, #loc25])
#loc383 = loc(fused[#loc33, #loc34])
#loc384 = loc(fused[#loc32, #loc20])
#loc385 = loc(fused[#loc35, #loc36])
#loc386 = loc(fused[#loc37, #loc38])
#loc387 = loc(fused[#loc39, #loc36])
#loc388 = loc(fused[#loc43, #loc44])
#loc389 = loc(fused[#loc48, #loc47])
#loc390 = loc(fused[#loc53, #loc54])
#loc391 = loc(fused[#loc57, #loc58])
#loc392 = loc(fused[#loc59, #loc60])
#loc393 = loc(fused[#loc61, #loc60])
#loc394 = loc(fused[#loc64, #loc63])
#loc395 = loc(fused[#loc67, #loc66])
#loc396 = loc(fused[#loc80, #loc81])
#loc397 = loc(fused[#loc82, #loc83])
#loc398 = loc(fused[#loc84, #loc85])
#loc399 = loc(fused[#loc86, #loc87])
#loc400 = loc(fused[#loc89, #loc90])
#loc401 = loc(fused[#loc88, #loc85])
#loc402 = loc(fused[#loc91, #loc92])
#loc403 = loc(fused[#loc93, #loc94])
#loc404 = loc(fused[#loc95, #loc92])
#loc405 = loc(fused[#loc100, #loc101])
#loc406 = loc(fused[#loc99, #loc87])
#loc407 = loc(fused[#loc102, #loc103])
#loc408 = loc(fused[#loc104, #loc105])
#loc409 = loc(fused[#loc106, #loc103])
#loc410 = loc(fused[#loc110, #loc111])
#loc411 = loc(fused[#loc115, #loc114])
#loc412 = loc(fused[#loc121, #loc122])
#loc413 = loc(fused[#loc129, #loc130])
#loc414 = loc(fused[#loc131, #loc132])
#loc415 = loc(fused[#loc133, #loc132])
#loc416 = loc(fused[#loc136, #loc135])
#loc417 = loc(fused[#loc144, #loc145])
#loc418 = loc(fused[#loc146, #loc147])
#loc419 = loc(fused[#loc148, #loc149])
#loc420 = loc(fused[#loc150, #loc151])
#loc421 = loc(fused[#loc153, #loc154])
#loc422 = loc(fused[#loc152, #loc149])
#loc423 = loc(fused[#loc155, #loc156])
#loc424 = loc(fused[#loc157, #loc158])
#loc425 = loc(fused[#loc159, #loc156])
#loc426 = loc(fused[#loc164, #loc165])
#loc427 = loc(fused[#loc163, #loc151])
#loc428 = loc(fused[#loc166, #loc167])
#loc429 = loc(fused[#loc168, #loc169])
#loc430 = loc(fused[#loc170, #loc167])
#loc431 = loc(fused[#loc174, #loc175])
#loc432 = loc(fused[#loc179, #loc178])
#loc433 = loc(fused[#loc185, #loc186])
#loc434 = loc(fused[#loc189, #loc190])
#loc435 = loc(fused[#loc191, #loc192])
#loc436 = loc(fused[#loc193, #loc192])
#loc437 = loc(fused[#loc196, #loc195])
#loc438 = loc(fused[#loc207, #loc208])
#loc439 = loc(fused[#loc209, #loc210])
#loc440 = loc(fused[#loc211, #loc212])
#loc441 = loc(fused[#loc213, #loc214])
#loc442 = loc(fused[#loc216, #loc217])
#loc443 = loc(fused[#loc215, #loc212])
#loc444 = loc(fused[#loc218, #loc219])
#loc445 = loc(fused[#loc220, #loc221])
#loc446 = loc(fused[#loc222, #loc219])
#loc447 = loc(fused[#loc227, #loc228])
#loc448 = loc(fused[#loc226, #loc214])
#loc449 = loc(fused[#loc229, #loc230])
#loc450 = loc(fused[#loc231, #loc232])
#loc451 = loc(fused[#loc233, #loc230])
#loc452 = loc(fused[#loc237, #loc238])
#loc453 = loc(fused[#loc246, #loc245])
#loc454 = loc(fused[#loc248, #loc249])
#loc455 = loc(fused[#loc252, #loc253])
#loc456 = loc(fused[#loc254, #loc255])
#loc457 = loc(fused[#loc256, #loc255])
#loc458 = loc(fused[#loc259, #loc258])
#loc459 = loc(fused[#loc261, #loc260])
#loc460 = loc(fused[#loc272, #loc273])
#loc461 = loc(fused[#loc274, #loc275])
#loc462 = loc(fused[#loc276, #loc277])
#loc463 = loc(fused[#loc278, #loc279])
#loc464 = loc(fused[#loc281, #loc282])
#loc465 = loc(fused[#loc280, #loc277])
#loc466 = loc(fused[#loc283, #loc284])
#loc467 = loc(fused[#loc285, #loc286])
#loc468 = loc(fused[#loc287, #loc284])
#loc469 = loc(fused[#loc292, #loc293])
#loc470 = loc(fused[#loc291, #loc279])
#loc471 = loc(fused[#loc294, #loc295])
#loc472 = loc(fused[#loc296, #loc297])
#loc473 = loc(fused[#loc298, #loc295])
#loc474 = loc(fused[#loc302, #loc303])
#loc475 = loc(fused[#loc307, #loc306])
#loc476 = loc(fused[#loc313, #loc314])
#loc477 = loc(fused[#loc317, #loc318])
#loc478 = loc(fused[#loc319, #loc320])
#loc479 = loc(fused[#loc321, #loc320])
#loc480 = loc(fused[#loc324, #loc323])
#loc481 = loc(fused[#loc326, #loc325])
#loc482 = loc(fused[#loc337, #loc338])
#loc483 = loc(fused[#loc343, #loc344])
#loc484 = loc(fused[#loc345, #loc346])
#loc485 = loc(fused[#loc351, #loc352])
#loc488 = loc(fused[#loc368, #loc367])
