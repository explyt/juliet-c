!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc104)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc105)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%u\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private  @printUnsignedLine(!u32i) loc(#loc106)
  cir.func no_proto  @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc108)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc12)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc12)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc109)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc14)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc105)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc15)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc14)
    cir.scope {
      %9 = cir.alloca !u32i, !cir.ptr<!u32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc111)
      %10 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc112)
      %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc19)
      cir.store %11, %9 : !u32i, !cir.ptr<!u32i> loc(#loc111)
      %12 = cir.load %9 : !cir.ptr<!u32i>, !u32i loc(#loc21)
      cir.store %12, %10 : !u32i, !cir.ptr<!u32i> loc(#loc112)
      cir.scope {
        %13 = cir.load %10 : !cir.ptr<!u32i>, !u32i loc(#loc24)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc25)
        %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc25)
        %16 = cir.cmp(gt, %13, %15) : !u32i, !s32i loc(#loc114)
        %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc26)
        cir.if %17 {
          %18 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc116)
          %19 = cir.load %10 : !cir.ptr<!u32i>, !u32i loc(#loc30)
          %20 = cir.const #cir.int<2> : !s32i loc(#loc29)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc29)
          %22 = cir.binop(mul, %19, %21) : !u32i loc(#loc117)
          cir.store %22, %18 : !u32i, !cir.ptr<!u32i> loc(#loc116)
          %23 = cir.load %18 : !cir.ptr<!u32i>, !u32i loc(#loc31)
          cir.call @printUnsignedLine(%23) : (!u32i) -> () loc(#loc32)
        } loc(#loc115)
      } loc(#loc113)
    } loc(#loc110)
    cir.return loc(#loc9)
  } loc(#loc107)
  cir.func no_proto  @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc119)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc120)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc118)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc122)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc43)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc43)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc123)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc45)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc45)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc124)
    cir.scope {
      %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc126)
      %6 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc127)
      %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc50)
      cir.store %7, %5 : !u32i, !cir.ptr<!u32i> loc(#loc126)
      %8 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc52)
      cir.store %8, %6 : !u32i, !cir.ptr<!u32i> loc(#loc127)
      cir.scope {
        %9 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc55)
        %10 = cir.const #cir.int<0> : !s32i loc(#loc56)
        %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc56)
        %12 = cir.cmp(gt, %9, %11) : !u32i, !s32i loc(#loc129)
        %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc57)
        cir.if %13 {
          %14 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc131)
          %15 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc61)
          %16 = cir.const #cir.int<2> : !s32i loc(#loc60)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc60)
          %18 = cir.binop(mul, %15, %17) : !u32i loc(#loc132)
          cir.store %18, %14 : !u32i, !cir.ptr<!u32i> loc(#loc131)
          %19 = cir.load %14 : !cir.ptr<!u32i>, !u32i loc(#loc62)
          cir.call @printUnsignedLine(%19) : (!u32i) -> () loc(#loc63)
        } loc(#loc130)
      } loc(#loc128)
    } loc(#loc125)
    cir.return loc(#loc40)
  } loc(#loc121)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc133)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc66)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc135)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc71)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc71)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc136)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc73)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc105)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc74)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc75)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc75)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc73)
    cir.scope {
      %9 = cir.alloca !u32i, !cir.ptr<!u32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc138)
      %10 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc139)
      %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc79)
      cir.store %11, %9 : !u32i, !cir.ptr<!u32i> loc(#loc138)
      %12 = cir.load %9 : !cir.ptr<!u32i>, !u32i loc(#loc81)
      cir.store %12, %10 : !u32i, !cir.ptr<!u32i> loc(#loc139)
      cir.scope {
        %13 = cir.load %10 : !cir.ptr<!u32i>, !u32i loc(#loc84)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc85)
        %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc85)
        %16 = cir.cmp(gt, %13, %15) : !u32i, !s32i loc(#loc141)
        %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc86)
        cir.if %17 {
          cir.scope {
            %18 = cir.load %10 : !cir.ptr<!u32i>, !u32i loc(#loc90)
            %19 = cir.const #cir.int<2147483647> : !s32i loc(#loc91)
            %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc91)
            %21 = cir.const #cir.int<2> : !u32i loc(#loc91)
            %22 = cir.binop(mul, %20, %21) : !u32i loc(#loc91)
            %23 = cir.const #cir.int<1> : !u32i loc(#loc91)
            %24 = cir.binop(add, %22, %23) : !u32i loc(#loc91)
            %25 = cir.const #cir.int<2> : !s32i loc(#loc92)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc92)
            %27 = cir.binop(div, %24, %26) : !u32i loc(#loc144)
            %28 = cir.cmp(lt, %18, %27) : !u32i, !s32i loc(#loc145)
            %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc94)
            cir.if %29 {
              %30 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc147)
              %31 = cir.load %10 : !cir.ptr<!u32i>, !u32i loc(#loc100)
              %32 = cir.const #cir.int<2> : !s32i loc(#loc99)
              %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc99)
              %34 = cir.binop(mul, %31, %33) : !u32i loc(#loc148)
              cir.store %34, %30 : !u32i, !cir.ptr<!u32i> loc(#loc147)
              %35 = cir.load %30 : !cir.ptr<!u32i>, !u32i loc(#loc101)
              cir.call @printUnsignedLine(%35) : (!u32i) -> () loc(#loc102)
            } else {
              %30 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc66)
              %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc66)
              cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc103)
            } loc(#loc146)
          } loc(#loc143)
        } loc(#loc142)
      } loc(#loc140)
    } loc(#loc137)
    cir.return loc(#loc68)
  } loc(#loc134)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":27:20)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":22:1)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":38:1)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":24:5)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":24:18)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":25:12)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":25:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":27:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":27:13)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":28:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":37:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":29:9)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":29:33)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":30:9)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":30:29)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":31:9)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":36:9)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":31:12)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":31:19)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":31:17)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":32:9)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":34:13)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":34:42)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":34:35)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":35:31)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":35:13)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":89:1)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":93:1)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":91:5)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":91:13)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":92:5)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":92:13)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":45:1)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":61:1)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":47:5)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":47:18)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":48:12)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":48:5)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":50:12)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":50:5)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":51:5)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":60:5)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":52:9)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":52:33)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":53:9)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":53:29)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":54:9)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":59:9)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":54:12)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":54:19)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":54:17)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":55:9)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":57:13)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":57:42)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":57:35)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":58:31)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":58:13)
#loc64 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc65 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":83:27)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":64:1)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":87:1)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":66:5)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":66:18)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":67:12)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":67:5)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":69:5)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":69:13)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":69:20)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":70:5)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":86:5)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":71:9)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":71:33)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":72:9)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":72:29)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":73:9)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":85:9)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":73:12)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":73:19)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":73:17)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":74:9)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":76:13)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":84:13)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":76:17)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":76:25)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":76:34)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":76:35)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":76:22)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":77:13)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":80:13)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":82:13)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":78:17)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":78:46)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":78:39)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":79:35)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":79:17)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_31.c":83:17)
#loc104 = loc(fused[#loc1, #loc2])
#loc105 = loc(fused[#loc3, #loc4])
#loc106 = loc(fused[#loc6, #loc7])
#loc107 = loc(fused[#loc8, #loc9])
#loc108 = loc(fused[#loc10, #loc11])
#loc109 = loc(fused[#loc13, #loc12])
#loc110 = loc(fused[#loc16, #loc17])
#loc111 = loc(fused[#loc18, #loc19])
#loc112 = loc(fused[#loc20, #loc21])
#loc113 = loc(fused[#loc22, #loc23])
#loc114 = loc(fused[#loc24, #loc25])
#loc115 = loc(fused[#loc27, #loc23])
#loc116 = loc(fused[#loc28, #loc29])
#loc117 = loc(fused[#loc30, #loc29])
#loc118 = loc(fused[#loc33, #loc34])
#loc119 = loc(fused[#loc35, #loc36])
#loc120 = loc(fused[#loc37, #loc38])
#loc121 = loc(fused[#loc39, #loc40])
#loc122 = loc(fused[#loc41, #loc42])
#loc123 = loc(fused[#loc44, #loc43])
#loc124 = loc(fused[#loc46, #loc45])
#loc125 = loc(fused[#loc47, #loc48])
#loc126 = loc(fused[#loc49, #loc50])
#loc127 = loc(fused[#loc51, #loc52])
#loc128 = loc(fused[#loc53, #loc54])
#loc129 = loc(fused[#loc55, #loc56])
#loc130 = loc(fused[#loc58, #loc54])
#loc131 = loc(fused[#loc59, #loc60])
#loc132 = loc(fused[#loc61, #loc60])
#loc133 = loc(fused[#loc64, #loc65])
#loc134 = loc(fused[#loc67, #loc68])
#loc135 = loc(fused[#loc69, #loc70])
#loc136 = loc(fused[#loc72, #loc71])
#loc137 = loc(fused[#loc76, #loc77])
#loc138 = loc(fused[#loc78, #loc79])
#loc139 = loc(fused[#loc80, #loc81])
#loc140 = loc(fused[#loc82, #loc83])
#loc141 = loc(fused[#loc84, #loc85])
#loc142 = loc(fused[#loc87, #loc83])
#loc143 = loc(fused[#loc88, #loc89])
#loc144 = loc(fused[#loc91, #loc92])
#loc145 = loc(fused[#loc90, #loc93])
#loc146 = loc(fused[#loc95, #loc96, #loc97, #loc89])
#loc147 = loc(fused[#loc98, #loc99])
#loc148 = loc(fused[#loc100, #loc99])
