!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc133)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc134)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc135)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc137)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc138)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc139)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc15)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc15)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc15)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc15)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc15)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc15)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc15)
    cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc139)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc16)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc140)
    cir.br ^bb1 loc(#loc141)
  ^bb1:  // pred: ^bb0
    %11 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc142)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc20)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %13 ^bb2, ^bb3 loc(#loc143)
  ^bb2:  // pred: ^bb1
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc23)
    %16 = cir.const #cir.int<65> : !s32i loc(#loc24)
    %17 = cir.const #cir.int<100> : !s32i loc(#loc25)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc25)
    %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc25)
    cir.libc.memset %20 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc144)
    %21 = cir.const #cir.int<0> : !s32i loc(#loc29)
    %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc29)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
    %24 = cir.const #cir.int<100> : !s32i loc(#loc31)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc31)
    %27 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc33)
    cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc145)
    cir.br ^bb3 loc(#loc19)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc146)
  ^bb5:  // pred: ^bb4
    %28 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc137)
    cir.store %28, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc137)
    %29 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc36)
    %30 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc37)
    %31 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc38)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
    %33 = cir.call @strlen(%32) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc38)
    %34 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %36 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
    %37 = cir.call @snprintf(%30, %33, %35, %36) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc36)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%38) : (!cir.ptr<!s8i>) -> () loc(#loc42)
    cir.br ^bb6 loc(#loc35)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc9)
  } loc(#loc136)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc148)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc149)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    cir.return loc(#loc44)
  } loc(#loc147)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc50)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc51)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    cir.return %2 : !s32i loc(#loc151)
  } loc(#loc150)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc53)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc153)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc154)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc155)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc61)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc61)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc61)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc61)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc61)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc61)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc61)
    cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc155)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc156)
    cir.br ^bb1 loc(#loc157)
  ^bb1:  // pred: ^bb0
    %11 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc158)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc66)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc66)
    cir.brcond %13 ^bb2, ^bb3 loc(#loc159)
  ^bb2:  // pred: ^bb1
    %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc53)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    cir.br ^bb4 loc(#loc69)
  ^bb3:  // pred: ^bb1
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc72)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc72)
    %18 = cir.const #cir.int<65> : !s32i loc(#loc73)
    %19 = cir.const #cir.int<50> : !s32i loc(#loc74)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc74)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc74)
    cir.libc.memset %22 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc160)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc78)
    %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc78)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
    %26 = cir.const #cir.int<50> : !s32i loc(#loc80)
    %27 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc80)
    %29 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %28 : !s32i), !cir.ptr<!s8i> loc(#loc82)
    cir.store %24, %29 : !s8i, !cir.ptr<!s8i> loc(#loc161)
    cir.br ^bb4 loc(#loc65)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc65)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc162)
  ^bb6:  // pred: ^bb5
    %30 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc153)
    cir.store %30, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc153)
    %31 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc85)
    %32 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc86)
    %33 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc87)
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc88)
    %35 = cir.call @strlen(%34) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc87)
    %36 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc89)
    %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc89)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc90)
    %39 = cir.call @snprintf(%32, %35, %37, %38) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc85)
    %40 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc91)
    cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    cir.br ^bb7 loc(#loc84)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc55)
  } loc(#loc152)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc94)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc95)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc164)
    cir.return %2 : !s32i loc(#loc164)
  } loc(#loc163)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc166)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc167)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc168)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc104)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc104)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc104)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc104)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc104)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc104)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc104)
    cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc168)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc105)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc169)
    cir.br ^bb1 loc(#loc170)
  ^bb1:  // pred: ^bb0
    %11 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc171)
    %12 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc109)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc109)
    cir.brcond %13 ^bb2, ^bb3 loc(#loc172)
  ^bb2:  // pred: ^bb1
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc112)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc112)
    %16 = cir.const #cir.int<65> : !s32i loc(#loc113)
    %17 = cir.const #cir.int<50> : !s32i loc(#loc114)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc115)
    %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc114)
    %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc114)
    cir.libc.memset %20 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc173)
    %21 = cir.const #cir.int<0> : !s32i loc(#loc118)
    %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc118)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
    %24 = cir.const #cir.int<50> : !s32i loc(#loc120)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc121)
    %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc120)
    %27 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc122)
    cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc174)
    cir.br ^bb3 loc(#loc108)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc108)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc175)
  ^bb5:  // pred: ^bb4
    %28 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc166)
    cir.store %28, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc166)
    %29 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc125)
    %30 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc126)
    %31 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc127)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc128)
    %33 = cir.call @strlen(%32) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc127)
    %34 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc129)
    %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc129)
    %36 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc130)
    %37 = cir.call @snprintf(%30, %33, %35, %36) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc125)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
    cir.call @printLine(%38) : (!cir.ptr<!s8i>) -> () loc(#loc132)
    cir.br ^bb6 loc(#loc124)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc98)
  } loc(#loc165)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":385:1)
#loc2 = loc("/usr/include/stdio.h":387:62)
#loc3 = loc("/usr/include/string.h":407:1)
#loc4 = loc("/usr/include/string.h":408:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":57:38)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":43:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":60:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":55:9)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":55:25)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":45:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":45:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":46:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":46:33)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":47:12)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":47:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":48:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":53:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":48:8)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":48:26)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":49:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":51:16)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":51:22)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":51:27)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":51:31)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":51:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":51:32)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":52:23)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":52:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":52:14)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":52:18)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":52:19)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":54:5)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":59:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":57:9)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":57:18)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":57:24)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":57:31)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":57:44)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":58:19)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":58:9)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":111:1)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":115:1)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":113:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":113:14)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":114:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":114:14)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":31:1)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":34:1)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":33:12)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":33:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":75:19)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":67:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":89:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":84:9)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":84:25)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":69:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":69:12)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":70:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":70:33)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":71:12)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":71:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":72:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":82:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":72:8)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":72:27)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":73:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":76:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":78:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":75:9)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":80:16)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":80:22)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":80:27)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":80:30)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":80:9)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":80:31)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":81:22)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":81:9)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":81:14)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":81:17)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":81:18)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":83:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":88:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":86:9)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":86:18)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":86:24)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":86:31)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":86:38)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":86:44)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":87:19)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":87:9)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":36:1)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":39:1)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":38:12)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":38:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":92:1)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":109:1)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":104:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":104:25)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":94:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":94:12)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":95:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":95:33)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":96:12)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":96:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":97:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":102:5)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":97:8)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":97:26)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":98:5)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":100:16)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":100:22)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":100:27)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":100:30)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":100:9)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":100:31)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":101:22)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":101:9)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":101:14)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":101:17)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":101:18)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":103:5)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":108:5)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":106:9)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":106:18)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":106:24)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":106:31)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":106:38)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":106:44)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":107:19)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c":107:9)
#loc133 = loc(fused[#loc1, #loc2])
#loc134 = loc(fused[#loc3, #loc4])
#loc135 = loc(fused[#loc6, #loc7])
#loc136 = loc(fused[#loc8, #loc9])
#loc137 = loc(fused[#loc10, #loc11])
#loc138 = loc(fused[#loc12, #loc13])
#loc139 = loc(fused[#loc14, #loc15])
#loc140 = loc(fused[#loc17, #loc16])
#loc141 = loc(fused[#loc18, #loc19])
#loc142 = loc(fused[#loc20, #loc21])
#loc143 = loc(fused[#loc22, #loc19])
#loc144 = loc(fused[#loc27, #loc28])
#loc145 = loc(fused[#loc30, #loc29])
#loc146 = loc(fused[#loc34, #loc35])
#loc147 = loc(fused[#loc43, #loc44])
#loc148 = loc(fused[#loc45, #loc46])
#loc149 = loc(fused[#loc47, #loc48])
#loc150 = loc(fused[#loc49, #loc50])
#loc151 = loc(fused[#loc52, #loc51])
#loc152 = loc(fused[#loc54, #loc55])
#loc153 = loc(fused[#loc56, #loc57])
#loc154 = loc(fused[#loc58, #loc59])
#loc155 = loc(fused[#loc60, #loc61])
#loc156 = loc(fused[#loc63, #loc62])
#loc157 = loc(fused[#loc64, #loc65])
#loc158 = loc(fused[#loc66, #loc67])
#loc159 = loc(fused[#loc68, #loc69, #loc70, #loc65])
#loc160 = loc(fused[#loc76, #loc77])
#loc161 = loc(fused[#loc79, #loc78])
#loc162 = loc(fused[#loc83, #loc84])
#loc163 = loc(fused[#loc93, #loc94])
#loc164 = loc(fused[#loc96, #loc95])
#loc165 = loc(fused[#loc97, #loc98])
#loc166 = loc(fused[#loc99, #loc100])
#loc167 = loc(fused[#loc101, #loc102])
#loc168 = loc(fused[#loc103, #loc104])
#loc169 = loc(fused[#loc106, #loc105])
#loc170 = loc(fused[#loc107, #loc108])
#loc171 = loc(fused[#loc109, #loc110])
#loc172 = loc(fused[#loc111, #loc108])
#loc173 = loc(fused[#loc116, #loc117])
#loc174 = loc(fused[#loc119, #loc118])
#loc175 = loc(fused[#loc123, #loc124])
