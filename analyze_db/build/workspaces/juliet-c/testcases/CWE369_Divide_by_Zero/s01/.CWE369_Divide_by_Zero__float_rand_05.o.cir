!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc165)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc166)
  cir.func private @printIntLine(!s32i) loc(#loc167)
  cir.func no_proto @CWE369_Divide_by_Zero__float_rand_05_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc169)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc11)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc170)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc165)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc15)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc17)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc17)
        %9 = cir.ternary(%8, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc17)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc17)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc17)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc17)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc17)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc17)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc17)
          cir.yield %23 : !u32i loc(#loc17)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc17)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc17)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc17)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc17)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc17)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc17)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc17)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc17)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc17)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc17)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc17)
          cir.yield %27 : !u32i loc(#loc17)
        }) : (!cir.bool) -> !u32i loc(#loc17)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc17)
        %11 = cir.cast(int_to_float, %10 : !s32i), !cir.float loc(#loc17)
        cir.store %11, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc173)
      } loc(#loc172)
    } loc(#loc171)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc165)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc21)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc177)
          %6 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc27)
          %7 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc28)
          %8 = cir.cast(floating, %7 : !cir.float), !cir.double loc(#loc28)
          %9 = cir.binop(div, %6, %8) : !cir.double loc(#loc178)
          %10 = cir.cast(float_to_int, %9 : !cir.double), !s32i loc(#loc178)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc177)
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc29)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc30)
        } loc(#loc176)
      } loc(#loc175)
    } loc(#loc174)
    cir.return loc(#loc8)
  } loc(#loc168)
  cir.func no_proto @CWE369_Divide_by_Zero__float_rand_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc180)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc181)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc182)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc183)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    cir.return loc(#loc32)
  } loc(#loc179)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc184)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc185)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc46)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc187)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc51)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc188)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc165)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc55)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc55)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc57)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc57)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc57)
        %9 = cir.ternary(%8, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc57)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc57)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc57)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc57)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc57)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc57)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc57)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc57)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc57)
          cir.yield %23 : !u32i loc(#loc57)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc57)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc57)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc57)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc57)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc57)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc57)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc57)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc57)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc57)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc57)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc57)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc57)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc57)
          cir.yield %27 : !u32i loc(#loc57)
        }) : (!cir.bool) -> !u32i loc(#loc57)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc57)
        %11 = cir.cast(int_to_float, %10 : !s32i), !cir.float loc(#loc57)
        cir.store %11, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc191)
      } loc(#loc190)
    } loc(#loc189)
    cir.scope {
      %2 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc184)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc61)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc61)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc45)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc45)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc65)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc68)
          %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc68)
          %7 = cir.fabs %6 : !cir.double loc(#loc68)
          %8 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc69)
          %9 = cir.cmp(gt, %7, %8) : !cir.double, !cir.bool loc(#loc195)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc197)
            %11 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc76)
            %12 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc77)
            %13 = cir.cast(floating, %12 : !cir.float), !cir.double loc(#loc77)
            %14 = cir.binop(div, %11, %13) : !cir.double loc(#loc198)
            %15 = cir.cast(float_to_int, %14 : !cir.double), !s32i loc(#loc198)
            cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc197)
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc78)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc79)
          } else {
            %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc46)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc46)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc80)
          } loc(#loc196)
        } loc(#loc194)
      } loc(#loc193)
    } loc(#loc192)
    cir.return loc(#loc48)
  } loc(#loc186)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc200)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc85)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc201)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc165)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc89)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc89)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc91)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc91)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc91)
        %9 = cir.ternary(%8, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc91)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc91)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc91)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc91)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc91)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc91)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc91)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc91)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc91)
          cir.yield %23 : !u32i loc(#loc91)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc91)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc91)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc91)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc91)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc91)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc91)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc91)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc91)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc91)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc91)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc91)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc91)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc91)
          cir.yield %27 : !u32i loc(#loc91)
        }) : (!cir.bool) -> !u32i loc(#loc91)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc91)
        %11 = cir.cast(int_to_float, %10 : !s32i), !cir.float loc(#loc91)
        cir.store %11, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc204)
      } loc(#loc203)
    } loc(#loc202)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc165)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc95)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc95)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc99)
          %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc99)
          %7 = cir.fabs %6 : !cir.double loc(#loc99)
          %8 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc100)
          %9 = cir.cmp(gt, %7, %8) : !cir.double, !cir.bool loc(#loc208)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc210)
            %11 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc107)
            %12 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc108)
            %13 = cir.cast(floating, %12 : !cir.float), !cir.double loc(#loc108)
            %14 = cir.binop(div, %11, %13) : !cir.double loc(#loc211)
            %15 = cir.cast(float_to_int, %14 : !cir.double), !s32i loc(#loc211)
            cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc210)
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc109)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc110)
          } else {
            %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc111)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc111)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc112)
          } loc(#loc209)
        } loc(#loc207)
      } loc(#loc206)
    } loc(#loc205)
    cir.return loc(#loc82)
  } loc(#loc199)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc213)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc117)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc214)
    cir.scope {
      %2 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc184)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc121)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc121)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc125)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc125)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc126)
      } else {
        %5 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc127)
        cir.store %5, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc217)
      } loc(#loc216)
    } loc(#loc215)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc165)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc131)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc131)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc221)
          %6 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc137)
          %7 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc138)
          %8 = cir.cast(floating, %7 : !cir.float), !cir.double loc(#loc138)
          %9 = cir.binop(div, %6, %8) : !cir.double loc(#loc222)
          %10 = cir.cast(float_to_int, %9 : !cir.double), !s32i loc(#loc222)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc221)
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc139)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc140)
        } loc(#loc220)
      } loc(#loc219)
    } loc(#loc218)
    cir.return loc(#loc114)
  } loc(#loc212)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc224)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc145)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc225)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc165)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc149)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc149)
      cir.if %4 {
        %5 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc151)
        cir.store %5, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc228)
      } loc(#loc227)
    } loc(#loc226)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc165)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc155)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc155)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc232)
          %6 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc161)
          %7 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc162)
          %8 = cir.cast(floating, %7 : !cir.float), !cir.double loc(#loc162)
          %9 = cir.binop(div, %6, %8) : !cir.double loc(#loc233)
          %10 = cir.cast(float_to_int, %9 : !cir.double), !s32i loc(#loc233)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc232)
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc163)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc164)
        } loc(#loc231)
      } loc(#loc230)
    } loc(#loc229)
    cir.return loc(#loc142)
  } loc(#loc223)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_05.c":0:0)
#loc1 = loc("CWE369_Divide_by_Zero__float_rand_05.c":25:1)
#loc2 = loc("CWE369_Divide_by_Zero__float_rand_05.c":25:25)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE369_Divide_by_Zero__float_rand_05.c":30:1)
#loc8 = loc("CWE369_Divide_by_Zero__float_rand_05.c":48:1)
#loc9 = loc("CWE369_Divide_by_Zero__float_rand_05.c":32:5)
#loc10 = loc("CWE369_Divide_by_Zero__float_rand_05.c":32:11)
#loc11 = loc("CWE369_Divide_by_Zero__float_rand_05.c":34:12)
#loc12 = loc("CWE369_Divide_by_Zero__float_rand_05.c":34:5)
#loc13 = loc("CWE369_Divide_by_Zero__float_rand_05.c":35:5)
#loc14 = loc("CWE369_Divide_by_Zero__float_rand_05.c":39:5)
#loc15 = loc("CWE369_Divide_by_Zero__float_rand_05.c":35:8)
#loc16 = loc("CWE369_Divide_by_Zero__float_rand_05.c":36:5)
#loc17 = loc("CWE369_Divide_by_Zero__float_rand_05.c":38:23)
#loc18 = loc("CWE369_Divide_by_Zero__float_rand_05.c":38:9)
#loc19 = loc("CWE369_Divide_by_Zero__float_rand_05.c":40:5)
#loc20 = loc("CWE369_Divide_by_Zero__float_rand_05.c":47:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_rand_05.c":40:8)
#loc22 = loc("CWE369_Divide_by_Zero__float_rand_05.c":41:5)
#loc23 = loc("CWE369_Divide_by_Zero__float_rand_05.c":42:9)
#loc24 = loc("CWE369_Divide_by_Zero__float_rand_05.c":46:9)
#loc25 = loc("CWE369_Divide_by_Zero__float_rand_05.c":44:13)
#loc26 = loc("CWE369_Divide_by_Zero__float_rand_05.c":44:44)
#loc27 = loc("CWE369_Divide_by_Zero__float_rand_05.c":44:32)
#loc28 = loc("CWE369_Divide_by_Zero__float_rand_05.c":44:40)
#loc29 = loc("CWE369_Divide_by_Zero__float_rand_05.c":45:26)
#loc30 = loc("CWE369_Divide_by_Zero__float_rand_05.c":45:13)
#loc31 = loc("CWE369_Divide_by_Zero__float_rand_05.c":158:1)
#loc32 = loc("CWE369_Divide_by_Zero__float_rand_05.c":164:1)
#loc33 = loc("CWE369_Divide_by_Zero__float_rand_05.c":160:5)
#loc34 = loc("CWE369_Divide_by_Zero__float_rand_05.c":160:14)
#loc35 = loc("CWE369_Divide_by_Zero__float_rand_05.c":161:5)
#loc36 = loc("CWE369_Divide_by_Zero__float_rand_05.c":161:14)
#loc37 = loc("CWE369_Divide_by_Zero__float_rand_05.c":162:5)
#loc38 = loc("CWE369_Divide_by_Zero__float_rand_05.c":162:14)
#loc39 = loc("CWE369_Divide_by_Zero__float_rand_05.c":163:5)
#loc40 = loc("CWE369_Divide_by_Zero__float_rand_05.c":163:14)
#loc41 = loc("CWE369_Divide_by_Zero__float_rand_05.c":26:1)
#loc42 = loc("CWE369_Divide_by_Zero__float_rand_05.c":26:26)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE369_Divide_by_Zero__float_rand_05.c":68:19)
#loc46 = loc("CWE369_Divide_by_Zero__float_rand_05.c":80:23)
#loc47 = loc("CWE369_Divide_by_Zero__float_rand_05.c":55:1)
#loc48 = loc("CWE369_Divide_by_Zero__float_rand_05.c":83:1)
#loc49 = loc("CWE369_Divide_by_Zero__float_rand_05.c":57:5)
#loc50 = loc("CWE369_Divide_by_Zero__float_rand_05.c":57:11)
#loc51 = loc("CWE369_Divide_by_Zero__float_rand_05.c":59:12)
#loc52 = loc("CWE369_Divide_by_Zero__float_rand_05.c":59:5)
#loc53 = loc("CWE369_Divide_by_Zero__float_rand_05.c":60:5)
#loc54 = loc("CWE369_Divide_by_Zero__float_rand_05.c":64:5)
#loc55 = loc("CWE369_Divide_by_Zero__float_rand_05.c":60:8)
#loc56 = loc("CWE369_Divide_by_Zero__float_rand_05.c":61:5)
#loc57 = loc("CWE369_Divide_by_Zero__float_rand_05.c":63:23)
#loc58 = loc("CWE369_Divide_by_Zero__float_rand_05.c":63:9)
#loc59 = loc("CWE369_Divide_by_Zero__float_rand_05.c":65:5)
#loc60 = loc("CWE369_Divide_by_Zero__float_rand_05.c":82:5)
#loc61 = loc("CWE369_Divide_by_Zero__float_rand_05.c":65:8)
#loc62 = loc("CWE369_Divide_by_Zero__float_rand_05.c":66:5)
#loc63 = loc("CWE369_Divide_by_Zero__float_rand_05.c":69:5)
#loc64 = loc("CWE369_Divide_by_Zero__float_rand_05.c":71:5)
#loc65 = loc("CWE369_Divide_by_Zero__float_rand_05.c":68:9)
#loc66 = loc("CWE369_Divide_by_Zero__float_rand_05.c":73:9)
#loc67 = loc("CWE369_Divide_by_Zero__float_rand_05.c":81:9)
#loc68 = loc("CWE369_Divide_by_Zero__float_rand_05.c":73:17)
#loc69 = loc("CWE369_Divide_by_Zero__float_rand_05.c":73:25)
#loc70 = loc("CWE369_Divide_by_Zero__float_rand_05.c":73:12)
#loc71 = loc("CWE369_Divide_by_Zero__float_rand_05.c":74:9)
#loc72 = loc("CWE369_Divide_by_Zero__float_rand_05.c":77:9)
#loc73 = loc("CWE369_Divide_by_Zero__float_rand_05.c":79:9)
#loc74 = loc("CWE369_Divide_by_Zero__float_rand_05.c":75:13)
#loc75 = loc("CWE369_Divide_by_Zero__float_rand_05.c":75:44)
#loc76 = loc("CWE369_Divide_by_Zero__float_rand_05.c":75:32)
#loc77 = loc("CWE369_Divide_by_Zero__float_rand_05.c":75:40)
#loc78 = loc("CWE369_Divide_by_Zero__float_rand_05.c":76:26)
#loc79 = loc("CWE369_Divide_by_Zero__float_rand_05.c":76:13)
#loc80 = loc("CWE369_Divide_by_Zero__float_rand_05.c":80:13)
#loc81 = loc("CWE369_Divide_by_Zero__float_rand_05.c":86:1)
#loc82 = loc("CWE369_Divide_by_Zero__float_rand_05.c":109:1)
#loc83 = loc("CWE369_Divide_by_Zero__float_rand_05.c":88:5)
#loc84 = loc("CWE369_Divide_by_Zero__float_rand_05.c":88:11)
#loc85 = loc("CWE369_Divide_by_Zero__float_rand_05.c":90:12)
#loc86 = loc("CWE369_Divide_by_Zero__float_rand_05.c":90:5)
#loc87 = loc("CWE369_Divide_by_Zero__float_rand_05.c":91:5)
#loc88 = loc("CWE369_Divide_by_Zero__float_rand_05.c":95:5)
#loc89 = loc("CWE369_Divide_by_Zero__float_rand_05.c":91:8)
#loc90 = loc("CWE369_Divide_by_Zero__float_rand_05.c":92:5)
#loc91 = loc("CWE369_Divide_by_Zero__float_rand_05.c":94:23)
#loc92 = loc("CWE369_Divide_by_Zero__float_rand_05.c":94:9)
#loc93 = loc("CWE369_Divide_by_Zero__float_rand_05.c":96:5)
#loc94 = loc("CWE369_Divide_by_Zero__float_rand_05.c":108:5)
#loc95 = loc("CWE369_Divide_by_Zero__float_rand_05.c":96:8)
#loc96 = loc("CWE369_Divide_by_Zero__float_rand_05.c":97:5)
#loc97 = loc("CWE369_Divide_by_Zero__float_rand_05.c":99:9)
#loc98 = loc("CWE369_Divide_by_Zero__float_rand_05.c":107:9)
#loc99 = loc("CWE369_Divide_by_Zero__float_rand_05.c":99:17)
#loc100 = loc("CWE369_Divide_by_Zero__float_rand_05.c":99:25)
#loc101 = loc("CWE369_Divide_by_Zero__float_rand_05.c":99:12)
#loc102 = loc("CWE369_Divide_by_Zero__float_rand_05.c":100:9)
#loc103 = loc("CWE369_Divide_by_Zero__float_rand_05.c":103:9)
#loc104 = loc("CWE369_Divide_by_Zero__float_rand_05.c":105:9)
#loc105 = loc("CWE369_Divide_by_Zero__float_rand_05.c":101:13)
#loc106 = loc("CWE369_Divide_by_Zero__float_rand_05.c":101:44)
#loc107 = loc("CWE369_Divide_by_Zero__float_rand_05.c":101:32)
#loc108 = loc("CWE369_Divide_by_Zero__float_rand_05.c":101:40)
#loc109 = loc("CWE369_Divide_by_Zero__float_rand_05.c":102:26)
#loc110 = loc("CWE369_Divide_by_Zero__float_rand_05.c":102:13)
#loc111 = loc("CWE369_Divide_by_Zero__float_rand_05.c":106:23)
#loc112 = loc("CWE369_Divide_by_Zero__float_rand_05.c":106:13)
#loc113 = loc("CWE369_Divide_by_Zero__float_rand_05.c":112:1)
#loc114 = loc("CWE369_Divide_by_Zero__float_rand_05.c":135:1)
#loc115 = loc("CWE369_Divide_by_Zero__float_rand_05.c":114:5)
#loc116 = loc("CWE369_Divide_by_Zero__float_rand_05.c":114:11)
#loc117 = loc("CWE369_Divide_by_Zero__float_rand_05.c":116:12)
#loc118 = loc("CWE369_Divide_by_Zero__float_rand_05.c":116:5)
#loc119 = loc("CWE369_Divide_by_Zero__float_rand_05.c":117:5)
#loc120 = loc("CWE369_Divide_by_Zero__float_rand_05.c":126:5)
#loc121 = loc("CWE369_Divide_by_Zero__float_rand_05.c":117:8)
#loc122 = loc("CWE369_Divide_by_Zero__float_rand_05.c":118:5)
#loc123 = loc("CWE369_Divide_by_Zero__float_rand_05.c":121:5)
#loc124 = loc("CWE369_Divide_by_Zero__float_rand_05.c":123:5)
#loc125 = loc("CWE369_Divide_by_Zero__float_rand_05.c":120:19)
#loc126 = loc("CWE369_Divide_by_Zero__float_rand_05.c":120:9)
#loc127 = loc("CWE369_Divide_by_Zero__float_rand_05.c":125:16)
#loc128 = loc("CWE369_Divide_by_Zero__float_rand_05.c":125:9)
#loc129 = loc("CWE369_Divide_by_Zero__float_rand_05.c":127:5)
#loc130 = loc("CWE369_Divide_by_Zero__float_rand_05.c":134:5)
#loc131 = loc("CWE369_Divide_by_Zero__float_rand_05.c":127:8)
#loc132 = loc("CWE369_Divide_by_Zero__float_rand_05.c":128:5)
#loc133 = loc("CWE369_Divide_by_Zero__float_rand_05.c":129:9)
#loc134 = loc("CWE369_Divide_by_Zero__float_rand_05.c":133:9)
#loc135 = loc("CWE369_Divide_by_Zero__float_rand_05.c":131:13)
#loc136 = loc("CWE369_Divide_by_Zero__float_rand_05.c":131:44)
#loc137 = loc("CWE369_Divide_by_Zero__float_rand_05.c":131:32)
#loc138 = loc("CWE369_Divide_by_Zero__float_rand_05.c":131:40)
#loc139 = loc("CWE369_Divide_by_Zero__float_rand_05.c":132:26)
#loc140 = loc("CWE369_Divide_by_Zero__float_rand_05.c":132:13)
#loc141 = loc("CWE369_Divide_by_Zero__float_rand_05.c":138:1)
#loc142 = loc("CWE369_Divide_by_Zero__float_rand_05.c":156:1)
#loc143 = loc("CWE369_Divide_by_Zero__float_rand_05.c":140:5)
#loc144 = loc("CWE369_Divide_by_Zero__float_rand_05.c":140:11)
#loc145 = loc("CWE369_Divide_by_Zero__float_rand_05.c":142:12)
#loc146 = loc("CWE369_Divide_by_Zero__float_rand_05.c":142:5)
#loc147 = loc("CWE369_Divide_by_Zero__float_rand_05.c":143:5)
#loc148 = loc("CWE369_Divide_by_Zero__float_rand_05.c":147:5)
#loc149 = loc("CWE369_Divide_by_Zero__float_rand_05.c":143:8)
#loc150 = loc("CWE369_Divide_by_Zero__float_rand_05.c":144:5)
#loc151 = loc("CWE369_Divide_by_Zero__float_rand_05.c":146:16)
#loc152 = loc("CWE369_Divide_by_Zero__float_rand_05.c":146:9)
#loc153 = loc("CWE369_Divide_by_Zero__float_rand_05.c":148:5)
#loc154 = loc("CWE369_Divide_by_Zero__float_rand_05.c":155:5)
#loc155 = loc("CWE369_Divide_by_Zero__float_rand_05.c":148:8)
#loc156 = loc("CWE369_Divide_by_Zero__float_rand_05.c":149:5)
#loc157 = loc("CWE369_Divide_by_Zero__float_rand_05.c":150:9)
#loc158 = loc("CWE369_Divide_by_Zero__float_rand_05.c":154:9)
#loc159 = loc("CWE369_Divide_by_Zero__float_rand_05.c":152:13)
#loc160 = loc("CWE369_Divide_by_Zero__float_rand_05.c":152:44)
#loc161 = loc("CWE369_Divide_by_Zero__float_rand_05.c":152:32)
#loc162 = loc("CWE369_Divide_by_Zero__float_rand_05.c":152:40)
#loc163 = loc("CWE369_Divide_by_Zero__float_rand_05.c":153:26)
#loc164 = loc("CWE369_Divide_by_Zero__float_rand_05.c":153:13)
#loc165 = loc(fused[#loc1, #loc2])
#loc166 = loc(fused[#loc3, #loc4])
#loc167 = loc(fused[#loc5, #loc6])
#loc168 = loc(fused[#loc7, #loc8])
#loc169 = loc(fused[#loc9, #loc10])
#loc170 = loc(fused[#loc12, #loc11])
#loc171 = loc(fused[#loc13, #loc14])
#loc172 = loc(fused[#loc16, #loc14])
#loc173 = loc(fused[#loc18, #loc17])
#loc174 = loc(fused[#loc19, #loc20])
#loc175 = loc(fused[#loc22, #loc20])
#loc176 = loc(fused[#loc23, #loc24])
#loc177 = loc(fused[#loc25, #loc26])
#loc178 = loc(fused[#loc27, #loc28])
#loc179 = loc(fused[#loc31, #loc32])
#loc180 = loc(fused[#loc33, #loc34])
#loc181 = loc(fused[#loc35, #loc36])
#loc182 = loc(fused[#loc37, #loc38])
#loc183 = loc(fused[#loc39, #loc40])
#loc184 = loc(fused[#loc41, #loc42])
#loc185 = loc(fused[#loc43, #loc44])
#loc186 = loc(fused[#loc47, #loc48])
#loc187 = loc(fused[#loc49, #loc50])
#loc188 = loc(fused[#loc52, #loc51])
#loc189 = loc(fused[#loc53, #loc54])
#loc190 = loc(fused[#loc56, #loc54])
#loc191 = loc(fused[#loc58, #loc57])
#loc192 = loc(fused[#loc59, #loc60])
#loc193 = loc(fused[#loc62, #loc63, #loc64, #loc60])
#loc194 = loc(fused[#loc66, #loc67])
#loc195 = loc(fused[#loc70, #loc69])
#loc196 = loc(fused[#loc71, #loc72, #loc73, #loc67])
#loc197 = loc(fused[#loc74, #loc75])
#loc198 = loc(fused[#loc76, #loc77])
#loc199 = loc(fused[#loc81, #loc82])
#loc200 = loc(fused[#loc83, #loc84])
#loc201 = loc(fused[#loc86, #loc85])
#loc202 = loc(fused[#loc87, #loc88])
#loc203 = loc(fused[#loc90, #loc88])
#loc204 = loc(fused[#loc92, #loc91])
#loc205 = loc(fused[#loc93, #loc94])
#loc206 = loc(fused[#loc96, #loc94])
#loc207 = loc(fused[#loc97, #loc98])
#loc208 = loc(fused[#loc101, #loc100])
#loc209 = loc(fused[#loc102, #loc103, #loc104, #loc98])
#loc210 = loc(fused[#loc105, #loc106])
#loc211 = loc(fused[#loc107, #loc108])
#loc212 = loc(fused[#loc113, #loc114])
#loc213 = loc(fused[#loc115, #loc116])
#loc214 = loc(fused[#loc118, #loc117])
#loc215 = loc(fused[#loc119, #loc120])
#loc216 = loc(fused[#loc122, #loc123, #loc124, #loc120])
#loc217 = loc(fused[#loc128, #loc127])
#loc218 = loc(fused[#loc129, #loc130])
#loc219 = loc(fused[#loc132, #loc130])
#loc220 = loc(fused[#loc133, #loc134])
#loc221 = loc(fused[#loc135, #loc136])
#loc222 = loc(fused[#loc137, #loc138])
#loc223 = loc(fused[#loc141, #loc142])
#loc224 = loc(fused[#loc143, #loc144])
#loc225 = loc(fused[#loc146, #loc145])
#loc226 = loc(fused[#loc147, #loc148])
#loc227 = loc(fused[#loc150, #loc148])
#loc228 = loc(fused[#loc152, #loc151])
#loc229 = loc(fused[#loc153, #loc154])
#loc230 = loc(fused[#loc156, #loc154])
#loc231 = loc(fused[#loc157, #loc158])
#loc232 = loc(fused[#loc159, #loc160])
#loc233 = loc(fused[#loc161, #loc162])
