!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":24:14)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":24:21)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":53:18)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":53:25)
!ty_TwoIntsClass = !cir.record<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
#loc101 = loc(fused[#loc5, #loc6])
#loc119 = loc(fused[#loc54, #loc55])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s03/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @printIntLine(!s32i) loc(#loc99)
  cir.func @_ZN61CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_647badSinkEPv(%arg0: !cir.ptr<!void> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc101)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty_TwoIntsClass>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc102)
    %2 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data", init] {alignment = 8 : i64} loc(#loc103)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc11)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc8)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc8)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty_TwoIntsClass>>> loc(#loc102)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!ty_TwoIntsClass>>>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc12)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc13)
    cir.store %6, %2 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc103)
    cir.scope {
      %7 = cir.alloca !cir.array<!ty_TwoIntsClass x 100>, !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>, ["source"] {alignment = 16 : i64} loc(#loc105)
      cir.scope {
        %22 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc107)
        cir.scope {
          %23 = cir.const #cir.int<0> : !s32i loc(#loc24)
          %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc24)
          cir.store %24, %22 : !u64i, !cir.ptr<!u64i> loc(#loc109)
          cir.for : cond {
            %25 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc26)
            %26 = cir.const #cir.int<100> : !s32i loc(#loc27)
            %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc27)
            %28 = cir.cmp(lt, %25, %27) : !u64i, !cir.bool loc(#loc110)
            cir.condition(%28) loc(#loc110)
          } body {
            cir.scope {
              %25 = cir.const #cir.int<0> : !s32i loc(#loc29)
              %26 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc30)
              %27 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc31)
              %28 = cir.ptr_stride(%27 : !cir.ptr<!ty_TwoIntsClass>, %26 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc31)
              %29 = cir.get_member %28[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc32)
              cir.store %25, %29 : !s32i, !cir.ptr<!s32i> loc(#loc112)
              %30 = cir.const #cir.int<0> : !s32i loc(#loc33)
              %31 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc34)
              %32 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc35)
              %33 = cir.ptr_stride(%32 : !cir.ptr<!ty_TwoIntsClass>, %31 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc35)
              %34 = cir.get_member %33[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc36)
              cir.store %30, %34 : !s32i, !cir.ptr<!s32i> loc(#loc113)
            } loc(#loc111)
            cir.yield loc(#loc23)
          } step {
            %25 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc37)
            %26 = cir.unary(inc, %25) : !u64i, !u64i loc(#loc38)
            cir.store %26, %22 : !u64i, !cir.ptr<!u64i> loc(#loc114)
            cir.yield loc(#loc108)
          } loc(#loc108)
        } loc(#loc108)
      } loc(#loc106)
      %8 = cir.load %2 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc39)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc39)
      %10 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc40)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc40)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc41)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc41)
      %14 = cir.const #cir.int<8> : !u64i loc(#loc115)
      %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc116)
      cir.libc.memcpy %15 bytes from %11 to %9 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc117)
      %16 = cir.load %2 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc46)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc47)
      %18 = cir.ptr_stride(%16 : !cir.ptr<!ty_TwoIntsClass>, %17 : !s32i), !cir.ptr<!ty_TwoIntsClass> loc(#loc48)
      %19 = cir.get_member %18[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc32)
      %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc49)
      cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc50)
      %21 = cir.load %2 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc51)
      cir.delete.array %21 : <!ty_TwoIntsClass> loc(#loc51)
    } loc(#loc104)
    cir.return loc(#loc4)
  } loc(#loc100)
  cir.func @_ZN61CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_6411goodG2BSinkEPv(%arg0: !cir.ptr<!void> loc(fused[#loc54, #loc55])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc119)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty_TwoIntsClass>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc120)
    %2 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data", init] {alignment = 8 : i64} loc(#loc121)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc60)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc57)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc57)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty_TwoIntsClass>>> loc(#loc120)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!ty_TwoIntsClass>>>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc61)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc62)
    cir.store %6, %2 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc121)
    cir.scope {
      %7 = cir.alloca !cir.array<!ty_TwoIntsClass x 100>, !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>, ["source"] {alignment = 16 : i64} loc(#loc123)
      cir.scope {
        %22 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc125)
        cir.scope {
          %23 = cir.const #cir.int<0> : !s32i loc(#loc73)
          %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc73)
          cir.store %24, %22 : !u64i, !cir.ptr<!u64i> loc(#loc127)
          cir.for : cond {
            %25 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc75)
            %26 = cir.const #cir.int<100> : !s32i loc(#loc76)
            %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc76)
            %28 = cir.cmp(lt, %25, %27) : !u64i, !cir.bool loc(#loc128)
            cir.condition(%28) loc(#loc128)
          } body {
            cir.scope {
              %25 = cir.const #cir.int<0> : !s32i loc(#loc78)
              %26 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc79)
              %27 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc80)
              %28 = cir.ptr_stride(%27 : !cir.ptr<!ty_TwoIntsClass>, %26 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc80)
              %29 = cir.get_member %28[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc32)
              cir.store %25, %29 : !s32i, !cir.ptr<!s32i> loc(#loc130)
              %30 = cir.const #cir.int<0> : !s32i loc(#loc81)
              %31 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc82)
              %32 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc83)
              %33 = cir.ptr_stride(%32 : !cir.ptr<!ty_TwoIntsClass>, %31 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc83)
              %34 = cir.get_member %33[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc36)
              cir.store %30, %34 : !s32i, !cir.ptr<!s32i> loc(#loc131)
            } loc(#loc129)
            cir.yield loc(#loc72)
          } step {
            %25 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc84)
            %26 = cir.unary(inc, %25) : !u64i, !u64i loc(#loc85)
            cir.store %26, %22 : !u64i, !cir.ptr<!u64i> loc(#loc132)
            cir.yield loc(#loc126)
          } loc(#loc126)
        } loc(#loc126)
      } loc(#loc124)
      %8 = cir.load %2 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc86)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc86)
      %10 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc87)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc87)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc88)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc88)
      %14 = cir.const #cir.int<8> : !u64i loc(#loc133)
      %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc134)
      cir.libc.memcpy %15 bytes from %11 to %9 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc135)
      %16 = cir.load %2 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc93)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc94)
      %18 = cir.ptr_stride(%16 : !cir.ptr<!ty_TwoIntsClass>, %17 : !s32i), !cir.ptr<!ty_TwoIntsClass> loc(#loc95)
      %19 = cir.get_member %18[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc32)
      %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc96)
      cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc97)
      %21 = cir.load %2 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc98)
      cir.delete.array %21 : <!ty_TwoIntsClass> loc(#loc98)
    } loc(#loc122)
    cir.return loc(#loc53)
  } loc(#loc118)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s03/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":24:1)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":46:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":27:5)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":27:50)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":29:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":29:36)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":25:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":29:29)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":29:28)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":30:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":45:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":31:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":31:32)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":32:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":40:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":33:13)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":33:20)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":35:13)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":39:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":35:22)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":35:18)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":35:25)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":35:29)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":36:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":37:36)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":37:24)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":37:17)
#loc32 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":38:36)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":38:24)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":38:17)
#loc36 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":35:35)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":35:34)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":42:16)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":42:22)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":42:30)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":42:34)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":42:53)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":42:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":42:54)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":43:22)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":43:27)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":43:28)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":43:30)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":43:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":44:19)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":53:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":75:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":56:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":56:50)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":58:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":58:36)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":54:1)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":58:29)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":58:28)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":59:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":74:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":60:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":60:32)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":61:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":69:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":62:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":62:20)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":64:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":68:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":64:22)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":64:18)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":64:25)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":64:29)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":65:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":66:36)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":66:24)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":66:17)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":67:36)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":67:24)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":67:17)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":64:35)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":64:34)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":71:16)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":71:22)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":71:30)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":71:34)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":71:53)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":71:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":71:54)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":72:22)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":72:27)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":72:28)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":72:30)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":72:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memcpy_64b.cpp":73:19)
#loc99 = loc(fused[#loc1, #loc2])
#loc100 = loc(fused[#loc3, #loc4])
#loc102 = loc(fused[#loc7, #loc8])
#loc103 = loc(fused[#loc9, #loc10])
#loc104 = loc(fused[#loc14, #loc15])
#loc105 = loc(fused[#loc16, #loc17])
#loc106 = loc(fused[#loc18, #loc19])
#loc107 = loc(fused[#loc20, #loc21])
#loc108 = loc(fused[#loc22, #loc23])
#loc109 = loc(fused[#loc25, #loc24])
#loc110 = loc(fused[#loc26, #loc27])
#loc111 = loc(fused[#loc28, #loc23])
#loc112 = loc(fused[#loc31, #loc29])
#loc113 = loc(fused[#loc35, #loc33])
#loc114 = loc(fused[#loc38, #loc37])
#loc115 = loc(fused[#loc42, #loc43])
#loc116 = loc(fused[#loc41, #loc43])
#loc117 = loc(fused[#loc44, #loc45])
#loc118 = loc(fused[#loc52, #loc53])
#loc120 = loc(fused[#loc56, #loc57])
#loc121 = loc(fused[#loc58, #loc59])
#loc122 = loc(fused[#loc63, #loc64])
#loc123 = loc(fused[#loc65, #loc66])
#loc124 = loc(fused[#loc67, #loc68])
#loc125 = loc(fused[#loc69, #loc70])
#loc126 = loc(fused[#loc71, #loc72])
#loc127 = loc(fused[#loc74, #loc73])
#loc128 = loc(fused[#loc75, #loc76])
#loc129 = loc(fused[#loc77, #loc72])
#loc130 = loc(fused[#loc80, #loc78])
#loc131 = loc(fused[#loc83, #loc81])
#loc132 = loc(fused[#loc85, #loc84])
#loc133 = loc(fused[#loc89, #loc90])
#loc134 = loc(fused[#loc88, #loc90])
#loc135 = loc(fused[#loc91, #loc92])
