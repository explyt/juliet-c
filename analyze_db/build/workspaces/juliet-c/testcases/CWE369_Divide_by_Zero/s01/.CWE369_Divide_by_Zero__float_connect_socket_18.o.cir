!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_connect_socket_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc263)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc264)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc265)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc266)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc267)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc268)
  cir.func private @close(!s32i) -> !s32i loc(#loc269)
  cir.func private @printIntLine(!s32i) loc(#loc270)
  cir.func no_proto @CWE369_Divide_by_Zero__float_connect_socket_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc272)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc273)
    %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc274)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc275)
    %4 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc276)
    %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc277)
    %6 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc32)
    cir.store %6, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc278)
    cir.goto "source" loc(#loc279)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc36)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc27)
    cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc275)
    cir.scope {
      cir.do {
        cir.scope {
          %15 = cir.const #cir.int<2> : !s32i loc(#loc41)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc42)
          %17 = cir.const #cir.int<6> : !s32i loc(#loc43)
          %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc44)
          cir.store %18, %3 : !s32i, !cir.ptr<!s32i> loc(#loc282)
          cir.scope {
            %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc49)
            %53 = cir.const #cir.int<1> : !s32i loc(#loc50)
            %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc50)
            %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc284)
            cir.if %55 {
              cir.break loc(#loc52)
            } loc(#loc285)
          } loc(#loc283)
          %19 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc286)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc55)
          %21 = cir.const #cir.int<16> : !u64i loc(#loc287)
          cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc288)
          %22 = cir.const #cir.int<2> : !s32i loc(#loc60)
          %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc60)
          %24 = cir.get_member %2[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc61)
          cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc289)
          %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
          %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
          %27 = cir.call @inet_addr(%26) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc63)
          %28 = cir.get_member %2[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc64)
          %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc65)
          cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc290)
          %30 = cir.const #cir.int<27015> : !s32i loc(#loc68)
          %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc68)
          %32 = cir.call @htons(%31) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc69)
          %33 = cir.get_member %2[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
          cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc291)
          cir.scope {
            %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc75)
            %53 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc293)
            %54 = cir.const #cir.int<16> : !u64i loc(#loc294)
            %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc294)
            %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc80)
            %57 = cir.const #cir.int<1> : !s32i loc(#loc81)
            %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc81)
            %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc295)
            cir.if %59 {
              cir.break loc(#loc83)
            } loc(#loc296)
          } loc(#loc292)
          %34 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc84)
          %35 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc85)
          %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc85)
          %37 = cir.const #cir.int<20> : !s32i loc(#loc86)
          %38 = cir.const #cir.int<1> : !s32i loc(#loc87)
          %39 = cir.binop(sub, %37, %38) nsw : !s32i loc(#loc86)
          %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc86)
          %41 = cir.const #cir.int<0> : !s32i loc(#loc88)
          %42 = cir.call @recv(%34, %36, %40, %41) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc89)
          %43 = cir.cast(integral, %42 : !s64i), !s32i loc(#loc89)
          cir.store %43, %1 : !s32i, !cir.ptr<!s32i> loc(#loc297)
          cir.scope {
            %52 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc94)
            %53 = cir.const #cir.int<1> : !s32i loc(#loc95)
            %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc95)
            %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc299)
            %56 = cir.ternary(%55, true {
              %57 = cir.const #true loc(#loc96)
              cir.yield %57 : !cir.bool loc(#loc96)
            }, false {
              %57 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc97)
              %58 = cir.const #cir.int<0> : !s32i loc(#loc98)
              %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc300)
              %60 = cir.ternary(%59, true {
                %61 = cir.const #true loc(#loc96)
                cir.yield %61 : !cir.bool loc(#loc96)
              }, false {
                %61 = cir.const #false loc(#loc96)
                cir.yield %61 : !cir.bool loc(#loc96)
              }) : (!cir.bool) -> !cir.bool loc(#loc96)
              cir.yield %60 : !cir.bool loc(#loc96)
            }) : (!cir.bool) -> !cir.bool loc(#loc96)
            cir.if %56 {
              cir.break loc(#loc100)
            } loc(#loc301)
          } loc(#loc298)
          %44 = cir.const #cir.int<0> : !s32i loc(#loc101)
          %45 = cir.cast(integral, %44 : !s32i), !s8i loc(#loc101)
          %46 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc102)
          %47 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc103)
          %48 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %46 : !s32i), !cir.ptr<!s8i> loc(#loc103)
          cir.store %45, %48 : !s8i, !cir.ptr<!s8i> loc(#loc302)
          %49 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc104)
          %50 = cir.call @atof(%49) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc105)
          %51 = cir.cast(floating, %50 : !cir.double), !cir.float loc(#loc105)
          cir.store %51, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc303)
        } loc(#loc281)
        cir.yield loc(#loc38)
      } while {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc108)
        %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc108)
        cir.condition(%16) loc(#loc108)
      } loc(#loc280)
    } loc(#loc280)
    cir.scope {
      %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc111)
      %16 = cir.const #cir.int<1> : !s32i loc(#loc112)
      %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc112)
      %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc305)
      cir.if %18 {
        %19 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc114)
        %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc115)
      } loc(#loc306)
    } loc(#loc304)
    cir.goto "sink" loc(#loc307)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc118)
    %9 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc119)
    %10 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc120)
    %11 = cir.cast(floating, %10 : !cir.float), !cir.double loc(#loc120)
    %12 = cir.binop(div, %9, %11) : !cir.double loc(#loc308)
    %13 = cir.cast(float_to_int, %12 : !cir.double), !s32i loc(#loc308)
    cir.store %13, %5 : !s32i, !cir.ptr<!s32i> loc(#loc277)
    %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc122)
    cir.return loc(#loc19)
  } loc(#loc271)
  cir.func no_proto @CWE369_Divide_by_Zero__float_connect_socket_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc310)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc125)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc311)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc127)
    cir.return loc(#loc124)
  } loc(#loc309)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc312)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc131)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc314)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc315)
    %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc316)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc317)
    %4 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc318)
    %5 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc144)
    cir.store %5, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc319)
    cir.goto "source" loc(#loc320)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc148)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc141)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc141)
    cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc317)
    cir.scope {
      cir.do {
        cir.scope {
          %8 = cir.const #cir.int<2> : !s32i loc(#loc153)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc154)
          %10 = cir.const #cir.int<6> : !s32i loc(#loc155)
          %11 = cir.call @socket(%8, %9, %10) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc156)
          cir.store %11, %3 : !s32i, !cir.ptr<!s32i> loc(#loc323)
          cir.scope {
            %45 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc161)
            %46 = cir.const #cir.int<1> : !s32i loc(#loc162)
            %47 = cir.unary(minus, %46) nsw : !s32i, !s32i loc(#loc162)
            %48 = cir.cmp(eq, %45, %47) : !s32i, !cir.bool loc(#loc325)
            cir.if %48 {
              cir.break loc(#loc164)
            } loc(#loc326)
          } loc(#loc324)
          %12 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc327)
          %13 = cir.const #cir.int<0> : !s32i loc(#loc167)
          %14 = cir.const #cir.int<16> : !u64i loc(#loc328)
          cir.libc.memset %14 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc329)
          %15 = cir.const #cir.int<2> : !s32i loc(#loc172)
          %16 = cir.cast(integral, %15 : !s32i), !u16i loc(#loc172)
          %17 = cir.get_member %2[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc61)
          cir.store %16, %17 : !u16i, !cir.ptr<!u16i> loc(#loc330)
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc174)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc174)
          %20 = cir.call @inet_addr(%19) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc175)
          %21 = cir.get_member %2[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc64)
          %22 = cir.get_member %21[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc65)
          cir.store %20, %22 : !u32i, !cir.ptr<!u32i> loc(#loc331)
          %23 = cir.const #cir.int<27015> : !s32i loc(#loc178)
          %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc178)
          %25 = cir.call @htons(%24) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc179)
          %26 = cir.get_member %2[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
          cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc332)
          cir.scope {
            %45 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc184)
            %46 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc334)
            %47 = cir.const #cir.int<16> : !u64i loc(#loc335)
            %48 = cir.cast(integral, %47 : !u64i), !u32i loc(#loc335)
            %49 = cir.call @connect(%45, %46, %48) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc189)
            %50 = cir.const #cir.int<1> : !s32i loc(#loc190)
            %51 = cir.unary(minus, %50) nsw : !s32i, !s32i loc(#loc190)
            %52 = cir.cmp(eq, %49, %51) : !s32i, !cir.bool loc(#loc336)
            cir.if %52 {
              cir.break loc(#loc192)
            } loc(#loc337)
          } loc(#loc333)
          %27 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc193)
          %28 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc194)
          %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc194)
          %30 = cir.const #cir.int<20> : !s32i loc(#loc195)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc196)
          %32 = cir.binop(sub, %30, %31) nsw : !s32i loc(#loc195)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc195)
          %34 = cir.const #cir.int<0> : !s32i loc(#loc197)
          %35 = cir.call @recv(%27, %29, %33, %34) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc198)
          %36 = cir.cast(integral, %35 : !s64i), !s32i loc(#loc198)
          cir.store %36, %1 : !s32i, !cir.ptr<!s32i> loc(#loc338)
          cir.scope {
            %45 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc203)
            %46 = cir.const #cir.int<1> : !s32i loc(#loc204)
            %47 = cir.unary(minus, %46) nsw : !s32i, !s32i loc(#loc204)
            %48 = cir.cmp(eq, %45, %47) : !s32i, !cir.bool loc(#loc340)
            %49 = cir.ternary(%48, true {
              %50 = cir.const #true loc(#loc205)
              cir.yield %50 : !cir.bool loc(#loc205)
            }, false {
              %50 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc206)
              %51 = cir.const #cir.int<0> : !s32i loc(#loc207)
              %52 = cir.cmp(eq, %50, %51) : !s32i, !cir.bool loc(#loc341)
              %53 = cir.ternary(%52, true {
                %54 = cir.const #true loc(#loc205)
                cir.yield %54 : !cir.bool loc(#loc205)
              }, false {
                %54 = cir.const #false loc(#loc205)
                cir.yield %54 : !cir.bool loc(#loc205)
              }) : (!cir.bool) -> !cir.bool loc(#loc205)
              cir.yield %53 : !cir.bool loc(#loc205)
            }) : (!cir.bool) -> !cir.bool loc(#loc205)
            cir.if %49 {
              cir.break loc(#loc209)
            } loc(#loc342)
          } loc(#loc339)
          %37 = cir.const #cir.int<0> : !s32i loc(#loc210)
          %38 = cir.cast(integral, %37 : !s32i), !s8i loc(#loc210)
          %39 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc211)
          %40 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc212)
          %41 = cir.ptr_stride(%40 : !cir.ptr<!s8i>, %39 : !s32i), !cir.ptr<!s8i> loc(#loc212)
          cir.store %38, %41 : !s8i, !cir.ptr<!s8i> loc(#loc343)
          %42 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc213)
          %43 = cir.call @atof(%42) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc214)
          %44 = cir.cast(floating, %43 : !cir.double), !cir.float loc(#loc214)
          cir.store %44, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc344)
        } loc(#loc322)
        cir.yield loc(#loc150)
      } while {
        %8 = cir.const #cir.int<0> : !s32i loc(#loc217)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc217)
        cir.condition(%9) loc(#loc217)
      } loc(#loc321)
    } loc(#loc321)
    cir.scope {
      %8 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc220)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc221)
      %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc221)
      %11 = cir.cmp(ne, %8, %10) : !s32i, !cir.bool loc(#loc346)
      cir.if %11 {
        %12 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc223)
        %13 = cir.call @close(%12) : (!s32i) -> !s32i loc(#loc224)
      } loc(#loc347)
    } loc(#loc345)
    cir.goto "sink" loc(#loc348)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc227)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc230)
      %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc230)
      %10 = cir.fabs %9 : !cir.double loc(#loc230)
      %11 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc231)
      %12 = cir.cmp(gt, %10, %11) : !cir.double, !cir.bool loc(#loc350)
      cir.if %12 {
        %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc352)
        %14 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc238)
        %15 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc239)
        %16 = cir.cast(floating, %15 : !cir.float), !cir.double loc(#loc239)
        %17 = cir.binop(div, %14, %16) : !cir.double loc(#loc353)
        %18 = cir.cast(float_to_int, %17 : !cir.double), !s32i loc(#loc353)
        cir.store %18, %13 : !s32i, !cir.ptr<!s32i> loc(#loc352)
        %19 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc240)
        cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc241)
      } else {
        %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc131)
        %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc131)
        cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc242)
      } loc(#loc351)
    } loc(#loc349)
    cir.return loc(#loc133)
  } loc(#loc313)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc355)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc356)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc249)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc357)
    cir.goto "source" loc(#loc358)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc253)
    %3 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc254)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc359)
    cir.goto "sink" loc(#loc360)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc258)
    %4 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc259)
    %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc260)
    %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc260)
    %7 = cir.binop(div, %4, %6) : !cir.double loc(#loc361)
    %8 = cir.cast(float_to_int, %7 : !cir.double), !s32i loc(#loc361)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc356)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc261)
    cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc262)
    cir.return loc(#loc244)
  } loc(#loc354)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_connect_socket_18.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":78:49)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":102:1)
#loc13 = loc("/usr/include/stdlib.h":103:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":46:1)
#loc19 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":116:1)
#loc20 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":48:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":48:11)
#loc22 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":58:9)
#loc23 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":58:13)
#loc24 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":59:9)
#loc25 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":59:28)
#loc26 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":60:9)
#loc27 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":60:32)
#loc28 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":61:9)
#loc29 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":61:41)
#loc30 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":113:9)
#loc31 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":113:40)
#loc32 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":50:12)
#loc33 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":50:5)
#loc34 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":51:5)
#loc35 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":51:10)
#loc36 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":52:1)
#loc37 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":62:9)
#loc38 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":97:17)
#loc39 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":63:9)
#loc40 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":96:9)
#loc41 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":71:36)
#loc42 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":71:45)
#loc43 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":71:58)
#loc44 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":71:29)
#loc45 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":71:13)
#loc46 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":71:69)
#loc47 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":72:13)
#loc48 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":75:13)
#loc49 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":72:17)
#loc50 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":72:34)
#loc51 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":73:13)
#loc52 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":74:17)
#loc53 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":76:20)
#loc54 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":76:21)
#loc55 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":76:30)
#loc56 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":76:33)
#loc57 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":76:47)
#loc58 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":76:13)
#loc59 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":76:48)
#loc60 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":77:34)
#loc61 = loc("/usr/include/netinet/in.h":249:5)
#loc62 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":77:13)
#loc63 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":78:39)
#loc64 = loc("/usr/include/netinet/in.h":251:20)
#loc65 = loc("/usr/include/netinet/in.h":33:15)
#loc66 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":78:13)
#loc67 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":78:59)
#loc68 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":79:38)
#loc69 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":79:32)
#loc70 = loc("/usr/include/netinet/in.h":250:15)
#loc71 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":79:13)
#loc72 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":79:46)
#loc73 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":80:13)
#loc74 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":83:13)
#loc75 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":80:25)
#loc76 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":80:58)
#loc77 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":80:59)
#loc78 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":80:68)
#loc79 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":80:82)
#loc80 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":80:17)
#loc81 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":80:88)
#loc82 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":81:13)
#loc83 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":82:17)
#loc84 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":87:31)
#loc85 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":87:46)
#loc86 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":87:59)
#loc87 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":87:77)
#loc88 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":87:80)
#loc89 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":87:26)
#loc90 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":87:13)
#loc91 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":87:81)
#loc92 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":88:13)
#loc93 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":91:13)
#loc94 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":88:17)
#loc95 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":88:31)
#loc96 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":88:44)
#loc97 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":88:47)
#loc98 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":88:61)
#loc99 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":89:13)
#loc100 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":90:17)
#loc101 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":93:39)
#loc102 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":93:25)
#loc103 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":93:13)
#loc104 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":95:32)
#loc105 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":95:27)
#loc106 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":95:13)
#loc107 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":95:43)
#loc108 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":97:16)
#loc109 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":98:9)
#loc110 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":101:9)
#loc111 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":98:13)
#loc112 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":98:30)
#loc113 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":99:9)
#loc114 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":100:26)
#loc115 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":100:13)
#loc116 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":109:5)
#loc117 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":109:10)
#loc118 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":110:1)
#loc119 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":113:28)
#loc120 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":113:36)
#loc121 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":114:22)
#loc122 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":114:9)
#loc123 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":219:1)
#loc124 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":223:1)
#loc125 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":221:5)
#loc126 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":221:13)
#loc127 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":222:5)
#loc128 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":222:13)
#loc129 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc130 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc131 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":196:19)
#loc132 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":123:1)
#loc133 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":198:1)
#loc134 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":125:5)
#loc135 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":125:11)
#loc136 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":135:9)
#loc137 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":135:13)
#loc138 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":136:9)
#loc139 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":136:28)
#loc140 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":137:9)
#loc141 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":137:32)
#loc142 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":138:9)
#loc143 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":138:41)
#loc144 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":127:12)
#loc145 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":127:5)
#loc146 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":128:5)
#loc147 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":128:10)
#loc148 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":129:1)
#loc149 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":139:9)
#loc150 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":174:17)
#loc151 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":140:9)
#loc152 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":173:9)
#loc153 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":148:36)
#loc154 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":148:45)
#loc155 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":148:58)
#loc156 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":148:29)
#loc157 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":148:13)
#loc158 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":148:69)
#loc159 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":149:13)
#loc160 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":152:13)
#loc161 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":149:17)
#loc162 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":149:34)
#loc163 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":150:13)
#loc164 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":151:17)
#loc165 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":153:20)
#loc166 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":153:21)
#loc167 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":153:30)
#loc168 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":153:33)
#loc169 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":153:47)
#loc170 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":153:13)
#loc171 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":153:48)
#loc172 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":154:34)
#loc173 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":154:13)
#loc174 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":155:49)
#loc175 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":155:39)
#loc176 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":155:13)
#loc177 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":155:59)
#loc178 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":156:38)
#loc179 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":156:32)
#loc180 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":156:13)
#loc181 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":156:46)
#loc182 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":157:13)
#loc183 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":160:13)
#loc184 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":157:25)
#loc185 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":157:58)
#loc186 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":157:59)
#loc187 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":157:68)
#loc188 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":157:82)
#loc189 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":157:17)
#loc190 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":157:88)
#loc191 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":158:13)
#loc192 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":159:17)
#loc193 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":164:31)
#loc194 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":164:46)
#loc195 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":164:59)
#loc196 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":164:77)
#loc197 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":164:80)
#loc198 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":164:26)
#loc199 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":164:13)
#loc200 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":164:81)
#loc201 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":165:13)
#loc202 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":168:13)
#loc203 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":165:17)
#loc204 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":165:31)
#loc205 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":165:44)
#loc206 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":165:47)
#loc207 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":165:61)
#loc208 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":166:13)
#loc209 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":167:17)
#loc210 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":170:39)
#loc211 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":170:25)
#loc212 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":170:13)
#loc213 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":172:32)
#loc214 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":172:27)
#loc215 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":172:13)
#loc216 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":172:43)
#loc217 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":174:16)
#loc218 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":175:9)
#loc219 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":178:9)
#loc220 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":175:13)
#loc221 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":175:30)
#loc222 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":176:9)
#loc223 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":177:26)
#loc224 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":177:13)
#loc225 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":186:5)
#loc226 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":186:10)
#loc227 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":187:1)
#loc228 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":189:5)
#loc229 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":197:5)
#loc230 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":189:13)
#loc231 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":189:21)
#loc232 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":189:8)
#loc233 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":190:5)
#loc234 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":193:5)
#loc235 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":195:5)
#loc236 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":191:9)
#loc237 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":191:40)
#loc238 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":191:28)
#loc239 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":191:36)
#loc240 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":192:22)
#loc241 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":192:9)
#loc242 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":196:9)
#loc243 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":201:1)
#loc244 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":217:1)
#loc245 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":203:5)
#loc246 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":203:11)
#loc247 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":214:9)
#loc248 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":214:40)
#loc249 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":205:12)
#loc250 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":205:5)
#loc251 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":206:5)
#loc252 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":206:10)
#loc253 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":207:1)
#loc254 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":209:12)
#loc255 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":209:5)
#loc256 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":210:5)
#loc257 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":210:10)
#loc258 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":211:1)
#loc259 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":214:28)
#loc260 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":214:36)
#loc261 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":215:22)
#loc262 = loc("CWE369_Divide_by_Zero__float_connect_socket_18.c":215:9)
#loc263 = loc(fused[#loc1, #loc2])
#loc264 = loc(fused[#loc3, #loc4])
#loc265 = loc(fused[#loc6, #loc7])
#loc266 = loc(fused[#loc8, #loc9])
#loc267 = loc(fused[#loc10, #loc11])
#loc268 = loc(fused[#loc12, #loc13])
#loc269 = loc(fused[#loc14, #loc15])
#loc270 = loc(fused[#loc16, #loc17])
#loc271 = loc(fused[#loc18, #loc19])
#loc272 = loc(fused[#loc20, #loc21])
#loc273 = loc(fused[#loc22, #loc23])
#loc274 = loc(fused[#loc24, #loc25])
#loc275 = loc(fused[#loc26, #loc27])
#loc276 = loc(fused[#loc28, #loc29])
#loc277 = loc(fused[#loc30, #loc31])
#loc278 = loc(fused[#loc33, #loc32])
#loc279 = loc(fused[#loc34, #loc35])
#loc280 = loc(fused[#loc37, #loc38])
#loc281 = loc(fused[#loc39, #loc40])
#loc282 = loc(fused[#loc45, #loc46])
#loc283 = loc(fused[#loc47, #loc48])
#loc284 = loc(fused[#loc49, #loc50])
#loc285 = loc(fused[#loc51, #loc48])
#loc286 = loc(fused[#loc53, #loc54])
#loc287 = loc(fused[#loc56, #loc57])
#loc288 = loc(fused[#loc58, #loc59])
#loc289 = loc(fused[#loc62, #loc60])
#loc290 = loc(fused[#loc66, #loc67])
#loc291 = loc(fused[#loc71, #loc72])
#loc292 = loc(fused[#loc73, #loc74])
#loc293 = loc(fused[#loc76, #loc77])
#loc294 = loc(fused[#loc78, #loc79])
#loc295 = loc(fused[#loc80, #loc81])
#loc296 = loc(fused[#loc82, #loc74])
#loc297 = loc(fused[#loc90, #loc91])
#loc298 = loc(fused[#loc92, #loc93])
#loc299 = loc(fused[#loc94, #loc95])
#loc300 = loc(fused[#loc97, #loc98])
#loc301 = loc(fused[#loc99, #loc93])
#loc302 = loc(fused[#loc103, #loc101])
#loc303 = loc(fused[#loc106, #loc107])
#loc304 = loc(fused[#loc109, #loc110])
#loc305 = loc(fused[#loc111, #loc112])
#loc306 = loc(fused[#loc113, #loc110])
#loc307 = loc(fused[#loc116, #loc117])
#loc308 = loc(fused[#loc119, #loc120])
#loc309 = loc(fused[#loc123, #loc124])
#loc310 = loc(fused[#loc125, #loc126])
#loc311 = loc(fused[#loc127, #loc128])
#loc312 = loc(fused[#loc129, #loc130])
#loc313 = loc(fused[#loc132, #loc133])
#loc314 = loc(fused[#loc134, #loc135])
#loc315 = loc(fused[#loc136, #loc137])
#loc316 = loc(fused[#loc138, #loc139])
#loc317 = loc(fused[#loc140, #loc141])
#loc318 = loc(fused[#loc142, #loc143])
#loc319 = loc(fused[#loc145, #loc144])
#loc320 = loc(fused[#loc146, #loc147])
#loc321 = loc(fused[#loc149, #loc150])
#loc322 = loc(fused[#loc151, #loc152])
#loc323 = loc(fused[#loc157, #loc158])
#loc324 = loc(fused[#loc159, #loc160])
#loc325 = loc(fused[#loc161, #loc162])
#loc326 = loc(fused[#loc163, #loc160])
#loc327 = loc(fused[#loc165, #loc166])
#loc328 = loc(fused[#loc168, #loc169])
#loc329 = loc(fused[#loc170, #loc171])
#loc330 = loc(fused[#loc173, #loc172])
#loc331 = loc(fused[#loc176, #loc177])
#loc332 = loc(fused[#loc180, #loc181])
#loc333 = loc(fused[#loc182, #loc183])
#loc334 = loc(fused[#loc185, #loc186])
#loc335 = loc(fused[#loc187, #loc188])
#loc336 = loc(fused[#loc189, #loc190])
#loc337 = loc(fused[#loc191, #loc183])
#loc338 = loc(fused[#loc199, #loc200])
#loc339 = loc(fused[#loc201, #loc202])
#loc340 = loc(fused[#loc203, #loc204])
#loc341 = loc(fused[#loc206, #loc207])
#loc342 = loc(fused[#loc208, #loc202])
#loc343 = loc(fused[#loc212, #loc210])
#loc344 = loc(fused[#loc215, #loc216])
#loc345 = loc(fused[#loc218, #loc219])
#loc346 = loc(fused[#loc220, #loc221])
#loc347 = loc(fused[#loc222, #loc219])
#loc348 = loc(fused[#loc225, #loc226])
#loc349 = loc(fused[#loc228, #loc229])
#loc350 = loc(fused[#loc232, #loc231])
#loc351 = loc(fused[#loc233, #loc234, #loc235, #loc229])
#loc352 = loc(fused[#loc236, #loc237])
#loc353 = loc(fused[#loc238, #loc239])
#loc354 = loc(fused[#loc243, #loc244])
#loc355 = loc(fused[#loc245, #loc246])
#loc356 = loc(fused[#loc247, #loc248])
#loc357 = loc(fused[#loc250, #loc249])
#loc358 = loc(fused[#loc251, #loc252])
#loc359 = loc(fused[#loc255, #loc254])
#loc360 = loc(fused[#loc256, #loc257])
#loc361 = loc(fused[#loc259, #loc260])
