!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_listen_socket_multiply_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc348)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc349)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc350)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc351)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc352)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc353)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc354)
  cir.func private @close(!s32i) -> !s32i loc(#loc355)
  cir.func private @printIntLine(!s32i) loc(#loc356)
  cir.func no_proto @CWE190_Integer_Overflow__int_listen_socket_multiply_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc358)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc23)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc359)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc27)
        cir.condition(%3) loc(#loc27)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc363)
            %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc364)
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc365)
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc366)
            %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc367)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc36)
            %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc36)
            cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc365)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc38)
            %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc38)
            cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc366)
            cir.scope {
              cir.do {
                cir.scope {
                  %11 = cir.const #cir.int<2> : !s32i loc(#loc45)
                  %12 = cir.const #cir.int<1> : !s32i loc(#loc46)
                  %13 = cir.const #cir.int<6> : !s32i loc(#loc47)
                  %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc48)
                  cir.store %14, %4 : !s32i, !cir.ptr<!s32i> loc(#loc370)
                  cir.scope {
                    %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc53)
                    %57 = cir.const #cir.int<1> : !s32i loc(#loc54)
                    %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc54)
                    %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc372)
                    cir.if %59 {
                      cir.break loc(#loc56)
                    } loc(#loc373)
                  } loc(#loc371)
                  %15 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc374)
                  %16 = cir.const #cir.int<0> : !s32i loc(#loc59)
                  %17 = cir.const #cir.int<16> : !u64i loc(#loc375)
                  cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc376)
                  %18 = cir.const #cir.int<2> : !s32i loc(#loc64)
                  %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc64)
                  %20 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc65)
                  cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc377)
                  %21 = cir.const #cir.int<0> : !s32i loc(#loc67)
                  %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc67)
                  %23 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc68)
                  %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc69)
                  cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc378)
                  %25 = cir.const #cir.int<27015> : !s32i loc(#loc71)
                  %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc71)
                  %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc72)
                  %28 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
                  cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc379)
                  cir.scope {
                    %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc78)
                    %57 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc381)
                    %58 = cir.const #cir.int<16> : !u64i loc(#loc382)
                    %59 = cir.cast(integral, %58 : !u64i), !u32i loc(#loc382)
                    %60 = cir.call @bind(%56, %57, %59) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc83)
                    %61 = cir.const #cir.int<1> : !s32i loc(#loc84)
                    %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc84)
                    %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc383)
                    cir.if %63 {
                      cir.break loc(#loc86)
                    } loc(#loc384)
                  } loc(#loc380)
                  cir.scope {
                    %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc89)
                    %57 = cir.const #cir.int<5> : !s32i loc(#loc90)
                    %58 = cir.call @listen(%56, %57) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc91)
                    %59 = cir.const #cir.int<1> : !s32i loc(#loc92)
                    %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc92)
                    %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc386)
                    cir.if %61 {
                      cir.break loc(#loc94)
                    } loc(#loc387)
                  } loc(#loc385)
                  %29 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc95)
                  %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc96)
                  %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc97)
                  %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc98)
                  cir.store %32, %5 : !s32i, !cir.ptr<!s32i> loc(#loc388)
                  cir.scope {
                    %56 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc103)
                    %57 = cir.const #cir.int<1> : !s32i loc(#loc104)
                    %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc104)
                    %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc390)
                    cir.if %59 {
                      cir.break loc(#loc106)
                    } loc(#loc391)
                  } loc(#loc389)
                  %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc107)
                  %34 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc108)
                  %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc108)
                  %36 = cir.const #cir.int<3> : !s32i loc(#loc109)
                  %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc109)
                  %38 = cir.const #cir.int<4> : !u64i loc(#loc109)
                  %39 = cir.binop(mul, %37, %38) : !u64i loc(#loc109)
                  %40 = cir.const #cir.int<2> : !s32i loc(#loc109)
                  %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc109)
                  %42 = cir.binop(add, %39, %41) : !u64i loc(#loc109)
                  %43 = cir.const #cir.int<1> : !s32i loc(#loc110)
                  %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc110)
                  %45 = cir.binop(sub, %42, %44) : !u64i loc(#loc392)
                  %46 = cir.const #cir.int<0> : !s32i loc(#loc111)
                  %47 = cir.call @recv(%33, %35, %45, %46) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc112)
                  %48 = cir.cast(integral, %47 : !s64i), !s32i loc(#loc112)
                  cir.store %48, %2 : !s32i, !cir.ptr<!s32i> loc(#loc393)
                  cir.scope {
                    %56 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc117)
                    %57 = cir.const #cir.int<1> : !s32i loc(#loc118)
                    %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc118)
                    %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc395)
                    %60 = cir.ternary(%59, true {
                      %61 = cir.const #true loc(#loc119)
                      cir.yield %61 : !cir.bool loc(#loc119)
                    }, false {
                      %61 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc120)
                      %62 = cir.const #cir.int<0> : !s32i loc(#loc121)
                      %63 = cir.cmp(eq, %61, %62) : !s32i, !cir.bool loc(#loc396)
                      %64 = cir.ternary(%63, true {
                        %65 = cir.const #true loc(#loc119)
                        cir.yield %65 : !cir.bool loc(#loc119)
                      }, false {
                        %65 = cir.const #false loc(#loc119)
                        cir.yield %65 : !cir.bool loc(#loc119)
                      }) : (!cir.bool) -> !cir.bool loc(#loc119)
                      cir.yield %64 : !cir.bool loc(#loc119)
                    }) : (!cir.bool) -> !cir.bool loc(#loc119)
                    cir.if %60 {
                      cir.break loc(#loc123)
                    } loc(#loc397)
                  } loc(#loc394)
                  %49 = cir.const #cir.int<0> : !s32i loc(#loc124)
                  %50 = cir.cast(integral, %49 : !s32i), !s8i loc(#loc124)
                  %51 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc125)
                  %52 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc126)
                  %53 = cir.ptr_stride(%52 : !cir.ptr<!s8i>, %51 : !s32i), !cir.ptr<!s8i> loc(#loc126)
                  cir.store %50, %53 : !s8i, !cir.ptr<!s8i> loc(#loc398)
                  %54 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc127)
                  %55 = cir.call @atoi(%54) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc128)
                  cir.store %55, %0 : !s32i, !cir.ptr<!s32i> loc(#loc399)
                } loc(#loc369)
                cir.yield loc(#loc42)
              } while {
                %11 = cir.const #cir.int<0> : !s32i loc(#loc131)
                %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc131)
                cir.condition(%12) loc(#loc131)
              } loc(#loc368)
            } loc(#loc368)
            cir.scope {
              %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc134)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc135)
              %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc135)
              %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc401)
              cir.if %14 {
                %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc137)
                %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc138)
              } loc(#loc402)
            } loc(#loc400)
            cir.scope {
              %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc141)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc142)
              %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc142)
              %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc404)
              cir.if %14 {
                %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc144)
                %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc145)
              } loc(#loc405)
            } loc(#loc403)
          } loc(#loc362)
          cir.break loc(#loc146)
        } loc(#loc361)
        cir.yield loc(#loc26)
      } loc(#loc360)
    } loc(#loc360)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc149)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc149)
        cir.condition(%3) loc(#loc149)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc153)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc154)
            %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc409)
            cir.if %4 {
              %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc411)
              %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc158)
              %7 = cir.const #cir.int<2> : !s32i loc(#loc157)
              %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc158)
              cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc411)
              %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc159)
              cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc160)
            } loc(#loc410)
          } loc(#loc408)
          cir.break loc(#loc161)
        } loc(#loc407)
        cir.yield loc(#loc148)
      } loc(#loc406)
    } loc(#loc406)
    cir.return loc(#loc20)
  } loc(#loc357)
  cir.func no_proto @CWE190_Integer_Overflow__int_listen_socket_multiply_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc413)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc164)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc414)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc166)
    cir.return loc(#loc163)
  } loc(#loc412)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc415)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc170)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc417)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc175)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc418)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc179)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc179)
        cir.condition(%3) loc(#loc179)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc422)
            %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc423)
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc424)
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc425)
            %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc426)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc188)
            %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc188)
            cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc424)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc190)
            %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc190)
            cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc425)
            cir.scope {
              cir.do {
                cir.scope {
                  %11 = cir.const #cir.int<2> : !s32i loc(#loc197)
                  %12 = cir.const #cir.int<1> : !s32i loc(#loc198)
                  %13 = cir.const #cir.int<6> : !s32i loc(#loc199)
                  %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc200)
                  cir.store %14, %4 : !s32i, !cir.ptr<!s32i> loc(#loc429)
                  cir.scope {
                    %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc205)
                    %57 = cir.const #cir.int<1> : !s32i loc(#loc206)
                    %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc206)
                    %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc431)
                    cir.if %59 {
                      cir.break loc(#loc208)
                    } loc(#loc432)
                  } loc(#loc430)
                  %15 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc433)
                  %16 = cir.const #cir.int<0> : !s32i loc(#loc211)
                  %17 = cir.const #cir.int<16> : !u64i loc(#loc434)
                  cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc435)
                  %18 = cir.const #cir.int<2> : !s32i loc(#loc216)
                  %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc216)
                  %20 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc65)
                  cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc436)
                  %21 = cir.const #cir.int<0> : !s32i loc(#loc218)
                  %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc218)
                  %23 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc68)
                  %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc69)
                  cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc437)
                  %25 = cir.const #cir.int<27015> : !s32i loc(#loc220)
                  %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc220)
                  %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc221)
                  %28 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
                  cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc438)
                  cir.scope {
                    %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc226)
                    %57 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc440)
                    %58 = cir.const #cir.int<16> : !u64i loc(#loc441)
                    %59 = cir.cast(integral, %58 : !u64i), !u32i loc(#loc441)
                    %60 = cir.call @bind(%56, %57, %59) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc231)
                    %61 = cir.const #cir.int<1> : !s32i loc(#loc232)
                    %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc232)
                    %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc442)
                    cir.if %63 {
                      cir.break loc(#loc234)
                    } loc(#loc443)
                  } loc(#loc439)
                  cir.scope {
                    %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc237)
                    %57 = cir.const #cir.int<5> : !s32i loc(#loc238)
                    %58 = cir.call @listen(%56, %57) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc239)
                    %59 = cir.const #cir.int<1> : !s32i loc(#loc240)
                    %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc240)
                    %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc445)
                    cir.if %61 {
                      cir.break loc(#loc242)
                    } loc(#loc446)
                  } loc(#loc444)
                  %29 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc243)
                  %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc244)
                  %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc245)
                  %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc246)
                  cir.store %32, %5 : !s32i, !cir.ptr<!s32i> loc(#loc447)
                  cir.scope {
                    %56 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc251)
                    %57 = cir.const #cir.int<1> : !s32i loc(#loc252)
                    %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc252)
                    %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc449)
                    cir.if %59 {
                      cir.break loc(#loc254)
                    } loc(#loc450)
                  } loc(#loc448)
                  %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc255)
                  %34 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc256)
                  %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc256)
                  %36 = cir.const #cir.int<3> : !s32i loc(#loc257)
                  %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc257)
                  %38 = cir.const #cir.int<4> : !u64i loc(#loc257)
                  %39 = cir.binop(mul, %37, %38) : !u64i loc(#loc257)
                  %40 = cir.const #cir.int<2> : !s32i loc(#loc257)
                  %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc257)
                  %42 = cir.binop(add, %39, %41) : !u64i loc(#loc257)
                  %43 = cir.const #cir.int<1> : !s32i loc(#loc258)
                  %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc258)
                  %45 = cir.binop(sub, %42, %44) : !u64i loc(#loc451)
                  %46 = cir.const #cir.int<0> : !s32i loc(#loc259)
                  %47 = cir.call @recv(%33, %35, %45, %46) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc260)
                  %48 = cir.cast(integral, %47 : !s64i), !s32i loc(#loc260)
                  cir.store %48, %2 : !s32i, !cir.ptr<!s32i> loc(#loc452)
                  cir.scope {
                    %56 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc265)
                    %57 = cir.const #cir.int<1> : !s32i loc(#loc266)
                    %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc266)
                    %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc454)
                    %60 = cir.ternary(%59, true {
                      %61 = cir.const #true loc(#loc267)
                      cir.yield %61 : !cir.bool loc(#loc267)
                    }, false {
                      %61 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc268)
                      %62 = cir.const #cir.int<0> : !s32i loc(#loc269)
                      %63 = cir.cmp(eq, %61, %62) : !s32i, !cir.bool loc(#loc455)
                      %64 = cir.ternary(%63, true {
                        %65 = cir.const #true loc(#loc267)
                        cir.yield %65 : !cir.bool loc(#loc267)
                      }, false {
                        %65 = cir.const #false loc(#loc267)
                        cir.yield %65 : !cir.bool loc(#loc267)
                      }) : (!cir.bool) -> !cir.bool loc(#loc267)
                      cir.yield %64 : !cir.bool loc(#loc267)
                    }) : (!cir.bool) -> !cir.bool loc(#loc267)
                    cir.if %60 {
                      cir.break loc(#loc271)
                    } loc(#loc456)
                  } loc(#loc453)
                  %49 = cir.const #cir.int<0> : !s32i loc(#loc272)
                  %50 = cir.cast(integral, %49 : !s32i), !s8i loc(#loc272)
                  %51 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc273)
                  %52 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc274)
                  %53 = cir.ptr_stride(%52 : !cir.ptr<!s8i>, %51 : !s32i), !cir.ptr<!s8i> loc(#loc274)
                  cir.store %50, %53 : !s8i, !cir.ptr<!s8i> loc(#loc457)
                  %54 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc275)
                  %55 = cir.call @atoi(%54) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc276)
                  cir.store %55, %0 : !s32i, !cir.ptr<!s32i> loc(#loc458)
                } loc(#loc428)
                cir.yield loc(#loc194)
              } while {
                %11 = cir.const #cir.int<0> : !s32i loc(#loc279)
                %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc279)
                cir.condition(%12) loc(#loc279)
              } loc(#loc427)
            } loc(#loc427)
            cir.scope {
              %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc282)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc283)
              %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc283)
              %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc460)
              cir.if %14 {
                %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc285)
                %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc286)
              } loc(#loc461)
            } loc(#loc459)
            cir.scope {
              %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc289)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc290)
              %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc290)
              %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc463)
              cir.if %14 {
                %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc292)
                %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc293)
              } loc(#loc464)
            } loc(#loc462)
          } loc(#loc421)
          cir.break loc(#loc294)
        } loc(#loc420)
        cir.yield loc(#loc178)
      } loc(#loc419)
    } loc(#loc419)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc297)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc297)
        cir.condition(%3) loc(#loc297)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc301)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc302)
            %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc468)
            cir.if %4 {
              cir.scope {
                %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc306)
                %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc307)
                %7 = cir.const #cir.int<2> : !s32i loc(#loc308)
                %8 = cir.binop(div, %6, %7) : !s32i loc(#loc471)
                %9 = cir.cmp(lt, %5, %8) : !s32i, !cir.bool loc(#loc472)
                cir.if %9 {
                  %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc474)
                  %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc315)
                  %12 = cir.const #cir.int<2> : !s32i loc(#loc314)
                  %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc315)
                  cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc474)
                  %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc316)
                  cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc317)
                } else {
                  %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc170)
                  %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc170)
                  cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc318)
                } loc(#loc473)
              } loc(#loc470)
            } loc(#loc469)
          } loc(#loc467)
          cir.break loc(#loc319)
        } loc(#loc466)
        cir.yield loc(#loc296)
      } loc(#loc465)
    } loc(#loc465)
    cir.return loc(#loc172)
  } loc(#loc416)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc476)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc324)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc477)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc328)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc328)
        cir.condition(%3) loc(#loc328)
      } do {
        cir.scope {
          %2 = cir.const #cir.int<2> : !s32i loc(#loc330)
          cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc480)
          cir.break loc(#loc332)
        } loc(#loc479)
        cir.yield loc(#loc327)
      } loc(#loc478)
    } loc(#loc478)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc335)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc335)
        cir.condition(%3) loc(#loc335)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc339)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc340)
            %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc484)
            cir.if %4 {
              %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc486)
              %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc344)
              %7 = cir.const #cir.int<2> : !s32i loc(#loc343)
              %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc344)
              cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc486)
              %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc345)
              cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc346)
            } loc(#loc485)
          } loc(#loc483)
          cir.break loc(#loc347)
        } loc(#loc482)
        cir.yield loc(#loc334)
      } loc(#loc481)
    } loc(#loc481)
    cir.return loc(#loc321)
  } loc(#loc475)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc19 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":44:1)
#loc20 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":132:1)
#loc21 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":46:5)
#loc22 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":46:9)
#loc23 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":48:12)
#loc24 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":48:5)
#loc25 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":49:5)
#loc26 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":121:5)
#loc27 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":49:11)
#loc28 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":50:5)
#loc29 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":51:9)
#loc30 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":119:9)
#loc31 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":56:13)
#loc32 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":56:17)
#loc33 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":57:13)
#loc34 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":57:32)
#loc35 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":58:13)
#loc36 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":58:35)
#loc37 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":59:13)
#loc38 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":59:35)
#loc39 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":60:13)
#loc40 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":60:45)
#loc41 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":61:13)
#loc42 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":104:21)
#loc43 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":62:13)
#loc44 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":103:13)
#loc45 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":71:39)
#loc46 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":71:48)
#loc47 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":71:61)
#loc48 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":71:32)
#loc49 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":71:17)
#loc50 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":71:72)
#loc51 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":72:17)
#loc52 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":75:17)
#loc53 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":72:21)
#loc54 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":72:37)
#loc55 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":73:17)
#loc56 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":74:21)
#loc57 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":76:24)
#loc58 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":76:25)
#loc59 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":76:34)
#loc60 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":76:37)
#loc61 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":76:51)
#loc62 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":76:17)
#loc63 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":76:52)
#loc64 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":77:38)
#loc65 = loc("/usr/include/netinet/in.h":249:5)
#loc66 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":77:17)
#loc67 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":78:43)
#loc68 = loc("/usr/include/netinet/in.h":251:20)
#loc69 = loc("/usr/include/netinet/in.h":33:15)
#loc70 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":78:17)
#loc71 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":79:42)
#loc72 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":79:36)
#loc73 = loc("/usr/include/netinet/in.h":250:15)
#loc74 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":79:17)
#loc75 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":79:50)
#loc76 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":80:17)
#loc77 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":83:17)
#loc78 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":80:26)
#loc79 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":80:58)
#loc80 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":80:59)
#loc81 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":80:68)
#loc82 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":80:82)
#loc83 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":80:21)
#loc84 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":80:88)
#loc85 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":81:17)
#loc86 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":82:21)
#loc87 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":84:17)
#loc88 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":87:17)
#loc89 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":84:28)
#loc90 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":84:42)
#loc91 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":84:21)
#loc92 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":84:61)
#loc93 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":85:17)
#loc94 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":86:21)
#loc95 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":88:39)
#loc96 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":88:53)
#loc97 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":88:59)
#loc98 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":88:32)
#loc99 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":88:17)
#loc100 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":88:63)
#loc101 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":89:17)
#loc102 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":92:17)
#loc103 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":89:21)
#loc104 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":89:37)
#loc105 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":90:17)
#loc106 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":91:21)
#loc107 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":94:35)
#loc108 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":94:49)
#loc109 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":94:62)
#loc110 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":94:80)
#loc111 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":94:83)
#loc112 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":94:30)
#loc113 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":94:17)
#loc114 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":94:84)
#loc115 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":95:17)
#loc116 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":98:17)
#loc117 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":95:21)
#loc118 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":95:35)
#loc119 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":95:48)
#loc120 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":95:51)
#loc121 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":95:65)
#loc122 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":96:17)
#loc123 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":97:21)
#loc124 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":100:43)
#loc125 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":100:29)
#loc126 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":100:17)
#loc127 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":102:29)
#loc128 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":102:24)
#loc129 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":102:17)
#loc130 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":102:40)
#loc131 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":104:20)
#loc132 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":105:13)
#loc133 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":108:13)
#loc134 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":105:17)
#loc135 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":105:33)
#loc136 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":106:13)
#loc137 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":107:30)
#loc138 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":107:17)
#loc139 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":109:13)
#loc140 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":112:13)
#loc141 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":109:17)
#loc142 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":109:33)
#loc143 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":110:13)
#loc144 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":111:30)
#loc145 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":111:17)
#loc146 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":120:9)
#loc147 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":122:5)
#loc148 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":131:5)
#loc149 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":122:11)
#loc150 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":123:5)
#loc151 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":124:9)
#loc152 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":129:9)
#loc153 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":124:12)
#loc154 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":124:19)
#loc155 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":125:9)
#loc156 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":127:13)
#loc157 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":127:33)
#loc158 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":127:26)
#loc159 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":128:26)
#loc160 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":128:13)
#loc161 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":130:9)
#loc162 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":260:1)
#loc163 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":264:1)
#loc164 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":262:5)
#loc165 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":262:13)
#loc166 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":263:5)
#loc167 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":263:13)
#loc168 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc169 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc170 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":229:27)
#loc171 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":139:1)
#loc172 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":234:1)
#loc173 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":141:5)
#loc174 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":141:9)
#loc175 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":143:12)
#loc176 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":143:5)
#loc177 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":144:5)
#loc178 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":216:5)
#loc179 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":144:11)
#loc180 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":145:5)
#loc181 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":146:9)
#loc182 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":214:9)
#loc183 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":151:13)
#loc184 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":151:17)
#loc185 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":152:13)
#loc186 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":152:32)
#loc187 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":153:13)
#loc188 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":153:35)
#loc189 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":154:13)
#loc190 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":154:35)
#loc191 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":155:13)
#loc192 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":155:45)
#loc193 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":156:13)
#loc194 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":199:21)
#loc195 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":157:13)
#loc196 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":198:13)
#loc197 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":166:39)
#loc198 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":166:48)
#loc199 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":166:61)
#loc200 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":166:32)
#loc201 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":166:17)
#loc202 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":166:72)
#loc203 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":167:17)
#loc204 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":170:17)
#loc205 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":167:21)
#loc206 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":167:37)
#loc207 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":168:17)
#loc208 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":169:21)
#loc209 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":171:24)
#loc210 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":171:25)
#loc211 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":171:34)
#loc212 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":171:37)
#loc213 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":171:51)
#loc214 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":171:17)
#loc215 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":171:52)
#loc216 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":172:38)
#loc217 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":172:17)
#loc218 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":173:43)
#loc219 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":173:17)
#loc220 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":174:42)
#loc221 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":174:36)
#loc222 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":174:17)
#loc223 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":174:50)
#loc224 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":175:17)
#loc225 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":178:17)
#loc226 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":175:26)
#loc227 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":175:58)
#loc228 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":175:59)
#loc229 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":175:68)
#loc230 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":175:82)
#loc231 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":175:21)
#loc232 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":175:88)
#loc233 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":176:17)
#loc234 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":177:21)
#loc235 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":179:17)
#loc236 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":182:17)
#loc237 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":179:28)
#loc238 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":179:42)
#loc239 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":179:21)
#loc240 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":179:61)
#loc241 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":180:17)
#loc242 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":181:21)
#loc243 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":183:39)
#loc244 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":183:53)
#loc245 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":183:59)
#loc246 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":183:32)
#loc247 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":183:17)
#loc248 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":183:63)
#loc249 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":184:17)
#loc250 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":187:17)
#loc251 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":184:21)
#loc252 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":184:37)
#loc253 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":185:17)
#loc254 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":186:21)
#loc255 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":189:35)
#loc256 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":189:49)
#loc257 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":189:62)
#loc258 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":189:80)
#loc259 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":189:83)
#loc260 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":189:30)
#loc261 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":189:17)
#loc262 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":189:84)
#loc263 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":190:17)
#loc264 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":193:17)
#loc265 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":190:21)
#loc266 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":190:35)
#loc267 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":190:48)
#loc268 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":190:51)
#loc269 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":190:65)
#loc270 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":191:17)
#loc271 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":192:21)
#loc272 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":195:43)
#loc273 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":195:29)
#loc274 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":195:17)
#loc275 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":197:29)
#loc276 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":197:24)
#loc277 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":197:17)
#loc278 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":197:40)
#loc279 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":199:20)
#loc280 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":200:13)
#loc281 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":203:13)
#loc282 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":200:17)
#loc283 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":200:33)
#loc284 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":201:13)
#loc285 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":202:30)
#loc286 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":202:17)
#loc287 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":204:13)
#loc288 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":207:13)
#loc289 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":204:17)
#loc290 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":204:33)
#loc291 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":205:13)
#loc292 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":206:30)
#loc293 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":206:17)
#loc294 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":215:9)
#loc295 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":217:5)
#loc296 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":233:5)
#loc297 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":217:11)
#loc298 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":218:5)
#loc299 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":219:9)
#loc300 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":231:9)
#loc301 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":219:12)
#loc302 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":219:19)
#loc303 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":220:9)
#loc304 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":222:13)
#loc305 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":230:13)
#loc306 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":222:17)
#loc307 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":222:25)
#loc308 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":222:33)
#loc309 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":222:34)
#loc310 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":223:13)
#loc311 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":226:13)
#loc312 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":228:13)
#loc313 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":224:17)
#loc314 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":224:37)
#loc315 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":224:30)
#loc316 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":225:30)
#loc317 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":225:17)
#loc318 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":229:17)
#loc319 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":232:9)
#loc320 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":237:1)
#loc321 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":258:1)
#loc322 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":239:5)
#loc323 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":239:9)
#loc324 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":241:12)
#loc325 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":241:5)
#loc326 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":242:5)
#loc327 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":247:5)
#loc328 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":242:11)
#loc329 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":243:5)
#loc330 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":245:16)
#loc331 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":245:9)
#loc332 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":246:9)
#loc333 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":248:5)
#loc334 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":257:5)
#loc335 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":248:11)
#loc336 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":249:5)
#loc337 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":250:9)
#loc338 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":255:9)
#loc339 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":250:12)
#loc340 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":250:19)
#loc341 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":251:9)
#loc342 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":253:13)
#loc343 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":253:33)
#loc344 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":253:26)
#loc345 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":254:26)
#loc346 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":254:13)
#loc347 = loc("CWE190_Integer_Overflow__int_listen_socket_multiply_16.c":256:9)
#loc348 = loc(fused[#loc1, #loc2])
#loc349 = loc(fused[#loc3, #loc4])
#loc350 = loc(fused[#loc5, #loc6])
#loc351 = loc(fused[#loc7, #loc8])
#loc352 = loc(fused[#loc9, #loc10])
#loc353 = loc(fused[#loc11, #loc12])
#loc354 = loc(fused[#loc13, #loc14])
#loc355 = loc(fused[#loc15, #loc16])
#loc356 = loc(fused[#loc17, #loc18])
#loc357 = loc(fused[#loc19, #loc20])
#loc358 = loc(fused[#loc21, #loc22])
#loc359 = loc(fused[#loc24, #loc23])
#loc360 = loc(fused[#loc25, #loc26])
#loc361 = loc(fused[#loc28, #loc26])
#loc362 = loc(fused[#loc29, #loc30])
#loc363 = loc(fused[#loc31, #loc32])
#loc364 = loc(fused[#loc33, #loc34])
#loc365 = loc(fused[#loc35, #loc36])
#loc366 = loc(fused[#loc37, #loc38])
#loc367 = loc(fused[#loc39, #loc40])
#loc368 = loc(fused[#loc41, #loc42])
#loc369 = loc(fused[#loc43, #loc44])
#loc370 = loc(fused[#loc49, #loc50])
#loc371 = loc(fused[#loc51, #loc52])
#loc372 = loc(fused[#loc53, #loc54])
#loc373 = loc(fused[#loc55, #loc52])
#loc374 = loc(fused[#loc57, #loc58])
#loc375 = loc(fused[#loc60, #loc61])
#loc376 = loc(fused[#loc62, #loc63])
#loc377 = loc(fused[#loc66, #loc64])
#loc378 = loc(fused[#loc70, #loc67])
#loc379 = loc(fused[#loc74, #loc75])
#loc380 = loc(fused[#loc76, #loc77])
#loc381 = loc(fused[#loc79, #loc80])
#loc382 = loc(fused[#loc81, #loc82])
#loc383 = loc(fused[#loc83, #loc84])
#loc384 = loc(fused[#loc85, #loc77])
#loc385 = loc(fused[#loc87, #loc88])
#loc386 = loc(fused[#loc91, #loc92])
#loc387 = loc(fused[#loc93, #loc88])
#loc388 = loc(fused[#loc99, #loc100])
#loc389 = loc(fused[#loc101, #loc102])
#loc390 = loc(fused[#loc103, #loc104])
#loc391 = loc(fused[#loc105, #loc102])
#loc392 = loc(fused[#loc109, #loc110])
#loc393 = loc(fused[#loc113, #loc114])
#loc394 = loc(fused[#loc115, #loc116])
#loc395 = loc(fused[#loc117, #loc118])
#loc396 = loc(fused[#loc120, #loc121])
#loc397 = loc(fused[#loc122, #loc116])
#loc398 = loc(fused[#loc126, #loc124])
#loc399 = loc(fused[#loc129, #loc130])
#loc400 = loc(fused[#loc132, #loc133])
#loc401 = loc(fused[#loc134, #loc135])
#loc402 = loc(fused[#loc136, #loc133])
#loc403 = loc(fused[#loc139, #loc140])
#loc404 = loc(fused[#loc141, #loc142])
#loc405 = loc(fused[#loc143, #loc140])
#loc406 = loc(fused[#loc147, #loc148])
#loc407 = loc(fused[#loc150, #loc148])
#loc408 = loc(fused[#loc151, #loc152])
#loc409 = loc(fused[#loc153, #loc154])
#loc410 = loc(fused[#loc155, #loc152])
#loc411 = loc(fused[#loc156, #loc157])
#loc412 = loc(fused[#loc162, #loc163])
#loc413 = loc(fused[#loc164, #loc165])
#loc414 = loc(fused[#loc166, #loc167])
#loc415 = loc(fused[#loc168, #loc169])
#loc416 = loc(fused[#loc171, #loc172])
#loc417 = loc(fused[#loc173, #loc174])
#loc418 = loc(fused[#loc176, #loc175])
#loc419 = loc(fused[#loc177, #loc178])
#loc420 = loc(fused[#loc180, #loc178])
#loc421 = loc(fused[#loc181, #loc182])
#loc422 = loc(fused[#loc183, #loc184])
#loc423 = loc(fused[#loc185, #loc186])
#loc424 = loc(fused[#loc187, #loc188])
#loc425 = loc(fused[#loc189, #loc190])
#loc426 = loc(fused[#loc191, #loc192])
#loc427 = loc(fused[#loc193, #loc194])
#loc428 = loc(fused[#loc195, #loc196])
#loc429 = loc(fused[#loc201, #loc202])
#loc430 = loc(fused[#loc203, #loc204])
#loc431 = loc(fused[#loc205, #loc206])
#loc432 = loc(fused[#loc207, #loc204])
#loc433 = loc(fused[#loc209, #loc210])
#loc434 = loc(fused[#loc212, #loc213])
#loc435 = loc(fused[#loc214, #loc215])
#loc436 = loc(fused[#loc217, #loc216])
#loc437 = loc(fused[#loc219, #loc218])
#loc438 = loc(fused[#loc222, #loc223])
#loc439 = loc(fused[#loc224, #loc225])
#loc440 = loc(fused[#loc227, #loc228])
#loc441 = loc(fused[#loc229, #loc230])
#loc442 = loc(fused[#loc231, #loc232])
#loc443 = loc(fused[#loc233, #loc225])
#loc444 = loc(fused[#loc235, #loc236])
#loc445 = loc(fused[#loc239, #loc240])
#loc446 = loc(fused[#loc241, #loc236])
#loc447 = loc(fused[#loc247, #loc248])
#loc448 = loc(fused[#loc249, #loc250])
#loc449 = loc(fused[#loc251, #loc252])
#loc450 = loc(fused[#loc253, #loc250])
#loc451 = loc(fused[#loc257, #loc258])
#loc452 = loc(fused[#loc261, #loc262])
#loc453 = loc(fused[#loc263, #loc264])
#loc454 = loc(fused[#loc265, #loc266])
#loc455 = loc(fused[#loc268, #loc269])
#loc456 = loc(fused[#loc270, #loc264])
#loc457 = loc(fused[#loc274, #loc272])
#loc458 = loc(fused[#loc277, #loc278])
#loc459 = loc(fused[#loc280, #loc281])
#loc460 = loc(fused[#loc282, #loc283])
#loc461 = loc(fused[#loc284, #loc281])
#loc462 = loc(fused[#loc287, #loc288])
#loc463 = loc(fused[#loc289, #loc290])
#loc464 = loc(fused[#loc291, #loc288])
#loc465 = loc(fused[#loc295, #loc296])
#loc466 = loc(fused[#loc298, #loc296])
#loc467 = loc(fused[#loc299, #loc300])
#loc468 = loc(fused[#loc301, #loc302])
#loc469 = loc(fused[#loc303, #loc300])
#loc470 = loc(fused[#loc304, #loc305])
#loc471 = loc(fused[#loc307, #loc308])
#loc472 = loc(fused[#loc306, #loc309])
#loc473 = loc(fused[#loc310, #loc311, #loc312, #loc305])
#loc474 = loc(fused[#loc313, #loc314])
#loc475 = loc(fused[#loc320, #loc321])
#loc476 = loc(fused[#loc322, #loc323])
#loc477 = loc(fused[#loc325, #loc324])
#loc478 = loc(fused[#loc326, #loc327])
#loc479 = loc(fused[#loc329, #loc327])
#loc480 = loc(fused[#loc331, #loc330])
#loc481 = loc(fused[#loc333, #loc334])
#loc482 = loc(fused[#loc336, #loc334])
#loc483 = loc(fused[#loc337, #loc338])
#loc484 = loc(fused[#loc339, #loc340])
#loc485 = loc(fused[#loc341, #loc338])
#loc486 = loc(fused[#loc342, #loc343])
