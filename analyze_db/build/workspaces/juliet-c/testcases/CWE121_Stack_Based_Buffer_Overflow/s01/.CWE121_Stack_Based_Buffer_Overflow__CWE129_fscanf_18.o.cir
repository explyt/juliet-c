!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc153)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc154)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc155)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc156)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc10)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc158)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc159)
    %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc160)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc20)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    cir.goto "source" loc(#loc162)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc24)
    %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc25)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc154)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc26)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc25)
    cir.goto "sink" loc(#loc163)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc29)
    %11 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc160)
    cir.store %11, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc160)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc33)
      %14 = cir.cmp(ge, %12, %13) : !s32i, !cir.bool loc(#loc165)
      cir.if %14 {
        %15 = cir.const #cir.int<1> : !s32i loc(#loc37)
        %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
        %17 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc39)
        %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc39)
        cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc167)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc42)
          cir.store %19, %1 : !s32i, !cir.ptr<!s32i> loc(#loc169)
          cir.for : cond {
            %20 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc44)
            %21 = cir.const #cir.int<10> : !s32i loc(#loc45)
            %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc170)
            cir.condition(%22) loc(#loc46)
          } body {
            cir.scope {
              %20 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc48)
              %21 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc49)
              %22 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc49)
              %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc49)
              cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc50)
            } loc(#loc171)
            cir.yield loc(#loc41)
          } step {
            %20 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc51)
            %21 = cir.unary(inc, %20) nsw : !s32i, !s32i loc(#loc52)
            cir.store %21, %1 : !s32i, !cir.ptr<!s32i> loc(#loc172)
            cir.yield loc(#loc168)
          } loc(#loc168)
        } loc(#loc168)
      } else {
        %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc10)
        %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc10)
        cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc53)
      } loc(#loc166)
    } loc(#loc164)
    cir.return loc(#loc12)
  } loc(#loc157)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc174)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc56)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc175)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc58)
    cir.return loc(#loc55)
  } loc(#loc173)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc60)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc177)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc178)
    %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc179)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc69)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc70)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    cir.goto "source" loc(#loc181)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc74)
    %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc75)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc154)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc76)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc77)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc77)
    %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc75)
    cir.goto "sink" loc(#loc182)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc80)
    %11 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc179)
    cir.store %11, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc179)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc83)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc84)
      %14 = cir.cmp(ge, %12, %13) : !s32i, !cir.bool loc(#loc184)
      %15 = cir.ternary(%14, true {
        %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
        %17 = cir.const #cir.int<10> : !s32i loc(#loc87)
        %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc185)
        %19 = cir.ternary(%18, true {
          %20 = cir.const #true loc(#loc85)
          cir.yield %20 : !cir.bool loc(#loc85)
        }, false {
          %20 = cir.const #false loc(#loc85)
          cir.yield %20 : !cir.bool loc(#loc85)
        }) : (!cir.bool) -> !cir.bool loc(#loc85)
        cir.yield %19 : !cir.bool loc(#loc85)
      }, false {
        %16 = cir.const #false loc(#loc85)
        cir.yield %16 : !cir.bool loc(#loc85)
      }) : (!cir.bool) -> !cir.bool loc(#loc85)
      cir.if %15 {
        %16 = cir.const #cir.int<1> : !s32i loc(#loc92)
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
        %18 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc94)
        %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc94)
        cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc187)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc97)
          cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc189)
          cir.for : cond {
            %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc99)
            %22 = cir.const #cir.int<10> : !s32i loc(#loc100)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc190)
            cir.condition(%23) loc(#loc101)
          } body {
            cir.scope {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc103)
              %22 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc104)
              %23 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc104)
              %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc104)
              cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc105)
            } loc(#loc191)
            cir.yield loc(#loc96)
          } step {
            %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc106)
            %22 = cir.unary(inc, %21) nsw : !s32i, !s32i loc(#loc107)
            cir.store %22, %1 : !s32i, !cir.ptr<!s32i> loc(#loc192)
            cir.yield loc(#loc188)
          } loc(#loc188)
        } loc(#loc188)
      } else {
        %16 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc60)
        %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc60)
        cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc108)
      } loc(#loc186)
    } loc(#loc183)
    cir.return loc(#loc62)
  } loc(#loc176)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc194)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc195)
    %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc196)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc118)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    cir.goto "source" loc(#loc198)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc122)
    %5 = cir.const #cir.int<7> : !s32i loc(#loc123)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    cir.goto "sink" loc(#loc200)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc127)
    %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc196)
    cir.store %6, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc196)
    cir.scope {
      %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc130)
      %8 = cir.const #cir.int<0> : !s32i loc(#loc131)
      %9 = cir.cmp(ge, %7, %8) : !s32i, !cir.bool loc(#loc202)
      cir.if %9 {
        %10 = cir.const #cir.int<1> : !s32i loc(#loc135)
        %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc136)
        %12 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc137)
        %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc137)
        cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc204)
        cir.scope {
          %14 = cir.const #cir.int<0> : !s32i loc(#loc140)
          cir.store %14, %1 : !s32i, !cir.ptr<!s32i> loc(#loc206)
          cir.for : cond {
            %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc142)
            %16 = cir.const #cir.int<10> : !s32i loc(#loc143)
            %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc207)
            cir.condition(%17) loc(#loc144)
          } body {
            cir.scope {
              %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc146)
              %16 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc147)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc147)
              %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc147)
              cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc148)
            } loc(#loc208)
            cir.yield loc(#loc139)
          } step {
            %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc149)
            %16 = cir.unary(inc, %15) nsw : !s32i, !s32i loc(#loc150)
            cir.store %16, %1 : !s32i, !cir.ptr<!s32i> loc(#loc209)
            cir.yield loc(#loc205)
          } loc(#loc205)
        } loc(#loc205)
      } else {
        %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc151)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc151)
        cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc152)
      } loc(#loc203)
    } loc(#loc201)
    cir.return loc(#loc110)
  } loc(#loc193)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":30:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":49:23)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":22:1)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":52:1)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":24:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":24:9)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":34:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":34:13)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":35:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":35:30)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":26:13)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":26:12)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":26:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":27:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":27:10)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":28:1)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":30:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":30:12)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":31:5)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":31:10)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":32:1)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":38:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":50:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":38:13)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":38:21)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":39:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":46:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":48:9)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":40:28)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":40:20)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":40:13)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":42:13)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":45:13)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":42:21)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":42:17)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":42:24)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":42:28)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":42:26)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":43:13)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":44:37)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":44:30)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":44:17)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":42:33)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":42:32)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":49:13)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":124:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":128:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":126:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":126:13)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":127:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":127:13)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":85:23)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":59:1)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":88:1)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":61:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":61:9)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":71:9)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":71:13)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":72:9)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":72:30)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":63:13)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":63:12)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":63:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":64:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":64:10)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":65:1)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":67:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":67:12)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":67:19)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":68:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":68:10)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":69:1)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":74:9)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":86:9)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":74:13)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":74:21)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":74:23)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":74:26)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":74:34)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":74:36)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":75:9)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":82:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":84:9)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":76:28)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":76:20)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":76:13)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":78:13)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":81:13)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":78:21)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":78:17)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":78:24)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":78:28)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":78:26)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":79:13)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":80:37)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":80:30)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":80:17)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":78:33)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":78:32)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":85:13)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":91:1)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":122:1)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":93:5)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":93:9)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":104:9)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":104:13)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":105:9)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":105:30)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":95:13)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":95:12)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":95:5)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":96:5)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":96:10)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":97:1)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":100:12)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":100:5)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":101:5)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":101:10)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":102:1)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":108:9)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":120:9)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":108:13)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":108:21)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":109:9)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":116:9)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":118:9)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":110:28)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":110:20)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":110:13)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":112:13)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":115:13)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":112:21)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":112:17)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":112:24)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":112:28)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":112:26)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":113:13)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":114:37)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":114:30)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":114:17)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":112:33)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":112:32)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":119:23)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c":119:13)
#loc153 = loc(fused[#loc1, #loc2])
#loc154 = loc(fused[#loc3, #loc4])
#loc155 = loc(fused[#loc6, #loc7])
#loc156 = loc(fused[#loc8, #loc9])
#loc157 = loc(fused[#loc11, #loc12])
#loc158 = loc(fused[#loc13, #loc14])
#loc159 = loc(fused[#loc15, #loc16])
#loc160 = loc(fused[#loc17, #loc18])
#loc161 = loc(fused[#loc21, #loc19])
#loc162 = loc(fused[#loc22, #loc23])
#loc163 = loc(fused[#loc27, #loc28])
#loc164 = loc(fused[#loc30, #loc31])
#loc165 = loc(fused[#loc32, #loc33])
#loc166 = loc(fused[#loc34, #loc35, #loc36, #loc31])
#loc167 = loc(fused[#loc39, #loc37])
#loc168 = loc(fused[#loc40, #loc41])
#loc169 = loc(fused[#loc43, #loc42])
#loc170 = loc(fused[#loc44, #loc45])
#loc171 = loc(fused[#loc47, #loc41])
#loc172 = loc(fused[#loc52, #loc51])
#loc173 = loc(fused[#loc54, #loc55])
#loc174 = loc(fused[#loc56, #loc57])
#loc175 = loc(fused[#loc58, #loc59])
#loc176 = loc(fused[#loc61, #loc62])
#loc177 = loc(fused[#loc63, #loc64])
#loc178 = loc(fused[#loc65, #loc66])
#loc179 = loc(fused[#loc67, #loc68])
#loc180 = loc(fused[#loc71, #loc69])
#loc181 = loc(fused[#loc72, #loc73])
#loc182 = loc(fused[#loc78, #loc79])
#loc183 = loc(fused[#loc81, #loc82])
#loc184 = loc(fused[#loc83, #loc84])
#loc185 = loc(fused[#loc86, #loc88])
#loc186 = loc(fused[#loc89, #loc90, #loc91, #loc82])
#loc187 = loc(fused[#loc94, #loc92])
#loc188 = loc(fused[#loc95, #loc96])
#loc189 = loc(fused[#loc98, #loc97])
#loc190 = loc(fused[#loc99, #loc100])
#loc191 = loc(fused[#loc102, #loc96])
#loc192 = loc(fused[#loc107, #loc106])
#loc193 = loc(fused[#loc109, #loc110])
#loc194 = loc(fused[#loc111, #loc112])
#loc195 = loc(fused[#loc113, #loc114])
#loc196 = loc(fused[#loc115, #loc116])
#loc197 = loc(fused[#loc119, #loc117])
#loc198 = loc(fused[#loc120, #loc121])
#loc199 = loc(fused[#loc124, #loc123])
#loc200 = loc(fused[#loc125, #loc126])
#loc201 = loc(fused[#loc128, #loc129])
#loc202 = loc(fused[#loc130, #loc131])
#loc203 = loc(fused[#loc132, #loc133, #loc134, #loc129])
#loc204 = loc(fused[#loc137, #loc135])
#loc205 = loc(fused[#loc138, #loc139])
#loc206 = loc(fused[#loc141, #loc140])
#loc207 = loc(fused[#loc142, #loc143])
#loc208 = loc(fused[#loc145, #loc139])
#loc209 = loc(fused[#loc150, #loc149])
