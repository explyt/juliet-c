!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc103)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc104)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc105)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc107)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc108)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc12)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc12)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc12)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc12)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc109)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc12)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc108)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc14)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc14)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc14)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc14)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc14)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc14)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc14)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc109)
    cir.scope {
      %17 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc111)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc111)
      %19 = cir.call %18() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc17)
      %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc17)
      cir.if %20 {
        %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc22)
        cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc113)
        %22 = cir.const #cir.int<0> : !s32i loc(#loc24)
        %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc24)
        %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
        %25 = cir.const #cir.int<0> : !s32i loc(#loc26)
        %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc27)
        cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc114)
      } else {
        %21 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
        cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc115)
        %22 = cir.const #cir.int<0> : !s32i loc(#loc30)
        %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc30)
        %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
        %25 = cir.const #cir.int<0> : !s32i loc(#loc32)
        %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc33)
        cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc116)
      } loc(#loc112)
    } loc(#loc110)
    cir.scope {
      %17 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc118)
      %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc38)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc38)
      %20 = cir.const #cir.int<67> : !s32i loc(#loc39)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc40)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc41)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc40)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc40)
      cir.libc.memset %24 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc119)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc44)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc44)
      %27 = cir.const #cir.int<100> : !s32i loc(#loc45)
      %28 = cir.const #cir.int<1> : !s32i loc(#loc46)
      %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc45)
      %30 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc47)
      %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc47)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc120)
      %32 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc48)
      %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
      %34 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc50)
      %35 = cir.call @strcat(%33, %34) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc48)
      %36 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
      cir.call @printLine(%36) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    } loc(#loc117)
    cir.return loc(#loc8)
  } loc(#loc106)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc122)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc55)
    cir.return loc(#loc54)
  } loc(#loc121)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc124)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc125)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc62)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc62)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc62)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc62)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc62)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc126)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc62)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc62)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc125)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc64)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc64)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc64)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc64)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc64)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc64)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc64)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc126)
    cir.scope {
      %17 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc128)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc128)
      %19 = cir.call %18() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc67)
      %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc67)
      cir.if %20 {
        %21 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc72)
        cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc130)
        %22 = cir.const #cir.int<0> : !s32i loc(#loc74)
        %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc74)
        %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
        %25 = cir.const #cir.int<0> : !s32i loc(#loc76)
        %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc77)
        cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc131)
      } else {
        %21 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
        cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc132)
        %22 = cir.const #cir.int<0> : !s32i loc(#loc80)
        %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc80)
        %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc81)
        %25 = cir.const #cir.int<0> : !s32i loc(#loc82)
        %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc83)
        cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc133)
      } loc(#loc129)
    } loc(#loc127)
    cir.scope {
      %17 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc135)
      %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc88)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc88)
      %20 = cir.const #cir.int<67> : !s32i loc(#loc89)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc90)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc91)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc90)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc90)
      cir.libc.memset %24 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc136)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc94)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc94)
      %27 = cir.const #cir.int<100> : !s32i loc(#loc95)
      %28 = cir.const #cir.int<1> : !s32i loc(#loc96)
      %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc95)
      %30 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc97)
      %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc97)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc137)
      %32 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc98)
      %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc99)
      %34 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc100)
      %35 = cir.call @strcat(%33, %34) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc98)
      %36 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
      cir.call @printLine(%36) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    } loc(#loc134)
    cir.return loc(#loc58)
  } loc(#loc123)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/string.h":149:1)
#loc4 = loc("/usr/include/string.h":150:14)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":23:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":49:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":25:12)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":26:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":26:36)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":27:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":27:37)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":28:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":40:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":28:8)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":28:33)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":29:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":34:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":36:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":32:16)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":32:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":33:19)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":33:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":33:14)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":33:15)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":38:16)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":38:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":39:19)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":39:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":39:14)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":39:15)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":41:5)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":48:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":42:9)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":42:24)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":43:16)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":43:24)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":43:29)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":43:33)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":43:9)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":43:34)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":44:25)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":44:16)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":44:20)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":44:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":46:9)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":46:16)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":46:22)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":47:19)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":47:9)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":84:1)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":87:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":86:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":86:13)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":57:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":82:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":59:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":59:12)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":60:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":60:36)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":61:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":61:37)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":62:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":73:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":62:8)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":62:33)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":63:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":67:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":69:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":65:16)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":65:9)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":66:19)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":66:9)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":66:14)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":66:15)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":71:16)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":71:9)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":72:19)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":72:9)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":72:14)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":72:15)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":74:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":81:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":75:9)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":75:24)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":76:16)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":76:24)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":76:29)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":76:33)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":76:9)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":76:34)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":77:25)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":77:16)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":77:20)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":77:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":79:9)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":79:16)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":79:22)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":80:19)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c":80:9)
#loc103 = loc(fused[#loc1, #loc2])
#loc104 = loc(fused[#loc3, #loc4])
#loc105 = loc(fused[#loc5, #loc6])
#loc106 = loc(fused[#loc7, #loc8])
#loc107 = loc(fused[#loc9, #loc10])
#loc108 = loc(fused[#loc11, #loc12])
#loc109 = loc(fused[#loc13, #loc14])
#loc110 = loc(fused[#loc15, #loc16])
#loc111 = loc(fused[#loc17, #loc18])
#loc112 = loc(fused[#loc19, #loc20, #loc21, #loc16])
#loc113 = loc(fused[#loc23, #loc22])
#loc114 = loc(fused[#loc25, #loc24])
#loc115 = loc(fused[#loc29, #loc28])
#loc116 = loc(fused[#loc31, #loc30])
#loc117 = loc(fused[#loc34, #loc35])
#loc118 = loc(fused[#loc36, #loc37])
#loc119 = loc(fused[#loc42, #loc43])
#loc120 = loc(fused[#loc47, #loc44])
#loc121 = loc(fused[#loc53, #loc54])
#loc122 = loc(fused[#loc55, #loc56])
#loc123 = loc(fused[#loc57, #loc58])
#loc124 = loc(fused[#loc59, #loc60])
#loc125 = loc(fused[#loc61, #loc62])
#loc126 = loc(fused[#loc63, #loc64])
#loc127 = loc(fused[#loc65, #loc66])
#loc128 = loc(fused[#loc67, #loc68])
#loc129 = loc(fused[#loc69, #loc70, #loc71, #loc66])
#loc130 = loc(fused[#loc73, #loc72])
#loc131 = loc(fused[#loc75, #loc74])
#loc132 = loc(fused[#loc79, #loc78])
#loc133 = loc(fused[#loc81, #loc80])
#loc134 = loc(fused[#loc84, #loc85])
#loc135 = loc(fused[#loc86, #loc87])
#loc136 = loc(fused[#loc92, #loc93])
#loc137 = loc(fused[#loc97, #loc94])
