!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc176 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":275:10)
#loc177 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":275:14)
#loc178 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":275:20)
#loc179 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":275:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc435 = loc(fused[#loc176, #loc177])
#loc436 = loc(fused[#loc178, #loc179])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_listen_socket_multiply_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc367)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc368)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc369)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc370)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc371)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc372)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc373)
  cir.func private @close(!s32i) -> !s32i loc(#loc374)
  cir.func private @printIntLine(!s32i) loc(#loc375)
  cir.func no_proto @CWE191_Integer_Underflow__int_listen_socket_multiply_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc377)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc23)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc378)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc27)
        cir.condition(%3) loc(#loc27)
      } do {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc381)
          %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc382)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc383)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc384)
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc385)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc35)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc35)
          cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc383)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc37)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc37)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc384)
          cir.scope {
            cir.do {
              %11 = cir.const #cir.int<2> : !s32i loc(#loc42)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc43)
              %13 = cir.const #cir.int<6> : !s32i loc(#loc44)
              %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc45)
              cir.store %14, %4 : !s32i, !cir.ptr<!s32i> loc(#loc387)
              cir.scope {
                %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc50)
                %57 = cir.const #cir.int<1> : !s32i loc(#loc51)
                %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc51)
                %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc389)
                cir.if %59 {
                  cir.break loc(#loc53)
                } loc(#loc390)
              } loc(#loc388)
              %15 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc391)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc56)
              %17 = cir.const #cir.int<16> : !u64i loc(#loc392)
              cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc393)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc61)
              %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc61)
              %20 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc62)
              cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc394)
              %21 = cir.const #cir.int<0> : !s32i loc(#loc64)
              %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc64)
              %23 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc65)
              %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc66)
              cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc395)
              %25 = cir.const #cir.int<27015> : !s32i loc(#loc68)
              %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc68)
              %27 = cir.call @htons(%26) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc69)
              %28 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
              cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc396)
              cir.scope {
                %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc75)
                %57 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc398)
                %58 = cir.const #cir.int<16> : !u64i loc(#loc399)
                %59 = cir.cast(integral, %58 : !u64i), !u32i loc(#loc399)
                %60 = cir.call @bind(%56, %57, %59) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc80)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc81)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc81)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc400)
                cir.if %63 {
                  cir.break loc(#loc83)
                } loc(#loc401)
              } loc(#loc397)
              cir.scope {
                %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc86)
                %57 = cir.const #cir.int<5> : !s32i loc(#loc87)
                %58 = cir.call @listen(%56, %57) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc88)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc89)
                %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc89)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc403)
                cir.if %61 {
                  cir.break loc(#loc91)
                } loc(#loc404)
              } loc(#loc402)
              %29 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc92)
              %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc93)
              %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc94)
              %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc95)
              cir.store %32, %5 : !s32i, !cir.ptr<!s32i> loc(#loc405)
              cir.scope {
                %56 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc100)
                %57 = cir.const #cir.int<1> : !s32i loc(#loc101)
                %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc101)
                %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc407)
                cir.if %59 {
                  cir.break loc(#loc103)
                } loc(#loc408)
              } loc(#loc406)
              %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc104)
              %34 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc105)
              %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc105)
              %36 = cir.const #cir.int<3> : !s32i loc(#loc106)
              %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc106)
              %38 = cir.const #cir.int<4> : !u64i loc(#loc106)
              %39 = cir.binop(mul, %37, %38) : !u64i loc(#loc106)
              %40 = cir.const #cir.int<2> : !s32i loc(#loc106)
              %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc106)
              %42 = cir.binop(add, %39, %41) : !u64i loc(#loc106)
              %43 = cir.const #cir.int<1> : !s32i loc(#loc107)
              %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc107)
              %45 = cir.binop(sub, %42, %44) : !u64i loc(#loc409)
              %46 = cir.const #cir.int<0> : !s32i loc(#loc108)
              %47 = cir.call @recv(%33, %35, %45, %46) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc109)
              %48 = cir.cast(integral, %47 : !s64i), !s32i loc(#loc109)
              cir.store %48, %2 : !s32i, !cir.ptr<!s32i> loc(#loc410)
              cir.scope {
                %56 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc114)
                %57 = cir.const #cir.int<1> : !s32i loc(#loc115)
                %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc115)
                %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc412)
                %60 = cir.ternary(%59, true {
                  %61 = cir.const #true loc(#loc116)
                  cir.yield %61 : !cir.bool loc(#loc116)
                }, false {
                  %61 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc117)
                  %62 = cir.const #cir.int<0> : !s32i loc(#loc118)
                  %63 = cir.cmp(eq, %61, %62) : !s32i, !cir.bool loc(#loc413)
                  %64 = cir.ternary(%63, true {
                    %65 = cir.const #true loc(#loc116)
                    cir.yield %65 : !cir.bool loc(#loc116)
                  }, false {
                    %65 = cir.const #false loc(#loc116)
                    cir.yield %65 : !cir.bool loc(#loc116)
                  }) : (!cir.bool) -> !cir.bool loc(#loc116)
                  cir.yield %64 : !cir.bool loc(#loc116)
                }) : (!cir.bool) -> !cir.bool loc(#loc116)
                cir.if %60 {
                  cir.break loc(#loc120)
                } loc(#loc414)
              } loc(#loc411)
              %49 = cir.const #cir.int<0> : !s32i loc(#loc121)
              %50 = cir.cast(integral, %49 : !s32i), !s8i loc(#loc121)
              %51 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc122)
              %52 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc123)
              %53 = cir.ptr_stride(%52 : !cir.ptr<!s8i>, %51 : !s32i), !cir.ptr<!s8i> loc(#loc123)
              cir.store %50, %53 : !s8i, !cir.ptr<!s8i> loc(#loc415)
              %54 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc124)
              %55 = cir.call @atoi(%54) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc125)
              cir.store %55, %0 : !s32i, !cir.ptr<!s32i> loc(#loc416)
              cir.yield loc(#loc41)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc128)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc128)
              cir.condition(%12) loc(#loc128)
            } loc(#loc386)
          } loc(#loc386)
          cir.scope {
            %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc131)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc132)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc132)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc418)
            cir.if %14 {
              %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc134)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc135)
            } loc(#loc419)
          } loc(#loc417)
          cir.scope {
            %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc138)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc139)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc139)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc421)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc141)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc142)
            } loc(#loc422)
          } loc(#loc420)
        } loc(#loc380)
        cir.break loc(#loc143)
      } loc(#loc379)
    } loc(#loc379)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc146)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc146)
        cir.condition(%3) loc(#loc146)
      } do {
        cir.scope {
          %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc149)
          %3 = cir.const #cir.int<0> : !s32i loc(#loc150)
          %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc425)
          cir.if %4 {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc427)
            %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc154)
            %7 = cir.const #cir.int<2> : !s32i loc(#loc153)
            %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc154)
            cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc427)
            %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc155)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc156)
          } loc(#loc426)
        } loc(#loc424)
        cir.break loc(#loc157)
      } loc(#loc423)
    } loc(#loc423)
    cir.return loc(#loc20)
  } loc(#loc376)
  cir.func no_proto @CWE191_Integer_Underflow__int_listen_socket_multiply_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc429)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc160)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc430)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc162)
    cir.return loc(#loc159)
  } loc(#loc428)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc431)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc432)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc433)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc170)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc171)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc172)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc173)
  cir.func @main(%arg0: !s32i loc(fused[#loc176, #loc177]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc178, #loc179])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc435)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc436)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc175)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc180)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc181)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc182)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc182)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc183)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc170)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc170)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc184)
    %8 = cir.get_global @CWE191_Integer_Underflow__int_listen_socket_multiply_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc437)
    cir.call @CWE191_Integer_Underflow__int_listen_socket_multiply_16_good() : () -> () loc(#loc185)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc171)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc171)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc187)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc172)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc172)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc188)
    %13 = cir.get_global @CWE191_Integer_Underflow__int_listen_socket_multiply_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc438)
    cir.call @CWE191_Integer_Underflow__int_listen_socket_multiply_16_bad() : () -> () loc(#loc189)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc173)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc173)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc191)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc192)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc439)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc439)
    cir.return %17 : !s32i loc(#loc439)
  } loc(#loc434)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc194)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc441)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc199)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc442)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc203)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc203)
        cir.condition(%3) loc(#loc203)
      } do {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc445)
          %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc446)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc447)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc448)
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc449)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc211)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc211)
          cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc447)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc213)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc213)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc448)
          cir.scope {
            cir.do {
              %11 = cir.const #cir.int<2> : !s32i loc(#loc218)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc219)
              %13 = cir.const #cir.int<6> : !s32i loc(#loc220)
              %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc221)
              cir.store %14, %4 : !s32i, !cir.ptr<!s32i> loc(#loc451)
              cir.scope {
                %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc226)
                %57 = cir.const #cir.int<1> : !s32i loc(#loc227)
                %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc227)
                %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc453)
                cir.if %59 {
                  cir.break loc(#loc229)
                } loc(#loc454)
              } loc(#loc452)
              %15 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc455)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc232)
              %17 = cir.const #cir.int<16> : !u64i loc(#loc456)
              cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc457)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc237)
              %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc237)
              %20 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc62)
              cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc458)
              %21 = cir.const #cir.int<0> : !s32i loc(#loc239)
              %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc239)
              %23 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc65)
              %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc66)
              cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc459)
              %25 = cir.const #cir.int<27015> : !s32i loc(#loc241)
              %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc241)
              %27 = cir.call @htons(%26) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc242)
              %28 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
              cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc460)
              cir.scope {
                %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc247)
                %57 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc462)
                %58 = cir.const #cir.int<16> : !u64i loc(#loc463)
                %59 = cir.cast(integral, %58 : !u64i), !u32i loc(#loc463)
                %60 = cir.call @bind(%56, %57, %59) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc252)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc253)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc253)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc464)
                cir.if %63 {
                  cir.break loc(#loc255)
                } loc(#loc465)
              } loc(#loc461)
              cir.scope {
                %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc258)
                %57 = cir.const #cir.int<5> : !s32i loc(#loc259)
                %58 = cir.call @listen(%56, %57) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc260)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc261)
                %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc261)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc467)
                cir.if %61 {
                  cir.break loc(#loc263)
                } loc(#loc468)
              } loc(#loc466)
              %29 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc264)
              %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc265)
              %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc266)
              %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc267)
              cir.store %32, %5 : !s32i, !cir.ptr<!s32i> loc(#loc469)
              cir.scope {
                %56 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc272)
                %57 = cir.const #cir.int<1> : !s32i loc(#loc273)
                %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc273)
                %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc471)
                cir.if %59 {
                  cir.break loc(#loc275)
                } loc(#loc472)
              } loc(#loc470)
              %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc276)
              %34 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc277)
              %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc277)
              %36 = cir.const #cir.int<3> : !s32i loc(#loc278)
              %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc278)
              %38 = cir.const #cir.int<4> : !u64i loc(#loc278)
              %39 = cir.binop(mul, %37, %38) : !u64i loc(#loc278)
              %40 = cir.const #cir.int<2> : !s32i loc(#loc278)
              %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc278)
              %42 = cir.binop(add, %39, %41) : !u64i loc(#loc278)
              %43 = cir.const #cir.int<1> : !s32i loc(#loc279)
              %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc279)
              %45 = cir.binop(sub, %42, %44) : !u64i loc(#loc473)
              %46 = cir.const #cir.int<0> : !s32i loc(#loc280)
              %47 = cir.call @recv(%33, %35, %45, %46) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc281)
              %48 = cir.cast(integral, %47 : !s64i), !s32i loc(#loc281)
              cir.store %48, %2 : !s32i, !cir.ptr<!s32i> loc(#loc474)
              cir.scope {
                %56 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc286)
                %57 = cir.const #cir.int<1> : !s32i loc(#loc287)
                %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc287)
                %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc476)
                %60 = cir.ternary(%59, true {
                  %61 = cir.const #true loc(#loc288)
                  cir.yield %61 : !cir.bool loc(#loc288)
                }, false {
                  %61 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc289)
                  %62 = cir.const #cir.int<0> : !s32i loc(#loc290)
                  %63 = cir.cmp(eq, %61, %62) : !s32i, !cir.bool loc(#loc477)
                  %64 = cir.ternary(%63, true {
                    %65 = cir.const #true loc(#loc288)
                    cir.yield %65 : !cir.bool loc(#loc288)
                  }, false {
                    %65 = cir.const #false loc(#loc288)
                    cir.yield %65 : !cir.bool loc(#loc288)
                  }) : (!cir.bool) -> !cir.bool loc(#loc288)
                  cir.yield %64 : !cir.bool loc(#loc288)
                }) : (!cir.bool) -> !cir.bool loc(#loc288)
                cir.if %60 {
                  cir.break loc(#loc292)
                } loc(#loc478)
              } loc(#loc475)
              %49 = cir.const #cir.int<0> : !s32i loc(#loc293)
              %50 = cir.cast(integral, %49 : !s32i), !s8i loc(#loc293)
              %51 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc294)
              %52 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc295)
              %53 = cir.ptr_stride(%52 : !cir.ptr<!s8i>, %51 : !s32i), !cir.ptr<!s8i> loc(#loc295)
              cir.store %50, %53 : !s8i, !cir.ptr<!s8i> loc(#loc479)
              %54 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc296)
              %55 = cir.call @atoi(%54) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc297)
              cir.store %55, %0 : !s32i, !cir.ptr<!s32i> loc(#loc480)
              cir.yield loc(#loc217)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc300)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc300)
              cir.condition(%12) loc(#loc300)
            } loc(#loc450)
          } loc(#loc450)
          cir.scope {
            %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc303)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc304)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc304)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc482)
            cir.if %14 {
              %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc306)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc307)
            } loc(#loc483)
          } loc(#loc481)
          cir.scope {
            %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc310)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc311)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc311)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc485)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc313)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc314)
            } loc(#loc486)
          } loc(#loc484)
        } loc(#loc444)
        cir.break loc(#loc315)
      } loc(#loc443)
    } loc(#loc443)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc318)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc318)
        cir.condition(%3) loc(#loc318)
      } do {
        cir.scope {
          %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc321)
          %3 = cir.const #cir.int<0> : !s32i loc(#loc322)
          %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc489)
          cir.if %4 {
            cir.scope {
              %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc326)
              %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc327)
              %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc327)
              %8 = cir.const #cir.int<1> : !s32i loc(#loc327)
              %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc327)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc328)
              %11 = cir.binop(div, %9, %10) : !s32i loc(#loc492)
              %12 = cir.cmp(gt, %5, %11) : !s32i, !cir.bool loc(#loc493)
              cir.if %12 {
                %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc495)
                %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc335)
                %15 = cir.const #cir.int<2> : !s32i loc(#loc334)
                %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc335)
                cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc495)
                %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc336)
                cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc337)
              } else {
                %13 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc194)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc194)
                cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc338)
              } loc(#loc494)
            } loc(#loc491)
          } loc(#loc490)
        } loc(#loc488)
        cir.break loc(#loc339)
      } loc(#loc487)
    } loc(#loc487)
    cir.return loc(#loc196)
  } loc(#loc440)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc497)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc344)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc498)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc348)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc348)
        cir.condition(%3) loc(#loc348)
      } do {
        %2 = cir.const #cir.int<2> : !s32i loc(#loc349)
        %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc350)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc500)
        cir.break loc(#loc352)
      } loc(#loc499)
    } loc(#loc499)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc355)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc355)
        cir.condition(%3) loc(#loc355)
      } do {
        cir.scope {
          %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc358)
          %3 = cir.const #cir.int<0> : !s32i loc(#loc359)
          %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc503)
          cir.if %4 {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc505)
            %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc363)
            %7 = cir.const #cir.int<2> : !s32i loc(#loc362)
            %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc363)
            cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc505)
            %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc364)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc365)
          } loc(#loc504)
        } loc(#loc502)
        cir.break loc(#loc366)
      } loc(#loc501)
    } loc(#loc501)
    cir.return loc(#loc341)
  } loc(#loc496)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":145:1)
#loc12 = loc("/usr/include/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc19 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":44:1)
#loc20 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":132:1)
#loc21 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":46:5)
#loc22 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":46:9)
#loc23 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":48:12)
#loc24 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":48:5)
#loc25 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":49:5)
#loc26 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":121:5)
#loc27 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":49:11)
#loc28 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":51:9)
#loc29 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":119:9)
#loc30 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":56:13)
#loc31 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":56:17)
#loc32 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":57:13)
#loc33 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":57:32)
#loc34 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":58:13)
#loc35 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":58:35)
#loc36 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":59:13)
#loc37 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":59:35)
#loc38 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":60:13)
#loc39 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":60:45)
#loc40 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":61:13)
#loc41 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":104:21)
#loc42 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":71:39)
#loc43 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":71:48)
#loc44 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":71:61)
#loc45 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":71:32)
#loc46 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":71:17)
#loc47 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":71:72)
#loc48 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":72:17)
#loc49 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":75:17)
#loc50 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":72:21)
#loc51 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":72:37)
#loc52 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":73:17)
#loc53 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":74:21)
#loc54 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":76:24)
#loc55 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":76:25)
#loc56 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":76:34)
#loc57 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":76:37)
#loc58 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":76:51)
#loc59 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":76:17)
#loc60 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":76:52)
#loc61 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":77:38)
#loc62 = loc("/usr/include/netinet/in.h":249:5)
#loc63 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":77:17)
#loc64 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":78:43)
#loc65 = loc("/usr/include/netinet/in.h":251:20)
#loc66 = loc("/usr/include/netinet/in.h":33:15)
#loc67 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":78:17)
#loc68 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":79:42)
#loc69 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":79:36)
#loc70 = loc("/usr/include/netinet/in.h":250:15)
#loc71 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":79:17)
#loc72 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":79:50)
#loc73 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":80:17)
#loc74 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":83:17)
#loc75 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":80:26)
#loc76 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":80:58)
#loc77 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":80:59)
#loc78 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":80:68)
#loc79 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":80:82)
#loc80 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":80:21)
#loc81 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":80:88)
#loc82 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":81:17)
#loc83 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":82:21)
#loc84 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":84:17)
#loc85 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":87:17)
#loc86 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":84:28)
#loc87 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":84:42)
#loc88 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":84:21)
#loc89 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":84:61)
#loc90 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":85:17)
#loc91 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":86:21)
#loc92 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":88:39)
#loc93 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":88:53)
#loc94 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":88:59)
#loc95 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":88:32)
#loc96 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":88:17)
#loc97 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":88:63)
#loc98 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":89:17)
#loc99 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":92:17)
#loc100 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":89:21)
#loc101 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":89:37)
#loc102 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":90:17)
#loc103 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":91:21)
#loc104 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":94:35)
#loc105 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":94:49)
#loc106 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":94:62)
#loc107 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":94:80)
#loc108 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":94:83)
#loc109 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":94:30)
#loc110 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":94:17)
#loc111 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":94:84)
#loc112 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":95:17)
#loc113 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":98:17)
#loc114 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":95:21)
#loc115 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":95:35)
#loc116 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":95:48)
#loc117 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":95:51)
#loc118 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":95:65)
#loc119 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":96:17)
#loc120 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":97:21)
#loc121 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":100:43)
#loc122 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":100:29)
#loc123 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":100:17)
#loc124 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":102:29)
#loc125 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":102:24)
#loc126 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":102:17)
#loc127 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":102:40)
#loc128 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":104:20)
#loc129 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":105:13)
#loc130 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":108:13)
#loc131 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":105:17)
#loc132 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":105:33)
#loc133 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":106:13)
#loc134 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":107:30)
#loc135 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":107:17)
#loc136 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":109:13)
#loc137 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":112:13)
#loc138 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":109:17)
#loc139 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":109:33)
#loc140 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":110:13)
#loc141 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":111:30)
#loc142 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":111:17)
#loc143 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":120:9)
#loc144 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":122:5)
#loc145 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":131:5)
#loc146 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":122:11)
#loc147 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":124:9)
#loc148 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":129:9)
#loc149 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":124:12)
#loc150 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":124:19)
#loc151 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":125:9)
#loc152 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":127:13)
#loc153 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":127:33)
#loc154 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":127:26)
#loc155 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":128:26)
#loc156 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":128:13)
#loc157 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":130:9)
#loc158 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":260:1)
#loc159 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":264:1)
#loc160 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":262:5)
#loc161 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":262:13)
#loc162 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":263:5)
#loc163 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":263:13)
#loc164 = loc("/usr/include/stdlib.h":575:1)
#loc165 = loc("/usr/include/stdlib.h":575:41)
#loc166 = loc("/usr/include/time.h":76:1)
#loc167 = loc("/usr/include/time.h":76:38)
#loc168 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc169 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc170 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":280:15)
#loc171 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":282:15)
#loc172 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":285:15)
#loc173 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":287:15)
#loc174 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":275:1)
#loc175 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":290:1)
#loc180 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":276:1)
#loc181 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":278:27)
#loc182 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":278:22)
#loc183 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":278:5)
#loc184 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":280:5)
#loc185 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":281:5)
#loc186 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":281:66)
#loc187 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":282:5)
#loc188 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":285:5)
#loc189 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":286:5)
#loc190 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":286:65)
#loc191 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":287:5)
#loc192 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":289:12)
#loc193 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":289:5)
#loc194 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":229:27)
#loc195 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":139:1)
#loc196 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":234:1)
#loc197 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":141:5)
#loc198 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":141:9)
#loc199 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":143:12)
#loc200 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":143:5)
#loc201 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":144:5)
#loc202 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":216:5)
#loc203 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":144:11)
#loc204 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":146:9)
#loc205 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":214:9)
#loc206 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":151:13)
#loc207 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":151:17)
#loc208 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":152:13)
#loc209 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":152:32)
#loc210 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":153:13)
#loc211 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":153:35)
#loc212 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":154:13)
#loc213 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":154:35)
#loc214 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":155:13)
#loc215 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":155:45)
#loc216 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":156:13)
#loc217 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":199:21)
#loc218 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":166:39)
#loc219 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":166:48)
#loc220 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":166:61)
#loc221 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":166:32)
#loc222 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":166:17)
#loc223 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":166:72)
#loc224 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":167:17)
#loc225 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":170:17)
#loc226 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":167:21)
#loc227 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":167:37)
#loc228 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":168:17)
#loc229 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":169:21)
#loc230 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":171:24)
#loc231 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":171:25)
#loc232 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":171:34)
#loc233 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":171:37)
#loc234 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":171:51)
#loc235 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":171:17)
#loc236 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":171:52)
#loc237 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":172:38)
#loc238 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":172:17)
#loc239 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":173:43)
#loc240 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":173:17)
#loc241 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":174:42)
#loc242 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":174:36)
#loc243 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":174:17)
#loc244 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":174:50)
#loc245 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":175:17)
#loc246 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":178:17)
#loc247 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":175:26)
#loc248 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":175:58)
#loc249 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":175:59)
#loc250 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":175:68)
#loc251 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":175:82)
#loc252 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":175:21)
#loc253 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":175:88)
#loc254 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":176:17)
#loc255 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":177:21)
#loc256 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":179:17)
#loc257 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":182:17)
#loc258 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":179:28)
#loc259 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":179:42)
#loc260 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":179:21)
#loc261 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":179:61)
#loc262 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":180:17)
#loc263 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":181:21)
#loc264 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":183:39)
#loc265 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":183:53)
#loc266 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":183:59)
#loc267 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":183:32)
#loc268 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":183:17)
#loc269 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":183:63)
#loc270 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":184:17)
#loc271 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":187:17)
#loc272 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":184:21)
#loc273 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":184:37)
#loc274 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":185:17)
#loc275 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":186:21)
#loc276 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":189:35)
#loc277 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":189:49)
#loc278 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":189:62)
#loc279 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":189:80)
#loc280 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":189:83)
#loc281 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":189:30)
#loc282 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":189:17)
#loc283 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":189:84)
#loc284 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":190:17)
#loc285 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":193:17)
#loc286 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":190:21)
#loc287 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":190:35)
#loc288 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":190:48)
#loc289 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":190:51)
#loc290 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":190:65)
#loc291 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":191:17)
#loc292 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":192:21)
#loc293 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":195:43)
#loc294 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":195:29)
#loc295 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":195:17)
#loc296 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":197:29)
#loc297 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":197:24)
#loc298 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":197:17)
#loc299 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":197:40)
#loc300 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":199:20)
#loc301 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":200:13)
#loc302 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":203:13)
#loc303 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":200:17)
#loc304 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":200:33)
#loc305 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":201:13)
#loc306 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":202:30)
#loc307 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":202:17)
#loc308 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":204:13)
#loc309 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":207:13)
#loc310 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":204:17)
#loc311 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":204:33)
#loc312 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":205:13)
#loc313 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":206:30)
#loc314 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":206:17)
#loc315 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":215:9)
#loc316 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":217:5)
#loc317 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":233:5)
#loc318 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":217:11)
#loc319 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":219:9)
#loc320 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":231:9)
#loc321 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":219:12)
#loc322 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":219:19)
#loc323 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":220:9)
#loc324 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":222:13)
#loc325 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":230:13)
#loc326 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":222:17)
#loc327 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":222:25)
#loc328 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":222:33)
#loc329 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":222:34)
#loc330 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":223:13)
#loc331 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":226:13)
#loc332 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":228:13)
#loc333 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":224:17)
#loc334 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":224:37)
#loc335 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":224:30)
#loc336 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":225:30)
#loc337 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":225:17)
#loc338 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":229:17)
#loc339 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":232:9)
#loc340 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":237:1)
#loc341 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":258:1)
#loc342 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":239:5)
#loc343 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":239:9)
#loc344 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":241:12)
#loc345 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":241:5)
#loc346 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":242:5)
#loc347 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":247:5)
#loc348 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":242:11)
#loc349 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":245:17)
#loc350 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":245:16)
#loc351 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":245:9)
#loc352 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":246:9)
#loc353 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":248:5)
#loc354 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":257:5)
#loc355 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":248:11)
#loc356 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":250:9)
#loc357 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":255:9)
#loc358 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":250:12)
#loc359 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":250:19)
#loc360 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":251:9)
#loc361 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":253:13)
#loc362 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":253:33)
#loc363 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":253:26)
#loc364 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":254:26)
#loc365 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":254:13)
#loc366 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_16.c":256:9)
#loc367 = loc(fused[#loc1, #loc2])
#loc368 = loc(fused[#loc3, #loc4])
#loc369 = loc(fused[#loc5, #loc6])
#loc370 = loc(fused[#loc7, #loc8])
#loc371 = loc(fused[#loc9, #loc10])
#loc372 = loc(fused[#loc11, #loc12])
#loc373 = loc(fused[#loc13, #loc14])
#loc374 = loc(fused[#loc15, #loc16])
#loc375 = loc(fused[#loc17, #loc18])
#loc376 = loc(fused[#loc19, #loc20])
#loc377 = loc(fused[#loc21, #loc22])
#loc378 = loc(fused[#loc24, #loc23])
#loc379 = loc(fused[#loc25, #loc26])
#loc380 = loc(fused[#loc28, #loc29])
#loc381 = loc(fused[#loc30, #loc31])
#loc382 = loc(fused[#loc32, #loc33])
#loc383 = loc(fused[#loc34, #loc35])
#loc384 = loc(fused[#loc36, #loc37])
#loc385 = loc(fused[#loc38, #loc39])
#loc386 = loc(fused[#loc40, #loc41])
#loc387 = loc(fused[#loc46, #loc47])
#loc388 = loc(fused[#loc48, #loc49])
#loc389 = loc(fused[#loc50, #loc51])
#loc390 = loc(fused[#loc52, #loc49])
#loc391 = loc(fused[#loc54, #loc55])
#loc392 = loc(fused[#loc57, #loc58])
#loc393 = loc(fused[#loc59, #loc60])
#loc394 = loc(fused[#loc63, #loc61])
#loc395 = loc(fused[#loc67, #loc64])
#loc396 = loc(fused[#loc71, #loc72])
#loc397 = loc(fused[#loc73, #loc74])
#loc398 = loc(fused[#loc76, #loc77])
#loc399 = loc(fused[#loc78, #loc79])
#loc400 = loc(fused[#loc80, #loc81])
#loc401 = loc(fused[#loc82, #loc74])
#loc402 = loc(fused[#loc84, #loc85])
#loc403 = loc(fused[#loc88, #loc89])
#loc404 = loc(fused[#loc90, #loc85])
#loc405 = loc(fused[#loc96, #loc97])
#loc406 = loc(fused[#loc98, #loc99])
#loc407 = loc(fused[#loc100, #loc101])
#loc408 = loc(fused[#loc102, #loc99])
#loc409 = loc(fused[#loc106, #loc107])
#loc410 = loc(fused[#loc110, #loc111])
#loc411 = loc(fused[#loc112, #loc113])
#loc412 = loc(fused[#loc114, #loc115])
#loc413 = loc(fused[#loc117, #loc118])
#loc414 = loc(fused[#loc119, #loc113])
#loc415 = loc(fused[#loc123, #loc121])
#loc416 = loc(fused[#loc126, #loc127])
#loc417 = loc(fused[#loc129, #loc130])
#loc418 = loc(fused[#loc131, #loc132])
#loc419 = loc(fused[#loc133, #loc130])
#loc420 = loc(fused[#loc136, #loc137])
#loc421 = loc(fused[#loc138, #loc139])
#loc422 = loc(fused[#loc140, #loc137])
#loc423 = loc(fused[#loc144, #loc145])
#loc424 = loc(fused[#loc147, #loc148])
#loc425 = loc(fused[#loc149, #loc150])
#loc426 = loc(fused[#loc151, #loc148])
#loc427 = loc(fused[#loc152, #loc153])
#loc428 = loc(fused[#loc158, #loc159])
#loc429 = loc(fused[#loc160, #loc161])
#loc430 = loc(fused[#loc162, #loc163])
#loc431 = loc(fused[#loc164, #loc165])
#loc432 = loc(fused[#loc166, #loc167])
#loc433 = loc(fused[#loc168, #loc169])
#loc434 = loc(fused[#loc174, #loc175])
#loc437 = loc(fused[#loc185, #loc186])
#loc438 = loc(fused[#loc189, #loc190])
#loc439 = loc(fused[#loc193, #loc192])
#loc440 = loc(fused[#loc195, #loc196])
#loc441 = loc(fused[#loc197, #loc198])
#loc442 = loc(fused[#loc200, #loc199])
#loc443 = loc(fused[#loc201, #loc202])
#loc444 = loc(fused[#loc204, #loc205])
#loc445 = loc(fused[#loc206, #loc207])
#loc446 = loc(fused[#loc208, #loc209])
#loc447 = loc(fused[#loc210, #loc211])
#loc448 = loc(fused[#loc212, #loc213])
#loc449 = loc(fused[#loc214, #loc215])
#loc450 = loc(fused[#loc216, #loc217])
#loc451 = loc(fused[#loc222, #loc223])
#loc452 = loc(fused[#loc224, #loc225])
#loc453 = loc(fused[#loc226, #loc227])
#loc454 = loc(fused[#loc228, #loc225])
#loc455 = loc(fused[#loc230, #loc231])
#loc456 = loc(fused[#loc233, #loc234])
#loc457 = loc(fused[#loc235, #loc236])
#loc458 = loc(fused[#loc238, #loc237])
#loc459 = loc(fused[#loc240, #loc239])
#loc460 = loc(fused[#loc243, #loc244])
#loc461 = loc(fused[#loc245, #loc246])
#loc462 = loc(fused[#loc248, #loc249])
#loc463 = loc(fused[#loc250, #loc251])
#loc464 = loc(fused[#loc252, #loc253])
#loc465 = loc(fused[#loc254, #loc246])
#loc466 = loc(fused[#loc256, #loc257])
#loc467 = loc(fused[#loc260, #loc261])
#loc468 = loc(fused[#loc262, #loc257])
#loc469 = loc(fused[#loc268, #loc269])
#loc470 = loc(fused[#loc270, #loc271])
#loc471 = loc(fused[#loc272, #loc273])
#loc472 = loc(fused[#loc274, #loc271])
#loc473 = loc(fused[#loc278, #loc279])
#loc474 = loc(fused[#loc282, #loc283])
#loc475 = loc(fused[#loc284, #loc285])
#loc476 = loc(fused[#loc286, #loc287])
#loc477 = loc(fused[#loc289, #loc290])
#loc478 = loc(fused[#loc291, #loc285])
#loc479 = loc(fused[#loc295, #loc293])
#loc480 = loc(fused[#loc298, #loc299])
#loc481 = loc(fused[#loc301, #loc302])
#loc482 = loc(fused[#loc303, #loc304])
#loc483 = loc(fused[#loc305, #loc302])
#loc484 = loc(fused[#loc308, #loc309])
#loc485 = loc(fused[#loc310, #loc311])
#loc486 = loc(fused[#loc312, #loc309])
#loc487 = loc(fused[#loc316, #loc317])
#loc488 = loc(fused[#loc319, #loc320])
#loc489 = loc(fused[#loc321, #loc322])
#loc490 = loc(fused[#loc323, #loc320])
#loc491 = loc(fused[#loc324, #loc325])
#loc492 = loc(fused[#loc327, #loc328])
#loc493 = loc(fused[#loc326, #loc329])
#loc494 = loc(fused[#loc330, #loc331, #loc332, #loc325])
#loc495 = loc(fused[#loc333, #loc334])
#loc496 = loc(fused[#loc340, #loc341])
#loc497 = loc(fused[#loc342, #loc343])
#loc498 = loc(fused[#loc345, #loc344])
#loc499 = loc(fused[#loc346, #loc347])
#loc500 = loc(fused[#loc351, #loc349])
#loc501 = loc(fused[#loc353, #loc354])
#loc502 = loc(fused[#loc356, #loc357])
#loc503 = loc(fused[#loc358, #loc359])
#loc504 = loc(fused[#loc360, #loc357])
#loc505 = loc(fused[#loc361, #loc362])
