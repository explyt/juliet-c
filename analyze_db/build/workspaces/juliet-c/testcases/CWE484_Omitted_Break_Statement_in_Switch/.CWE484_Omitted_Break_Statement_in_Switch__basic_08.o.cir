!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE484_Omitted_Break_Statement_in_Switch/CWE484_Omitted_Break_Statement_in_Switch__basic_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc118)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc119)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc6)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"2\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc7)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Invalid Number\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE484_Omitted_Break_Statement_in_Switch__basic_08_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc122)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc13)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc13)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc125)
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %5 = cir.const #cir.int<3> : !s32i loc(#loc21)
          %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc126)
          cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc125)
          cir.scope {
            %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc24)
            cir.switch (%7 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc5)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc5)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc26)
                cir.yield loc(#loc25)
              } loc(#loc25)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc6)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc6)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc28)
                cir.break loc(#loc29)
              } loc(#loc27)
              cir.case(equal, [#cir.int<2> : !s32i]) {
                %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc7)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc7)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc31)
                cir.break loc(#loc32)
              } loc(#loc30)
              cir.case(default, []) {
                %8 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc8)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc8)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc34)
                cir.break loc(#loc35)
              } loc(#loc33)
              cir.yield loc(#loc22)
            } loc(#loc22)
          } loc(#loc127)
        } loc(#loc124)
      } loc(#loc123)
    } loc(#loc121)
    cir.return loc(#loc10)
  } loc(#loc120)
  cir.func no_proto @CWE484_Omitted_Break_Statement_in_Switch__basic_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc129)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc130)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    cir.return loc(#loc37)
  } loc(#loc128)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc43)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc44)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc132)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
    cir.return %2 : !s32i loc(#loc132)
  } loc(#loc131)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc46)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc135)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc51)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc51)
      cir.if %2 {
        %3 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc46)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc46)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc56)
      } else {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc138)
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
          %5 = cir.const #cir.int<3> : !s32i loc(#loc62)
          %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc139)
          cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc138)
          cir.scope {
            %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc65)
            cir.switch (%7 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc67)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc67)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc68)
                cir.break loc(#loc69)
              } loc(#loc66)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc71)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc71)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc72)
                cir.break loc(#loc73)
              } loc(#loc70)
              cir.case(equal, [#cir.int<2> : !s32i]) {
                %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc75)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc75)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc76)
                cir.break loc(#loc77)
              } loc(#loc74)
              cir.case(default, []) {
                %8 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc79)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc79)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc80)
                cir.break loc(#loc81)
              } loc(#loc78)
              cir.yield loc(#loc63)
            } loc(#loc63)
          } loc(#loc140)
        } loc(#loc137)
      } loc(#loc136)
    } loc(#loc134)
    cir.return loc(#loc48)
  } loc(#loc133)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc83)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc84)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc142)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc142)
    cir.return %2 : !s32i loc(#loc142)
  } loc(#loc141)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc145)
      %1 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc90)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc90)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc148)
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
          %5 = cir.const #cir.int<3> : !s32i loc(#loc98)
          %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc149)
          cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc148)
          cir.scope {
            %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc101)
            cir.switch (%7 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc103)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc103)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc104)
                cir.break loc(#loc105)
              } loc(#loc102)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc107)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc107)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc108)
                cir.break loc(#loc109)
              } loc(#loc106)
              cir.case(equal, [#cir.int<2> : !s32i]) {
                %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc111)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc111)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc112)
                cir.break loc(#loc113)
              } loc(#loc110)
              cir.case(default, []) {
                %8 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc115)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc115)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc116)
                cir.break loc(#loc117)
              } loc(#loc114)
              cir.yield loc(#loc99)
            } loc(#loc99)
          } loc(#loc150)
        } loc(#loc147)
      } loc(#loc146)
    } loc(#loc144)
    cir.return loc(#loc87)
  } loc(#loc143)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE484_Omitted_Break_Statement_in_Switch/CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":43:27)
#loc6 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":45:27)
#loc7 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":48:27)
#loc8 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":51:27)
#loc9 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":33:1)
#loc10 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":56:1)
#loc11 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":35:5)
#loc12 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":55:5)
#loc13 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":35:8)
#loc14 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":35:26)
#loc15 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":36:5)
#loc16 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":37:9)
#loc17 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":54:9)
#loc18 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":38:13)
#loc19 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":38:32)
#loc20 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":38:22)
#loc21 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":38:31)
#loc22 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":40:13)
#loc23 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":53:13)
#loc24 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":40:21)
#loc25 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":42:13)
#loc26 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":43:17)
#loc27 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":44:13)
#loc28 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":45:17)
#loc29 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":46:17)
#loc30 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":47:13)
#loc31 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":48:17)
#loc32 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":49:17)
#loc33 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":50:13)
#loc34 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":51:17)
#loc35 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":52:17)
#loc36 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":123:1)
#loc37 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":127:1)
#loc38 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":125:5)
#loc39 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":125:11)
#loc40 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":126:5)
#loc41 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":126:11)
#loc42 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":21:1)
#loc43 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":24:1)
#loc44 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":23:12)
#loc45 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":23:5)
#loc46 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":68:19)
#loc47 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":63:1)
#loc48 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":93:1)
#loc49 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":65:5)
#loc50 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":92:5)
#loc51 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":65:8)
#loc52 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":65:27)
#loc53 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":66:5)
#loc54 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":69:5)
#loc55 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":71:5)
#loc56 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":68:9)
#loc57 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":72:9)
#loc58 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":91:9)
#loc59 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":73:13)
#loc60 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":73:32)
#loc61 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":73:22)
#loc62 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":73:31)
#loc63 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":76:13)
#loc64 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":90:13)
#loc65 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":76:21)
#loc66 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":78:13)
#loc67 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":79:27)
#loc68 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":79:17)
#loc69 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":80:17)
#loc70 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":81:13)
#loc71 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":82:27)
#loc72 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":82:17)
#loc73 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":83:17)
#loc74 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":84:13)
#loc75 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":85:27)
#loc76 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":85:17)
#loc77 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":86:17)
#loc78 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":87:13)
#loc79 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":88:27)
#loc80 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":88:17)
#loc81 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":89:17)
#loc82 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":26:1)
#loc83 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":29:1)
#loc84 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":28:12)
#loc85 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":28:5)
#loc86 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":96:1)
#loc87 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":121:1)
#loc88 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":98:5)
#loc89 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":120:5)
#loc90 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":98:8)
#loc91 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":98:26)
#loc92 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":99:5)
#loc93 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":100:9)
#loc94 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":119:9)
#loc95 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":101:13)
#loc96 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":101:32)
#loc97 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":101:22)
#loc98 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":101:31)
#loc99 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":104:13)
#loc100 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":118:13)
#loc101 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":104:21)
#loc102 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":106:13)
#loc103 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":107:27)
#loc104 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":107:17)
#loc105 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":108:17)
#loc106 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":109:13)
#loc107 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":110:27)
#loc108 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":110:17)
#loc109 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":111:17)
#loc110 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":112:13)
#loc111 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":113:27)
#loc112 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":113:17)
#loc113 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":114:17)
#loc114 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":115:13)
#loc115 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":116:27)
#loc116 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":116:17)
#loc117 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_08.c":117:17)
#loc118 = loc(fused[#loc1, #loc2])
#loc119 = loc(fused[#loc3, #loc4])
#loc120 = loc(fused[#loc9, #loc10])
#loc121 = loc(fused[#loc11, #loc12])
#loc122 = loc(fused[#loc13, #loc14])
#loc123 = loc(fused[#loc15, #loc12])
#loc124 = loc(fused[#loc16, #loc17])
#loc125 = loc(fused[#loc18, #loc19])
#loc126 = loc(fused[#loc20, #loc21])
#loc127 = loc(fused[#loc22, #loc23])
#loc128 = loc(fused[#loc36, #loc37])
#loc129 = loc(fused[#loc38, #loc39])
#loc130 = loc(fused[#loc40, #loc41])
#loc131 = loc(fused[#loc42, #loc43])
#loc132 = loc(fused[#loc45, #loc44])
#loc133 = loc(fused[#loc47, #loc48])
#loc134 = loc(fused[#loc49, #loc50])
#loc135 = loc(fused[#loc51, #loc52])
#loc136 = loc(fused[#loc53, #loc54, #loc55, #loc50])
#loc137 = loc(fused[#loc57, #loc58])
#loc138 = loc(fused[#loc59, #loc60])
#loc139 = loc(fused[#loc61, #loc62])
#loc140 = loc(fused[#loc63, #loc64])
#loc141 = loc(fused[#loc82, #loc83])
#loc142 = loc(fused[#loc85, #loc84])
#loc143 = loc(fused[#loc86, #loc87])
#loc144 = loc(fused[#loc88, #loc89])
#loc145 = loc(fused[#loc90, #loc91])
#loc146 = loc(fused[#loc92, #loc89])
#loc147 = loc(fused[#loc93, #loc94])
#loc148 = loc(fused[#loc95, #loc96])
#loc149 = loc(fused[#loc97, #loc98])
#loc150 = loc(fused[#loc99, #loc100])
