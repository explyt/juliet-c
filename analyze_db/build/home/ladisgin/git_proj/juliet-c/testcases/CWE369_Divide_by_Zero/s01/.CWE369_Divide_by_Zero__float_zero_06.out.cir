!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc51 = loc("CWE369_Divide_by_Zero__float_zero_06.c":174:10)
#loc52 = loc("CWE369_Divide_by_Zero__float_zero_06.c":174:14)
#loc53 = loc("CWE369_Divide_by_Zero__float_zero_06.c":174:20)
#loc54 = loc("CWE369_Divide_by_Zero__float_zero_06.c":174:32)
#loc220 = loc(fused[#loc51, #loc52])
#loc221 = loc(fused[#loc53, #loc54])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc197)
  cir.func no_proto @CWE369_Divide_by_Zero__float_zero_06_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc199)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc200)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc9)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc201)
    cir.br ^bb1 loc(#loc202)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc13)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc14)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc203)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc204)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc16)
    cir.store %6, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc205)
    cir.br ^bb3 loc(#loc12)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc12)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc206)
  ^bb5:  // pred: ^bb4
    %7 = cir.const #cir.int<5> : !s32i loc(#loc20)
    %8 = cir.const #cir.int<5> : !s32i loc(#loc21)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc207)
    cir.brcond %9 ^bb6, ^bb9 loc(#loc208)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc209)
  ^bb7:  // pred: ^bb6
    %10 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc25)
    %11 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc26)
    %12 = cir.cast(floating, %11 : !cir.float), !cir.double loc(#loc26)
    %13 = cir.binop(div, %10, %12) : !cir.double loc(#loc210)
    %14 = cir.cast(float_to_int, %13 : !cir.double), !s32i loc(#loc210)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc28)
    cir.br ^bb8 loc(#loc24)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc19)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc19)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc4)
  } loc(#loc198)
  cir.func no_proto @CWE369_Divide_by_Zero__float_zero_06_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc212)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc213)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc214)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc215)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    cir.return loc(#loc30)
  } loc(#loc211)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc216)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc217)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc218)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc48)
  cir.func @main(%arg0: !s32i loc(fused[#loc51, #loc52]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc53, #loc54])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc220)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc221)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc50)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc55)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc55)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc56)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc57)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc57)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc58)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc45)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %8 = cir.get_global @CWE369_Divide_by_Zero__float_zero_06_good : !cir.ptr<!cir.func<!void ()>> loc(#loc222)
    cir.call @CWE369_Divide_by_Zero__float_zero_06_good() : () -> () loc(#loc60)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc46)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc47)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %13 = cir.get_global @CWE369_Divide_by_Zero__float_zero_06_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc223)
    cir.call @CWE369_Divide_by_Zero__float_zero_06_bad() : () -> () loc(#loc64)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc48)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc67)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc224)
    cir.return %17 : !s32i loc(#loc224)
  } loc(#loc219)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc70)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc226)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc227)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc77)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc228)
    cir.br ^bb1 loc(#loc229)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc81)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc82)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc230)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc231)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc84)
    cir.store %6, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc232)
    cir.br ^bb3 loc(#loc80)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc80)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc233)
  ^bb5:  // pred: ^bb4
    %7 = cir.const #cir.int<5> : !s32i loc(#loc88)
    %8 = cir.const #cir.int<5> : !s32i loc(#loc89)
    %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc234)
    cir.brcond %9 ^bb6, ^bb7 loc(#loc235)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc69)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    cir.br ^bb13 loc(#loc91)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc236)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc96)
    %13 = cir.cast(floating, %12 : !cir.float), !cir.double loc(#loc96)
    %14 = cir.fabs %13 : !cir.double loc(#loc96)
    %15 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc97)
    %16 = cir.cmp(gt, %14, %15) : !cir.double, !cir.bool loc(#loc237)
    cir.brcond %16 ^bb9, ^bb10 loc(#loc238)
  ^bb9:  // pred: ^bb8
    %17 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc102)
    %18 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc103)
    %19 = cir.cast(floating, %18 : !cir.float), !cir.double loc(#loc103)
    %20 = cir.binop(div, %17, %19) : !cir.double loc(#loc239)
    %21 = cir.cast(float_to_int, %20 : !cir.double), !s32i loc(#loc239)
    cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc226)
    %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc104)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc105)
    cir.br ^bb11 loc(#loc100)
  ^bb10:  // pred: ^bb8
    %23 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc70)
    %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc106)
    cir.br ^bb11 loc(#loc95)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc95)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc87)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc87)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc72)
  } loc(#loc225)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc241)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc242)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc113)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc243)
    cir.br ^bb1 loc(#loc244)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc117)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc118)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc245)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc246)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc120)
    cir.store %6, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc247)
    cir.br ^bb3 loc(#loc116)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc116)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc248)
  ^bb5:  // pred: ^bb4
    %7 = cir.const #cir.int<5> : !s32i loc(#loc124)
    %8 = cir.const #cir.int<5> : !s32i loc(#loc125)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc249)
    cir.brcond %9 ^bb6, ^bb12 loc(#loc250)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc251)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc129)
    %11 = cir.cast(floating, %10 : !cir.float), !cir.double loc(#loc129)
    %12 = cir.fabs %11 : !cir.double loc(#loc129)
    %13 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc130)
    %14 = cir.cmp(gt, %12, %13) : !cir.double, !cir.bool loc(#loc252)
    cir.brcond %14 ^bb8, ^bb9 loc(#loc253)
  ^bb8:  // pred: ^bb7
    %15 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc135)
    %16 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc136)
    %17 = cir.cast(floating, %16 : !cir.float), !cir.double loc(#loc136)
    %18 = cir.binop(div, %15, %17) : !cir.double loc(#loc254)
    %19 = cir.cast(float_to_int, %18 : !cir.double), !s32i loc(#loc254)
    cir.store %19, %0 : !s32i, !cir.ptr<!s32i> loc(#loc241)
    %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc138)
    cir.br ^bb10 loc(#loc133)
  ^bb9:  // pred: ^bb7
    %21 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc139)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc139)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc140)
    cir.br ^bb10 loc(#loc128)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc128)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc123)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc123)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc108)
  } loc(#loc240)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc256)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc257)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc147)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc258)
    cir.br ^bb1 loc(#loc259)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc151)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc152)
    %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc260)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc261)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc156)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc156)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc157)
    cir.br ^bb4 loc(#loc154)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc158)
    cir.store %8, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc262)
    cir.br ^bb4 loc(#loc150)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc150)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc263)
  ^bb6:  // pred: ^bb5
    %9 = cir.const #cir.int<5> : !s32i loc(#loc162)
    %10 = cir.const #cir.int<5> : !s32i loc(#loc163)
    %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc264)
    cir.brcond %11 ^bb7, ^bb10 loc(#loc265)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc266)
  ^bb8:  // pred: ^bb7
    %12 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc167)
    %13 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc168)
    %14 = cir.cast(floating, %13 : !cir.float), !cir.double loc(#loc168)
    %15 = cir.binop(div, %12, %14) : !cir.double loc(#loc267)
    %16 = cir.cast(float_to_int, %15 : !cir.double), !s32i loc(#loc267)
    cir.store %16, %0 : !s32i, !cir.ptr<!s32i> loc(#loc256)
    %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc169)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc170)
    cir.br ^bb9 loc(#loc166)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc161)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc161)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc142)
  } loc(#loc255)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc269)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc270)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc177)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc271)
    cir.br ^bb1 loc(#loc272)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc181)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc182)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc273)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc274)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc184)
    cir.store %6, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc275)
    cir.br ^bb3 loc(#loc180)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc180)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc276)
  ^bb5:  // pred: ^bb4
    %7 = cir.const #cir.int<5> : !s32i loc(#loc188)
    %8 = cir.const #cir.int<5> : !s32i loc(#loc189)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc277)
    cir.brcond %9 ^bb6, ^bb9 loc(#loc278)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc279)
  ^bb7:  // pred: ^bb6
    %10 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc193)
    %11 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc194)
    %12 = cir.cast(floating, %11 : !cir.float), !cir.double loc(#loc194)
    %13 = cir.binop(div, %10, %12) : !cir.double loc(#loc280)
    %14 = cir.cast(float_to_int, %13 : !cir.double), !s32i loc(#loc280)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc269)
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc195)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc196)
    cir.br ^bb8 loc(#loc192)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc187)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc187)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc172)
  } loc(#loc268)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_06.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__float_zero_06.c":29:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_zero_06.c":47:1)
#loc5 = loc("CWE369_Divide_by_Zero__float_zero_06.c":43:13)
#loc6 = loc("CWE369_Divide_by_Zero__float_zero_06.c":43:44)
#loc7 = loc("CWE369_Divide_by_Zero__float_zero_06.c":31:5)
#loc8 = loc("CWE369_Divide_by_Zero__float_zero_06.c":31:11)
#loc9 = loc("CWE369_Divide_by_Zero__float_zero_06.c":33:12)
#loc10 = loc("CWE369_Divide_by_Zero__float_zero_06.c":33:5)
#loc11 = loc("CWE369_Divide_by_Zero__float_zero_06.c":34:5)
#loc12 = loc("CWE369_Divide_by_Zero__float_zero_06.c":38:5)
#loc13 = loc("CWE369_Divide_by_Zero__float_zero_06.c":34:8)
#loc14 = loc("CWE369_Divide_by_Zero__float_zero_06.c":34:27)
#loc15 = loc("CWE369_Divide_by_Zero__float_zero_06.c":35:5)
#loc16 = loc("CWE369_Divide_by_Zero__float_zero_06.c":37:16)
#loc17 = loc("CWE369_Divide_by_Zero__float_zero_06.c":37:9)
#loc18 = loc("CWE369_Divide_by_Zero__float_zero_06.c":39:5)
#loc19 = loc("CWE369_Divide_by_Zero__float_zero_06.c":46:5)
#loc20 = loc("CWE369_Divide_by_Zero__float_zero_06.c":39:8)
#loc21 = loc("CWE369_Divide_by_Zero__float_zero_06.c":39:27)
#loc22 = loc("CWE369_Divide_by_Zero__float_zero_06.c":40:5)
#loc23 = loc("CWE369_Divide_by_Zero__float_zero_06.c":41:9)
#loc24 = loc("CWE369_Divide_by_Zero__float_zero_06.c":45:9)
#loc25 = loc("CWE369_Divide_by_Zero__float_zero_06.c":43:32)
#loc26 = loc("CWE369_Divide_by_Zero__float_zero_06.c":43:40)
#loc27 = loc("CWE369_Divide_by_Zero__float_zero_06.c":44:26)
#loc28 = loc("CWE369_Divide_by_Zero__float_zero_06.c":44:13)
#loc29 = loc("CWE369_Divide_by_Zero__float_zero_06.c":157:1)
#loc30 = loc("CWE369_Divide_by_Zero__float_zero_06.c":163:1)
#loc31 = loc("CWE369_Divide_by_Zero__float_zero_06.c":159:5)
#loc32 = loc("CWE369_Divide_by_Zero__float_zero_06.c":159:14)
#loc33 = loc("CWE369_Divide_by_Zero__float_zero_06.c":160:5)
#loc34 = loc("CWE369_Divide_by_Zero__float_zero_06.c":160:14)
#loc35 = loc("CWE369_Divide_by_Zero__float_zero_06.c":161:5)
#loc36 = loc("CWE369_Divide_by_Zero__float_zero_06.c":161:14)
#loc37 = loc("CWE369_Divide_by_Zero__float_zero_06.c":162:5)
#loc38 = loc("CWE369_Divide_by_Zero__float_zero_06.c":162:14)
#loc39 = loc("/usr/include/stdlib.h":575:1)
#loc40 = loc("/usr/include/stdlib.h":575:41)
#loc41 = loc("/usr/include/time.h":76:1)
#loc42 = loc("/usr/include/time.h":76:38)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE369_Divide_by_Zero__float_zero_06.c":179:15)
#loc46 = loc("CWE369_Divide_by_Zero__float_zero_06.c":181:15)
#loc47 = loc("CWE369_Divide_by_Zero__float_zero_06.c":184:15)
#loc48 = loc("CWE369_Divide_by_Zero__float_zero_06.c":186:15)
#loc49 = loc("CWE369_Divide_by_Zero__float_zero_06.c":174:1)
#loc50 = loc("CWE369_Divide_by_Zero__float_zero_06.c":189:1)
#loc55 = loc("CWE369_Divide_by_Zero__float_zero_06.c":175:1)
#loc56 = loc("CWE369_Divide_by_Zero__float_zero_06.c":177:27)
#loc57 = loc("CWE369_Divide_by_Zero__float_zero_06.c":177:22)
#loc58 = loc("CWE369_Divide_by_Zero__float_zero_06.c":177:5)
#loc59 = loc("CWE369_Divide_by_Zero__float_zero_06.c":179:5)
#loc60 = loc("CWE369_Divide_by_Zero__float_zero_06.c":180:5)
#loc61 = loc("CWE369_Divide_by_Zero__float_zero_06.c":180:47)
#loc62 = loc("CWE369_Divide_by_Zero__float_zero_06.c":181:5)
#loc63 = loc("CWE369_Divide_by_Zero__float_zero_06.c":184:5)
#loc64 = loc("CWE369_Divide_by_Zero__float_zero_06.c":185:5)
#loc65 = loc("CWE369_Divide_by_Zero__float_zero_06.c":185:46)
#loc66 = loc("CWE369_Divide_by_Zero__float_zero_06.c":186:5)
#loc67 = loc("CWE369_Divide_by_Zero__float_zero_06.c":188:12)
#loc68 = loc("CWE369_Divide_by_Zero__float_zero_06.c":188:5)
#loc69 = loc("CWE369_Divide_by_Zero__float_zero_06.c":67:19)
#loc70 = loc("CWE369_Divide_by_Zero__float_zero_06.c":79:23)
#loc71 = loc("CWE369_Divide_by_Zero__float_zero_06.c":54:1)
#loc72 = loc("CWE369_Divide_by_Zero__float_zero_06.c":82:1)
#loc73 = loc("CWE369_Divide_by_Zero__float_zero_06.c":74:13)
#loc74 = loc("CWE369_Divide_by_Zero__float_zero_06.c":74:44)
#loc75 = loc("CWE369_Divide_by_Zero__float_zero_06.c":56:5)
#loc76 = loc("CWE369_Divide_by_Zero__float_zero_06.c":56:11)
#loc77 = loc("CWE369_Divide_by_Zero__float_zero_06.c":58:12)
#loc78 = loc("CWE369_Divide_by_Zero__float_zero_06.c":58:5)
#loc79 = loc("CWE369_Divide_by_Zero__float_zero_06.c":59:5)
#loc80 = loc("CWE369_Divide_by_Zero__float_zero_06.c":63:5)
#loc81 = loc("CWE369_Divide_by_Zero__float_zero_06.c":59:8)
#loc82 = loc("CWE369_Divide_by_Zero__float_zero_06.c":59:27)
#loc83 = loc("CWE369_Divide_by_Zero__float_zero_06.c":60:5)
#loc84 = loc("CWE369_Divide_by_Zero__float_zero_06.c":62:16)
#loc85 = loc("CWE369_Divide_by_Zero__float_zero_06.c":62:9)
#loc86 = loc("CWE369_Divide_by_Zero__float_zero_06.c":64:5)
#loc87 = loc("CWE369_Divide_by_Zero__float_zero_06.c":81:5)
#loc88 = loc("CWE369_Divide_by_Zero__float_zero_06.c":64:8)
#loc89 = loc("CWE369_Divide_by_Zero__float_zero_06.c":64:27)
#loc90 = loc("CWE369_Divide_by_Zero__float_zero_06.c":65:5)
#loc91 = loc("CWE369_Divide_by_Zero__float_zero_06.c":68:5)
#loc92 = loc("CWE369_Divide_by_Zero__float_zero_06.c":70:5)
#loc93 = loc("CWE369_Divide_by_Zero__float_zero_06.c":67:9)
#loc94 = loc("CWE369_Divide_by_Zero__float_zero_06.c":72:9)
#loc95 = loc("CWE369_Divide_by_Zero__float_zero_06.c":80:9)
#loc96 = loc("CWE369_Divide_by_Zero__float_zero_06.c":72:17)
#loc97 = loc("CWE369_Divide_by_Zero__float_zero_06.c":72:25)
#loc98 = loc("CWE369_Divide_by_Zero__float_zero_06.c":72:12)
#loc99 = loc("CWE369_Divide_by_Zero__float_zero_06.c":73:9)
#loc100 = loc("CWE369_Divide_by_Zero__float_zero_06.c":76:9)
#loc101 = loc("CWE369_Divide_by_Zero__float_zero_06.c":78:9)
#loc102 = loc("CWE369_Divide_by_Zero__float_zero_06.c":74:32)
#loc103 = loc("CWE369_Divide_by_Zero__float_zero_06.c":74:40)
#loc104 = loc("CWE369_Divide_by_Zero__float_zero_06.c":75:26)
#loc105 = loc("CWE369_Divide_by_Zero__float_zero_06.c":75:13)
#loc106 = loc("CWE369_Divide_by_Zero__float_zero_06.c":79:13)
#loc107 = loc("CWE369_Divide_by_Zero__float_zero_06.c":85:1)
#loc108 = loc("CWE369_Divide_by_Zero__float_zero_06.c":108:1)
#loc109 = loc("CWE369_Divide_by_Zero__float_zero_06.c":100:13)
#loc110 = loc("CWE369_Divide_by_Zero__float_zero_06.c":100:44)
#loc111 = loc("CWE369_Divide_by_Zero__float_zero_06.c":87:5)
#loc112 = loc("CWE369_Divide_by_Zero__float_zero_06.c":87:11)
#loc113 = loc("CWE369_Divide_by_Zero__float_zero_06.c":89:12)
#loc114 = loc("CWE369_Divide_by_Zero__float_zero_06.c":89:5)
#loc115 = loc("CWE369_Divide_by_Zero__float_zero_06.c":90:5)
#loc116 = loc("CWE369_Divide_by_Zero__float_zero_06.c":94:5)
#loc117 = loc("CWE369_Divide_by_Zero__float_zero_06.c":90:8)
#loc118 = loc("CWE369_Divide_by_Zero__float_zero_06.c":90:27)
#loc119 = loc("CWE369_Divide_by_Zero__float_zero_06.c":91:5)
#loc120 = loc("CWE369_Divide_by_Zero__float_zero_06.c":93:16)
#loc121 = loc("CWE369_Divide_by_Zero__float_zero_06.c":93:9)
#loc122 = loc("CWE369_Divide_by_Zero__float_zero_06.c":95:5)
#loc123 = loc("CWE369_Divide_by_Zero__float_zero_06.c":107:5)
#loc124 = loc("CWE369_Divide_by_Zero__float_zero_06.c":95:8)
#loc125 = loc("CWE369_Divide_by_Zero__float_zero_06.c":95:27)
#loc126 = loc("CWE369_Divide_by_Zero__float_zero_06.c":96:5)
#loc127 = loc("CWE369_Divide_by_Zero__float_zero_06.c":98:9)
#loc128 = loc("CWE369_Divide_by_Zero__float_zero_06.c":106:9)
#loc129 = loc("CWE369_Divide_by_Zero__float_zero_06.c":98:17)
#loc130 = loc("CWE369_Divide_by_Zero__float_zero_06.c":98:25)
#loc131 = loc("CWE369_Divide_by_Zero__float_zero_06.c":98:12)
#loc132 = loc("CWE369_Divide_by_Zero__float_zero_06.c":99:9)
#loc133 = loc("CWE369_Divide_by_Zero__float_zero_06.c":102:9)
#loc134 = loc("CWE369_Divide_by_Zero__float_zero_06.c":104:9)
#loc135 = loc("CWE369_Divide_by_Zero__float_zero_06.c":100:32)
#loc136 = loc("CWE369_Divide_by_Zero__float_zero_06.c":100:40)
#loc137 = loc("CWE369_Divide_by_Zero__float_zero_06.c":101:26)
#loc138 = loc("CWE369_Divide_by_Zero__float_zero_06.c":101:13)
#loc139 = loc("CWE369_Divide_by_Zero__float_zero_06.c":105:23)
#loc140 = loc("CWE369_Divide_by_Zero__float_zero_06.c":105:13)
#loc141 = loc("CWE369_Divide_by_Zero__float_zero_06.c":111:1)
#loc142 = loc("CWE369_Divide_by_Zero__float_zero_06.c":134:1)
#loc143 = loc("CWE369_Divide_by_Zero__float_zero_06.c":130:13)
#loc144 = loc("CWE369_Divide_by_Zero__float_zero_06.c":130:44)
#loc145 = loc("CWE369_Divide_by_Zero__float_zero_06.c":113:5)
#loc146 = loc("CWE369_Divide_by_Zero__float_zero_06.c":113:11)
#loc147 = loc("CWE369_Divide_by_Zero__float_zero_06.c":115:12)
#loc148 = loc("CWE369_Divide_by_Zero__float_zero_06.c":115:5)
#loc149 = loc("CWE369_Divide_by_Zero__float_zero_06.c":116:5)
#loc150 = loc("CWE369_Divide_by_Zero__float_zero_06.c":125:5)
#loc151 = loc("CWE369_Divide_by_Zero__float_zero_06.c":116:8)
#loc152 = loc("CWE369_Divide_by_Zero__float_zero_06.c":116:27)
#loc153 = loc("CWE369_Divide_by_Zero__float_zero_06.c":117:5)
#loc154 = loc("CWE369_Divide_by_Zero__float_zero_06.c":120:5)
#loc155 = loc("CWE369_Divide_by_Zero__float_zero_06.c":122:5)
#loc156 = loc("CWE369_Divide_by_Zero__float_zero_06.c":119:19)
#loc157 = loc("CWE369_Divide_by_Zero__float_zero_06.c":119:9)
#loc158 = loc("CWE369_Divide_by_Zero__float_zero_06.c":124:16)
#loc159 = loc("CWE369_Divide_by_Zero__float_zero_06.c":124:9)
#loc160 = loc("CWE369_Divide_by_Zero__float_zero_06.c":126:5)
#loc161 = loc("CWE369_Divide_by_Zero__float_zero_06.c":133:5)
#loc162 = loc("CWE369_Divide_by_Zero__float_zero_06.c":126:8)
#loc163 = loc("CWE369_Divide_by_Zero__float_zero_06.c":126:27)
#loc164 = loc("CWE369_Divide_by_Zero__float_zero_06.c":127:5)
#loc165 = loc("CWE369_Divide_by_Zero__float_zero_06.c":128:9)
#loc166 = loc("CWE369_Divide_by_Zero__float_zero_06.c":132:9)
#loc167 = loc("CWE369_Divide_by_Zero__float_zero_06.c":130:32)
#loc168 = loc("CWE369_Divide_by_Zero__float_zero_06.c":130:40)
#loc169 = loc("CWE369_Divide_by_Zero__float_zero_06.c":131:26)
#loc170 = loc("CWE369_Divide_by_Zero__float_zero_06.c":131:13)
#loc171 = loc("CWE369_Divide_by_Zero__float_zero_06.c":137:1)
#loc172 = loc("CWE369_Divide_by_Zero__float_zero_06.c":155:1)
#loc173 = loc("CWE369_Divide_by_Zero__float_zero_06.c":151:13)
#loc174 = loc("CWE369_Divide_by_Zero__float_zero_06.c":151:44)
#loc175 = loc("CWE369_Divide_by_Zero__float_zero_06.c":139:5)
#loc176 = loc("CWE369_Divide_by_Zero__float_zero_06.c":139:11)
#loc177 = loc("CWE369_Divide_by_Zero__float_zero_06.c":141:12)
#loc178 = loc("CWE369_Divide_by_Zero__float_zero_06.c":141:5)
#loc179 = loc("CWE369_Divide_by_Zero__float_zero_06.c":142:5)
#loc180 = loc("CWE369_Divide_by_Zero__float_zero_06.c":146:5)
#loc181 = loc("CWE369_Divide_by_Zero__float_zero_06.c":142:8)
#loc182 = loc("CWE369_Divide_by_Zero__float_zero_06.c":142:27)
#loc183 = loc("CWE369_Divide_by_Zero__float_zero_06.c":143:5)
#loc184 = loc("CWE369_Divide_by_Zero__float_zero_06.c":145:16)
#loc185 = loc("CWE369_Divide_by_Zero__float_zero_06.c":145:9)
#loc186 = loc("CWE369_Divide_by_Zero__float_zero_06.c":147:5)
#loc187 = loc("CWE369_Divide_by_Zero__float_zero_06.c":154:5)
#loc188 = loc("CWE369_Divide_by_Zero__float_zero_06.c":147:8)
#loc189 = loc("CWE369_Divide_by_Zero__float_zero_06.c":147:27)
#loc190 = loc("CWE369_Divide_by_Zero__float_zero_06.c":148:5)
#loc191 = loc("CWE369_Divide_by_Zero__float_zero_06.c":149:9)
#loc192 = loc("CWE369_Divide_by_Zero__float_zero_06.c":153:9)
#loc193 = loc("CWE369_Divide_by_Zero__float_zero_06.c":151:32)
#loc194 = loc("CWE369_Divide_by_Zero__float_zero_06.c":151:40)
#loc195 = loc("CWE369_Divide_by_Zero__float_zero_06.c":152:26)
#loc196 = loc("CWE369_Divide_by_Zero__float_zero_06.c":152:13)
#loc197 = loc(fused[#loc1, #loc2])
#loc198 = loc(fused[#loc3, #loc4])
#loc199 = loc(fused[#loc5, #loc6])
#loc200 = loc(fused[#loc7, #loc8])
#loc201 = loc(fused[#loc10, #loc9])
#loc202 = loc(fused[#loc11, #loc12])
#loc203 = loc(fused[#loc13, #loc14])
#loc204 = loc(fused[#loc15, #loc12])
#loc205 = loc(fused[#loc17, #loc16])
#loc206 = loc(fused[#loc18, #loc19])
#loc207 = loc(fused[#loc20, #loc21])
#loc208 = loc(fused[#loc22, #loc19])
#loc209 = loc(fused[#loc23, #loc24])
#loc210 = loc(fused[#loc25, #loc26])
#loc211 = loc(fused[#loc29, #loc30])
#loc212 = loc(fused[#loc31, #loc32])
#loc213 = loc(fused[#loc33, #loc34])
#loc214 = loc(fused[#loc35, #loc36])
#loc215 = loc(fused[#loc37, #loc38])
#loc216 = loc(fused[#loc39, #loc40])
#loc217 = loc(fused[#loc41, #loc42])
#loc218 = loc(fused[#loc43, #loc44])
#loc219 = loc(fused[#loc49, #loc50])
#loc222 = loc(fused[#loc60, #loc61])
#loc223 = loc(fused[#loc64, #loc65])
#loc224 = loc(fused[#loc68, #loc67])
#loc225 = loc(fused[#loc71, #loc72])
#loc226 = loc(fused[#loc73, #loc74])
#loc227 = loc(fused[#loc75, #loc76])
#loc228 = loc(fused[#loc78, #loc77])
#loc229 = loc(fused[#loc79, #loc80])
#loc230 = loc(fused[#loc81, #loc82])
#loc231 = loc(fused[#loc83, #loc80])
#loc232 = loc(fused[#loc85, #loc84])
#loc233 = loc(fused[#loc86, #loc87])
#loc234 = loc(fused[#loc88, #loc89])
#loc235 = loc(fused[#loc90, #loc91, #loc92, #loc87])
#loc236 = loc(fused[#loc94, #loc95])
#loc237 = loc(fused[#loc98, #loc97])
#loc238 = loc(fused[#loc99, #loc100, #loc101, #loc95])
#loc239 = loc(fused[#loc102, #loc103])
#loc240 = loc(fused[#loc107, #loc108])
#loc241 = loc(fused[#loc109, #loc110])
#loc242 = loc(fused[#loc111, #loc112])
#loc243 = loc(fused[#loc114, #loc113])
#loc244 = loc(fused[#loc115, #loc116])
#loc245 = loc(fused[#loc117, #loc118])
#loc246 = loc(fused[#loc119, #loc116])
#loc247 = loc(fused[#loc121, #loc120])
#loc248 = loc(fused[#loc122, #loc123])
#loc249 = loc(fused[#loc124, #loc125])
#loc250 = loc(fused[#loc126, #loc123])
#loc251 = loc(fused[#loc127, #loc128])
#loc252 = loc(fused[#loc131, #loc130])
#loc253 = loc(fused[#loc132, #loc133, #loc134, #loc128])
#loc254 = loc(fused[#loc135, #loc136])
#loc255 = loc(fused[#loc141, #loc142])
#loc256 = loc(fused[#loc143, #loc144])
#loc257 = loc(fused[#loc145, #loc146])
#loc258 = loc(fused[#loc148, #loc147])
#loc259 = loc(fused[#loc149, #loc150])
#loc260 = loc(fused[#loc151, #loc152])
#loc261 = loc(fused[#loc153, #loc154, #loc155, #loc150])
#loc262 = loc(fused[#loc159, #loc158])
#loc263 = loc(fused[#loc160, #loc161])
#loc264 = loc(fused[#loc162, #loc163])
#loc265 = loc(fused[#loc164, #loc161])
#loc266 = loc(fused[#loc165, #loc166])
#loc267 = loc(fused[#loc167, #loc168])
#loc268 = loc(fused[#loc171, #loc172])
#loc269 = loc(fused[#loc173, #loc174])
#loc270 = loc(fused[#loc175, #loc176])
#loc271 = loc(fused[#loc178, #loc177])
#loc272 = loc(fused[#loc179, #loc180])
#loc273 = loc(fused[#loc181, #loc182])
#loc274 = loc(fused[#loc183, #loc180])
#loc275 = loc(fused[#loc185, #loc184])
#loc276 = loc(fused[#loc186, #loc187])
#loc277 = loc(fused[#loc188, #loc189])
#loc278 = loc(fused[#loc190, #loc187])
#loc279 = loc(fused[#loc191, #loc192])
#loc280 = loc(fused[#loc193, #loc194])
