!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":102:10)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":102:14)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":102:20)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":102:32)
#loc160 = loc(fused[#loc69, #loc70])
#loc161 = loc(fused[#loc71, #loc72])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2B.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc133)
  cir.global "private" constant cir_private @__const.CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16_bad.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc134)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc135)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc136)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc138)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc139)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc14)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc14)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc14)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc14)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc14)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc140)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc14)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc14)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc139)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc16)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc16)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc16)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc16)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc16)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc16)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc16)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc16)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc140)
    cir.scope {
      cir.while {
        %19 = cir.const #cir.int<1> : !s32i loc(#loc19)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc19)
        cir.condition(%20) loc(#loc19)
      } do {
        %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc20)
        cir.store %19, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc142)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc22)
        %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc22)
        %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
        %23 = cir.const #cir.int<0> : !s32i loc(#loc24)
        %24 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc25)
        cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc143)
        cir.break loc(#loc26)
      } loc(#loc141)
    } loc(#loc141)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc134)
      %20 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc145)
      %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc146)
      %22 = cir.get_global @__const.CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16_bad.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc134)
      cir.copy %22 to %19 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc134)
      %23 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc32)
      %24 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc33)
      %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc32)
      cir.store %25, %21 : !u64i, !cir.ptr<!u64i> loc(#loc147)
      cir.scope {
        %27 = cir.const #cir.int<0> : !s32i loc(#loc38)
        %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc38)
        cir.store %28, %20 : !u64i, !cir.ptr<!u64i> loc(#loc149)
        cir.for : cond {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc40)
          %30 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc41)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc42)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc42)
          %33 = cir.binop(add, %30, %32) : !u64i loc(#loc150)
          %34 = cir.cmp(lt, %29, %33) : !u64i, !cir.bool loc(#loc151)
          cir.condition(%34) loc(#loc43)
        } body {
          cir.scope {
            %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc45)
            %30 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc46)
            %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc46)
            %32 = cir.load %31 : !cir.ptr<!s8i>, !s8i loc(#loc46)
            %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
            %34 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc48)
            %35 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc49)
            cir.store %32, %35 : !s8i, !cir.ptr<!s8i> loc(#loc153)
          } loc(#loc152)
          cir.yield loc(#loc37)
        } step {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc51)
          %30 = cir.unary(inc, %29) : !u64i, !u64i loc(#loc52)
          cir.store %30, %20 : !u64i, !cir.ptr<!u64i> loc(#loc154)
          cir.yield loc(#loc148)
        } loc(#loc148)
      } loc(#loc148)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    } loc(#loc144)
    cir.return loc(#loc10)
  } loc(#loc137)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc156)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc57)
    cir.return loc(#loc56)
  } loc(#loc155)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc157)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc158)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc64)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc65)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc66)
  cir.func @main(%arg0: !s32i loc(fused[#loc69, #loc70]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc71, #loc72])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc160)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc161)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc68)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc73)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc73)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc74)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc75)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc75)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc76)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc63)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc162)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16_good() : () -> () loc(#loc78)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc64)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc65)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc163)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16_bad() : () -> () loc(#loc82)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc66)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc84)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc85)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc164)
    cir.return %17 : !s32i loc(#loc164)
  } loc(#loc159)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc166)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc167)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc92)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc92)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc92)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc92)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc92)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc168)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc92)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc92)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc167)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc94)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc94)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc94)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc94)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc94)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc94)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc94)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc94)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc94)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc168)
    cir.scope {
      cir.while {
        %19 = cir.const #cir.int<1> : !s32i loc(#loc97)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc97)
        cir.condition(%20) loc(#loc97)
      } do {
        %19 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
        cir.store %19, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc170)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc100)
        %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc100)
        %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
        %23 = cir.const #cir.int<0> : !s32i loc(#loc102)
        %24 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc103)
        cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc171)
        cir.break loc(#loc104)
      } loc(#loc169)
    } loc(#loc169)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc133)
      %20 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc173)
      %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc174)
      %22 = cir.get_global @__const.goodG2B.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc133)
      cir.copy %22 to %19 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc133)
      %23 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc110)
      %24 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc111)
      %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc110)
      cir.store %25, %21 : !u64i, !cir.ptr<!u64i> loc(#loc175)
      cir.scope {
        %27 = cir.const #cir.int<0> : !s32i loc(#loc116)
        %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc116)
        cir.store %28, %20 : !u64i, !cir.ptr<!u64i> loc(#loc177)
        cir.for : cond {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc118)
          %30 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc119)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc120)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc120)
          %33 = cir.binop(add, %30, %32) : !u64i loc(#loc178)
          %34 = cir.cmp(lt, %29, %33) : !u64i, !cir.bool loc(#loc179)
          cir.condition(%34) loc(#loc121)
        } body {
          cir.scope {
            %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc123)
            %30 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc124)
            %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc124)
            %32 = cir.load %31 : !cir.ptr<!s8i>, !s8i loc(#loc124)
            %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
            %34 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc126)
            %35 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc127)
            cir.store %32, %35 : !s8i, !cir.ptr<!s8i> loc(#loc181)
          } loc(#loc180)
          cir.yield loc(#loc115)
        } step {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc129)
          %30 = cir.unary(inc, %29) : !u64i, !u64i loc(#loc130)
          cir.store %30, %20 : !u64i, !cir.ptr<!u64i> loc(#loc182)
          cir.yield loc(#loc176)
        } loc(#loc176)
      } loc(#loc176)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc132)
    } loc(#loc172)
    cir.return loc(#loc88)
  } loc(#loc165)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":74:9)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":74:29)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":42:9)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":42:29)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":28:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":53:1)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":30:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":30:12)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":31:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":31:36)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":32:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":32:37)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":33:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":40:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":33:11)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":37:16)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":37:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":38:19)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":38:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":38:14)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":38:15)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":39:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":41:5)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":52:5)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":43:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":43:16)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":43:19)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":44:21)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":44:28)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":44:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":44:34)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":47:9)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":50:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":47:18)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":47:14)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":47:21)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":47:25)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":47:37)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":47:23)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":48:9)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":49:30)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":49:23)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":49:13)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":49:18)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":49:19)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":49:31)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":47:41)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":47:40)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":51:19)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":51:9)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":87:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":90:1)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":89:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":89:13)
#loc59 = loc("/usr/include/stdlib.h":575:1)
#loc60 = loc("/usr/include/stdlib.h":575:41)
#loc61 = loc("/usr/include/time.h":76:1)
#loc62 = loc("/usr/include/time.h":76:38)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":107:15)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":109:15)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":112:15)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":114:15)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":102:1)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":117:1)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":103:1)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":105:27)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":105:22)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":105:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":107:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":108:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":108:73)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":109:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":112:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":113:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":113:72)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":114:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":116:12)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":116:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":60:1)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":85:1)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":62:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":62:12)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":63:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":63:36)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":64:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":64:37)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":65:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":72:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":65:11)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":69:16)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":69:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":70:19)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":70:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":70:14)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":70:15)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":71:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":73:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":84:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":75:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":75:16)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":75:19)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":76:21)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":76:28)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":76:9)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":76:34)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":79:9)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":82:9)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":79:18)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":79:14)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":79:21)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":79:25)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":79:37)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":79:23)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":80:9)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":81:30)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":81:23)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":81:13)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":81:18)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":81:19)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":81:31)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":79:41)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":79:40)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":83:19)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":83:9)
#loc133 = loc(fused[#loc1, #loc2])
#loc134 = loc(fused[#loc3, #loc4])
#loc135 = loc(fused[#loc5, #loc6])
#loc136 = loc(fused[#loc7, #loc8])
#loc137 = loc(fused[#loc9, #loc10])
#loc138 = loc(fused[#loc11, #loc12])
#loc139 = loc(fused[#loc13, #loc14])
#loc140 = loc(fused[#loc15, #loc16])
#loc141 = loc(fused[#loc17, #loc18])
#loc142 = loc(fused[#loc21, #loc20])
#loc143 = loc(fused[#loc23, #loc22])
#loc144 = loc(fused[#loc27, #loc28])
#loc145 = loc(fused[#loc29, #loc30])
#loc146 = loc(fused[#loc29, #loc31])
#loc147 = loc(fused[#loc34, #loc35])
#loc148 = loc(fused[#loc36, #loc37])
#loc149 = loc(fused[#loc39, #loc38])
#loc150 = loc(fused[#loc41, #loc42])
#loc151 = loc(fused[#loc40, #loc42])
#loc152 = loc(fused[#loc44, #loc37])
#loc153 = loc(fused[#loc47, #loc50])
#loc154 = loc(fused[#loc52, #loc51])
#loc155 = loc(fused[#loc55, #loc56])
#loc156 = loc(fused[#loc57, #loc58])
#loc157 = loc(fused[#loc59, #loc60])
#loc158 = loc(fused[#loc61, #loc62])
#loc159 = loc(fused[#loc67, #loc68])
#loc162 = loc(fused[#loc78, #loc79])
#loc163 = loc(fused[#loc82, #loc83])
#loc164 = loc(fused[#loc86, #loc85])
#loc165 = loc(fused[#loc87, #loc88])
#loc166 = loc(fused[#loc89, #loc90])
#loc167 = loc(fused[#loc91, #loc92])
#loc168 = loc(fused[#loc93, #loc94])
#loc169 = loc(fused[#loc95, #loc96])
#loc170 = loc(fused[#loc99, #loc98])
#loc171 = loc(fused[#loc101, #loc100])
#loc172 = loc(fused[#loc105, #loc106])
#loc173 = loc(fused[#loc107, #loc108])
#loc174 = loc(fused[#loc107, #loc109])
#loc175 = loc(fused[#loc112, #loc113])
#loc176 = loc(fused[#loc114, #loc115])
#loc177 = loc(fused[#loc117, #loc116])
#loc178 = loc(fused[#loc119, #loc120])
#loc179 = loc(fused[#loc118, #loc120])
#loc180 = loc(fused[#loc122, #loc115])
#loc181 = loc(fused[#loc125, #loc128])
#loc182 = loc(fused[#loc130, #loc129])
