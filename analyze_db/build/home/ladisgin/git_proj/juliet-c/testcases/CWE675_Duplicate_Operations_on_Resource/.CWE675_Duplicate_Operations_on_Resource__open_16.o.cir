!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE675_Duplicate_Operations_on_Resource/CWE675_Duplicate_Operations_on_Resource__open_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @open(!cir.ptr<!s8i>, !s32i, ...) -> !s32i loc(#loc88)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"BadSource_open.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc3)
  cir.func private @close(!s32i) -> !s32i loc(#loc89)
  cir.func no_proto @CWE675_Duplicate_Operations_on_Resource__open_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc91)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    cir.br ^bb1 loc(#loc93)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc93)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc15)
  ^bb3:  // pred: ^bb2
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc3)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc3)
    %7 = cir.const #cir.int<2> : !s32i loc(#loc16)
    %8 = cir.const #cir.int<64> : !s32i loc(#loc17)
    %9 = cir.binop(or, %7, %8) : !s32i loc(#loc94)
    %10 = cir.const #cir.int<256> : !s32i loc(#loc18)
    %11 = cir.const #cir.int<128> : !s32i loc(#loc19)
    %12 = cir.binop(or, %10, %11) : !s32i loc(#loc95)
    %13 = cir.call @open(%6, %9, %12) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc20)
    cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc24)
    cir.br ^bb4 loc(#loc25)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc14)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc97)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc97)
  ^bb7:  // pred: ^bb6
    %16 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc28)
    cir.brcond %17 ^bb8, ^bb9 loc(#loc28)
  ^bb8:  // pred: ^bb7
    %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc30)
    cir.br ^bb9 loc(#loc31)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc27)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc7)
  } loc(#loc90)
  cir.func no_proto @CWE675_Duplicate_Operations_on_Resource__open_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc99)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc100)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc33)
  } loc(#loc98)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc102)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc43)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    cir.br ^bb1 loc(#loc104)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc104)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc47)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc47)
  ^bb3:  // pred: ^bb2
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc48)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc48)
    %7 = cir.const #cir.int<2> : !s32i loc(#loc49)
    %8 = cir.const #cir.int<64> : !s32i loc(#loc50)
    %9 = cir.binop(or, %7, %8) : !s32i loc(#loc105)
    %10 = cir.const #cir.int<256> : !s32i loc(#loc51)
    %11 = cir.const #cir.int<128> : !s32i loc(#loc52)
    %12 = cir.binop(or, %10, %11) : !s32i loc(#loc106)
    %13 = cir.call @open(%6, %9, %12) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc53)
    cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc107)
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
    %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc57)
    cir.br ^bb4 loc(#loc58)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc46)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc108)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc108)
  ^bb7:  // pred: ^bb6
    %16 = cir.const #cir.int<1> : !s32i loc(#loc61)
    %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc61)
    cir.brcond %17 ^bb8, ^bb9 loc(#loc61)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc62)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc60)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc39)
  } loc(#loc101)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"GoodSource_open.txt\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc63)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc110)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc68)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc69)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    cir.br ^bb1 loc(#loc112)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc112)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc73)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc73)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc73)
  ^bb3:  // pred: ^bb2
    %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc63)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc63)
    %7 = cir.const #cir.int<2> : !s32i loc(#loc74)
    %8 = cir.const #cir.int<64> : !s32i loc(#loc75)
    %9 = cir.binop(or, %7, %8) : !s32i loc(#loc113)
    %10 = cir.const #cir.int<256> : !s32i loc(#loc76)
    %11 = cir.const #cir.int<128> : !s32i loc(#loc77)
    %12 = cir.binop(or, %10, %11) : !s32i loc(#loc114)
    %13 = cir.call @open(%6, %9, %12) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc78)
    cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    cir.br ^bb4 loc(#loc81)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc72)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc116)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc116)
  ^bb7:  // pred: ^bb6
    %14 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc84)
    cir.brcond %15 ^bb8, ^bb9 loc(#loc84)
  ^bb8:  // pred: ^bb7
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc86)
    cir.br ^bb9 loc(#loc87)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc83)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc65)
  } loc(#loc109)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE675_Duplicate_Operations_on_Resource/CWE675_Duplicate_Operations_on_Resource__open_16.c":0:0)
#loc1 = loc("/usr/include/fcntl.h":209:1)
#loc2 = loc("/usr/include/fcntl.h":209:56)
#loc3 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":37:21)
#loc4 = loc("/usr/include/unistd.h":358:1)
#loc5 = loc("/usr/include/unistd.h":358:27)
#loc6 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":31:1)
#loc7 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":48:1)
#loc8 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":33:5)
#loc9 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":33:9)
#loc10 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":34:13)
#loc11 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":34:12)
#loc12 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":34:5)
#loc13 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":35:5)
#loc14 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":41:5)
#loc15 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":35:11)
#loc16 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":37:43)
#loc17 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":37:50)
#loc18 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":37:59)
#loc19 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":37:67)
#loc20 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":37:16)
#loc21 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":37:9)
#loc22 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":37:75)
#loc23 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":39:15)
#loc24 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":39:9)
#loc25 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":40:9)
#loc26 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":42:5)
#loc27 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":47:5)
#loc28 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":42:11)
#loc29 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":45:15)
#loc30 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":45:9)
#loc31 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":46:9)
#loc32 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":94:1)
#loc33 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":98:1)
#loc34 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":96:5)
#loc35 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":96:13)
#loc36 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":97:5)
#loc37 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":97:13)
#loc38 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":55:1)
#loc39 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":73:1)
#loc40 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":57:5)
#loc41 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":57:9)
#loc42 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":58:13)
#loc43 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":58:12)
#loc44 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":58:5)
#loc45 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":59:5)
#loc46 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":65:5)
#loc47 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":59:11)
#loc48 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":61:21)
#loc49 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":61:43)
#loc50 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":61:50)
#loc51 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":61:59)
#loc52 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":61:67)
#loc53 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":61:16)
#loc54 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":61:9)
#loc55 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":61:75)
#loc56 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":63:15)
#loc57 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":63:9)
#loc58 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":64:9)
#loc59 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":66:5)
#loc60 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":72:5)
#loc61 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":66:11)
#loc62 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":71:9)
#loc63 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":83:21)
#loc64 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":76:1)
#loc65 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":92:1)
#loc66 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":78:5)
#loc67 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":78:9)
#loc68 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":79:13)
#loc69 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":79:12)
#loc70 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":79:5)
#loc71 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":80:5)
#loc72 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":85:5)
#loc73 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":80:11)
#loc74 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":83:44)
#loc75 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":83:51)
#loc76 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":83:60)
#loc77 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":83:68)
#loc78 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":83:16)
#loc79 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":83:9)
#loc80 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":83:76)
#loc81 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":84:9)
#loc82 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":86:5)
#loc83 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":91:5)
#loc84 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":86:11)
#loc85 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":89:15)
#loc86 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":89:9)
#loc87 = loc("CWE675_Duplicate_Operations_on_Resource__open_16.c":90:9)
#loc88 = loc(fused[#loc1, #loc2])
#loc89 = loc(fused[#loc4, #loc5])
#loc90 = loc(fused[#loc6, #loc7])
#loc91 = loc(fused[#loc8, #loc9])
#loc92 = loc(fused[#loc12, #loc10])
#loc93 = loc(fused[#loc13, #loc14])
#loc94 = loc(fused[#loc16, #loc17])
#loc95 = loc(fused[#loc18, #loc19])
#loc96 = loc(fused[#loc21, #loc22])
#loc97 = loc(fused[#loc26, #loc27])
#loc98 = loc(fused[#loc32, #loc33])
#loc99 = loc(fused[#loc34, #loc35])
#loc100 = loc(fused[#loc36, #loc37])
#loc101 = loc(fused[#loc38, #loc39])
#loc102 = loc(fused[#loc40, #loc41])
#loc103 = loc(fused[#loc44, #loc42])
#loc104 = loc(fused[#loc45, #loc46])
#loc105 = loc(fused[#loc49, #loc50])
#loc106 = loc(fused[#loc51, #loc52])
#loc107 = loc(fused[#loc54, #loc55])
#loc108 = loc(fused[#loc59, #loc60])
#loc109 = loc(fused[#loc64, #loc65])
#loc110 = loc(fused[#loc66, #loc67])
#loc111 = loc(fused[#loc70, #loc68])
#loc112 = loc(fused[#loc71, #loc72])
#loc113 = loc(fused[#loc74, #loc75])
#loc114 = loc(fused[#loc76, #loc77])
#loc115 = loc(fused[#loc79, #loc80])
#loc116 = loc(fused[#loc82, #loc83])
