!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":21:24)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":21:30)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":85:10)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":85:14)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":85:20)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":85:32)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":47:28)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":47:34)
#loc140 = loc(fused[#loc7, #loc8])
#loc164 = loc(fused[#loc71, #loc72])
#loc165 = loc(fused[#loc73, #loc74])
#loc170 = loc(fused[#loc91, #loc92])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc137)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc138)
  cir.func internal private @badSource(%arg0: !cir.ptr<!s32i> loc(fused[#loc7, #loc8])) -> !cir.ptr<!s32i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc140)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["__retval"] {alignment = 8 : i64} loc(#loc6)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc9)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc10)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc11)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc11)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc10)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc141)
    cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc142)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc16)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc17)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc17)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc144)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc19)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc21)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc19)
      } loc(#loc145)
    } loc(#loc143)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc22)
    cir.store %7, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc146)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc146)
    cir.return %8 : !cir.ptr<!s32i> loc(#loc146)
  } loc(#loc139)
  cir.func private @printIntLine(!s32i) loc(#loc147)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc148)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc150)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc32)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc151)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc34)
    %3 = cir.call @badSource(%2) : (!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc35)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc152)
    cir.scope {
      %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc154)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc154)
      cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc154)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc42)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc42)
      %8 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc43)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc43)
      %10 = cir.const #cir.int<10> : !s32i loc(#loc44)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc44)
      %12 = cir.const #cir.int<4> : !u64i loc(#loc155)
      %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc156)
      cir.libc.memcpy %13 bytes from %9 to %7 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc157)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc50)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc51)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc49)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc52)
      %18 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc53)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc54)
      cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc53)
    } loc(#loc153)
    cir.return loc(#loc29)
  } loc(#loc149)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc159)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc57)
    cir.return loc(#loc56)
  } loc(#loc158)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc160)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc161)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc162)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc65)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc66)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc68)
  cir.func @main(%arg0: !s32i loc(fused[#loc71, #loc72]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc73, #loc74])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc164)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc165)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc70)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc75)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc75)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc76)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc77)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc77)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc78)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc65)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42_good : !cir.ptr<!cir.func<!void ()>> loc(#loc166)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42_good() : () -> () loc(#loc80)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc66)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc67)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc167)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42_bad() : () -> () loc(#loc84)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc68)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc87)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc168)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc168)
    cir.return %17 : !s32i loc(#loc168)
  } loc(#loc163)
  cir.func internal private @goodG2BSource(%arg0: !cir.ptr<!s32i> loc(fused[#loc91, #loc92])) -> !cir.ptr<!s32i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc170)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["__retval"] {alignment = 8 : i64} loc(#loc90)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc93)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc94)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc95)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc95)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc171)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc172)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc94)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc173)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc174)
    cir.scope {
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc102)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc103)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc103)
      %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !cir.bool loc(#loc176)
      cir.if %14 {
        %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc105)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc106)
        %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc107)
        cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc105)
      } loc(#loc177)
    } loc(#loc175)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc108)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc178)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc178)
    cir.return %10 : !cir.ptr<!s32i> loc(#loc178)
  } loc(#loc169)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc180)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc114)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc181)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc116)
    %3 = cir.call @goodG2BSource(%2) : (!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc117)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc182)
    cir.scope {
      %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc184)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc184)
      cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc184)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc124)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc124)
      %8 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc125)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc125)
      %10 = cir.const #cir.int<10> : !s32i loc(#loc126)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc126)
      %12 = cir.const #cir.int<4> : !u64i loc(#loc185)
      %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc186)
      cir.libc.memcpy %13 bytes from %9 to %7 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc187)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc131)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc132)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc133)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc131)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc134)
      %18 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc135)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc136)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc136)
      cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc135)
    } loc(#loc183)
    cir.return loc(#loc111)
  } loc(#loc179)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":27:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":22:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":24:19)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":24:26)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":24:28)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":24:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":25:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":25:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":25:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":25:17)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":25:23)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":25:24)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":25:30)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":25:29)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":26:12)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":26:5)
#loc24 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc26 = loc("/usr/include/stdlib.h":687:1)
#loc27 = loc("/usr/include/stdlib.h":687:32)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":29:1)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":41:1)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":31:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":31:11)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":32:12)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":32:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":33:22)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":33:12)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":33:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":33:26)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":34:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":40:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":35:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":35:28)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":37:16)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":37:22)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":37:30)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":37:33)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":37:43)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":37:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":37:44)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":38:22)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":38:27)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":38:28)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":38:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":39:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":39:14)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":70:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":73:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":72:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":72:13)
#loc59 = loc("/usr/include/stdlib.h":575:1)
#loc60 = loc("/usr/include/stdlib.h":575:41)
#loc61 = loc("/usr/include/time.h":76:1)
#loc62 = loc("/usr/include/time.h":76:38)
#loc63 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc64 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":90:15)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":92:15)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":95:15)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":97:15)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":85:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":100:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":86:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":88:27)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":88:22)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":88:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":90:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":91:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":91:62)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":92:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":95:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":96:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":96:61)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":97:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":99:12)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":99:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":47:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":53:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":48:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":50:19)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":50:26)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":50:29)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":50:39)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":50:40)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":50:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":51:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":51:33)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":51:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":51:17)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":51:23)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":51:24)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":51:30)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":51:29)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":52:12)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":52:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":56:1)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":68:1)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":58:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":58:11)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":59:12)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":59:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":60:26)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":60:12)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":60:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":60:30)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":61:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":67:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":62:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":62:28)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":64:16)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":64:22)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":64:30)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":64:33)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":64:43)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":64:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":64:44)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":65:22)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":65:27)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":65:28)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":65:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":66:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c":66:14)
#loc137 = loc(fused[#loc1, #loc2])
#loc138 = loc(fused[#loc3, #loc4])
#loc139 = loc(fused[#loc5, #loc6])
#loc141 = loc(fused[#loc10, #loc12])
#loc142 = loc(fused[#loc13, #loc12])
#loc143 = loc(fused[#loc14, #loc15])
#loc144 = loc(fused[#loc16, #loc17])
#loc145 = loc(fused[#loc18, #loc15])
#loc146 = loc(fused[#loc23, #loc22])
#loc147 = loc(fused[#loc24, #loc25])
#loc148 = loc(fused[#loc26, #loc27])
#loc149 = loc(fused[#loc28, #loc29])
#loc150 = loc(fused[#loc30, #loc31])
#loc151 = loc(fused[#loc33, #loc32])
#loc152 = loc(fused[#loc36, #loc37])
#loc153 = loc(fused[#loc38, #loc39])
#loc154 = loc(fused[#loc40, #loc41])
#loc155 = loc(fused[#loc45, #loc46])
#loc156 = loc(fused[#loc44, #loc46])
#loc157 = loc(fused[#loc47, #loc48])
#loc158 = loc(fused[#loc55, #loc56])
#loc159 = loc(fused[#loc57, #loc58])
#loc160 = loc(fused[#loc59, #loc60])
#loc161 = loc(fused[#loc61, #loc62])
#loc162 = loc(fused[#loc63, #loc64])
#loc163 = loc(fused[#loc69, #loc70])
#loc166 = loc(fused[#loc80, #loc81])
#loc167 = loc(fused[#loc84, #loc85])
#loc168 = loc(fused[#loc88, #loc87])
#loc169 = loc(fused[#loc89, #loc90])
#loc171 = loc(fused[#loc96, #loc97])
#loc172 = loc(fused[#loc95, #loc97])
#loc173 = loc(fused[#loc94, #loc98])
#loc174 = loc(fused[#loc99, #loc98])
#loc175 = loc(fused[#loc100, #loc101])
#loc176 = loc(fused[#loc102, #loc103])
#loc177 = loc(fused[#loc104, #loc101])
#loc178 = loc(fused[#loc109, #loc108])
#loc179 = loc(fused[#loc110, #loc111])
#loc180 = loc(fused[#loc112, #loc113])
#loc181 = loc(fused[#loc115, #loc114])
#loc182 = loc(fused[#loc118, #loc119])
#loc183 = loc(fused[#loc120, #loc121])
#loc184 = loc(fused[#loc122, #loc123])
#loc185 = loc(fused[#loc127, #loc128])
#loc186 = loc(fused[#loc126, #loc128])
#loc187 = loc(fused[#loc129, #loc130])
