!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc7 = loc("CWE190_Integer_Overflow__int_max_square_21.c":27:21)
#loc8 = loc("CWE190_Integer_Overflow__int_max_square_21.c":27:25)
#loc53 = loc("CWE190_Integer_Overflow__int_max_square_21.c":162:10)
#loc54 = loc("CWE190_Integer_Overflow__int_max_square_21.c":162:14)
#loc55 = loc("CWE190_Integer_Overflow__int_max_square_21.c":162:20)
#loc56 = loc("CWE190_Integer_Overflow__int_max_square_21.c":162:32)
#loc78 = loc("CWE190_Integer_Overflow__int_max_square_21.c":60:26)
#loc79 = loc("CWE190_Integer_Overflow__int_max_square_21.c":60:30)
#loc123 = loc("CWE190_Integer_Overflow__int_max_square_21.c":94:26)
#loc124 = loc("CWE190_Integer_Overflow__int_max_square_21.c":94:30)
#loc166 = loc("CWE190_Integer_Overflow__int_max_square_21.c":123:25)
#loc167 = loc("CWE190_Integer_Overflow__int_max_square_21.c":123:29)
#true = #cir.bool<true> : !cir.bool
#loc195 = loc(fused[#loc7, #loc8])
#loc213 = loc(fused[#loc53, #loc54])
#loc214 = loc(fused[#loc55, #loc56])
#loc220 = loc(fused[#loc78, #loc79])
#loc235 = loc(fused[#loc123, #loc124])
#loc250 = loc(fused[#loc166, #loc167])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc192)
  cir.func private @printIntLine(!s32i) loc(#loc193)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc7, #loc8])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc195)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc9)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc192)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc12)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc12)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc199)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
          %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc18)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc199)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc19)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc20)
        } loc(#loc198)
      } loc(#loc197)
    } loc(#loc196)
    cir.return loc(#loc6)
  } loc(#loc194)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_21_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc201)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc25)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc27)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc192)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    cir.call @badSink(%5) : (!s32i) -> () loc(#loc32)
    cir.return loc(#loc22)
  } loc(#loc200)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_21_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc206)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc34)
  } loc(#loc205)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc209)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc210)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc211)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc50)
  cir.func @main(%arg0: !s32i loc(fused[#loc53, #loc54]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc55, #loc56])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc213)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc214)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc52)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc57)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc58)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc59)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc59)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc60)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc47)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_max_square_21_good : !cir.ptr<!cir.func<!void ()>> loc(#loc215)
    cir.call @CWE190_Integer_Overflow__int_max_square_21_good() : () -> () loc(#loc62)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc48)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc49)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_max_square_21_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc216)
    cir.call @CWE190_Integer_Overflow__int_max_square_21_bad() : () -> () loc(#loc66)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc50)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc69)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc217)
    cir.return %17 : !s32i loc(#loc217)
  } loc(#loc212)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc218)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc73)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc75)
  cir.func internal private @goodB2G1Sink(%arg0: !s32i loc(fused[#loc78, #loc79])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc220)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc80)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc218)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc83)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc83)
      cir.if %3 {
        %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc73)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc73)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc87)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc90)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc91)
          %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc91)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc91)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc91)
          %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc224)
          %10 = cir.ternary(%9, true {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
            %12 = cir.abs %11 poison : !s32i loc(#loc94)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc94)
            %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc95)
            %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc96)
            %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc96)
            %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc95)
            %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc95)
            %19 = cir.cmp(lt, %13, %18) : !s64i, !cir.bool loc(#loc225)
            %20 = cir.ternary(%19, true {
              %21 = cir.const #true loc(#loc92)
              cir.yield %21 : !cir.bool loc(#loc92)
            }, false {
              %21 = cir.const #false loc(#loc92)
              cir.yield %21 : !cir.bool loc(#loc92)
            }) : (!cir.bool) -> !cir.bool loc(#loc92)
            cir.yield %20 : !cir.bool loc(#loc92)
          }, false {
            %11 = cir.const #false loc(#loc92)
            cir.yield %11 : !cir.bool loc(#loc92)
          }) : (!cir.bool) -> !cir.bool loc(#loc92)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc227)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc102)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc103)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc227)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc104)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc105)
          } else {
            %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc75)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc75)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc106)
          } loc(#loc226)
        } loc(#loc223)
      } loc(#loc222)
    } loc(#loc221)
    cir.return loc(#loc77)
  } loc(#loc219)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc229)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc111)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc230)
    %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc113)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc231)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc115)
    %4 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc218)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    cir.call @goodB2G1Sink(%5) : (!s32i) -> () loc(#loc118)
    cir.return loc(#loc108)
  } loc(#loc228)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc233)
  cir.func internal private @goodB2G2Sink(%arg0: !s32i loc(fused[#loc123, #loc124])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc235)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc233)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc128)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc128)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc133)
          %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc133)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc133)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc133)
          %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc239)
          %10 = cir.ternary(%9, true {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc135)
            %12 = cir.abs %11 poison : !s32i loc(#loc136)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc136)
            %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc137)
            %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc138)
            %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc138)
            %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc137)
            %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc137)
            %19 = cir.cmp(lt, %13, %18) : !s64i, !cir.bool loc(#loc240)
            %20 = cir.ternary(%19, true {
              %21 = cir.const #true loc(#loc134)
              cir.yield %21 : !cir.bool loc(#loc134)
            }, false {
              %21 = cir.const #false loc(#loc134)
              cir.yield %21 : !cir.bool loc(#loc134)
            }) : (!cir.bool) -> !cir.bool loc(#loc134)
            cir.yield %20 : !cir.bool loc(#loc134)
          }, false {
            %11 = cir.const #false loc(#loc134)
            cir.yield %11 : !cir.bool loc(#loc134)
          }) : (!cir.bool) -> !cir.bool loc(#loc134)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc242)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc145)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc144)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc145)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc242)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc146)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc147)
          } else {
            %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc148)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc148)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc149)
          } loc(#loc241)
        } loc(#loc238)
      } loc(#loc237)
    } loc(#loc236)
    cir.return loc(#loc122)
  } loc(#loc234)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc244)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc154)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc245)
    %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc156)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc246)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc158)
    %4 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc233)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc160)
    cir.call @goodB2G2Sink(%5) : (!s32i) -> () loc(#loc161)
    cir.return loc(#loc151)
  } loc(#loc243)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc248)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc166, #loc167])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc250)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc168)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc248)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc171)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc171)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc254)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc177)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc176)
          %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc177)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc254)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc178)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc179)
        } loc(#loc253)
      } loc(#loc252)
    } loc(#loc251)
    cir.return loc(#loc165)
  } loc(#loc249)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc256)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc184)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc257)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc186)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc258)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc188)
    %4 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc248)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc259)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc190)
    cir.call @goodG2BSink(%5) : (!s32i) -> () loc(#loc191)
    cir.return loc(#loc181)
  } loc(#loc255)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_21.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_max_square_21.c":25:1)
#loc2 = loc("CWE190_Integer_Overflow__int_max_square_21.c":25:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_max_square_21.c":27:1)
#loc6 = loc("CWE190_Integer_Overflow__int_max_square_21.c":37:1)
#loc9 = loc("CWE190_Integer_Overflow__int_max_square_21.c":28:1)
#loc10 = loc("CWE190_Integer_Overflow__int_max_square_21.c":29:5)
#loc11 = loc("CWE190_Integer_Overflow__int_max_square_21.c":36:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_square_21.c":29:8)
#loc13 = loc("CWE190_Integer_Overflow__int_max_square_21.c":30:5)
#loc14 = loc("CWE190_Integer_Overflow__int_max_square_21.c":31:9)
#loc15 = loc("CWE190_Integer_Overflow__int_max_square_21.c":35:9)
#loc16 = loc("CWE190_Integer_Overflow__int_max_square_21.c":33:13)
#loc17 = loc("CWE190_Integer_Overflow__int_max_square_21.c":33:33)
#loc18 = loc("CWE190_Integer_Overflow__int_max_square_21.c":33:26)
#loc19 = loc("CWE190_Integer_Overflow__int_max_square_21.c":34:26)
#loc20 = loc("CWE190_Integer_Overflow__int_max_square_21.c":34:13)
#loc21 = loc("CWE190_Integer_Overflow__int_max_square_21.c":39:1)
#loc22 = loc("CWE190_Integer_Overflow__int_max_square_21.c":48:1)
#loc23 = loc("CWE190_Integer_Overflow__int_max_square_21.c":41:5)
#loc24 = loc("CWE190_Integer_Overflow__int_max_square_21.c":41:9)
#loc25 = loc("CWE190_Integer_Overflow__int_max_square_21.c":43:12)
#loc26 = loc("CWE190_Integer_Overflow__int_max_square_21.c":43:5)
#loc27 = loc("CWE190_Integer_Overflow__int_max_square_21.c":45:12)
#loc28 = loc("CWE190_Integer_Overflow__int_max_square_21.c":45:5)
#loc29 = loc("CWE190_Integer_Overflow__int_max_square_21.c":46:17)
#loc30 = loc("CWE190_Integer_Overflow__int_max_square_21.c":46:5)
#loc31 = loc("CWE190_Integer_Overflow__int_max_square_21.c":47:13)
#loc32 = loc("CWE190_Integer_Overflow__int_max_square_21.c":47:5)
#loc33 = loc("CWE190_Integer_Overflow__int_max_square_21.c":146:1)
#loc34 = loc("CWE190_Integer_Overflow__int_max_square_21.c":151:1)
#loc35 = loc("CWE190_Integer_Overflow__int_max_square_21.c":148:5)
#loc36 = loc("CWE190_Integer_Overflow__int_max_square_21.c":148:14)
#loc37 = loc("CWE190_Integer_Overflow__int_max_square_21.c":149:5)
#loc38 = loc("CWE190_Integer_Overflow__int_max_square_21.c":149:14)
#loc39 = loc("CWE190_Integer_Overflow__int_max_square_21.c":150:5)
#loc40 = loc("CWE190_Integer_Overflow__int_max_square_21.c":150:13)
#loc41 = loc("/usr/include/stdlib.h":575:1)
#loc42 = loc("/usr/include/stdlib.h":575:41)
#loc43 = loc("/usr/include/time.h":76:1)
#loc44 = loc("/usr/include/time.h":76:38)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE190_Integer_Overflow__int_max_square_21.c":167:15)
#loc48 = loc("CWE190_Integer_Overflow__int_max_square_21.c":169:15)
#loc49 = loc("CWE190_Integer_Overflow__int_max_square_21.c":172:15)
#loc50 = loc("CWE190_Integer_Overflow__int_max_square_21.c":174:15)
#loc51 = loc("CWE190_Integer_Overflow__int_max_square_21.c":162:1)
#loc52 = loc("CWE190_Integer_Overflow__int_max_square_21.c":177:1)
#loc57 = loc("CWE190_Integer_Overflow__int_max_square_21.c":163:1)
#loc58 = loc("CWE190_Integer_Overflow__int_max_square_21.c":165:27)
#loc59 = loc("CWE190_Integer_Overflow__int_max_square_21.c":165:22)
#loc60 = loc("CWE190_Integer_Overflow__int_max_square_21.c":165:5)
#loc61 = loc("CWE190_Integer_Overflow__int_max_square_21.c":167:5)
#loc62 = loc("CWE190_Integer_Overflow__int_max_square_21.c":168:5)
#loc63 = loc("CWE190_Integer_Overflow__int_max_square_21.c":168:53)
#loc64 = loc("CWE190_Integer_Overflow__int_max_square_21.c":169:5)
#loc65 = loc("CWE190_Integer_Overflow__int_max_square_21.c":172:5)
#loc66 = loc("CWE190_Integer_Overflow__int_max_square_21.c":173:5)
#loc67 = loc("CWE190_Integer_Overflow__int_max_square_21.c":173:52)
#loc68 = loc("CWE190_Integer_Overflow__int_max_square_21.c":174:5)
#loc69 = loc("CWE190_Integer_Overflow__int_max_square_21.c":176:12)
#loc70 = loc("CWE190_Integer_Overflow__int_max_square_21.c":176:5)
#loc71 = loc("CWE190_Integer_Overflow__int_max_square_21.c":55:1)
#loc72 = loc("CWE190_Integer_Overflow__int_max_square_21.c":55:29)
#loc73 = loc("CWE190_Integer_Overflow__int_max_square_21.c":65:19)
#loc74 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc75 = loc("CWE190_Integer_Overflow__int_max_square_21.c":77:23)
#loc76 = loc("CWE190_Integer_Overflow__int_max_square_21.c":60:1)
#loc77 = loc("CWE190_Integer_Overflow__int_max_square_21.c":80:1)
#loc80 = loc("CWE190_Integer_Overflow__int_max_square_21.c":61:1)
#loc81 = loc("CWE190_Integer_Overflow__int_max_square_21.c":62:5)
#loc82 = loc("CWE190_Integer_Overflow__int_max_square_21.c":79:5)
#loc83 = loc("CWE190_Integer_Overflow__int_max_square_21.c":62:8)
#loc84 = loc("CWE190_Integer_Overflow__int_max_square_21.c":63:5)
#loc85 = loc("CWE190_Integer_Overflow__int_max_square_21.c":66:5)
#loc86 = loc("CWE190_Integer_Overflow__int_max_square_21.c":68:5)
#loc87 = loc("CWE190_Integer_Overflow__int_max_square_21.c":65:9)
#loc88 = loc("CWE190_Integer_Overflow__int_max_square_21.c":70:9)
#loc89 = loc("CWE190_Integer_Overflow__int_max_square_21.c":78:9)
#loc90 = loc("CWE190_Integer_Overflow__int_max_square_21.c":70:13)
#loc91 = loc("CWE190_Integer_Overflow__int_max_square_21.c":70:20)
#loc92 = loc("CWE190_Integer_Overflow__int_max_square_21.c":70:28)
#loc93 = loc("CWE190_Integer_Overflow__int_max_square_21.c":70:35)
#loc94 = loc("CWE190_Integer_Overflow__int_max_square_21.c":70:31)
#loc95 = loc("CWE190_Integer_Overflow__int_max_square_21.c":70:49)
#loc96 = loc("CWE190_Integer_Overflow__int_max_square_21.c":70:62)
#loc97 = loc("CWE190_Integer_Overflow__int_max_square_21.c":70:69)
#loc98 = loc("CWE190_Integer_Overflow__int_max_square_21.c":71:9)
#loc99 = loc("CWE190_Integer_Overflow__int_max_square_21.c":74:9)
#loc100 = loc("CWE190_Integer_Overflow__int_max_square_21.c":76:9)
#loc101 = loc("CWE190_Integer_Overflow__int_max_square_21.c":72:13)
#loc102 = loc("CWE190_Integer_Overflow__int_max_square_21.c":72:33)
#loc103 = loc("CWE190_Integer_Overflow__int_max_square_21.c":72:26)
#loc104 = loc("CWE190_Integer_Overflow__int_max_square_21.c":73:26)
#loc105 = loc("CWE190_Integer_Overflow__int_max_square_21.c":73:13)
#loc106 = loc("CWE190_Integer_Overflow__int_max_square_21.c":77:13)
#loc107 = loc("CWE190_Integer_Overflow__int_max_square_21.c":82:1)
#loc108 = loc("CWE190_Integer_Overflow__int_max_square_21.c":91:1)
#loc109 = loc("CWE190_Integer_Overflow__int_max_square_21.c":84:5)
#loc110 = loc("CWE190_Integer_Overflow__int_max_square_21.c":84:9)
#loc111 = loc("CWE190_Integer_Overflow__int_max_square_21.c":86:12)
#loc112 = loc("CWE190_Integer_Overflow__int_max_square_21.c":86:5)
#loc113 = loc("CWE190_Integer_Overflow__int_max_square_21.c":88:12)
#loc114 = loc("CWE190_Integer_Overflow__int_max_square_21.c":88:5)
#loc115 = loc("CWE190_Integer_Overflow__int_max_square_21.c":89:22)
#loc116 = loc("CWE190_Integer_Overflow__int_max_square_21.c":89:5)
#loc117 = loc("CWE190_Integer_Overflow__int_max_square_21.c":90:18)
#loc118 = loc("CWE190_Integer_Overflow__int_max_square_21.c":90:5)
#loc119 = loc("CWE190_Integer_Overflow__int_max_square_21.c":56:1)
#loc120 = loc("CWE190_Integer_Overflow__int_max_square_21.c":56:29)
#loc121 = loc("CWE190_Integer_Overflow__int_max_square_21.c":94:1)
#loc122 = loc("CWE190_Integer_Overflow__int_max_square_21.c":109:1)
#loc125 = loc("CWE190_Integer_Overflow__int_max_square_21.c":95:1)
#loc126 = loc("CWE190_Integer_Overflow__int_max_square_21.c":96:5)
#loc127 = loc("CWE190_Integer_Overflow__int_max_square_21.c":108:5)
#loc128 = loc("CWE190_Integer_Overflow__int_max_square_21.c":96:8)
#loc129 = loc("CWE190_Integer_Overflow__int_max_square_21.c":97:5)
#loc130 = loc("CWE190_Integer_Overflow__int_max_square_21.c":99:9)
#loc131 = loc("CWE190_Integer_Overflow__int_max_square_21.c":107:9)
#loc132 = loc("CWE190_Integer_Overflow__int_max_square_21.c":99:13)
#loc133 = loc("CWE190_Integer_Overflow__int_max_square_21.c":99:20)
#loc134 = loc("CWE190_Integer_Overflow__int_max_square_21.c":99:28)
#loc135 = loc("CWE190_Integer_Overflow__int_max_square_21.c":99:35)
#loc136 = loc("CWE190_Integer_Overflow__int_max_square_21.c":99:31)
#loc137 = loc("CWE190_Integer_Overflow__int_max_square_21.c":99:49)
#loc138 = loc("CWE190_Integer_Overflow__int_max_square_21.c":99:62)
#loc139 = loc("CWE190_Integer_Overflow__int_max_square_21.c":99:69)
#loc140 = loc("CWE190_Integer_Overflow__int_max_square_21.c":100:9)
#loc141 = loc("CWE190_Integer_Overflow__int_max_square_21.c":103:9)
#loc142 = loc("CWE190_Integer_Overflow__int_max_square_21.c":105:9)
#loc143 = loc("CWE190_Integer_Overflow__int_max_square_21.c":101:13)
#loc144 = loc("CWE190_Integer_Overflow__int_max_square_21.c":101:33)
#loc145 = loc("CWE190_Integer_Overflow__int_max_square_21.c":101:26)
#loc146 = loc("CWE190_Integer_Overflow__int_max_square_21.c":102:26)
#loc147 = loc("CWE190_Integer_Overflow__int_max_square_21.c":102:13)
#loc148 = loc("CWE190_Integer_Overflow__int_max_square_21.c":106:23)
#loc149 = loc("CWE190_Integer_Overflow__int_max_square_21.c":106:13)
#loc150 = loc("CWE190_Integer_Overflow__int_max_square_21.c":111:1)
#loc151 = loc("CWE190_Integer_Overflow__int_max_square_21.c":120:1)
#loc152 = loc("CWE190_Integer_Overflow__int_max_square_21.c":113:5)
#loc153 = loc("CWE190_Integer_Overflow__int_max_square_21.c":113:9)
#loc154 = loc("CWE190_Integer_Overflow__int_max_square_21.c":115:12)
#loc155 = loc("CWE190_Integer_Overflow__int_max_square_21.c":115:5)
#loc156 = loc("CWE190_Integer_Overflow__int_max_square_21.c":117:12)
#loc157 = loc("CWE190_Integer_Overflow__int_max_square_21.c":117:5)
#loc158 = loc("CWE190_Integer_Overflow__int_max_square_21.c":118:22)
#loc159 = loc("CWE190_Integer_Overflow__int_max_square_21.c":118:5)
#loc160 = loc("CWE190_Integer_Overflow__int_max_square_21.c":119:18)
#loc161 = loc("CWE190_Integer_Overflow__int_max_square_21.c":119:5)
#loc162 = loc("CWE190_Integer_Overflow__int_max_square_21.c":57:1)
#loc163 = loc("CWE190_Integer_Overflow__int_max_square_21.c":57:28)
#loc164 = loc("CWE190_Integer_Overflow__int_max_square_21.c":123:1)
#loc165 = loc("CWE190_Integer_Overflow__int_max_square_21.c":133:1)
#loc168 = loc("CWE190_Integer_Overflow__int_max_square_21.c":124:1)
#loc169 = loc("CWE190_Integer_Overflow__int_max_square_21.c":125:5)
#loc170 = loc("CWE190_Integer_Overflow__int_max_square_21.c":132:5)
#loc171 = loc("CWE190_Integer_Overflow__int_max_square_21.c":125:8)
#loc172 = loc("CWE190_Integer_Overflow__int_max_square_21.c":126:5)
#loc173 = loc("CWE190_Integer_Overflow__int_max_square_21.c":127:9)
#loc174 = loc("CWE190_Integer_Overflow__int_max_square_21.c":131:9)
#loc175 = loc("CWE190_Integer_Overflow__int_max_square_21.c":129:13)
#loc176 = loc("CWE190_Integer_Overflow__int_max_square_21.c":129:33)
#loc177 = loc("CWE190_Integer_Overflow__int_max_square_21.c":129:26)
#loc178 = loc("CWE190_Integer_Overflow__int_max_square_21.c":130:26)
#loc179 = loc("CWE190_Integer_Overflow__int_max_square_21.c":130:13)
#loc180 = loc("CWE190_Integer_Overflow__int_max_square_21.c":135:1)
#loc181 = loc("CWE190_Integer_Overflow__int_max_square_21.c":144:1)
#loc182 = loc("CWE190_Integer_Overflow__int_max_square_21.c":137:5)
#loc183 = loc("CWE190_Integer_Overflow__int_max_square_21.c":137:9)
#loc184 = loc("CWE190_Integer_Overflow__int_max_square_21.c":139:12)
#loc185 = loc("CWE190_Integer_Overflow__int_max_square_21.c":139:5)
#loc186 = loc("CWE190_Integer_Overflow__int_max_square_21.c":141:12)
#loc187 = loc("CWE190_Integer_Overflow__int_max_square_21.c":141:5)
#loc188 = loc("CWE190_Integer_Overflow__int_max_square_21.c":142:21)
#loc189 = loc("CWE190_Integer_Overflow__int_max_square_21.c":142:5)
#loc190 = loc("CWE190_Integer_Overflow__int_max_square_21.c":143:17)
#loc191 = loc("CWE190_Integer_Overflow__int_max_square_21.c":143:5)
#loc192 = loc(fused[#loc1, #loc2])
#loc193 = loc(fused[#loc3, #loc4])
#loc194 = loc(fused[#loc5, #loc6])
#loc196 = loc(fused[#loc10, #loc11])
#loc197 = loc(fused[#loc13, #loc11])
#loc198 = loc(fused[#loc14, #loc15])
#loc199 = loc(fused[#loc16, #loc17])
#loc200 = loc(fused[#loc21, #loc22])
#loc201 = loc(fused[#loc23, #loc24])
#loc202 = loc(fused[#loc26, #loc25])
#loc203 = loc(fused[#loc28, #loc27])
#loc204 = loc(fused[#loc30, #loc29])
#loc205 = loc(fused[#loc33, #loc34])
#loc206 = loc(fused[#loc35, #loc36])
#loc207 = loc(fused[#loc37, #loc38])
#loc208 = loc(fused[#loc39, #loc40])
#loc209 = loc(fused[#loc41, #loc42])
#loc210 = loc(fused[#loc43, #loc44])
#loc211 = loc(fused[#loc45, #loc46])
#loc212 = loc(fused[#loc51, #loc52])
#loc215 = loc(fused[#loc62, #loc63])
#loc216 = loc(fused[#loc66, #loc67])
#loc217 = loc(fused[#loc70, #loc69])
#loc218 = loc(fused[#loc71, #loc72])
#loc219 = loc(fused[#loc76, #loc77])
#loc221 = loc(fused[#loc81, #loc82])
#loc222 = loc(fused[#loc84, #loc85, #loc86, #loc82])
#loc223 = loc(fused[#loc88, #loc89])
#loc224 = loc(fused[#loc90, #loc91])
#loc225 = loc(fused[#loc94, #loc97])
#loc226 = loc(fused[#loc98, #loc99, #loc100, #loc89])
#loc227 = loc(fused[#loc101, #loc102])
#loc228 = loc(fused[#loc107, #loc108])
#loc229 = loc(fused[#loc109, #loc110])
#loc230 = loc(fused[#loc112, #loc111])
#loc231 = loc(fused[#loc114, #loc113])
#loc232 = loc(fused[#loc116, #loc115])
#loc233 = loc(fused[#loc119, #loc120])
#loc234 = loc(fused[#loc121, #loc122])
#loc236 = loc(fused[#loc126, #loc127])
#loc237 = loc(fused[#loc129, #loc127])
#loc238 = loc(fused[#loc130, #loc131])
#loc239 = loc(fused[#loc132, #loc133])
#loc240 = loc(fused[#loc136, #loc139])
#loc241 = loc(fused[#loc140, #loc141, #loc142, #loc131])
#loc242 = loc(fused[#loc143, #loc144])
#loc243 = loc(fused[#loc150, #loc151])
#loc244 = loc(fused[#loc152, #loc153])
#loc245 = loc(fused[#loc155, #loc154])
#loc246 = loc(fused[#loc157, #loc156])
#loc247 = loc(fused[#loc159, #loc158])
#loc248 = loc(fused[#loc162, #loc163])
#loc249 = loc(fused[#loc164, #loc165])
#loc251 = loc(fused[#loc169, #loc170])
#loc252 = loc(fused[#loc172, #loc170])
#loc253 = loc(fused[#loc173, #loc174])
#loc254 = loc(fused[#loc175, #loc176])
#loc255 = loc(fused[#loc180, #loc181])
#loc256 = loc(fused[#loc182, #loc183])
#loc257 = loc(fused[#loc185, #loc184])
#loc258 = loc(fused[#loc187, #loc186])
#loc259 = loc(fused[#loc189, #loc188])
