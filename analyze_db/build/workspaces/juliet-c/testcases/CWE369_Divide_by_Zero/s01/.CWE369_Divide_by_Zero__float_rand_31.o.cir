!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc17 = loc("CWE369_Divide_by_Zero__float_rand_31.c":30:19)
#loc70 = loc("CWE369_Divide_by_Zero__float_rand_31.c":72:19)
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc87)
  cir.func private @printIntLine(!s32i) loc(#loc88)
  cir.func no_proto @CWE369_Divide_by_Zero__float_rand_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc90)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc91)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc92)
    %3 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc93)
    %4 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc15)
    cir.store %4, %3 : !cir.float, !cir.ptr<!cir.float> loc(#loc94)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc17)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc17)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc17)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc17)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc17)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc17)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc17)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc17)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc17)
    cir.br ^bb3(%20 : !u32i) loc(#loc17)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc17)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc17)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc17)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc17)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc17)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc17)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc17)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc17)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc17)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc17)
    cir.br ^bb3(%36 : !u32i) loc(#loc17)
  ^bb3(%37: !u32i loc("CWE369_Divide_by_Zero__float_rand_31.c":30:19)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc17)
    %39 = cir.cast(int_to_float, %38 : !s32i), !cir.float loc(#loc17)
    cir.store %39, %3 : !cir.float, !cir.ptr<!cir.float> loc(#loc95)
    cir.br ^bb5 loc(#loc96)
  ^bb5:  // pred: ^bb4
    %40 = cir.load %3 : !cir.ptr<!cir.float>, !cir.float loc(#loc8)
    cir.store %40, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc90)
    %41 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc10)
    cir.store %41, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc91)
    cir.br ^bb6 loc(#loc97)
  ^bb6:  // pred: ^bb5
    %42 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc23)
    %43 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc24)
    %44 = cir.cast(floating, %43 : !cir.float), !cir.double loc(#loc24)
    %45 = cir.binop(div, %42, %44) : !cir.double loc(#loc98)
    %46 = cir.cast(float_to_int, %45 : !cir.double), !s32i loc(#loc98)
    cir.store %46, %2 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    %47 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    cir.call @printIntLine(%47) : (!s32i) -> () loc(#loc26)
    cir.br ^bb7 loc(#loc22)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc20)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc6)
  } loc(#loc89)
  cir.func no_proto @CWE369_Divide_by_Zero__float_rand_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc100)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc101)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc99)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc103)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc104)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc105)
    %3 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc106)
    %4 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc43)
    cir.store %4, %3 : !cir.float, !cir.ptr<!cir.float> loc(#loc107)
    %5 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc45)
    cir.store %5, %3 : !cir.float, !cir.ptr<!cir.float> loc(#loc108)
    cir.br ^bb1 loc(#loc109)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %3 : !cir.ptr<!cir.float>, !cir.float loc(#loc36)
    cir.store %6, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc103)
    %7 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc38)
    cir.store %7, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc104)
    cir.br ^bb2 loc(#loc110)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc51)
    %9 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc52)
    %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc52)
    %11 = cir.binop(div, %8, %10) : !cir.double loc(#loc111)
    %12 = cir.cast(float_to_int, %11 : !cir.double), !s32i loc(#loc111)
    cir.store %12, %2 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc54)
    cir.br ^bb3 loc(#loc50)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc48)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc34)
  } loc(#loc102)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc112)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc57)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc114)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc115)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc116)
    %3 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc117)
    %4 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc68)
    cir.store %4, %3 : !cir.float, !cir.ptr<!cir.float> loc(#loc118)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc70)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc70)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc70)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc70)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc70)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc70)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc70)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc70)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc70)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc70)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc70)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc70)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc70)
    cir.br ^bb3(%20 : !u32i) loc(#loc70)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc70)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc70)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc70)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc70)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc70)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc70)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc70)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc70)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc70)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc70)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc70)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc70)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc70)
    cir.br ^bb3(%36 : !u32i) loc(#loc70)
  ^bb3(%37: !u32i loc("CWE369_Divide_by_Zero__float_rand_31.c":72:19)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc70)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc70)
    %39 = cir.cast(int_to_float, %38 : !s32i), !cir.float loc(#loc70)
    cir.store %39, %3 : !cir.float, !cir.ptr<!cir.float> loc(#loc119)
    cir.br ^bb5 loc(#loc120)
  ^bb5:  // pred: ^bb4
    %40 = cir.load %3 : !cir.ptr<!cir.float>, !cir.float loc(#loc61)
    cir.store %40, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc114)
    %41 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc63)
    cir.store %41, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc115)
    cir.br ^bb6 loc(#loc121)
  ^bb6:  // pred: ^bb5
    %42 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc76)
    %43 = cir.cast(floating, %42 : !cir.float), !cir.double loc(#loc76)
    %44 = cir.fabs %43 : !cir.double loc(#loc76)
    %45 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc77)
    %46 = cir.cmp(gt, %44, %45) : !cir.double, !cir.bool loc(#loc122)
    cir.brcond %46 ^bb7, ^bb8 loc(#loc123)
  ^bb7:  // pred: ^bb6
    %47 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc82)
    %48 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc83)
    %49 = cir.cast(floating, %48 : !cir.float), !cir.double loc(#loc83)
    %50 = cir.binop(div, %47, %49) : !cir.double loc(#loc124)
    %51 = cir.cast(float_to_int, %50 : !cir.double), !s32i loc(#loc124)
    cir.store %51, %2 : !s32i, !cir.ptr<!s32i> loc(#loc116)
    %52 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc84)
    cir.call @printIntLine(%52) : (!s32i) -> () loc(#loc85)
    cir.br ^bb9 loc(#loc80)
  ^bb8:  // pred: ^bb6
    %53 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc57)
    %54 = cir.cast(array_to_ptrdecay, %53 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%54) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    cir.br ^bb9 loc(#loc75)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc75)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc73)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc59)
  } loc(#loc113)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE369_Divide_by_Zero__float_rand_31.c":24:1)
#loc6 = loc("CWE369_Divide_by_Zero__float_rand_31.c":40:1)
#loc7 = loc("CWE369_Divide_by_Zero__float_rand_31.c":32:9)
#loc8 = loc("CWE369_Divide_by_Zero__float_rand_31.c":32:26)
#loc9 = loc("CWE369_Divide_by_Zero__float_rand_31.c":33:9)
#loc10 = loc("CWE369_Divide_by_Zero__float_rand_31.c":33:22)
#loc11 = loc("CWE369_Divide_by_Zero__float_rand_31.c":36:13)
#loc12 = loc("CWE369_Divide_by_Zero__float_rand_31.c":36:44)
#loc13 = loc("CWE369_Divide_by_Zero__float_rand_31.c":26:5)
#loc14 = loc("CWE369_Divide_by_Zero__float_rand_31.c":26:11)
#loc15 = loc("CWE369_Divide_by_Zero__float_rand_31.c":28:12)
#loc16 = loc("CWE369_Divide_by_Zero__float_rand_31.c":28:5)
#loc18 = loc("CWE369_Divide_by_Zero__float_rand_31.c":30:5)
#loc19 = loc("CWE369_Divide_by_Zero__float_rand_31.c":31:5)
#loc20 = loc("CWE369_Divide_by_Zero__float_rand_31.c":39:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_rand_31.c":34:9)
#loc22 = loc("CWE369_Divide_by_Zero__float_rand_31.c":38:9)
#loc23 = loc("CWE369_Divide_by_Zero__float_rand_31.c":36:32)
#loc24 = loc("CWE369_Divide_by_Zero__float_rand_31.c":36:40)
#loc25 = loc("CWE369_Divide_by_Zero__float_rand_31.c":37:26)
#loc26 = loc("CWE369_Divide_by_Zero__float_rand_31.c":37:13)
#loc27 = loc("CWE369_Divide_by_Zero__float_rand_31.c":89:1)
#loc28 = loc("CWE369_Divide_by_Zero__float_rand_31.c":93:1)
#loc29 = loc("CWE369_Divide_by_Zero__float_rand_31.c":91:5)
#loc30 = loc("CWE369_Divide_by_Zero__float_rand_31.c":91:13)
#loc31 = loc("CWE369_Divide_by_Zero__float_rand_31.c":92:5)
#loc32 = loc("CWE369_Divide_by_Zero__float_rand_31.c":92:13)
#loc33 = loc("CWE369_Divide_by_Zero__float_rand_31.c":47:1)
#loc34 = loc("CWE369_Divide_by_Zero__float_rand_31.c":63:1)
#loc35 = loc("CWE369_Divide_by_Zero__float_rand_31.c":55:9)
#loc36 = loc("CWE369_Divide_by_Zero__float_rand_31.c":55:26)
#loc37 = loc("CWE369_Divide_by_Zero__float_rand_31.c":56:9)
#loc38 = loc("CWE369_Divide_by_Zero__float_rand_31.c":56:22)
#loc39 = loc("CWE369_Divide_by_Zero__float_rand_31.c":59:13)
#loc40 = loc("CWE369_Divide_by_Zero__float_rand_31.c":59:44)
#loc41 = loc("CWE369_Divide_by_Zero__float_rand_31.c":49:5)
#loc42 = loc("CWE369_Divide_by_Zero__float_rand_31.c":49:11)
#loc43 = loc("CWE369_Divide_by_Zero__float_rand_31.c":51:12)
#loc44 = loc("CWE369_Divide_by_Zero__float_rand_31.c":51:5)
#loc45 = loc("CWE369_Divide_by_Zero__float_rand_31.c":53:12)
#loc46 = loc("CWE369_Divide_by_Zero__float_rand_31.c":53:5)
#loc47 = loc("CWE369_Divide_by_Zero__float_rand_31.c":54:5)
#loc48 = loc("CWE369_Divide_by_Zero__float_rand_31.c":62:5)
#loc49 = loc("CWE369_Divide_by_Zero__float_rand_31.c":57:9)
#loc50 = loc("CWE369_Divide_by_Zero__float_rand_31.c":61:9)
#loc51 = loc("CWE369_Divide_by_Zero__float_rand_31.c":59:32)
#loc52 = loc("CWE369_Divide_by_Zero__float_rand_31.c":59:40)
#loc53 = loc("CWE369_Divide_by_Zero__float_rand_31.c":60:26)
#loc54 = loc("CWE369_Divide_by_Zero__float_rand_31.c":60:13)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc57 = loc("CWE369_Divide_by_Zero__float_rand_31.c":84:23)
#loc58 = loc("CWE369_Divide_by_Zero__float_rand_31.c":66:1)
#loc59 = loc("CWE369_Divide_by_Zero__float_rand_31.c":87:1)
#loc60 = loc("CWE369_Divide_by_Zero__float_rand_31.c":74:9)
#loc61 = loc("CWE369_Divide_by_Zero__float_rand_31.c":74:26)
#loc62 = loc("CWE369_Divide_by_Zero__float_rand_31.c":75:9)
#loc63 = loc("CWE369_Divide_by_Zero__float_rand_31.c":75:22)
#loc64 = loc("CWE369_Divide_by_Zero__float_rand_31.c":79:13)
#loc65 = loc("CWE369_Divide_by_Zero__float_rand_31.c":79:44)
#loc66 = loc("CWE369_Divide_by_Zero__float_rand_31.c":68:5)
#loc67 = loc("CWE369_Divide_by_Zero__float_rand_31.c":68:11)
#loc68 = loc("CWE369_Divide_by_Zero__float_rand_31.c":70:12)
#loc69 = loc("CWE369_Divide_by_Zero__float_rand_31.c":70:5)
#loc71 = loc("CWE369_Divide_by_Zero__float_rand_31.c":72:5)
#loc72 = loc("CWE369_Divide_by_Zero__float_rand_31.c":73:5)
#loc73 = loc("CWE369_Divide_by_Zero__float_rand_31.c":86:5)
#loc74 = loc("CWE369_Divide_by_Zero__float_rand_31.c":77:9)
#loc75 = loc("CWE369_Divide_by_Zero__float_rand_31.c":85:9)
#loc76 = loc("CWE369_Divide_by_Zero__float_rand_31.c":77:17)
#loc77 = loc("CWE369_Divide_by_Zero__float_rand_31.c":77:25)
#loc78 = loc("CWE369_Divide_by_Zero__float_rand_31.c":77:12)
#loc79 = loc("CWE369_Divide_by_Zero__float_rand_31.c":78:9)
#loc80 = loc("CWE369_Divide_by_Zero__float_rand_31.c":81:9)
#loc81 = loc("CWE369_Divide_by_Zero__float_rand_31.c":83:9)
#loc82 = loc("CWE369_Divide_by_Zero__float_rand_31.c":79:32)
#loc83 = loc("CWE369_Divide_by_Zero__float_rand_31.c":79:40)
#loc84 = loc("CWE369_Divide_by_Zero__float_rand_31.c":80:26)
#loc85 = loc("CWE369_Divide_by_Zero__float_rand_31.c":80:13)
#loc86 = loc("CWE369_Divide_by_Zero__float_rand_31.c":84:13)
#loc87 = loc(fused[#loc1, #loc2])
#loc88 = loc(fused[#loc3, #loc4])
#loc89 = loc(fused[#loc5, #loc6])
#loc90 = loc(fused[#loc7, #loc8])
#loc91 = loc(fused[#loc9, #loc10])
#loc92 = loc(fused[#loc11, #loc12])
#loc93 = loc(fused[#loc13, #loc14])
#loc94 = loc(fused[#loc16, #loc15])
#loc95 = loc(fused[#loc18, #loc17])
#loc96 = loc(fused[#loc19, #loc20])
#loc97 = loc(fused[#loc21, #loc22])
#loc98 = loc(fused[#loc23, #loc24])
#loc99 = loc(fused[#loc27, #loc28])
#loc100 = loc(fused[#loc29, #loc30])
#loc101 = loc(fused[#loc31, #loc32])
#loc102 = loc(fused[#loc33, #loc34])
#loc103 = loc(fused[#loc35, #loc36])
#loc104 = loc(fused[#loc37, #loc38])
#loc105 = loc(fused[#loc39, #loc40])
#loc106 = loc(fused[#loc41, #loc42])
#loc107 = loc(fused[#loc44, #loc43])
#loc108 = loc(fused[#loc46, #loc45])
#loc109 = loc(fused[#loc47, #loc48])
#loc110 = loc(fused[#loc49, #loc50])
#loc111 = loc(fused[#loc51, #loc52])
#loc112 = loc(fused[#loc55, #loc56])
#loc113 = loc(fused[#loc58, #loc59])
#loc114 = loc(fused[#loc60, #loc61])
#loc115 = loc(fused[#loc62, #loc63])
#loc116 = loc(fused[#loc64, #loc65])
#loc117 = loc(fused[#loc66, #loc67])
#loc118 = loc(fused[#loc69, #loc68])
#loc119 = loc(fused[#loc71, #loc70])
#loc120 = loc(fused[#loc72, #loc73])
#loc121 = loc(fused[#loc74, #loc75])
#loc122 = loc(fused[#loc78, #loc77])
#loc123 = loc(fused[#loc79, #loc80, #loc81, #loc75])
#loc124 = loc(fused[#loc82, #loc83])
