!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc11 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":20:23)
#loc12 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":20:27)
#loc54 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":35:24)
#loc55 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":35:28)
#loc92 = loc(fused[#loc11, #loc12])
#loc105 = loc(fused[#loc54, #loc55])
module @"/workspaces/juliet-c/testcases/CWE479_Signal_Handler_Use_of_Non_Reentrant_Function/CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @signal(!s32i, !cir.ptr<!cir.func<(!s32i)>>) -> !cir.ptr<!cir.func<(!s32i)>> extra(#fn_attr) loc(#loc87)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc88)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc89)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc90)
  cir.func internal private @helperBad(%arg0: !s32i loc(fused[#loc11, #loc12])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["sig", init] {alignment = 4 : i64} loc(#loc92)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["voidPointer", init] {alignment = 8 : i64} loc(#loc93)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc15)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc16)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc17)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc17)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc16)
    cir.store %5, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc93)
    cir.scope {
      %8 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc20)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc21)
      %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!void>, !cir.bool loc(#loc95)
      cir.if %10 {
        %11 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc23)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc24)
        %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc25)
        cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc23)
      } loc(#loc96)
    } loc(#loc94)
    %6 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc26)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc27)
    cir.call @free(%7) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc26)
    cir.return loc(#loc10)
  } loc(#loc91)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc97)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc30)
  cir.func no_proto @CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc35)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.const #cir.int<2> : !s32i loc(#loc37)
          %2 = cir.get_global @helperBad : !cir.ptr<!cir.func<(!s32i)>> loc(#loc38)
          %3 = cir.call @signal(%1, %2) : (!s32i, !cir.ptr<!cir.func<(!s32i)>>) -> !cir.ptr<!cir.func<(!s32i)>> extra(#fn_attr) loc(#loc39)
          cir.break loc(#loc40)
        } loc(#loc36)
        cir.case(default, []) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc30)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc30)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc42)
          cir.break loc(#loc43)
        } loc(#loc41)
        cir.yield loc(#loc33)
      } loc(#loc33)
    } loc(#loc99)
    cir.return loc(#loc32)
  } loc(#loc98)
  cir.func no_proto @CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc101)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc102)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc48)
    cir.return loc(#loc45)
  } loc(#loc100)
  cir.global "private" internal dsolocal @volatileSigAtomic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc103)
  cir.func internal private @helperGood(%arg0: !s32i loc(fused[#loc54, #loc55])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["sig", init] {alignment = 4 : i64} loc(#loc105)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc56)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    %2 = cir.get_global @volatileSigAtomic : !cir.ptr<!s32i> loc(#loc103)
    cir.store volatile %1, %2 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    cir.return loc(#loc53)
  } loc(#loc104)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc63)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc65)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc65)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc66)
          cir.break loc(#loc67)
        } loc(#loc64)
        cir.case(default, []) {
          %1 = cir.const #cir.int<2> : !s32i loc(#loc69)
          %2 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!s32i)>> loc(#loc70)
          %3 = cir.call @signal(%1, %2) : (!s32i, !cir.ptr<!cir.func<(!s32i)>>) -> !cir.ptr<!cir.func<(!s32i)>> extra(#fn_attr) loc(#loc71)
          cir.break loc(#loc72)
        } loc(#loc68)
        cir.yield loc(#loc61)
      } loc(#loc61)
    } loc(#loc108)
    cir.return loc(#loc60)
  } loc(#loc107)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc77)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.const #cir.int<2> : !s32i loc(#loc79)
          %2 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!s32i)>> loc(#loc80)
          %3 = cir.call @signal(%1, %2) : (!s32i, !cir.ptr<!cir.func<(!s32i)>>) -> !cir.ptr<!cir.func<(!s32i)>> extra(#fn_attr) loc(#loc81)
          cir.break loc(#loc82)
        } loc(#loc78)
        cir.case(default, []) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc84)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc84)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc85)
          cir.break loc(#loc86)
        } loc(#loc83)
        cir.yield loc(#loc75)
      } loc(#loc75)
    } loc(#loc110)
    cir.return loc(#loc74)
  } loc(#loc109)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE479_Signal_Handler_Use_of_Non_Reentrant_Function/CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":0:0)
#loc1 = loc("/usr/include/signal.h":88:1)
#loc2 = loc("/usr/include/signal.h":89:6)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":20:1)
#loc10 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":31:1)
#loc13 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":28:5)
#loc14 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":28:34)
#loc15 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":21:1)
#loc16 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":28:25)
#loc17 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":28:32)
#loc18 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":29:5)
#loc19 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":29:40)
#loc20 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":29:9)
#loc21 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":29:24)
#loc22 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":29:30)
#loc23 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":29:31)
#loc24 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":29:37)
#loc25 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":29:36)
#loc26 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":30:5)
#loc27 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":30:10)
#loc28 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc29 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc30 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":55:19)
#loc31 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":46:1)
#loc32 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":58:1)
#loc33 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":48:5)
#loc34 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":57:5)
#loc35 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":48:12)
#loc36 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":50:5)
#loc37 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":51:16)
#loc38 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":51:24)
#loc39 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":51:9)
#loc40 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":52:9)
#loc41 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":53:5)
#loc42 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":55:9)
#loc43 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":56:9)
#loc44 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":94:1)
#loc45 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":98:1)
#loc46 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":96:5)
#loc47 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":96:11)
#loc48 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":97:5)
#loc49 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":97:11)
#loc50 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":33:1)
#loc51 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":33:50)
#loc52 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":35:1)
#loc53 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":42:1)
#loc56 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":36:1)
#loc57 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":41:25)
#loc58 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":41:5)
#loc59 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":65:1)
#loc60 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":77:1)
#loc61 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":67:5)
#loc62 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":76:5)
#loc63 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":67:12)
#loc64 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":69:5)
#loc65 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":71:19)
#loc66 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":71:9)
#loc67 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":72:9)
#loc68 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":73:5)
#loc69 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":74:16)
#loc70 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":74:24)
#loc71 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":74:9)
#loc72 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":75:9)
#loc73 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":80:1)
#loc74 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":92:1)
#loc75 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":82:5)
#loc76 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":91:5)
#loc77 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":82:12)
#loc78 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":84:5)
#loc79 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":85:16)
#loc80 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":85:24)
#loc81 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":85:9)
#loc82 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":86:9)
#loc83 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":87:5)
#loc84 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":89:19)
#loc85 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":89:9)
#loc86 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":90:9)
#loc87 = loc(fused[#loc1, #loc2])
#loc88 = loc(fused[#loc3, #loc4])
#loc89 = loc(fused[#loc5, #loc6])
#loc90 = loc(fused[#loc7, #loc8])
#loc91 = loc(fused[#loc9, #loc10])
#loc93 = loc(fused[#loc13, #loc14])
#loc94 = loc(fused[#loc18, #loc19])
#loc95 = loc(fused[#loc20, #loc21])
#loc96 = loc(fused[#loc22, #loc19])
#loc97 = loc(fused[#loc28, #loc29])
#loc98 = loc(fused[#loc31, #loc32])
#loc99 = loc(fused[#loc33, #loc34])
#loc100 = loc(fused[#loc44, #loc45])
#loc101 = loc(fused[#loc46, #loc47])
#loc102 = loc(fused[#loc48, #loc49])
#loc103 = loc(fused[#loc50, #loc51])
#loc104 = loc(fused[#loc52, #loc53])
#loc106 = loc(fused[#loc58, #loc57])
#loc107 = loc(fused[#loc59, #loc60])
#loc108 = loc(fused[#loc61, #loc62])
#loc109 = loc(fused[#loc73, #loc74])
#loc110 = loc(fused[#loc75, #loc76])
