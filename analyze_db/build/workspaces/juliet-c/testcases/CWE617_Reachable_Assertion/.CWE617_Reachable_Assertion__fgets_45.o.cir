!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fgets_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc74)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc75)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc76)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.global "private" internal dsolocal @CWE617_Reachable_Assertion__fgets_45_badData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc78)
  cir.func no_proto @CWE617_Reachable_Assertion__fgets_45_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc80)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc81)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc19)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    cir.br ^bb1 loc(#loc83)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc80)
    cir.store %4, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc80)
    cir.br ^bb2 loc(#loc84)
  ^bb2:  // pred: ^bb1
    %5 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc25)
    %6 = cir.const #cir.int<3> : !s32i loc(#loc26)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc26)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc26)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc26)
    %10 = cir.const #cir.int<2> : !s32i loc(#loc26)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc26)
    %12 = cir.binop(add, %9, %11) : !u64i loc(#loc26)
    %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc26)
    %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc75)
    %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc27)
    %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc28)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc29)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc29)
    %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc85)
    cir.brcond %19 ^bb3, ^bb4 loc(#loc86)
  ^bb3:  // pred: ^bb2
    %20 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc33)
    %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc34)
    cir.store %21, %1 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    cir.br ^bb5 loc(#loc31)
  ^bb4:  // pred: ^bb2
    %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc37)
    cir.br ^bb5 loc(#loc24)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc24)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc22)
  ^bb7:  // pred: ^bb6
    %24 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc38)
    %25 = cir.get_global @CWE617_Reachable_Assertion__fgets_45_badData : !cir.ptr<!s32i> loc(#loc78)
    cir.store %24, %25 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    %26 = cir.get_global @badSink : !cir.ptr<!cir.func<()>> loc(#loc89)
    cir.call %26() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    cir.return loc(#loc13)
  } loc(#loc79)
  cir.func no_proto @CWE617_Reachable_Assertion__fgets_45_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc91)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    cir.return loc(#loc43)
  } loc(#loc90)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc92)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"CWE617_Reachable_Assertion__fgets_45.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void badSink()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc48)
  cir.func no_proto internal private @badSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc94)
    %1 = cir.get_global @CWE617_Reachable_Assertion__fgets_45_badData : !cir.ptr<!s32i> loc(#loc78)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc48)
    cir.br ^bb1 loc(#loc48)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc48)
  ^bb2:  // pred: ^bb1
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc48)
    %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc48)
    cir.brcond %6 ^bb3, ^bb4 loc(#loc48)
  ^bb3:  // pred: ^bb2
    cir.br ^bb5 loc(#loc48)
  ^bb4:  // pred: ^bb2
    %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc48)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc48)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc48)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc48)
    %11 = cir.const #cir.int<34> : !s32i loc(#loc48)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc48)
    %13 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc48)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc48)
    cir.br ^bb5 loc(#loc48)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc48)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc48)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc50)
  } loc(#loc93)
  cir.global "private" internal dsolocal @CWE617_Reachable_Assertion__fgets_45_goodG2BData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc95)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc97)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc60)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc62)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc63)
    %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc62)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
    %7 = cir.get_global @CWE617_Reachable_Assertion__fgets_45_goodG2BData : !cir.ptr<!s32i> loc(#loc95)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    %8 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<()>> loc(#loc101)
    cir.call %8() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc67)
    cir.return loc(#loc56)
  } loc(#loc96)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void goodG2BSink()\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc69)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc103)
    %1 = cir.get_global @CWE617_Reachable_Assertion__fgets_45_goodG2BData : !cir.ptr<!s32i> loc(#loc95)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc73)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc69)
    cir.br ^bb1 loc(#loc69)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc69)
  ^bb2:  // pred: ^bb1
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc69)
    %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc69)
    cir.brcond %6 ^bb3, ^bb4 loc(#loc69)
  ^bb3:  // pred: ^bb2
    cir.br ^bb5 loc(#loc69)
  ^bb4:  // pred: ^bb2
    %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc69)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc69)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc69)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc69)
    %11 = cir.const #cir.int<68> : !s32i loc(#loc69)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc69)
    %13 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc69)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc69)
    cir.br ^bb5 loc(#loc69)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc69)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc69)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc71)
  } loc(#loc102)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fgets_45.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE617_Reachable_Assertion__fgets_45.c":52:23)
#loc10 = loc("CWE617_Reachable_Assertion__fgets_45.c":25:1)
#loc11 = loc("CWE617_Reachable_Assertion__fgets_45.c":25:12)
#loc12 = loc("CWE617_Reachable_Assertion__fgets_45.c":37:1)
#loc13 = loc("CWE617_Reachable_Assertion__fgets_45.c":57:1)
#loc14 = loc("CWE617_Reachable_Assertion__fgets_45.c":43:9)
#loc15 = loc("CWE617_Reachable_Assertion__fgets_45.c":43:45)
#loc16 = loc("CWE617_Reachable_Assertion__fgets_45.c":39:5)
#loc17 = loc("CWE617_Reachable_Assertion__fgets_45.c":39:9)
#loc18 = loc("CWE617_Reachable_Assertion__fgets_45.c":41:13)
#loc19 = loc("CWE617_Reachable_Assertion__fgets_45.c":41:12)
#loc20 = loc("CWE617_Reachable_Assertion__fgets_45.c":41:5)
#loc21 = loc("CWE617_Reachable_Assertion__fgets_45.c":42:5)
#loc22 = loc("CWE617_Reachable_Assertion__fgets_45.c":54:5)
#loc23 = loc("CWE617_Reachable_Assertion__fgets_45.c":45:9)
#loc24 = loc("CWE617_Reachable_Assertion__fgets_45.c":53:9)
#loc25 = loc("CWE617_Reachable_Assertion__fgets_45.c":45:19)
#loc26 = loc("CWE617_Reachable_Assertion__fgets_45.c":45:32)
#loc27 = loc("CWE617_Reachable_Assertion__fgets_45.c":45:49)
#loc28 = loc("CWE617_Reachable_Assertion__fgets_45.c":45:13)
#loc29 = loc("CWE617_Reachable_Assertion__fgets_45.c":45:59)
#loc30 = loc("CWE617_Reachable_Assertion__fgets_45.c":46:9)
#loc31 = loc("CWE617_Reachable_Assertion__fgets_45.c":49:9)
#loc32 = loc("CWE617_Reachable_Assertion__fgets_45.c":51:9)
#loc33 = loc("CWE617_Reachable_Assertion__fgets_45.c":48:25)
#loc34 = loc("CWE617_Reachable_Assertion__fgets_45.c":48:20)
#loc35 = loc("CWE617_Reachable_Assertion__fgets_45.c":48:13)
#loc36 = loc("CWE617_Reachable_Assertion__fgets_45.c":48:36)
#loc37 = loc("CWE617_Reachable_Assertion__fgets_45.c":52:13)
#loc38 = loc("CWE617_Reachable_Assertion__fgets_45.c":55:52)
#loc39 = loc("CWE617_Reachable_Assertion__fgets_45.c":55:5)
#loc40 = loc("CWE617_Reachable_Assertion__fgets_45.c":56:5)
#loc41 = loc("CWE617_Reachable_Assertion__fgets_45.c":56:13)
#loc42 = loc("CWE617_Reachable_Assertion__fgets_45.c":82:1)
#loc43 = loc("CWE617_Reachable_Assertion__fgets_45.c":85:1)
#loc44 = loc("CWE617_Reachable_Assertion__fgets_45.c":84:5)
#loc45 = loc("CWE617_Reachable_Assertion__fgets_45.c":84:13)
#loc46 = loc("/usr/include/assert.h":69:1)
#loc47 = loc("/usr/include/assert.h":71:43)
#loc48 = loc("CWE617_Reachable_Assertion__fgets_45.c":34:5)
#loc49 = loc("CWE617_Reachable_Assertion__fgets_45.c":30:1)
#loc50 = loc("CWE617_Reachable_Assertion__fgets_45.c":35:1)
#loc51 = loc("CWE617_Reachable_Assertion__fgets_45.c":32:5)
#loc52 = loc("CWE617_Reachable_Assertion__fgets_45.c":32:16)
#loc53 = loc("CWE617_Reachable_Assertion__fgets_45.c":26:1)
#loc54 = loc("CWE617_Reachable_Assertion__fgets_45.c":26:12)
#loc55 = loc("CWE617_Reachable_Assertion__fgets_45.c":71:1)
#loc56 = loc("CWE617_Reachable_Assertion__fgets_45.c":80:1)
#loc57 = loc("CWE617_Reachable_Assertion__fgets_45.c":73:5)
#loc58 = loc("CWE617_Reachable_Assertion__fgets_45.c":73:9)
#loc59 = loc("CWE617_Reachable_Assertion__fgets_45.c":75:13)
#loc60 = loc("CWE617_Reachable_Assertion__fgets_45.c":75:12)
#loc61 = loc("CWE617_Reachable_Assertion__fgets_45.c":75:5)
#loc62 = loc("CWE617_Reachable_Assertion__fgets_45.c":77:12)
#loc63 = loc("CWE617_Reachable_Assertion__fgets_45.c":77:25)
#loc64 = loc("CWE617_Reachable_Assertion__fgets_45.c":77:5)
#loc65 = loc("CWE617_Reachable_Assertion__fgets_45.c":78:56)
#loc66 = loc("CWE617_Reachable_Assertion__fgets_45.c":78:5)
#loc67 = loc("CWE617_Reachable_Assertion__fgets_45.c":79:5)
#loc68 = loc("CWE617_Reachable_Assertion__fgets_45.c":79:17)
#loc69 = loc("CWE617_Reachable_Assertion__fgets_45.c":68:5)
#loc70 = loc("CWE617_Reachable_Assertion__fgets_45.c":64:1)
#loc71 = loc("CWE617_Reachable_Assertion__fgets_45.c":69:1)
#loc72 = loc("CWE617_Reachable_Assertion__fgets_45.c":66:5)
#loc73 = loc("CWE617_Reachable_Assertion__fgets_45.c":66:16)
#loc74 = loc(fused[#loc1, #loc2])
#loc75 = loc(fused[#loc3, #loc4])
#loc76 = loc(fused[#loc5, #loc6])
#loc77 = loc(fused[#loc7, #loc8])
#loc78 = loc(fused[#loc10, #loc11])
#loc79 = loc(fused[#loc12, #loc13])
#loc80 = loc(fused[#loc14, #loc15])
#loc81 = loc(fused[#loc16, #loc17])
#loc82 = loc(fused[#loc20, #loc18])
#loc83 = loc(fused[#loc21, #loc22])
#loc84 = loc(fused[#loc23, #loc24])
#loc85 = loc(fused[#loc28, #loc29])
#loc86 = loc(fused[#loc30, #loc31, #loc32, #loc24])
#loc87 = loc(fused[#loc35, #loc36])
#loc88 = loc(fused[#loc39, #loc38])
#loc89 = loc(fused[#loc40, #loc41])
#loc90 = loc(fused[#loc42, #loc43])
#loc91 = loc(fused[#loc44, #loc45])
#loc92 = loc(fused[#loc46, #loc47])
#loc93 = loc(fused[#loc49, #loc50])
#loc94 = loc(fused[#loc51, #loc52])
#loc95 = loc(fused[#loc53, #loc54])
#loc96 = loc(fused[#loc55, #loc56])
#loc97 = loc(fused[#loc57, #loc58])
#loc98 = loc(fused[#loc61, #loc59])
#loc99 = loc(fused[#loc64, #loc63])
#loc100 = loc(fused[#loc66, #loc65])
#loc101 = loc(fused[#loc67, #loc68])
#loc102 = loc(fused[#loc70, #loc71])
#loc103 = loc(fused[#loc72, #loc73])
