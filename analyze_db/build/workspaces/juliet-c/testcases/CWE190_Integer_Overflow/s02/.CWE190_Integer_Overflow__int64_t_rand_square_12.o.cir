!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc162)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc163)
  cir.func private @printLongLongLine(!s64i) loc(#loc164)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr) loc(#loc165)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc9)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc166)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc12)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_square_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc168)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc17)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc169)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc171)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc171)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc21)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc21)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc26)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc26)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc26)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc26)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc26)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc26)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc26)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc26)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc26)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc26)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc26)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc26)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc26)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc26)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc26)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc26)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc26)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc26)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc26)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc26)
          cir.yield %33 : !u64i loc(#loc26)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc26)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc26)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc26)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc26)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc26)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc26)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc26)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc26)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc26)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc26)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc26)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc26)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc26)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc26)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc26)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc26)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc26)
          %34 = cir.unary(minus, %33) : !u64i, !u64i loc(#loc26)
          %35 = cir.const #cir.int<1> : !s32i loc(#loc26)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc26)
          %37 = cir.binop(sub, %34, %36) : !u64i loc(#loc26)
          cir.yield %37 : !u64i loc(#loc26)
        }) : (!cir.bool) -> !u64i loc(#loc26)
        %11 = cir.cast(integral, %10 : !u64i), !s64i loc(#loc26)
        cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc173)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc28)
        %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc28)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc174)
      } loc(#loc172)
    } loc(#loc170)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc176)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc176)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc32)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc32)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc179)
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc41)
          %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc40)
          %9 = cir.binop(mul, %7, %8) nsw : !s64i loc(#loc41)
          cir.store %9, %6 : !s64i, !cir.ptr<!s64i> loc(#loc179)
          %10 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc42)
          cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc43)
        } loc(#loc178)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc46)
          %7 = cir.call @imaxabs(%6) : (!s64i) -> !s64i side_effect(const) extra(#fn_attr) loc(#loc47)
          %8 = cir.cast(int_to_float, %7 : !s64i), !cir.long_double<!cir.f80> loc(#loc47)
          %9 = cir.get_global @sqrtl : !cir.ptr<!cir.func<(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80>>> loc(#loc48)
          %10 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc49)
          %11 = cir.cast(int_to_float, %10 : !s64i), !cir.long_double<!cir.f80> loc(#loc49)
          %12 = cir.call @sqrtl(%11) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc48)
          %13 = cir.cmp(le, %8, %12) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc181)
          cir.if %13 {
            %14 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc183)
            %15 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc56)
            %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc55)
            %17 = cir.binop(mul, %15, %16) nsw : !s64i loc(#loc56)
            cir.store %17, %14 : !s64i, !cir.ptr<!s64i> loc(#loc183)
            %18 = cir.load %14 : !cir.ptr<!s64i>, !s64i loc(#loc57)
            cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc58)
          } else {
            %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc12)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc12)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc59)
          } loc(#loc182)
        } loc(#loc180)
      } loc(#loc177)
    } loc(#loc175)
    cir.return loc(#loc14)
  } loc(#loc167)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_square_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc185)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc62)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc186)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc64)
    cir.return loc(#loc61)
  } loc(#loc184)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc188)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc70)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc189)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc191)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc191)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc74)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc74)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc79)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc79)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc79)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc79)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc79)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc79)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc79)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc79)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc79)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc79)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc79)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc79)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc79)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc79)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc79)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc79)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc79)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc79)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc79)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc79)
          cir.yield %33 : !u64i loc(#loc79)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc79)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc79)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc79)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc79)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc79)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc79)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc79)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc79)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc79)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc79)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc79)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc79)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc79)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc79)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc79)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc79)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc79)
          %34 = cir.unary(minus, %33) : !u64i, !u64i loc(#loc79)
          %35 = cir.const #cir.int<1> : !s32i loc(#loc79)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc79)
          %37 = cir.binop(sub, %34, %36) : !u64i loc(#loc79)
          cir.yield %37 : !u64i loc(#loc79)
        }) : (!cir.bool) -> !u64i loc(#loc79)
        %11 = cir.cast(integral, %10 : !u64i), !s64i loc(#loc79)
        cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc193)
      } else {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc81)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc81)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc81)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc81)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc81)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc81)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc81)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc81)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc81)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc81)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc81)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc81)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc81)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc81)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc81)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc81)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc81)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc81)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc81)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc81)
          cir.yield %33 : !u64i loc(#loc81)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc81)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc81)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc81)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc81)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc81)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc81)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc81)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc81)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc81)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc81)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc81)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc81)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc81)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc81)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc81)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc81)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc81)
          %34 = cir.unary(minus, %33) : !u64i, !u64i loc(#loc81)
          %35 = cir.const #cir.int<1> : !s32i loc(#loc81)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc81)
          %37 = cir.binop(sub, %34, %36) : !u64i loc(#loc81)
          cir.yield %37 : !u64i loc(#loc81)
        }) : (!cir.bool) -> !u64i loc(#loc81)
        %11 = cir.cast(integral, %10 : !u64i), !s64i loc(#loc81)
        cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc194)
      } loc(#loc192)
    } loc(#loc190)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc196)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc196)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc85)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc85)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc92)
          %7 = cir.call @imaxabs(%6) : (!s64i) -> !s64i side_effect(const) extra(#fn_attr) loc(#loc93)
          %8 = cir.cast(int_to_float, %7 : !s64i), !cir.long_double<!cir.f80> loc(#loc93)
          %9 = cir.get_global @sqrtl : !cir.ptr<!cir.func<(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80>>> loc(#loc94)
          %10 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc95)
          %11 = cir.cast(int_to_float, %10 : !s64i), !cir.long_double<!cir.f80> loc(#loc95)
          %12 = cir.call @sqrtl(%11) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc94)
          %13 = cir.cmp(le, %8, %12) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc199)
          cir.if %13 {
            %14 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc201)
            %15 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc102)
            %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc101)
            %17 = cir.binop(mul, %15, %16) nsw : !s64i loc(#loc102)
            cir.store %17, %14 : !s64i, !cir.ptr<!s64i> loc(#loc201)
            %18 = cir.load %14 : !cir.ptr<!s64i>, !s64i loc(#loc103)
            cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc104)
          } else {
            %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc105)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc105)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc106)
          } loc(#loc200)
        } loc(#loc198)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc109)
          %7 = cir.call @imaxabs(%6) : (!s64i) -> !s64i side_effect(const) extra(#fn_attr) loc(#loc110)
          %8 = cir.cast(int_to_float, %7 : !s64i), !cir.long_double<!cir.f80> loc(#loc110)
          %9 = cir.get_global @sqrtl : !cir.ptr<!cir.func<(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80>>> loc(#loc111)
          %10 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc112)
          %11 = cir.cast(int_to_float, %10 : !s64i), !cir.long_double<!cir.f80> loc(#loc112)
          %12 = cir.call @sqrtl(%11) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc111)
          %13 = cir.cmp(le, %8, %12) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc203)
          cir.if %13 {
            %14 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc205)
            %15 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc119)
            %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc118)
            %17 = cir.binop(mul, %15, %16) nsw : !s64i loc(#loc119)
            cir.store %17, %14 : !s64i, !cir.ptr<!s64i> loc(#loc205)
            %18 = cir.load %14 : !cir.ptr<!s64i>, !s64i loc(#loc120)
            cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc121)
          } else {
            %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc122)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc122)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc123)
          } loc(#loc204)
        } loc(#loc202)
      } loc(#loc197)
    } loc(#loc195)
    cir.return loc(#loc67)
  } loc(#loc187)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc207)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc128)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc208)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc210)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc210)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc132)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc132)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc137)
        %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc137)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc212)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc139)
        %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc139)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc213)
      } loc(#loc211)
    } loc(#loc209)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc215)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc215)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc143)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc143)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc218)
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc152)
          %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc151)
          %9 = cir.binop(mul, %7, %8) nsw : !s64i loc(#loc152)
          cir.store %9, %6 : !s64i, !cir.ptr<!s64i> loc(#loc218)
          %10 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc153)
          cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc154)
        } loc(#loc217)
      } else {
        cir.scope {
          %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc220)
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc159)
          %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc158)
          %9 = cir.binop(mul, %7, %8) nsw : !s64i loc(#loc159)
          cir.store %9, %6 : !s64i, !cir.ptr<!s64i> loc(#loc220)
          %10 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc160)
          cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc161)
        } loc(#loc219)
      } loc(#loc216)
    } loc(#loc214)
    cir.return loc(#loc125)
  } loc(#loc206)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("/usr/include/inttypes.h":351:1)
#loc8 = loc("/usr/include/inttypes.h":351:74)
#loc9 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":57:23)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":25:1)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":60:1)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":27:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":27:13)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":28:12)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":28:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":29:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":38:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":29:8)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":29:33)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":30:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":33:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":35:5)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":32:25)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":32:9)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":37:16)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":37:9)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":39:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":59:5)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":39:8)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":39:33)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":40:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":46:5)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":48:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":41:9)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":45:9)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":43:13)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":43:37)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":43:30)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":44:31)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":44:13)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":50:9)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":58:9)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":50:31)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":50:13)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":50:40)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":50:46)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":50:55)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":51:9)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":54:9)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":56:9)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":52:13)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":52:37)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":52:30)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":53:31)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":53:13)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":57:13)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":146:1)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":150:1)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":148:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":148:13)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":149:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":149:13)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":69:1)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":109:1)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":71:5)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":71:13)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":72:12)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":72:5)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":73:5)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":82:5)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":73:8)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":73:33)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":74:5)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":77:5)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":79:5)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":76:25)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":76:9)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":81:25)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":81:9)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":83:5)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":108:5)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":83:8)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":83:33)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":84:5)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":95:5)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":97:5)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":86:9)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":94:9)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":86:31)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":86:13)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":86:40)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":86:46)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":86:55)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":87:9)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":90:9)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":92:9)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":88:13)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":88:37)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":88:30)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":89:31)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":89:13)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":93:23)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":93:13)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":99:9)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":107:9)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":99:31)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":99:13)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":99:40)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":99:46)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":99:55)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":100:9)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":103:9)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":105:9)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":101:13)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":101:37)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":101:30)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":102:31)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":102:13)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":106:23)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":106:13)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":114:1)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":144:1)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":116:5)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":116:13)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":117:12)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":117:5)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":118:5)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":127:5)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":118:8)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":118:33)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":119:5)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":122:5)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":124:5)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":121:16)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":121:9)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":126:16)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":126:9)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":128:5)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":143:5)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":128:8)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":128:33)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":129:5)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":135:5)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":137:5)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":130:9)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":134:9)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":132:13)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":132:37)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":132:30)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":133:31)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":133:13)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":138:9)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":142:9)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":140:13)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":140:37)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":140:30)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":141:31)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_rand_square_12.c":141:13)
#loc162 = loc(fused[#loc1, #loc2])
#loc163 = loc(fused[#loc3, #loc4])
#loc164 = loc(fused[#loc5, #loc6])
#loc165 = loc(fused[#loc7, #loc8])
#loc166 = loc(fused[#loc10, #loc11])
#loc167 = loc(fused[#loc13, #loc14])
#loc168 = loc(fused[#loc15, #loc16])
#loc169 = loc(fused[#loc18, #loc17])
#loc170 = loc(fused[#loc19, #loc20])
#loc171 = loc(fused[#loc21, #loc22])
#loc172 = loc(fused[#loc23, #loc24, #loc25, #loc20])
#loc173 = loc(fused[#loc27, #loc26])
#loc174 = loc(fused[#loc29, #loc28])
#loc175 = loc(fused[#loc30, #loc31])
#loc176 = loc(fused[#loc32, #loc33])
#loc177 = loc(fused[#loc34, #loc35, #loc36, #loc31])
#loc178 = loc(fused[#loc37, #loc38])
#loc179 = loc(fused[#loc39, #loc40])
#loc180 = loc(fused[#loc44, #loc45])
#loc181 = loc(fused[#loc47, #loc50])
#loc182 = loc(fused[#loc51, #loc52, #loc53, #loc45])
#loc183 = loc(fused[#loc54, #loc55])
#loc184 = loc(fused[#loc60, #loc61])
#loc185 = loc(fused[#loc62, #loc63])
#loc186 = loc(fused[#loc64, #loc65])
#loc187 = loc(fused[#loc66, #loc67])
#loc188 = loc(fused[#loc68, #loc69])
#loc189 = loc(fused[#loc71, #loc70])
#loc190 = loc(fused[#loc72, #loc73])
#loc191 = loc(fused[#loc74, #loc75])
#loc192 = loc(fused[#loc76, #loc77, #loc78, #loc73])
#loc193 = loc(fused[#loc80, #loc79])
#loc194 = loc(fused[#loc82, #loc81])
#loc195 = loc(fused[#loc83, #loc84])
#loc196 = loc(fused[#loc85, #loc86])
#loc197 = loc(fused[#loc87, #loc88, #loc89, #loc84])
#loc198 = loc(fused[#loc90, #loc91])
#loc199 = loc(fused[#loc93, #loc96])
#loc200 = loc(fused[#loc97, #loc98, #loc99, #loc91])
#loc201 = loc(fused[#loc100, #loc101])
#loc202 = loc(fused[#loc107, #loc108])
#loc203 = loc(fused[#loc110, #loc113])
#loc204 = loc(fused[#loc114, #loc115, #loc116, #loc108])
#loc205 = loc(fused[#loc117, #loc118])
#loc206 = loc(fused[#loc124, #loc125])
#loc207 = loc(fused[#loc126, #loc127])
#loc208 = loc(fused[#loc129, #loc128])
#loc209 = loc(fused[#loc130, #loc131])
#loc210 = loc(fused[#loc132, #loc133])
#loc211 = loc(fused[#loc134, #loc135, #loc136, #loc131])
#loc212 = loc(fused[#loc138, #loc137])
#loc213 = loc(fused[#loc140, #loc139])
#loc214 = loc(fused[#loc141, #loc142])
#loc215 = loc(fused[#loc143, #loc144])
#loc216 = loc(fused[#loc145, #loc146, #loc147, #loc142])
#loc217 = loc(fused[#loc148, #loc149])
#loc218 = loc(fused[#loc150, #loc151])
#loc219 = loc(fused[#loc155, #loc156])
#loc220 = loc(fused[#loc157, #loc158])
