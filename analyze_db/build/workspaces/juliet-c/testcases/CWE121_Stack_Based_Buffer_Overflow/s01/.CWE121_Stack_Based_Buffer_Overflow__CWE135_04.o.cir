!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc176)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc177)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc178)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc180)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc181)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc182)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc16)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc183)
    cir.br ^bb1 loc(#loc184)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc185)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
    cir.store %8, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc186)
    cir.br ^bb3 loc(#loc19)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc187)
  ^bb5:  // pred: ^bb4
    %9 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc25)
    cir.brcond %10 ^bb6, ^bb9 loc(#loc188)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc189)
  ^bb7:  // pred: ^bb6
    %11 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc29)
    %12 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc30)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc30)
    %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc29)
    cir.store %14, %0 : !u64i, !cir.ptr<!u64i> loc(#loc180)
    %15 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc13)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc13)
    %18 = cir.binop(add, %15, %17) : !u64i loc(#loc13)
    %19 = cir.const #cir.int<4> : !u64i loc(#loc13)
    %20 = cir.binop(mul, %18, %19) : !u64i loc(#loc13)
    %21 = cir.alloca !u8i, !cir.ptr<!u8i>, %20 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc13)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc13)
    cir.store %22, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc181)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc31)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc31)
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc32)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc32)
    %27 = cir.call @wcscpy(%24, %26) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc33)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc34)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc35)
    cir.br ^bb8 loc(#loc28)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc24)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc24)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc9)
  } loc(#loc179)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc191)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc192)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc193)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc194)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    cir.return loc(#loc37)
  } loc(#loc190)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc46)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc195)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc196)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc198)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc199)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc200)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc59)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc201)
    cir.br ^bb1 loc(#loc202)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<1> : !s32i loc(#loc63)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc63)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc203)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc65)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc65)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc65)
    cir.store %8, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc204)
    cir.br ^bb3 loc(#loc62)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc62)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc205)
  ^bb5:  // pred: ^bb4
    %9 = cir.const #cir.int<0> : !s32i loc(#loc69)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc69)
    cir.brcond %10 ^bb6, ^bb7 loc(#loc206)
  ^bb6:  // pred: ^bb5
    %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc46)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    cir.br ^bb10 loc(#loc71)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc207)
  ^bb8:  // pred: ^bb7
    %13 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc76)
    %14 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc77)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc77)
    %16 = cir.call @wcslen(%15) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc76)
    cir.store %16, %0 : !u64i, !cir.ptr<!u64i> loc(#loc198)
    %17 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc56)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc56)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc56)
    %20 = cir.binop(add, %17, %19) : !u64i loc(#loc56)
    %21 = cir.const #cir.int<4> : !u64i loc(#loc56)
    %22 = cir.binop(mul, %20, %21) : !u64i loc(#loc56)
    %23 = cir.alloca !u8i, !cir.ptr<!u8i>, %22 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc56)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc56)
    cir.store %24, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc199)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc78)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc78)
    %27 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc79)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc79)
    %29 = cir.call @wcscpy(%26, %28) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc80)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc81)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc81)
    cir.call @printWLine(%31) : (!cir.ptr<!s32i>) -> () loc(#loc82)
    cir.br ^bb9 loc(#loc75)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc68)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc68)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc52)
  } loc(#loc197)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc209)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc210)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc211)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc91)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc212)
    cir.br ^bb1 loc(#loc213)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<1> : !s32i loc(#loc95)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc95)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc214)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc97)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc97)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc97)
    cir.store %8, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc215)
    cir.br ^bb3 loc(#loc94)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc94)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc216)
  ^bb5:  // pred: ^bb4
    %9 = cir.const #cir.int<1> : !s32i loc(#loc101)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc101)
    cir.brcond %10 ^bb6, ^bb9 loc(#loc217)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc218)
  ^bb7:  // pred: ^bb6
    %11 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc105)
    %12 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc106)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc106)
    %14 = cir.call @wcslen(%13) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc105)
    cir.store %14, %0 : !u64i, !cir.ptr<!u64i> loc(#loc209)
    %15 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc88)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc88)
    %18 = cir.binop(add, %15, %17) : !u64i loc(#loc88)
    %19 = cir.const #cir.int<4> : !u64i loc(#loc88)
    %20 = cir.binop(mul, %18, %19) : !u64i loc(#loc88)
    %21 = cir.alloca !u8i, !cir.ptr<!u8i>, %20 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc88)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc88)
    cir.store %22, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc210)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc107)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc107)
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc108)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc108)
    %27 = cir.call @wcscpy(%24, %26) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc109)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc110)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc110)
    cir.call @printWLine(%29) : (!cir.ptr<!s32i>) -> () loc(#loc111)
    cir.br ^bb8 loc(#loc104)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc100)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc100)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc84)
  } loc(#loc208)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc112)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc219)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc221)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc222)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc223)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc123)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc224)
    cir.br ^bb1 loc(#loc225)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<0> : !s32i loc(#loc127)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc127)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc226)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc131)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc131)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc132)
    cir.br ^bb4 loc(#loc129)
  ^bb3:  // pred: ^bb1
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc112)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc112)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc112)
    cir.store %10, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc227)
    cir.br ^bb4 loc(#loc126)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc126)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc228)
  ^bb6:  // pred: ^bb5
    %11 = cir.const #cir.int<1> : !s32i loc(#loc136)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc136)
    cir.brcond %12 ^bb7, ^bb10 loc(#loc229)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc230)
  ^bb8:  // pred: ^bb7
    %13 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc140)
    %14 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc141)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc141)
    %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc140)
    cir.store %16, %0 : !u64i, !cir.ptr<!u64i> loc(#loc221)
    %17 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc120)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc120)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc120)
    %20 = cir.binop(add, %17, %19) : !u64i loc(#loc120)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc120)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc120)
    %23 = cir.binop(mul, %20, %22) : !u64i loc(#loc120)
    %24 = cir.alloca !u8i, !cir.ptr<!u8i>, %23 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc120)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc120)
    cir.store %25, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc222)
    %26 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc142)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc143)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc143)
    %29 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc144)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc144)
    %31 = cir.call @strcpy(%28, %30) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc142)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc145)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc145)
    cir.call @printLine(%33) : (!cir.ptr<!s8i>) -> () loc(#loc146)
    cir.br ^bb9 loc(#loc139)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc135)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc135)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc116)
  } loc(#loc220)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc232)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc233)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc234)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc155)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc235)
    cir.br ^bb1 loc(#loc236)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<1> : !s32i loc(#loc159)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc159)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc237)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc161)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc161)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc161)
    cir.store %8, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc238)
    cir.br ^bb3 loc(#loc158)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc158)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc239)
  ^bb5:  // pred: ^bb4
    %9 = cir.const #cir.int<1> : !s32i loc(#loc165)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc165)
    cir.brcond %10 ^bb6, ^bb9 loc(#loc240)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc241)
  ^bb7:  // pred: ^bb6
    %11 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc169)
    %12 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc170)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc170)
    %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc169)
    cir.store %14, %0 : !u64i, !cir.ptr<!u64i> loc(#loc232)
    %15 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc152)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc152)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc152)
    %18 = cir.binop(add, %15, %17) : !u64i loc(#loc152)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc152)
    %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc152)
    %21 = cir.binop(mul, %18, %20) : !u64i loc(#loc152)
    %22 = cir.alloca !u8i, !cir.ptr<!u8i>, %21 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc152)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc152)
    cir.store %23, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc233)
    %24 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc171)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc172)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc172)
    %27 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc173)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc173)
    %29 = cir.call @strcpy(%26, %28) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc171)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc174)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc174)
    cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc175)
    cir.br ^bb8 loc(#loc168)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc164)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc164)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc148)
  } loc(#loc231)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":40:24)
#loc2 = loc("/usr/include/string.h":407:1)
#loc3 = loc("/usr/include/string.h":408:33)
#loc4 = loc("/usr/include/wchar.h":98:1)
#loc5 = loc("/usr/include/wchar.h":100:14)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":33:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":52:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":46:13)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":46:49)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":47:13)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":47:35)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":35:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":35:12)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":36:12)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":36:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":37:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":41:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":37:8)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":38:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":40:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":42:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":51:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":42:8)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":43:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":44:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":50:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":46:30)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":46:45)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":48:26)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":48:32)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":48:19)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":49:31)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":49:13)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":156:1)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":162:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":158:5)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":158:14)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":159:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":159:14)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":160:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":160:14)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":161:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":161:14)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":71:19)
#loc47 = loc("/usr/include/wchar.h":247:1)
#loc48 = loc("/usr/include/wchar.h":247:51)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":59:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":83:1)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":77:13)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":77:52)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":78:13)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":78:35)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":61:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":61:12)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":62:12)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":62:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":63:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":67:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":63:8)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":64:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":66:24)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":66:9)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":68:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":82:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":68:8)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":69:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":72:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":74:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":71:9)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":75:9)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":81:9)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":77:30)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":77:48)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":79:26)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":79:32)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":79:19)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":80:35)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":80:13)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":86:1)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":105:1)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":99:13)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":99:52)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":100:13)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":100:35)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":88:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":88:12)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":89:12)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":89:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":90:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":94:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":90:8)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":91:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":93:24)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":93:9)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":95:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":104:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":95:8)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":96:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":97:9)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":103:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":99:30)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":99:48)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":101:26)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":101:32)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":101:19)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":102:35)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":102:13)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":120:24)
#loc113 = loc("/usr/include/string.h":141:1)
#loc114 = loc("/usr/include/string.h":142:14)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":108:1)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":132:1)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":126:13)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":126:49)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":127:13)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":127:35)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":110:5)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":110:12)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":111:12)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":111:5)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":112:5)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":121:5)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":112:8)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":113:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":116:5)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":118:5)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":115:19)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":115:9)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":120:9)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":122:5)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":131:5)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":122:8)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":123:5)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":124:9)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":130:9)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":126:30)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":126:45)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":128:19)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":128:26)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":128:32)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":129:31)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":129:13)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":135:1)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":154:1)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":148:13)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":148:49)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":149:13)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":149:35)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":137:5)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":137:12)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":138:12)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":138:5)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":139:5)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":143:5)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":139:8)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":140:5)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":142:24)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":142:9)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":144:5)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":153:5)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":144:8)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":145:5)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":146:9)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":152:9)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":148:30)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":148:45)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":150:19)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":150:26)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":150:32)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":151:31)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c":151:13)
#loc176 = loc(fused[#loc2, #loc3])
#loc177 = loc(fused[#loc4, #loc5])
#loc178 = loc(fused[#loc6, #loc7])
#loc179 = loc(fused[#loc8, #loc9])
#loc180 = loc(fused[#loc10, #loc11])
#loc181 = loc(fused[#loc12, #loc13])
#loc182 = loc(fused[#loc14, #loc15])
#loc183 = loc(fused[#loc17, #loc16])
#loc184 = loc(fused[#loc18, #loc19])
#loc185 = loc(fused[#loc21, #loc19])
#loc186 = loc(fused[#loc22, #loc1])
#loc187 = loc(fused[#loc23, #loc24])
#loc188 = loc(fused[#loc26, #loc24])
#loc189 = loc(fused[#loc27, #loc28])
#loc190 = loc(fused[#loc36, #loc37])
#loc191 = loc(fused[#loc38, #loc39])
#loc192 = loc(fused[#loc40, #loc41])
#loc193 = loc(fused[#loc42, #loc43])
#loc194 = loc(fused[#loc44, #loc45])
#loc195 = loc(fused[#loc47, #loc48])
#loc196 = loc(fused[#loc49, #loc50])
#loc197 = loc(fused[#loc51, #loc52])
#loc198 = loc(fused[#loc53, #loc54])
#loc199 = loc(fused[#loc55, #loc56])
#loc200 = loc(fused[#loc57, #loc58])
#loc201 = loc(fused[#loc60, #loc59])
#loc202 = loc(fused[#loc61, #loc62])
#loc203 = loc(fused[#loc64, #loc62])
#loc204 = loc(fused[#loc66, #loc65])
#loc205 = loc(fused[#loc67, #loc68])
#loc206 = loc(fused[#loc70, #loc71, #loc72, #loc68])
#loc207 = loc(fused[#loc74, #loc75])
#loc208 = loc(fused[#loc83, #loc84])
#loc209 = loc(fused[#loc85, #loc86])
#loc210 = loc(fused[#loc87, #loc88])
#loc211 = loc(fused[#loc89, #loc90])
#loc212 = loc(fused[#loc92, #loc91])
#loc213 = loc(fused[#loc93, #loc94])
#loc214 = loc(fused[#loc96, #loc94])
#loc215 = loc(fused[#loc98, #loc97])
#loc216 = loc(fused[#loc99, #loc100])
#loc217 = loc(fused[#loc102, #loc100])
#loc218 = loc(fused[#loc103, #loc104])
#loc219 = loc(fused[#loc113, #loc114])
#loc220 = loc(fused[#loc115, #loc116])
#loc221 = loc(fused[#loc117, #loc118])
#loc222 = loc(fused[#loc119, #loc120])
#loc223 = loc(fused[#loc121, #loc122])
#loc224 = loc(fused[#loc124, #loc123])
#loc225 = loc(fused[#loc125, #loc126])
#loc226 = loc(fused[#loc128, #loc129, #loc130, #loc126])
#loc227 = loc(fused[#loc133, #loc112])
#loc228 = loc(fused[#loc134, #loc135])
#loc229 = loc(fused[#loc137, #loc135])
#loc230 = loc(fused[#loc138, #loc139])
#loc231 = loc(fused[#loc147, #loc148])
#loc232 = loc(fused[#loc149, #loc150])
#loc233 = loc(fused[#loc151, #loc152])
#loc234 = loc(fused[#loc153, #loc154])
#loc235 = loc(fused[#loc156, #loc155])
#loc236 = loc(fused[#loc157, #loc158])
#loc237 = loc(fused[#loc160, #loc158])
#loc238 = loc(fused[#loc162, #loc161])
#loc239 = loc(fused[#loc163, #loc164])
#loc240 = loc(fused[#loc166, #loc164])
#loc241 = loc(fused[#loc167, #loc168])
