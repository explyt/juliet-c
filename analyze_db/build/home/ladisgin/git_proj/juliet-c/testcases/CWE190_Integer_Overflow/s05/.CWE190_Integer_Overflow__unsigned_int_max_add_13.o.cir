!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_add_13.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant external @GLOBAL_CONST_FIVE : !s32i {alignment = 4 : i64} loc(#loc164)
  cir.func private @printUnsignedLine(!u32i) loc(#loc165)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_add_13_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc167)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc168)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc11)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc169)
    cir.br ^bb1 loc(#loc170)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc164)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc15)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc16)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc171)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc172)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc18)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc18)
    %10 = cir.const #cir.int<2> : !u32i loc(#loc18)
    %11 = cir.binop(mul, %9, %10) : !u32i loc(#loc18)
    %12 = cir.const #cir.int<1> : !u32i loc(#loc18)
    %13 = cir.binop(add, %11, %12) : !u32i loc(#loc18)
    cir.store %13, %1 : !u32i, !cir.ptr<!u32i> loc(#loc173)
    cir.br ^bb3 loc(#loc14)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc14)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc174)
  ^bb5:  // pred: ^bb4
    %14 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc164)
    %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc22)
    %16 = cir.const #cir.int<5> : !s32i loc(#loc23)
    %17 = cir.cmp(eq, %15, %16) : !s32i, !cir.bool loc(#loc175)
    cir.brcond %17 ^bb6, ^bb9 loc(#loc176)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc177)
  ^bb7:  // pred: ^bb6
    %18 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc27)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc8)
    %21 = cir.binop(add, %18, %20) : !u32i loc(#loc178)
    cir.store %21, %0 : !u32i, !cir.ptr<!u32i> loc(#loc167)
    %22 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc28)
    cir.call @printUnsignedLine(%22) : (!u32i) -> () loc(#loc29)
    cir.br ^bb8 loc(#loc26)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc21)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc21)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc6)
  } loc(#loc166)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_add_13_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc180)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc181)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc182)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc183)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc179)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc184)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc43)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc186)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc187)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc50)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc50)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc188)
    cir.br ^bb1 loc(#loc189)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc164)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc55)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc190)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc191)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc57)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc57)
    %10 = cir.const #cir.int<2> : !u32i loc(#loc57)
    %11 = cir.binop(mul, %9, %10) : !u32i loc(#loc57)
    %12 = cir.const #cir.int<1> : !u32i loc(#loc57)
    %13 = cir.binop(add, %11, %12) : !u32i loc(#loc57)
    cir.store %13, %1 : !u32i, !cir.ptr<!u32i> loc(#loc192)
    cir.br ^bb3 loc(#loc53)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc53)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc193)
  ^bb5:  // pred: ^bb4
    %14 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc164)
    %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    %16 = cir.const #cir.int<5> : !s32i loc(#loc62)
    %17 = cir.cmp(ne, %15, %16) : !s32i, !cir.bool loc(#loc194)
    cir.brcond %17 ^bb6, ^bb7 loc(#loc195)
  ^bb6:  // pred: ^bb5
    %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc42)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    cir.br ^bb13 loc(#loc64)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc196)
  ^bb8:  // pred: ^bb7
    %20 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc69)
    %21 = cir.const #cir.int<2147483647> : !s32i loc(#loc70)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc70)
    %23 = cir.const #cir.int<2> : !u32i loc(#loc70)
    %24 = cir.binop(mul, %22, %23) : !u32i loc(#loc70)
    %25 = cir.const #cir.int<1> : !u32i loc(#loc70)
    %26 = cir.binop(add, %24, %25) : !u32i loc(#loc70)
    %27 = cir.cmp(lt, %20, %26) : !u32i, !cir.bool loc(#loc197)
    cir.brcond %27 ^bb9, ^bb10 loc(#loc198)
  ^bb9:  // pred: ^bb8
    %28 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc74)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc47)
    %31 = cir.binop(add, %28, %30) : !u32i loc(#loc199)
    cir.store %31, %0 : !u32i, !cir.ptr<!u32i> loc(#loc186)
    %32 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc75)
    cir.call @printUnsignedLine(%32) : (!u32i) -> () loc(#loc76)
    cir.br ^bb11 loc(#loc72)
  ^bb10:  // pred: ^bb8
    %33 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc43)
    %34 = cir.cast(array_to_ptrdecay, %33 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%34) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    cir.br ^bb11 loc(#loc68)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc68)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc60)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc60)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc45)
  } loc(#loc185)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc201)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc202)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc84)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc84)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc203)
    cir.br ^bb1 loc(#loc204)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc164)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc89)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc205)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc206)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc91)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc91)
    %10 = cir.const #cir.int<2> : !u32i loc(#loc91)
    %11 = cir.binop(mul, %9, %10) : !u32i loc(#loc91)
    %12 = cir.const #cir.int<1> : !u32i loc(#loc91)
    %13 = cir.binop(add, %11, %12) : !u32i loc(#loc91)
    cir.store %13, %1 : !u32i, !cir.ptr<!u32i> loc(#loc207)
    cir.br ^bb3 loc(#loc87)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc87)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc208)
  ^bb5:  // pred: ^bb4
    %14 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc164)
    %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    %16 = cir.const #cir.int<5> : !s32i loc(#loc96)
    %17 = cir.cmp(eq, %15, %16) : !s32i, !cir.bool loc(#loc209)
    cir.brcond %17 ^bb6, ^bb12 loc(#loc210)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc211)
  ^bb7:  // pred: ^bb6
    %18 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc100)
    %19 = cir.const #cir.int<2147483647> : !s32i loc(#loc101)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc101)
    %21 = cir.const #cir.int<2> : !u32i loc(#loc101)
    %22 = cir.binop(mul, %20, %21) : !u32i loc(#loc101)
    %23 = cir.const #cir.int<1> : !u32i loc(#loc101)
    %24 = cir.binop(add, %22, %23) : !u32i loc(#loc101)
    %25 = cir.cmp(lt, %18, %24) : !u32i, !cir.bool loc(#loc212)
    cir.brcond %25 ^bb8, ^bb9 loc(#loc213)
  ^bb8:  // pred: ^bb7
    %26 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc105)
    %27 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc81)
    %29 = cir.binop(add, %26, %28) : !u32i loc(#loc214)
    cir.store %29, %0 : !u32i, !cir.ptr<!u32i> loc(#loc201)
    %30 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc106)
    cir.call @printUnsignedLine(%30) : (!u32i) -> () loc(#loc107)
    cir.br ^bb10 loc(#loc103)
  ^bb9:  // pred: ^bb7
    %31 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc108)
    %32 = cir.cast(array_to_ptrdecay, %31 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc108)
    cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc109)
    cir.br ^bb10 loc(#loc99)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc99)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc94)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc94)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc79)
  } loc(#loc200)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc216)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc217)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc116)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc116)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc218)
    cir.br ^bb1 loc(#loc219)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc164)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc120)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc121)
    %7 = cir.cmp(ne, %5, %6) : !s32i, !cir.bool loc(#loc220)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc221)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc125)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc125)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc126)
    cir.br ^bb4 loc(#loc123)
  ^bb3:  // pred: ^bb1
    %10 = cir.const #cir.int<2> : !s32i loc(#loc127)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc127)
    cir.store %11, %1 : !u32i, !cir.ptr<!u32i> loc(#loc222)
    cir.br ^bb4 loc(#loc119)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc119)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc223)
  ^bb6:  // pred: ^bb5
    %12 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc164)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc131)
    %14 = cir.const #cir.int<5> : !s32i loc(#loc132)
    %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc224)
    cir.brcond %15 ^bb7, ^bb10 loc(#loc225)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc226)
  ^bb8:  // pred: ^bb7
    %16 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc136)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc113)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc113)
    %19 = cir.binop(add, %16, %18) : !u32i loc(#loc227)
    cir.store %19, %0 : !u32i, !cir.ptr<!u32i> loc(#loc216)
    %20 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc137)
    cir.call @printUnsignedLine(%20) : (!u32i) -> () loc(#loc138)
    cir.br ^bb9 loc(#loc135)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc130)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc130)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc111)
  } loc(#loc215)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc229)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc230)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc145)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc145)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc231)
    cir.br ^bb1 loc(#loc232)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc164)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc150)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc233)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc234)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc152)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc152)
    cir.store %9, %1 : !u32i, !cir.ptr<!u32i> loc(#loc235)
    cir.br ^bb3 loc(#loc148)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc148)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc236)
  ^bb5:  // pred: ^bb4
    %10 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc164)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc156)
    %12 = cir.const #cir.int<5> : !s32i loc(#loc157)
    %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc237)
    cir.brcond %13 ^bb6, ^bb9 loc(#loc238)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc239)
  ^bb7:  // pred: ^bb6
    %14 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc161)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc142)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc142)
    %17 = cir.binop(add, %14, %16) : !u32i loc(#loc240)
    cir.store %17, %0 : !u32i, !cir.ptr<!u32i> loc(#loc229)
    %18 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc162)
    cir.call @printUnsignedLine(%18) : (!u32i) -> () loc(#loc163)
    cir.br ^bb8 loc(#loc160)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc155)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc155)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc140)
  } loc(#loc228)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_add_13.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":111:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":111:18)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":39:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":35:13)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":35:42)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":24:5)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":24:18)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":25:12)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":25:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":26:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":30:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":26:8)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":26:27)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":27:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":29:16)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":29:9)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":31:5)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":38:5)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":31:8)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":31:27)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":32:5)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":33:9)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":37:9)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":35:35)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":36:31)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":36:13)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":145:1)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":151:1)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":147:5)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":147:14)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":148:5)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":148:14)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":149:5)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":149:14)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":150:5)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":150:14)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":58:19)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":70:23)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":46:1)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":73:1)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":65:13)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":65:42)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":48:5)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":48:18)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":49:12)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":49:5)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":50:5)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":54:5)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":50:8)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":50:27)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":51:5)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":53:16)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":53:9)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":55:5)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":72:5)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":55:8)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":55:27)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":56:5)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":59:5)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":61:5)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":58:9)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":63:9)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":71:9)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":63:13)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":63:20)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":64:9)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":67:9)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":69:9)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":65:35)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":66:31)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":66:13)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":70:13)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":76:1)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":98:1)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":90:13)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":90:42)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":78:5)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":78:18)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":79:12)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":79:5)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":80:5)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":84:5)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":80:8)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":80:27)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":81:5)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":83:16)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":83:9)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":85:5)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":97:5)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":85:8)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":85:27)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":86:5)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":88:9)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":96:9)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":88:13)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":88:20)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":89:9)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":92:9)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":94:9)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":90:35)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":91:31)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":91:13)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":95:23)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":95:13)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":101:1)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":123:1)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":119:13)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":119:42)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":103:5)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":103:18)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":104:12)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":104:5)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":105:5)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":114:5)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":105:8)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":105:27)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":106:5)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":109:5)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":111:5)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":108:19)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":108:9)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":113:16)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":113:9)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":115:5)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":122:5)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":115:8)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":115:27)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":116:5)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":117:9)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":121:9)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":119:35)
#loc137 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":120:31)
#loc138 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":120:13)
#loc139 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":126:1)
#loc140 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":143:1)
#loc141 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":139:13)
#loc142 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":139:42)
#loc143 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":128:5)
#loc144 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":128:18)
#loc145 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":129:12)
#loc146 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":129:5)
#loc147 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":130:5)
#loc148 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":134:5)
#loc149 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":130:8)
#loc150 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":130:27)
#loc151 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":131:5)
#loc152 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":133:16)
#loc153 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":133:9)
#loc154 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":135:5)
#loc155 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":142:5)
#loc156 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":135:8)
#loc157 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":135:27)
#loc158 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":136:5)
#loc159 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":137:9)
#loc160 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":141:9)
#loc161 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":139:35)
#loc162 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":140:31)
#loc163 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_13.c":140:13)
#loc164 = loc(fused[#loc1, #loc2])
#loc165 = loc(fused[#loc3, #loc4])
#loc166 = loc(fused[#loc5, #loc6])
#loc167 = loc(fused[#loc7, #loc8])
#loc168 = loc(fused[#loc9, #loc10])
#loc169 = loc(fused[#loc12, #loc11])
#loc170 = loc(fused[#loc13, #loc14])
#loc171 = loc(fused[#loc15, #loc16])
#loc172 = loc(fused[#loc17, #loc14])
#loc173 = loc(fused[#loc19, #loc18])
#loc174 = loc(fused[#loc20, #loc21])
#loc175 = loc(fused[#loc22, #loc23])
#loc176 = loc(fused[#loc24, #loc21])
#loc177 = loc(fused[#loc25, #loc26])
#loc178 = loc(fused[#loc27, #loc8])
#loc179 = loc(fused[#loc30, #loc31])
#loc180 = loc(fused[#loc32, #loc33])
#loc181 = loc(fused[#loc34, #loc35])
#loc182 = loc(fused[#loc36, #loc37])
#loc183 = loc(fused[#loc38, #loc39])
#loc184 = loc(fused[#loc40, #loc41])
#loc185 = loc(fused[#loc44, #loc45])
#loc186 = loc(fused[#loc46, #loc47])
#loc187 = loc(fused[#loc48, #loc49])
#loc188 = loc(fused[#loc51, #loc50])
#loc189 = loc(fused[#loc52, #loc53])
#loc190 = loc(fused[#loc54, #loc55])
#loc191 = loc(fused[#loc56, #loc53])
#loc192 = loc(fused[#loc58, #loc57])
#loc193 = loc(fused[#loc59, #loc60])
#loc194 = loc(fused[#loc61, #loc62])
#loc195 = loc(fused[#loc63, #loc64, #loc65, #loc60])
#loc196 = loc(fused[#loc67, #loc68])
#loc197 = loc(fused[#loc69, #loc70])
#loc198 = loc(fused[#loc71, #loc72, #loc73, #loc68])
#loc199 = loc(fused[#loc74, #loc47])
#loc200 = loc(fused[#loc78, #loc79])
#loc201 = loc(fused[#loc80, #loc81])
#loc202 = loc(fused[#loc82, #loc83])
#loc203 = loc(fused[#loc85, #loc84])
#loc204 = loc(fused[#loc86, #loc87])
#loc205 = loc(fused[#loc88, #loc89])
#loc206 = loc(fused[#loc90, #loc87])
#loc207 = loc(fused[#loc92, #loc91])
#loc208 = loc(fused[#loc93, #loc94])
#loc209 = loc(fused[#loc95, #loc96])
#loc210 = loc(fused[#loc97, #loc94])
#loc211 = loc(fused[#loc98, #loc99])
#loc212 = loc(fused[#loc100, #loc101])
#loc213 = loc(fused[#loc102, #loc103, #loc104, #loc99])
#loc214 = loc(fused[#loc105, #loc81])
#loc215 = loc(fused[#loc110, #loc111])
#loc216 = loc(fused[#loc112, #loc113])
#loc217 = loc(fused[#loc114, #loc115])
#loc218 = loc(fused[#loc117, #loc116])
#loc219 = loc(fused[#loc118, #loc119])
#loc220 = loc(fused[#loc120, #loc121])
#loc221 = loc(fused[#loc122, #loc123, #loc124, #loc119])
#loc222 = loc(fused[#loc128, #loc127])
#loc223 = loc(fused[#loc129, #loc130])
#loc224 = loc(fused[#loc131, #loc132])
#loc225 = loc(fused[#loc133, #loc130])
#loc226 = loc(fused[#loc134, #loc135])
#loc227 = loc(fused[#loc136, #loc113])
#loc228 = loc(fused[#loc139, #loc140])
#loc229 = loc(fused[#loc141, #loc142])
#loc230 = loc(fused[#loc143, #loc144])
#loc231 = loc(fused[#loc146, #loc145])
#loc232 = loc(fused[#loc147, #loc148])
#loc233 = loc(fused[#loc149, #loc150])
#loc234 = loc(fused[#loc151, #loc148])
#loc235 = loc(fused[#loc153, #loc152])
#loc236 = loc(fused[#loc154, #loc155])
#loc237 = loc(fused[#loc156, #loc157])
#loc238 = loc(fused[#loc158, #loc155])
#loc239 = loc(fused[#loc159, #loc160])
#loc240 = loc(fused[#loc161, #loc142])
