!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":121:10)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":121:14)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":121:20)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":121:32)
#loc226 = loc(fused[#loc74, #loc75])
#loc227 = loc(fused[#loc76, #loc77])
!ty__charVoid = !cir.struct<struct "_charVoid" {!cir.array<!s8i x 16>, !cir.ptr<!void>, !cir.ptr<!void>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc194)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc195)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"0123456789abcdef0123456789abcde\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc196)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>>, ["structCharVoid", init] {alignment = 8 : i64} loc(#loc198)
    cir.br ^bb1 loc(#loc199)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<5> : !s32i loc(#loc14)
    %2 = cir.const #cir.int<5> : !s32i loc(#loc15)
    %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc200)
    cir.brcond %3 ^bb2, ^bb9 loc(#loc201)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc202)
  ^bb3:  // pred: ^bb2
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc19)
    %5 = cir.const #cir.int<32> : !u64i loc(#loc203)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc19)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc204)
    cir.store %7, %0 : !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>> loc(#loc198)
    cir.br ^bb4 loc(#loc205)
  ^bb4:  // pred: ^bb3
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc24)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc25)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc25)
    %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!ty__charVoid>, !cir.bool loc(#loc206)
    cir.brcond %11 ^bb5, ^bb6 loc(#loc207)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc27)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc29)
    cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc27)
    cir.br ^bb6 loc(#loc23)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc23)
  ^bb7:  // pred: ^bb6
    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc5)
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc30)
    %19 = cir.get_member %18[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc31)
    cir.store %17, %19 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc208)
    %20 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc32)
    %21 = cir.get_member %20[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc31)
    %22 = cir.load %21 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc33)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc209)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc34)
    %24 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc35)
    %25 = cir.get_member %24[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc210)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc210)
    %28 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc38)
    %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc38)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc38)
    %31 = cir.const #cir.int<32> : !u64i loc(#loc211)
    cir.libc.memmove %31 bytes from %30 to %27 : !cir.ptr<!void>, !u64i loc(#loc212)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc43)
    %33 = cir.cast(integral, %32 : !s32i), !s8i loc(#loc43)
    %34 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc44)
    %35 = cir.get_member %34[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
    %36 = cir.const #cir.int<16> : !u64i loc(#loc213)
    %37 = cir.const #cir.int<1> : !u64i loc(#loc214)
    %38 = cir.binop(div, %36, %37) : !u64i loc(#loc215)
    %39 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc49)
    %41 = cir.binop(sub, %38, %40) : !u64i loc(#loc216)
    %42 = cir.cast(array_to_ptrdecay, %35 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc44)
    %43 = cir.ptr_stride(%42 : !cir.ptr<!s8i>, %41 : !u64i), !cir.ptr<!s8i> loc(#loc51)
    cir.store %33, %43 : !s8i, !cir.ptr<!s8i> loc(#loc217)
    %44 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc52)
    %45 = cir.get_member %44[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
    %46 = cir.cast(array_to_ptrdecay, %45 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc218)
    cir.call @printLine(%46) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %47 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc55)
    %48 = cir.get_member %47[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc31)
    %49 = cir.load %48 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc56)
    %50 = cir.cast(bitcast, %49 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc219)
    cir.call @printLine(%50) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    cir.br ^bb8 loc(#loc18)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc13)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc13)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc9)
  } loc(#loc197)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc221)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc222)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc62)
    cir.return loc(#loc59)
  } loc(#loc220)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc223)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc224)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc71)
  cir.func @main(%arg0: !s32i loc(fused[#loc74, #loc75]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc76, #loc77])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc226)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc227)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc73)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc78)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc78)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc79)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc80)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc80)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc81)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc68)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06_good : !cir.ptr<!cir.func<!void ()>> loc(#loc228)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06_good() : () -> () loc(#loc83)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc69)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc70)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc229)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06_bad() : () -> () loc(#loc87)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc71)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc90)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc230)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc230)
    cir.return %17 : !s32i loc(#loc230)
  } loc(#loc225)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc92)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>>, ["structCharVoid", init] {alignment = 8 : i64} loc(#loc232)
    cir.br ^bb1 loc(#loc233)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<5> : !s32i loc(#loc99)
    %2 = cir.const #cir.int<5> : !s32i loc(#loc100)
    %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc234)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc235)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc92)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc104)
    cir.br ^bb10 loc(#loc102)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc236)
  ^bb4:  // pred: ^bb3
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc107)
    %7 = cir.const #cir.int<32> : !u64i loc(#loc237)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc107)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc238)
    cir.store %9, %0 : !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>> loc(#loc232)
    cir.br ^bb5 loc(#loc239)
  ^bb5:  // pred: ^bb4
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc112)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc113)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc113)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!ty__charVoid>, !cir.bool loc(#loc240)
    cir.brcond %13 ^bb6, ^bb7 loc(#loc241)
  ^bb6:  // pred: ^bb5
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc115)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc116)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc117)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc115)
    cir.br ^bb7 loc(#loc111)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc111)
  ^bb8:  // pred: ^bb7
    %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc118)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc118)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc118)
    %20 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc119)
    %21 = cir.get_member %20[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc31)
    cir.store %19, %21 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc242)
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc120)
    %23 = cir.get_member %22[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc31)
    %24 = cir.load %23 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc121)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc243)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc122)
    %26 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc123)
    %27 = cir.get_member %26[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
    %28 = cir.cast(array_to_ptrdecay, %27 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc244)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc244)
    %30 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc125)
    %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc125)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc125)
    %33 = cir.const #cir.int<16> : !u64i loc(#loc245)
    cir.libc.memmove %33 bytes from %32 to %29 : !cir.ptr<!void>, !u64i loc(#loc246)
    %34 = cir.const #cir.int<0> : !s32i loc(#loc130)
    %35 = cir.cast(integral, %34 : !s32i), !s8i loc(#loc130)
    %36 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc131)
    %37 = cir.get_member %36[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
    %38 = cir.const #cir.int<16> : !u64i loc(#loc247)
    %39 = cir.const #cir.int<1> : !u64i loc(#loc248)
    %40 = cir.binop(div, %38, %39) : !u64i loc(#loc249)
    %41 = cir.const #cir.int<1> : !s32i loc(#loc136)
    %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc136)
    %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc250)
    %44 = cir.cast(array_to_ptrdecay, %37 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc131)
    %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc138)
    cir.store %35, %45 : !s8i, !cir.ptr<!s8i> loc(#loc251)
    %46 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc139)
    %47 = cir.get_member %46[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
    %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc252)
    cir.call @printLine(%48) : (!cir.ptr<!s8i>) -> () loc(#loc141)
    %49 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc142)
    %50 = cir.get_member %49[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc31)
    %51 = cir.load %50 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc143)
    %52 = cir.cast(bitcast, %51 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc253)
    cir.call @printLine(%52) : (!cir.ptr<!s8i>) -> () loc(#loc144)
    cir.br ^bb9 loc(#loc106)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc98)
  ^bb10:  // 2 preds: ^bb2, ^bb9
    cir.br ^bb11 loc(#loc98)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc94)
  } loc(#loc231)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>>, ["structCharVoid", init] {alignment = 8 : i64} loc(#loc255)
    cir.br ^bb1 loc(#loc256)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<5> : !s32i loc(#loc151)
    %2 = cir.const #cir.int<5> : !s32i loc(#loc152)
    %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc257)
    cir.brcond %3 ^bb2, ^bb9 loc(#loc258)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc259)
  ^bb3:  // pred: ^bb2
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc156)
    %5 = cir.const #cir.int<32> : !u64i loc(#loc260)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc156)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc261)
    cir.store %7, %0 : !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>> loc(#loc255)
    cir.br ^bb4 loc(#loc262)
  ^bb4:  // pred: ^bb3
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc161)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc162)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc162)
    %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!ty__charVoid>, !cir.bool loc(#loc263)
    cir.brcond %11 ^bb5, ^bb6 loc(#loc264)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc164)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc165)
    %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc166)
    cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc164)
    cir.br ^bb6 loc(#loc160)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc160)
  ^bb7:  // pred: ^bb6
    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc167)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc167)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc167)
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc168)
    %19 = cir.get_member %18[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc31)
    cir.store %17, %19 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc265)
    %20 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc169)
    %21 = cir.get_member %20[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc31)
    %22 = cir.load %21 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc170)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc266)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc171)
    %24 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc172)
    %25 = cir.get_member %24[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc267)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc267)
    %28 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc174)
    %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc174)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc174)
    %31 = cir.const #cir.int<16> : !u64i loc(#loc268)
    cir.libc.memmove %31 bytes from %30 to %27 : !cir.ptr<!void>, !u64i loc(#loc269)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc179)
    %33 = cir.cast(integral, %32 : !s32i), !s8i loc(#loc179)
    %34 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc180)
    %35 = cir.get_member %34[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
    %36 = cir.const #cir.int<16> : !u64i loc(#loc270)
    %37 = cir.const #cir.int<1> : !u64i loc(#loc271)
    %38 = cir.binop(div, %36, %37) : !u64i loc(#loc272)
    %39 = cir.const #cir.int<1> : !s32i loc(#loc185)
    %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc185)
    %41 = cir.binop(sub, %38, %40) : !u64i loc(#loc273)
    %42 = cir.cast(array_to_ptrdecay, %35 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc180)
    %43 = cir.ptr_stride(%42 : !cir.ptr<!s8i>, %41 : !u64i), !cir.ptr<!s8i> loc(#loc187)
    cir.store %33, %43 : !s8i, !cir.ptr<!s8i> loc(#loc274)
    %44 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc188)
    %45 = cir.get_member %44[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
    %46 = cir.cast(array_to_ptrdecay, %45 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc275)
    cir.call @printLine(%46) : (!cir.ptr<!s8i>) -> () loc(#loc190)
    %47 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc191)
    %48 = cir.get_member %47[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc31)
    %49 = cir.load %48 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc192)
    %50 = cir.cast(bitcast, %49 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc276)
    cir.call @printLine(%50) : (!cir.ptr<!s8i>) -> () loc(#loc193)
    cir.br ^bb8 loc(#loc155)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc150)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc150)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc146)
  } loc(#loc254)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":45:50)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":38:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":55:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":43:13)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":43:76)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":40:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":54:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":40:8)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":40:27)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":41:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":42:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":53:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":43:53)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":43:60)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":43:75)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":44:13)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":44:51)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":44:17)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":44:35)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":44:41)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":44:42)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":44:48)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":44:47)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":45:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":27:12)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":47:31)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":47:47)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":47:13)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":49:21)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":26:10)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":49:37)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":49:48)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":49:57)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":49:79)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":49:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":49:80)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":50:93)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":50:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":50:40)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":50:72)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":50:74)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":50:85)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":50:88)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":50:39)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":50:29)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":51:31)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":51:47)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":51:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":52:31)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":52:47)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":52:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":106:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":110:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":108:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":108:11)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":109:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":109:11)
#loc64 = loc("/usr/include/stdlib.h":575:1)
#loc65 = loc("/usr/include/stdlib.h":575:41)
#loc66 = loc("/usr/include/time.h":76:1)
#loc67 = loc("/usr/include/time.h":76:38)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":126:15)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":128:15)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":131:15)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":133:15)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":121:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":136:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":122:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":124:27)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":124:22)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":124:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":126:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":127:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":127:74)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":128:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":131:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":132:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":132:73)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":133:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":135:12)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":135:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":67:19)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":62:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":84:1)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":72:13)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":72:76)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":64:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":83:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":64:8)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":64:27)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":65:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":68:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":70:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":67:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":71:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":82:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":72:53)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":72:60)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":72:75)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":73:13)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":73:51)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":73:17)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":73:35)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":73:41)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":73:42)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":73:48)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":73:47)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":74:50)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":74:13)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":76:31)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":76:47)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":76:13)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":78:21)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":78:37)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":78:48)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":78:57)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":78:89)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":78:13)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":78:90)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":79:93)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":79:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":79:40)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":79:72)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":79:74)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":79:85)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":79:88)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":79:39)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":79:29)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":80:31)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":80:47)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":80:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":81:31)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":81:47)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":81:13)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":87:1)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":104:1)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":92:13)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":92:76)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":89:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":103:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":89:8)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":89:27)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":90:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":91:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":102:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":92:53)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":92:60)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":92:75)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":93:13)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":93:51)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":93:17)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":93:35)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":93:41)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":93:42)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":93:48)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":93:47)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":94:50)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":94:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":96:31)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":96:47)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":96:13)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":98:21)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":98:37)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":98:48)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":98:57)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":98:89)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":98:13)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":98:90)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":99:93)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":99:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":99:40)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":99:72)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":99:74)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":99:85)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":99:88)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":99:39)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":99:29)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":100:31)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":100:47)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":100:13)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":101:31)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":101:47)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c":101:13)
#loc194 = loc(fused[#loc1, #loc2])
#loc195 = loc(fused[#loc3, #loc4])
#loc196 = loc(fused[#loc6, #loc7])
#loc197 = loc(fused[#loc8, #loc9])
#loc198 = loc(fused[#loc10, #loc11])
#loc199 = loc(fused[#loc12, #loc13])
#loc200 = loc(fused[#loc14, #loc15])
#loc201 = loc(fused[#loc16, #loc13])
#loc202 = loc(fused[#loc17, #loc18])
#loc203 = loc(fused[#loc20, #loc21])
#loc204 = loc(fused[#loc19, #loc11])
#loc205 = loc(fused[#loc22, #loc23])
#loc206 = loc(fused[#loc24, #loc25])
#loc207 = loc(fused[#loc26, #loc23])
#loc208 = loc(fused[#loc30, #loc5])
#loc209 = loc(fused[#loc32, #loc33])
#loc210 = loc(fused[#loc35, #loc37])
#loc211 = loc(fused[#loc39, #loc40])
#loc212 = loc(fused[#loc41, #loc42])
#loc213 = loc(fused[#loc45, #loc46])
#loc214 = loc(fused[#loc47, #loc48])
#loc215 = loc(fused[#loc45, #loc48])
#loc216 = loc(fused[#loc50, #loc49])
#loc217 = loc(fused[#loc44, #loc43])
#loc218 = loc(fused[#loc52, #loc53])
#loc219 = loc(fused[#loc55, #loc56])
#loc220 = loc(fused[#loc58, #loc59])
#loc221 = loc(fused[#loc60, #loc61])
#loc222 = loc(fused[#loc62, #loc63])
#loc223 = loc(fused[#loc64, #loc65])
#loc224 = loc(fused[#loc66, #loc67])
#loc225 = loc(fused[#loc72, #loc73])
#loc228 = loc(fused[#loc83, #loc84])
#loc229 = loc(fused[#loc87, #loc88])
#loc230 = loc(fused[#loc91, #loc90])
#loc231 = loc(fused[#loc93, #loc94])
#loc232 = loc(fused[#loc95, #loc96])
#loc233 = loc(fused[#loc97, #loc98])
#loc234 = loc(fused[#loc99, #loc100])
#loc235 = loc(fused[#loc101, #loc102, #loc103, #loc98])
#loc236 = loc(fused[#loc105, #loc106])
#loc237 = loc(fused[#loc108, #loc109])
#loc238 = loc(fused[#loc107, #loc96])
#loc239 = loc(fused[#loc110, #loc111])
#loc240 = loc(fused[#loc112, #loc113])
#loc241 = loc(fused[#loc114, #loc111])
#loc242 = loc(fused[#loc119, #loc118])
#loc243 = loc(fused[#loc120, #loc121])
#loc244 = loc(fused[#loc123, #loc124])
#loc245 = loc(fused[#loc126, #loc127])
#loc246 = loc(fused[#loc128, #loc129])
#loc247 = loc(fused[#loc132, #loc133])
#loc248 = loc(fused[#loc134, #loc135])
#loc249 = loc(fused[#loc132, #loc135])
#loc250 = loc(fused[#loc137, #loc136])
#loc251 = loc(fused[#loc131, #loc130])
#loc252 = loc(fused[#loc139, #loc140])
#loc253 = loc(fused[#loc142, #loc143])
#loc254 = loc(fused[#loc145, #loc146])
#loc255 = loc(fused[#loc147, #loc148])
#loc256 = loc(fused[#loc149, #loc150])
#loc257 = loc(fused[#loc151, #loc152])
#loc258 = loc(fused[#loc153, #loc150])
#loc259 = loc(fused[#loc154, #loc155])
#loc260 = loc(fused[#loc157, #loc158])
#loc261 = loc(fused[#loc156, #loc148])
#loc262 = loc(fused[#loc159, #loc160])
#loc263 = loc(fused[#loc161, #loc162])
#loc264 = loc(fused[#loc163, #loc160])
#loc265 = loc(fused[#loc168, #loc167])
#loc266 = loc(fused[#loc169, #loc170])
#loc267 = loc(fused[#loc172, #loc173])
#loc268 = loc(fused[#loc175, #loc176])
#loc269 = loc(fused[#loc177, #loc178])
#loc270 = loc(fused[#loc181, #loc182])
#loc271 = loc(fused[#loc183, #loc184])
#loc272 = loc(fused[#loc181, #loc184])
#loc273 = loc(fused[#loc186, #loc185])
#loc274 = loc(fused[#loc180, #loc179])
#loc275 = loc(fused[#loc188, #loc189])
#loc276 = loc(fused[#loc191, #loc192])
