!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc57)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc58)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64b_badSink(!cir.ptr<!void>) loc(#loc59)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc61)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc11)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc62)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc13)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc14)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc14)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc13)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc63)
    cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc64)
    cir.br ^bb1 loc(#loc65)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc19)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc20)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc20)
    %10 = cir.cmp(eq, %7, %9) : !cir.ptr<!s32i>, !cir.bool loc(#loc66)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc67)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc22)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc24)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc22)
    cir.br ^bb3 loc(#loc18)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc18)
  ^bb4:  // pred: ^bb3
    %14 = cir.cast(bitcast, %0 : !cir.ptr<!cir.ptr<!s32i>>), !cir.ptr<!void> loc(#loc68)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64b_badSink(%14) : (!cir.ptr<!void>) -> () loc(#loc27)
    cir.return loc(#loc8)
  } loc(#loc60)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc70)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    cir.return loc(#loc29)
  } loc(#loc69)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64b_goodG2BSink(!cir.ptr<!void>) loc(#loc71)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc73)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc38)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc74)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc40)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc41)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc41)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc75)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc76)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc40)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc77)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc78)
    cir.br ^bb1 loc(#loc79)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc48)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc49)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc49)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc80)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc81)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc51)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc53)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc51)
    cir.br ^bb3 loc(#loc47)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc47)
  ^bb4:  // pred: ^bb3
    %16 = cir.cast(bitcast, %0 : !cir.ptr<!cir.ptr<!s32i>>), !cir.ptr<!void> loc(#loc82)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64b_goodG2BSink(%16) : (!cir.ptr<!void>) -> () loc(#loc56)
    cir.return loc(#loc35)
  } loc(#loc72)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":22:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":22:85)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":24:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":32:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":26:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":26:11)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":27:12)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":27:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":29:19)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":29:26)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":29:28)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":29:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":30:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":30:33)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":30:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":30:17)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":30:23)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":30:24)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":30:30)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":30:29)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":31:66)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":31:67)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":31:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":51:1)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":54:1)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":53:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":53:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":39:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":39:89)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":41:1)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":49:1)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":43:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":43:11)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":44:12)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":44:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":46:19)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":46:26)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":46:29)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":46:39)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":46:40)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":46:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":47:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":47:33)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":47:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":47:17)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":47:23)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":47:24)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":47:30)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":47:29)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":48:70)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":48:71)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c":48:5)
#loc57 = loc(fused[#loc1, #loc2])
#loc58 = loc(fused[#loc3, #loc4])
#loc59 = loc(fused[#loc5, #loc6])
#loc60 = loc(fused[#loc7, #loc8])
#loc61 = loc(fused[#loc9, #loc10])
#loc62 = loc(fused[#loc12, #loc11])
#loc63 = loc(fused[#loc13, #loc15])
#loc64 = loc(fused[#loc16, #loc15])
#loc65 = loc(fused[#loc17, #loc18])
#loc66 = loc(fused[#loc19, #loc20])
#loc67 = loc(fused[#loc21, #loc18])
#loc68 = loc(fused[#loc25, #loc26])
#loc69 = loc(fused[#loc28, #loc29])
#loc70 = loc(fused[#loc30, #loc31])
#loc71 = loc(fused[#loc32, #loc33])
#loc72 = loc(fused[#loc34, #loc35])
#loc73 = loc(fused[#loc36, #loc37])
#loc74 = loc(fused[#loc39, #loc38])
#loc75 = loc(fused[#loc42, #loc43])
#loc76 = loc(fused[#loc41, #loc43])
#loc77 = loc(fused[#loc40, #loc44])
#loc78 = loc(fused[#loc45, #loc44])
#loc79 = loc(fused[#loc46, #loc47])
#loc80 = loc(fused[#loc48, #loc49])
#loc81 = loc(fused[#loc50, #loc47])
#loc82 = loc(fused[#loc54, #loc55])
