!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":22:21)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":22:25)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":60:12)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":70:25)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":70:29)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":113:25)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":113:29)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":125:23)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":149:12)
#true = #cir.bool<true> : !cir.bool
#loc266 = loc(fused[#loc14, #loc15])
#loc301 = loc(fused[#loc100, #loc101])
#loc332 = loc(fused[#loc180, #loc181])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc260)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc261)
  cir.func private @printIntLine(!s32i) loc(#loc262)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc263)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc9)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc264)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc14, #loc15])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc267)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc268)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc266)
    cir.store %arg0, %2 : !s32i, !cir.ptr<!s32i> loc(#loc20)
    cir.br ^bb1 loc(#loc269)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc23)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc24)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc24)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc270)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc271)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc23)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc272)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc268)
    cir.br ^bb2 loc(#loc273)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc29)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc30)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc274)
    cir.brcond %13 ^bb3, ^bb4 loc(#loc275)
  ^bb3:  // pred: ^bb2
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc32)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc34)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
    cir.br ^bb4 loc(#loc28)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc28)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc276)
  ^bb6:  // pred: ^bb5
    %17 = cir.const #cir.int<0> : !s32i loc(#loc37)
    cir.store %17, %0 : !s32i, !cir.ptr<!s32i> loc(#loc277)
    cir.br ^bb7 loc(#loc276)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    %19 = cir.const #cir.int<10> : !s32i loc(#loc40)
    %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc278)
    cir.brcond %20 ^bb8, ^bb12 loc(#loc41)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc279)
  ^bb9:  // pred: ^bb8
    %21 = cir.const #cir.int<0> : !s32i loc(#loc43)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
    %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc46)
    cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc280)
    cir.br ^bb10 loc(#loc36)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc36)
  ^bb11:  // pred: ^bb10
    %25 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    %26 = cir.unary(inc, %25) : !s32i, !s32i loc(#loc48)
    cir.store %26, %0 : !s32i, !cir.ptr<!s32i> loc(#loc281)
    cir.br ^bb7 loc(#loc276)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc36)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc282)
  ^bb14:  // pred: ^bb13
    %27 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    %28 = cir.const #cir.int<0> : !s32i loc(#loc52)
    %29 = cir.cmp(ge, %27, %28) : !s32i, !cir.bool loc(#loc283)
    cir.brcond %29 ^bb15, ^bb24 loc(#loc284)
  ^bb15:  // pred: ^bb14
    %30 = cir.const #cir.int<1> : !s32i loc(#loc56)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc57)
    %32 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc58)
    %33 = cir.ptr_stride(%31 : !cir.ptr<!s32i>, %32 : !s32i), !cir.ptr<!s32i> loc(#loc59)
    cir.store %30, %33 : !s32i, !cir.ptr<!s32i> loc(#loc285)
    cir.br ^bb16 loc(#loc286)
  ^bb16:  // pred: ^bb15
    %34 = cir.const #cir.int<0> : !s32i loc(#loc62)
    cir.store %34, %0 : !s32i, !cir.ptr<!s32i> loc(#loc287)
    cir.br ^bb17 loc(#loc286)
  ^bb17:  // 2 preds: ^bb16, ^bb21
    %35 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    %36 = cir.const #cir.int<10> : !s32i loc(#loc65)
    %37 = cir.cmp(lt, %35, %36) : !s32i, !cir.bool loc(#loc288)
    cir.brcond %37 ^bb18, ^bb22 loc(#loc66)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc289)
  ^bb19:  // pred: ^bb18
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc68)
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    %40 = cir.ptr_stride(%38 : !cir.ptr<!s32i>, %39 : !s32i), !cir.ptr<!s32i> loc(#loc70)
    %41 = cir.load %40 : !cir.ptr<!s32i>, !s32i loc(#loc68)
    cir.call @printIntLine(%41) : (!s32i) -> () loc(#loc71)
    cir.br ^bb20 loc(#loc61)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc61)
  ^bb21:  // pred: ^bb20
    %42 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
    %43 = cir.unary(inc, %42) : !s32i, !s32i loc(#loc73)
    cir.store %43, %0 : !s32i, !cir.ptr<!s32i> loc(#loc290)
    cir.br ^bb17 loc(#loc286)
  ^bb22:  // pred: ^bb17
    cir.br ^bb23 loc(#loc61)
  ^bb23:  // pred: ^bb22
    cir.br ^bb25 loc(#loc54)
  ^bb24:  // pred: ^bb14
    %44 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc9)
    %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    cir.br ^bb25 loc(#loc50)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    cir.br ^bb26 loc(#loc50)
  ^bb26:  // pred: ^bb25
    %46 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc75)
    %47 = cir.cast(bitcast, %46 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc75)
    cir.call @free(%47) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc76)
    cir.br ^bb27 loc(#loc22)
  ^bb27:  // pred: ^bb26
    cir.return loc(#loc13)
  } loc(#loc265)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc291)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc293)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc294)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc84)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc294)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc85)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc86)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc295)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc88)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc88)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc88)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc88)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc88)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc88)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc88)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc88)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc88)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc88)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc88)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc88)
    cir.br ^bb3(%20 : !u32i) loc(#loc88)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc88)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc88)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc88)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc88)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc88)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc88)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc88)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc88)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc88)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc88)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc88)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc88)
    cir.br ^bb3(%36 : !u32i) loc(#loc88)
  ^bb3(%37: !u32i loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":60:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc88)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc88)
    cir.store %38, %0 : !s32i, !cir.ptr<!s32i> loc(#loc296)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc90)
    %40 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc91)
    cir.call %39(%40) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc90)
    cir.return loc(#loc80)
  } loc(#loc292)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc298)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc94)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc299)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc96)
    cir.return loc(#loc93)
  } loc(#loc297)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc100, #loc101])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc302)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc303)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc301)
    cir.store %arg0, %2 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    cir.br ^bb1 loc(#loc304)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc109)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc110)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc110)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc305)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc306)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc109)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc307)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc303)
    cir.br ^bb2 loc(#loc308)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc115)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc116)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc116)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc309)
    cir.brcond %13 ^bb3, ^bb4 loc(#loc310)
  ^bb3:  // pred: ^bb2
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc118)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc119)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc120)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc118)
    cir.br ^bb4 loc(#loc114)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc114)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc311)
  ^bb6:  // pred: ^bb5
    %17 = cir.const #cir.int<0> : !s32i loc(#loc123)
    cir.store %17, %0 : !s32i, !cir.ptr<!s32i> loc(#loc312)
    cir.br ^bb7 loc(#loc311)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc125)
    %19 = cir.const #cir.int<10> : !s32i loc(#loc126)
    %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc313)
    cir.brcond %20 ^bb8, ^bb12 loc(#loc127)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc314)
  ^bb9:  // pred: ^bb8
    %21 = cir.const #cir.int<0> : !s32i loc(#loc129)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc130)
    %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc131)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc132)
    cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc315)
    cir.br ^bb10 loc(#loc122)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc122)
  ^bb11:  // pred: ^bb10
    %25 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc133)
    %26 = cir.unary(inc, %25) : !s32i, !s32i loc(#loc134)
    cir.store %26, %0 : !s32i, !cir.ptr<!s32i> loc(#loc316)
    cir.br ^bb7 loc(#loc311)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc122)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc317)
  ^bb14:  // pred: ^bb13
    %27 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    %28 = cir.const #cir.int<0> : !s32i loc(#loc138)
    %29 = cir.cmp(ge, %27, %28) : !s32i, !cir.bool loc(#loc318)
    cir.brcond %29 ^bb15, ^bb24 loc(#loc319)
  ^bb15:  // pred: ^bb14
    %30 = cir.const #cir.int<1> : !s32i loc(#loc142)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc143)
    %32 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc144)
    %33 = cir.ptr_stride(%31 : !cir.ptr<!s32i>, %32 : !s32i), !cir.ptr<!s32i> loc(#loc145)
    cir.store %30, %33 : !s32i, !cir.ptr<!s32i> loc(#loc320)
    cir.br ^bb16 loc(#loc321)
  ^bb16:  // pred: ^bb15
    %34 = cir.const #cir.int<0> : !s32i loc(#loc148)
    cir.store %34, %0 : !s32i, !cir.ptr<!s32i> loc(#loc322)
    cir.br ^bb17 loc(#loc321)
  ^bb17:  // 2 preds: ^bb16, ^bb21
    %35 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc150)
    %36 = cir.const #cir.int<10> : !s32i loc(#loc151)
    %37 = cir.cmp(lt, %35, %36) : !s32i, !cir.bool loc(#loc323)
    cir.brcond %37 ^bb18, ^bb22 loc(#loc152)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc324)
  ^bb19:  // pred: ^bb18
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc154)
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc155)
    %40 = cir.ptr_stride(%38 : !cir.ptr<!s32i>, %39 : !s32i), !cir.ptr<!s32i> loc(#loc156)
    %41 = cir.load %40 : !cir.ptr<!s32i>, !s32i loc(#loc154)
    cir.call @printIntLine(%41) : (!s32i) -> () loc(#loc157)
    cir.br ^bb20 loc(#loc147)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc147)
  ^bb21:  // pred: ^bb20
    %42 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    %43 = cir.unary(inc, %42) : !s32i, !s32i loc(#loc159)
    cir.store %43, %0 : !s32i, !cir.ptr<!s32i> loc(#loc325)
    cir.br ^bb17 loc(#loc321)
  ^bb22:  // pred: ^bb17
    cir.br ^bb23 loc(#loc147)
  ^bb23:  // pred: ^bb22
    cir.br ^bb25 loc(#loc140)
  ^bb24:  // pred: ^bb14
    %44 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc160)
    %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc160)
    cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc161)
    cir.br ^bb25 loc(#loc136)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    cir.br ^bb26 loc(#loc136)
  ^bb26:  // pred: ^bb25
    %46 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc162)
    %47 = cir.cast(bitcast, %46 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc162)
    cir.call @free(%47) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc163)
    cir.br ^bb27 loc(#loc108)
  ^bb27:  // pred: ^bb26
    cir.return loc(#loc99)
  } loc(#loc300)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc327)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc328)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc169)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc328)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc170)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc171)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc329)
    %5 = cir.const #cir.int<7> : !s32i loc(#loc173)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc330)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc175)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc176)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc175)
    cir.return loc(#loc165)
  } loc(#loc326)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc177)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc180, #loc181])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc333)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc334)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc332)
    cir.store %arg0, %2 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    cir.br ^bb1 loc(#loc335)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc189)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc190)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc190)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc336)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc337)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc189)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc338)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc334)
    cir.br ^bb2 loc(#loc339)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc195)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc196)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc196)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc340)
    cir.brcond %13 ^bb3, ^bb4 loc(#loc341)
  ^bb3:  // pred: ^bb2
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc198)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc199)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc200)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc198)
    cir.br ^bb4 loc(#loc194)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc194)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc342)
  ^bb6:  // pred: ^bb5
    %17 = cir.const #cir.int<0> : !s32i loc(#loc203)
    cir.store %17, %0 : !s32i, !cir.ptr<!s32i> loc(#loc343)
    cir.br ^bb7 loc(#loc342)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc205)
    %19 = cir.const #cir.int<10> : !s32i loc(#loc206)
    %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc344)
    cir.brcond %20 ^bb8, ^bb12 loc(#loc207)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc345)
  ^bb9:  // pred: ^bb8
    %21 = cir.const #cir.int<0> : !s32i loc(#loc209)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc210)
    %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc211)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc212)
    cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc346)
    cir.br ^bb10 loc(#loc202)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc202)
  ^bb11:  // pred: ^bb10
    %25 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc213)
    %26 = cir.unary(inc, %25) : !s32i, !s32i loc(#loc214)
    cir.store %26, %0 : !s32i, !cir.ptr<!s32i> loc(#loc347)
    cir.br ^bb7 loc(#loc342)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc202)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc348)
  ^bb14:  // pred: ^bb13
    %27 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc217)
    %28 = cir.const #cir.int<0> : !s32i loc(#loc218)
    %29 = cir.cmp(ge, %27, %28) : !s32i, !cir.bool loc(#loc349)
    cir.brcond %29 ^bb15, ^bb20 loc(#loc219)
  ^bb15:  // pred: ^bb14
    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc220)
    %31 = cir.const #cir.int<10> : !s32i loc(#loc221)
    %32 = cir.cmp(lt, %30, %31) : !s32i, !cir.bool loc(#loc350)
    cir.brcond %32 ^bb16, ^bb17 loc(#loc219)
  ^bb16:  // pred: ^bb15
    %33 = cir.const #true loc(#loc219)
    cir.br ^bb18(%33 : !cir.bool) loc(#loc219)
  ^bb17:  // pred: ^bb15
    %34 = cir.const #false loc(#loc219)
    cir.br ^bb18(%34 : !cir.bool) loc(#loc219)
  ^bb18(%35: !cir.bool loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":125:23)):  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc219)
  ^bb19:  // pred: ^bb18
    cir.br ^bb21(%35 : !cir.bool) loc(#loc219)
  ^bb20:  // pred: ^bb14
    %36 = cir.const #false loc(#loc219)
    cir.br ^bb21(%36 : !cir.bool) loc(#loc219)
  ^bb21(%37: !cir.bool loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":125:23)):  // 2 preds: ^bb19, ^bb20
    cir.br ^bb22 loc(#loc219)
  ^bb22:  // pred: ^bb21
    cir.brcond %37 ^bb23, ^bb32 loc(#loc351)
  ^bb23:  // pred: ^bb22
    %38 = cir.const #cir.int<1> : !s32i loc(#loc226)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc227)
    %40 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc228)
    %41 = cir.ptr_stride(%39 : !cir.ptr<!s32i>, %40 : !s32i), !cir.ptr<!s32i> loc(#loc229)
    cir.store %38, %41 : !s32i, !cir.ptr<!s32i> loc(#loc352)
    cir.br ^bb24 loc(#loc353)
  ^bb24:  // pred: ^bb23
    %42 = cir.const #cir.int<0> : !s32i loc(#loc232)
    cir.store %42, %0 : !s32i, !cir.ptr<!s32i> loc(#loc354)
    cir.br ^bb25 loc(#loc353)
  ^bb25:  // 2 preds: ^bb24, ^bb29
    %43 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc234)
    %44 = cir.const #cir.int<10> : !s32i loc(#loc235)
    %45 = cir.cmp(lt, %43, %44) : !s32i, !cir.bool loc(#loc355)
    cir.brcond %45 ^bb26, ^bb30 loc(#loc236)
  ^bb26:  // pred: ^bb25
    cir.br ^bb27 loc(#loc356)
  ^bb27:  // pred: ^bb26
    %46 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc238)
    %47 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc239)
    %48 = cir.ptr_stride(%46 : !cir.ptr<!s32i>, %47 : !s32i), !cir.ptr<!s32i> loc(#loc240)
    %49 = cir.load %48 : !cir.ptr<!s32i>, !s32i loc(#loc238)
    cir.call @printIntLine(%49) : (!s32i) -> () loc(#loc241)
    cir.br ^bb28 loc(#loc231)
  ^bb28:  // pred: ^bb27
    cir.br ^bb29 loc(#loc231)
  ^bb29:  // pred: ^bb28
    %50 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc242)
    %51 = cir.unary(inc, %50) : !s32i, !s32i loc(#loc243)
    cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc357)
    cir.br ^bb25 loc(#loc353)
  ^bb30:  // pred: ^bb25
    cir.br ^bb31 loc(#loc231)
  ^bb31:  // pred: ^bb30
    cir.br ^bb33 loc(#loc224)
  ^bb32:  // pred: ^bb22
    %52 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc177)
    %53 = cir.cast(array_to_ptrdecay, %52 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc177)
    cir.call @printLine(%53) : (!cir.ptr<!s8i>) -> () loc(#loc244)
    cir.br ^bb33 loc(#loc216)
  ^bb33:  // 2 preds: ^bb31, ^bb32
    cir.br ^bb34 loc(#loc216)
  ^bb34:  // pred: ^bb33
    %54 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc245)
    %55 = cir.cast(bitcast, %54 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc245)
    cir.call @free(%55) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc246)
    cir.br ^bb35 loc(#loc188)
  ^bb35:  // pred: ^bb34
    cir.return loc(#loc179)
  } loc(#loc331)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc359)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc360)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc252)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc360)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc253)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc254)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc361)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc256)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc256)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc256)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc256)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc256)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc256)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc256)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc256)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc256)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc256)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc256)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc256)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc256)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc256)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc256)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc256)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc256)
    cir.br ^bb3(%20 : !u32i) loc(#loc256)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc256)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc256)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc256)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc256)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc256)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc256)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc256)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc256)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc256)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc256)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc256)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc256)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc256)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc256)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc256)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc256)
    cir.br ^bb3(%36 : !u32i) loc(#loc256)
  ^bb3(%37: !u32i loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":149:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc256)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc256)
    cir.store %38, %0 : !s32i, !cir.ptr<!s32i> loc(#loc362)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc258)
    %40 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc259)
    cir.call %39(%40) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc258)
    cir.return loc(#loc248)
  } loc(#loc358)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":46:23)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":22:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":50:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":25:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":25:13)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":26:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":26:54)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":23:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":24:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":49:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":26:31)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":26:38)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":26:43)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":26:53)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":27:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":27:39)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":27:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":27:23)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":27:29)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":27:30)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":27:36)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":27:35)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":29:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":32:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":29:18)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":29:14)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":29:21)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":29:25)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":29:23)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":30:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":31:25)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":31:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":31:20)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":31:21)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":29:30)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":29:29)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":35:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":47:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":35:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":35:21)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":36:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":43:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":45:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":37:28)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":37:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":37:20)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":37:24)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":39:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":42:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":39:21)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":39:17)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":39:24)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":39:28)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":39:26)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":40:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":41:30)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":41:37)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":41:38)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":41:17)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":39:33)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":39:32)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":46:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":48:14)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":48:9)
#loc77 = loc("/usr/include/stdlib.h":573:1)
#loc78 = loc("/usr/include/stdlib.h":573:24)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":52:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":63:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":54:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":54:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":56:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":56:29)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":58:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":58:12)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":58:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":60:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":62:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":62:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":153:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":157:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":155:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":155:13)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":156:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":156:13)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":70:1)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":98:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":73:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":73:13)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":74:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":74:54)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":71:1)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":72:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":97:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":74:31)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":74:38)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":74:43)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":74:53)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":75:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":75:39)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":75:13)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":75:23)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":75:29)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":75:30)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":75:36)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":75:35)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":77:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":80:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":77:18)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":77:14)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":77:21)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":77:25)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":77:23)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":78:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":79:25)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":79:13)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":79:20)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":79:21)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":77:30)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":77:29)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":83:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":95:9)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":83:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":83:21)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":84:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":91:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":93:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":85:28)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":85:13)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":85:20)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":85:24)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":87:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":90:13)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":87:21)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":87:17)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":87:24)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":87:28)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":87:26)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":88:13)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":89:30)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":89:37)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":89:38)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":89:17)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":87:33)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":87:32)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":94:23)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":94:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":96:14)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":96:9)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":100:1)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":110:1)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":102:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":102:9)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":103:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":103:29)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":105:13)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":105:12)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":105:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":108:12)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":108:5)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":109:5)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":109:13)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":136:23)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":113:1)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":140:1)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":116:9)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":116:13)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":117:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":117:54)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":114:1)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":115:5)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":139:5)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":117:31)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":117:38)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":117:43)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":117:53)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":118:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":118:39)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":118:13)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":118:23)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":118:29)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":118:30)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":118:36)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":118:35)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":120:9)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":123:9)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":120:18)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":120:14)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":120:21)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":120:25)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":120:23)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":121:9)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":122:25)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":122:13)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":122:20)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":122:21)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":120:30)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":120:29)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":125:9)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":137:9)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":125:13)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":125:21)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":125:26)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":125:34)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":125:36)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":126:9)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":133:9)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":135:9)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":127:28)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":127:13)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":127:20)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":127:24)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":129:13)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":132:13)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":129:21)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":129:17)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":129:24)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":129:28)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":129:26)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":130:13)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":131:30)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":131:37)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":131:38)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":131:17)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":129:33)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":129:32)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":136:13)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":138:14)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":138:9)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":142:1)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":151:1)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":144:5)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":144:9)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":145:5)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":145:29)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":147:13)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":147:12)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":147:5)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":149:5)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":150:5)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c":150:13)
#loc260 = loc(fused[#loc1, #loc2])
#loc261 = loc(fused[#loc3, #loc4])
#loc262 = loc(fused[#loc5, #loc6])
#loc263 = loc(fused[#loc7, #loc8])
#loc264 = loc(fused[#loc10, #loc11])
#loc265 = loc(fused[#loc12, #loc13])
#loc267 = loc(fused[#loc16, #loc17])
#loc268 = loc(fused[#loc18, #loc19])
#loc269 = loc(fused[#loc21, #loc22])
#loc270 = loc(fused[#loc25, #loc26])
#loc271 = loc(fused[#loc24, #loc26])
#loc272 = loc(fused[#loc23, #loc19])
#loc273 = loc(fused[#loc27, #loc28])
#loc274 = loc(fused[#loc29, #loc30])
#loc275 = loc(fused[#loc31, #loc28])
#loc276 = loc(fused[#loc35, #loc36])
#loc277 = loc(fused[#loc38, #loc37])
#loc278 = loc(fused[#loc39, #loc40])
#loc279 = loc(fused[#loc42, #loc36])
#loc280 = loc(fused[#loc44, #loc43])
#loc281 = loc(fused[#loc48, #loc47])
#loc282 = loc(fused[#loc49, #loc50])
#loc283 = loc(fused[#loc51, #loc52])
#loc284 = loc(fused[#loc53, #loc54, #loc55, #loc50])
#loc285 = loc(fused[#loc57, #loc56])
#loc286 = loc(fused[#loc60, #loc61])
#loc287 = loc(fused[#loc63, #loc62])
#loc288 = loc(fused[#loc64, #loc65])
#loc289 = loc(fused[#loc67, #loc61])
#loc290 = loc(fused[#loc73, #loc72])
#loc291 = loc(fused[#loc77, #loc78])
#loc292 = loc(fused[#loc79, #loc80])
#loc293 = loc(fused[#loc81, #loc82])
#loc294 = loc(fused[#loc83, #loc84])
#loc295 = loc(fused[#loc87, #loc85])
#loc296 = loc(fused[#loc89, #loc88])
#loc297 = loc(fused[#loc92, #loc93])
#loc298 = loc(fused[#loc94, #loc95])
#loc299 = loc(fused[#loc96, #loc97])
#loc300 = loc(fused[#loc98, #loc99])
#loc302 = loc(fused[#loc102, #loc103])
#loc303 = loc(fused[#loc104, #loc105])
#loc304 = loc(fused[#loc107, #loc108])
#loc305 = loc(fused[#loc111, #loc112])
#loc306 = loc(fused[#loc110, #loc112])
#loc307 = loc(fused[#loc109, #loc105])
#loc308 = loc(fused[#loc113, #loc114])
#loc309 = loc(fused[#loc115, #loc116])
#loc310 = loc(fused[#loc117, #loc114])
#loc311 = loc(fused[#loc121, #loc122])
#loc312 = loc(fused[#loc124, #loc123])
#loc313 = loc(fused[#loc125, #loc126])
#loc314 = loc(fused[#loc128, #loc122])
#loc315 = loc(fused[#loc130, #loc129])
#loc316 = loc(fused[#loc134, #loc133])
#loc317 = loc(fused[#loc135, #loc136])
#loc318 = loc(fused[#loc137, #loc138])
#loc319 = loc(fused[#loc139, #loc140, #loc141, #loc136])
#loc320 = loc(fused[#loc143, #loc142])
#loc321 = loc(fused[#loc146, #loc147])
#loc322 = loc(fused[#loc149, #loc148])
#loc323 = loc(fused[#loc150, #loc151])
#loc324 = loc(fused[#loc153, #loc147])
#loc325 = loc(fused[#loc159, #loc158])
#loc326 = loc(fused[#loc164, #loc165])
#loc327 = loc(fused[#loc166, #loc167])
#loc328 = loc(fused[#loc168, #loc169])
#loc329 = loc(fused[#loc172, #loc170])
#loc330 = loc(fused[#loc174, #loc173])
#loc331 = loc(fused[#loc178, #loc179])
#loc333 = loc(fused[#loc182, #loc183])
#loc334 = loc(fused[#loc184, #loc185])
#loc335 = loc(fused[#loc187, #loc188])
#loc336 = loc(fused[#loc191, #loc192])
#loc337 = loc(fused[#loc190, #loc192])
#loc338 = loc(fused[#loc189, #loc185])
#loc339 = loc(fused[#loc193, #loc194])
#loc340 = loc(fused[#loc195, #loc196])
#loc341 = loc(fused[#loc197, #loc194])
#loc342 = loc(fused[#loc201, #loc202])
#loc343 = loc(fused[#loc204, #loc203])
#loc344 = loc(fused[#loc205, #loc206])
#loc345 = loc(fused[#loc208, #loc202])
#loc346 = loc(fused[#loc210, #loc209])
#loc347 = loc(fused[#loc214, #loc213])
#loc348 = loc(fused[#loc215, #loc216])
#loc349 = loc(fused[#loc217, #loc218])
#loc350 = loc(fused[#loc220, #loc222])
#loc351 = loc(fused[#loc223, #loc224, #loc225, #loc216])
#loc352 = loc(fused[#loc227, #loc226])
#loc353 = loc(fused[#loc230, #loc231])
#loc354 = loc(fused[#loc233, #loc232])
#loc355 = loc(fused[#loc234, #loc235])
#loc356 = loc(fused[#loc237, #loc231])
#loc357 = loc(fused[#loc243, #loc242])
#loc358 = loc(fused[#loc247, #loc248])
#loc359 = loc(fused[#loc249, #loc250])
#loc360 = loc(fused[#loc251, #loc252])
#loc361 = loc(fused[#loc255, #loc253])
#loc362 = loc(fused[#loc257, #loc256])
