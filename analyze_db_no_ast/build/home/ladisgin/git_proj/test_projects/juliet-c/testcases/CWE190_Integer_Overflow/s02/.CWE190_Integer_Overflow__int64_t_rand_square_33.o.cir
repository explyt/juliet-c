!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc87)
  cir.func private  @printLongLongLine(!s64i) loc(#loc88)
  cir.func  @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc90)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc91)
    cir.store %0, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc10)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc11)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc92)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc13)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc13)
    %7 = cir.ternary(%6, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc13)
      %11 = cir.const #cir.int<60> : !s32i loc(#loc13)
      %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc13)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc13)
      %15 = cir.const #cir.int<45> : !s32i loc(#loc13)
      %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc13)
      %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc13)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc13)
      %20 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc13)
      %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc13)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc13)
      %25 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc13)
      %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc13)
      %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc13)
      %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc13)
      cir.yield %30 : !u64i loc(#loc13)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc13)
      %11 = cir.const #cir.int<60> : !s32i loc(#loc13)
      %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc13)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc13)
      %15 = cir.const #cir.int<45> : !s32i loc(#loc13)
      %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc13)
      %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc13)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc13)
      %20 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc13)
      %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc13)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc13)
      %25 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc13)
      %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc13)
      %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc13)
      %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc13)
      %31 = cir.unary(minus, %30) : !u64i, !u64i loc(#loc13)
      %32 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc13)
      %34 = cir.binop(sub, %31, %33) : !u64i loc(#loc13)
      cir.yield %34 : !u64i loc(#loc13)
    }) : (!cir.bool) -> !u64i loc(#loc13)
    %8 = cir.cast(integral, %7 : !u64i), !s64i loc(#loc13)
    cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc93)
    cir.scope {
      %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc95)
      %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc18)
      %11 = cir.load %10 : !cir.ptr<!s64i>, !s64i loc(#loc18)
      cir.store %11, %9 : !s64i, !cir.ptr<!s64i> loc(#loc95)
      cir.scope {
        %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc97)
        %13 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc23)
        %14 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc22)
        %15 = cir.binop(mul, %13, %14) nsw : !s64i loc(#loc23)
        cir.store %15, %12 : !s64i, !cir.ptr<!s64i> loc(#loc97)
        %16 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc24)
        cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc25)
      } loc(#loc96)
    } loc(#loc94)
    cir.return loc(#loc6)
  } loc(#loc89)
  cir.func internal private  @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc99)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc100)
    cir.store %0, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc31)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc32)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc101)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc34)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc34)
    cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc102)
    cir.scope {
      %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc104)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc39)
      %7 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc39)
      cir.store %7, %5 : !s64i, !cir.ptr<!s64i> loc(#loc104)
      cir.scope {
        %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc106)
        %9 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc44)
        %10 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc43)
        %11 = cir.binop(mul, %9, %10) nsw : !s64i loc(#loc44)
        cir.store %11, %8 : !s64i, !cir.ptr<!s64i> loc(#loc106)
        %12 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc45)
        cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc46)
      } loc(#loc105)
    } loc(#loc103)
    cir.return loc(#loc27)
  } loc(#loc98)
  cir.func private  @imaxabs(!s64i) -> !s64i extra(#fn_attr) loc(#loc107)
  cir.func private  @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc49)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc108)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc52)
  cir.func internal private  @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_33L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc110)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc111)
    cir.store %0, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc58)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc59)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc112)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc61)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc61)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc61)
    %7 = cir.ternary(%6, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc61)
      %11 = cir.const #cir.int<60> : !s32i loc(#loc61)
      %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc61)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc61)
      %15 = cir.const #cir.int<45> : !s32i loc(#loc61)
      %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc61)
      %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc61)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc61)
      %20 = cir.const #cir.int<30> : !s32i loc(#loc61)
      %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc61)
      %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc61)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc61)
      %25 = cir.const #cir.int<15> : !s32i loc(#loc61)
      %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc61)
      %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc61)
      %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
      %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc61)
      %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc61)
      cir.yield %30 : !u64i loc(#loc61)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc61)
      %11 = cir.const #cir.int<60> : !s32i loc(#loc61)
      %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc61)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc61)
      %15 = cir.const #cir.int<45> : !s32i loc(#loc61)
      %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc61)
      %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc61)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc61)
      %20 = cir.const #cir.int<30> : !s32i loc(#loc61)
      %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc61)
      %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc61)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc61)
      %25 = cir.const #cir.int<15> : !s32i loc(#loc61)
      %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc61)
      %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc61)
      %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
      %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc61)
      %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc61)
      %31 = cir.unary(minus, %30) : !u64i, !u64i loc(#loc61)
      %32 = cir.const #cir.int<1> : !s32i loc(#loc61)
      %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc61)
      %34 = cir.binop(sub, %31, %33) : !u64i loc(#loc61)
      cir.yield %34 : !u64i loc(#loc61)
    }) : (!cir.bool) -> !u64i loc(#loc61)
    %8 = cir.cast(integral, %7 : !u64i), !s64i loc(#loc61)
    cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc113)
    cir.scope {
      %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc115)
      %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc66)
      %11 = cir.load %10 : !cir.ptr<!s64i>, !s64i loc(#loc66)
      cir.store %11, %9 : !s64i, !cir.ptr<!s64i> loc(#loc115)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc69)
        %13 = cir.call @imaxabs(%12) : (!s64i) -> !s64i extra(#fn_attr) loc(#loc70)
        %14 = cir.cast(int_to_float, %13 : !s64i), !cir.long_double<!cir.f80> loc(#loc70)
        %15 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc71)
        %16 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc72)
        %17 = cir.cast(int_to_float, %16 : !s64i), !cir.long_double<!cir.f80> loc(#loc72)
        %18 = cir.call @sqrtl(%17) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc71)
        %19 = cir.cmp(le, %14, %18) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc117)
        cir.if %19 {
          %20 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc119)
          %21 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc79)
          %22 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc78)
          %23 = cir.binop(mul, %21, %22) nsw : !s64i loc(#loc79)
          cir.store %23, %20 : !s64i, !cir.ptr<!s64i> loc(#loc119)
          %24 = cir.load %20 : !cir.ptr<!s64i>, !s64i loc(#loc80)
          cir.call @printLongLongLine(%24) : (!s64i) -> () loc(#loc81)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc52)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc52)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc82)
        } loc(#loc118)
      } loc(#loc116)
    } loc(#loc114)
    cir.return loc(#loc54)
  } loc(#loc109)
  cir.func  @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_33L7goodG2BEv() : () -> () loc(#loc85)
    cir.call @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_33L7goodB2GEv() : () -> () loc(#loc86)
    cir.return loc(#loc84)
  } loc(#loc120)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":28:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":43:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":30:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":30:13)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":31:5)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":31:24)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":32:12)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":32:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":34:21)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":34:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":35:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":42:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":36:9)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":36:24)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":37:9)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":41:9)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":39:13)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":39:37)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":39:30)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":40:31)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":40:13)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":50:1)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":65:1)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":52:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":52:13)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":53:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":53:24)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":54:12)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":54:5)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":56:12)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":56:5)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":57:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":64:5)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":58:9)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":58:24)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":59:9)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":63:9)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":61:13)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":61:37)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":61:30)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":62:31)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":62:13)
#loc47 = loc("/usr/include/inttypes.h":351:1)
#loc48 = loc("/usr/include/inttypes.h":351:74)
#loc49 = loc("/usr/include/bits/mathcalls.h":143:1)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":85:23)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":68:1)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":88:1)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":70:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":70:13)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":71:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":71:24)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":72:12)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":72:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":74:21)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":74:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":75:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":87:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":76:9)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":76:24)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":78:9)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":86:9)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":78:31)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":78:13)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":78:40)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":78:46)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":78:55)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":79:9)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":82:9)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":84:9)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":80:13)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":80:37)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":80:30)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":81:31)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":81:13)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":85:13)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":90:1)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":94:1)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":92:5)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_square_33.cpp":93:5)
#loc87 = loc(fused[#loc1, #loc2])
#loc88 = loc(fused[#loc3, #loc4])
#loc89 = loc(fused[#loc5, #loc6])
#loc90 = loc(fused[#loc7, #loc8])
#loc91 = loc(fused[#loc9, #loc10])
#loc92 = loc(fused[#loc12, #loc11])
#loc93 = loc(fused[#loc14, #loc13])
#loc94 = loc(fused[#loc15, #loc16])
#loc95 = loc(fused[#loc17, #loc18])
#loc96 = loc(fused[#loc19, #loc20])
#loc97 = loc(fused[#loc21, #loc22])
#loc98 = loc(fused[#loc26, #loc27])
#loc99 = loc(fused[#loc28, #loc29])
#loc100 = loc(fused[#loc30, #loc31])
#loc101 = loc(fused[#loc33, #loc32])
#loc102 = loc(fused[#loc35, #loc34])
#loc103 = loc(fused[#loc36, #loc37])
#loc104 = loc(fused[#loc38, #loc39])
#loc105 = loc(fused[#loc40, #loc41])
#loc106 = loc(fused[#loc42, #loc43])
#loc107 = loc(fused[#loc47, #loc48])
#loc108 = loc(fused[#loc50, #loc51])
#loc109 = loc(fused[#loc53, #loc54])
#loc110 = loc(fused[#loc55, #loc56])
#loc111 = loc(fused[#loc57, #loc58])
#loc112 = loc(fused[#loc60, #loc59])
#loc113 = loc(fused[#loc62, #loc61])
#loc114 = loc(fused[#loc63, #loc64])
#loc115 = loc(fused[#loc65, #loc66])
#loc116 = loc(fused[#loc67, #loc68])
#loc117 = loc(fused[#loc70, #loc73])
#loc118 = loc(fused[#loc74, #loc75, #loc76, #loc68])
#loc119 = loc(fused[#loc77, #loc78])
#loc120 = loc(fused[#loc83, #loc84])
