!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":22:57)
#loc6 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":22:65)
#loc20 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":37:61)
#loc21 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":37:69)
#loc38 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":48:61)
#loc39 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":48:69)
#loc59 = loc(fused[#loc5, #loc6])
#loc64 = loc(fused[#loc20, #loc21])
#loc70 = loc(fused[#loc38, #loc39])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_add_63b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc57)
  cir.func @CWE190_Integer_Overflow__short_max_add_63b_badSink(%arg0: !cir.ptr<!s16i> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc59)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc60)
    cir.store %arg0, %0 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc9)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc8)
    %3 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc10)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc60)
    cir.scope {
      %4 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc62)
      %5 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc15)
      %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc15)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc14)
      %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc15)
      %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc15)
      cir.store %9, %4 : !s16i, !cir.ptr<!s16i> loc(#loc62)
      %10 = cir.load %4 : !cir.ptr<!s16i>, !s16i loc(#loc16)
      %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc16)
      cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc17)
    } loc(#loc61)
    cir.return loc(#loc4)
  } loc(#loc58)
  cir.func @CWE190_Integer_Overflow__short_max_add_63b_goodG2BSink(%arg0: !cir.ptr<!s16i> loc(fused[#loc20, #loc21])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc64)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc65)
    cir.store %arg0, %0 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc24)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc23)
    %3 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc25)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc65)
    cir.scope {
      %4 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc67)
      %5 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc30)
      %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc30)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc29)
      %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc30)
      %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc30)
      cir.store %9, %4 : !s16i, !cir.ptr<!s16i> loc(#loc67)
      %10 = cir.load %4 : !cir.ptr<!s16i>, !s16i loc(#loc31)
      %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc31)
      cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc32)
    } loc(#loc66)
    cir.return loc(#loc19)
  } loc(#loc63)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc35)
  cir.func @CWE190_Integer_Overflow__short_max_add_63b_goodB2GSink(%arg0: !cir.ptr<!s16i> loc(fused[#loc38, #loc39])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc70)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc71)
    cir.store %arg0, %0 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc42)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc41)
    %3 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc43)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc71)
    cir.scope {
      %4 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc46)
      %5 = cir.cast(integral, %4 : !s16i), !s32i loc(#loc46)
      %6 = cir.const #cir.int<32767> : !s32i loc(#loc47)
      %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc73)
      cir.if %7 {
        %8 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc75)
        %9 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc53)
        %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc53)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc52)
        %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc53)
        %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc53)
        cir.store %13, %8 : !s16i, !cir.ptr<!s16i> loc(#loc75)
        %14 = cir.load %8 : !cir.ptr<!s16i>, !s16i loc(#loc54)
        %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc54)
        cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc55)
      } else {
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc35)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc35)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc56)
      } loc(#loc74)
    } loc(#loc72)
    cir.return loc(#loc37)
  } loc(#loc69)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_add_63b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":30:1)
#loc7 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":24:5)
#loc8 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":24:19)
#loc9 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":23:1)
#loc10 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":24:18)
#loc11 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":25:5)
#loc12 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":29:5)
#loc13 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":27:9)
#loc14 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":27:31)
#loc15 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":27:24)
#loc16 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":28:22)
#loc17 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":28:9)
#loc18 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":37:1)
#loc19 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":45:1)
#loc22 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":39:5)
#loc23 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":39:19)
#loc24 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":38:1)
#loc25 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":39:18)
#loc26 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":40:5)
#loc27 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":44:5)
#loc28 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":42:9)
#loc29 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":42:31)
#loc30 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":42:24)
#loc31 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":43:22)
#loc32 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":43:9)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc35 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":59:19)
#loc36 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":48:1)
#loc37 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":61:1)
#loc40 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":50:5)
#loc41 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":50:19)
#loc42 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":49:1)
#loc43 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":50:18)
#loc44 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":52:5)
#loc45 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":60:5)
#loc46 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":52:9)
#loc47 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":52:16)
#loc48 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":53:5)
#loc49 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":56:5)
#loc50 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":58:5)
#loc51 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":54:9)
#loc52 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":54:31)
#loc53 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":54:24)
#loc54 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":55:22)
#loc55 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":55:9)
#loc56 = loc("CWE190_Integer_Overflow__short_max_add_63b.c":59:9)
#loc57 = loc(fused[#loc1, #loc2])
#loc58 = loc(fused[#loc3, #loc4])
#loc60 = loc(fused[#loc7, #loc8])
#loc61 = loc(fused[#loc11, #loc12])
#loc62 = loc(fused[#loc13, #loc14])
#loc63 = loc(fused[#loc18, #loc19])
#loc65 = loc(fused[#loc22, #loc23])
#loc66 = loc(fused[#loc26, #loc27])
#loc67 = loc(fused[#loc28, #loc29])
#loc68 = loc(fused[#loc33, #loc34])
#loc69 = loc(fused[#loc36, #loc37])
#loc71 = loc(fused[#loc40, #loc41])
#loc72 = loc(fused[#loc44, #loc45])
#loc73 = loc(fused[#loc46, #loc47])
#loc74 = loc(fused[#loc48, #loc49, #loc50, #loc45])
#loc75 = loc(fused[#loc51, #loc52])
