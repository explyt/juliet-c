!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc184 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":378:10)
#loc185 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":378:14)
#loc186 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":378:20)
#loc187 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":378:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc557 = loc(fused[#loc184, #loc185])
#loc558 = loc(fused[#loc186, #loc187])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_connect_socket_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc488)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc489)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc490)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc7)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc491)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc492)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc493)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc494)
  cir.func private @close(!s32i) -> !s32i loc(#loc495)
  cir.func private @printIntLine(!s32i) loc(#loc496)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc497)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc22)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc23)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_connect_socket_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc499)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc29)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc500)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc502)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc502)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc33)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc33)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc505)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc506)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc507)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc508)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc45)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc45)
          cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc507)
          cir.scope {
            cir.do {
              %13 = cir.const #cir.int<2> : !s32i loc(#loc50)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc51)
              %15 = cir.const #cir.int<6> : !s32i loc(#loc52)
              %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc53)
              cir.store %16, %9 : !s32i, !cir.ptr<!s32i> loc(#loc510)
              cir.scope {
                %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc58)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc59)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc59)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc512)
                cir.if %58 {
                  cir.break loc(#loc61)
                } loc(#loc513)
              } loc(#loc511)
              %17 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc514)
              %18 = cir.const #cir.int<0> : !s32i loc(#loc64)
              %19 = cir.const #cir.int<16> : !u64i loc(#loc515)
              cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc516)
              %20 = cir.const #cir.int<2> : !s32i loc(#loc69)
              %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc69)
              %22 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
              cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc517)
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc7)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc7)
              %25 = cir.call @inet_addr(%24) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc72)
              %26 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
              %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc74)
              cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc518)
              %28 = cir.const #cir.int<27015> : !s32i loc(#loc77)
              %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc77)
              %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc78)
              %31 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
              cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc519)
              cir.scope {
                %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc84)
                %56 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc521)
                %57 = cir.const #cir.int<16> : !u64i loc(#loc522)
                %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc522)
                %59 = cir.call @connect(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc89)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc90)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc90)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc523)
                cir.if %62 {
                  cir.break loc(#loc92)
                } loc(#loc524)
              } loc(#loc520)
              %32 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc93)
              %33 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc94)
              %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc94)
              %35 = cir.const #cir.int<3> : !s32i loc(#loc95)
              %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc95)
              %37 = cir.const #cir.int<4> : !u64i loc(#loc95)
              %38 = cir.binop(mul, %36, %37) : !u64i loc(#loc95)
              %39 = cir.const #cir.int<2> : !s32i loc(#loc95)
              %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc95)
              %41 = cir.binop(add, %38, %40) : !u64i loc(#loc95)
              %42 = cir.const #cir.int<1> : !s32i loc(#loc96)
              %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc96)
              %44 = cir.binop(sub, %41, %43) : !u64i loc(#loc525)
              %45 = cir.const #cir.int<0> : !s32i loc(#loc97)
              %46 = cir.call @recv(%32, %34, %44, %45) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc98)
              %47 = cir.cast(integral, %46 : !s64i), !s32i loc(#loc98)
              cir.store %47, %7 : !s32i, !cir.ptr<!s32i> loc(#loc526)
              cir.scope {
                %55 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc103)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc104)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc104)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc528)
                %59 = cir.ternary(%58, true {
                  %60 = cir.const #true loc(#loc105)
                  cir.yield %60 : !cir.bool loc(#loc105)
                }, false {
                  %60 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc106)
                  %61 = cir.const #cir.int<0> : !s32i loc(#loc107)
                  %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc529)
                  %63 = cir.ternary(%62, true {
                    %64 = cir.const #true loc(#loc105)
                    cir.yield %64 : !cir.bool loc(#loc105)
                  }, false {
                    %64 = cir.const #false loc(#loc105)
                    cir.yield %64 : !cir.bool loc(#loc105)
                  }) : (!cir.bool) -> !cir.bool loc(#loc105)
                  cir.yield %63 : !cir.bool loc(#loc105)
                }) : (!cir.bool) -> !cir.bool loc(#loc105)
                cir.if %59 {
                  cir.break loc(#loc109)
                } loc(#loc530)
              } loc(#loc527)
              %48 = cir.const #cir.int<0> : !s32i loc(#loc110)
              %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc110)
              %50 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc111)
              %51 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc112)
              %52 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc112)
              cir.store %49, %52 : !s8i, !cir.ptr<!s8i> loc(#loc531)
              %53 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc113)
              %54 = cir.call @atoi(%53) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc114)
              cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc532)
              cir.yield loc(#loc49)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc117)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc117)
              cir.condition(%14) loc(#loc117)
            } loc(#loc509)
          } loc(#loc509)
          cir.scope {
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc120)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc121)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc121)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc534)
            cir.if %16 {
              %17 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc123)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc124)
            } loc(#loc535)
          } loc(#loc533)
        } loc(#loc504)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc125)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc536)
      } loc(#loc503)
    } loc(#loc501)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc538)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc538)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc129)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc129)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc541)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc541)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc541)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc140)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc141)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !cir.bool loc(#loc543)
            cir.if %11 {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc145)
              %13 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc146)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc146)
              %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc146)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc147)
            } else {
              %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc22)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc22)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc148)
            } loc(#loc544)
          } loc(#loc542)
        } loc(#loc540)
      } else {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc546)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc546)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc546)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc155)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc156)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !cir.bool loc(#loc548)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc158)
              %14 = cir.const #cir.int<10> : !s32i loc(#loc159)
              %15 = cir.cmp(lt, %13, %14) : !s32i, !cir.bool loc(#loc549)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc157)
                cir.yield %17 : !cir.bool loc(#loc157)
              }, false {
                %17 = cir.const #false loc(#loc157)
                cir.yield %17 : !cir.bool loc(#loc157)
              }) : (!cir.bool) -> !cir.bool loc(#loc157)
              cir.yield %16 : !cir.bool loc(#loc157)
            }, false {
              %13 = cir.const #false loc(#loc157)
              cir.yield %13 : !cir.bool loc(#loc157)
            }) : (!cir.bool) -> !cir.bool loc(#loc157)
            cir.if %12 {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc164)
              %14 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc165)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc165)
              %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc165)
              cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc166)
            } else {
              %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc23)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc23)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc167)
            } loc(#loc550)
          } loc(#loc547)
        } loc(#loc545)
      } loc(#loc539)
    } loc(#loc537)
    cir.return loc(#loc25)
  } loc(#loc498)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_connect_socket_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc552)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc170)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc553)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc172)
    cir.return loc(#loc169)
  } loc(#loc551)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc554)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc555)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc178)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc179)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc180)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc181)
  cir.func @main(%arg0: !s32i loc(fused[#loc184, #loc185]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc186, #loc187])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc557)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc558)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc183)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc188)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc189)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc190)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc190)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc191)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc178)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc178)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc192)
    %8 = cir.get_global @CWE126_Buffer_Overread__CWE129_connect_socket_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc559)
    cir.call @CWE126_Buffer_Overread__CWE129_connect_socket_12_good() : () -> () loc(#loc193)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc179)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc179)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc195)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc180)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc180)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc196)
    %13 = cir.get_global @CWE126_Buffer_Overread__CWE129_connect_socket_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc560)
    cir.call @CWE126_Buffer_Overread__CWE129_connect_socket_12_bad() : () -> () loc(#loc197)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc181)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc181)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc199)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc200)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc561)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc561)
    cir.return %17 : !s32i loc(#loc561)
  } loc(#loc556)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc563)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc206)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc207)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc564)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc566)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc566)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc211)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc211)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc569)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc570)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc571)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc572)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc223)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc223)
          cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc571)
          cir.scope {
            cir.do {
              %13 = cir.const #cir.int<2> : !s32i loc(#loc228)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc229)
              %15 = cir.const #cir.int<6> : !s32i loc(#loc230)
              %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc231)
              cir.store %16, %9 : !s32i, !cir.ptr<!s32i> loc(#loc574)
              cir.scope {
                %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc236)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc237)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc237)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc576)
                cir.if %58 {
                  cir.break loc(#loc239)
                } loc(#loc577)
              } loc(#loc575)
              %17 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc578)
              %18 = cir.const #cir.int<0> : !s32i loc(#loc242)
              %19 = cir.const #cir.int<16> : !u64i loc(#loc579)
              cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc580)
              %20 = cir.const #cir.int<2> : !s32i loc(#loc247)
              %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc247)
              %22 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
              cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc581)
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc249)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc249)
              %25 = cir.call @inet_addr(%24) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc250)
              %26 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
              %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc74)
              cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc582)
              %28 = cir.const #cir.int<27015> : !s32i loc(#loc253)
              %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc253)
              %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc254)
              %31 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
              cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc583)
              cir.scope {
                %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc259)
                %56 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc585)
                %57 = cir.const #cir.int<16> : !u64i loc(#loc586)
                %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc586)
                %59 = cir.call @connect(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc264)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc265)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc265)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc587)
                cir.if %62 {
                  cir.break loc(#loc267)
                } loc(#loc588)
              } loc(#loc584)
              %32 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc268)
              %33 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc269)
              %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc269)
              %35 = cir.const #cir.int<3> : !s32i loc(#loc270)
              %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc270)
              %37 = cir.const #cir.int<4> : !u64i loc(#loc270)
              %38 = cir.binop(mul, %36, %37) : !u64i loc(#loc270)
              %39 = cir.const #cir.int<2> : !s32i loc(#loc270)
              %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc270)
              %41 = cir.binop(add, %38, %40) : !u64i loc(#loc270)
              %42 = cir.const #cir.int<1> : !s32i loc(#loc271)
              %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc271)
              %44 = cir.binop(sub, %41, %43) : !u64i loc(#loc589)
              %45 = cir.const #cir.int<0> : !s32i loc(#loc272)
              %46 = cir.call @recv(%32, %34, %44, %45) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc273)
              %47 = cir.cast(integral, %46 : !s64i), !s32i loc(#loc273)
              cir.store %47, %7 : !s32i, !cir.ptr<!s32i> loc(#loc590)
              cir.scope {
                %55 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc278)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc279)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc279)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc592)
                %59 = cir.ternary(%58, true {
                  %60 = cir.const #true loc(#loc280)
                  cir.yield %60 : !cir.bool loc(#loc280)
                }, false {
                  %60 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc281)
                  %61 = cir.const #cir.int<0> : !s32i loc(#loc282)
                  %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc593)
                  %63 = cir.ternary(%62, true {
                    %64 = cir.const #true loc(#loc280)
                    cir.yield %64 : !cir.bool loc(#loc280)
                  }, false {
                    %64 = cir.const #false loc(#loc280)
                    cir.yield %64 : !cir.bool loc(#loc280)
                  }) : (!cir.bool) -> !cir.bool loc(#loc280)
                  cir.yield %63 : !cir.bool loc(#loc280)
                }) : (!cir.bool) -> !cir.bool loc(#loc280)
                cir.if %59 {
                  cir.break loc(#loc284)
                } loc(#loc594)
              } loc(#loc591)
              %48 = cir.const #cir.int<0> : !s32i loc(#loc285)
              %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc285)
              %50 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc286)
              %51 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc287)
              %52 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc287)
              cir.store %49, %52 : !s8i, !cir.ptr<!s8i> loc(#loc595)
              %53 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc288)
              %54 = cir.call @atoi(%53) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc289)
              cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc596)
              cir.yield loc(#loc227)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc292)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc292)
              cir.condition(%14) loc(#loc292)
            } loc(#loc573)
          } loc(#loc573)
          cir.scope {
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc295)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc296)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc296)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc598)
            cir.if %16 {
              %17 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc298)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc299)
            } loc(#loc599)
          } loc(#loc597)
        } loc(#loc568)
      } else {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc601)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc602)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc603)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc604)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc307)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc307)
          cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc603)
          cir.scope {
            cir.do {
              %13 = cir.const #cir.int<2> : !s32i loc(#loc312)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc313)
              %15 = cir.const #cir.int<6> : !s32i loc(#loc314)
              %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc315)
              cir.store %16, %9 : !s32i, !cir.ptr<!s32i> loc(#loc606)
              cir.scope {
                %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc320)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc321)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc321)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc608)
                cir.if %58 {
                  cir.break loc(#loc323)
                } loc(#loc609)
              } loc(#loc607)
              %17 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc610)
              %18 = cir.const #cir.int<0> : !s32i loc(#loc326)
              %19 = cir.const #cir.int<16> : !u64i loc(#loc611)
              cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc612)
              %20 = cir.const #cir.int<2> : !s32i loc(#loc331)
              %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc331)
              %22 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
              cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc613)
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc333)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc333)
              %25 = cir.call @inet_addr(%24) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc334)
              %26 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
              %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc74)
              cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc614)
              %28 = cir.const #cir.int<27015> : !s32i loc(#loc337)
              %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc337)
              %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc338)
              %31 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
              cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc615)
              cir.scope {
                %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc343)
                %56 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc617)
                %57 = cir.const #cir.int<16> : !u64i loc(#loc618)
                %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc618)
                %59 = cir.call @connect(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc348)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc349)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc349)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc619)
                cir.if %62 {
                  cir.break loc(#loc351)
                } loc(#loc620)
              } loc(#loc616)
              %32 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc352)
              %33 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc353)
              %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc353)
              %35 = cir.const #cir.int<3> : !s32i loc(#loc354)
              %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc354)
              %37 = cir.const #cir.int<4> : !u64i loc(#loc354)
              %38 = cir.binop(mul, %36, %37) : !u64i loc(#loc354)
              %39 = cir.const #cir.int<2> : !s32i loc(#loc354)
              %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc354)
              %41 = cir.binop(add, %38, %40) : !u64i loc(#loc354)
              %42 = cir.const #cir.int<1> : !s32i loc(#loc355)
              %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc355)
              %44 = cir.binop(sub, %41, %43) : !u64i loc(#loc621)
              %45 = cir.const #cir.int<0> : !s32i loc(#loc356)
              %46 = cir.call @recv(%32, %34, %44, %45) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc357)
              %47 = cir.cast(integral, %46 : !s64i), !s32i loc(#loc357)
              cir.store %47, %7 : !s32i, !cir.ptr<!s32i> loc(#loc622)
              cir.scope {
                %55 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc362)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc363)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc363)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc624)
                %59 = cir.ternary(%58, true {
                  %60 = cir.const #true loc(#loc364)
                  cir.yield %60 : !cir.bool loc(#loc364)
                }, false {
                  %60 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc365)
                  %61 = cir.const #cir.int<0> : !s32i loc(#loc366)
                  %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc625)
                  %63 = cir.ternary(%62, true {
                    %64 = cir.const #true loc(#loc364)
                    cir.yield %64 : !cir.bool loc(#loc364)
                  }, false {
                    %64 = cir.const #false loc(#loc364)
                    cir.yield %64 : !cir.bool loc(#loc364)
                  }) : (!cir.bool) -> !cir.bool loc(#loc364)
                  cir.yield %63 : !cir.bool loc(#loc364)
                }) : (!cir.bool) -> !cir.bool loc(#loc364)
                cir.if %59 {
                  cir.break loc(#loc368)
                } loc(#loc626)
              } loc(#loc623)
              %48 = cir.const #cir.int<0> : !s32i loc(#loc369)
              %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc369)
              %50 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc370)
              %51 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc371)
              %52 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc371)
              cir.store %49, %52 : !s8i, !cir.ptr<!s8i> loc(#loc627)
              %53 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc372)
              %54 = cir.call @atoi(%53) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc373)
              cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc628)
              cir.yield loc(#loc311)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc376)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc376)
              cir.condition(%14) loc(#loc376)
            } loc(#loc605)
          } loc(#loc605)
          cir.scope {
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc379)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc380)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc380)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc630)
            cir.if %16 {
              %17 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc382)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc383)
            } loc(#loc631)
          } loc(#loc629)
        } loc(#loc600)
      } loc(#loc567)
    } loc(#loc565)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc633)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc633)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc386)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc386)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc636)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc636)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc636)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc397)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc398)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !cir.bool loc(#loc638)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc400)
              %14 = cir.const #cir.int<10> : !s32i loc(#loc401)
              %15 = cir.cmp(lt, %13, %14) : !s32i, !cir.bool loc(#loc639)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc399)
                cir.yield %17 : !cir.bool loc(#loc399)
              }, false {
                %17 = cir.const #false loc(#loc399)
                cir.yield %17 : !cir.bool loc(#loc399)
              }) : (!cir.bool) -> !cir.bool loc(#loc399)
              cir.yield %16 : !cir.bool loc(#loc399)
            }, false {
              %13 = cir.const #false loc(#loc399)
              cir.yield %13 : !cir.bool loc(#loc399)
            }) : (!cir.bool) -> !cir.bool loc(#loc399)
            cir.if %12 {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc406)
              %14 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc407)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc407)
              %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc407)
              cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc408)
            } else {
              %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc409)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc409)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc410)
            } loc(#loc640)
          } loc(#loc637)
        } loc(#loc635)
      } else {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc642)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc642)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc642)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc417)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc418)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !cir.bool loc(#loc644)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc420)
              %14 = cir.const #cir.int<10> : !s32i loc(#loc421)
              %15 = cir.cmp(lt, %13, %14) : !s32i, !cir.bool loc(#loc645)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc419)
                cir.yield %17 : !cir.bool loc(#loc419)
              }, false {
                %17 = cir.const #false loc(#loc419)
                cir.yield %17 : !cir.bool loc(#loc419)
              }) : (!cir.bool) -> !cir.bool loc(#loc419)
              cir.yield %16 : !cir.bool loc(#loc419)
            }, false {
              %13 = cir.const #false loc(#loc419)
              cir.yield %13 : !cir.bool loc(#loc419)
            }) : (!cir.bool) -> !cir.bool loc(#loc419)
            cir.if %12 {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc426)
              %14 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc427)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc427)
              %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc427)
              cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc428)
            } else {
              %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc429)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc429)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc430)
            } loc(#loc646)
          } loc(#loc643)
        } loc(#loc641)
      } loc(#loc634)
    } loc(#loc632)
    cir.return loc(#loc203)
  } loc(#loc562)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc648)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc435)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc436)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc649)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc651)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc651)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc440)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc440)
      cir.if %6 {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc445)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc653)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc447)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc654)
      } loc(#loc652)
    } loc(#loc650)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc656)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc656)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc451)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc451)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc659)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc659)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc659)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc462)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc463)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !cir.bool loc(#loc661)
            cir.if %11 {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc467)
              %13 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc468)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc468)
              %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc468)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc469)
            } else {
              %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc470)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc470)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc471)
            } loc(#loc662)
          } loc(#loc660)
        } loc(#loc658)
      } else {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc664)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc664)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc664)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc478)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc479)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !cir.bool loc(#loc666)
            cir.if %11 {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc483)
              %13 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc484)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc484)
              %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc484)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc485)
            } else {
              %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc486)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc486)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc487)
            } loc(#loc667)
          } loc(#loc665)
        } loc(#loc663)
      } loc(#loc657)
    } loc(#loc655)
    cir.return loc(#loc432)
  } loc(#loc647)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_connect_socket_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/sys/socket.h":102:1)
#loc4 = loc("/usr/include/sys/socket.h":102:62)
#loc5 = loc("/usr/include/arpa/inet.h":34:1)
#loc6 = loc("/usr/include/arpa/inet.h":34:47)
#loc7 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":77:53)
#loc8 = loc("/usr/include/netinet/in.h":404:1)
#loc9 = loc("/usr/include/netinet/in.h":405:40)
#loc10 = loc("/usr/include/sys/socket.h":126:1)
#loc11 = loc("/usr/include/sys/socket.h":126:75)
#loc12 = loc("/usr/include/sys/socket.h":145:1)
#loc13 = loc("/usr/include/sys/socket.h":145:68)
#loc14 = loc("/usr/include/stdlib.h":105:1)
#loc15 = loc("/usr/include/stdlib.h":106:33)
#loc16 = loc("/usr/include/unistd.h":358:1)
#loc17 = loc("/usr/include/unistd.h":358:27)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc22 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":126:27)
#loc23 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":141:27)
#loc24 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":44:1)
#loc25 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":145:1)
#loc26 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":46:5)
#loc27 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":46:9)
#loc28 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":48:13)
#loc29 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":48:12)
#loc30 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":48:5)
#loc31 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":49:5)
#loc32 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":113:5)
#loc33 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":49:8)
#loc34 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":49:33)
#loc35 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":50:5)
#loc36 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":107:5)
#loc37 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":109:5)
#loc38 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":51:9)
#loc39 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":106:9)
#loc40 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":56:13)
#loc41 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":56:17)
#loc42 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":57:13)
#loc43 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":57:32)
#loc44 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":58:13)
#loc45 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":58:36)
#loc46 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":59:13)
#loc47 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":59:45)
#loc48 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":60:13)
#loc49 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":95:21)
#loc50 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":70:40)
#loc51 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":70:49)
#loc52 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":70:62)
#loc53 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":70:33)
#loc54 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":70:17)
#loc55 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":70:73)
#loc56 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":71:17)
#loc57 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":74:17)
#loc58 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":71:21)
#loc59 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":71:38)
#loc60 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":72:17)
#loc61 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":73:21)
#loc62 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":75:24)
#loc63 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":75:25)
#loc64 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":75:34)
#loc65 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":75:37)
#loc66 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":75:51)
#loc67 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":75:17)
#loc68 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":75:52)
#loc69 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":76:38)
#loc70 = loc("/usr/include/netinet/in.h":249:5)
#loc71 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":76:17)
#loc72 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":77:43)
#loc73 = loc("/usr/include/netinet/in.h":251:20)
#loc74 = loc("/usr/include/netinet/in.h":33:15)
#loc75 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":77:17)
#loc76 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":77:63)
#loc77 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":78:42)
#loc78 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":78:36)
#loc79 = loc("/usr/include/netinet/in.h":250:15)
#loc80 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":78:17)
#loc81 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":78:50)
#loc82 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":79:17)
#loc83 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":82:17)
#loc84 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":79:29)
#loc85 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":79:62)
#loc86 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":79:63)
#loc87 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":79:72)
#loc88 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":79:86)
#loc89 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":79:21)
#loc90 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":79:92)
#loc91 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":80:17)
#loc92 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":81:21)
#loc93 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":85:35)
#loc94 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":85:50)
#loc95 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":85:63)
#loc96 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":85:81)
#loc97 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":85:84)
#loc98 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":85:30)
#loc99 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":85:17)
#loc100 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":85:85)
#loc101 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":86:17)
#loc102 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":89:17)
#loc103 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":86:21)
#loc104 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":86:35)
#loc105 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":86:48)
#loc106 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":86:51)
#loc107 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":86:65)
#loc108 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":87:17)
#loc109 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":88:21)
#loc110 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":91:43)
#loc111 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":91:29)
#loc112 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":91:17)
#loc113 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":93:29)
#loc114 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":93:24)
#loc115 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":93:17)
#loc116 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":93:40)
#loc117 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":95:20)
#loc118 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":96:13)
#loc119 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":99:13)
#loc120 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":96:17)
#loc121 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":96:34)
#loc122 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":97:13)
#loc123 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":98:30)
#loc124 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":98:17)
#loc125 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":112:16)
#loc126 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":112:9)
#loc127 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":114:5)
#loc128 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":144:5)
#loc129 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":114:8)
#loc130 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":114:33)
#loc131 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":115:5)
#loc132 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":129:5)
#loc133 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":131:5)
#loc134 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":116:9)
#loc135 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":128:9)
#loc136 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":117:13)
#loc137 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":117:34)
#loc138 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":120:13)
#loc139 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":127:13)
#loc140 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":120:17)
#loc141 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":120:25)
#loc142 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":121:13)
#loc143 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":123:13)
#loc144 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":125:13)
#loc145 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":122:37)
#loc146 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":122:30)
#loc147 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":122:17)
#loc148 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":126:17)
#loc149 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":132:9)
#loc150 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":143:9)
#loc151 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":133:13)
#loc152 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":133:34)
#loc153 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":135:13)
#loc154 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":142:13)
#loc155 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":135:17)
#loc156 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":135:25)
#loc157 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":135:27)
#loc158 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":135:30)
#loc159 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":135:38)
#loc160 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":135:40)
#loc161 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":136:13)
#loc162 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":138:13)
#loc163 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":140:13)
#loc164 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":137:37)
#loc165 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":137:30)
#loc166 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":137:17)
#loc167 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":141:17)
#loc168 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":363:1)
#loc169 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":367:1)
#loc170 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":365:5)
#loc171 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":365:13)
#loc172 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":366:5)
#loc173 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":366:13)
#loc174 = loc("/usr/include/stdlib.h":575:1)
#loc175 = loc("/usr/include/stdlib.h":575:41)
#loc176 = loc("/usr/include/time.h":76:1)
#loc177 = loc("/usr/include/time.h":76:38)
#loc178 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":383:15)
#loc179 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":385:15)
#loc180 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":388:15)
#loc181 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":390:15)
#loc182 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":378:1)
#loc183 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":393:1)
#loc188 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":379:1)
#loc189 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":381:27)
#loc190 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":381:22)
#loc191 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":381:5)
#loc192 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":383:5)
#loc193 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":384:5)
#loc194 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":384:59)
#loc195 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":385:5)
#loc196 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":388:5)
#loc197 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":389:5)
#loc198 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":389:58)
#loc199 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":390:5)
#loc200 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":392:12)
#loc201 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":392:5)
#loc202 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":154:1)
#loc203 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":307:1)
#loc204 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":156:5)
#loc205 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":156:9)
#loc206 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":158:13)
#loc207 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":158:12)
#loc208 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":158:5)
#loc209 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":159:5)
#loc210 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":276:5)
#loc211 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":159:8)
#loc212 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":159:33)
#loc213 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":160:5)
#loc214 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":217:5)
#loc215 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":219:5)
#loc216 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":161:9)
#loc217 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":216:9)
#loc218 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":166:13)
#loc219 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":166:17)
#loc220 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":167:13)
#loc221 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":167:32)
#loc222 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":168:13)
#loc223 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":168:36)
#loc224 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":169:13)
#loc225 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":169:45)
#loc226 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":170:13)
#loc227 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":205:21)
#loc228 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":180:40)
#loc229 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":180:49)
#loc230 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":180:62)
#loc231 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":180:33)
#loc232 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":180:17)
#loc233 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":180:73)
#loc234 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":181:17)
#loc235 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":184:17)
#loc236 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":181:21)
#loc237 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":181:38)
#loc238 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":182:17)
#loc239 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":183:21)
#loc240 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":185:24)
#loc241 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":185:25)
#loc242 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":185:34)
#loc243 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":185:37)
#loc244 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":185:51)
#loc245 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":185:17)
#loc246 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":185:52)
#loc247 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":186:38)
#loc248 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":186:17)
#loc249 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":187:53)
#loc250 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":187:43)
#loc251 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":187:17)
#loc252 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":187:63)
#loc253 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":188:42)
#loc254 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":188:36)
#loc255 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":188:17)
#loc256 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":188:50)
#loc257 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":189:17)
#loc258 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":192:17)
#loc259 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":189:29)
#loc260 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":189:62)
#loc261 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":189:63)
#loc262 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":189:72)
#loc263 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":189:86)
#loc264 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":189:21)
#loc265 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":189:92)
#loc266 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":190:17)
#loc267 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":191:21)
#loc268 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":195:35)
#loc269 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":195:50)
#loc270 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":195:63)
#loc271 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":195:81)
#loc272 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":195:84)
#loc273 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":195:30)
#loc274 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":195:17)
#loc275 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":195:85)
#loc276 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":196:17)
#loc277 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":199:17)
#loc278 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":196:21)
#loc279 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":196:35)
#loc280 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":196:48)
#loc281 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":196:51)
#loc282 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":196:65)
#loc283 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":197:17)
#loc284 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":198:21)
#loc285 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":201:43)
#loc286 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":201:29)
#loc287 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":201:17)
#loc288 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":203:29)
#loc289 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":203:24)
#loc290 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":203:17)
#loc291 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":203:40)
#loc292 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":205:20)
#loc293 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":206:13)
#loc294 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":209:13)
#loc295 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":206:17)
#loc296 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":206:34)
#loc297 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":207:13)
#loc298 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":208:30)
#loc299 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":208:17)
#loc300 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":220:9)
#loc301 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":275:9)
#loc302 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":225:13)
#loc303 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":225:17)
#loc304 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":226:13)
#loc305 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":226:32)
#loc306 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":227:13)
#loc307 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":227:36)
#loc308 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":228:13)
#loc309 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":228:45)
#loc310 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":229:13)
#loc311 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":264:21)
#loc312 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":239:40)
#loc313 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":239:49)
#loc314 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":239:62)
#loc315 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":239:33)
#loc316 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":239:17)
#loc317 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":239:73)
#loc318 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":240:17)
#loc319 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":243:17)
#loc320 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":240:21)
#loc321 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":240:38)
#loc322 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":241:17)
#loc323 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":242:21)
#loc324 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":244:24)
#loc325 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":244:25)
#loc326 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":244:34)
#loc327 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":244:37)
#loc328 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":244:51)
#loc329 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":244:17)
#loc330 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":244:52)
#loc331 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":245:38)
#loc332 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":245:17)
#loc333 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":246:53)
#loc334 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":246:43)
#loc335 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":246:17)
#loc336 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":246:63)
#loc337 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":247:42)
#loc338 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":247:36)
#loc339 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":247:17)
#loc340 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":247:50)
#loc341 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":248:17)
#loc342 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":251:17)
#loc343 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":248:29)
#loc344 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":248:62)
#loc345 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":248:63)
#loc346 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":248:72)
#loc347 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":248:86)
#loc348 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":248:21)
#loc349 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":248:92)
#loc350 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":249:17)
#loc351 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":250:21)
#loc352 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":254:35)
#loc353 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":254:50)
#loc354 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":254:63)
#loc355 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":254:81)
#loc356 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":254:84)
#loc357 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":254:30)
#loc358 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":254:17)
#loc359 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":254:85)
#loc360 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":255:17)
#loc361 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":258:17)
#loc362 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":255:21)
#loc363 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":255:35)
#loc364 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":255:48)
#loc365 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":255:51)
#loc366 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":255:65)
#loc367 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":256:17)
#loc368 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":257:21)
#loc369 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":260:43)
#loc370 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":260:29)
#loc371 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":260:17)
#loc372 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":262:29)
#loc373 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":262:24)
#loc374 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":262:17)
#loc375 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":262:40)
#loc376 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":264:20)
#loc377 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":265:13)
#loc378 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":268:13)
#loc379 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":265:17)
#loc380 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":265:34)
#loc381 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":266:13)
#loc382 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":267:30)
#loc383 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":267:17)
#loc384 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":277:5)
#loc385 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":306:5)
#loc386 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":277:8)
#loc387 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":277:33)
#loc388 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":278:5)
#loc389 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":291:5)
#loc390 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":293:5)
#loc391 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":279:9)
#loc392 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":290:9)
#loc393 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":280:13)
#loc394 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":280:34)
#loc395 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":282:13)
#loc396 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":289:13)
#loc397 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":282:17)
#loc398 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":282:25)
#loc399 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":282:27)
#loc400 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":282:30)
#loc401 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":282:38)
#loc402 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":282:40)
#loc403 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":283:13)
#loc404 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":285:13)
#loc405 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":287:13)
#loc406 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":284:37)
#loc407 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":284:30)
#loc408 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":284:17)
#loc409 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":288:27)
#loc410 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":288:17)
#loc411 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":294:9)
#loc412 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":305:9)
#loc413 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":295:13)
#loc414 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":295:34)
#loc415 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":297:13)
#loc416 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":304:13)
#loc417 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":297:17)
#loc418 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":297:25)
#loc419 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":297:27)
#loc420 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":297:30)
#loc421 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":297:38)
#loc422 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":297:40)
#loc423 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":298:13)
#loc424 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":300:13)
#loc425 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":302:13)
#loc426 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":299:37)
#loc427 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":299:30)
#loc428 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":299:17)
#loc429 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":303:27)
#loc430 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":303:17)
#loc431 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":312:1)
#loc432 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":361:1)
#loc433 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":314:5)
#loc434 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":314:9)
#loc435 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":316:13)
#loc436 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":316:12)
#loc437 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":316:5)
#loc438 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":317:5)
#loc439 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":328:5)
#loc440 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":317:8)
#loc441 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":317:33)
#loc442 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":318:5)
#loc443 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":322:5)
#loc444 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":324:5)
#loc445 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":321:16)
#loc446 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":321:9)
#loc447 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":327:16)
#loc448 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":327:9)
#loc449 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":329:5)
#loc450 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":360:5)
#loc451 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":329:8)
#loc452 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":329:33)
#loc453 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":330:5)
#loc454 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":344:5)
#loc455 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":346:5)
#loc456 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":331:9)
#loc457 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":343:9)
#loc458 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":332:13)
#loc459 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":332:34)
#loc460 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":335:13)
#loc461 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":342:13)
#loc462 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":335:17)
#loc463 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":335:25)
#loc464 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":336:13)
#loc465 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":338:13)
#loc466 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":340:13)
#loc467 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":337:37)
#loc468 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":337:30)
#loc469 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":337:17)
#loc470 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":341:27)
#loc471 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":341:17)
#loc472 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":347:9)
#loc473 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":359:9)
#loc474 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":348:13)
#loc475 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":348:34)
#loc476 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":351:13)
#loc477 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":358:13)
#loc478 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":351:17)
#loc479 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":351:25)
#loc480 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":352:13)
#loc481 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":354:13)
#loc482 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":356:13)
#loc483 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":353:37)
#loc484 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":353:30)
#loc485 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":353:17)
#loc486 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":357:27)
#loc487 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_12.c":357:17)
#loc488 = loc(fused[#loc1, #loc2])
#loc489 = loc(fused[#loc3, #loc4])
#loc490 = loc(fused[#loc5, #loc6])
#loc491 = loc(fused[#loc8, #loc9])
#loc492 = loc(fused[#loc10, #loc11])
#loc493 = loc(fused[#loc12, #loc13])
#loc494 = loc(fused[#loc14, #loc15])
#loc495 = loc(fused[#loc16, #loc17])
#loc496 = loc(fused[#loc18, #loc19])
#loc497 = loc(fused[#loc20, #loc21])
#loc498 = loc(fused[#loc24, #loc25])
#loc499 = loc(fused[#loc26, #loc27])
#loc500 = loc(fused[#loc30, #loc28])
#loc501 = loc(fused[#loc31, #loc32])
#loc502 = loc(fused[#loc33, #loc34])
#loc503 = loc(fused[#loc35, #loc36, #loc37, #loc32])
#loc504 = loc(fused[#loc38, #loc39])
#loc505 = loc(fused[#loc40, #loc41])
#loc506 = loc(fused[#loc42, #loc43])
#loc507 = loc(fused[#loc44, #loc45])
#loc508 = loc(fused[#loc46, #loc47])
#loc509 = loc(fused[#loc48, #loc49])
#loc510 = loc(fused[#loc54, #loc55])
#loc511 = loc(fused[#loc56, #loc57])
#loc512 = loc(fused[#loc58, #loc59])
#loc513 = loc(fused[#loc60, #loc57])
#loc514 = loc(fused[#loc62, #loc63])
#loc515 = loc(fused[#loc65, #loc66])
#loc516 = loc(fused[#loc67, #loc68])
#loc517 = loc(fused[#loc71, #loc69])
#loc518 = loc(fused[#loc75, #loc76])
#loc519 = loc(fused[#loc80, #loc81])
#loc520 = loc(fused[#loc82, #loc83])
#loc521 = loc(fused[#loc85, #loc86])
#loc522 = loc(fused[#loc87, #loc88])
#loc523 = loc(fused[#loc89, #loc90])
#loc524 = loc(fused[#loc91, #loc83])
#loc525 = loc(fused[#loc95, #loc96])
#loc526 = loc(fused[#loc99, #loc100])
#loc527 = loc(fused[#loc101, #loc102])
#loc528 = loc(fused[#loc103, #loc104])
#loc529 = loc(fused[#loc106, #loc107])
#loc530 = loc(fused[#loc108, #loc102])
#loc531 = loc(fused[#loc112, #loc110])
#loc532 = loc(fused[#loc115, #loc116])
#loc533 = loc(fused[#loc118, #loc119])
#loc534 = loc(fused[#loc120, #loc121])
#loc535 = loc(fused[#loc122, #loc119])
#loc536 = loc(fused[#loc126, #loc125])
#loc537 = loc(fused[#loc127, #loc128])
#loc538 = loc(fused[#loc129, #loc130])
#loc539 = loc(fused[#loc131, #loc132, #loc133, #loc128])
#loc540 = loc(fused[#loc134, #loc135])
#loc541 = loc(fused[#loc136, #loc137])
#loc542 = loc(fused[#loc138, #loc139])
#loc543 = loc(fused[#loc140, #loc141])
#loc544 = loc(fused[#loc142, #loc143, #loc144, #loc139])
#loc545 = loc(fused[#loc149, #loc150])
#loc546 = loc(fused[#loc151, #loc152])
#loc547 = loc(fused[#loc153, #loc154])
#loc548 = loc(fused[#loc155, #loc156])
#loc549 = loc(fused[#loc158, #loc160])
#loc550 = loc(fused[#loc161, #loc162, #loc163, #loc154])
#loc551 = loc(fused[#loc168, #loc169])
#loc552 = loc(fused[#loc170, #loc171])
#loc553 = loc(fused[#loc172, #loc173])
#loc554 = loc(fused[#loc174, #loc175])
#loc555 = loc(fused[#loc176, #loc177])
#loc556 = loc(fused[#loc182, #loc183])
#loc559 = loc(fused[#loc193, #loc194])
#loc560 = loc(fused[#loc197, #loc198])
#loc561 = loc(fused[#loc201, #loc200])
#loc562 = loc(fused[#loc202, #loc203])
#loc563 = loc(fused[#loc204, #loc205])
#loc564 = loc(fused[#loc208, #loc206])
#loc565 = loc(fused[#loc209, #loc210])
#loc566 = loc(fused[#loc211, #loc212])
#loc567 = loc(fused[#loc213, #loc214, #loc215, #loc210])
#loc568 = loc(fused[#loc216, #loc217])
#loc569 = loc(fused[#loc218, #loc219])
#loc570 = loc(fused[#loc220, #loc221])
#loc571 = loc(fused[#loc222, #loc223])
#loc572 = loc(fused[#loc224, #loc225])
#loc573 = loc(fused[#loc226, #loc227])
#loc574 = loc(fused[#loc232, #loc233])
#loc575 = loc(fused[#loc234, #loc235])
#loc576 = loc(fused[#loc236, #loc237])
#loc577 = loc(fused[#loc238, #loc235])
#loc578 = loc(fused[#loc240, #loc241])
#loc579 = loc(fused[#loc243, #loc244])
#loc580 = loc(fused[#loc245, #loc246])
#loc581 = loc(fused[#loc248, #loc247])
#loc582 = loc(fused[#loc251, #loc252])
#loc583 = loc(fused[#loc255, #loc256])
#loc584 = loc(fused[#loc257, #loc258])
#loc585 = loc(fused[#loc260, #loc261])
#loc586 = loc(fused[#loc262, #loc263])
#loc587 = loc(fused[#loc264, #loc265])
#loc588 = loc(fused[#loc266, #loc258])
#loc589 = loc(fused[#loc270, #loc271])
#loc590 = loc(fused[#loc274, #loc275])
#loc591 = loc(fused[#loc276, #loc277])
#loc592 = loc(fused[#loc278, #loc279])
#loc593 = loc(fused[#loc281, #loc282])
#loc594 = loc(fused[#loc283, #loc277])
#loc595 = loc(fused[#loc287, #loc285])
#loc596 = loc(fused[#loc290, #loc291])
#loc597 = loc(fused[#loc293, #loc294])
#loc598 = loc(fused[#loc295, #loc296])
#loc599 = loc(fused[#loc297, #loc294])
#loc600 = loc(fused[#loc300, #loc301])
#loc601 = loc(fused[#loc302, #loc303])
#loc602 = loc(fused[#loc304, #loc305])
#loc603 = loc(fused[#loc306, #loc307])
#loc604 = loc(fused[#loc308, #loc309])
#loc605 = loc(fused[#loc310, #loc311])
#loc606 = loc(fused[#loc316, #loc317])
#loc607 = loc(fused[#loc318, #loc319])
#loc608 = loc(fused[#loc320, #loc321])
#loc609 = loc(fused[#loc322, #loc319])
#loc610 = loc(fused[#loc324, #loc325])
#loc611 = loc(fused[#loc327, #loc328])
#loc612 = loc(fused[#loc329, #loc330])
#loc613 = loc(fused[#loc332, #loc331])
#loc614 = loc(fused[#loc335, #loc336])
#loc615 = loc(fused[#loc339, #loc340])
#loc616 = loc(fused[#loc341, #loc342])
#loc617 = loc(fused[#loc344, #loc345])
#loc618 = loc(fused[#loc346, #loc347])
#loc619 = loc(fused[#loc348, #loc349])
#loc620 = loc(fused[#loc350, #loc342])
#loc621 = loc(fused[#loc354, #loc355])
#loc622 = loc(fused[#loc358, #loc359])
#loc623 = loc(fused[#loc360, #loc361])
#loc624 = loc(fused[#loc362, #loc363])
#loc625 = loc(fused[#loc365, #loc366])
#loc626 = loc(fused[#loc367, #loc361])
#loc627 = loc(fused[#loc371, #loc369])
#loc628 = loc(fused[#loc374, #loc375])
#loc629 = loc(fused[#loc377, #loc378])
#loc630 = loc(fused[#loc379, #loc380])
#loc631 = loc(fused[#loc381, #loc378])
#loc632 = loc(fused[#loc384, #loc385])
#loc633 = loc(fused[#loc386, #loc387])
#loc634 = loc(fused[#loc388, #loc389, #loc390, #loc385])
#loc635 = loc(fused[#loc391, #loc392])
#loc636 = loc(fused[#loc393, #loc394])
#loc637 = loc(fused[#loc395, #loc396])
#loc638 = loc(fused[#loc397, #loc398])
#loc639 = loc(fused[#loc400, #loc402])
#loc640 = loc(fused[#loc403, #loc404, #loc405, #loc396])
#loc641 = loc(fused[#loc411, #loc412])
#loc642 = loc(fused[#loc413, #loc414])
#loc643 = loc(fused[#loc415, #loc416])
#loc644 = loc(fused[#loc417, #loc418])
#loc645 = loc(fused[#loc420, #loc422])
#loc646 = loc(fused[#loc423, #loc424, #loc425, #loc416])
#loc647 = loc(fused[#loc431, #loc432])
#loc648 = loc(fused[#loc433, #loc434])
#loc649 = loc(fused[#loc437, #loc435])
#loc650 = loc(fused[#loc438, #loc439])
#loc651 = loc(fused[#loc440, #loc441])
#loc652 = loc(fused[#loc442, #loc443, #loc444, #loc439])
#loc653 = loc(fused[#loc446, #loc445])
#loc654 = loc(fused[#loc448, #loc447])
#loc655 = loc(fused[#loc449, #loc450])
#loc656 = loc(fused[#loc451, #loc452])
#loc657 = loc(fused[#loc453, #loc454, #loc455, #loc450])
#loc658 = loc(fused[#loc456, #loc457])
#loc659 = loc(fused[#loc458, #loc459])
#loc660 = loc(fused[#loc460, #loc461])
#loc661 = loc(fused[#loc462, #loc463])
#loc662 = loc(fused[#loc464, #loc465, #loc466, #loc461])
#loc663 = loc(fused[#loc472, #loc473])
#loc664 = loc(fused[#loc474, #loc475])
#loc665 = loc(fused[#loc476, #loc477])
#loc666 = loc(fused[#loc478, #loc479])
#loc667 = loc(fused[#loc480, #loc481, #loc482, #loc477])
