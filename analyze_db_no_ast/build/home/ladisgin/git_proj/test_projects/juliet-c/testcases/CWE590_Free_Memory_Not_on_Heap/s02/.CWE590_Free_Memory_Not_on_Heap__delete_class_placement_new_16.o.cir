!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc1 = loc("../../../testcasesupport/std_testcase.h":61:7)
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE590_Free_Memory_Not_on_Heap/s02/CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func linkonce_odr  @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc1)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc1)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc1)
    cir.return loc(#loc1)
  } loc(#loc1)
  cir.func private  @printIntLine(!s32i) loc(#loc68)
  cir.func private  @_ZdlPvm(!cir.ptr<!void>, !u64i) extra(#fn_attr1) loc(#loc69)
  cir.func  @_ZN61CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_163badEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data"] {alignment = 8 : i64} loc(#loc71)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty_TwoIntsClass> loc(#loc10)
    cir.store %1, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc72)
    cir.scope {
      cir.while {
        %8 = cir.const #cir.int<1> : !s32i loc(#loc14)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc14)
        cir.condition(%9) loc(#loc14)
      } do {
        cir.scope {
          %8 = cir.alloca !cir.array<!s8i x 8>, !cir.ptr<!cir.array<!s8i x 8>>, ["buffer"] {alignment = 1 : i64} loc(#loc75)
          %9 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc76)
          %10 = cir.const #cir.int<8> : !u64i loc(#loc77)
          %11 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc22)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc22)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc77)
          cir.call @_ZN12TwoIntsClassC2Ev(%13) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr1) loc(#loc20)
          cir.store %13, %9 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc76)
          %14 = cir.const #cir.int<2> : !s32i loc(#loc23)
          %15 = cir.load %9 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc24)
          %16 = cir.get_member %15[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc25)
          cir.store %14, %16 : !s32i, !cir.ptr<!s32i> loc(#loc78)
          %17 = cir.const #cir.int<2> : !s32i loc(#loc26)
          %18 = cir.load %9 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc27)
          %19 = cir.get_member %18[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc28)
          cir.store %17, %19 : !s32i, !cir.ptr<!s32i> loc(#loc79)
          %20 = cir.load %9 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc29)
          cir.store %20, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc80)
        } loc(#loc74)
        cir.break loc(#loc31)
      } loc(#loc73)
    } loc(#loc73)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc32)
    %3 = cir.get_member %2[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc25)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    cir.call @printIntLine(%4) : (!s32i) -> () loc(#loc34)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc35)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc35)
    %7 = cir.const #cir.int<8> : !u64i loc(#loc36)
    cir.call @_ZdlPvm(%6, %7) : (!cir.ptr<!void>, !u64i) -> () extra(#fn_attr1) loc(#loc36)
    cir.return loc(#loc7)
  } loc(#loc70)
  cir.func private  @_Znwm(!u64i) -> !cir.ptr<!void> loc(#loc81)
  cir.func internal private  @_ZN61CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16L7goodG2BEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data"] {alignment = 8 : i64} loc(#loc83)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty_TwoIntsClass> loc(#loc43)
    cir.store %1, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc84)
    cir.scope {
      cir.while {
        %8 = cir.const #cir.int<1> : !s32i loc(#loc47)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc47)
        cir.condition(%9) loc(#loc47)
      } do {
        cir.scope {
          %8 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc87)
          %9 = cir.const #cir.int<8> : !u64i loc(#loc88)
          %10 = cir.call @_Znwm(%9) : (!u64i) -> !cir.ptr<!void> loc(#loc87)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc88)
          cir.call @_ZN12TwoIntsClassC2Ev(%11) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr1) loc(#loc51)
          cir.store %11, %8 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc87)
          %12 = cir.const #cir.int<2> : !s32i loc(#loc53)
          %13 = cir.load %8 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc54)
          %14 = cir.get_member %13[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc25)
          cir.store %12, %14 : !s32i, !cir.ptr<!s32i> loc(#loc89)
          %15 = cir.const #cir.int<2> : !s32i loc(#loc55)
          %16 = cir.load %8 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc56)
          %17 = cir.get_member %16[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc28)
          cir.store %15, %17 : !s32i, !cir.ptr<!s32i> loc(#loc90)
          %18 = cir.load %8 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc57)
          cir.store %18, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc91)
        } loc(#loc86)
        cir.break loc(#loc59)
      } loc(#loc85)
    } loc(#loc85)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc60)
    %3 = cir.get_member %2[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc25)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    cir.call @printIntLine(%4) : (!s32i) -> () loc(#loc62)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc63)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc63)
    %7 = cir.const #cir.int<8> : !u64i loc(#loc64)
    cir.call @_ZdlPvm(%6, %7) : (!cir.ptr<!void>, !u64i) -> () extra(#fn_attr1) loc(#loc64)
    cir.return loc(#loc40)
  } loc(#loc82)
  cir.func  @_ZN61CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_164goodEv() extra(#fn_attr2) {
    cir.call @_ZN61CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16L7goodG2BEv() : () -> () loc(#loc67)
    cir.return loc(#loc66)
  } loc(#loc92)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE590_Free_Memory_Not_on_Heap/s02/CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":0:0)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc4 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/new":140:1)
#loc5 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/new":141:41)
#loc6 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":26:1)
#loc7 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":45:1)
#loc8 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":28:5)
#loc9 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":28:20)
#loc10 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":29:12)
#loc11 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":29:5)
#loc12 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":30:5)
#loc13 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":41:5)
#loc14 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":30:11)
#loc15 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":32:9)
#loc16 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":39:9)
#loc17 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":34:13)
#loc18 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":34:45)
#loc19 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":35:13)
#loc20 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":35:53)
#loc21 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":35:41)
#loc22 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":35:45)
#loc23 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":36:34)
#loc24 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":36:13)
#loc25 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc26 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":37:34)
#loc27 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":37:13)
#loc28 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc29 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":38:20)
#loc30 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":38:13)
#loc31 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":40:9)
#loc32 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":42:18)
#loc33 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":42:24)
#loc34 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":42:5)
#loc35 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":44:12)
#loc36 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":26:6)
#loc37 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/new":131:20)
#loc38 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/new":132:41)
#loc39 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":52:1)
#loc40 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":70:1)
#loc41 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":54:5)
#loc42 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":54:20)
#loc43 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":55:12)
#loc44 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":55:5)
#loc45 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":56:5)
#loc46 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":66:5)
#loc47 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":56:11)
#loc48 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":58:9)
#loc49 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":64:9)
#loc50 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":60:13)
#loc51 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":60:45)
#loc52 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":60:41)
#loc53 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":61:34)
#loc54 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":61:13)
#loc55 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":62:34)
#loc56 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":62:13)
#loc57 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":63:20)
#loc58 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":63:13)
#loc59 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":65:9)
#loc60 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":67:18)
#loc61 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":67:24)
#loc62 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":67:5)
#loc63 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":69:12)
#loc64 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":52:13)
#loc65 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":72:1)
#loc66 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":75:1)
#loc67 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_placement_new_16.cpp":74:5)
#loc68 = loc(fused[#loc2, #loc3])
#loc69 = loc(fused[#loc4, #loc5])
#loc70 = loc(fused[#loc6, #loc7])
#loc71 = loc(fused[#loc8, #loc9])
#loc72 = loc(fused[#loc11, #loc10])
#loc73 = loc(fused[#loc12, #loc13])
#loc74 = loc(fused[#loc15, #loc16])
#loc75 = loc(fused[#loc17, #loc18])
#loc76 = loc(fused[#loc19, #loc20])
#loc77 = loc(fused[#loc21, #loc20])
#loc78 = loc(fused[#loc24, #loc23])
#loc79 = loc(fused[#loc27, #loc26])
#loc80 = loc(fused[#loc30, #loc29])
#loc81 = loc(fused[#loc37, #loc38])
#loc82 = loc(fused[#loc39, #loc40])
#loc83 = loc(fused[#loc41, #loc42])
#loc84 = loc(fused[#loc44, #loc43])
#loc85 = loc(fused[#loc45, #loc46])
#loc86 = loc(fused[#loc48, #loc49])
#loc87 = loc(fused[#loc50, #loc51])
#loc88 = loc(fused[#loc52, #loc51])
#loc89 = loc(fused[#loc54, #loc53])
#loc90 = loc(fused[#loc56, #loc55])
#loc91 = loc(fused[#loc58, #loc57])
#loc92 = loc(fused[#loc65, #loc66])
