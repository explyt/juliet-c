!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc44 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":106:10)
#loc45 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":106:14)
#loc46 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":106:20)
#loc47 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":106:32)
#loc126 = loc(fused[#loc44, #loc45])
#loc127 = loc(fused[#loc46, #loc47])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s01/CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc108)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc109)
  cir.func private @printShortLine(!s16i) loc(#loc110)
  cir.func no_proto @CWE197_Numeric_Truncation_Error__int_rand_to_short_05_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc112)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc12)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc108)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc16)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc16)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc18)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc18)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc18)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc18)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc18)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc18)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc18)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc18)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc18)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc18)
          cir.yield %23 : !u32i loc(#loc18)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc18)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc18)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc18)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc18)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc18)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc18)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc18)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc18)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc18)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc18)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc18)
          cir.yield %27 : !u32i loc(#loc18)
        }) : (!cir.bool) -> !u32i loc(#loc18)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc18)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc116)
      } loc(#loc115)
    } loc(#loc114)
    cir.scope {
      %3 = cir.alloca !s16i, !cir.ptr<!s16i>, ["shortData", init] {alignment = 2 : i64} loc(#loc118)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
      %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc23)
      cir.store %5, %3 : !s16i, !cir.ptr<!s16i> loc(#loc118)
      %6 = cir.load %3 : !cir.ptr<!s16i>, !s16i loc(#loc24)
      cir.call @printShortLine(%6) : (!s16i) -> () loc(#loc25)
    } loc(#loc117)
    cir.return loc(#loc8)
  } loc(#loc111)
  cir.func no_proto @CWE197_Numeric_Truncation_Error__int_rand_to_short_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc120)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc121)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc119)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc122)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc123)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc124)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc41)
  cir.func @main(%arg0: !s32i loc(fused[#loc44, #loc45]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc46, #loc47])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc126)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc127)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc43)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc48)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc48)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc49)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc50)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc50)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc51)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc38)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %8 = cir.get_global @CWE197_Numeric_Truncation_Error__int_rand_to_short_05_good : !cir.ptr<!cir.func<!void ()>> loc(#loc128)
    cir.call @CWE197_Numeric_Truncation_Error__int_rand_to_short_05_good() : () -> () loc(#loc53)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc39)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc40)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %13 = cir.get_global @CWE197_Numeric_Truncation_Error__int_rand_to_short_05_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc129)
    cir.call @CWE197_Numeric_Truncation_Error__int_rand_to_short_05_bad() : () -> () loc(#loc57)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc41)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc60)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc130)
    cir.return %17 : !s32i loc(#loc130)
  } loc(#loc125)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc131)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc64)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc133)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc69)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc70)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc131)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc74)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc74)
      cir.if %5 {
        %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc64)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc64)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc78)
      } else {
        %6 = cir.const #cir.int<127> : !s32i loc(#loc79)
        %7 = cir.const #cir.int<5> : !s32i loc(#loc80)
        %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc79)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc137)
      } loc(#loc136)
    } loc(#loc135)
    cir.scope {
      %3 = cir.alloca !s16i, !cir.ptr<!s16i>, ["shortData", init] {alignment = 2 : i64} loc(#loc139)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
      %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc85)
      cir.store %5, %3 : !s16i, !cir.ptr<!s16i> loc(#loc139)
      %6 = cir.load %3 : !cir.ptr<!s16i>, !s16i loc(#loc86)
      cir.call @printShortLine(%6) : (!s16i) -> () loc(#loc87)
    } loc(#loc138)
    cir.return loc(#loc66)
  } loc(#loc132)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc141)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc92)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc93)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc142)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc108)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc97)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc97)
      cir.if %5 {
        %6 = cir.const #cir.int<127> : !s32i loc(#loc99)
        %7 = cir.const #cir.int<5> : !s32i loc(#loc100)
        %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc99)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc145)
      } loc(#loc144)
    } loc(#loc143)
    cir.scope {
      %3 = cir.alloca !s16i, !cir.ptr<!s16i>, ["shortData", init] {alignment = 2 : i64} loc(#loc147)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc105)
      %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc105)
      cir.store %5, %3 : !s16i, !cir.ptr<!s16i> loc(#loc147)
      %6 = cir.load %3 : !cir.ptr<!s16i>, !s16i loc(#loc106)
      cir.call @printShortLine(%6) : (!s16i) -> () loc(#loc107)
    } loc(#loc146)
    cir.return loc(#loc89)
  } loc(#loc140)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s01/CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":0:0)
#loc1 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":23:1)
#loc2 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":23:25)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":20:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":20:39)
#loc7 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":28:1)
#loc8 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":43:1)
#loc9 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":30:5)
#loc10 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":30:9)
#loc11 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":32:13)
#loc12 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":32:12)
#loc13 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":32:5)
#loc14 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":33:5)
#loc15 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":37:5)
#loc16 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":33:8)
#loc17 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":34:5)
#loc18 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":36:16)
#loc19 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":36:9)
#loc20 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":38:5)
#loc21 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":42:5)
#loc22 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":40:9)
#loc23 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":40:34)
#loc24 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":41:24)
#loc25 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":41:9)
#loc26 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":90:1)
#loc27 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":94:1)
#loc28 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":92:5)
#loc29 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":92:14)
#loc30 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":93:5)
#loc31 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":93:14)
#loc32 = loc("/usr/include/stdlib.h":575:1)
#loc33 = loc("/usr/include/stdlib.h":575:41)
#loc34 = loc("/usr/include/time.h":76:1)
#loc35 = loc("/usr/include/time.h":76:38)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc38 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":111:15)
#loc39 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":113:15)
#loc40 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":116:15)
#loc41 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":118:15)
#loc42 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":106:1)
#loc43 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":121:1)
#loc48 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":107:1)
#loc49 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":109:27)
#loc50 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":109:22)
#loc51 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":109:5)
#loc52 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":111:5)
#loc53 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":112:5)
#loc54 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":112:64)
#loc55 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":113:5)
#loc56 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":116:5)
#loc57 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":117:5)
#loc58 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":117:63)
#loc59 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":118:5)
#loc60 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":120:12)
#loc61 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":120:5)
#loc62 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":24:1)
#loc63 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":24:26)
#loc64 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":58:19)
#loc65 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":50:1)
#loc66 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":70:1)
#loc67 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":52:5)
#loc68 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":52:9)
#loc69 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":54:13)
#loc70 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":54:12)
#loc71 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":54:5)
#loc72 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":55:5)
#loc73 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":64:5)
#loc74 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":55:8)
#loc75 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":56:5)
#loc76 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":59:5)
#loc77 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":61:5)
#loc78 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":58:9)
#loc79 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":63:16)
#loc80 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":63:25)
#loc81 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":63:9)
#loc82 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":65:5)
#loc83 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":69:5)
#loc84 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":67:9)
#loc85 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":67:34)
#loc86 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":68:24)
#loc87 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":68:9)
#loc88 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":73:1)
#loc89 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":88:1)
#loc90 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":75:5)
#loc91 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":75:9)
#loc92 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":77:13)
#loc93 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":77:12)
#loc94 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":77:5)
#loc95 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":78:5)
#loc96 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":82:5)
#loc97 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":78:8)
#loc98 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":79:5)
#loc99 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":81:16)
#loc100 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":81:25)
#loc101 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":81:9)
#loc102 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":83:5)
#loc103 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":87:5)
#loc104 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":85:9)
#loc105 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":85:34)
#loc106 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":86:24)
#loc107 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_short_05.c":86:9)
#loc108 = loc(fused[#loc1, #loc2])
#loc109 = loc(fused[#loc3, #loc4])
#loc110 = loc(fused[#loc5, #loc6])
#loc111 = loc(fused[#loc7, #loc8])
#loc112 = loc(fused[#loc9, #loc10])
#loc113 = loc(fused[#loc13, #loc11])
#loc114 = loc(fused[#loc14, #loc15])
#loc115 = loc(fused[#loc17, #loc15])
#loc116 = loc(fused[#loc19, #loc18])
#loc117 = loc(fused[#loc20, #loc21])
#loc118 = loc(fused[#loc22, #loc23])
#loc119 = loc(fused[#loc26, #loc27])
#loc120 = loc(fused[#loc28, #loc29])
#loc121 = loc(fused[#loc30, #loc31])
#loc122 = loc(fused[#loc32, #loc33])
#loc123 = loc(fused[#loc34, #loc35])
#loc124 = loc(fused[#loc36, #loc37])
#loc125 = loc(fused[#loc42, #loc43])
#loc128 = loc(fused[#loc53, #loc54])
#loc129 = loc(fused[#loc57, #loc58])
#loc130 = loc(fused[#loc61, #loc60])
#loc131 = loc(fused[#loc62, #loc63])
#loc132 = loc(fused[#loc65, #loc66])
#loc133 = loc(fused[#loc67, #loc68])
#loc134 = loc(fused[#loc71, #loc69])
#loc135 = loc(fused[#loc72, #loc73])
#loc136 = loc(fused[#loc75, #loc76, #loc77, #loc73])
#loc137 = loc(fused[#loc81, #loc80])
#loc138 = loc(fused[#loc82, #loc83])
#loc139 = loc(fused[#loc84, #loc85])
#loc140 = loc(fused[#loc88, #loc89])
#loc141 = loc(fused[#loc90, #loc91])
#loc142 = loc(fused[#loc94, #loc92])
#loc143 = loc(fused[#loc95, #loc96])
#loc144 = loc(fused[#loc98, #loc96])
#loc145 = loc(fused[#loc101, #loc100])
#loc146 = loc(fused[#loc102, #loc103])
#loc147 = loc(fused[#loc104, #loc105])
