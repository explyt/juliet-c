!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":91:10)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":91:14)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":91:20)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":91:32)
#loc150 = loc(fused[#loc63, #loc64])
#loc151 = loc(fused[#loc65, #loc66])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLongLongLine(!s64i) loc(#loc125)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc127)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc128)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc8)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc8)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc8)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc8)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc8)
    %7 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc129)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc8)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc8)
    cir.store %9, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc128)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc10)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc10)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc10)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc10)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc10)
    cir.store %16, %7 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc129)
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc11)
    cir.store %17, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc130)
    cir.scope {
      %18 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc132)
      %19 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc133)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc16)
      cir.store %20, %18 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc132)
      %21 = cir.load %18 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc18)
      cir.store %21, %19 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc133)
      cir.scope {
        %22 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc135)
        %23 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc135)
        cir.store %23, %22 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc135)
        cir.scope {
          %24 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc137)
          cir.scope {
            %29 = cir.const #cir.int<0> : !s32i loc(#loc29)
            %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc29)
            cir.store %30, %24 : !u64i, !cir.ptr<!u64i> loc(#loc139)
            cir.for : cond {
              %31 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc31)
              %32 = cir.const #cir.int<100> : !s32i loc(#loc32)
              %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc32)
              %34 = cir.cmp(lt, %31, %33) : !u64i, !cir.bool loc(#loc140)
              cir.condition(%34) loc(#loc33)
            } body {
              cir.scope {
                %31 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc35)
                %32 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc36)
                %33 = cir.ptr_stride(%32 : !cir.ptr<!s64i>, %31 : !u64i), !cir.ptr<!s64i> loc(#loc36)
                %34 = cir.load %33 : !cir.ptr<!s64i>, !s64i loc(#loc36)
                %35 = cir.load %19 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc37)
                %36 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc38)
                %37 = cir.ptr_stride(%35 : !cir.ptr<!s64i>, %36 : !u64i), !cir.ptr<!s64i> loc(#loc39)
                cir.store %34, %37 : !s64i, !cir.ptr<!s64i> loc(#loc142)
              } loc(#loc141)
              cir.yield loc(#loc28)
            } step {
              %31 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc41)
              %32 = cir.unary(inc, %31) : !u64i, !u64i loc(#loc42)
              cir.store %32, %24 : !u64i, !cir.ptr<!u64i> loc(#loc143)
              cir.yield loc(#loc138)
            } loc(#loc138)
          } loc(#loc138)
          %25 = cir.load %19 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc43)
          %26 = cir.const #cir.int<0> : !s32i loc(#loc44)
          %27 = cir.ptr_stride(%25 : !cir.ptr<!s64i>, %26 : !s32i), !cir.ptr<!s64i> loc(#loc45)
          %28 = cir.load %27 : !cir.ptr<!s64i>, !s64i loc(#loc43)
          cir.call @printLongLongLine(%28) : (!s64i) -> () loc(#loc46)
        } loc(#loc136)
      } loc(#loc134)
    } loc(#loc131)
    cir.return loc(#loc4)
  } loc(#loc126)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc145)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    cir.return loc(#loc48)
  } loc(#loc144)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc146)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc147)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc148)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc60)
  cir.func @main(%arg0: !s32i loc(fused[#loc63, #loc64]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc65, #loc66])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc150)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc151)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc62)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc67)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc67)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc68)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc69)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc69)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc70)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc57)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31_good : !cir.ptr<!cir.func<!void ()>> loc(#loc152)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31_good() : () -> () loc(#loc72)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc58)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc59)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc153)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31_bad() : () -> () loc(#loc76)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc60)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc79)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc154)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc154)
    cir.return %17 : !s32i loc(#loc154)
  } loc(#loc149)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc156)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc157)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc86)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc86)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc86)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc86)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc86)
    %7 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc158)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc86)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc86)
    cir.store %9, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc157)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc88)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc88)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc88)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc88)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc88)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc88)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc88)
    cir.store %16, %7 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc158)
    %17 = cir.load %7 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc89)
    cir.store %17, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc159)
    cir.scope {
      %18 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc161)
      %19 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc162)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc94)
      cir.store %20, %18 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc161)
      %21 = cir.load %18 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc96)
      cir.store %21, %19 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc162)
      cir.scope {
        %22 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc164)
        %23 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc164)
        cir.store %23, %22 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc164)
        cir.scope {
          %24 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc166)
          cir.scope {
            %29 = cir.const #cir.int<0> : !s32i loc(#loc107)
            %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc107)
            cir.store %30, %24 : !u64i, !cir.ptr<!u64i> loc(#loc168)
            cir.for : cond {
              %31 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc109)
              %32 = cir.const #cir.int<100> : !s32i loc(#loc110)
              %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc110)
              %34 = cir.cmp(lt, %31, %33) : !u64i, !cir.bool loc(#loc169)
              cir.condition(%34) loc(#loc111)
            } body {
              cir.scope {
                %31 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc113)
                %32 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc114)
                %33 = cir.ptr_stride(%32 : !cir.ptr<!s64i>, %31 : !u64i), !cir.ptr<!s64i> loc(#loc114)
                %34 = cir.load %33 : !cir.ptr<!s64i>, !s64i loc(#loc114)
                %35 = cir.load %19 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc115)
                %36 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc116)
                %37 = cir.ptr_stride(%35 : !cir.ptr<!s64i>, %36 : !u64i), !cir.ptr<!s64i> loc(#loc117)
                cir.store %34, %37 : !s64i, !cir.ptr<!s64i> loc(#loc171)
              } loc(#loc170)
              cir.yield loc(#loc106)
            } step {
              %31 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc119)
              %32 = cir.unary(inc, %31) : !u64i, !u64i loc(#loc120)
              cir.store %32, %24 : !u64i, !cir.ptr<!u64i> loc(#loc172)
              cir.yield loc(#loc167)
            } loc(#loc167)
          } loc(#loc167)
          %25 = cir.load %19 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc121)
          %26 = cir.const #cir.int<0> : !s32i loc(#loc122)
          %27 = cir.ptr_stride(%25 : !cir.ptr<!s64i>, %26 : !s32i), !cir.ptr<!s64i> loc(#loc123)
          %28 = cir.load %27 : !cir.ptr<!s64i>, !s64i loc(#loc121)
          cir.call @printLongLongLine(%28) : (!s64i) -> () loc(#loc124)
        } loc(#loc165)
      } loc(#loc163)
    } loc(#loc160)
    cir.return loc(#loc82)
  } loc(#loc155)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":45:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":23:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":23:15)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":24:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":24:42)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":25:43)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":28:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":28:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":29:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":44:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":30:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":30:30)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":31:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":31:26)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":32:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":43:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":33:13)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":33:37)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":34:13)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":42:13)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":35:17)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":35:24)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":37:17)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":40:17)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":37:26)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":37:22)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":37:29)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":37:33)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":37:31)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":38:17)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":39:38)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":39:31)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":39:21)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":39:26)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":39:27)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":39:39)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":37:39)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":37:38)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":41:35)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":41:40)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":41:41)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":41:17)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":77:1)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":80:1)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":79:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":79:13)
#loc51 = loc("/usr/include/stdlib.h":575:1)
#loc52 = loc("/usr/include/stdlib.h":575:41)
#loc53 = loc("/usr/include/time.h":76:1)
#loc54 = loc("/usr/include/time.h":76:38)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":96:15)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":98:15)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":101:15)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":103:15)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":91:1)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":106:1)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":92:1)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":94:27)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":94:22)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":94:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":96:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":97:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":97:76)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":98:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":101:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":102:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":102:75)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":103:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":105:12)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":105:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":52:1)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":75:1)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":54:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":54:15)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":55:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":55:42)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":56:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":56:43)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":58:12)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":58:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":59:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":74:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":60:9)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":60:30)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":61:9)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":61:26)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":62:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":73:9)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":63:13)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":63:37)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":64:13)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":72:13)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":65:17)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":65:24)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":67:17)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":70:17)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":67:26)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":67:22)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":67:29)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":67:33)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":67:31)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":68:17)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":69:38)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":69:31)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":69:21)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":69:26)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":69:27)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":69:39)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":67:39)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":67:38)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":71:35)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":71:40)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":71:41)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c":71:17)
#loc125 = loc(fused[#loc1, #loc2])
#loc126 = loc(fused[#loc3, #loc4])
#loc127 = loc(fused[#loc5, #loc6])
#loc128 = loc(fused[#loc7, #loc8])
#loc129 = loc(fused[#loc9, #loc10])
#loc130 = loc(fused[#loc12, #loc11])
#loc131 = loc(fused[#loc13, #loc14])
#loc132 = loc(fused[#loc15, #loc16])
#loc133 = loc(fused[#loc17, #loc18])
#loc134 = loc(fused[#loc19, #loc20])
#loc135 = loc(fused[#loc21, #loc22])
#loc136 = loc(fused[#loc23, #loc24])
#loc137 = loc(fused[#loc25, #loc26])
#loc138 = loc(fused[#loc27, #loc28])
#loc139 = loc(fused[#loc30, #loc29])
#loc140 = loc(fused[#loc31, #loc32])
#loc141 = loc(fused[#loc34, #loc28])
#loc142 = loc(fused[#loc37, #loc40])
#loc143 = loc(fused[#loc42, #loc41])
#loc144 = loc(fused[#loc47, #loc48])
#loc145 = loc(fused[#loc49, #loc50])
#loc146 = loc(fused[#loc51, #loc52])
#loc147 = loc(fused[#loc53, #loc54])
#loc148 = loc(fused[#loc55, #loc56])
#loc149 = loc(fused[#loc61, #loc62])
#loc152 = loc(fused[#loc72, #loc73])
#loc153 = loc(fused[#loc76, #loc77])
#loc154 = loc(fused[#loc80, #loc79])
#loc155 = loc(fused[#loc81, #loc82])
#loc156 = loc(fused[#loc83, #loc84])
#loc157 = loc(fused[#loc85, #loc86])
#loc158 = loc(fused[#loc87, #loc88])
#loc159 = loc(fused[#loc90, #loc89])
#loc160 = loc(fused[#loc91, #loc92])
#loc161 = loc(fused[#loc93, #loc94])
#loc162 = loc(fused[#loc95, #loc96])
#loc163 = loc(fused[#loc97, #loc98])
#loc164 = loc(fused[#loc99, #loc100])
#loc165 = loc(fused[#loc101, #loc102])
#loc166 = loc(fused[#loc103, #loc104])
#loc167 = loc(fused[#loc105, #loc106])
#loc168 = loc(fused[#loc108, #loc107])
#loc169 = loc(fused[#loc109, #loc110])
#loc170 = loc(fused[#loc112, #loc106])
#loc171 = loc(fused[#loc115, #loc118])
#loc172 = loc(fused[#loc120, #loc119])
