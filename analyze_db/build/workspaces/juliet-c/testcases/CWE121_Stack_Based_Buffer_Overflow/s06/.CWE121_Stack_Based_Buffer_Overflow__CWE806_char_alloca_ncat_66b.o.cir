!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":23:78)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":23:95)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":41:82)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":41:99)
#loc59 = loc(fused[#loc9, #loc10])
#loc65 = loc(fused[#loc33, #loc34])
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @strncat(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc55)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc56)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc57)
  cir.func @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b_badSink(%arg0: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc9, #loc10])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc59)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc60)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc13)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc14)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc15)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!cir.ptr<!s8i>>, %3 : !s32i), !cir.ptr<!cir.ptr<!s8i>> loc(#loc12)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc14)
    cir.store %5, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc60)
    cir.scope {
      %6 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc62)
      %7 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc62)
      cir.store %7, %6 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc62)
      %8 = cir.get_global @strncat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc20)
      %9 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc21)
      %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc22)
      %11 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc23)
      %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc24)
      %13 = cir.call @strlen(%12) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc23)
      %14 = cir.call @strncat(%9, %10, %13) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc20)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc25)
      %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc25)
      %17 = cir.const #cir.int<50> : !s32i loc(#loc26)
      %18 = cir.const #cir.int<1> : !s32i loc(#loc27)
      %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc26)
      %20 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc28)
      %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc28)
      cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc63)
      %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
      cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc30)
    } loc(#loc61)
    cir.return loc(#loc8)
  } loc(#loc58)
  cir.func @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b_goodG2BSink(%arg0: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc33, #loc34])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc65)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc66)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc37)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc38)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc39)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!cir.ptr<!s8i>>, %3 : !s32i), !cir.ptr<!cir.ptr<!s8i>> loc(#loc36)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
    cir.store %5, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc66)
    cir.scope {
      %6 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc68)
      %7 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc68)
      cir.store %7, %6 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc68)
      %8 = cir.get_global @strncat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc44)
      %9 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc45)
      %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
      %11 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc47)
      %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
      %13 = cir.call @strlen(%12) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc47)
      %14 = cir.call @strncat(%9, %10, %13) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc44)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc49)
      %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc49)
      %17 = cir.const #cir.int<50> : !s32i loc(#loc50)
      %18 = cir.const #cir.int<1> : !s32i loc(#loc51)
      %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc50)
      %20 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc52)
      %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc52)
      cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc69)
      %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
      cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    } loc(#loc67)
    cir.return loc(#loc32)
  } loc(#loc64)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":0:0)
#loc1 = loc("/usr/include/string.h":152:1)
#loc2 = loc("/usr/include/string.h":153:29)
#loc3 = loc("/usr/include/string.h":407:1)
#loc4 = loc("/usr/include/string.h":408:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":23:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":34:1)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":26:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":26:30)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":24:1)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":26:19)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":26:29)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":27:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":33:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":28:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":28:25)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":30:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":30:17)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":30:23)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":30:29)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":30:36)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":31:22)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":31:14)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":31:17)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":31:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":32:19)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":32:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":41:1)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":51:1)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":43:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":43:30)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":42:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":43:19)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":43:29)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":44:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":50:5)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":45:9)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":45:25)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":47:9)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":47:17)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":47:23)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":47:29)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":47:36)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":48:22)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":48:14)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":48:17)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":48:9)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":49:19)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c":49:9)
#loc55 = loc(fused[#loc1, #loc2])
#loc56 = loc(fused[#loc3, #loc4])
#loc57 = loc(fused[#loc5, #loc6])
#loc58 = loc(fused[#loc7, #loc8])
#loc60 = loc(fused[#loc11, #loc12])
#loc61 = loc(fused[#loc16, #loc17])
#loc62 = loc(fused[#loc18, #loc19])
#loc63 = loc(fused[#loc28, #loc25])
#loc64 = loc(fused[#loc31, #loc32])
#loc66 = loc(fused[#loc35, #loc36])
#loc67 = loc(fused[#loc40, #loc41])
#loc68 = loc(fused[#loc42, #loc43])
#loc69 = loc(fused[#loc52, #loc49])
