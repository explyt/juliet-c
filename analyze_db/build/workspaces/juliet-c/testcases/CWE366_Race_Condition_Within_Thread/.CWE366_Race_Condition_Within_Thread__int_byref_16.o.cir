!s32i = !cir.int<s, 32>
!ty__stdThread = !cir.record<struct "_stdThread" incomplete>
!ty__stdThreadLock = !cir.record<struct "_stdThreadLock" incomplete>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":24:23)
#loc6 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":24:29)
#loc102 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":38:24)
#loc103 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":38:30)
#true = #cir.bool<true> : !cir.bool
#loc194 = loc(fused[#loc5, #loc6])
#loc233 = loc(fused[#loc102, #loc103])
module @"/workspaces/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__int_byref_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @stdThreadCreate(!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc192)
  cir.func internal private @helperBad(%arg0: !cir.ptr<!void> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc194)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["pIntArgs", init] {alignment = 8 : i64} loc(#loc195)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc196)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc11)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc8)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc8)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc195)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc14)
      cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc198)
      cir.for : cond {
        %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc16)
        %7 = cir.const #cir.int<1000000> : !s32i loc(#loc17)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc199)
        cir.condition(%8) loc(#loc18)
      } body {
        cir.scope {
          %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc20)
          %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc21)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc22)
          %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc21)
          %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc23)
          cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc201)
        } loc(#loc200)
        cir.yield loc(#loc13)
      } step {
        %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc25)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc26)
        cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc202)
        cir.yield loc(#loc197)
      } loc(#loc197)
    } loc(#loc197)
    cir.return loc(#loc4)
  } loc(#loc193)
  cir.func private @stdThreadJoin(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc203)
  cir.func private @stdThreadDestroy(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc204)
  cir.func private @printIntLine(!s32i) loc(#loc205)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__int_byref_16_bad() extra(#fn_attr) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc37)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc37)
        cir.condition(%1) loc(#loc37)
      } do {
        cir.scope {
          cir.scope {
            %0 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc210)
            %1 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc211)
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["valBadSink"] {alignment = 4 : i64} loc(#loc212)
            %3 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc42)
            cir.store %3, %0 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc210)
            %4 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc44)
            cir.store %4, %1 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc211)
            %5 = cir.const #cir.int<0> : !s32i loc(#loc47)
            cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc213)
            cir.scope {
              %7 = cir.get_global @helperBad : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc51)
              %8 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc215)
              %9 = cir.call @stdThreadCreate(%7, %8, %0) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc54)
              %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc54)
              %11 = cir.unary(not, %10) : !cir.bool, !cir.bool loc(#loc54)
              cir.if %11 {
                %12 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc56)
                cir.store %12, %0 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc217)
              } loc(#loc216)
            } loc(#loc214)
            cir.scope {
              %7 = cir.get_global @helperBad : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc60)
              %8 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc219)
              %9 = cir.call @stdThreadCreate(%7, %8, %1) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc63)
              %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc63)
              %11 = cir.unary(not, %10) : !cir.bool, !cir.bool loc(#loc63)
              cir.if %11 {
                %12 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc65)
                cir.store %12, %1 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc221)
              } loc(#loc220)
            } loc(#loc218)
            cir.scope {
              %7 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc69)
              %8 = cir.cast(ptr_to_bool, %7 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc69)
              %9 = cir.ternary(%8, true {
                %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc71)
                %11 = cir.call @stdThreadJoin(%10) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc72)
                %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc72)
                %13 = cir.ternary(%12, true {
                  %14 = cir.const #true loc(#loc70)
                  cir.yield %14 : !cir.bool loc(#loc70)
                }, false {
                  %14 = cir.const #false loc(#loc70)
                  cir.yield %14 : !cir.bool loc(#loc70)
                }) : (!cir.bool) -> !cir.bool loc(#loc70)
                cir.yield %13 : !cir.bool loc(#loc70)
              }, false {
                %10 = cir.const #false loc(#loc70)
                cir.yield %10 : !cir.bool loc(#loc70)
              }) : (!cir.bool) -> !cir.bool loc(#loc70)
              cir.if %9 {
                %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc74)
                %11 = cir.call @stdThreadDestroy(%10) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc75)
              } loc(#loc223)
            } loc(#loc222)
            cir.scope {
              %7 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc78)
              %8 = cir.cast(ptr_to_bool, %7 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc78)
              %9 = cir.ternary(%8, true {
                %10 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc80)
                %11 = cir.call @stdThreadJoin(%10) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc81)
                %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc81)
                %13 = cir.ternary(%12, true {
                  %14 = cir.const #true loc(#loc79)
                  cir.yield %14 : !cir.bool loc(#loc79)
                }, false {
                  %14 = cir.const #false loc(#loc79)
                  cir.yield %14 : !cir.bool loc(#loc79)
                }) : (!cir.bool) -> !cir.bool loc(#loc79)
                cir.yield %13 : !cir.bool loc(#loc79)
              }, false {
                %10 = cir.const #false loc(#loc79)
                cir.yield %10 : !cir.bool loc(#loc79)
              }) : (!cir.bool) -> !cir.bool loc(#loc79)
              cir.if %9 {
                %10 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc83)
                %11 = cir.call @stdThreadDestroy(%10) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc84)
              } loc(#loc225)
            } loc(#loc224)
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc85)
            cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc86)
          } loc(#loc209)
          cir.break loc(#loc87)
        } loc(#loc208)
        cir.yield loc(#loc36)
      } loc(#loc207)
    } loc(#loc207)
    cir.return loc(#loc34)
  } loc(#loc206)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__int_byref_16_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc227)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc90)
    cir.return loc(#loc89)
  } loc(#loc226)
  cir.func private @stdThreadLockCreate(!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc228)
  cir.global "private" internal dsolocal @gGoodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc229)
  cir.func private @stdThreadLockAcquire(!cir.ptr<!ty__stdThreadLock>) loc(#loc230)
  cir.func private @stdThreadLockRelease(!cir.ptr<!ty__stdThreadLock>) loc(#loc231)
  cir.func internal private @helperGood(%arg0: !cir.ptr<!void> loc(fused[#loc102, #loc103])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc233)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["pIntArgs", init] {alignment = 8 : i64} loc(#loc234)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc235)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc108)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc105)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc105)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc234)
    %5 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc229)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc109)
    cir.call @stdThreadLockAcquire(%6) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc110)
    cir.scope {
      %9 = cir.const #cir.int<0> : !s32i loc(#loc113)
      cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc237)
      cir.for : cond {
        %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc115)
        %11 = cir.const #cir.int<1000000> : !s32i loc(#loc116)
        %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc238)
        cir.condition(%12) loc(#loc117)
      } body {
        cir.scope {
          %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc119)
          %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc120)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc121)
          %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc120)
          %14 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc122)
          cir.store %13, %14 : !s32i, !cir.ptr<!s32i> loc(#loc240)
        } loc(#loc239)
        cir.yield loc(#loc112)
      } step {
        %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc124)
        %11 = cir.unary(inc, %10) nsw : !s32i, !s32i loc(#loc125)
        cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc241)
        cir.yield loc(#loc236)
      } loc(#loc236)
    } loc(#loc236)
    %7 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc229)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc126)
    cir.call @stdThreadLockRelease(%8) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc127)
    cir.return loc(#loc101)
  } loc(#loc232)
  cir.func private @stdThreadLockDestroy(!cir.ptr<!ty__stdThreadLock>) loc(#loc242)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc134)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc134)
        cir.condition(%1) loc(#loc134)
      } do {
        cir.scope {
          cir.scope {
            %0 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc247)
            %1 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc248)
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["valGoodSink"] {alignment = 4 : i64} loc(#loc249)
            %3 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc139)
            cir.store %3, %0 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc247)
            %4 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc141)
            cir.store %4, %1 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc248)
            %5 = cir.const #cir.int<0> : !s32i loc(#loc144)
            cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc250)
            cir.scope {
              %9 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc229)
              %10 = cir.call @stdThreadLockCreate(%9) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc148)
              %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc148)
              %12 = cir.unary(not, %11) : !cir.bool, !cir.bool loc(#loc148)
              cir.if %12 {
                cir.return loc(#loc150)
              } loc(#loc252)
            } loc(#loc251)
            cir.scope {
              %9 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc153)
              %10 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc254)
              %11 = cir.call @stdThreadCreate(%9, %10, %0) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc156)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc156)
              %13 = cir.unary(not, %12) : !cir.bool, !cir.bool loc(#loc156)
              cir.if %13 {
                %14 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc158)
                cir.store %14, %0 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc256)
              } loc(#loc255)
            } loc(#loc253)
            cir.scope {
              %9 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc162)
              %10 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc258)
              %11 = cir.call @stdThreadCreate(%9, %10, %1) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc165)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc165)
              %13 = cir.unary(not, %12) : !cir.bool, !cir.bool loc(#loc165)
              cir.if %13 {
                %14 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc167)
                cir.store %14, %1 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc260)
              } loc(#loc259)
            } loc(#loc257)
            cir.scope {
              %9 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc171)
              %10 = cir.cast(ptr_to_bool, %9 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc171)
              %11 = cir.ternary(%10, true {
                %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc173)
                %13 = cir.call @stdThreadJoin(%12) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc174)
                %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc174)
                %15 = cir.ternary(%14, true {
                  %16 = cir.const #true loc(#loc172)
                  cir.yield %16 : !cir.bool loc(#loc172)
                }, false {
                  %16 = cir.const #false loc(#loc172)
                  cir.yield %16 : !cir.bool loc(#loc172)
                }) : (!cir.bool) -> !cir.bool loc(#loc172)
                cir.yield %15 : !cir.bool loc(#loc172)
              }, false {
                %12 = cir.const #false loc(#loc172)
                cir.yield %12 : !cir.bool loc(#loc172)
              }) : (!cir.bool) -> !cir.bool loc(#loc172)
              cir.if %11 {
                %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc176)
                %13 = cir.call @stdThreadDestroy(%12) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc177)
              } loc(#loc262)
            } loc(#loc261)
            cir.scope {
              %9 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc180)
              %10 = cir.cast(ptr_to_bool, %9 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc180)
              %11 = cir.ternary(%10, true {
                %12 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc182)
                %13 = cir.call @stdThreadJoin(%12) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc183)
                %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc183)
                %15 = cir.ternary(%14, true {
                  %16 = cir.const #true loc(#loc181)
                  cir.yield %16 : !cir.bool loc(#loc181)
                }, false {
                  %16 = cir.const #false loc(#loc181)
                  cir.yield %16 : !cir.bool loc(#loc181)
                }) : (!cir.bool) -> !cir.bool loc(#loc181)
                cir.yield %15 : !cir.bool loc(#loc181)
              }, false {
                %12 = cir.const #false loc(#loc181)
                cir.yield %12 : !cir.bool loc(#loc181)
              }) : (!cir.bool) -> !cir.bool loc(#loc181)
              cir.if %11 {
                %12 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc185)
                %13 = cir.call @stdThreadDestroy(%12) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc186)
              } loc(#loc264)
            } loc(#loc263)
            %6 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc229)
            %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc187)
            cir.call @stdThreadLockDestroy(%7) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc188)
            %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc189)
            cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc190)
          } loc(#loc246)
          cir.break loc(#loc191)
        } loc(#loc245)
        cir.yield loc(#loc133)
      } loc(#loc244)
    } loc(#loc244)
    cir.return loc(#loc131)
  } loc(#loc243)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__int_byref_16.c":0:0)
#loc1 = loc("../../testcasesupport/std_thread.h":14:1)
#loc2 = loc("../../testcasesupport/std_thread.h":14:74)
#loc3 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":24:1)
#loc4 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":36:1)
#loc7 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":26:5)
#loc8 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":26:27)
#loc9 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":27:5)
#loc10 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":27:9)
#loc11 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":25:1)
#loc12 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":32:5)
#loc13 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":35:5)
#loc14 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":32:14)
#loc15 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":32:10)
#loc16 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":32:17)
#loc17 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":32:21)
#loc18 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":32:19)
#loc19 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":33:5)
#loc20 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":34:22)
#loc21 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":34:21)
#loc22 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":34:33)
#loc23 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":34:10)
#loc24 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":34:9)
#loc25 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":32:31)
#loc26 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":32:30)
#loc27 = loc("../../testcasesupport/std_thread.h":15:1)
#loc28 = loc("../../testcasesupport/std_thread.h":15:35)
#loc29 = loc("../../testcasesupport/std_thread.h":16:1)
#loc30 = loc("../../testcasesupport/std_thread.h":16:38)
#loc31 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc32 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc33 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":55:1)
#loc34 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":84:1)
#loc35 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":57:5)
#loc36 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":83:5)
#loc37 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":57:11)
#loc38 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":58:5)
#loc39 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":59:9)
#loc40 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":81:9)
#loc41 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":60:13)
#loc42 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":60:33)
#loc43 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":61:13)
#loc44 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":61:33)
#loc45 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":62:13)
#loc46 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":62:17)
#loc47 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":63:26)
#loc48 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":63:13)
#loc49 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":64:13)
#loc50 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":67:13)
#loc51 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":64:34)
#loc52 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":64:52)
#loc53 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":64:53)
#loc54 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":64:18)
#loc55 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":65:13)
#loc56 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":66:27)
#loc57 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":66:17)
#loc58 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":68:13)
#loc59 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":71:13)
#loc60 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":68:34)
#loc61 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":68:52)
#loc62 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":68:53)
#loc63 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":68:18)
#loc64 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":69:13)
#loc65 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":70:27)
#loc66 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":70:17)
#loc67 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":72:13)
#loc68 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":75:13)
#loc69 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":72:17)
#loc70 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":72:25)
#loc71 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":72:42)
#loc72 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":72:28)
#loc73 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":73:13)
#loc74 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":74:34)
#loc75 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":74:17)
#loc76 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":76:13)
#loc77 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":79:13)
#loc78 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":76:17)
#loc79 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":76:25)
#loc80 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":76:42)
#loc81 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":76:28)
#loc82 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":77:13)
#loc83 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":78:34)
#loc84 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":78:17)
#loc85 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":80:26)
#loc86 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":80:13)
#loc87 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":82:9)
#loc88 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":127:1)
#loc89 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":130:1)
#loc90 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":129:5)
#loc91 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":129:11)
#loc92 = loc("../../testcasesupport/std_thread.h":18:1)
#loc93 = loc("../../testcasesupport/std_thread.h":18:44)
#loc94 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":22:1)
#loc95 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":22:34)
#loc96 = loc("../../testcasesupport/std_thread.h":19:1)
#loc97 = loc("../../testcasesupport/std_thread.h":19:45)
#loc98 = loc("../../testcasesupport/std_thread.h":20:1)
#loc99 = loc("../../testcasesupport/std_thread.h":20:45)
#loc100 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":38:1)
#loc101 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":51:1)
#loc104 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":40:5)
#loc105 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":40:28)
#loc106 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":41:5)
#loc107 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":41:9)
#loc108 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":39:1)
#loc109 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":45:26)
#loc110 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":45:5)
#loc111 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":46:5)
#loc112 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":49:5)
#loc113 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":46:14)
#loc114 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":46:10)
#loc115 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":46:17)
#loc116 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":46:21)
#loc117 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":46:19)
#loc118 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":47:5)
#loc119 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":48:22)
#loc120 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":48:21)
#loc121 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":48:33)
#loc122 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":48:10)
#loc123 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":48:9)
#loc124 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":46:31)
#loc125 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":46:30)
#loc126 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":50:26)
#loc127 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":50:5)
#loc128 = loc("../../testcasesupport/std_thread.h":21:1)
#loc129 = loc("../../testcasesupport/std_thread.h":21:45)
#loc130 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":91:1)
#loc131 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":125:1)
#loc132 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":93:5)
#loc133 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":124:5)
#loc134 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":93:11)
#loc135 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":94:5)
#loc136 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":95:9)
#loc137 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":122:9)
#loc138 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":96:13)
#loc139 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":96:33)
#loc140 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":97:13)
#loc141 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":97:33)
#loc142 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":98:13)
#loc143 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":98:17)
#loc144 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":99:27)
#loc145 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":99:13)
#loc146 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":100:13)
#loc147 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":103:13)
#loc148 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":100:18)
#loc149 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":101:13)
#loc150 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":102:17)
#loc151 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":104:13)
#loc152 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":107:13)
#loc153 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":104:34)
#loc154 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":104:53)
#loc155 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":104:54)
#loc156 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":104:18)
#loc157 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":105:13)
#loc158 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":106:27)
#loc159 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":106:17)
#loc160 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":108:13)
#loc161 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":111:13)
#loc162 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":108:34)
#loc163 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":108:53)
#loc164 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":108:54)
#loc165 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":108:18)
#loc166 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":109:13)
#loc167 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":110:27)
#loc168 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":110:17)
#loc169 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":112:13)
#loc170 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":115:13)
#loc171 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":112:17)
#loc172 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":112:25)
#loc173 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":112:42)
#loc174 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":112:28)
#loc175 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":113:13)
#loc176 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":114:34)
#loc177 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":114:17)
#loc178 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":116:13)
#loc179 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":119:13)
#loc180 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":116:17)
#loc181 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":116:25)
#loc182 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":116:42)
#loc183 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":116:28)
#loc184 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":117:13)
#loc185 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":118:34)
#loc186 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":118:17)
#loc187 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":120:34)
#loc188 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":120:13)
#loc189 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":121:26)
#loc190 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":121:13)
#loc191 = loc("CWE366_Race_Condition_Within_Thread__int_byref_16.c":123:9)
#loc192 = loc(fused[#loc1, #loc2])
#loc193 = loc(fused[#loc3, #loc4])
#loc195 = loc(fused[#loc7, #loc8])
#loc196 = loc(fused[#loc9, #loc10])
#loc197 = loc(fused[#loc12, #loc13])
#loc198 = loc(fused[#loc15, #loc14])
#loc199 = loc(fused[#loc16, #loc17])
#loc200 = loc(fused[#loc19, #loc13])
#loc201 = loc(fused[#loc24, #loc22])
#loc202 = loc(fused[#loc26, #loc25])
#loc203 = loc(fused[#loc27, #loc28])
#loc204 = loc(fused[#loc29, #loc30])
#loc205 = loc(fused[#loc31, #loc32])
#loc206 = loc(fused[#loc33, #loc34])
#loc207 = loc(fused[#loc35, #loc36])
#loc208 = loc(fused[#loc38, #loc36])
#loc209 = loc(fused[#loc39, #loc40])
#loc210 = loc(fused[#loc41, #loc42])
#loc211 = loc(fused[#loc43, #loc44])
#loc212 = loc(fused[#loc45, #loc46])
#loc213 = loc(fused[#loc48, #loc47])
#loc214 = loc(fused[#loc49, #loc50])
#loc215 = loc(fused[#loc52, #loc53])
#loc216 = loc(fused[#loc55, #loc50])
#loc217 = loc(fused[#loc57, #loc56])
#loc218 = loc(fused[#loc58, #loc59])
#loc219 = loc(fused[#loc61, #loc62])
#loc220 = loc(fused[#loc64, #loc59])
#loc221 = loc(fused[#loc66, #loc65])
#loc222 = loc(fused[#loc67, #loc68])
#loc223 = loc(fused[#loc73, #loc68])
#loc224 = loc(fused[#loc76, #loc77])
#loc225 = loc(fused[#loc82, #loc77])
#loc226 = loc(fused[#loc88, #loc89])
#loc227 = loc(fused[#loc90, #loc91])
#loc228 = loc(fused[#loc92, #loc93])
#loc229 = loc(fused[#loc94, #loc95])
#loc230 = loc(fused[#loc96, #loc97])
#loc231 = loc(fused[#loc98, #loc99])
#loc232 = loc(fused[#loc100, #loc101])
#loc234 = loc(fused[#loc104, #loc105])
#loc235 = loc(fused[#loc106, #loc107])
#loc236 = loc(fused[#loc111, #loc112])
#loc237 = loc(fused[#loc114, #loc113])
#loc238 = loc(fused[#loc115, #loc116])
#loc239 = loc(fused[#loc118, #loc112])
#loc240 = loc(fused[#loc123, #loc121])
#loc241 = loc(fused[#loc125, #loc124])
#loc242 = loc(fused[#loc128, #loc129])
#loc243 = loc(fused[#loc130, #loc131])
#loc244 = loc(fused[#loc132, #loc133])
#loc245 = loc(fused[#loc135, #loc133])
#loc246 = loc(fused[#loc136, #loc137])
#loc247 = loc(fused[#loc138, #loc139])
#loc248 = loc(fused[#loc140, #loc141])
#loc249 = loc(fused[#loc142, #loc143])
#loc250 = loc(fused[#loc145, #loc144])
#loc251 = loc(fused[#loc146, #loc147])
#loc252 = loc(fused[#loc149, #loc147])
#loc253 = loc(fused[#loc151, #loc152])
#loc254 = loc(fused[#loc154, #loc155])
#loc255 = loc(fused[#loc157, #loc152])
#loc256 = loc(fused[#loc159, #loc158])
#loc257 = loc(fused[#loc160, #loc161])
#loc258 = loc(fused[#loc163, #loc164])
#loc259 = loc(fused[#loc166, #loc161])
#loc260 = loc(fused[#loc168, #loc167])
#loc261 = loc(fused[#loc169, #loc170])
#loc262 = loc(fused[#loc175, #loc170])
#loc263 = loc(fused[#loc178, #loc179])
#loc264 = loc(fused[#loc184, #loc179])
