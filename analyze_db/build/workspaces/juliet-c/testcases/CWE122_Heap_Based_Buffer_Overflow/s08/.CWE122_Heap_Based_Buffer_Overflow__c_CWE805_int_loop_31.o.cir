!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc125)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc126)
  cir.func private @printIntLine(!s32i) loc(#loc127)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc128)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc130)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc131)
    %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc132)
    %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc133)
    %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc134)
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc21)
    cir.store %5, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc135)
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc23)
    %7 = cir.const #cir.int<50> : !s32i loc(#loc24)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc24)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc136)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc137)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc23)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc138)
    cir.store %12, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc139)
    cir.br ^bb1 loc(#loc140)
  ^bb1:  // pred: ^bb0
    %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc31)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc32)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc32)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc141)
    cir.brcond %16 ^bb2, ^bb3 loc(#loc142)
  ^bb2:  // pred: ^bb1
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc34)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc36)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc34)
    cir.br ^bb3 loc(#loc30)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc30)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc143)
  ^bb5:  // pred: ^bb4
    %20 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc12)
    cir.store %20, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc130)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc14)
    cir.store %21, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc131)
    cir.br ^bb6 loc(#loc144)
  ^bb6:  // pred: ^bb5
    %22 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc132)
    cir.store %22, %2 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc132)
    cir.br ^bb7 loc(#loc145)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc146)
  ^bb8:  // pred: ^bb7
    %23 = cir.const #cir.int<0> : !s32i loc(#loc45)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc45)
    cir.store %24, %3 : !u64i, !cir.ptr<!u64i> loc(#loc147)
    cir.br ^bb9 loc(#loc146)
  ^bb9:  // 2 preds: ^bb8, ^bb13
    %25 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc47)
    %26 = cir.const #cir.int<100> : !s32i loc(#loc48)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc48)
    %28 = cir.cmp(lt, %25, %27) : !u64i, !cir.bool loc(#loc148)
    cir.brcond %28 ^bb10, ^bb14 loc(#loc49)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc149)
  ^bb11:  // pred: ^bb10
    %29 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc51)
    %30 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc52)
    %31 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %29 : !u64i), !cir.ptr<!s32i> loc(#loc52)
    %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
    %34 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc54)
    %35 = cir.ptr_stride(%33 : !cir.ptr<!s32i>, %34 : !u64i), !cir.ptr<!s32i> loc(#loc55)
    cir.store %32, %35 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    cir.br ^bb12 loc(#loc44)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc44)
  ^bb13:  // pred: ^bb12
    %36 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc57)
    %37 = cir.unary(inc, %36) : !u64i, !u64i loc(#loc58)
    cir.store %37, %3 : !u64i, !cir.ptr<!u64i> loc(#loc151)
    cir.br ^bb9 loc(#loc146)
  ^bb14:  // pred: ^bb9
    cir.br ^bb15 loc(#loc44)
  ^bb15:  // pred: ^bb14
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc59)
    %39 = cir.const #cir.int<0> : !s32i loc(#loc60)
    %40 = cir.ptr_stride(%38 : !cir.ptr<!s32i>, %39 : !s32i), !cir.ptr<!s32i> loc(#loc61)
    %41 = cir.load %40 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    cir.call @printIntLine(%41) : (!s32i) -> () loc(#loc62)
    %42 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc63)
    %43 = cir.cast(bitcast, %42 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc63)
    cir.call @free(%43) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc64)
    cir.br ^bb16 loc(#loc42)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc40)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc38)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc10)
  } loc(#loc129)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc153)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc67)
    cir.return loc(#loc66)
  } loc(#loc152)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc155)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc156)
    %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc157)
    %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc158)
    %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc159)
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc81)
    cir.store %5, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc160)
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc83)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc84)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc84)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc161)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc162)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc83)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc163)
    cir.store %12, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc164)
    cir.br ^bb1 loc(#loc165)
  ^bb1:  // pred: ^bb0
    %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc91)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc92)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc92)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc166)
    cir.brcond %16 ^bb2, ^bb3 loc(#loc167)
  ^bb2:  // pred: ^bb1
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc94)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc95)
    %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc96)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc94)
    cir.br ^bb3 loc(#loc90)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc90)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc168)
  ^bb5:  // pred: ^bb4
    %20 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc72)
    cir.store %20, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc155)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc74)
    cir.store %21, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc156)
    cir.br ^bb6 loc(#loc169)
  ^bb6:  // pred: ^bb5
    %22 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc157)
    cir.store %22, %2 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc157)
    cir.br ^bb7 loc(#loc170)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc171)
  ^bb8:  // pred: ^bb7
    %23 = cir.const #cir.int<0> : !s32i loc(#loc105)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc105)
    cir.store %24, %3 : !u64i, !cir.ptr<!u64i> loc(#loc172)
    cir.br ^bb9 loc(#loc171)
  ^bb9:  // 2 preds: ^bb8, ^bb13
    %25 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc107)
    %26 = cir.const #cir.int<100> : !s32i loc(#loc108)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc108)
    %28 = cir.cmp(lt, %25, %27) : !u64i, !cir.bool loc(#loc173)
    cir.brcond %28 ^bb10, ^bb14 loc(#loc109)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc174)
  ^bb11:  // pred: ^bb10
    %29 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc111)
    %30 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc112)
    %31 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %29 : !u64i), !cir.ptr<!s32i> loc(#loc112)
    %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc113)
    %34 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc114)
    %35 = cir.ptr_stride(%33 : !cir.ptr<!s32i>, %34 : !u64i), !cir.ptr<!s32i> loc(#loc115)
    cir.store %32, %35 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    cir.br ^bb12 loc(#loc104)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc104)
  ^bb13:  // pred: ^bb12
    %36 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc117)
    %37 = cir.unary(inc, %36) : !u64i, !u64i loc(#loc118)
    cir.store %37, %3 : !u64i, !cir.ptr<!u64i> loc(#loc176)
    cir.br ^bb9 loc(#loc171)
  ^bb14:  // pred: ^bb9
    cir.br ^bb15 loc(#loc104)
  ^bb15:  // pred: ^bb14
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc119)
    %39 = cir.const #cir.int<0> : !s32i loc(#loc120)
    %40 = cir.ptr_stride(%38 : !cir.ptr<!s32i>, %39 : !s32i), !cir.ptr<!s32i> loc(#loc121)
    %41 = cir.load %40 : !cir.ptr<!s32i>, !s32i loc(#loc119)
    cir.call @printIntLine(%41) : (!s32i) -> () loc(#loc122)
    %42 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc123)
    %43 = cir.cast(bitcast, %42 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc123)
    cir.call @free(%43) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc124)
    cir.br ^bb16 loc(#loc102)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc100)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc98)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc70)
  } loc(#loc154)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":45:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":29:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":29:26)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":30:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":30:22)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":32:13)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":32:33)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":34:17)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":34:24)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":23:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":23:11)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":24:12)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":24:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":26:19)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":26:26)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":26:29)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":26:39)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":26:40)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":26:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":27:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":27:33)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":27:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":27:17)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":27:23)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":27:24)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":27:30)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":27:29)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":28:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":44:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":31:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":43:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":33:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":42:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":36:17)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":39:17)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":36:26)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":36:22)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":36:29)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":36:33)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":36:31)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":37:17)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":38:38)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":38:31)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":38:21)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":38:26)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":38:27)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":38:39)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":36:39)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":36:38)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":40:30)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":40:35)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":40:36)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":40:17)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":41:22)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":41:17)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":78:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":81:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":80:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":80:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":52:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":76:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":60:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":60:26)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":61:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":61:22)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":63:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":63:33)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":65:17)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":65:24)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":54:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":54:11)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":55:12)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":55:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":57:19)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":57:26)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":57:30)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":57:40)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":57:41)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":57:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":58:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":58:33)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":58:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":58:17)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":58:23)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":58:24)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":58:30)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":58:29)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":59:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":75:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":62:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":74:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":64:13)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":73:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":67:17)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":70:17)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":67:26)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":67:22)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":67:29)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":67:33)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":67:31)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":68:17)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":69:38)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":69:31)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":69:21)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":69:26)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":69:27)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":69:39)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":67:39)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":67:38)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":71:30)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":71:35)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":71:36)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":71:17)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":72:22)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c":72:17)
#loc125 = loc(fused[#loc1, #loc2])
#loc126 = loc(fused[#loc3, #loc4])
#loc127 = loc(fused[#loc5, #loc6])
#loc128 = loc(fused[#loc7, #loc8])
#loc129 = loc(fused[#loc9, #loc10])
#loc130 = loc(fused[#loc11, #loc12])
#loc131 = loc(fused[#loc13, #loc14])
#loc132 = loc(fused[#loc15, #loc16])
#loc133 = loc(fused[#loc17, #loc18])
#loc134 = loc(fused[#loc19, #loc20])
#loc135 = loc(fused[#loc22, #loc21])
#loc136 = loc(fused[#loc25, #loc26])
#loc137 = loc(fused[#loc24, #loc26])
#loc138 = loc(fused[#loc23, #loc27])
#loc139 = loc(fused[#loc28, #loc27])
#loc140 = loc(fused[#loc29, #loc30])
#loc141 = loc(fused[#loc31, #loc32])
#loc142 = loc(fused[#loc33, #loc30])
#loc143 = loc(fused[#loc37, #loc38])
#loc144 = loc(fused[#loc39, #loc40])
#loc145 = loc(fused[#loc41, #loc42])
#loc146 = loc(fused[#loc43, #loc44])
#loc147 = loc(fused[#loc46, #loc45])
#loc148 = loc(fused[#loc47, #loc48])
#loc149 = loc(fused[#loc50, #loc44])
#loc150 = loc(fused[#loc53, #loc56])
#loc151 = loc(fused[#loc58, #loc57])
#loc152 = loc(fused[#loc65, #loc66])
#loc153 = loc(fused[#loc67, #loc68])
#loc154 = loc(fused[#loc69, #loc70])
#loc155 = loc(fused[#loc71, #loc72])
#loc156 = loc(fused[#loc73, #loc74])
#loc157 = loc(fused[#loc75, #loc76])
#loc158 = loc(fused[#loc77, #loc78])
#loc159 = loc(fused[#loc79, #loc80])
#loc160 = loc(fused[#loc82, #loc81])
#loc161 = loc(fused[#loc85, #loc86])
#loc162 = loc(fused[#loc84, #loc86])
#loc163 = loc(fused[#loc83, #loc87])
#loc164 = loc(fused[#loc88, #loc87])
#loc165 = loc(fused[#loc89, #loc90])
#loc166 = loc(fused[#loc91, #loc92])
#loc167 = loc(fused[#loc93, #loc90])
#loc168 = loc(fused[#loc97, #loc98])
#loc169 = loc(fused[#loc99, #loc100])
#loc170 = loc(fused[#loc101, #loc102])
#loc171 = loc(fused[#loc103, #loc104])
#loc172 = loc(fused[#loc106, #loc105])
#loc173 = loc(fused[#loc107, #loc108])
#loc174 = loc(fused[#loc110, #loc104])
#loc175 = loc(fused[#loc113, #loc116])
#loc176 = loc(fused[#loc118, #loc117])
