!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":44:77)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":44:81)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":79:81)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":79:85)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":110:81)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":110:85)
#true = #cir.bool<true> : !cir.bool
#loc219 = loc(fused[#loc14, #loc15])
#loc245 = loc(fused[#loc79, #loc80])
#loc271 = loc(fused[#loc146, #loc147])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc213)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc214)
  cir.func private @printIntLine(!s32i) loc(#loc215)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc216)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc9)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc217)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c_badSink(%arg0: !s32i loc(fused[#loc14, #loc15])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc219)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc16)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc221)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc222)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc23)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc24)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc24)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc223)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc224)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc23)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc225)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc222)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc29)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc30)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc227)
        cir.if %16 {
          %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc32)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc33)
          %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc34)
          cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
        } loc(#loc228)
      } loc(#loc226)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc37)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc230)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc39)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc40)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc231)
          cir.condition(%16) loc(#loc41)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc43)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc45)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc46)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc233)
          } loc(#loc232)
          cir.yield loc(#loc36)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc47)
          %15 = cir.unary(inc, %14) nsw : !s32i, !s32i loc(#loc48)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc234)
          cir.yield loc(#loc229)
        } loc(#loc229)
      } loc(#loc229)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc52)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !cir.bool loc(#loc236)
        cir.if %15 {
          %16 = cir.const #cir.int<1> : !s32i loc(#loc56)
          %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc57)
          %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc58)
          %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc59)
          cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc238)
          cir.scope {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc62)
            cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc240)
            cir.for : cond {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc64)
              %22 = cir.const #cir.int<10> : !s32i loc(#loc65)
              %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc241)
              cir.condition(%23) loc(#loc66)
            } body {
              cir.scope {
                %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc68)
                %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc69)
                %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc70)
                %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc68)
                cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc71)
              } loc(#loc242)
              cir.yield loc(#loc61)
            } step {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc72)
              %22 = cir.unary(inc, %21) nsw : !s32i, !s32i loc(#loc73)
              cir.store %22, %1 : !s32i, !cir.ptr<!s32i> loc(#loc243)
              cir.yield loc(#loc239)
            } loc(#loc239)
          } loc(#loc239)
        } else {
          %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc9)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc74)
        } loc(#loc237)
      } loc(#loc235)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc75)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc76)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc76)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc75)
    } loc(#loc220)
    cir.return loc(#loc13)
  } loc(#loc218)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c_goodG2BSink(%arg0: !s32i loc(fused[#loc79, #loc80])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc245)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc247)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc248)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc88)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc89)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc89)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc249)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc250)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc88)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc251)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc248)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc94)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc95)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc95)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc253)
        cir.if %16 {
          %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc97)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc98)
          %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc99)
          cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc97)
        } loc(#loc254)
      } loc(#loc252)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc102)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc256)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc104)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc105)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc257)
          cir.condition(%16) loc(#loc106)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc108)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc109)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc110)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc111)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc259)
          } loc(#loc258)
          cir.yield loc(#loc101)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc112)
          %15 = cir.unary(inc, %14) nsw : !s32i, !s32i loc(#loc113)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc260)
          cir.yield loc(#loc255)
        } loc(#loc255)
      } loc(#loc255)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc117)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !cir.bool loc(#loc262)
        cir.if %15 {
          %16 = cir.const #cir.int<1> : !s32i loc(#loc121)
          %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc122)
          %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
          %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc124)
          cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc264)
          cir.scope {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc127)
            cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc266)
            cir.for : cond {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc129)
              %22 = cir.const #cir.int<10> : !s32i loc(#loc130)
              %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc267)
              cir.condition(%23) loc(#loc131)
            } body {
              cir.scope {
                %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc133)
                %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc134)
                %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc135)
                %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc133)
                cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc136)
              } loc(#loc268)
              cir.yield loc(#loc126)
            } step {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc137)
              %22 = cir.unary(inc, %21) nsw : !s32i, !s32i loc(#loc138)
              cir.store %22, %1 : !s32i, !cir.ptr<!s32i> loc(#loc269)
              cir.yield loc(#loc265)
            } loc(#loc265)
          } loc(#loc265)
        } else {
          %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc139)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc139)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc140)
        } loc(#loc263)
      } loc(#loc261)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc141)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc142)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc142)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc141)
    } loc(#loc246)
    cir.return loc(#loc78)
  } loc(#loc244)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc143)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c_goodB2GSink(%arg0: !s32i loc(fused[#loc146, #loc147])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc271)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc148)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc273)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc274)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc155)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc156)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc156)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc275)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc276)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc155)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc277)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc274)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc161)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc162)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc162)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc279)
        cir.if %16 {
          %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc164)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc165)
          %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc166)
          cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc164)
        } loc(#loc280)
      } loc(#loc278)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc169)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc282)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc171)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc172)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc283)
          cir.condition(%16) loc(#loc173)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc175)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc176)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc177)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc178)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc285)
          } loc(#loc284)
          cir.yield loc(#loc168)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc179)
          %15 = cir.unary(inc, %14) nsw : !s32i, !s32i loc(#loc180)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc286)
          cir.yield loc(#loc281)
        } loc(#loc281)
      } loc(#loc281)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc183)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc184)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !cir.bool loc(#loc288)
        %16 = cir.ternary(%15, true {
          %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc186)
          %18 = cir.const #cir.int<10> : !s32i loc(#loc187)
          %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc289)
          %20 = cir.ternary(%19, true {
            %21 = cir.const #true loc(#loc185)
            cir.yield %21 : !cir.bool loc(#loc185)
          }, false {
            %21 = cir.const #false loc(#loc185)
            cir.yield %21 : !cir.bool loc(#loc185)
          }) : (!cir.bool) -> !cir.bool loc(#loc185)
          cir.yield %20 : !cir.bool loc(#loc185)
        }, false {
          %17 = cir.const #false loc(#loc185)
          cir.yield %17 : !cir.bool loc(#loc185)
        }) : (!cir.bool) -> !cir.bool loc(#loc185)
        cir.if %16 {
          %17 = cir.const #cir.int<1> : !s32i loc(#loc192)
          %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc193)
          %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc194)
          %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc195)
          cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc291)
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc198)
            cir.store %21, %1 : !s32i, !cir.ptr<!s32i> loc(#loc293)
            cir.for : cond {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc200)
              %23 = cir.const #cir.int<10> : !s32i loc(#loc201)
              %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc294)
              cir.condition(%24) loc(#loc202)
            } body {
              cir.scope {
                %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc204)
                %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc205)
                %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc206)
                %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc204)
                cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc207)
              } loc(#loc295)
              cir.yield loc(#loc197)
            } step {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc208)
              %23 = cir.unary(inc, %22) nsw : !s32i, !s32i loc(#loc209)
              cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc296)
              cir.yield loc(#loc292)
            } loc(#loc292)
          } loc(#loc292)
        } else {
          %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc143)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc143)
          cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc210)
        } loc(#loc290)
      } loc(#loc287)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc211)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc212)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc212)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc211)
    } loc(#loc272)
    cir.return loc(#loc145)
  } loc(#loc270)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":68:23)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":44:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":72:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":45:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":46:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":71:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":47:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":47:13)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":48:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":48:54)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":48:31)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":48:38)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":48:43)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":48:53)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":49:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":49:39)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":49:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":49:23)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":49:29)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":49:30)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":49:36)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":49:35)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":51:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":54:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":51:18)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":51:14)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":51:21)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":51:25)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":51:23)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":52:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":53:25)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":53:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":53:20)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":53:21)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":51:30)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":51:29)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":57:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":69:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":57:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":57:21)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":58:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":65:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":67:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":59:28)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":59:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":59:20)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":59:24)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":61:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":64:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":61:21)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":61:17)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":61:24)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":61:28)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":61:26)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":62:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":63:30)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":63:37)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":63:38)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":63:17)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":61:33)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":61:32)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":68:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":70:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":70:14)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":79:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":107:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":80:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":81:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":106:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":82:9)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":82:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":83:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":83:54)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":83:31)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":83:38)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":83:43)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":83:53)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":84:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":84:39)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":84:13)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":84:23)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":84:29)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":84:30)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":84:36)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":84:35)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":86:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":89:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":86:18)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":86:14)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":86:21)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":86:25)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":86:23)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":87:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":88:25)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":88:13)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":88:20)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":88:21)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":86:30)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":86:29)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":92:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":104:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":92:13)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":92:21)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":93:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":100:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":102:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":94:28)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":94:13)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":94:20)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":94:24)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":96:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":99:13)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":96:21)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":96:17)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":96:24)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":96:28)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":96:26)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":97:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":98:30)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":98:37)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":98:38)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":98:17)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":96:33)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":96:32)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":103:23)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":103:13)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":105:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":105:14)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":133:23)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":110:1)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":137:1)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":111:1)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":112:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":136:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":113:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":113:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":114:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":114:54)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":114:31)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":114:38)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":114:43)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":114:53)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":115:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":115:39)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":115:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":115:23)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":115:29)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":115:30)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":115:36)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":115:35)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":117:9)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":120:9)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":117:18)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":117:14)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":117:21)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":117:25)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":117:23)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":118:9)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":119:25)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":119:13)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":119:20)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":119:21)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":117:30)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":117:29)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":122:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":134:9)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":122:13)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":122:21)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":122:23)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":122:26)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":122:34)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":122:36)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":123:9)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":130:9)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":132:9)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":124:28)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":124:13)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":124:20)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":124:24)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":126:13)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":129:13)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":126:21)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":126:17)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":126:24)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":126:28)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":126:26)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":127:13)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":128:30)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":128:37)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":128:38)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":128:17)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":126:33)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":126:32)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":133:13)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":135:9)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c":135:14)
#loc213 = loc(fused[#loc1, #loc2])
#loc214 = loc(fused[#loc3, #loc4])
#loc215 = loc(fused[#loc5, #loc6])
#loc216 = loc(fused[#loc7, #loc8])
#loc217 = loc(fused[#loc10, #loc11])
#loc218 = loc(fused[#loc12, #loc13])
#loc220 = loc(fused[#loc17, #loc18])
#loc221 = loc(fused[#loc19, #loc20])
#loc222 = loc(fused[#loc21, #loc22])
#loc223 = loc(fused[#loc25, #loc26])
#loc224 = loc(fused[#loc24, #loc26])
#loc225 = loc(fused[#loc23, #loc22])
#loc226 = loc(fused[#loc27, #loc28])
#loc227 = loc(fused[#loc29, #loc30])
#loc228 = loc(fused[#loc31, #loc28])
#loc229 = loc(fused[#loc35, #loc36])
#loc230 = loc(fused[#loc38, #loc37])
#loc231 = loc(fused[#loc39, #loc40])
#loc232 = loc(fused[#loc42, #loc36])
#loc233 = loc(fused[#loc44, #loc43])
#loc234 = loc(fused[#loc48, #loc47])
#loc235 = loc(fused[#loc49, #loc50])
#loc236 = loc(fused[#loc51, #loc52])
#loc237 = loc(fused[#loc53, #loc54, #loc55, #loc50])
#loc238 = loc(fused[#loc57, #loc56])
#loc239 = loc(fused[#loc60, #loc61])
#loc240 = loc(fused[#loc63, #loc62])
#loc241 = loc(fused[#loc64, #loc65])
#loc242 = loc(fused[#loc67, #loc61])
#loc243 = loc(fused[#loc73, #loc72])
#loc244 = loc(fused[#loc77, #loc78])
#loc246 = loc(fused[#loc82, #loc83])
#loc247 = loc(fused[#loc84, #loc85])
#loc248 = loc(fused[#loc86, #loc87])
#loc249 = loc(fused[#loc90, #loc91])
#loc250 = loc(fused[#loc89, #loc91])
#loc251 = loc(fused[#loc88, #loc87])
#loc252 = loc(fused[#loc92, #loc93])
#loc253 = loc(fused[#loc94, #loc95])
#loc254 = loc(fused[#loc96, #loc93])
#loc255 = loc(fused[#loc100, #loc101])
#loc256 = loc(fused[#loc103, #loc102])
#loc257 = loc(fused[#loc104, #loc105])
#loc258 = loc(fused[#loc107, #loc101])
#loc259 = loc(fused[#loc109, #loc108])
#loc260 = loc(fused[#loc113, #loc112])
#loc261 = loc(fused[#loc114, #loc115])
#loc262 = loc(fused[#loc116, #loc117])
#loc263 = loc(fused[#loc118, #loc119, #loc120, #loc115])
#loc264 = loc(fused[#loc122, #loc121])
#loc265 = loc(fused[#loc125, #loc126])
#loc266 = loc(fused[#loc128, #loc127])
#loc267 = loc(fused[#loc129, #loc130])
#loc268 = loc(fused[#loc132, #loc126])
#loc269 = loc(fused[#loc138, #loc137])
#loc270 = loc(fused[#loc144, #loc145])
#loc272 = loc(fused[#loc149, #loc150])
#loc273 = loc(fused[#loc151, #loc152])
#loc274 = loc(fused[#loc153, #loc154])
#loc275 = loc(fused[#loc157, #loc158])
#loc276 = loc(fused[#loc156, #loc158])
#loc277 = loc(fused[#loc155, #loc154])
#loc278 = loc(fused[#loc159, #loc160])
#loc279 = loc(fused[#loc161, #loc162])
#loc280 = loc(fused[#loc163, #loc160])
#loc281 = loc(fused[#loc167, #loc168])
#loc282 = loc(fused[#loc170, #loc169])
#loc283 = loc(fused[#loc171, #loc172])
#loc284 = loc(fused[#loc174, #loc168])
#loc285 = loc(fused[#loc176, #loc175])
#loc286 = loc(fused[#loc180, #loc179])
#loc287 = loc(fused[#loc181, #loc182])
#loc288 = loc(fused[#loc183, #loc184])
#loc289 = loc(fused[#loc186, #loc188])
#loc290 = loc(fused[#loc189, #loc190, #loc191, #loc182])
#loc291 = loc(fused[#loc193, #loc192])
#loc292 = loc(fused[#loc196, #loc197])
#loc293 = loc(fused[#loc199, #loc198])
#loc294 = loc(fused[#loc200, #loc201])
#loc295 = loc(fused[#loc203, #loc197])
#loc296 = loc(fused[#loc209, #loc208])
