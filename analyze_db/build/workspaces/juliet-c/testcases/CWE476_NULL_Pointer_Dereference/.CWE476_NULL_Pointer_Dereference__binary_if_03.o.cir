!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__twoIntsStruct = !cir.record<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE476_NULL_Pointer_Dereference/CWE476_NULL_Pointer_Dereference__binary_if_03.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"intOne == 5\00" : !cir.array<!s8i x 12>> : !cir.array<!s8i x 12> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE476_NULL_Pointer_Dereference__binary_if_03_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc8)
      %1 = cir.const #cir.int<5> : !s32i loc(#loc9)
      %2 = cir.cmp(eq, %0, %1) : !s32i, !cir.bool loc(#loc85)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["twoIntsStructPointer", init] {alignment = 8 : i64} loc(#loc88)
          %4 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc14)
          cir.store %4, %3 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc88)
          cir.scope {
            %5 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc17)
            %6 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc18)
            %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc18)
            %8 = cir.cmp(ne, %5, %7) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc90)
            %9 = cir.cast(bool_to_int, %8 : !cir.bool), !s32i loc(#loc90)
            %10 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc19)
            %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc20)
            %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc21)
            %13 = cir.const #cir.int<5> : !s32i loc(#loc22)
            %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc91)
            %15 = cir.cast(bool_to_int, %14 : !cir.bool), !s32i loc(#loc91)
            %16 = cir.binop(and, %9, %15) : !s32i loc(#loc92)
            %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc25)
            cir.if %17 {
              %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 12>> loc(#loc3)
              %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 12>>), !cir.ptr<!s8i> loc(#loc3)
              cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc27)
            } loc(#loc93)
          } loc(#loc89)
        } loc(#loc87)
      } loc(#loc86)
    } loc(#loc84)
    cir.return loc(#loc5)
  } loc(#loc83)
  cir.func no_proto @CWE476_NULL_Pointer_Dereference__binary_if_03_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc95)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc96)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc94)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc34)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc39)
      %1 = cir.const #cir.int<5> : !s32i loc(#loc40)
      %2 = cir.cmp(ne, %0, %1) : !s32i, !cir.bool loc(#loc99)
      cir.if %2 {
        %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc34)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc34)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc44)
      } else {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["twoIntsStructPointer", init] {alignment = 8 : i64} loc(#loc102)
          %4 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc48)
          cir.store %4, %3 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc102)
          cir.scope {
            %5 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc51)
            %6 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc52)
            %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc52)
            %8 = cir.cmp(ne, %5, %7) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc104)
            %9 = cir.ternary(%8, true {
              %10 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc54)
              %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc20)
              %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc55)
              %13 = cir.const #cir.int<5> : !s32i loc(#loc56)
              %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc105)
              %15 = cir.ternary(%14, true {
                %16 = cir.const #true loc(#loc53)
                cir.yield %16 : !cir.bool loc(#loc53)
              }, false {
                %16 = cir.const #false loc(#loc53)
                cir.yield %16 : !cir.bool loc(#loc53)
              }) : (!cir.bool) -> !cir.bool loc(#loc53)
              cir.yield %15 : !cir.bool loc(#loc53)
            }, false {
              %10 = cir.const #false loc(#loc53)
              cir.yield %10 : !cir.bool loc(#loc53)
            }) : (!cir.bool) -> !cir.bool loc(#loc53)
            cir.if %9 {
              %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 12>> loc(#loc58)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 12>>), !cir.ptr<!s8i> loc(#loc58)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc59)
            } loc(#loc106)
          } loc(#loc103)
        } loc(#loc101)
      } loc(#loc100)
    } loc(#loc98)
    cir.return loc(#loc36)
  } loc(#loc97)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc64)
      %1 = cir.const #cir.int<5> : !s32i loc(#loc65)
      %2 = cir.cmp(eq, %0, %1) : !s32i, !cir.bool loc(#loc109)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["twoIntsStructPointer", init] {alignment = 8 : i64} loc(#loc112)
          %4 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc70)
          cir.store %4, %3 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc112)
          cir.scope {
            %5 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc73)
            %6 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc74)
            %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc74)
            %8 = cir.cmp(ne, %5, %7) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc114)
            %9 = cir.ternary(%8, true {
              %10 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc76)
              %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc20)
              %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc77)
              %13 = cir.const #cir.int<5> : !s32i loc(#loc78)
              %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc115)
              %15 = cir.ternary(%14, true {
                %16 = cir.const #true loc(#loc75)
                cir.yield %16 : !cir.bool loc(#loc75)
              }, false {
                %16 = cir.const #false loc(#loc75)
                cir.yield %16 : !cir.bool loc(#loc75)
              }) : (!cir.bool) -> !cir.bool loc(#loc75)
              cir.yield %15 : !cir.bool loc(#loc75)
            }, false {
              %10 = cir.const #false loc(#loc75)
              cir.yield %10 : !cir.bool loc(#loc75)
            }) : (!cir.bool) -> !cir.bool loc(#loc75)
            cir.if %9 {
              %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 12>> loc(#loc80)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 12>>), !cir.ptr<!s8i> loc(#loc80)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc81)
            } loc(#loc116)
          } loc(#loc113)
        } loc(#loc111)
      } loc(#loc110)
    } loc(#loc108)
    cir.return loc(#loc61)
  } loc(#loc107)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE476_NULL_Pointer_Dereference/CWE476_NULL_Pointer_Dereference__binary_if_03.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":30:27)
#loc4 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":20:1)
#loc5 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":34:1)
#loc6 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":22:5)
#loc7 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":33:5)
#loc8 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":22:8)
#loc9 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":22:11)
#loc10 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":23:5)
#loc11 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":24:9)
#loc12 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":32:9)
#loc13 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":25:13)
#loc14 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":25:51)
#loc15 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":28:13)
#loc16 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":31:13)
#loc17 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":28:18)
#loc18 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":28:42)
#loc19 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":28:51)
#loc20 = loc("../../testcasesupport/std_testcase.h":98:9)
#loc21 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":28:73)
#loc22 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":28:83)
#loc23 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":28:17)
#loc24 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":28:84)
#loc25 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":28:48)
#loc26 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":29:13)
#loc27 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":30:17)
#loc28 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":79:1)
#loc29 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":83:1)
#loc30 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":81:5)
#loc31 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":81:11)
#loc32 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":82:5)
#loc33 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":82:11)
#loc34 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":46:19)
#loc35 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":41:1)
#loc36 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":60:1)
#loc37 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":43:5)
#loc38 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":59:5)
#loc39 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":43:8)
#loc40 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":43:11)
#loc41 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":44:5)
#loc42 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":47:5)
#loc43 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":49:5)
#loc44 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":46:9)
#loc45 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":50:9)
#loc46 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":58:9)
#loc47 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":51:13)
#loc48 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":51:51)
#loc49 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":54:13)
#loc50 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":57:13)
#loc51 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":54:18)
#loc52 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":54:42)
#loc53 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":54:48)
#loc54 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":54:52)
#loc55 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":54:74)
#loc56 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":54:84)
#loc57 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":55:13)
#loc58 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":56:27)
#loc59 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":56:17)
#loc60 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":63:1)
#loc61 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":77:1)
#loc62 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":65:5)
#loc63 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":76:5)
#loc64 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":65:8)
#loc65 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":65:11)
#loc66 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":66:5)
#loc67 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":67:9)
#loc68 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":75:9)
#loc69 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":68:13)
#loc70 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":68:51)
#loc71 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":71:13)
#loc72 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":74:13)
#loc73 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":71:18)
#loc74 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":71:42)
#loc75 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":71:48)
#loc76 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":71:52)
#loc77 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":71:74)
#loc78 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":71:84)
#loc79 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":72:13)
#loc80 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":73:27)
#loc81 = loc("CWE476_NULL_Pointer_Dereference__binary_if_03.c":73:17)
#loc82 = loc(fused[#loc1, #loc2])
#loc83 = loc(fused[#loc4, #loc5])
#loc84 = loc(fused[#loc6, #loc7])
#loc85 = loc(fused[#loc8, #loc9])
#loc86 = loc(fused[#loc10, #loc7])
#loc87 = loc(fused[#loc11, #loc12])
#loc88 = loc(fused[#loc13, #loc14])
#loc89 = loc(fused[#loc15, #loc16])
#loc90 = loc(fused[#loc17, #loc18])
#loc91 = loc(fused[#loc19, #loc22])
#loc92 = loc(fused[#loc23, #loc24])
#loc93 = loc(fused[#loc26, #loc16])
#loc94 = loc(fused[#loc28, #loc29])
#loc95 = loc(fused[#loc30, #loc31])
#loc96 = loc(fused[#loc32, #loc33])
#loc97 = loc(fused[#loc35, #loc36])
#loc98 = loc(fused[#loc37, #loc38])
#loc99 = loc(fused[#loc39, #loc40])
#loc100 = loc(fused[#loc41, #loc42, #loc43, #loc38])
#loc101 = loc(fused[#loc45, #loc46])
#loc102 = loc(fused[#loc47, #loc48])
#loc103 = loc(fused[#loc49, #loc50])
#loc104 = loc(fused[#loc51, #loc52])
#loc105 = loc(fused[#loc54, #loc56])
#loc106 = loc(fused[#loc57, #loc50])
#loc107 = loc(fused[#loc60, #loc61])
#loc108 = loc(fused[#loc62, #loc63])
#loc109 = loc(fused[#loc64, #loc65])
#loc110 = loc(fused[#loc66, #loc63])
#loc111 = loc(fused[#loc67, #loc68])
#loc112 = loc(fused[#loc69, #loc70])
#loc113 = loc(fused[#loc71, #loc72])
#loc114 = loc(fused[#loc73, #loc74])
#loc115 = loc(fused[#loc76, #loc78])
#loc116 = loc(fused[#loc79, #loc72])
