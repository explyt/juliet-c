!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":31:16)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":82:16)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":100:23)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":128:16)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":142:23)
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc305)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc306)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc307)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc309)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc310)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc311)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc18)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc312)
    cir.br ^bb1 loc(#loc313)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<6> : !s32i loc(#loc22)
    cir.br ^bb2 loc(#loc20)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %5 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc20)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc23)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc24)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %9 ^bb5, ^bb6 loc(#loc24)
  ^bb5:  // pred: ^bb4
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc24)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc24)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc24)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc24)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc24)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc24)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc24)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc24)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc24)
    cir.br ^bb7(%21 : !u32i) loc(#loc24)
  ^bb6:  // pred: ^bb4
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc24)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc24)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc24)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc24)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc24)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc24)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc24)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc24)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc24)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc24)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc24)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc24)
    cir.br ^bb7(%37 : !u32i) loc(#loc24)
  ^bb7(%38: !u32i loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":31:16)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc24)
  ^bb8:  // pred: ^bb7
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc24)
    cir.store %39, %2 : !s32i, !cir.ptr<!s32i> loc(#loc314)
    cir.br ^bb10 loc(#loc26)
  ^bb9:  // pred: ^bb2
    %40 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
    %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc27)
    cir.br ^bb10 loc(#loc28)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc21)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc315)
  ^bb12:  // pred: ^bb11
    %42 = cir.const #cir.int<7> : !s32i loc(#loc31)
    cir.br ^bb13 loc(#loc29)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %42 : !s32i, ^bb31 [
      7: ^bb15
    ] loc(#loc29)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc32)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc316)
  ^bb16:  // pred: ^bb15
    %43 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc310)
    cir.store %43, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc310)
    cir.br ^bb17 loc(#loc317)
  ^bb17:  // pred: ^bb16
    %44 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc37)
    %45 = cir.const #cir.int<0> : !s32i loc(#loc38)
    %46 = cir.cmp(ge, %44, %45) : !s32i, !cir.bool loc(#loc318)
    cir.brcond %46 ^bb18, ^bb27 loc(#loc319)
  ^bb18:  // pred: ^bb17
    %47 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %48 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc43)
    %49 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc44)
    %50 = cir.ptr_stride(%49 : !cir.ptr<!s32i>, %48 : !s32i), !cir.ptr<!s32i> loc(#loc44)
    cir.store %47, %50 : !s32i, !cir.ptr<!s32i> loc(#loc320)
    cir.br ^bb19 loc(#loc321)
  ^bb19:  // pred: ^bb18
    %51 = cir.const #cir.int<0> : !s32i loc(#loc47)
    cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc322)
    cir.br ^bb20 loc(#loc321)
  ^bb20:  // 2 preds: ^bb19, ^bb24
    %52 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    %53 = cir.const #cir.int<10> : !s32i loc(#loc50)
    %54 = cir.cmp(lt, %52, %53) : !s32i, !cir.bool loc(#loc323)
    cir.brcond %54 ^bb21, ^bb25 loc(#loc51)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc324)
  ^bb22:  // pred: ^bb21
    %55 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    %56 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc54)
    %57 = cir.ptr_stride(%56 : !cir.ptr<!s32i>, %55 : !s32i), !cir.ptr<!s32i> loc(#loc54)
    %58 = cir.load %57 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    cir.call @printIntLine(%58) : (!s32i) -> () loc(#loc55)
    cir.br ^bb23 loc(#loc46)
  ^bb23:  // pred: ^bb22
    cir.br ^bb24 loc(#loc46)
  ^bb24:  // pred: ^bb23
    %59 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
    %60 = cir.unary(inc, %59) nsw : !s32i, !s32i loc(#loc57)
    cir.store %60, %0 : !s32i, !cir.ptr<!s32i> loc(#loc325)
    cir.br ^bb20 loc(#loc321)
  ^bb25:  // pred: ^bb20
    cir.br ^bb26 loc(#loc46)
  ^bb26:  // pred: ^bb25
    cir.br ^bb28 loc(#loc40)
  ^bb27:  // pred: ^bb17
    %61 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc8)
    %62 = cir.cast(array_to_ptrdecay, %61 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc8)
    cir.call @printLine(%62) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    cir.br ^bb28 loc(#loc36)
  ^bb28:  // 2 preds: ^bb26, ^bb27
    cir.br ^bb29 loc(#loc36)
  ^bb29:  // pred: ^bb28
    cir.br ^bb30 loc(#loc34)
  ^bb30:  // pred: ^bb29
    cir.br ^bb32 loc(#loc59)
  ^bb31:  // pred: ^bb13
    %63 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc60)
    %64 = cir.cast(array_to_ptrdecay, %63 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%64) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    cir.br ^bb32 loc(#loc62)
  ^bb32:  // 2 preds: ^bb30, ^bb31
    cir.br ^bb33 loc(#loc30)
  ^bb33:  // pred: ^bb32
    cir.return loc(#loc10)
  } loc(#loc308)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc327)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc65)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc328)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc67)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc329)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc69)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc330)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc71)
    cir.return loc(#loc64)
  } loc(#loc326)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc73)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc332)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc333)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc334)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc83)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc335)
    cir.br ^bb1 loc(#loc336)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<6> : !s32i loc(#loc87)
    cir.br ^bb2 loc(#loc85)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %5 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc85)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc88)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc89)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc89)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc89)
    cir.brcond %9 ^bb5, ^bb6 loc(#loc89)
  ^bb5:  // pred: ^bb4
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc89)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc89)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc89)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc89)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc89)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc89)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc89)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc89)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc89)
    cir.br ^bb7(%21 : !u32i) loc(#loc89)
  ^bb6:  // pred: ^bb4
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc89)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc89)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc89)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc89)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc89)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc89)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc89)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc89)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc89)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc89)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc89)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc89)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc89)
    cir.br ^bb7(%37 : !u32i) loc(#loc89)
  ^bb7(%38: !u32i loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":82:16)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc89)
  ^bb8:  // pred: ^bb7
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc89)
    cir.store %39, %2 : !s32i, !cir.ptr<!s32i> loc(#loc337)
    cir.br ^bb10 loc(#loc91)
  ^bb9:  // pred: ^bb2
    %40 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc92)
    %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    cir.br ^bb10 loc(#loc94)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc86)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc338)
  ^bb12:  // pred: ^bb11
    %42 = cir.const #cir.int<8> : !s32i loc(#loc97)
    cir.br ^bb13 loc(#loc95)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %42 : !s32i, ^bb16 [
      7: ^bb15
    ] loc(#loc95)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc98)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    %43 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc99)
    %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    cir.br ^bb40 loc(#loc101)
  ^bb16:  // pred: ^bb13
    cir.br ^bb17 loc(#loc339)
  ^bb17:  // pred: ^bb16
    %45 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc333)
    cir.store %45, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc333)
    cir.br ^bb18 loc(#loc340)
  ^bb18:  // pred: ^bb17
    %46 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc106)
    %47 = cir.const #cir.int<0> : !s32i loc(#loc107)
    %48 = cir.cmp(ge, %46, %47) : !s32i, !cir.bool loc(#loc341)
    cir.brcond %48 ^bb19, ^bb24 loc(#loc108)
  ^bb19:  // pred: ^bb18
    %49 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc109)
    %50 = cir.const #cir.int<10> : !s32i loc(#loc110)
    %51 = cir.cmp(lt, %49, %50) : !s32i, !cir.bool loc(#loc342)
    cir.brcond %51 ^bb20, ^bb21 loc(#loc108)
  ^bb20:  // pred: ^bb19
    %52 = cir.const #true loc(#loc108)
    cir.br ^bb22(%52 : !cir.bool) loc(#loc108)
  ^bb21:  // pred: ^bb19
    %53 = cir.const #false loc(#loc108)
    cir.br ^bb22(%53 : !cir.bool) loc(#loc108)
  ^bb22(%54: !cir.bool loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":100:23)):  // 2 preds: ^bb20, ^bb21
    cir.br ^bb23 loc(#loc108)
  ^bb23:  // pred: ^bb22
    cir.br ^bb25(%54 : !cir.bool) loc(#loc108)
  ^bb24:  // pred: ^bb18
    %55 = cir.const #false loc(#loc108)
    cir.br ^bb25(%55 : !cir.bool) loc(#loc108)
  ^bb25(%56: !cir.bool loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":100:23)):  // 2 preds: ^bb23, ^bb24
    cir.br ^bb26 loc(#loc108)
  ^bb26:  // pred: ^bb25
    cir.brcond %56 ^bb27, ^bb36 loc(#loc343)
  ^bb27:  // pred: ^bb26
    %57 = cir.const #cir.int<1> : !s32i loc(#loc115)
    %58 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc116)
    %59 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc117)
    %60 = cir.ptr_stride(%59 : !cir.ptr<!s32i>, %58 : !s32i), !cir.ptr<!s32i> loc(#loc117)
    cir.store %57, %60 : !s32i, !cir.ptr<!s32i> loc(#loc344)
    cir.br ^bb28 loc(#loc345)
  ^bb28:  // pred: ^bb27
    %61 = cir.const #cir.int<0> : !s32i loc(#loc120)
    cir.store %61, %0 : !s32i, !cir.ptr<!s32i> loc(#loc346)
    cir.br ^bb29 loc(#loc345)
  ^bb29:  // 2 preds: ^bb28, ^bb33
    %62 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
    %63 = cir.const #cir.int<10> : !s32i loc(#loc123)
    %64 = cir.cmp(lt, %62, %63) : !s32i, !cir.bool loc(#loc347)
    cir.brcond %64 ^bb30, ^bb34 loc(#loc124)
  ^bb30:  // pred: ^bb29
    cir.br ^bb31 loc(#loc348)
  ^bb31:  // pred: ^bb30
    %65 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc126)
    %66 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc127)
    %67 = cir.ptr_stride(%66 : !cir.ptr<!s32i>, %65 : !s32i), !cir.ptr<!s32i> loc(#loc127)
    %68 = cir.load %67 : !cir.ptr<!s32i>, !s32i loc(#loc127)
    cir.call @printIntLine(%68) : (!s32i) -> () loc(#loc128)
    cir.br ^bb32 loc(#loc119)
  ^bb32:  // pred: ^bb31
    cir.br ^bb33 loc(#loc119)
  ^bb33:  // pred: ^bb32
    %69 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
    %70 = cir.unary(inc, %69) nsw : !s32i, !s32i loc(#loc130)
    cir.store %70, %0 : !s32i, !cir.ptr<!s32i> loc(#loc349)
    cir.br ^bb29 loc(#loc345)
  ^bb34:  // pred: ^bb29
    cir.br ^bb35 loc(#loc119)
  ^bb35:  // pred: ^bb34
    cir.br ^bb37 loc(#loc113)
  ^bb36:  // pred: ^bb26
    %71 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc73)
    %72 = cir.cast(array_to_ptrdecay, %71 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%72) : (!cir.ptr<!s8i>) -> () loc(#loc131)
    cir.br ^bb37 loc(#loc105)
  ^bb37:  // 2 preds: ^bb35, ^bb36
    cir.br ^bb38 loc(#loc105)
  ^bb38:  // pred: ^bb37
    cir.br ^bb39 loc(#loc103)
  ^bb39:  // pred: ^bb38
    cir.br ^bb40 loc(#loc132)
  ^bb40:  // 2 preds: ^bb15, ^bb39
    cir.br ^bb41 loc(#loc96)
  ^bb41:  // pred: ^bb40
    cir.return loc(#loc75)
  } loc(#loc331)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc351)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc352)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc353)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc141)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc142)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc354)
    cir.br ^bb1 loc(#loc355)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<6> : !s32i loc(#loc146)
    cir.br ^bb2 loc(#loc144)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %5 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc144)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc147)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc148)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc148)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc148)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc148)
    cir.brcond %9 ^bb5, ^bb6 loc(#loc148)
  ^bb5:  // pred: ^bb4
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc148)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc148)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc148)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc148)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc148)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc148)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc148)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc148)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc148)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc148)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc148)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc148)
    cir.br ^bb7(%21 : !u32i) loc(#loc148)
  ^bb6:  // pred: ^bb4
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc148)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc148)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc148)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc148)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc148)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc148)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc148)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc148)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc148)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc148)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc148)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc148)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc148)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc148)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc148)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc148)
    cir.br ^bb7(%37 : !u32i) loc(#loc148)
  ^bb7(%38: !u32i loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":128:16)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc148)
  ^bb8:  // pred: ^bb7
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc148)
    cir.store %39, %2 : !s32i, !cir.ptr<!s32i> loc(#loc356)
    cir.br ^bb10 loc(#loc150)
  ^bb9:  // pred: ^bb2
    %40 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc151)
    %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc151)
    cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc152)
    cir.br ^bb10 loc(#loc153)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc145)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc357)
  ^bb12:  // pred: ^bb11
    %42 = cir.const #cir.int<7> : !s32i loc(#loc156)
    cir.br ^bb13 loc(#loc154)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %42 : !s32i, ^bb39 [
      7: ^bb15
    ] loc(#loc154)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc157)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc358)
  ^bb16:  // pred: ^bb15
    %43 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc352)
    cir.store %43, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc352)
    cir.br ^bb17 loc(#loc359)
  ^bb17:  // pred: ^bb16
    %44 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc162)
    %45 = cir.const #cir.int<0> : !s32i loc(#loc163)
    %46 = cir.cmp(ge, %44, %45) : !s32i, !cir.bool loc(#loc360)
    cir.brcond %46 ^bb18, ^bb23 loc(#loc164)
  ^bb18:  // pred: ^bb17
    %47 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc165)
    %48 = cir.const #cir.int<10> : !s32i loc(#loc166)
    %49 = cir.cmp(lt, %47, %48) : !s32i, !cir.bool loc(#loc361)
    cir.brcond %49 ^bb19, ^bb20 loc(#loc164)
  ^bb19:  // pred: ^bb18
    %50 = cir.const #true loc(#loc164)
    cir.br ^bb21(%50 : !cir.bool) loc(#loc164)
  ^bb20:  // pred: ^bb18
    %51 = cir.const #false loc(#loc164)
    cir.br ^bb21(%51 : !cir.bool) loc(#loc164)
  ^bb21(%52: !cir.bool loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":142:23)):  // 2 preds: ^bb19, ^bb20
    cir.br ^bb22 loc(#loc164)
  ^bb22:  // pred: ^bb21
    cir.br ^bb24(%52 : !cir.bool) loc(#loc164)
  ^bb23:  // pred: ^bb17
    %53 = cir.const #false loc(#loc164)
    cir.br ^bb24(%53 : !cir.bool) loc(#loc164)
  ^bb24(%54: !cir.bool loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":142:23)):  // 2 preds: ^bb22, ^bb23
    cir.br ^bb25 loc(#loc164)
  ^bb25:  // pred: ^bb24
    cir.brcond %54 ^bb26, ^bb35 loc(#loc362)
  ^bb26:  // pred: ^bb25
    %55 = cir.const #cir.int<1> : !s32i loc(#loc171)
    %56 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc172)
    %57 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc173)
    %58 = cir.ptr_stride(%57 : !cir.ptr<!s32i>, %56 : !s32i), !cir.ptr<!s32i> loc(#loc173)
    cir.store %55, %58 : !s32i, !cir.ptr<!s32i> loc(#loc363)
    cir.br ^bb27 loc(#loc364)
  ^bb27:  // pred: ^bb26
    %59 = cir.const #cir.int<0> : !s32i loc(#loc176)
    cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc365)
    cir.br ^bb28 loc(#loc364)
  ^bb28:  // 2 preds: ^bb27, ^bb32
    %60 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc178)
    %61 = cir.const #cir.int<10> : !s32i loc(#loc179)
    %62 = cir.cmp(lt, %60, %61) : !s32i, !cir.bool loc(#loc366)
    cir.brcond %62 ^bb29, ^bb33 loc(#loc180)
  ^bb29:  // pred: ^bb28
    cir.br ^bb30 loc(#loc367)
  ^bb30:  // pred: ^bb29
    %63 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc182)
    %64 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc183)
    %65 = cir.ptr_stride(%64 : !cir.ptr<!s32i>, %63 : !s32i), !cir.ptr<!s32i> loc(#loc183)
    %66 = cir.load %65 : !cir.ptr<!s32i>, !s32i loc(#loc183)
    cir.call @printIntLine(%66) : (!s32i) -> () loc(#loc184)
    cir.br ^bb31 loc(#loc175)
  ^bb31:  // pred: ^bb30
    cir.br ^bb32 loc(#loc175)
  ^bb32:  // pred: ^bb31
    %67 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc185)
    %68 = cir.unary(inc, %67) nsw : !s32i, !s32i loc(#loc186)
    cir.store %68, %0 : !s32i, !cir.ptr<!s32i> loc(#loc368)
    cir.br ^bb28 loc(#loc364)
  ^bb33:  // pred: ^bb28
    cir.br ^bb34 loc(#loc175)
  ^bb34:  // pred: ^bb33
    cir.br ^bb36 loc(#loc169)
  ^bb35:  // pred: ^bb25
    %69 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc187)
    %70 = cir.cast(array_to_ptrdecay, %69 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc187)
    cir.call @printLine(%70) : (!cir.ptr<!s8i>) -> () loc(#loc188)
    cir.br ^bb36 loc(#loc161)
  ^bb36:  // 2 preds: ^bb34, ^bb35
    cir.br ^bb37 loc(#loc161)
  ^bb37:  // pred: ^bb36
    cir.br ^bb38 loc(#loc159)
  ^bb38:  // pred: ^bb37
    cir.br ^bb40 loc(#loc189)
  ^bb39:  // pred: ^bb13
    %71 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc190)
    %72 = cir.cast(array_to_ptrdecay, %71 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc190)
    cir.call @printLine(%72) : (!cir.ptr<!s8i>) -> () loc(#loc191)
    cir.br ^bb40 loc(#loc192)
  ^bb40:  // 2 preds: ^bb38, ^bb39
    cir.br ^bb41 loc(#loc155)
  ^bb41:  // pred: ^bb40
    cir.return loc(#loc134)
  } loc(#loc350)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc370)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc371)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc372)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc201)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc202)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc373)
    cir.br ^bb1 loc(#loc374)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<5> : !s32i loc(#loc206)
    cir.br ^bb2 loc(#loc204)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %5 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc204)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc207)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc208)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc208)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc209)
    cir.br ^bb6 loc(#loc210)
  ^bb5:  // pred: ^bb2
    %8 = cir.const #cir.int<7> : !s32i loc(#loc211)
    cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc375)
    cir.br ^bb6 loc(#loc213)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc205)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc376)
  ^bb8:  // pred: ^bb7
    %9 = cir.const #cir.int<7> : !s32i loc(#loc216)
    cir.br ^bb9 loc(#loc214)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %9 : !s32i, ^bb27 [
      7: ^bb11
    ] loc(#loc214)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc217)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc377)
  ^bb12:  // pred: ^bb11
    %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc371)
    cir.store %10, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc371)
    cir.br ^bb13 loc(#loc378)
  ^bb13:  // pred: ^bb12
    %11 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc222)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc223)
    %13 = cir.cmp(ge, %11, %12) : !s32i, !cir.bool loc(#loc379)
    cir.brcond %13 ^bb14, ^bb23 loc(#loc380)
  ^bb14:  // pred: ^bb13
    %14 = cir.const #cir.int<1> : !s32i loc(#loc227)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc228)
    %16 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc229)
    %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc229)
    cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc381)
    cir.br ^bb15 loc(#loc382)
  ^bb15:  // pred: ^bb14
    %18 = cir.const #cir.int<0> : !s32i loc(#loc232)
    cir.store %18, %0 : !s32i, !cir.ptr<!s32i> loc(#loc383)
    cir.br ^bb16 loc(#loc382)
  ^bb16:  // 2 preds: ^bb15, ^bb20
    %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc234)
    %20 = cir.const #cir.int<10> : !s32i loc(#loc235)
    %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc384)
    cir.brcond %21 ^bb17, ^bb21 loc(#loc236)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc385)
  ^bb18:  // pred: ^bb17
    %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc238)
    %23 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc239)
    %24 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc239)
    %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc239)
    cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc240)
    cir.br ^bb19 loc(#loc231)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc231)
  ^bb20:  // pred: ^bb19
    %26 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc241)
    %27 = cir.unary(inc, %26) nsw : !s32i, !s32i loc(#loc242)
    cir.store %27, %0 : !s32i, !cir.ptr<!s32i> loc(#loc386)
    cir.br ^bb16 loc(#loc382)
  ^bb21:  // pred: ^bb16
    cir.br ^bb22 loc(#loc231)
  ^bb22:  // pred: ^bb21
    cir.br ^bb24 loc(#loc225)
  ^bb23:  // pred: ^bb13
    %28 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc243)
    %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc243)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc244)
    cir.br ^bb24 loc(#loc221)
  ^bb24:  // 2 preds: ^bb22, ^bb23
    cir.br ^bb25 loc(#loc221)
  ^bb25:  // pred: ^bb24
    cir.br ^bb26 loc(#loc219)
  ^bb26:  // pred: ^bb25
    cir.br ^bb28 loc(#loc245)
  ^bb27:  // pred: ^bb9
    %30 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc246)
    %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc246)
    cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc247)
    cir.br ^bb28 loc(#loc248)
  ^bb28:  // 2 preds: ^bb26, ^bb27
    cir.br ^bb29 loc(#loc215)
  ^bb29:  // pred: ^bb28
    cir.return loc(#loc194)
  } loc(#loc369)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc388)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc389)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc390)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc257)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc258)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc391)
    cir.br ^bb1 loc(#loc392)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<6> : !s32i loc(#loc262)
    cir.br ^bb2 loc(#loc260)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %5 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc260)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc263)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %6 = cir.const #cir.int<7> : !s32i loc(#loc264)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc393)
    cir.br ^bb6 loc(#loc266)
  ^bb5:  // pred: ^bb2
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc267)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc267)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc268)
    cir.br ^bb6 loc(#loc269)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc261)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc394)
  ^bb8:  // pred: ^bb7
    %9 = cir.const #cir.int<7> : !s32i loc(#loc272)
    cir.br ^bb9 loc(#loc270)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %9 : !s32i, ^bb27 [
      7: ^bb11
    ] loc(#loc270)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc273)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc395)
  ^bb12:  // pred: ^bb11
    %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc389)
    cir.store %10, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc389)
    cir.br ^bb13 loc(#loc396)
  ^bb13:  // pred: ^bb12
    %11 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc278)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc279)
    %13 = cir.cmp(ge, %11, %12) : !s32i, !cir.bool loc(#loc397)
    cir.brcond %13 ^bb14, ^bb23 loc(#loc398)
  ^bb14:  // pred: ^bb13
    %14 = cir.const #cir.int<1> : !s32i loc(#loc283)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc284)
    %16 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc285)
    %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc285)
    cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc399)
    cir.br ^bb15 loc(#loc400)
  ^bb15:  // pred: ^bb14
    %18 = cir.const #cir.int<0> : !s32i loc(#loc288)
    cir.store %18, %0 : !s32i, !cir.ptr<!s32i> loc(#loc401)
    cir.br ^bb16 loc(#loc400)
  ^bb16:  // 2 preds: ^bb15, ^bb20
    %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc290)
    %20 = cir.const #cir.int<10> : !s32i loc(#loc291)
    %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc402)
    cir.brcond %21 ^bb17, ^bb21 loc(#loc292)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc403)
  ^bb18:  // pred: ^bb17
    %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc294)
    %23 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc295)
    %24 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc295)
    %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc295)
    cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc296)
    cir.br ^bb19 loc(#loc287)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc287)
  ^bb20:  // pred: ^bb19
    %26 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc297)
    %27 = cir.unary(inc, %26) nsw : !s32i, !s32i loc(#loc298)
    cir.store %27, %0 : !s32i, !cir.ptr<!s32i> loc(#loc404)
    cir.br ^bb16 loc(#loc400)
  ^bb21:  // pred: ^bb16
    cir.br ^bb22 loc(#loc287)
  ^bb22:  // pred: ^bb21
    cir.br ^bb24 loc(#loc281)
  ^bb23:  // pred: ^bb13
    %28 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc299)
    %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc299)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc300)
    cir.br ^bb24 loc(#loc277)
  ^bb24:  // 2 preds: ^bb22, ^bb23
    cir.br ^bb25 loc(#loc277)
  ^bb25:  // pred: ^bb24
    cir.br ^bb26 loc(#loc275)
  ^bb26:  // pred: ^bb25
    cir.br ^bb28 loc(#loc301)
  ^bb27:  // pred: ^bb9
    %30 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc302)
    %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc302)
    cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc303)
    cir.br ^bb28 loc(#loc304)
  ^bb28:  // 2 preds: ^bb26, ^bb27
    cir.br ^bb29 loc(#loc271)
  ^bb29:  // pred: ^bb28
    cir.return loc(#loc250)
  } loc(#loc387)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":35:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":57:23)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":22:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":66:1)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":42:9)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":42:13)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":43:9)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":43:30)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":24:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":24:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":26:13)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":26:12)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":26:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":27:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":37:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":27:12)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":29:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":31:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":32:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":35:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":36:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":38:5)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":65:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":38:12)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":40:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":41:5)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":59:5)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":46:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":58:9)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":46:13)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":46:21)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":47:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":54:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":56:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":48:28)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":48:20)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":48:13)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":50:13)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":53:13)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":50:21)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":50:17)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":50:24)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":50:28)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":50:26)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":51:13)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":52:37)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":52:30)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":52:17)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":50:33)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":50:32)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":57:13)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":60:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":63:19)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":63:9)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":64:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":260:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":266:1)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":262:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":262:14)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":263:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":263:14)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":264:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":264:14)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":265:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":265:14)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":111:23)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":73:1)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":116:1)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":97:9)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":97:13)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":98:9)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":98:30)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":75:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":75:9)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":77:13)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":77:12)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":77:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":78:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":88:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":78:12)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":80:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":82:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":83:9)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":86:19)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":86:9)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":87:9)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":89:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":115:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":89:12)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":91:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":93:19)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":93:9)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":94:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":96:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":113:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":100:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":112:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":100:13)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":100:21)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":100:26)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":100:34)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":100:36)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":101:9)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":108:9)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":110:9)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":102:28)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":102:20)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":102:13)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":104:13)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":107:13)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":104:21)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":104:17)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":104:24)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":104:28)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":104:26)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":105:13)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":106:37)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":106:30)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":106:17)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":104:33)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":104:32)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":111:13)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":114:5)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":119:1)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":162:1)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":139:9)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":139:13)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":140:9)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":140:30)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":121:5)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":121:9)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":123:13)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":123:12)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":123:5)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":124:5)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":134:5)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":124:12)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":126:5)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":128:9)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":129:9)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":132:19)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":132:9)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":133:9)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":135:5)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":161:5)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":135:12)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":137:5)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":138:5)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":155:5)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":142:9)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":154:9)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":142:13)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":142:21)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":142:26)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":142:34)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":142:36)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":143:9)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":150:9)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":152:9)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":144:28)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":144:20)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":144:13)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":146:13)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":149:13)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":146:21)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":146:17)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":146:24)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":146:28)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":146:26)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":147:13)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":148:37)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":148:30)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":148:17)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":146:33)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":146:32)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":153:23)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":153:13)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":156:5)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":159:19)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":159:9)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":160:9)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":165:1)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":210:1)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":186:9)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":186:13)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":187:9)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":187:30)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":167:5)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":167:9)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":169:13)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":169:12)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":169:5)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":170:5)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":181:5)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":170:12)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":172:5)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":174:19)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":174:9)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":175:9)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":179:16)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":179:9)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":180:9)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":182:5)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":209:5)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":182:12)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":184:5)
#loc218 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":185:5)
#loc219 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":203:5)
#loc220 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":190:9)
#loc221 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":202:9)
#loc222 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":190:13)
#loc223 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":190:21)
#loc224 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":191:9)
#loc225 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":198:9)
#loc226 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":200:9)
#loc227 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":192:28)
#loc228 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":192:20)
#loc229 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":192:13)
#loc230 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":194:13)
#loc231 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":197:13)
#loc232 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":194:21)
#loc233 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":194:17)
#loc234 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":194:24)
#loc235 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":194:28)
#loc236 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":194:26)
#loc237 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":195:13)
#loc238 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":196:37)
#loc239 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":196:30)
#loc240 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":196:17)
#loc241 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":194:33)
#loc242 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":194:32)
#loc243 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":201:23)
#loc244 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":201:13)
#loc245 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":204:5)
#loc246 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":207:19)
#loc247 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":207:9)
#loc248 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":208:9)
#loc249 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":213:1)
#loc250 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":258:1)
#loc251 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":234:9)
#loc252 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":234:13)
#loc253 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":235:9)
#loc254 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":235:30)
#loc255 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":215:5)
#loc256 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":215:9)
#loc257 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":217:13)
#loc258 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":217:12)
#loc259 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":217:5)
#loc260 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":218:5)
#loc261 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":229:5)
#loc262 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":218:12)
#loc263 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":220:5)
#loc264 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":223:16)
#loc265 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":223:9)
#loc266 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":224:9)
#loc267 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":227:19)
#loc268 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":227:9)
#loc269 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":228:9)
#loc270 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":230:5)
#loc271 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":257:5)
#loc272 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":230:12)
#loc273 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":232:5)
#loc274 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":233:5)
#loc275 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":251:5)
#loc276 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":238:9)
#loc277 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":250:9)
#loc278 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":238:13)
#loc279 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":238:21)
#loc280 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":239:9)
#loc281 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":246:9)
#loc282 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":248:9)
#loc283 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":240:28)
#loc284 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":240:20)
#loc285 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":240:13)
#loc286 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":242:13)
#loc287 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":245:13)
#loc288 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":242:21)
#loc289 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":242:17)
#loc290 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":242:24)
#loc291 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":242:28)
#loc292 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":242:26)
#loc293 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":243:13)
#loc294 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":244:37)
#loc295 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":244:30)
#loc296 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":244:17)
#loc297 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":242:33)
#loc298 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":242:32)
#loc299 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":249:23)
#loc300 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":249:13)
#loc301 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":252:5)
#loc302 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":255:19)
#loc303 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":255:9)
#loc304 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c":256:9)
#loc305 = loc(fused[#loc1, #loc2])
#loc306 = loc(fused[#loc3, #loc4])
#loc307 = loc(fused[#loc6, #loc7])
#loc308 = loc(fused[#loc9, #loc10])
#loc309 = loc(fused[#loc11, #loc12])
#loc310 = loc(fused[#loc13, #loc14])
#loc311 = loc(fused[#loc15, #loc16])
#loc312 = loc(fused[#loc19, #loc17])
#loc313 = loc(fused[#loc20, #loc21])
#loc314 = loc(fused[#loc25, #loc24])
#loc315 = loc(fused[#loc29, #loc30])
#loc316 = loc(fused[#loc33, #loc34])
#loc317 = loc(fused[#loc35, #loc36])
#loc318 = loc(fused[#loc37, #loc38])
#loc319 = loc(fused[#loc39, #loc40, #loc41, #loc36])
#loc320 = loc(fused[#loc44, #loc42])
#loc321 = loc(fused[#loc45, #loc46])
#loc322 = loc(fused[#loc48, #loc47])
#loc323 = loc(fused[#loc49, #loc50])
#loc324 = loc(fused[#loc52, #loc46])
#loc325 = loc(fused[#loc57, #loc56])
#loc326 = loc(fused[#loc63, #loc64])
#loc327 = loc(fused[#loc65, #loc66])
#loc328 = loc(fused[#loc67, #loc68])
#loc329 = loc(fused[#loc69, #loc70])
#loc330 = loc(fused[#loc71, #loc72])
#loc331 = loc(fused[#loc74, #loc75])
#loc332 = loc(fused[#loc76, #loc77])
#loc333 = loc(fused[#loc78, #loc79])
#loc334 = loc(fused[#loc80, #loc81])
#loc335 = loc(fused[#loc84, #loc82])
#loc336 = loc(fused[#loc85, #loc86])
#loc337 = loc(fused[#loc90, #loc89])
#loc338 = loc(fused[#loc95, #loc96])
#loc339 = loc(fused[#loc102, #loc103])
#loc340 = loc(fused[#loc104, #loc105])
#loc341 = loc(fused[#loc106, #loc107])
#loc342 = loc(fused[#loc109, #loc111])
#loc343 = loc(fused[#loc112, #loc113, #loc114, #loc105])
#loc344 = loc(fused[#loc117, #loc115])
#loc345 = loc(fused[#loc118, #loc119])
#loc346 = loc(fused[#loc121, #loc120])
#loc347 = loc(fused[#loc122, #loc123])
#loc348 = loc(fused[#loc125, #loc119])
#loc349 = loc(fused[#loc130, #loc129])
#loc350 = loc(fused[#loc133, #loc134])
#loc351 = loc(fused[#loc135, #loc136])
#loc352 = loc(fused[#loc137, #loc138])
#loc353 = loc(fused[#loc139, #loc140])
#loc354 = loc(fused[#loc143, #loc141])
#loc355 = loc(fused[#loc144, #loc145])
#loc356 = loc(fused[#loc149, #loc148])
#loc357 = loc(fused[#loc154, #loc155])
#loc358 = loc(fused[#loc158, #loc159])
#loc359 = loc(fused[#loc160, #loc161])
#loc360 = loc(fused[#loc162, #loc163])
#loc361 = loc(fused[#loc165, #loc167])
#loc362 = loc(fused[#loc168, #loc169, #loc170, #loc161])
#loc363 = loc(fused[#loc173, #loc171])
#loc364 = loc(fused[#loc174, #loc175])
#loc365 = loc(fused[#loc177, #loc176])
#loc366 = loc(fused[#loc178, #loc179])
#loc367 = loc(fused[#loc181, #loc175])
#loc368 = loc(fused[#loc186, #loc185])
#loc369 = loc(fused[#loc193, #loc194])
#loc370 = loc(fused[#loc195, #loc196])
#loc371 = loc(fused[#loc197, #loc198])
#loc372 = loc(fused[#loc199, #loc200])
#loc373 = loc(fused[#loc203, #loc201])
#loc374 = loc(fused[#loc204, #loc205])
#loc375 = loc(fused[#loc212, #loc211])
#loc376 = loc(fused[#loc214, #loc215])
#loc377 = loc(fused[#loc218, #loc219])
#loc378 = loc(fused[#loc220, #loc221])
#loc379 = loc(fused[#loc222, #loc223])
#loc380 = loc(fused[#loc224, #loc225, #loc226, #loc221])
#loc381 = loc(fused[#loc229, #loc227])
#loc382 = loc(fused[#loc230, #loc231])
#loc383 = loc(fused[#loc233, #loc232])
#loc384 = loc(fused[#loc234, #loc235])
#loc385 = loc(fused[#loc237, #loc231])
#loc386 = loc(fused[#loc242, #loc241])
#loc387 = loc(fused[#loc249, #loc250])
#loc388 = loc(fused[#loc251, #loc252])
#loc389 = loc(fused[#loc253, #loc254])
#loc390 = loc(fused[#loc255, #loc256])
#loc391 = loc(fused[#loc259, #loc257])
#loc392 = loc(fused[#loc260, #loc261])
#loc393 = loc(fused[#loc265, #loc264])
#loc394 = loc(fused[#loc270, #loc271])
#loc395 = loc(fused[#loc274, #loc275])
#loc396 = loc(fused[#loc276, #loc277])
#loc397 = loc(fused[#loc278, #loc279])
#loc398 = loc(fused[#loc280, #loc281, #loc282, #loc277])
#loc399 = loc(fused[#loc285, #loc283])
#loc400 = loc(fused[#loc286, #loc287])
#loc401 = loc(fused[#loc289, #loc288])
#loc402 = loc(fused[#loc290, #loc291])
#loc403 = loc(fused[#loc293, #loc287])
#loc404 = loc(fused[#loc298, #loc297])
