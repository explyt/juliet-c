!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc118)
  cir.func no_proto @CWE369_Divide_by_Zero__float_zero_32_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc120)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc121)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc122)
    %3 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc123)
    %4 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc124)
    %5 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc125)
    cir.store %3, %4 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc124)
    cir.store %3, %5 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc125)
    %6 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc17)
    cir.store %6, %3 : !cir.float, !cir.ptr<!cir.float> loc(#loc126)
    cir.br ^bb1 loc(#loc127)
  ^bb1:  // pred: ^bb0
    %7 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc6)
    %8 = cir.load %7 : !cir.ptr<!cir.float>, !cir.float loc(#loc21)
    cir.store %8, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc120)
    %9 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc22)
    cir.store %9, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc128)
    %10 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc24)
    %11 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc25)
    cir.store %10, %11 : !cir.float, !cir.ptr<!cir.float> loc(#loc129)
    cir.br ^bb2 loc(#loc20)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc130)
  ^bb3:  // pred: ^bb2
    %12 = cir.load deref %5 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc8)
    %13 = cir.load %12 : !cir.ptr<!cir.float>, !cir.float loc(#loc29)
    cir.store %13, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc121)
    cir.br ^bb4 loc(#loc131)
  ^bb4:  // pred: ^bb3
    %14 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc32)
    %15 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc33)
    %16 = cir.cast(floating, %15 : !cir.float), !cir.double loc(#loc33)
    %17 = cir.binop(div, %14, %16) : !cir.double loc(#loc132)
    %18 = cir.cast(float_to_int, %17 : !cir.double), !s32i loc(#loc132)
    cir.store %18, %2 : !s32i, !cir.ptr<!s32i> loc(#loc122)
    %19 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc35)
    cir.br ^bb5 loc(#loc31)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc28)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc4)
  } loc(#loc119)
  cir.func no_proto @CWE369_Divide_by_Zero__float_zero_32_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc134)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc135)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    cir.return loc(#loc37)
  } loc(#loc133)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc137)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc138)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc139)
    %3 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc140)
    %4 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc141)
    %5 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc142)
    cir.store %3, %4 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc141)
    cir.store %3, %5 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc142)
    %6 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc56)
    cir.store %6, %3 : !cir.float, !cir.ptr<!cir.float> loc(#loc143)
    cir.br ^bb1 loc(#loc144)
  ^bb1:  // pred: ^bb0
    %7 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc45)
    %8 = cir.load %7 : !cir.ptr<!cir.float>, !cir.float loc(#loc60)
    cir.store %8, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc137)
    %9 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc61)
    cir.store %9, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc145)
    %10 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc63)
    %11 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc64)
    cir.store %10, %11 : !cir.float, !cir.ptr<!cir.float> loc(#loc146)
    cir.br ^bb2 loc(#loc59)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc147)
  ^bb3:  // pred: ^bb2
    %12 = cir.load deref %5 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc47)
    %13 = cir.load %12 : !cir.ptr<!cir.float>, !cir.float loc(#loc68)
    cir.store %13, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc138)
    cir.br ^bb4 loc(#loc148)
  ^bb4:  // pred: ^bb3
    %14 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc71)
    %15 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc72)
    %16 = cir.cast(floating, %15 : !cir.float), !cir.double loc(#loc72)
    %17 = cir.binop(div, %14, %16) : !cir.double loc(#loc149)
    %18 = cir.cast(float_to_int, %17 : !cir.double), !s32i loc(#loc149)
    cir.store %18, %2 : !s32i, !cir.ptr<!s32i> loc(#loc139)
    %19 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc73)
    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc74)
    cir.br ^bb5 loc(#loc70)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc67)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc43)
  } loc(#loc136)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc150)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc77)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc152)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc153)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc154)
    %3 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc155)
    %4 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc156)
    %5 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc157)
    cir.store %3, %4 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc156)
    cir.store %3, %5 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc157)
    %6 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc92)
    cir.store %6, %3 : !cir.float, !cir.ptr<!cir.float> loc(#loc158)
    cir.br ^bb1 loc(#loc159)
  ^bb1:  // pred: ^bb0
    %7 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc81)
    %8 = cir.load %7 : !cir.ptr<!cir.float>, !cir.float loc(#loc96)
    cir.store %8, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc152)
    %9 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc97)
    cir.store %9, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc160)
    %10 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc99)
    %11 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc100)
    cir.store %10, %11 : !cir.float, !cir.ptr<!cir.float> loc(#loc161)
    cir.br ^bb2 loc(#loc95)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc162)
  ^bb3:  // pred: ^bb2
    %12 = cir.load deref %5 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc83)
    %13 = cir.load %12 : !cir.ptr<!cir.float>, !cir.float loc(#loc104)
    cir.store %13, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc153)
    cir.br ^bb4 loc(#loc163)
  ^bb4:  // pred: ^bb3
    %14 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc107)
    %15 = cir.cast(floating, %14 : !cir.float), !cir.double loc(#loc107)
    %16 = cir.fabs %15 : !cir.double loc(#loc107)
    %17 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc108)
    %18 = cir.cmp(gt, %16, %17) : !cir.double, !cir.bool loc(#loc164)
    cir.brcond %18 ^bb5, ^bb6 loc(#loc165)
  ^bb5:  // pred: ^bb4
    %19 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc113)
    %20 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc114)
    %21 = cir.cast(floating, %20 : !cir.float), !cir.double loc(#loc114)
    %22 = cir.binop(div, %19, %21) : !cir.double loc(#loc166)
    %23 = cir.cast(float_to_int, %22 : !cir.double), !s32i loc(#loc166)
    cir.store %23, %2 : !s32i, !cir.ptr<!s32i> loc(#loc154)
    %24 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc115)
    cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc116)
    cir.br ^bb7 loc(#loc111)
  ^bb6:  // pred: ^bb4
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc77)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc117)
    cir.br ^bb7 loc(#loc106)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc106)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc103)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc79)
  } loc(#loc151)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_32.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__float_zero_32.c":24:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_zero_32.c":45:1)
#loc5 = loc("CWE369_Divide_by_Zero__float_zero_32.c":32:9)
#loc6 = loc("CWE369_Divide_by_Zero__float_zero_32.c":32:23)
#loc7 = loc("CWE369_Divide_by_Zero__float_zero_32.c":38:9)
#loc8 = loc("CWE369_Divide_by_Zero__float_zero_32.c":38:23)
#loc9 = loc("CWE369_Divide_by_Zero__float_zero_32.c":41:13)
#loc10 = loc("CWE369_Divide_by_Zero__float_zero_32.c":41:44)
#loc11 = loc("CWE369_Divide_by_Zero__float_zero_32.c":26:5)
#loc12 = loc("CWE369_Divide_by_Zero__float_zero_32.c":26:11)
#loc13 = loc("CWE369_Divide_by_Zero__float_zero_32.c":27:5)
#loc14 = loc("CWE369_Divide_by_Zero__float_zero_32.c":27:24)
#loc15 = loc("CWE369_Divide_by_Zero__float_zero_32.c":28:5)
#loc16 = loc("CWE369_Divide_by_Zero__float_zero_32.c":28:24)
#loc17 = loc("CWE369_Divide_by_Zero__float_zero_32.c":30:12)
#loc18 = loc("CWE369_Divide_by_Zero__float_zero_32.c":30:5)
#loc19 = loc("CWE369_Divide_by_Zero__float_zero_32.c":31:5)
#loc20 = loc("CWE369_Divide_by_Zero__float_zero_32.c":36:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_zero_32.c":32:22)
#loc22 = loc("CWE369_Divide_by_Zero__float_zero_32.c":34:16)
#loc23 = loc("CWE369_Divide_by_Zero__float_zero_32.c":34:9)
#loc24 = loc("CWE369_Divide_by_Zero__float_zero_32.c":35:21)
#loc25 = loc("CWE369_Divide_by_Zero__float_zero_32.c":35:10)
#loc26 = loc("CWE369_Divide_by_Zero__float_zero_32.c":35:9)
#loc27 = loc("CWE369_Divide_by_Zero__float_zero_32.c":37:5)
#loc28 = loc("CWE369_Divide_by_Zero__float_zero_32.c":44:5)
#loc29 = loc("CWE369_Divide_by_Zero__float_zero_32.c":38:22)
#loc30 = loc("CWE369_Divide_by_Zero__float_zero_32.c":39:9)
#loc31 = loc("CWE369_Divide_by_Zero__float_zero_32.c":43:9)
#loc32 = loc("CWE369_Divide_by_Zero__float_zero_32.c":41:32)
#loc33 = loc("CWE369_Divide_by_Zero__float_zero_32.c":41:40)
#loc34 = loc("CWE369_Divide_by_Zero__float_zero_32.c":42:26)
#loc35 = loc("CWE369_Divide_by_Zero__float_zero_32.c":42:13)
#loc36 = loc("CWE369_Divide_by_Zero__float_zero_32.c":104:1)
#loc37 = loc("CWE369_Divide_by_Zero__float_zero_32.c":108:1)
#loc38 = loc("CWE369_Divide_by_Zero__float_zero_32.c":106:5)
#loc39 = loc("CWE369_Divide_by_Zero__float_zero_32.c":106:13)
#loc40 = loc("CWE369_Divide_by_Zero__float_zero_32.c":107:5)
#loc41 = loc("CWE369_Divide_by_Zero__float_zero_32.c":107:13)
#loc42 = loc("CWE369_Divide_by_Zero__float_zero_32.c":52:1)
#loc43 = loc("CWE369_Divide_by_Zero__float_zero_32.c":73:1)
#loc44 = loc("CWE369_Divide_by_Zero__float_zero_32.c":60:9)
#loc45 = loc("CWE369_Divide_by_Zero__float_zero_32.c":60:23)
#loc46 = loc("CWE369_Divide_by_Zero__float_zero_32.c":66:9)
#loc47 = loc("CWE369_Divide_by_Zero__float_zero_32.c":66:23)
#loc48 = loc("CWE369_Divide_by_Zero__float_zero_32.c":69:13)
#loc49 = loc("CWE369_Divide_by_Zero__float_zero_32.c":69:44)
#loc50 = loc("CWE369_Divide_by_Zero__float_zero_32.c":54:5)
#loc51 = loc("CWE369_Divide_by_Zero__float_zero_32.c":54:11)
#loc52 = loc("CWE369_Divide_by_Zero__float_zero_32.c":55:5)
#loc53 = loc("CWE369_Divide_by_Zero__float_zero_32.c":55:24)
#loc54 = loc("CWE369_Divide_by_Zero__float_zero_32.c":56:5)
#loc55 = loc("CWE369_Divide_by_Zero__float_zero_32.c":56:24)
#loc56 = loc("CWE369_Divide_by_Zero__float_zero_32.c":58:12)
#loc57 = loc("CWE369_Divide_by_Zero__float_zero_32.c":58:5)
#loc58 = loc("CWE369_Divide_by_Zero__float_zero_32.c":59:5)
#loc59 = loc("CWE369_Divide_by_Zero__float_zero_32.c":64:5)
#loc60 = loc("CWE369_Divide_by_Zero__float_zero_32.c":60:22)
#loc61 = loc("CWE369_Divide_by_Zero__float_zero_32.c":62:16)
#loc62 = loc("CWE369_Divide_by_Zero__float_zero_32.c":62:9)
#loc63 = loc("CWE369_Divide_by_Zero__float_zero_32.c":63:21)
#loc64 = loc("CWE369_Divide_by_Zero__float_zero_32.c":63:10)
#loc65 = loc("CWE369_Divide_by_Zero__float_zero_32.c":63:9)
#loc66 = loc("CWE369_Divide_by_Zero__float_zero_32.c":65:5)
#loc67 = loc("CWE369_Divide_by_Zero__float_zero_32.c":72:5)
#loc68 = loc("CWE369_Divide_by_Zero__float_zero_32.c":66:22)
#loc69 = loc("CWE369_Divide_by_Zero__float_zero_32.c":67:9)
#loc70 = loc("CWE369_Divide_by_Zero__float_zero_32.c":71:9)
#loc71 = loc("CWE369_Divide_by_Zero__float_zero_32.c":69:32)
#loc72 = loc("CWE369_Divide_by_Zero__float_zero_32.c":69:40)
#loc73 = loc("CWE369_Divide_by_Zero__float_zero_32.c":70:26)
#loc74 = loc("CWE369_Divide_by_Zero__float_zero_32.c":70:13)
#loc75 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc76 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc77 = loc("CWE369_Divide_by_Zero__float_zero_32.c":99:23)
#loc78 = loc("CWE369_Divide_by_Zero__float_zero_32.c":76:1)
#loc79 = loc("CWE369_Divide_by_Zero__float_zero_32.c":102:1)
#loc80 = loc("CWE369_Divide_by_Zero__float_zero_32.c":84:9)
#loc81 = loc("CWE369_Divide_by_Zero__float_zero_32.c":84:23)
#loc82 = loc("CWE369_Divide_by_Zero__float_zero_32.c":90:9)
#loc83 = loc("CWE369_Divide_by_Zero__float_zero_32.c":90:23)
#loc84 = loc("CWE369_Divide_by_Zero__float_zero_32.c":94:13)
#loc85 = loc("CWE369_Divide_by_Zero__float_zero_32.c":94:44)
#loc86 = loc("CWE369_Divide_by_Zero__float_zero_32.c":78:5)
#loc87 = loc("CWE369_Divide_by_Zero__float_zero_32.c":78:11)
#loc88 = loc("CWE369_Divide_by_Zero__float_zero_32.c":79:5)
#loc89 = loc("CWE369_Divide_by_Zero__float_zero_32.c":79:24)
#loc90 = loc("CWE369_Divide_by_Zero__float_zero_32.c":80:5)
#loc91 = loc("CWE369_Divide_by_Zero__float_zero_32.c":80:24)
#loc92 = loc("CWE369_Divide_by_Zero__float_zero_32.c":82:12)
#loc93 = loc("CWE369_Divide_by_Zero__float_zero_32.c":82:5)
#loc94 = loc("CWE369_Divide_by_Zero__float_zero_32.c":83:5)
#loc95 = loc("CWE369_Divide_by_Zero__float_zero_32.c":88:5)
#loc96 = loc("CWE369_Divide_by_Zero__float_zero_32.c":84:22)
#loc97 = loc("CWE369_Divide_by_Zero__float_zero_32.c":86:16)
#loc98 = loc("CWE369_Divide_by_Zero__float_zero_32.c":86:9)
#loc99 = loc("CWE369_Divide_by_Zero__float_zero_32.c":87:21)
#loc100 = loc("CWE369_Divide_by_Zero__float_zero_32.c":87:10)
#loc101 = loc("CWE369_Divide_by_Zero__float_zero_32.c":87:9)
#loc102 = loc("CWE369_Divide_by_Zero__float_zero_32.c":89:5)
#loc103 = loc("CWE369_Divide_by_Zero__float_zero_32.c":101:5)
#loc104 = loc("CWE369_Divide_by_Zero__float_zero_32.c":90:22)
#loc105 = loc("CWE369_Divide_by_Zero__float_zero_32.c":92:9)
#loc106 = loc("CWE369_Divide_by_Zero__float_zero_32.c":100:9)
#loc107 = loc("CWE369_Divide_by_Zero__float_zero_32.c":92:17)
#loc108 = loc("CWE369_Divide_by_Zero__float_zero_32.c":92:25)
#loc109 = loc("CWE369_Divide_by_Zero__float_zero_32.c":92:12)
#loc110 = loc("CWE369_Divide_by_Zero__float_zero_32.c":93:9)
#loc111 = loc("CWE369_Divide_by_Zero__float_zero_32.c":96:9)
#loc112 = loc("CWE369_Divide_by_Zero__float_zero_32.c":98:9)
#loc113 = loc("CWE369_Divide_by_Zero__float_zero_32.c":94:32)
#loc114 = loc("CWE369_Divide_by_Zero__float_zero_32.c":94:40)
#loc115 = loc("CWE369_Divide_by_Zero__float_zero_32.c":95:26)
#loc116 = loc("CWE369_Divide_by_Zero__float_zero_32.c":95:13)
#loc117 = loc("CWE369_Divide_by_Zero__float_zero_32.c":99:13)
#loc118 = loc(fused[#loc1, #loc2])
#loc119 = loc(fused[#loc3, #loc4])
#loc120 = loc(fused[#loc5, #loc6])
#loc121 = loc(fused[#loc7, #loc8])
#loc122 = loc(fused[#loc9, #loc10])
#loc123 = loc(fused[#loc11, #loc12])
#loc124 = loc(fused[#loc13, #loc14])
#loc125 = loc(fused[#loc15, #loc16])
#loc126 = loc(fused[#loc18, #loc17])
#loc127 = loc(fused[#loc19, #loc20])
#loc128 = loc(fused[#loc23, #loc22])
#loc129 = loc(fused[#loc26, #loc24])
#loc130 = loc(fused[#loc27, #loc28])
#loc131 = loc(fused[#loc30, #loc31])
#loc132 = loc(fused[#loc32, #loc33])
#loc133 = loc(fused[#loc36, #loc37])
#loc134 = loc(fused[#loc38, #loc39])
#loc135 = loc(fused[#loc40, #loc41])
#loc136 = loc(fused[#loc42, #loc43])
#loc137 = loc(fused[#loc44, #loc45])
#loc138 = loc(fused[#loc46, #loc47])
#loc139 = loc(fused[#loc48, #loc49])
#loc140 = loc(fused[#loc50, #loc51])
#loc141 = loc(fused[#loc52, #loc53])
#loc142 = loc(fused[#loc54, #loc55])
#loc143 = loc(fused[#loc57, #loc56])
#loc144 = loc(fused[#loc58, #loc59])
#loc145 = loc(fused[#loc62, #loc61])
#loc146 = loc(fused[#loc65, #loc63])
#loc147 = loc(fused[#loc66, #loc67])
#loc148 = loc(fused[#loc69, #loc70])
#loc149 = loc(fused[#loc71, #loc72])
#loc150 = loc(fused[#loc75, #loc76])
#loc151 = loc(fused[#loc78, #loc79])
#loc152 = loc(fused[#loc80, #loc81])
#loc153 = loc(fused[#loc82, #loc83])
#loc154 = loc(fused[#loc84, #loc85])
#loc155 = loc(fused[#loc86, #loc87])
#loc156 = loc(fused[#loc88, #loc89])
#loc157 = loc(fused[#loc90, #loc91])
#loc158 = loc(fused[#loc93, #loc92])
#loc159 = loc(fused[#loc94, #loc95])
#loc160 = loc(fused[#loc98, #loc97])
#loc161 = loc(fused[#loc101, #loc99])
#loc162 = loc(fused[#loc102, #loc103])
#loc163 = loc(fused[#loc105, #loc106])
#loc164 = loc(fused[#loc109, #loc108])
#loc165 = loc(fused[#loc110, #loc111, #loc112, #loc106])
#loc166 = loc(fused[#loc113, #loc114])
