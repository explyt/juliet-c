!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc52 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":168:10)
#loc53 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":168:14)
#loc54 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":168:20)
#loc55 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":168:32)
#loc210 = loc(fused[#loc52, #loc53])
#loc211 = loc(fused[#loc54, #loc55])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_sub_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc188)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc189)
  cir.func private @printHexCharLine(!s8i) loc(#loc190)
  cir.func no_proto @CWE191_Integer_Underflow__char_rand_sub_05_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc192)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc11)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc11)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc193)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc188)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc17)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc17)
        %10 = cir.ternary(%9, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc17)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc17)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc17)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc17)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc17)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc17)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc17)
          cir.yield %24 : !u32i loc(#loc17)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc17)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc17)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc17)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc17)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc17)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc17)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc17)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc17)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc17)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc17)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc17)
          cir.yield %28 : !u32i loc(#loc17)
        }) : (!cir.bool) -> !u32i loc(#loc17)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc17)
        %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc17)
        cir.store %12, %0 : !s8i, !cir.ptr<!s8i> loc(#loc196)
      } loc(#loc195)
    } loc(#loc194)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc188)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc21)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc200)
          %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc27)
          %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc27)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc26)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc27)
          %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc27)
          cir.store %11, %6 : !s8i, !cir.ptr<!s8i> loc(#loc200)
          %12 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc28)
          cir.call @printHexCharLine(%12) : (!s8i) -> () loc(#loc29)
        } loc(#loc199)
      } loc(#loc198)
    } loc(#loc197)
    cir.return loc(#loc8)
  } loc(#loc191)
  cir.func no_proto @CWE191_Integer_Underflow__char_rand_sub_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc202)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc204)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc205)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc201)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc206)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc207)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc208)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc49)
  cir.func @main(%arg0: !s32i loc(fused[#loc52, #loc53]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc54, #loc55])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc210)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc211)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc51)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc56)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc56)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc57)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc58)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc58)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc59)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc46)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %8 = cir.get_global @CWE191_Integer_Underflow__char_rand_sub_05_good : !cir.ptr<!cir.func<!void ()>> loc(#loc212)
    cir.call @CWE191_Integer_Underflow__char_rand_sub_05_good() : () -> () loc(#loc61)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc47)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc48)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %13 = cir.get_global @CWE191_Integer_Underflow__char_rand_sub_05_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc213)
    cir.call @CWE191_Integer_Underflow__char_rand_sub_05_bad() : () -> () loc(#loc65)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc49)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc68)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc214)
    cir.return %17 : !s32i loc(#loc214)
  } loc(#loc209)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc215)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc73)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc217)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc78)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc78)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc218)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc188)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc82)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc82)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc84)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc84)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc84)
        %10 = cir.ternary(%9, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc84)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc84)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc84)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc84)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc84)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc84)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc84)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc84)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc84)
          cir.yield %24 : !u32i loc(#loc84)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc84)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc84)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc84)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc84)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc84)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc84)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc84)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc84)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc84)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc84)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc84)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc84)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc84)
          cir.yield %28 : !u32i loc(#loc84)
        }) : (!cir.bool) -> !u32i loc(#loc84)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc84)
        %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc84)
        cir.store %12, %0 : !s8i, !cir.ptr<!s8i> loc(#loc221)
      } loc(#loc220)
    } loc(#loc219)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc215)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc88)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc88)
      cir.if %5 {
        %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc72)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc72)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc92)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc95)
          %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc95)
          %8 = cir.const #cir.int<127> : !s32i loc(#loc96)
          %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc96)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc96)
          %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc96)
          %12 = cir.cmp(gt, %7, %11) : !s32i, !cir.bool loc(#loc225)
          cir.if %12 {
            %13 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc227)
            %14 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc102)
            %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc102)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc101)
            %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc102)
            %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc102)
            cir.store %18, %13 : !s8i, !cir.ptr<!s8i> loc(#loc227)
            %19 = cir.load %13 : !cir.ptr<!s8i>, !s8i loc(#loc103)
            cir.call @printHexCharLine(%19) : (!s8i) -> () loc(#loc104)
          } else {
            %13 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc73)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc73)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc105)
          } loc(#loc226)
        } loc(#loc224)
      } loc(#loc223)
    } loc(#loc222)
    cir.return loc(#loc75)
  } loc(#loc216)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc229)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc110)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc110)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc230)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc188)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc114)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc114)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc116)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc116)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc116)
        %10 = cir.ternary(%9, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc116)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc116)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc116)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc116)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc116)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc116)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc116)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc116)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc116)
          cir.yield %24 : !u32i loc(#loc116)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc116)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc116)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc116)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc116)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc116)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc116)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc116)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc116)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc116)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc116)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc116)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc116)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc116)
          cir.yield %28 : !u32i loc(#loc116)
        }) : (!cir.bool) -> !u32i loc(#loc116)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc116)
        %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc116)
        cir.store %12, %0 : !s8i, !cir.ptr<!s8i> loc(#loc233)
      } loc(#loc232)
    } loc(#loc231)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc188)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc120)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc120)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc124)
          %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc124)
          %8 = cir.const #cir.int<127> : !s32i loc(#loc125)
          %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc125)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc125)
          %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc125)
          %12 = cir.cmp(gt, %7, %11) : !s32i, !cir.bool loc(#loc237)
          cir.if %12 {
            %13 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc239)
            %14 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc131)
            %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc131)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc130)
            %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc131)
            %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc131)
            cir.store %18, %13 : !s8i, !cir.ptr<!s8i> loc(#loc239)
            %19 = cir.load %13 : !cir.ptr<!s8i>, !s8i loc(#loc132)
            cir.call @printHexCharLine(%19) : (!s8i) -> () loc(#loc133)
          } else {
            %13 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc134)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc134)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc135)
          } loc(#loc238)
        } loc(#loc236)
      } loc(#loc235)
    } loc(#loc234)
    cir.return loc(#loc107)
  } loc(#loc228)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc241)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc140)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc140)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc242)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc215)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc144)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc144)
      cir.if %5 {
        %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc148)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc148)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc149)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc150)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc151)
        %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc151)
        cir.store %8, %0 : !s8i, !cir.ptr<!s8i> loc(#loc245)
      } loc(#loc244)
    } loc(#loc243)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc188)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc155)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc155)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc249)
          %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc161)
          %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc161)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc160)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc161)
          %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc161)
          cir.store %11, %6 : !s8i, !cir.ptr<!s8i> loc(#loc249)
          %12 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc162)
          cir.call @printHexCharLine(%12) : (!s8i) -> () loc(#loc163)
        } loc(#loc248)
      } loc(#loc247)
    } loc(#loc246)
    cir.return loc(#loc137)
  } loc(#loc240)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc251)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc168)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc168)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc252)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc188)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc172)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc172)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc174)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc175)
        %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc175)
        cir.store %8, %0 : !s8i, !cir.ptr<!s8i> loc(#loc255)
      } loc(#loc254)
    } loc(#loc253)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc188)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc179)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc179)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc259)
          %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc185)
          %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc185)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc184)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc185)
          %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc185)
          cir.store %11, %6 : !s8i, !cir.ptr<!s8i> loc(#loc259)
          %12 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc186)
          cir.call @printHexCharLine(%12) : (!s8i) -> () loc(#loc187)
        } loc(#loc258)
      } loc(#loc257)
    } loc(#loc256)
    cir.return loc(#loc165)
  } loc(#loc250)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_sub_05.c":0:0)
#loc1 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":23:1)
#loc2 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":23:25)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc7 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":28:1)
#loc8 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":45:1)
#loc9 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":30:5)
#loc10 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":30:10)
#loc11 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":31:12)
#loc12 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":31:5)
#loc13 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":32:5)
#loc14 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":36:5)
#loc15 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":32:8)
#loc16 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":33:5)
#loc17 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":35:22)
#loc18 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":35:9)
#loc19 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":37:5)
#loc20 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":44:5)
#loc21 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":37:8)
#loc22 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":38:5)
#loc23 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":39:9)
#loc24 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":43:9)
#loc25 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":41:13)
#loc26 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":41:34)
#loc27 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":41:27)
#loc28 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":42:30)
#loc29 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":42:13)
#loc30 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":151:1)
#loc31 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":157:1)
#loc32 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":153:5)
#loc33 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":153:14)
#loc34 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":154:5)
#loc35 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":154:14)
#loc36 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":155:5)
#loc37 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":155:14)
#loc38 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":156:5)
#loc39 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":156:14)
#loc40 = loc("/usr/include/stdlib.h":575:1)
#loc41 = loc("/usr/include/stdlib.h":575:41)
#loc42 = loc("/usr/include/time.h":76:1)
#loc43 = loc("/usr/include/time.h":76:38)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":173:15)
#loc47 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":175:15)
#loc48 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":178:15)
#loc49 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":180:15)
#loc50 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":168:1)
#loc51 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":183:1)
#loc56 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":169:1)
#loc57 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":171:27)
#loc58 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":171:22)
#loc59 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":171:5)
#loc60 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":173:5)
#loc61 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":174:5)
#loc62 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":174:53)
#loc63 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":175:5)
#loc64 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":178:5)
#loc65 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":179:5)
#loc66 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":179:52)
#loc67 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":180:5)
#loc68 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":182:12)
#loc69 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":182:5)
#loc70 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":24:1)
#loc71 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":24:26)
#loc72 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":64:19)
#loc73 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":76:23)
#loc74 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":52:1)
#loc75 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":79:1)
#loc76 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":54:5)
#loc77 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":54:10)
#loc78 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":55:12)
#loc79 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":55:5)
#loc80 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":56:5)
#loc81 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":60:5)
#loc82 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":56:8)
#loc83 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":57:5)
#loc84 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":59:22)
#loc85 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":59:9)
#loc86 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":61:5)
#loc87 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":78:5)
#loc88 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":61:8)
#loc89 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":62:5)
#loc90 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":65:5)
#loc91 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":67:5)
#loc92 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":64:9)
#loc93 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":69:9)
#loc94 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":77:9)
#loc95 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":69:13)
#loc96 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":69:20)
#loc97 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":70:9)
#loc98 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":73:9)
#loc99 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":75:9)
#loc100 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":71:13)
#loc101 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":71:34)
#loc102 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":71:27)
#loc103 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":72:30)
#loc104 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":72:13)
#loc105 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":76:13)
#loc106 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":82:1)
#loc107 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":104:1)
#loc108 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":84:5)
#loc109 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":84:10)
#loc110 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":85:12)
#loc111 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":85:5)
#loc112 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":86:5)
#loc113 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":90:5)
#loc114 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":86:8)
#loc115 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":87:5)
#loc116 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":89:22)
#loc117 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":89:9)
#loc118 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":91:5)
#loc119 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":103:5)
#loc120 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":91:8)
#loc121 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":92:5)
#loc122 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":94:9)
#loc123 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":102:9)
#loc124 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":94:13)
#loc125 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":94:20)
#loc126 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":95:9)
#loc127 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":98:9)
#loc128 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":100:9)
#loc129 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":96:13)
#loc130 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":96:34)
#loc131 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":96:27)
#loc132 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":97:30)
#loc133 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":97:13)
#loc134 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":101:23)
#loc135 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":101:13)
#loc136 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":107:1)
#loc137 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":129:1)
#loc138 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":109:5)
#loc139 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":109:10)
#loc140 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":110:12)
#loc141 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":110:5)
#loc142 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":111:5)
#loc143 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":120:5)
#loc144 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":111:8)
#loc145 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":112:5)
#loc146 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":115:5)
#loc147 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":117:5)
#loc148 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":114:19)
#loc149 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":114:9)
#loc150 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":119:17)
#loc151 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":119:16)
#loc152 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":119:9)
#loc153 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":121:5)
#loc154 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":128:5)
#loc155 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":121:8)
#loc156 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":122:5)
#loc157 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":123:9)
#loc158 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":127:9)
#loc159 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":125:13)
#loc160 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":125:34)
#loc161 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":125:27)
#loc162 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":126:30)
#loc163 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":126:13)
#loc164 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":132:1)
#loc165 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":149:1)
#loc166 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":134:5)
#loc167 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":134:10)
#loc168 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":135:12)
#loc169 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":135:5)
#loc170 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":136:5)
#loc171 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":140:5)
#loc172 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":136:8)
#loc173 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":137:5)
#loc174 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":139:17)
#loc175 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":139:16)
#loc176 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":139:9)
#loc177 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":141:5)
#loc178 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":148:5)
#loc179 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":141:8)
#loc180 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":142:5)
#loc181 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":143:9)
#loc182 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":147:9)
#loc183 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":145:13)
#loc184 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":145:34)
#loc185 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":145:27)
#loc186 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":146:30)
#loc187 = loc("CWE191_Integer_Underflow__char_rand_sub_05.c":146:13)
#loc188 = loc(fused[#loc1, #loc2])
#loc189 = loc(fused[#loc3, #loc4])
#loc190 = loc(fused[#loc5, #loc6])
#loc191 = loc(fused[#loc7, #loc8])
#loc192 = loc(fused[#loc9, #loc10])
#loc193 = loc(fused[#loc12, #loc11])
#loc194 = loc(fused[#loc13, #loc14])
#loc195 = loc(fused[#loc16, #loc14])
#loc196 = loc(fused[#loc18, #loc17])
#loc197 = loc(fused[#loc19, #loc20])
#loc198 = loc(fused[#loc22, #loc20])
#loc199 = loc(fused[#loc23, #loc24])
#loc200 = loc(fused[#loc25, #loc26])
#loc201 = loc(fused[#loc30, #loc31])
#loc202 = loc(fused[#loc32, #loc33])
#loc203 = loc(fused[#loc34, #loc35])
#loc204 = loc(fused[#loc36, #loc37])
#loc205 = loc(fused[#loc38, #loc39])
#loc206 = loc(fused[#loc40, #loc41])
#loc207 = loc(fused[#loc42, #loc43])
#loc208 = loc(fused[#loc44, #loc45])
#loc209 = loc(fused[#loc50, #loc51])
#loc212 = loc(fused[#loc61, #loc62])
#loc213 = loc(fused[#loc65, #loc66])
#loc214 = loc(fused[#loc69, #loc68])
#loc215 = loc(fused[#loc70, #loc71])
#loc216 = loc(fused[#loc74, #loc75])
#loc217 = loc(fused[#loc76, #loc77])
#loc218 = loc(fused[#loc79, #loc78])
#loc219 = loc(fused[#loc80, #loc81])
#loc220 = loc(fused[#loc83, #loc81])
#loc221 = loc(fused[#loc85, #loc84])
#loc222 = loc(fused[#loc86, #loc87])
#loc223 = loc(fused[#loc89, #loc90, #loc91, #loc87])
#loc224 = loc(fused[#loc93, #loc94])
#loc225 = loc(fused[#loc95, #loc96])
#loc226 = loc(fused[#loc97, #loc98, #loc99, #loc94])
#loc227 = loc(fused[#loc100, #loc101])
#loc228 = loc(fused[#loc106, #loc107])
#loc229 = loc(fused[#loc108, #loc109])
#loc230 = loc(fused[#loc111, #loc110])
#loc231 = loc(fused[#loc112, #loc113])
#loc232 = loc(fused[#loc115, #loc113])
#loc233 = loc(fused[#loc117, #loc116])
#loc234 = loc(fused[#loc118, #loc119])
#loc235 = loc(fused[#loc121, #loc119])
#loc236 = loc(fused[#loc122, #loc123])
#loc237 = loc(fused[#loc124, #loc125])
#loc238 = loc(fused[#loc126, #loc127, #loc128, #loc123])
#loc239 = loc(fused[#loc129, #loc130])
#loc240 = loc(fused[#loc136, #loc137])
#loc241 = loc(fused[#loc138, #loc139])
#loc242 = loc(fused[#loc141, #loc140])
#loc243 = loc(fused[#loc142, #loc143])
#loc244 = loc(fused[#loc145, #loc146, #loc147, #loc143])
#loc245 = loc(fused[#loc152, #loc150])
#loc246 = loc(fused[#loc153, #loc154])
#loc247 = loc(fused[#loc156, #loc154])
#loc248 = loc(fused[#loc157, #loc158])
#loc249 = loc(fused[#loc159, #loc160])
#loc250 = loc(fused[#loc164, #loc165])
#loc251 = loc(fused[#loc166, #loc167])
#loc252 = loc(fused[#loc169, #loc168])
#loc253 = loc(fused[#loc170, #loc171])
#loc254 = loc(fused[#loc173, #loc171])
#loc255 = loc(fused[#loc176, #loc174])
#loc256 = loc(fused[#loc177, #loc178])
#loc257 = loc(fused[#loc180, #loc178])
#loc258 = loc(fused[#loc181, #loc182])
#loc259 = loc(fused[#loc183, #loc184])
