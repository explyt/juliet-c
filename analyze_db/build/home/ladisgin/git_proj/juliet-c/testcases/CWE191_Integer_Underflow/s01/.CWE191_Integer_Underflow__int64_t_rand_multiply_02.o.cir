!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc17 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":29:25)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":54:25)
#loc96 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":87:25)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_rand_multiply_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc179)
  cir.func private @printLongLongLine(!s64i) loc(#loc180)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_multiply_02_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc182)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc183)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc11)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc184)
    cir.br ^bb1 loc(#loc185)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc186)
  ^bb2:  // pred: ^bb1
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc17)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %8 ^bb3, ^bb4 loc(#loc17)
  ^bb3:  // pred: ^bb2
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc17)
    %11 = cir.const #cir.int<60> : !s32i loc(#loc17)
    %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc17)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc17)
    %15 = cir.const #cir.int<45> : !s32i loc(#loc17)
    %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc17)
    %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc17)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc17)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc17)
    %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc17)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc17)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc17)
    %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc17)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc17)
    %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc17)
    cir.br ^bb5(%30 : !u64i) loc(#loc17)
  ^bb4:  // pred: ^bb2
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc17)
    %33 = cir.const #cir.int<60> : !s32i loc(#loc17)
    %34 = cir.shift(left, %32 : !u64i, %33 : !s32i) -> !u64i loc(#loc17)
    %35 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc17)
    %37 = cir.const #cir.int<45> : !s32i loc(#loc17)
    %38 = cir.shift(left, %36 : !u64i, %37 : !s32i) -> !u64i loc(#loc17)
    %39 = cir.binop(xor, %34, %38) : !u64i loc(#loc17)
    %40 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc17)
    %42 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %43 = cir.shift(left, %41 : !u64i, %42 : !s32i) -> !u64i loc(#loc17)
    %44 = cir.binop(xor, %39, %43) : !u64i loc(#loc17)
    %45 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc17)
    %47 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %48 = cir.shift(left, %46 : !u64i, %47 : !s32i) -> !u64i loc(#loc17)
    %49 = cir.binop(xor, %44, %48) : !u64i loc(#loc17)
    %50 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc17)
    %52 = cir.binop(xor, %49, %51) : !u64i loc(#loc17)
    %53 = cir.unary(minus, %52) : !u64i, !u64i loc(#loc17)
    %54 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %55 = cir.cast(integral, %54 : !s32i), !u64i loc(#loc17)
    %56 = cir.binop(sub, %53, %55) : !u64i loc(#loc17)
    cir.br ^bb5(%56 : !u64i) loc(#loc17)
  ^bb5(%57: !u64i loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":29:25)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc17)
  ^bb6:  // pred: ^bb5
    %58 = cir.cast(integral, %57 : !u64i), !s64i loc(#loc17)
    cir.store %58, %1 : !s64i, !cir.ptr<!s64i> loc(#loc187)
    cir.br ^bb7 loc(#loc14)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc14)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc188)
  ^bb9:  // pred: ^bb8
    %59 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %60 = cir.cast(int_to_bool, %59 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %60 ^bb10, ^bb15 loc(#loc189)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc190)
  ^bb11:  // pred: ^bb10
    %61 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc25)
    %62 = cir.const #cir.int<0> : !s32i loc(#loc26)
    %63 = cir.cast(integral, %62 : !s32i), !s64i loc(#loc26)
    %64 = cir.cmp(lt, %61, %63) : !s64i, !cir.bool loc(#loc191)
    cir.brcond %64 ^bb12, ^bb13 loc(#loc192)
  ^bb12:  // pred: ^bb11
    %65 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc28)
    %66 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %67 = cir.cast(integral, %66 : !s32i), !s64i loc(#loc8)
    %68 = cir.binop(mul, %65, %67) nsw : !s64i loc(#loc28)
    cir.store %68, %0 : !s64i, !cir.ptr<!s64i> loc(#loc182)
    %69 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc29)
    cir.call @printLongLongLine(%69) : (!s64i) -> () loc(#loc30)
    cir.br ^bb13 loc(#loc24)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc24)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc20)
  ^bb15:  // 2 preds: ^bb9, ^bb14
    cir.br ^bb16 loc(#loc20)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc6)
  } loc(#loc181)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_multiply_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc194)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc195)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc196)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc197)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc32)
  } loc(#loc193)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc198)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc44)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc200)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc201)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc51)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc202)
    cir.br ^bb1 loc(#loc203)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc55)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc204)
  ^bb2:  // pred: ^bb1
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc57)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc57)
    cir.brcond %8 ^bb3, ^bb4 loc(#loc57)
  ^bb3:  // pred: ^bb2
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc57)
    %11 = cir.const #cir.int<60> : !s32i loc(#loc57)
    %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc57)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc57)
    %15 = cir.const #cir.int<45> : !s32i loc(#loc57)
    %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc57)
    %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc57)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc57)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc57)
    %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc57)
    %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc57)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc57)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc57)
    %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc57)
    %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc57)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc57)
    %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc57)
    cir.br ^bb5(%30 : !u64i) loc(#loc57)
  ^bb4:  // pred: ^bb2
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc57)
    %33 = cir.const #cir.int<60> : !s32i loc(#loc57)
    %34 = cir.shift(left, %32 : !u64i, %33 : !s32i) -> !u64i loc(#loc57)
    %35 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc57)
    %37 = cir.const #cir.int<45> : !s32i loc(#loc57)
    %38 = cir.shift(left, %36 : !u64i, %37 : !s32i) -> !u64i loc(#loc57)
    %39 = cir.binop(xor, %34, %38) : !u64i loc(#loc57)
    %40 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc57)
    %42 = cir.const #cir.int<30> : !s32i loc(#loc57)
    %43 = cir.shift(left, %41 : !u64i, %42 : !s32i) -> !u64i loc(#loc57)
    %44 = cir.binop(xor, %39, %43) : !u64i loc(#loc57)
    %45 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc57)
    %47 = cir.const #cir.int<15> : !s32i loc(#loc57)
    %48 = cir.shift(left, %46 : !u64i, %47 : !s32i) -> !u64i loc(#loc57)
    %49 = cir.binop(xor, %44, %48) : !u64i loc(#loc57)
    %50 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc57)
    %52 = cir.binop(xor, %49, %51) : !u64i loc(#loc57)
    %53 = cir.unary(minus, %52) : !u64i, !u64i loc(#loc57)
    %54 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %55 = cir.cast(integral, %54 : !s32i), !u64i loc(#loc57)
    %56 = cir.binop(sub, %53, %55) : !u64i loc(#loc57)
    cir.br ^bb5(%56 : !u64i) loc(#loc57)
  ^bb5(%57: !u64i loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":54:25)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc57)
  ^bb6:  // pred: ^bb5
    %58 = cir.cast(integral, %57 : !u64i), !s64i loc(#loc57)
    cir.store %58, %1 : !s64i, !cir.ptr<!s64i> loc(#loc205)
    cir.br ^bb7 loc(#loc54)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc54)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc206)
  ^bb9:  // pred: ^bb8
    %59 = cir.const #cir.int<0> : !s32i loc(#loc61)
    %60 = cir.cast(int_to_bool, %59 : !s32i), !cir.bool loc(#loc61)
    cir.brcond %60 ^bb10, ^bb11 loc(#loc207)
  ^bb10:  // pred: ^bb9
    %61 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc43)
    %62 = cir.cast(array_to_ptrdecay, %61 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%62) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    cir.br ^bb21 loc(#loc63)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc208)
  ^bb12:  // pred: ^bb11
    %63 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc68)
    %64 = cir.const #cir.int<0> : !s32i loc(#loc69)
    %65 = cir.cast(integral, %64 : !s32i), !s64i loc(#loc69)
    %66 = cir.cmp(lt, %63, %65) : !s64i, !cir.bool loc(#loc209)
    cir.brcond %66 ^bb13, ^bb19 loc(#loc210)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc211)
  ^bb14:  // pred: ^bb13
    %67 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc73)
    %68 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc74)
    %69 = cir.unary(minus, %68) : !s64i, !s64i loc(#loc74)
    %70 = cir.const #cir.int<1> : !s64i loc(#loc74)
    %71 = cir.binop(sub, %69, %70) nsw : !s64i loc(#loc74)
    %72 = cir.const #cir.int<2> : !s32i loc(#loc75)
    %73 = cir.cast(integral, %72 : !s32i), !s64i loc(#loc75)
    %74 = cir.binop(div, %71, %73) : !s64i loc(#loc212)
    %75 = cir.cmp(gt, %67, %74) : !s64i, !cir.bool loc(#loc213)
    cir.brcond %75 ^bb15, ^bb16 loc(#loc214)
  ^bb15:  // pred: ^bb14
    %76 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc80)
    %77 = cir.const #cir.int<2> : !s32i loc(#loc48)
    %78 = cir.cast(integral, %77 : !s32i), !s64i loc(#loc48)
    %79 = cir.binop(mul, %76, %78) nsw : !s64i loc(#loc80)
    cir.store %79, %0 : !s64i, !cir.ptr<!s64i> loc(#loc200)
    %80 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc81)
    cir.call @printLongLongLine(%80) : (!s64i) -> () loc(#loc82)
    cir.br ^bb17 loc(#loc78)
  ^bb16:  // pred: ^bb14
    %81 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc44)
    %82 = cir.cast(array_to_ptrdecay, %81 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%82) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    cir.br ^bb17 loc(#loc72)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc72)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc67)
  ^bb19:  // 2 preds: ^bb12, ^bb18
    cir.br ^bb20 loc(#loc67)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc60)
  ^bb21:  // 2 preds: ^bb10, ^bb20
    cir.br ^bb22 loc(#loc60)
  ^bb22:  // pred: ^bb21
    cir.return loc(#loc46)
  } loc(#loc199)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc216)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc217)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc90)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc218)
    cir.br ^bb1 loc(#loc219)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc94)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc94)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc220)
  ^bb2:  // pred: ^bb1
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc96)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc96)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc96)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc96)
    cir.brcond %8 ^bb3, ^bb4 loc(#loc96)
  ^bb3:  // pred: ^bb2
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc96)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc96)
    %11 = cir.const #cir.int<60> : !s32i loc(#loc96)
    %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc96)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc96)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc96)
    %15 = cir.const #cir.int<45> : !s32i loc(#loc96)
    %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc96)
    %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc96)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc96)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc96)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc96)
    %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc96)
    %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc96)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc96)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc96)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc96)
    %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc96)
    %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc96)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc96)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc96)
    %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc96)
    cir.br ^bb5(%30 : !u64i) loc(#loc96)
  ^bb4:  // pred: ^bb2
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc96)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc96)
    %33 = cir.const #cir.int<60> : !s32i loc(#loc96)
    %34 = cir.shift(left, %32 : !u64i, %33 : !s32i) -> !u64i loc(#loc96)
    %35 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc96)
    %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc96)
    %37 = cir.const #cir.int<45> : !s32i loc(#loc96)
    %38 = cir.shift(left, %36 : !u64i, %37 : !s32i) -> !u64i loc(#loc96)
    %39 = cir.binop(xor, %34, %38) : !u64i loc(#loc96)
    %40 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc96)
    %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc96)
    %42 = cir.const #cir.int<30> : !s32i loc(#loc96)
    %43 = cir.shift(left, %41 : !u64i, %42 : !s32i) -> !u64i loc(#loc96)
    %44 = cir.binop(xor, %39, %43) : !u64i loc(#loc96)
    %45 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc96)
    %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc96)
    %47 = cir.const #cir.int<15> : !s32i loc(#loc96)
    %48 = cir.shift(left, %46 : !u64i, %47 : !s32i) -> !u64i loc(#loc96)
    %49 = cir.binop(xor, %44, %48) : !u64i loc(#loc96)
    %50 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc96)
    %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc96)
    %52 = cir.binop(xor, %49, %51) : !u64i loc(#loc96)
    %53 = cir.unary(minus, %52) : !u64i, !u64i loc(#loc96)
    %54 = cir.const #cir.int<1> : !s32i loc(#loc96)
    %55 = cir.cast(integral, %54 : !s32i), !u64i loc(#loc96)
    %56 = cir.binop(sub, %53, %55) : !u64i loc(#loc96)
    cir.br ^bb5(%56 : !u64i) loc(#loc96)
  ^bb5(%57: !u64i loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":87:25)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc96)
  ^bb6:  // pred: ^bb5
    %58 = cir.cast(integral, %57 : !u64i), !s64i loc(#loc96)
    cir.store %58, %1 : !s64i, !cir.ptr<!s64i> loc(#loc221)
    cir.br ^bb7 loc(#loc93)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc93)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc222)
  ^bb9:  // pred: ^bb8
    %59 = cir.const #cir.int<1> : !s32i loc(#loc100)
    %60 = cir.cast(int_to_bool, %59 : !s32i), !cir.bool loc(#loc100)
    cir.brcond %60 ^bb10, ^bb20 loc(#loc223)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc224)
  ^bb11:  // pred: ^bb10
    %61 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc104)
    %62 = cir.const #cir.int<0> : !s32i loc(#loc105)
    %63 = cir.cast(integral, %62 : !s32i), !s64i loc(#loc105)
    %64 = cir.cmp(lt, %61, %63) : !s64i, !cir.bool loc(#loc225)
    cir.brcond %64 ^bb12, ^bb18 loc(#loc226)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc227)
  ^bb13:  // pred: ^bb12
    %65 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc109)
    %66 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc110)
    %67 = cir.unary(minus, %66) : !s64i, !s64i loc(#loc110)
    %68 = cir.const #cir.int<1> : !s64i loc(#loc110)
    %69 = cir.binop(sub, %67, %68) nsw : !s64i loc(#loc110)
    %70 = cir.const #cir.int<2> : !s32i loc(#loc111)
    %71 = cir.cast(integral, %70 : !s32i), !s64i loc(#loc111)
    %72 = cir.binop(div, %69, %71) : !s64i loc(#loc228)
    %73 = cir.cmp(gt, %65, %72) : !s64i, !cir.bool loc(#loc229)
    cir.brcond %73 ^bb14, ^bb15 loc(#loc230)
  ^bb14:  // pred: ^bb13
    %74 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc116)
    %75 = cir.const #cir.int<2> : !s32i loc(#loc87)
    %76 = cir.cast(integral, %75 : !s32i), !s64i loc(#loc87)
    %77 = cir.binop(mul, %74, %76) nsw : !s64i loc(#loc116)
    cir.store %77, %0 : !s64i, !cir.ptr<!s64i> loc(#loc216)
    %78 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc117)
    cir.call @printLongLongLine(%78) : (!s64i) -> () loc(#loc118)
    cir.br ^bb16 loc(#loc114)
  ^bb15:  // pred: ^bb13
    %79 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc119)
    %80 = cir.cast(array_to_ptrdecay, %79 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc119)
    cir.call @printLine(%80) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    cir.br ^bb16 loc(#loc108)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc108)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc103)
  ^bb18:  // 2 preds: ^bb11, ^bb17
    cir.br ^bb19 loc(#loc103)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc99)
  ^bb20:  // 2 preds: ^bb9, ^bb19
    cir.br ^bb21 loc(#loc99)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc85)
  } loc(#loc215)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc232)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc233)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc127)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc234)
    cir.br ^bb1 loc(#loc235)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<0> : !s32i loc(#loc131)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc131)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc236)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc135)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc135)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc136)
    cir.br ^bb4 loc(#loc133)
  ^bb3:  // pred: ^bb1
    %7 = cir.const #cir.int<2> : !s32i loc(#loc137)
    %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc138)
    %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc138)
    cir.store %9, %1 : !s64i, !cir.ptr<!s64i> loc(#loc237)
    cir.br ^bb4 loc(#loc130)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc130)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc238)
  ^bb6:  // pred: ^bb5
    %10 = cir.const #cir.int<1> : !s32i loc(#loc142)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc142)
    cir.brcond %11 ^bb7, ^bb12 loc(#loc239)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc240)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc146)
    %13 = cir.const #cir.int<0> : !s32i loc(#loc147)
    %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc147)
    %15 = cir.cmp(lt, %12, %14) : !s64i, !cir.bool loc(#loc241)
    cir.brcond %15 ^bb9, ^bb10 loc(#loc242)
  ^bb9:  // pred: ^bb8
    %16 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc149)
    %17 = cir.const #cir.int<2> : !s32i loc(#loc124)
    %18 = cir.cast(integral, %17 : !s32i), !s64i loc(#loc124)
    %19 = cir.binop(mul, %16, %18) nsw : !s64i loc(#loc149)
    cir.store %19, %0 : !s64i, !cir.ptr<!s64i> loc(#loc232)
    %20 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc150)
    cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc151)
    cir.br ^bb10 loc(#loc145)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc145)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc141)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc141)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc122)
  } loc(#loc231)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc244)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc245)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc158)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc246)
    cir.br ^bb1 loc(#loc247)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc162)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc162)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc248)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<2> : !s32i loc(#loc164)
    %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc165)
    %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc165)
    cir.store %7, %1 : !s64i, !cir.ptr<!s64i> loc(#loc249)
    cir.br ^bb3 loc(#loc161)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc161)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc250)
  ^bb5:  // pred: ^bb4
    %8 = cir.const #cir.int<1> : !s32i loc(#loc169)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc169)
    cir.brcond %9 ^bb6, ^bb11 loc(#loc251)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc252)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc173)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc174)
    %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc174)
    %13 = cir.cmp(lt, %10, %12) : !s64i, !cir.bool loc(#loc253)
    cir.brcond %13 ^bb8, ^bb9 loc(#loc254)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc176)
    %15 = cir.const #cir.int<2> : !s32i loc(#loc155)
    %16 = cir.cast(integral, %15 : !s32i), !s64i loc(#loc155)
    %17 = cir.binop(mul, %14, %16) nsw : !s64i loc(#loc176)
    cir.store %17, %0 : !s64i, !cir.ptr<!s64i> loc(#loc244)
    %18 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc177)
    cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc178)
    cir.br ^bb9 loc(#loc172)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc172)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc168)
  ^bb11:  // 2 preds: ^bb5, ^bb10
    cir.br ^bb12 loc(#loc168)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc153)
  } loc(#loc243)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":40:1)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":36:13)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":36:37)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":24:5)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":24:13)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":25:12)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":25:5)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":26:5)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":30:5)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":26:8)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":27:5)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":29:9)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":31:5)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":39:5)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":31:8)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":32:5)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":33:9)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":38:9)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":33:12)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":33:19)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":34:9)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":36:30)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":37:31)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":37:13)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":154:1)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":160:1)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":156:5)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":156:14)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":157:5)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":157:14)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":158:5)
#loc38 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":158:14)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":159:5)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":159:14)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":59:19)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":73:27)
#loc45 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":47:1)
#loc46 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":77:1)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":68:17)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":68:41)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":49:5)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":49:13)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":50:12)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":50:5)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":51:5)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":55:5)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":51:8)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":52:5)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":54:9)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":56:5)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":76:5)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":56:8)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":57:5)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":60:5)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":62:5)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":59:9)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":63:9)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":75:9)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":63:12)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":63:19)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":64:9)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":66:13)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":74:13)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":66:17)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":66:25)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":66:35)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":66:36)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":67:13)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":70:13)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":72:13)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":68:34)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":69:35)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":69:17)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":73:17)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":80:1)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":105:1)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":96:17)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":96:41)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":82:5)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":82:13)
#loc90 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":83:12)
#loc91 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":83:5)
#loc92 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":84:5)
#loc93 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":88:5)
#loc94 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":84:8)
#loc95 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":85:5)
#loc97 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":87:9)
#loc98 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":89:5)
#loc99 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":104:5)
#loc100 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":89:8)
#loc101 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":90:5)
#loc102 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":91:9)
#loc103 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":103:9)
#loc104 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":91:12)
#loc105 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":91:19)
#loc106 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":92:9)
#loc107 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":94:13)
#loc108 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":102:13)
#loc109 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":94:17)
#loc110 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":94:25)
#loc111 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":94:35)
#loc112 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":94:36)
#loc113 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":95:13)
#loc114 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":98:13)
#loc115 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":100:13)
#loc116 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":96:34)
#loc117 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":97:35)
#loc118 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":97:17)
#loc119 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":101:27)
#loc120 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":101:17)
#loc121 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":108:1)
#loc122 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":131:1)
#loc123 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":127:13)
#loc124 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":127:37)
#loc125 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":110:5)
#loc126 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":110:13)
#loc127 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":111:12)
#loc128 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":111:5)
#loc129 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":112:5)
#loc130 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":121:5)
#loc131 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":112:8)
#loc132 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":113:5)
#loc133 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":116:5)
#loc134 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":118:5)
#loc135 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":115:19)
#loc136 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":115:9)
#loc137 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":120:17)
#loc138 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":120:16)
#loc139 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":120:9)
#loc140 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":122:5)
#loc141 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":130:5)
#loc142 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":122:8)
#loc143 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":123:5)
#loc144 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":124:9)
#loc145 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":129:9)
#loc146 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":124:12)
#loc147 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":124:19)
#loc148 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":125:9)
#loc149 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":127:30)
#loc150 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":128:31)
#loc151 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":128:13)
#loc152 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":134:1)
#loc153 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":152:1)
#loc154 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":148:13)
#loc155 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":148:37)
#loc156 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":136:5)
#loc157 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":136:13)
#loc158 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":137:12)
#loc159 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":137:5)
#loc160 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":138:5)
#loc161 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":142:5)
#loc162 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":138:8)
#loc163 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":139:5)
#loc164 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":141:17)
#loc165 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":141:16)
#loc166 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":141:9)
#loc167 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":143:5)
#loc168 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":151:5)
#loc169 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":143:8)
#loc170 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":144:5)
#loc171 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":145:9)
#loc172 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":150:9)
#loc173 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":145:12)
#loc174 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":145:19)
#loc175 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":146:9)
#loc176 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":148:30)
#loc177 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":149:31)
#loc178 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_02.c":149:13)
#loc179 = loc(fused[#loc1, #loc2])
#loc180 = loc(fused[#loc3, #loc4])
#loc181 = loc(fused[#loc5, #loc6])
#loc182 = loc(fused[#loc7, #loc8])
#loc183 = loc(fused[#loc9, #loc10])
#loc184 = loc(fused[#loc12, #loc11])
#loc185 = loc(fused[#loc13, #loc14])
#loc186 = loc(fused[#loc16, #loc14])
#loc187 = loc(fused[#loc18, #loc17])
#loc188 = loc(fused[#loc19, #loc20])
#loc189 = loc(fused[#loc22, #loc20])
#loc190 = loc(fused[#loc23, #loc24])
#loc191 = loc(fused[#loc25, #loc26])
#loc192 = loc(fused[#loc27, #loc24])
#loc193 = loc(fused[#loc31, #loc32])
#loc194 = loc(fused[#loc33, #loc34])
#loc195 = loc(fused[#loc35, #loc36])
#loc196 = loc(fused[#loc37, #loc38])
#loc197 = loc(fused[#loc39, #loc40])
#loc198 = loc(fused[#loc41, #loc42])
#loc199 = loc(fused[#loc45, #loc46])
#loc200 = loc(fused[#loc47, #loc48])
#loc201 = loc(fused[#loc49, #loc50])
#loc202 = loc(fused[#loc52, #loc51])
#loc203 = loc(fused[#loc53, #loc54])
#loc204 = loc(fused[#loc56, #loc54])
#loc205 = loc(fused[#loc58, #loc57])
#loc206 = loc(fused[#loc59, #loc60])
#loc207 = loc(fused[#loc62, #loc63, #loc64, #loc60])
#loc208 = loc(fused[#loc66, #loc67])
#loc209 = loc(fused[#loc68, #loc69])
#loc210 = loc(fused[#loc70, #loc67])
#loc211 = loc(fused[#loc71, #loc72])
#loc212 = loc(fused[#loc74, #loc75])
#loc213 = loc(fused[#loc73, #loc76])
#loc214 = loc(fused[#loc77, #loc78, #loc79, #loc72])
#loc215 = loc(fused[#loc84, #loc85])
#loc216 = loc(fused[#loc86, #loc87])
#loc217 = loc(fused[#loc88, #loc89])
#loc218 = loc(fused[#loc91, #loc90])
#loc219 = loc(fused[#loc92, #loc93])
#loc220 = loc(fused[#loc95, #loc93])
#loc221 = loc(fused[#loc97, #loc96])
#loc222 = loc(fused[#loc98, #loc99])
#loc223 = loc(fused[#loc101, #loc99])
#loc224 = loc(fused[#loc102, #loc103])
#loc225 = loc(fused[#loc104, #loc105])
#loc226 = loc(fused[#loc106, #loc103])
#loc227 = loc(fused[#loc107, #loc108])
#loc228 = loc(fused[#loc110, #loc111])
#loc229 = loc(fused[#loc109, #loc112])
#loc230 = loc(fused[#loc113, #loc114, #loc115, #loc108])
#loc231 = loc(fused[#loc121, #loc122])
#loc232 = loc(fused[#loc123, #loc124])
#loc233 = loc(fused[#loc125, #loc126])
#loc234 = loc(fused[#loc128, #loc127])
#loc235 = loc(fused[#loc129, #loc130])
#loc236 = loc(fused[#loc132, #loc133, #loc134, #loc130])
#loc237 = loc(fused[#loc139, #loc137])
#loc238 = loc(fused[#loc140, #loc141])
#loc239 = loc(fused[#loc143, #loc141])
#loc240 = loc(fused[#loc144, #loc145])
#loc241 = loc(fused[#loc146, #loc147])
#loc242 = loc(fused[#loc148, #loc145])
#loc243 = loc(fused[#loc152, #loc153])
#loc244 = loc(fused[#loc154, #loc155])
#loc245 = loc(fused[#loc156, #loc157])
#loc246 = loc(fused[#loc159, #loc158])
#loc247 = loc(fused[#loc160, #loc161])
#loc248 = loc(fused[#loc163, #loc161])
#loc249 = loc(fused[#loc166, #loc164])
#loc250 = loc(fused[#loc167, #loc168])
#loc251 = loc(fused[#loc170, #loc168])
#loc252 = loc(fused[#loc171, #loc172])
#loc253 = loc(fused[#loc173, #loc174])
#loc254 = loc(fused[#loc175, #loc172])
