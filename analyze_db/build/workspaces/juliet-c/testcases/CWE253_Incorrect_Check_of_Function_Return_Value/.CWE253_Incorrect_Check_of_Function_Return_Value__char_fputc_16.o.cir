!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @fputc(!s32i, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc43)
  cir.global "private" external @stdout : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc44)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fputc failed!\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16_bad() extra(#fn_attr) {
    cir.br ^bb1 loc(#loc47)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc47)
  ^bb2:  // 2 preds: ^bb1, ^bb9
    %0 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc12)
    cir.brcond %1 ^bb3, ^bb10 loc(#loc12)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc48)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc49)
  ^bb5:  // pred: ^bb4
    %2 = cir.const #cir.int<65> : !s32i loc(#loc16)
    %3 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc44)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc17)
    %5 = cir.call @fputc(%2, %4) : (!s32i, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc18)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc19)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc50)
    cir.brcond %7 ^bb6, ^bb7 loc(#loc51)
  ^bb6:  // pred: ^bb5
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc7)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc21)
    cir.br ^bb7 loc(#loc15)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc15)
  ^bb8:  // pred: ^bb7
    cir.br ^bb10 loc(#loc22)
  ^bb9:  // no predecessors
    cir.br ^bb2 loc(#loc11)
  ^bb10:  // 2 preds: ^bb2, ^bb8
    cir.br ^bb11 loc(#loc11)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc9)
  } loc(#loc46)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc53)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc25)
    cir.return loc(#loc24)
  } loc(#loc52)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.br ^bb1 loc(#loc55)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc55)
  ^bb2:  // 2 preds: ^bb1, ^bb9
    %0 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc31)
    cir.brcond %1 ^bb3, ^bb10 loc(#loc31)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc56)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc57)
  ^bb5:  // pred: ^bb4
    %2 = cir.const #cir.int<65> : !s32i loc(#loc35)
    %3 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc44)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc36)
    %5 = cir.call @fputc(%2, %4) : (!s32i, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc37)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc38)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc38)
    %8 = cir.cmp(eq, %5, %7) : !s32i, !cir.bool loc(#loc58)
    cir.brcond %8 ^bb6, ^bb7 loc(#loc59)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc40)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc41)
    cir.br ^bb7 loc(#loc34)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc34)
  ^bb8:  // pred: ^bb7
    cir.br ^bb10 loc(#loc42)
  ^bb9:  // no predecessors
    cir.br ^bb2 loc(#loc30)
  ^bb10:  // 2 preds: ^bb2, ^bb8
    cir.br ^bb11 loc(#loc30)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc28)
  } loc(#loc54)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":611:1)
#loc2 = loc("/usr/include/stdio.h":611:44)
#loc3 = loc("/usr/include/stdio.h":150:1)
#loc4 = loc("/usr/include/stdio.h":150:14)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":32:23)
#loc8 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":24:1)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":36:1)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":26:5)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":35:5)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":26:11)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":27:5)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":30:9)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":33:9)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":30:24)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":30:29)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":30:13)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":30:40)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":31:9)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":32:13)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":34:9)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":56:1)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":59:1)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":58:5)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":58:11)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":43:1)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":54:1)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":45:5)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":53:5)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":45:11)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":46:5)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":48:9)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":51:9)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":48:24)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":48:29)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":48:13)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":48:40)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":49:9)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":50:23)
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":50:13)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_16.c":52:9)
#loc43 = loc(fused[#loc1, #loc2])
#loc44 = loc(fused[#loc3, #loc4])
#loc45 = loc(fused[#loc5, #loc6])
#loc46 = loc(fused[#loc8, #loc9])
#loc47 = loc(fused[#loc10, #loc11])
#loc48 = loc(fused[#loc13, #loc11])
#loc49 = loc(fused[#loc14, #loc15])
#loc50 = loc(fused[#loc18, #loc19])
#loc51 = loc(fused[#loc20, #loc15])
#loc52 = loc(fused[#loc23, #loc24])
#loc53 = loc(fused[#loc25, #loc26])
#loc54 = loc(fused[#loc27, #loc28])
#loc55 = loc(fused[#loc29, #loc30])
#loc56 = loc(fused[#loc32, #loc30])
#loc57 = loc(fused[#loc33, #loc34])
#loc58 = loc(fused[#loc37, #loc38])
#loc59 = loc(fused[#loc39, #loc34])
