!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc23 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":47:21)
#loc24 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":47:25)
#loc179 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":375:10)
#loc180 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":375:14)
#loc181 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":375:20)
#loc182 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":375:32)
#loc203 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":144:26)
#loc204 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":144:30)
#loc350 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":244:26)
#loc351 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":244:30)
#loc495 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":339:25)
#loc496 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":339:29)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc529 = loc(fused[#loc23, #loc24])
#loc588 = loc(fused[#loc179, #loc180])
#loc589 = loc(fused[#loc181, #loc182])
#loc595 = loc(fused[#loc203, #loc204])
#loc651 = loc(fused[#loc350, #loc351])
#loc707 = loc(fused[#loc495, #loc496])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc518)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc519)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc520)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc521)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc522)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc523)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc524)
  cir.func private @close(!s32i) -> !s32i loc(#loc525)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc526)
  cir.func private @printIntLine(!s32i) loc(#loc527)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc23, #loc24])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc529)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc25)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc526)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc28)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc28)
      cir.if %3 {
        %4 = cir.const #cir.int<100> : !s32i loc(#loc30)
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
        %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc532)
        cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc32)
      } loc(#loc531)
    } loc(#loc530)
    cir.return loc(#loc22)
  } loc(#loc528)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_modulo_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc534)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc38)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc535)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc537)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc538)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc539)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc540)
      %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc541)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc47)
      %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc47)
      cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc539)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc49)
      %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc49)
      cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc540)
      cir.scope {
        cir.do {
          %15 = cir.const #cir.int<2> : !s32i loc(#loc54)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc55)
          %17 = cir.const #cir.int<6> : !s32i loc(#loc56)
          %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc57)
          cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc543)
          cir.scope {
            %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc62)
            %61 = cir.const #cir.int<1> : !s32i loc(#loc63)
            %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc63)
            %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc545)
            cir.if %63 {
              cir.break loc(#loc65)
            } loc(#loc546)
          } loc(#loc544)
          %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc547)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc68)
          %21 = cir.const #cir.int<16> : !u64i loc(#loc548)
          cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc549)
          %22 = cir.const #cir.int<2> : !s32i loc(#loc73)
          %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc73)
          %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
          cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc550)
          %25 = cir.const #cir.int<0> : !s32i loc(#loc76)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc76)
          %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
          %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
          cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc551)
          %29 = cir.const #cir.int<27015> : !s32i loc(#loc80)
          %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc80)
          %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc81)
          %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
          cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc552)
          cir.scope {
            %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc87)
            %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc554)
            %62 = cir.const #cir.int<16> : !u64i loc(#loc555)
            %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc555)
            %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc92)
            %65 = cir.const #cir.int<1> : !s32i loc(#loc93)
            %66 = cir.unary(minus, %65) : !s32i, !s32i loc(#loc93)
            %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc556)
            cir.if %67 {
              cir.break loc(#loc95)
            } loc(#loc557)
          } loc(#loc553)
          cir.scope {
            %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc98)
            %61 = cir.const #cir.int<5> : !s32i loc(#loc99)
            %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc100)
            %63 = cir.const #cir.int<1> : !s32i loc(#loc101)
            %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc101)
            %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc559)
            cir.if %65 {
              cir.break loc(#loc103)
            } loc(#loc560)
          } loc(#loc558)
          %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc104)
          %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc105)
          %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc106)
          %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc107)
          cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc561)
          cir.scope {
            %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc112)
            %61 = cir.const #cir.int<1> : !s32i loc(#loc113)
            %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc113)
            %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc563)
            cir.if %63 {
              cir.break loc(#loc115)
            } loc(#loc564)
          } loc(#loc562)
          %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc116)
          %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc117)
          %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc117)
          %40 = cir.const #cir.int<3> : !s32i loc(#loc118)
          %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc118)
          %42 = cir.const #cir.int<4> : !u64i loc(#loc118)
          %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc118)
          %44 = cir.const #cir.int<2> : !s32i loc(#loc118)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc118)
          %46 = cir.binop(add, %43, %45) : !u64i loc(#loc118)
          %47 = cir.const #cir.int<1> : !s32i loc(#loc119)
          %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc119)
          %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc565)
          %50 = cir.const #cir.int<0> : !s32i loc(#loc120)
          %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc121)
          %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc121)
          cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc566)
          cir.scope {
            %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc126)
            %61 = cir.const #cir.int<1> : !s32i loc(#loc127)
            %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc127)
            %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc568)
            %64 = cir.ternary(%63, true {
              %65 = cir.const #true loc(#loc128)
              cir.yield %65 : !cir.bool loc(#loc128)
            }, false {
              %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc129)
              %66 = cir.const #cir.int<0> : !s32i loc(#loc130)
              %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc569)
              %68 = cir.ternary(%67, true {
                %69 = cir.const #true loc(#loc128)
                cir.yield %69 : !cir.bool loc(#loc128)
              }, false {
                %69 = cir.const #false loc(#loc128)
                cir.yield %69 : !cir.bool loc(#loc128)
              }) : (!cir.bool) -> !cir.bool loc(#loc128)
              cir.yield %68 : !cir.bool loc(#loc128)
            }) : (!cir.bool) -> !cir.bool loc(#loc128)
            cir.if %64 {
              cir.break loc(#loc132)
            } loc(#loc570)
          } loc(#loc567)
          %53 = cir.const #cir.int<0> : !s32i loc(#loc133)
          %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc133)
          %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc134)
          %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc135)
          %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc135)
          cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc571)
          %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc136)
          %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc137)
          cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc572)
          cir.yield loc(#loc53)
        } while {
          %15 = cir.const #cir.int<0> : !s32i loc(#loc140)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc140)
          cir.condition(%16) loc(#loc140)
        } loc(#loc542)
      } loc(#loc542)
      cir.scope {
        %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc143)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc144)
        %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc144)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc574)
        cir.if %18 {
          %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc146)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc147)
        } loc(#loc575)
      } loc(#loc573)
      cir.scope {
        %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc150)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc151)
        %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc151)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc577)
        cir.if %18 {
          %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc153)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc154)
        } loc(#loc578)
      } loc(#loc576)
    } loc(#loc536)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc155)
    %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc526)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc579)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    cir.call @badSink(%5) : (!s32i) -> () loc(#loc158)
    cir.return loc(#loc34)
  } loc(#loc533)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_modulo_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc581)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc161)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc582)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc163)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc583)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc165)
    cir.return loc(#loc160)
  } loc(#loc580)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc584)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc585)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc586)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc173)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc174)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc175)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc176)
  cir.func @main(%arg0: !s32i loc(fused[#loc179, #loc180]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc181, #loc182])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc588)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc589)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc178)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc183)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc184)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc185)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc185)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc186)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc173)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc173)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc187)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_listen_socket_modulo_21_good : !cir.ptr<!cir.func<!void ()>> loc(#loc590)
    cir.call @CWE369_Divide_by_Zero__int_listen_socket_modulo_21_good() : () -> () loc(#loc188)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc174)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc174)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc190)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc175)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc175)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc191)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_listen_socket_modulo_21_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc591)
    cir.call @CWE369_Divide_by_Zero__int_listen_socket_modulo_21_bad() : () -> () loc(#loc192)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc176)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc176)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc194)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc195)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc592)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc592)
    cir.return %17 : !s32i loc(#loc592)
  } loc(#loc587)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc593)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc199)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc200)
  cir.func internal private @goodB2G1Sink(%arg0: !s32i loc(fused[#loc203, #loc204])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc595)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc205)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc593)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc208)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc208)
      cir.if %3 {
        %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc199)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc199)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc212)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc215)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc216)
          %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc599)
          cir.if %6 {
            %7 = cir.const #cir.int<100> : !s32i loc(#loc220)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc221)
            %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc601)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc222)
          } else {
            %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc200)
            %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc200)
            cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc223)
          } loc(#loc600)
        } loc(#loc598)
      } loc(#loc597)
    } loc(#loc596)
    cir.return loc(#loc202)
  } loc(#loc594)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc603)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc228)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc229)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc604)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc606)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc607)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc608)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc609)
      %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc610)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc238)
      %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc238)
      cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc608)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc240)
      %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc240)
      cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc609)
      cir.scope {
        cir.do {
          %15 = cir.const #cir.int<2> : !s32i loc(#loc245)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc246)
          %17 = cir.const #cir.int<6> : !s32i loc(#loc247)
          %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc248)
          cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc612)
          cir.scope {
            %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc253)
            %61 = cir.const #cir.int<1> : !s32i loc(#loc254)
            %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc254)
            %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc614)
            cir.if %63 {
              cir.break loc(#loc256)
            } loc(#loc615)
          } loc(#loc613)
          %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc616)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc259)
          %21 = cir.const #cir.int<16> : !u64i loc(#loc617)
          cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc618)
          %22 = cir.const #cir.int<2> : !s32i loc(#loc264)
          %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc264)
          %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
          cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc619)
          %25 = cir.const #cir.int<0> : !s32i loc(#loc266)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc266)
          %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
          %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
          cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc620)
          %29 = cir.const #cir.int<27015> : !s32i loc(#loc268)
          %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc268)
          %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc269)
          %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
          cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc621)
          cir.scope {
            %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc274)
            %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc623)
            %62 = cir.const #cir.int<16> : !u64i loc(#loc624)
            %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc624)
            %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc279)
            %65 = cir.const #cir.int<1> : !s32i loc(#loc280)
            %66 = cir.unary(minus, %65) : !s32i, !s32i loc(#loc280)
            %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc625)
            cir.if %67 {
              cir.break loc(#loc282)
            } loc(#loc626)
          } loc(#loc622)
          cir.scope {
            %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc285)
            %61 = cir.const #cir.int<5> : !s32i loc(#loc286)
            %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc287)
            %63 = cir.const #cir.int<1> : !s32i loc(#loc288)
            %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc288)
            %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc628)
            cir.if %65 {
              cir.break loc(#loc290)
            } loc(#loc629)
          } loc(#loc627)
          %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc291)
          %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc292)
          %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc293)
          %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc294)
          cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc630)
          cir.scope {
            %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc299)
            %61 = cir.const #cir.int<1> : !s32i loc(#loc300)
            %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc300)
            %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc632)
            cir.if %63 {
              cir.break loc(#loc302)
            } loc(#loc633)
          } loc(#loc631)
          %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc303)
          %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc304)
          %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc304)
          %40 = cir.const #cir.int<3> : !s32i loc(#loc305)
          %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc305)
          %42 = cir.const #cir.int<4> : !u64i loc(#loc305)
          %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc305)
          %44 = cir.const #cir.int<2> : !s32i loc(#loc305)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc305)
          %46 = cir.binop(add, %43, %45) : !u64i loc(#loc305)
          %47 = cir.const #cir.int<1> : !s32i loc(#loc306)
          %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc306)
          %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc634)
          %50 = cir.const #cir.int<0> : !s32i loc(#loc307)
          %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc308)
          %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc308)
          cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc635)
          cir.scope {
            %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc313)
            %61 = cir.const #cir.int<1> : !s32i loc(#loc314)
            %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc314)
            %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc637)
            %64 = cir.ternary(%63, true {
              %65 = cir.const #true loc(#loc315)
              cir.yield %65 : !cir.bool loc(#loc315)
            }, false {
              %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc316)
              %66 = cir.const #cir.int<0> : !s32i loc(#loc317)
              %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc638)
              %68 = cir.ternary(%67, true {
                %69 = cir.const #true loc(#loc315)
                cir.yield %69 : !cir.bool loc(#loc315)
              }, false {
                %69 = cir.const #false loc(#loc315)
                cir.yield %69 : !cir.bool loc(#loc315)
              }) : (!cir.bool) -> !cir.bool loc(#loc315)
              cir.yield %68 : !cir.bool loc(#loc315)
            }) : (!cir.bool) -> !cir.bool loc(#loc315)
            cir.if %64 {
              cir.break loc(#loc319)
            } loc(#loc639)
          } loc(#loc636)
          %53 = cir.const #cir.int<0> : !s32i loc(#loc320)
          %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc320)
          %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc321)
          %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc322)
          %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc322)
          cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc640)
          %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc323)
          %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc324)
          cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc641)
          cir.yield loc(#loc244)
        } while {
          %15 = cir.const #cir.int<0> : !s32i loc(#loc327)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc327)
          cir.condition(%16) loc(#loc327)
        } loc(#loc611)
      } loc(#loc611)
      cir.scope {
        %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc330)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc331)
        %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc331)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc643)
        cir.if %18 {
          %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc333)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc334)
        } loc(#loc644)
      } loc(#loc642)
      cir.scope {
        %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc337)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc338)
        %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc338)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc646)
        cir.if %18 {
          %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc340)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc341)
        } loc(#loc647)
      } loc(#loc645)
    } loc(#loc605)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc342)
    %4 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc593)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc648)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc344)
    cir.call @goodB2G1Sink(%5) : (!s32i) -> () loc(#loc345)
    cir.return loc(#loc225)
  } loc(#loc602)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc649)
  cir.func internal private @goodB2G2Sink(%arg0: !s32i loc(fused[#loc350, #loc351])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc651)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc352)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc649)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc355)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc355)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc359)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc360)
          %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc655)
          cir.if %6 {
            %7 = cir.const #cir.int<100> : !s32i loc(#loc364)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc365)
            %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc657)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc366)
          } else {
            %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc367)
            %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc367)
            cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc368)
          } loc(#loc656)
        } loc(#loc654)
      } loc(#loc653)
    } loc(#loc652)
    cir.return loc(#loc349)
  } loc(#loc650)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc659)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc373)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc374)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc660)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc662)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc663)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc664)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc665)
      %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc666)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc383)
      %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc383)
      cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc664)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc385)
      %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc385)
      cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc665)
      cir.scope {
        cir.do {
          %15 = cir.const #cir.int<2> : !s32i loc(#loc390)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc391)
          %17 = cir.const #cir.int<6> : !s32i loc(#loc392)
          %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc393)
          cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc668)
          cir.scope {
            %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc398)
            %61 = cir.const #cir.int<1> : !s32i loc(#loc399)
            %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc399)
            %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc670)
            cir.if %63 {
              cir.break loc(#loc401)
            } loc(#loc671)
          } loc(#loc669)
          %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc672)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc404)
          %21 = cir.const #cir.int<16> : !u64i loc(#loc673)
          cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc674)
          %22 = cir.const #cir.int<2> : !s32i loc(#loc409)
          %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc409)
          %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
          cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc675)
          %25 = cir.const #cir.int<0> : !s32i loc(#loc411)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc411)
          %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
          %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
          cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc676)
          %29 = cir.const #cir.int<27015> : !s32i loc(#loc413)
          %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc413)
          %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc414)
          %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
          cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc677)
          cir.scope {
            %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc419)
            %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc679)
            %62 = cir.const #cir.int<16> : !u64i loc(#loc680)
            %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc680)
            %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc424)
            %65 = cir.const #cir.int<1> : !s32i loc(#loc425)
            %66 = cir.unary(minus, %65) : !s32i, !s32i loc(#loc425)
            %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc681)
            cir.if %67 {
              cir.break loc(#loc427)
            } loc(#loc682)
          } loc(#loc678)
          cir.scope {
            %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc430)
            %61 = cir.const #cir.int<5> : !s32i loc(#loc431)
            %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc432)
            %63 = cir.const #cir.int<1> : !s32i loc(#loc433)
            %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc433)
            %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc684)
            cir.if %65 {
              cir.break loc(#loc435)
            } loc(#loc685)
          } loc(#loc683)
          %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc436)
          %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc437)
          %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc438)
          %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc439)
          cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc686)
          cir.scope {
            %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc444)
            %61 = cir.const #cir.int<1> : !s32i loc(#loc445)
            %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc445)
            %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc688)
            cir.if %63 {
              cir.break loc(#loc447)
            } loc(#loc689)
          } loc(#loc687)
          %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc448)
          %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc449)
          %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc449)
          %40 = cir.const #cir.int<3> : !s32i loc(#loc450)
          %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc450)
          %42 = cir.const #cir.int<4> : !u64i loc(#loc450)
          %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc450)
          %44 = cir.const #cir.int<2> : !s32i loc(#loc450)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc450)
          %46 = cir.binop(add, %43, %45) : !u64i loc(#loc450)
          %47 = cir.const #cir.int<1> : !s32i loc(#loc451)
          %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc451)
          %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc690)
          %50 = cir.const #cir.int<0> : !s32i loc(#loc452)
          %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc453)
          %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc453)
          cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc691)
          cir.scope {
            %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc458)
            %61 = cir.const #cir.int<1> : !s32i loc(#loc459)
            %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc459)
            %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc693)
            %64 = cir.ternary(%63, true {
              %65 = cir.const #true loc(#loc460)
              cir.yield %65 : !cir.bool loc(#loc460)
            }, false {
              %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc461)
              %66 = cir.const #cir.int<0> : !s32i loc(#loc462)
              %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc694)
              %68 = cir.ternary(%67, true {
                %69 = cir.const #true loc(#loc460)
                cir.yield %69 : !cir.bool loc(#loc460)
              }, false {
                %69 = cir.const #false loc(#loc460)
                cir.yield %69 : !cir.bool loc(#loc460)
              }) : (!cir.bool) -> !cir.bool loc(#loc460)
              cir.yield %68 : !cir.bool loc(#loc460)
            }) : (!cir.bool) -> !cir.bool loc(#loc460)
            cir.if %64 {
              cir.break loc(#loc464)
            } loc(#loc695)
          } loc(#loc692)
          %53 = cir.const #cir.int<0> : !s32i loc(#loc465)
          %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc465)
          %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc466)
          %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc467)
          %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc467)
          cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc696)
          %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc468)
          %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc469)
          cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc697)
          cir.yield loc(#loc389)
        } while {
          %15 = cir.const #cir.int<0> : !s32i loc(#loc472)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc472)
          cir.condition(%16) loc(#loc472)
        } loc(#loc667)
      } loc(#loc667)
      cir.scope {
        %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc475)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc476)
        %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc476)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc699)
        cir.if %18 {
          %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc478)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc479)
        } loc(#loc700)
      } loc(#loc698)
      cir.scope {
        %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc482)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc483)
        %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc483)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc702)
        cir.if %18 {
          %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc485)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc486)
        } loc(#loc703)
      } loc(#loc701)
    } loc(#loc661)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc487)
    %4 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc649)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc704)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc489)
    cir.call @goodB2G2Sink(%5) : (!s32i) -> () loc(#loc490)
    cir.return loc(#loc370)
  } loc(#loc658)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc705)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc495, #loc496])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc707)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc497)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc705)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc500)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc500)
      cir.if %3 {
        %4 = cir.const #cir.int<100> : !s32i loc(#loc502)
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc503)
        %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc710)
        cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc504)
      } loc(#loc709)
    } loc(#loc708)
    cir.return loc(#loc494)
  } loc(#loc706)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc712)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc509)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc510)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc713)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc512)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc714)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc514)
    %5 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc705)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc715)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc516)
    cir.call @goodG2BSink(%6) : (!s32i) -> () loc(#loc517)
    cir.return loc(#loc506)
  } loc(#loc711)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":145:1)
#loc12 = loc("/usr/include/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":45:1)
#loc18 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":45:24)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc21 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":47:1)
#loc22 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":54:1)
#loc25 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":48:1)
#loc26 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":49:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":53:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":49:8)
#loc29 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":50:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":52:22)
#loc31 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":52:28)
#loc32 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":52:9)
#loc33 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":56:1)
#loc34 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":132:1)
#loc35 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":58:5)
#loc36 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":58:9)
#loc37 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":60:13)
#loc38 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":60:12)
#loc39 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":60:5)
#loc40 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":61:5)
#loc41 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":129:5)
#loc42 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":66:9)
#loc43 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":66:13)
#loc44 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":67:9)
#loc45 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":67:28)
#loc46 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":68:9)
#loc47 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":68:31)
#loc48 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":69:9)
#loc49 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":69:31)
#loc50 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":70:9)
#loc51 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":70:41)
#loc52 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":71:9)
#loc53 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":114:17)
#loc54 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":81:35)
#loc55 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":81:44)
#loc56 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":81:57)
#loc57 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":81:28)
#loc58 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":81:13)
#loc59 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":81:68)
#loc60 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":82:13)
#loc61 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":85:13)
#loc62 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":82:17)
#loc63 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":82:33)
#loc64 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":83:13)
#loc65 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":84:17)
#loc66 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":86:20)
#loc67 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":86:21)
#loc68 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":86:30)
#loc69 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":86:33)
#loc70 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":86:47)
#loc71 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":86:13)
#loc72 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":86:48)
#loc73 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":87:34)
#loc74 = loc("/usr/include/netinet/in.h":249:5)
#loc75 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":87:13)
#loc76 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":88:39)
#loc77 = loc("/usr/include/netinet/in.h":251:20)
#loc78 = loc("/usr/include/netinet/in.h":33:15)
#loc79 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":88:13)
#loc80 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":89:38)
#loc81 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":89:32)
#loc82 = loc("/usr/include/netinet/in.h":250:15)
#loc83 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":89:13)
#loc84 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":89:46)
#loc85 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":90:13)
#loc86 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":93:13)
#loc87 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":90:22)
#loc88 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":90:54)
#loc89 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":90:55)
#loc90 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":90:64)
#loc91 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":90:78)
#loc92 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":90:17)
#loc93 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":90:84)
#loc94 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":91:13)
#loc95 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":92:17)
#loc96 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":94:13)
#loc97 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":97:13)
#loc98 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":94:24)
#loc99 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":94:38)
#loc100 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":94:17)
#loc101 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":94:57)
#loc102 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":95:13)
#loc103 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":96:17)
#loc104 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":98:35)
#loc105 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":98:49)
#loc106 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":98:55)
#loc107 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":98:28)
#loc108 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":98:13)
#loc109 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":98:59)
#loc110 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":99:13)
#loc111 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":102:13)
#loc112 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":99:17)
#loc113 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":99:33)
#loc114 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":100:13)
#loc115 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":101:17)
#loc116 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":104:31)
#loc117 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":104:45)
#loc118 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":104:58)
#loc119 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":104:76)
#loc120 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":104:79)
#loc121 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":104:26)
#loc122 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":104:13)
#loc123 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":104:80)
#loc124 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":105:13)
#loc125 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":108:13)
#loc126 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":105:17)
#loc127 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":105:31)
#loc128 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":105:44)
#loc129 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":105:47)
#loc130 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":105:61)
#loc131 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":106:13)
#loc132 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":107:17)
#loc133 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":110:39)
#loc134 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":110:25)
#loc135 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":110:13)
#loc136 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":112:25)
#loc137 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":112:20)
#loc138 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":112:13)
#loc139 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":112:36)
#loc140 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":114:16)
#loc141 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":115:9)
#loc142 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":118:9)
#loc143 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":115:13)
#loc144 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":115:29)
#loc145 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":116:9)
#loc146 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":117:26)
#loc147 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":117:13)
#loc148 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":119:9)
#loc149 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":122:9)
#loc150 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":119:13)
#loc151 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":119:29)
#loc152 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":120:9)
#loc153 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":121:26)
#loc154 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":121:13)
#loc155 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":130:17)
#loc156 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":130:5)
#loc157 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":131:13)
#loc158 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":131:5)
#loc159 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":359:1)
#loc160 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":364:1)
#loc161 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":361:5)
#loc162 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":361:14)
#loc163 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":362:5)
#loc164 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":362:14)
#loc165 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":363:5)
#loc166 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":363:13)
#loc167 = loc("/usr/include/stdlib.h":575:1)
#loc168 = loc("/usr/include/stdlib.h":575:41)
#loc169 = loc("/usr/include/time.h":76:1)
#loc170 = loc("/usr/include/time.h":76:38)
#loc171 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc172 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc173 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":380:15)
#loc174 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":382:15)
#loc175 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":385:15)
#loc176 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":387:15)
#loc177 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":375:1)
#loc178 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":390:1)
#loc183 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":376:1)
#loc184 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":378:27)
#loc185 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":378:22)
#loc186 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":378:5)
#loc187 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":380:5)
#loc188 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":381:5)
#loc189 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":381:61)
#loc190 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":382:5)
#loc191 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":385:5)
#loc192 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":386:5)
#loc193 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":386:60)
#loc194 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":387:5)
#loc195 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":389:12)
#loc196 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":389:5)
#loc197 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":139:1)
#loc198 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":139:29)
#loc199 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":149:19)
#loc200 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":160:23)
#loc201 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":144:1)
#loc202 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":163:1)
#loc205 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":145:1)
#loc206 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":146:5)
#loc207 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":162:5)
#loc208 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":146:8)
#loc209 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":147:5)
#loc210 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":150:5)
#loc211 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":152:5)
#loc212 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":149:9)
#loc213 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":154:9)
#loc214 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":161:9)
#loc215 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":154:13)
#loc216 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":154:21)
#loc217 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":155:9)
#loc218 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":157:9)
#loc219 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":159:9)
#loc220 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":156:26)
#loc221 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":156:32)
#loc222 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":156:13)
#loc223 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":160:13)
#loc224 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":165:1)
#loc225 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":241:1)
#loc226 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":167:5)
#loc227 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":167:9)
#loc228 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":169:13)
#loc229 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":169:12)
#loc230 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":169:5)
#loc231 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":170:5)
#loc232 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":238:5)
#loc233 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":175:9)
#loc234 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":175:13)
#loc235 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":176:9)
#loc236 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":176:28)
#loc237 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":177:9)
#loc238 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":177:31)
#loc239 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":178:9)
#loc240 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":178:31)
#loc241 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":179:9)
#loc242 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":179:41)
#loc243 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":180:9)
#loc244 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":223:17)
#loc245 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":190:35)
#loc246 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":190:44)
#loc247 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":190:57)
#loc248 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":190:28)
#loc249 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":190:13)
#loc250 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":190:68)
#loc251 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":191:13)
#loc252 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":194:13)
#loc253 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":191:17)
#loc254 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":191:33)
#loc255 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":192:13)
#loc256 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":193:17)
#loc257 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":195:20)
#loc258 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":195:21)
#loc259 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":195:30)
#loc260 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":195:33)
#loc261 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":195:47)
#loc262 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":195:13)
#loc263 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":195:48)
#loc264 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":196:34)
#loc265 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":196:13)
#loc266 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":197:39)
#loc267 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":197:13)
#loc268 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":198:38)
#loc269 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":198:32)
#loc270 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":198:13)
#loc271 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":198:46)
#loc272 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":199:13)
#loc273 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":202:13)
#loc274 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":199:22)
#loc275 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":199:54)
#loc276 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":199:55)
#loc277 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":199:64)
#loc278 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":199:78)
#loc279 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":199:17)
#loc280 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":199:84)
#loc281 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":200:13)
#loc282 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":201:17)
#loc283 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":203:13)
#loc284 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":206:13)
#loc285 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":203:24)
#loc286 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":203:38)
#loc287 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":203:17)
#loc288 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":203:57)
#loc289 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":204:13)
#loc290 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":205:17)
#loc291 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":207:35)
#loc292 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":207:49)
#loc293 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":207:55)
#loc294 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":207:28)
#loc295 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":207:13)
#loc296 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":207:59)
#loc297 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":208:13)
#loc298 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":211:13)
#loc299 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":208:17)
#loc300 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":208:33)
#loc301 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":209:13)
#loc302 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":210:17)
#loc303 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":213:31)
#loc304 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":213:45)
#loc305 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":213:58)
#loc306 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":213:76)
#loc307 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":213:79)
#loc308 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":213:26)
#loc309 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":213:13)
#loc310 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":213:80)
#loc311 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":214:13)
#loc312 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":217:13)
#loc313 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":214:17)
#loc314 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":214:31)
#loc315 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":214:44)
#loc316 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":214:47)
#loc317 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":214:61)
#loc318 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":215:13)
#loc319 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":216:17)
#loc320 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":219:39)
#loc321 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":219:25)
#loc322 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":219:13)
#loc323 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":221:25)
#loc324 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":221:20)
#loc325 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":221:13)
#loc326 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":221:36)
#loc327 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":223:16)
#loc328 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":224:9)
#loc329 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":227:9)
#loc330 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":224:13)
#loc331 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":224:29)
#loc332 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":225:9)
#loc333 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":226:26)
#loc334 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":226:13)
#loc335 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":228:9)
#loc336 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":231:9)
#loc337 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":228:13)
#loc338 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":228:29)
#loc339 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":229:9)
#loc340 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":230:26)
#loc341 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":230:13)
#loc342 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":239:22)
#loc343 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":239:5)
#loc344 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":240:18)
#loc345 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":240:5)
#loc346 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":140:1)
#loc347 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":140:29)
#loc348 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":244:1)
#loc349 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":258:1)
#loc352 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":245:1)
#loc353 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":246:5)
#loc354 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":257:5)
#loc355 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":246:8)
#loc356 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":247:5)
#loc357 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":249:9)
#loc358 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":256:9)
#loc359 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":249:13)
#loc360 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":249:21)
#loc361 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":250:9)
#loc362 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":252:9)
#loc363 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":254:9)
#loc364 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":251:26)
#loc365 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":251:32)
#loc366 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":251:13)
#loc367 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":255:23)
#loc368 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":255:13)
#loc369 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":260:1)
#loc370 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":336:1)
#loc371 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":262:5)
#loc372 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":262:9)
#loc373 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":264:13)
#loc374 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":264:12)
#loc375 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":264:5)
#loc376 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":265:5)
#loc377 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":333:5)
#loc378 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":270:9)
#loc379 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":270:13)
#loc380 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":271:9)
#loc381 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":271:28)
#loc382 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":272:9)
#loc383 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":272:31)
#loc384 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":273:9)
#loc385 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":273:31)
#loc386 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":274:9)
#loc387 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":274:41)
#loc388 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":275:9)
#loc389 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":318:17)
#loc390 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":285:35)
#loc391 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":285:44)
#loc392 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":285:57)
#loc393 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":285:28)
#loc394 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":285:13)
#loc395 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":285:68)
#loc396 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":286:13)
#loc397 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":289:13)
#loc398 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":286:17)
#loc399 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":286:33)
#loc400 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":287:13)
#loc401 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":288:17)
#loc402 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":290:20)
#loc403 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":290:21)
#loc404 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":290:30)
#loc405 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":290:33)
#loc406 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":290:47)
#loc407 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":290:13)
#loc408 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":290:48)
#loc409 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":291:34)
#loc410 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":291:13)
#loc411 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":292:39)
#loc412 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":292:13)
#loc413 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":293:38)
#loc414 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":293:32)
#loc415 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":293:13)
#loc416 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":293:46)
#loc417 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":294:13)
#loc418 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":297:13)
#loc419 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":294:22)
#loc420 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":294:54)
#loc421 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":294:55)
#loc422 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":294:64)
#loc423 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":294:78)
#loc424 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":294:17)
#loc425 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":294:84)
#loc426 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":295:13)
#loc427 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":296:17)
#loc428 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":298:13)
#loc429 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":301:13)
#loc430 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":298:24)
#loc431 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":298:38)
#loc432 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":298:17)
#loc433 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":298:57)
#loc434 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":299:13)
#loc435 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":300:17)
#loc436 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":302:35)
#loc437 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":302:49)
#loc438 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":302:55)
#loc439 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":302:28)
#loc440 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":302:13)
#loc441 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":302:59)
#loc442 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":303:13)
#loc443 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":306:13)
#loc444 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":303:17)
#loc445 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":303:33)
#loc446 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":304:13)
#loc447 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":305:17)
#loc448 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":308:31)
#loc449 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":308:45)
#loc450 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":308:58)
#loc451 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":308:76)
#loc452 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":308:79)
#loc453 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":308:26)
#loc454 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":308:13)
#loc455 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":308:80)
#loc456 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":309:13)
#loc457 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":312:13)
#loc458 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":309:17)
#loc459 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":309:31)
#loc460 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":309:44)
#loc461 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":309:47)
#loc462 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":309:61)
#loc463 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":310:13)
#loc464 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":311:17)
#loc465 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":314:39)
#loc466 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":314:25)
#loc467 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":314:13)
#loc468 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":316:25)
#loc469 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":316:20)
#loc470 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":316:13)
#loc471 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":316:36)
#loc472 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":318:16)
#loc473 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":319:9)
#loc474 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":322:9)
#loc475 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":319:13)
#loc476 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":319:29)
#loc477 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":320:9)
#loc478 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":321:26)
#loc479 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":321:13)
#loc480 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":323:9)
#loc481 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":326:9)
#loc482 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":323:13)
#loc483 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":323:29)
#loc484 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":324:9)
#loc485 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":325:26)
#loc486 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":325:13)
#loc487 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":334:22)
#loc488 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":334:5)
#loc489 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":335:18)
#loc490 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":335:5)
#loc491 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":141:1)
#loc492 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":141:28)
#loc493 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":339:1)
#loc494 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":346:1)
#loc497 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":340:1)
#loc498 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":341:5)
#loc499 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":345:5)
#loc500 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":341:8)
#loc501 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":342:5)
#loc502 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":344:22)
#loc503 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":344:28)
#loc504 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":344:9)
#loc505 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":348:1)
#loc506 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":357:1)
#loc507 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":350:5)
#loc508 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":350:9)
#loc509 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":352:13)
#loc510 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":352:12)
#loc511 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":352:5)
#loc512 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":354:12)
#loc513 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":354:5)
#loc514 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":355:21)
#loc515 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":355:5)
#loc516 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":356:17)
#loc517 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":356:5)
#loc518 = loc(fused[#loc1, #loc2])
#loc519 = loc(fused[#loc3, #loc4])
#loc520 = loc(fused[#loc5, #loc6])
#loc521 = loc(fused[#loc7, #loc8])
#loc522 = loc(fused[#loc9, #loc10])
#loc523 = loc(fused[#loc11, #loc12])
#loc524 = loc(fused[#loc13, #loc14])
#loc525 = loc(fused[#loc15, #loc16])
#loc526 = loc(fused[#loc17, #loc18])
#loc527 = loc(fused[#loc19, #loc20])
#loc528 = loc(fused[#loc21, #loc22])
#loc530 = loc(fused[#loc26, #loc27])
#loc531 = loc(fused[#loc29, #loc27])
#loc532 = loc(fused[#loc30, #loc31])
#loc533 = loc(fused[#loc33, #loc34])
#loc534 = loc(fused[#loc35, #loc36])
#loc535 = loc(fused[#loc39, #loc37])
#loc536 = loc(fused[#loc40, #loc41])
#loc537 = loc(fused[#loc42, #loc43])
#loc538 = loc(fused[#loc44, #loc45])
#loc539 = loc(fused[#loc46, #loc47])
#loc540 = loc(fused[#loc48, #loc49])
#loc541 = loc(fused[#loc50, #loc51])
#loc542 = loc(fused[#loc52, #loc53])
#loc543 = loc(fused[#loc58, #loc59])
#loc544 = loc(fused[#loc60, #loc61])
#loc545 = loc(fused[#loc62, #loc63])
#loc546 = loc(fused[#loc64, #loc61])
#loc547 = loc(fused[#loc66, #loc67])
#loc548 = loc(fused[#loc69, #loc70])
#loc549 = loc(fused[#loc71, #loc72])
#loc550 = loc(fused[#loc75, #loc73])
#loc551 = loc(fused[#loc79, #loc76])
#loc552 = loc(fused[#loc83, #loc84])
#loc553 = loc(fused[#loc85, #loc86])
#loc554 = loc(fused[#loc88, #loc89])
#loc555 = loc(fused[#loc90, #loc91])
#loc556 = loc(fused[#loc92, #loc93])
#loc557 = loc(fused[#loc94, #loc86])
#loc558 = loc(fused[#loc96, #loc97])
#loc559 = loc(fused[#loc100, #loc101])
#loc560 = loc(fused[#loc102, #loc97])
#loc561 = loc(fused[#loc108, #loc109])
#loc562 = loc(fused[#loc110, #loc111])
#loc563 = loc(fused[#loc112, #loc113])
#loc564 = loc(fused[#loc114, #loc111])
#loc565 = loc(fused[#loc118, #loc119])
#loc566 = loc(fused[#loc122, #loc123])
#loc567 = loc(fused[#loc124, #loc125])
#loc568 = loc(fused[#loc126, #loc127])
#loc569 = loc(fused[#loc129, #loc130])
#loc570 = loc(fused[#loc131, #loc125])
#loc571 = loc(fused[#loc135, #loc133])
#loc572 = loc(fused[#loc138, #loc139])
#loc573 = loc(fused[#loc141, #loc142])
#loc574 = loc(fused[#loc143, #loc144])
#loc575 = loc(fused[#loc145, #loc142])
#loc576 = loc(fused[#loc148, #loc149])
#loc577 = loc(fused[#loc150, #loc151])
#loc578 = loc(fused[#loc152, #loc149])
#loc579 = loc(fused[#loc156, #loc155])
#loc580 = loc(fused[#loc159, #loc160])
#loc581 = loc(fused[#loc161, #loc162])
#loc582 = loc(fused[#loc163, #loc164])
#loc583 = loc(fused[#loc165, #loc166])
#loc584 = loc(fused[#loc167, #loc168])
#loc585 = loc(fused[#loc169, #loc170])
#loc586 = loc(fused[#loc171, #loc172])
#loc587 = loc(fused[#loc177, #loc178])
#loc590 = loc(fused[#loc188, #loc189])
#loc591 = loc(fused[#loc192, #loc193])
#loc592 = loc(fused[#loc196, #loc195])
#loc593 = loc(fused[#loc197, #loc198])
#loc594 = loc(fused[#loc201, #loc202])
#loc596 = loc(fused[#loc206, #loc207])
#loc597 = loc(fused[#loc209, #loc210, #loc211, #loc207])
#loc598 = loc(fused[#loc213, #loc214])
#loc599 = loc(fused[#loc215, #loc216])
#loc600 = loc(fused[#loc217, #loc218, #loc219, #loc214])
#loc601 = loc(fused[#loc220, #loc221])
#loc602 = loc(fused[#loc224, #loc225])
#loc603 = loc(fused[#loc226, #loc227])
#loc604 = loc(fused[#loc230, #loc228])
#loc605 = loc(fused[#loc231, #loc232])
#loc606 = loc(fused[#loc233, #loc234])
#loc607 = loc(fused[#loc235, #loc236])
#loc608 = loc(fused[#loc237, #loc238])
#loc609 = loc(fused[#loc239, #loc240])
#loc610 = loc(fused[#loc241, #loc242])
#loc611 = loc(fused[#loc243, #loc244])
#loc612 = loc(fused[#loc249, #loc250])
#loc613 = loc(fused[#loc251, #loc252])
#loc614 = loc(fused[#loc253, #loc254])
#loc615 = loc(fused[#loc255, #loc252])
#loc616 = loc(fused[#loc257, #loc258])
#loc617 = loc(fused[#loc260, #loc261])
#loc618 = loc(fused[#loc262, #loc263])
#loc619 = loc(fused[#loc265, #loc264])
#loc620 = loc(fused[#loc267, #loc266])
#loc621 = loc(fused[#loc270, #loc271])
#loc622 = loc(fused[#loc272, #loc273])
#loc623 = loc(fused[#loc275, #loc276])
#loc624 = loc(fused[#loc277, #loc278])
#loc625 = loc(fused[#loc279, #loc280])
#loc626 = loc(fused[#loc281, #loc273])
#loc627 = loc(fused[#loc283, #loc284])
#loc628 = loc(fused[#loc287, #loc288])
#loc629 = loc(fused[#loc289, #loc284])
#loc630 = loc(fused[#loc295, #loc296])
#loc631 = loc(fused[#loc297, #loc298])
#loc632 = loc(fused[#loc299, #loc300])
#loc633 = loc(fused[#loc301, #loc298])
#loc634 = loc(fused[#loc305, #loc306])
#loc635 = loc(fused[#loc309, #loc310])
#loc636 = loc(fused[#loc311, #loc312])
#loc637 = loc(fused[#loc313, #loc314])
#loc638 = loc(fused[#loc316, #loc317])
#loc639 = loc(fused[#loc318, #loc312])
#loc640 = loc(fused[#loc322, #loc320])
#loc641 = loc(fused[#loc325, #loc326])
#loc642 = loc(fused[#loc328, #loc329])
#loc643 = loc(fused[#loc330, #loc331])
#loc644 = loc(fused[#loc332, #loc329])
#loc645 = loc(fused[#loc335, #loc336])
#loc646 = loc(fused[#loc337, #loc338])
#loc647 = loc(fused[#loc339, #loc336])
#loc648 = loc(fused[#loc343, #loc342])
#loc649 = loc(fused[#loc346, #loc347])
#loc650 = loc(fused[#loc348, #loc349])
#loc652 = loc(fused[#loc353, #loc354])
#loc653 = loc(fused[#loc356, #loc354])
#loc654 = loc(fused[#loc357, #loc358])
#loc655 = loc(fused[#loc359, #loc360])
#loc656 = loc(fused[#loc361, #loc362, #loc363, #loc358])
#loc657 = loc(fused[#loc364, #loc365])
#loc658 = loc(fused[#loc369, #loc370])
#loc659 = loc(fused[#loc371, #loc372])
#loc660 = loc(fused[#loc375, #loc373])
#loc661 = loc(fused[#loc376, #loc377])
#loc662 = loc(fused[#loc378, #loc379])
#loc663 = loc(fused[#loc380, #loc381])
#loc664 = loc(fused[#loc382, #loc383])
#loc665 = loc(fused[#loc384, #loc385])
#loc666 = loc(fused[#loc386, #loc387])
#loc667 = loc(fused[#loc388, #loc389])
#loc668 = loc(fused[#loc394, #loc395])
#loc669 = loc(fused[#loc396, #loc397])
#loc670 = loc(fused[#loc398, #loc399])
#loc671 = loc(fused[#loc400, #loc397])
#loc672 = loc(fused[#loc402, #loc403])
#loc673 = loc(fused[#loc405, #loc406])
#loc674 = loc(fused[#loc407, #loc408])
#loc675 = loc(fused[#loc410, #loc409])
#loc676 = loc(fused[#loc412, #loc411])
#loc677 = loc(fused[#loc415, #loc416])
#loc678 = loc(fused[#loc417, #loc418])
#loc679 = loc(fused[#loc420, #loc421])
#loc680 = loc(fused[#loc422, #loc423])
#loc681 = loc(fused[#loc424, #loc425])
#loc682 = loc(fused[#loc426, #loc418])
#loc683 = loc(fused[#loc428, #loc429])
#loc684 = loc(fused[#loc432, #loc433])
#loc685 = loc(fused[#loc434, #loc429])
#loc686 = loc(fused[#loc440, #loc441])
#loc687 = loc(fused[#loc442, #loc443])
#loc688 = loc(fused[#loc444, #loc445])
#loc689 = loc(fused[#loc446, #loc443])
#loc690 = loc(fused[#loc450, #loc451])
#loc691 = loc(fused[#loc454, #loc455])
#loc692 = loc(fused[#loc456, #loc457])
#loc693 = loc(fused[#loc458, #loc459])
#loc694 = loc(fused[#loc461, #loc462])
#loc695 = loc(fused[#loc463, #loc457])
#loc696 = loc(fused[#loc467, #loc465])
#loc697 = loc(fused[#loc470, #loc471])
#loc698 = loc(fused[#loc473, #loc474])
#loc699 = loc(fused[#loc475, #loc476])
#loc700 = loc(fused[#loc477, #loc474])
#loc701 = loc(fused[#loc480, #loc481])
#loc702 = loc(fused[#loc482, #loc483])
#loc703 = loc(fused[#loc484, #loc481])
#loc704 = loc(fused[#loc488, #loc487])
#loc705 = loc(fused[#loc491, #loc492])
#loc706 = loc(fused[#loc493, #loc494])
#loc708 = loc(fused[#loc498, #loc499])
#loc709 = loc(fused[#loc501, #loc499])
#loc710 = loc(fused[#loc502, #loc503])
#loc711 = loc(fused[#loc505, #loc506])
#loc712 = loc(fused[#loc507, #loc508])
#loc713 = loc(fused[#loc511, #loc509])
#loc714 = loc(fused[#loc513, #loc512])
#loc715 = loc(fused[#loc515, #loc514])
