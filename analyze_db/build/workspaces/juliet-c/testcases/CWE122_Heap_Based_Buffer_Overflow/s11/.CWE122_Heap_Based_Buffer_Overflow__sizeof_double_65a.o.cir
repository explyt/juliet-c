!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65b_badSink(!cir.ptr<!cir.double>) loc(#loc65)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc66)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc67)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc69)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!cir.double>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!cir.double>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc70)
    %2 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65b_badSink : !cir.ptr<!cir.func<(!cir.ptr<!cir.double>)>> loc(#loc12)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.ptr<!cir.double>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!cir.double>)>>> loc(#loc70)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc13)
    cir.store %3, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc71)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc15)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc72)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc73)
    cir.store %7, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc74)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc22)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc23)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc23)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!cir.double>, !cir.bool loc(#loc76)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc25)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc26)
        %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc27)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc25)
      } loc(#loc77)
    } loc(#loc75)
    %8 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc28)
    %9 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc29)
    cir.store %8, %9 : !cir.double, !cir.ptr<!cir.double> loc(#loc78)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!cir.double>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!cir.double>)>> loc(#loc31)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc32)
    cir.call %10(%11) : (!cir.ptr<!cir.func<(!cir.ptr<!cir.double>)>>, !cir.ptr<!cir.double>) -> () loc(#loc31)
    cir.return loc(#loc8)
  } loc(#loc68)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc80)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    cir.return loc(#loc34)
  } loc(#loc79)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65b_goodG2BSink(!cir.ptr<!cir.double>) loc(#loc81)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc83)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!cir.double>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!cir.double>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc84)
    %2 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65b_goodG2BSink : !cir.ptr<!cir.func<(!cir.ptr<!cir.double>)>> loc(#loc44)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.ptr<!cir.double>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!cir.double>)>>> loc(#loc84)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc45)
    cir.store %3, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc85)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc47)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc86)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc47)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc87)
    cir.store %7, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc88)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc54)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc55)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc55)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!cir.double>, !cir.bool loc(#loc90)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc57)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc58)
        %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc59)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc57)
      } loc(#loc91)
    } loc(#loc89)
    %8 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc60)
    %9 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc61)
    cir.store %8, %9 : !cir.double, !cir.ptr<!cir.double> loc(#loc92)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!cir.double>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!cir.double>)>> loc(#loc63)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc64)
    cir.call %10(%11) : (!cir.ptr<!cir.func<(!cir.ptr<!cir.double>)>>, !cir.ptr<!cir.double>) -> () loc(#loc63)
    cir.return loc(#loc40)
  } loc(#loc82)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":22:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":22:80)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":24:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":38:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":26:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":26:14)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":28:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":28:34)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":30:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":30:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":33:22)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":33:29)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":33:40)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":33:41)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":33:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":34:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":34:33)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":34:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":34:17)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":34:23)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":34:24)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":34:30)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":34:29)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":35:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":35:6)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":35:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":37:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":37:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":60:1)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":63:1)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":62:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":62:13)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":45:1)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":45:84)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":47:1)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":58:1)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":49:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":49:14)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":50:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":50:34)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":52:12)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":52:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":54:22)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":54:29)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":54:41)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":54:42)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":54:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":55:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":55:33)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":55:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":55:17)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":55:23)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":55:24)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":55:30)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":55:29)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":56:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":56:6)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":56:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":57:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c":57:13)
#loc65 = loc(fused[#loc1, #loc2])
#loc66 = loc(fused[#loc3, #loc4])
#loc67 = loc(fused[#loc5, #loc6])
#loc68 = loc(fused[#loc7, #loc8])
#loc69 = loc(fused[#loc9, #loc10])
#loc70 = loc(fused[#loc11, #loc12])
#loc71 = loc(fused[#loc14, #loc13])
#loc72 = loc(fused[#loc16, #loc17])
#loc73 = loc(fused[#loc15, #loc18])
#loc74 = loc(fused[#loc19, #loc18])
#loc75 = loc(fused[#loc20, #loc21])
#loc76 = loc(fused[#loc22, #loc23])
#loc77 = loc(fused[#loc24, #loc21])
#loc78 = loc(fused[#loc30, #loc28])
#loc79 = loc(fused[#loc33, #loc34])
#loc80 = loc(fused[#loc35, #loc36])
#loc81 = loc(fused[#loc37, #loc38])
#loc82 = loc(fused[#loc39, #loc40])
#loc83 = loc(fused[#loc41, #loc42])
#loc84 = loc(fused[#loc43, #loc44])
#loc85 = loc(fused[#loc46, #loc45])
#loc86 = loc(fused[#loc48, #loc49])
#loc87 = loc(fused[#loc47, #loc50])
#loc88 = loc(fused[#loc51, #loc50])
#loc89 = loc(fused[#loc52, #loc53])
#loc90 = loc(fused[#loc54, #loc55])
#loc91 = loc(fused[#loc56, #loc53])
#loc92 = loc(fused[#loc62, #loc60])
