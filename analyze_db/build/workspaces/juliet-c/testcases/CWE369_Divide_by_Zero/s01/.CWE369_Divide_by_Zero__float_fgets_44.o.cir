!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":26:21)
#loc6 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":26:27)
#loc62 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":64:25)
#loc63 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":64:31)
#loc88 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":85:25)
#loc89 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":85:31)
#loc138 = loc(fused[#loc5, #loc6])
#loc160 = loc(fused[#loc62, #loc63])
#loc170 = loc(fused[#loc88, #loc89])
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fgets_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @printIntLine(!s32i) loc(#loc136)
  cir.func internal private @badSink(%arg0: !cir.float loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc139)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc138)
    cir.store %arg0, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc9)
    cir.br ^bb1 loc(#loc140)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc12)
    %3 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc13)
    %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc13)
    %5 = cir.binop(div, %2, %4) : !cir.double loc(#loc141)
    %6 = cir.cast(float_to_int, %5 : !cir.double), !s32i loc(#loc141)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc139)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc15)
    cir.br ^bb2 loc(#loc11)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc4)
  } loc(#loc137)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc142)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc143)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr1) loc(#loc144)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc145)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc24)
  cir.func no_proto @CWE369_Divide_by_Zero__float_fgets_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc147)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc148)
    %2 = cir.alloca !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc149)
    %3 = cir.get_global @badSink : !cir.ptr<!cir.func<(!cir.float)>> loc(#loc32)
    cir.store %3, %2 : !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>> loc(#loc149)
    %4 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc33)
    cir.store %4, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc150)
    cir.br ^bb1 loc(#loc151)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc152)
  ^bb2:  // pred: ^bb1
    %5 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc39)
    %6 = cir.const #cir.int<20> : !s32i loc(#loc40)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc143)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc41)
    %9 = cir.call @fgets(%5, %6, %8) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc42)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc43)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc43)
    %12 = cir.cmp(ne, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc153)
    cir.brcond %12 ^bb3, ^bb4 loc(#loc154)
  ^bb3:  // pred: ^bb2
    %13 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc47)
    %14 = cir.call @atof(%13) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr1) loc(#loc48)
    %15 = cir.cast(floating, %14 : !cir.double), !cir.float loc(#loc48)
    cir.store %15, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc155)
    cir.br ^bb5 loc(#loc45)
  ^bb4:  // pred: ^bb2
    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc24)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc24)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    cir.br ^bb5 loc(#loc38)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc38)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc36)
  ^bb7:  // pred: ^bb6
    %18 = cir.load %2 : !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, !cir.ptr<!cir.func<(!cir.float)>> loc(#loc52)
    %19 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc53)
    cir.call %18(%19) : (!cir.ptr<!cir.func<(!cir.float)>>, !cir.float) -> () loc(#loc52)
    cir.return loc(#loc26)
  } loc(#loc146)
  cir.func no_proto @CWE369_Divide_by_Zero__float_fgets_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc157)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc56)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc158)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc58)
    cir.return loc(#loc55)
  } loc(#loc156)
  cir.func internal private @goodG2BSink(%arg0: !cir.float loc(fused[#loc62, #loc63])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc161)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc160)
    cir.store %arg0, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc66)
    cir.br ^bb1 loc(#loc162)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc69)
    %3 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc70)
    %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc70)
    %5 = cir.binop(div, %2, %4) : !cir.double loc(#loc163)
    %6 = cir.cast(float_to_int, %5 : !cir.double), !s32i loc(#loc163)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc72)
    cir.br ^bb2 loc(#loc68)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc61)
  } loc(#loc159)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc165)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc166)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!cir.float)>> loc(#loc78)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>> loc(#loc166)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc79)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc167)
    %4 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc81)
    cir.store %4, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc168)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, !cir.ptr<!cir.func<(!cir.float)>> loc(#loc83)
    %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc84)
    cir.call %5(%6) : (!cir.ptr<!cir.func<(!cir.float)>>, !cir.float) -> () loc(#loc83)
    cir.return loc(#loc74)
  } loc(#loc164)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc85)
  cir.func internal private @goodB2GSink(%arg0: !cir.float loc(fused[#loc88, #loc89])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc171)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc170)
    cir.store %arg0, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc92)
    cir.br ^bb1 loc(#loc172)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc95)
    %3 = cir.cast(floating, %2 : !cir.float), !cir.double loc(#loc95)
    %4 = cir.fabs %3 : !cir.double loc(#loc95)
    %5 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc96)
    %6 = cir.cmp(gt, %4, %5) : !cir.double, !cir.bool loc(#loc173)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc174)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc101)
    %8 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc102)
    %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc102)
    %10 = cir.binop(div, %7, %9) : !cir.double loc(#loc175)
    %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc175)
    cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc171)
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc104)
    cir.br ^bb4 loc(#loc99)
  ^bb3:  // pred: ^bb1
    %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc85)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc85)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    cir.br ^bb4 loc(#loc94)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc94)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc87)
  } loc(#loc169)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc177)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc178)
    %2 = cir.alloca !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc179)
    %3 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<(!cir.float)>> loc(#loc113)
    cir.store %3, %2 : !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>> loc(#loc179)
    %4 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc114)
    cir.store %4, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc180)
    cir.br ^bb1 loc(#loc181)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc182)
  ^bb2:  // pred: ^bb1
    %5 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc120)
    %6 = cir.const #cir.int<20> : !s32i loc(#loc121)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc143)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc122)
    %9 = cir.call @fgets(%5, %6, %8) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc123)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc124)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc124)
    %12 = cir.cmp(ne, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc183)
    cir.brcond %12 ^bb3, ^bb4 loc(#loc184)
  ^bb3:  // pred: ^bb2
    %13 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc128)
    %14 = cir.call @atof(%13) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr1) loc(#loc129)
    %15 = cir.cast(floating, %14 : !cir.double), !cir.float loc(#loc129)
    cir.store %15, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc185)
    cir.br ^bb5 loc(#loc126)
  ^bb4:  // pred: ^bb2
    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc132)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc132)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc133)
    cir.br ^bb5 loc(#loc119)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc119)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc117)
  ^bb7:  // pred: ^bb6
    %18 = cir.load %2 : !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, !cir.ptr<!cir.func<(!cir.float)>> loc(#loc134)
    %19 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc135)
    cir.call %18(%19) : (!cir.ptr<!cir.func<(!cir.float)>>, !cir.float) -> () loc(#loc134)
    cir.return loc(#loc107)
  } loc(#loc176)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fgets_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":26:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":33:1)
#loc7 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":30:9)
#loc8 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":30:40)
#loc9 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":27:1)
#loc10 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":28:5)
#loc11 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":32:5)
#loc12 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":30:28)
#loc13 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":30:36)
#loc14 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":31:22)
#loc15 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":31:9)
#loc16 = loc("/usr/include/stdio.h":654:1)
#loc17 = loc("/usr/include/stdio.h":655:59)
#loc18 = loc("/usr/include/stdio.h":149:1)
#loc19 = loc("/usr/include/stdio.h":149:14)
#loc20 = loc("/usr/include/stdlib.h":102:1)
#loc21 = loc("/usr/include/stdlib.h":103:33)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":52:23)
#loc25 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":35:1)
#loc26 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":57:1)
#loc27 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":43:9)
#loc28 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":43:41)
#loc29 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":37:5)
#loc30 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":37:11)
#loc31 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":39:5)
#loc32 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":39:31)
#loc33 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":41:12)
#loc34 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":41:5)
#loc35 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":42:5)
#loc36 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":54:5)
#loc37 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":45:9)
#loc38 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":53:9)
#loc39 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":45:19)
#loc40 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":45:32)
#loc41 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":45:49)
#loc42 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":45:13)
#loc43 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":45:59)
#loc44 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":46:9)
#loc45 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":49:9)
#loc46 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":51:9)
#loc47 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":48:32)
#loc48 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":48:27)
#loc49 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":48:13)
#loc50 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":48:43)
#loc51 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":52:13)
#loc52 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":56:5)
#loc53 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":56:13)
#loc54 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":121:1)
#loc55 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":125:1)
#loc56 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":123:5)
#loc57 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":123:13)
#loc58 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":124:5)
#loc59 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":124:13)
#loc60 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":64:1)
#loc61 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":71:1)
#loc64 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":68:9)
#loc65 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":68:40)
#loc66 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":65:1)
#loc67 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":66:5)
#loc68 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":70:5)
#loc69 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":68:28)
#loc70 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":68:36)
#loc71 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":69:22)
#loc72 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":69:9)
#loc73 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":73:1)
#loc74 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":82:1)
#loc75 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":75:5)
#loc76 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":75:11)
#loc77 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":76:5)
#loc78 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":76:31)
#loc79 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":78:12)
#loc80 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":78:5)
#loc81 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":80:12)
#loc82 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":80:5)
#loc83 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":81:5)
#loc84 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":81:13)
#loc85 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":95:19)
#loc86 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":85:1)
#loc87 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":97:1)
#loc90 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":90:9)
#loc91 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":90:40)
#loc92 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":86:1)
#loc93 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":88:5)
#loc94 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":96:5)
#loc95 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":88:13)
#loc96 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":88:21)
#loc97 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":88:8)
#loc98 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":89:5)
#loc99 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":92:5)
#loc100 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":94:5)
#loc101 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":90:28)
#loc102 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":90:36)
#loc103 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":91:22)
#loc104 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":91:9)
#loc105 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":95:9)
#loc106 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":99:1)
#loc107 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":119:1)
#loc108 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":106:9)
#loc109 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":106:41)
#loc110 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":101:5)
#loc111 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":101:11)
#loc112 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":102:5)
#loc113 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":102:31)
#loc114 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":104:12)
#loc115 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":104:5)
#loc116 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":105:5)
#loc117 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":117:5)
#loc118 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":108:9)
#loc119 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":116:9)
#loc120 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":108:19)
#loc121 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":108:32)
#loc122 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":108:49)
#loc123 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":108:13)
#loc124 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":108:59)
#loc125 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":109:9)
#loc126 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":112:9)
#loc127 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":114:9)
#loc128 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":111:32)
#loc129 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":111:27)
#loc130 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":111:13)
#loc131 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":111:43)
#loc132 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":115:23)
#loc133 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":115:13)
#loc134 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":118:5)
#loc135 = loc("CWE369_Divide_by_Zero__float_fgets_44.c":118:13)
#loc136 = loc(fused[#loc1, #loc2])
#loc137 = loc(fused[#loc3, #loc4])
#loc139 = loc(fused[#loc7, #loc8])
#loc140 = loc(fused[#loc10, #loc11])
#loc141 = loc(fused[#loc12, #loc13])
#loc142 = loc(fused[#loc16, #loc17])
#loc143 = loc(fused[#loc18, #loc19])
#loc144 = loc(fused[#loc20, #loc21])
#loc145 = loc(fused[#loc22, #loc23])
#loc146 = loc(fused[#loc25, #loc26])
#loc147 = loc(fused[#loc27, #loc28])
#loc148 = loc(fused[#loc29, #loc30])
#loc149 = loc(fused[#loc31, #loc32])
#loc150 = loc(fused[#loc34, #loc33])
#loc151 = loc(fused[#loc35, #loc36])
#loc152 = loc(fused[#loc37, #loc38])
#loc153 = loc(fused[#loc42, #loc43])
#loc154 = loc(fused[#loc44, #loc45, #loc46, #loc38])
#loc155 = loc(fused[#loc49, #loc50])
#loc156 = loc(fused[#loc54, #loc55])
#loc157 = loc(fused[#loc56, #loc57])
#loc158 = loc(fused[#loc58, #loc59])
#loc159 = loc(fused[#loc60, #loc61])
#loc161 = loc(fused[#loc64, #loc65])
#loc162 = loc(fused[#loc67, #loc68])
#loc163 = loc(fused[#loc69, #loc70])
#loc164 = loc(fused[#loc73, #loc74])
#loc165 = loc(fused[#loc75, #loc76])
#loc166 = loc(fused[#loc77, #loc78])
#loc167 = loc(fused[#loc80, #loc79])
#loc168 = loc(fused[#loc82, #loc81])
#loc169 = loc(fused[#loc86, #loc87])
#loc171 = loc(fused[#loc90, #loc91])
#loc172 = loc(fused[#loc93, #loc94])
#loc173 = loc(fused[#loc97, #loc96])
#loc174 = loc(fused[#loc98, #loc99, #loc100, #loc94])
#loc175 = loc(fused[#loc101, #loc102])
#loc176 = loc(fused[#loc106, #loc107])
#loc177 = loc(fused[#loc108, #loc109])
#loc178 = loc(fused[#loc110, #loc111])
#loc179 = loc(fused[#loc112, #loc113])
#loc180 = loc(fused[#loc115, #loc114])
#loc181 = loc(fused[#loc116, #loc117])
#loc182 = loc(fused[#loc118, #loc119])
#loc183 = loc(fused[#loc123, #loc124])
#loc184 = loc(fused[#loc125, #loc126, #loc127, #loc119])
#loc185 = loc(fused[#loc130, #loc131])
