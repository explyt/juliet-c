!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":116:10)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":116:14)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":116:20)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":116:32)
#loc236 = loc(fused[#loc80, #loc81])
#loc237 = loc(fused[#loc82, #loc83])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc206)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc207)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc208)
  cir.func private @strncat(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc209)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc210)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc211)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc213)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc17)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc214)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc216)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc216)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc21)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc21)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc24)
        %7 = cir.const #cir.int<50> : !s32i loc(#loc25)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc25)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc218)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc219)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc220)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc221)
        cir.scope {
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
          %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc33)
          %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc223)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc35)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc36)
            %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc37)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc35)
          } loc(#loc224)
        } loc(#loc222)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc38)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc38)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc40)
        %17 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc41)
        cir.store %14, %17 : !s8i, !cir.ptr<!s8i> loc(#loc225)
      } loc(#loc217)
    } loc(#loc215)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc227)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc46)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc46)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc47)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc48)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc49)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc48)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc48)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc228)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc52)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc52)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc53)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc54)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc53)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc55)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc55)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc229)
      %17 = cir.get_global @strncat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc56)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc58)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc59)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc59)
      %22 = cir.call @strncat(%18, %19, %21) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc56)
      %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
      cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc61)
      %24 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc62)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
      %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc63)
      cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc62)
    } loc(#loc226)
    cir.return loc(#loc14)
  } loc(#loc212)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc231)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc66)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc232)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc68)
    cir.return loc(#loc65)
  } loc(#loc230)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc233)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc234)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc77)
  cir.func @main(%arg0: !s32i loc(fused[#loc80, #loc81]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc82, #loc83])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc236)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc237)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc79)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc84)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc85)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc86)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc86)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc87)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc74)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11_good : !cir.ptr<!cir.func<!void ()>> loc(#loc238)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11_good() : () -> () loc(#loc89)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc75)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc76)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc239)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11_bad() : () -> () loc(#loc93)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc77)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc96)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc240)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc240)
    cir.return %17 : !s32i loc(#loc240)
  } loc(#loc235)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc241)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc100)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc243)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc105)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc244)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc246)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc246)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc109)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc109)
      cir.if %5 {
        %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc100)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc100)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc114)
      } else {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc115)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc116)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc116)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc248)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc249)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc115)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc250)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc251)
        cir.scope {
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
          %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc124)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc124)
          %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc253)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc126)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc127)
            %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc128)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc126)
          } loc(#loc254)
        } loc(#loc252)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc129)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc129)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc130)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc131)
        %17 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc132)
        cir.store %14, %17 : !s8i, !cir.ptr<!s8i> loc(#loc255)
      } loc(#loc247)
    } loc(#loc245)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc257)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc137)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc137)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc138)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc139)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc140)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc139)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc139)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc258)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc143)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc143)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc144)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc145)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc144)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc146)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc146)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc259)
      %17 = cir.get_global @strncat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc147)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc149)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc150)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc150)
      %22 = cir.call @strncat(%18, %19, %21) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc147)
      %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
      cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc152)
      %24 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc153)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc154)
      %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc154)
      cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc153)
    } loc(#loc256)
    cir.return loc(#loc102)
  } loc(#loc242)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc261)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc159)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc262)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc264)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc264)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc163)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc163)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc166)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc167)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc167)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc266)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc267)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc166)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc268)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc269)
        cir.scope {
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc174)
          %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc175)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc175)
          %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc271)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc177)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc178)
            %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc179)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc177)
          } loc(#loc272)
        } loc(#loc270)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc180)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc180)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc181)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc182)
        %17 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc183)
        cir.store %14, %17 : !s8i, !cir.ptr<!s8i> loc(#loc273)
      } loc(#loc265)
    } loc(#loc263)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc275)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc188)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc188)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc189)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc190)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc191)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc190)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc190)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc276)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc194)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc194)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc195)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc196)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc195)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc197)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc197)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc277)
      %17 = cir.get_global @strncat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc198)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc199)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc200)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc201)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc201)
      %22 = cir.call @strncat(%18, %19, %21) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc198)
      %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc202)
      cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc203)
      %24 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc204)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc205)
      %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc205)
      cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc204)
    } loc(#loc274)
    cir.return loc(#loc156)
  } loc(#loc260)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("/usr/include/string.h":152:1)
#loc8 = loc("/usr/include/string.h":153:29)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("/usr/include/stdlib.h":687:1)
#loc12 = loc("/usr/include/stdlib.h":687:32)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":23:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":43:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":25:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":25:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":26:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":26:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":27:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":33:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":27:8)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":27:26)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":28:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":30:24)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":30:31)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":30:34)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":30:45)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":30:46)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":30:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":31:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":31:37)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":31:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":31:21)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":31:27)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":31:28)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":31:34)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":31:33)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":32:19)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":32:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":32:14)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":32:15)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":34:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":42:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":35:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":35:24)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":36:16)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":36:24)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":36:29)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":36:33)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":36:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":36:34)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":37:25)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":37:16)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":37:20)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":37:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":39:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":39:17)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":39:23)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":39:31)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":40:19)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":40:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":41:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":41:14)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":100:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":104:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":102:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":102:14)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":103:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":103:14)
#loc70 = loc("/usr/include/stdlib.h":575:1)
#loc71 = loc("/usr/include/stdlib.h":575:41)
#loc72 = loc("/usr/include/time.h":76:1)
#loc73 = loc("/usr/include/time.h":76:38)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":121:15)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":123:15)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":126:15)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":128:15)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":116:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":131:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":117:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":119:27)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":119:22)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":119:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":121:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":122:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":122:67)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":123:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":126:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":127:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":127:66)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":128:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":130:12)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":130:5)
#loc98 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc99 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":57:19)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":50:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":75:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":52:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":52:12)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":53:12)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":53:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":54:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":65:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":54:8)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":54:27)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":55:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":58:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":60:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":57:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":62:24)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":62:31)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":62:35)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":62:46)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":62:47)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":62:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":63:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":63:37)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":63:13)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":63:21)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":63:27)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":63:28)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":63:34)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":63:33)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":64:19)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":64:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":64:14)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":64:15)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":66:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":74:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":67:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":67:24)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":68:16)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":68:24)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":68:29)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":68:33)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":68:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":68:34)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":69:25)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":69:16)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":69:20)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":69:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":71:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":71:17)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":71:23)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":71:31)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":72:19)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":72:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":73:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":73:14)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":78:1)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":98:1)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":80:5)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":80:12)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":81:12)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":81:5)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":82:5)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":88:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":82:8)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":82:26)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":83:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":85:24)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":85:31)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":85:35)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":85:46)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":85:47)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":85:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":86:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":86:37)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":86:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":86:21)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":86:27)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":86:28)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":86:34)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":86:33)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":87:19)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":87:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":87:14)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":87:15)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":89:5)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":97:5)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":90:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":90:24)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":91:16)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":91:24)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":91:29)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":91:33)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":91:9)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":91:34)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":92:25)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":92:16)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":92:20)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":92:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":94:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":94:17)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":94:23)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":94:31)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":95:19)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":95:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":96:9)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c":96:14)
#loc206 = loc(fused[#loc1, #loc2])
#loc207 = loc(fused[#loc3, #loc4])
#loc208 = loc(fused[#loc5, #loc6])
#loc209 = loc(fused[#loc7, #loc8])
#loc210 = loc(fused[#loc9, #loc10])
#loc211 = loc(fused[#loc11, #loc12])
#loc212 = loc(fused[#loc13, #loc14])
#loc213 = loc(fused[#loc15, #loc16])
#loc214 = loc(fused[#loc18, #loc17])
#loc215 = loc(fused[#loc19, #loc20])
#loc216 = loc(fused[#loc21, #loc22])
#loc217 = loc(fused[#loc23, #loc20])
#loc218 = loc(fused[#loc26, #loc27])
#loc219 = loc(fused[#loc25, #loc27])
#loc220 = loc(fused[#loc24, #loc28])
#loc221 = loc(fused[#loc29, #loc28])
#loc222 = loc(fused[#loc30, #loc31])
#loc223 = loc(fused[#loc32, #loc33])
#loc224 = loc(fused[#loc34, #loc31])
#loc225 = loc(fused[#loc39, #loc38])
#loc226 = loc(fused[#loc42, #loc43])
#loc227 = loc(fused[#loc44, #loc45])
#loc228 = loc(fused[#loc50, #loc51])
#loc229 = loc(fused[#loc55, #loc52])
#loc230 = loc(fused[#loc64, #loc65])
#loc231 = loc(fused[#loc66, #loc67])
#loc232 = loc(fused[#loc68, #loc69])
#loc233 = loc(fused[#loc70, #loc71])
#loc234 = loc(fused[#loc72, #loc73])
#loc235 = loc(fused[#loc78, #loc79])
#loc238 = loc(fused[#loc89, #loc90])
#loc239 = loc(fused[#loc93, #loc94])
#loc240 = loc(fused[#loc97, #loc96])
#loc241 = loc(fused[#loc98, #loc99])
#loc242 = loc(fused[#loc101, #loc102])
#loc243 = loc(fused[#loc103, #loc104])
#loc244 = loc(fused[#loc106, #loc105])
#loc245 = loc(fused[#loc107, #loc108])
#loc246 = loc(fused[#loc109, #loc110])
#loc247 = loc(fused[#loc111, #loc112, #loc113, #loc108])
#loc248 = loc(fused[#loc117, #loc118])
#loc249 = loc(fused[#loc116, #loc118])
#loc250 = loc(fused[#loc115, #loc119])
#loc251 = loc(fused[#loc120, #loc119])
#loc252 = loc(fused[#loc121, #loc122])
#loc253 = loc(fused[#loc123, #loc124])
#loc254 = loc(fused[#loc125, #loc122])
#loc255 = loc(fused[#loc130, #loc129])
#loc256 = loc(fused[#loc133, #loc134])
#loc257 = loc(fused[#loc135, #loc136])
#loc258 = loc(fused[#loc141, #loc142])
#loc259 = loc(fused[#loc146, #loc143])
#loc260 = loc(fused[#loc155, #loc156])
#loc261 = loc(fused[#loc157, #loc158])
#loc262 = loc(fused[#loc160, #loc159])
#loc263 = loc(fused[#loc161, #loc162])
#loc264 = loc(fused[#loc163, #loc164])
#loc265 = loc(fused[#loc165, #loc162])
#loc266 = loc(fused[#loc168, #loc169])
#loc267 = loc(fused[#loc167, #loc169])
#loc268 = loc(fused[#loc166, #loc170])
#loc269 = loc(fused[#loc171, #loc170])
#loc270 = loc(fused[#loc172, #loc173])
#loc271 = loc(fused[#loc174, #loc175])
#loc272 = loc(fused[#loc176, #loc173])
#loc273 = loc(fused[#loc181, #loc180])
#loc274 = loc(fused[#loc184, #loc185])
#loc275 = loc(fused[#loc186, #loc187])
#loc276 = loc(fused[#loc192, #loc193])
#loc277 = loc(fused[#loc197, #loc194])
