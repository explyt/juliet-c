!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @printIntLine(!s32i) loc(#loc84)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_18_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc86)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc87)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    cir.goto "source" loc(#loc89)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc13)
    %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc14)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    cir.goto "sink" loc(#loc91)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc18)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc8)
    %6 = cir.binop(mul, %4, %5) nsw : !s32i loc(#loc19)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc21)
    cir.return loc(#loc4)
  } loc(#loc85)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_18_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc93)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc24)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc94)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    cir.return loc(#loc23)
  } loc(#loc92)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc28)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc95)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc31)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc97)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc36)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    cir.goto "source" loc(#loc99)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc40)
    %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc41)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    cir.goto "sink" loc(#loc101)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc45)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
      %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc49)
      %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc49)
      %6 = cir.const #cir.int<1> : !s32i loc(#loc49)
      %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc49)
      %8 = cir.cmp(gt, %3, %7) : !s32i, !cir.bool loc(#loc103)
      %9 = cir.ternary(%8, true {
        %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
        %11 = cir.abs %10 poison : !s32i loc(#loc52)
        %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc52)
        %13 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc53)
        %14 = cir.const #cir.int<2147483647> : !s32i loc(#loc54)
        %15 = cir.cast(int_to_float, %14 : !s32i), !cir.double loc(#loc54)
        %16 = cir.call @sqrt(%15) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc53)
        %17 = cir.cast(float_to_int, %16 : !cir.double), !s64i loc(#loc53)
        %18 = cir.cmp(lt, %12, %17) : !s64i, !cir.bool loc(#loc104)
        %19 = cir.ternary(%18, true {
          %20 = cir.const #true loc(#loc50)
          cir.yield %20 : !cir.bool loc(#loc50)
        }, false {
          %20 = cir.const #false loc(#loc50)
          cir.yield %20 : !cir.bool loc(#loc50)
        }) : (!cir.bool) -> !cir.bool loc(#loc50)
        cir.yield %19 : !cir.bool loc(#loc50)
      }, false {
        %10 = cir.const #false loc(#loc50)
        cir.yield %10 : !cir.bool loc(#loc50)
      }) : (!cir.bool) -> !cir.bool loc(#loc50)
      cir.if %9 {
        %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc106)
        %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
        %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc60)
        %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc61)
        cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc106)
        %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc62)
        cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc63)
      } else {
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc31)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc31)
        cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc64)
      } loc(#loc105)
    } loc(#loc102)
    cir.return loc(#loc33)
  } loc(#loc96)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc108)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc109)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc71)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc110)
    cir.goto "source" loc(#loc111)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc75)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc76)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    cir.goto "sink" loc(#loc113)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc80)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    %6 = cir.binop(mul, %4, %5) nsw : !s32i loc(#loc81)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc83)
    cir.return loc(#loc66)
  } loc(#loc107)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_18.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_square_18.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_square_18.c":40:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_square_18.c":26:5)
#loc6 = loc("CWE190_Integer_Overflow__int_max_square_18.c":26:9)
#loc7 = loc("CWE190_Integer_Overflow__int_max_square_18.c":37:9)
#loc8 = loc("CWE190_Integer_Overflow__int_max_square_18.c":37:29)
#loc9 = loc("CWE190_Integer_Overflow__int_max_square_18.c":28:12)
#loc10 = loc("CWE190_Integer_Overflow__int_max_square_18.c":28:5)
#loc11 = loc("CWE190_Integer_Overflow__int_max_square_18.c":29:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_square_18.c":29:10)
#loc13 = loc("CWE190_Integer_Overflow__int_max_square_18.c":30:1)
#loc14 = loc("CWE190_Integer_Overflow__int_max_square_18.c":32:12)
#loc15 = loc("CWE190_Integer_Overflow__int_max_square_18.c":32:5)
#loc16 = loc("CWE190_Integer_Overflow__int_max_square_18.c":33:5)
#loc17 = loc("CWE190_Integer_Overflow__int_max_square_18.c":33:10)
#loc18 = loc("CWE190_Integer_Overflow__int_max_square_18.c":34:1)
#loc19 = loc("CWE190_Integer_Overflow__int_max_square_18.c":37:22)
#loc20 = loc("CWE190_Integer_Overflow__int_max_square_18.c":38:22)
#loc21 = loc("CWE190_Integer_Overflow__int_max_square_18.c":38:9)
#loc22 = loc("CWE190_Integer_Overflow__int_max_square_18.c":89:1)
#loc23 = loc("CWE190_Integer_Overflow__int_max_square_18.c":93:1)
#loc24 = loc("CWE190_Integer_Overflow__int_max_square_18.c":91:5)
#loc25 = loc("CWE190_Integer_Overflow__int_max_square_18.c":91:13)
#loc26 = loc("CWE190_Integer_Overflow__int_max_square_18.c":92:5)
#loc27 = loc("CWE190_Integer_Overflow__int_max_square_18.c":92:13)
#loc28 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc29 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc30 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc31 = loc("CWE190_Integer_Overflow__int_max_square_18.c":66:19)
#loc32 = loc("CWE190_Integer_Overflow__int_max_square_18.c":47:1)
#loc33 = loc("CWE190_Integer_Overflow__int_max_square_18.c":68:1)
#loc34 = loc("CWE190_Integer_Overflow__int_max_square_18.c":49:5)
#loc35 = loc("CWE190_Integer_Overflow__int_max_square_18.c":49:9)
#loc36 = loc("CWE190_Integer_Overflow__int_max_square_18.c":51:12)
#loc37 = loc("CWE190_Integer_Overflow__int_max_square_18.c":51:5)
#loc38 = loc("CWE190_Integer_Overflow__int_max_square_18.c":52:5)
#loc39 = loc("CWE190_Integer_Overflow__int_max_square_18.c":52:10)
#loc40 = loc("CWE190_Integer_Overflow__int_max_square_18.c":53:1)
#loc41 = loc("CWE190_Integer_Overflow__int_max_square_18.c":55:12)
#loc42 = loc("CWE190_Integer_Overflow__int_max_square_18.c":55:5)
#loc43 = loc("CWE190_Integer_Overflow__int_max_square_18.c":56:5)
#loc44 = loc("CWE190_Integer_Overflow__int_max_square_18.c":56:10)
#loc45 = loc("CWE190_Integer_Overflow__int_max_square_18.c":57:1)
#loc46 = loc("CWE190_Integer_Overflow__int_max_square_18.c":59:5)
#loc47 = loc("CWE190_Integer_Overflow__int_max_square_18.c":67:5)
#loc48 = loc("CWE190_Integer_Overflow__int_max_square_18.c":59:9)
#loc49 = loc("CWE190_Integer_Overflow__int_max_square_18.c":59:16)
#loc50 = loc("CWE190_Integer_Overflow__int_max_square_18.c":59:24)
#loc51 = loc("CWE190_Integer_Overflow__int_max_square_18.c":59:31)
#loc52 = loc("CWE190_Integer_Overflow__int_max_square_18.c":59:27)
#loc53 = loc("CWE190_Integer_Overflow__int_max_square_18.c":59:45)
#loc54 = loc("CWE190_Integer_Overflow__int_max_square_18.c":59:58)
#loc55 = loc("CWE190_Integer_Overflow__int_max_square_18.c":59:65)
#loc56 = loc("CWE190_Integer_Overflow__int_max_square_18.c":60:5)
#loc57 = loc("CWE190_Integer_Overflow__int_max_square_18.c":63:5)
#loc58 = loc("CWE190_Integer_Overflow__int_max_square_18.c":65:5)
#loc59 = loc("CWE190_Integer_Overflow__int_max_square_18.c":61:9)
#loc60 = loc("CWE190_Integer_Overflow__int_max_square_18.c":61:29)
#loc61 = loc("CWE190_Integer_Overflow__int_max_square_18.c":61:22)
#loc62 = loc("CWE190_Integer_Overflow__int_max_square_18.c":62:22)
#loc63 = loc("CWE190_Integer_Overflow__int_max_square_18.c":62:9)
#loc64 = loc("CWE190_Integer_Overflow__int_max_square_18.c":66:9)
#loc65 = loc("CWE190_Integer_Overflow__int_max_square_18.c":71:1)
#loc66 = loc("CWE190_Integer_Overflow__int_max_square_18.c":87:1)
#loc67 = loc("CWE190_Integer_Overflow__int_max_square_18.c":73:5)
#loc68 = loc("CWE190_Integer_Overflow__int_max_square_18.c":73:9)
#loc69 = loc("CWE190_Integer_Overflow__int_max_square_18.c":84:9)
#loc70 = loc("CWE190_Integer_Overflow__int_max_square_18.c":84:29)
#loc71 = loc("CWE190_Integer_Overflow__int_max_square_18.c":75:12)
#loc72 = loc("CWE190_Integer_Overflow__int_max_square_18.c":75:5)
#loc73 = loc("CWE190_Integer_Overflow__int_max_square_18.c":76:5)
#loc74 = loc("CWE190_Integer_Overflow__int_max_square_18.c":76:10)
#loc75 = loc("CWE190_Integer_Overflow__int_max_square_18.c":77:1)
#loc76 = loc("CWE190_Integer_Overflow__int_max_square_18.c":79:12)
#loc77 = loc("CWE190_Integer_Overflow__int_max_square_18.c":79:5)
#loc78 = loc("CWE190_Integer_Overflow__int_max_square_18.c":80:5)
#loc79 = loc("CWE190_Integer_Overflow__int_max_square_18.c":80:10)
#loc80 = loc("CWE190_Integer_Overflow__int_max_square_18.c":81:1)
#loc81 = loc("CWE190_Integer_Overflow__int_max_square_18.c":84:22)
#loc82 = loc("CWE190_Integer_Overflow__int_max_square_18.c":85:22)
#loc83 = loc("CWE190_Integer_Overflow__int_max_square_18.c":85:9)
#loc84 = loc(fused[#loc1, #loc2])
#loc85 = loc(fused[#loc3, #loc4])
#loc86 = loc(fused[#loc5, #loc6])
#loc87 = loc(fused[#loc7, #loc8])
#loc88 = loc(fused[#loc10, #loc9])
#loc89 = loc(fused[#loc11, #loc12])
#loc90 = loc(fused[#loc15, #loc14])
#loc91 = loc(fused[#loc16, #loc17])
#loc92 = loc(fused[#loc22, #loc23])
#loc93 = loc(fused[#loc24, #loc25])
#loc94 = loc(fused[#loc26, #loc27])
#loc95 = loc(fused[#loc29, #loc30])
#loc96 = loc(fused[#loc32, #loc33])
#loc97 = loc(fused[#loc34, #loc35])
#loc98 = loc(fused[#loc37, #loc36])
#loc99 = loc(fused[#loc38, #loc39])
#loc100 = loc(fused[#loc42, #loc41])
#loc101 = loc(fused[#loc43, #loc44])
#loc102 = loc(fused[#loc46, #loc47])
#loc103 = loc(fused[#loc48, #loc49])
#loc104 = loc(fused[#loc52, #loc55])
#loc105 = loc(fused[#loc56, #loc57, #loc58, #loc47])
#loc106 = loc(fused[#loc59, #loc60])
#loc107 = loc(fused[#loc65, #loc66])
#loc108 = loc(fused[#loc67, #loc68])
#loc109 = loc(fused[#loc69, #loc70])
#loc110 = loc(fused[#loc72, #loc71])
#loc111 = loc(fused[#loc73, #loc74])
#loc112 = loc(fused[#loc77, #loc76])
#loc113 = loc(fused[#loc78, #loc79])
