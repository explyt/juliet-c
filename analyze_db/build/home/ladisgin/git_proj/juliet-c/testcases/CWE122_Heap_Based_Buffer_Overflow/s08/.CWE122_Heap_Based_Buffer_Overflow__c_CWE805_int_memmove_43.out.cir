!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":24:23)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":24:30)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":50:27)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":50:34)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":90:10)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":90:14)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":90:20)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":90:32)
#loc129 = loc(fused[#loc7, #loc8])
#loc148 = loc(fused[#loc54, #loc55])
#loc169 = loc(fused[#loc110, #loc111])
#loc170 = loc(fused[#loc112, #loc113])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc126)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc127)
  cir.func internal private @_ZN58CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43L9badSourceERPi(%arg0: !cir.ptr<!cir.ptr<!s32i>> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["data", init, const] {alignment = 8 : i64} loc(#loc129)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc9)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc10)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc11)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc130)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc131)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc10)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc132)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc15)
    cir.store %7, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc133)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc18)
      %10 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc18)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc19)
      %12 = cir.cmp(eq, %10, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc135)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc21)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc23)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc21)
      } loc(#loc136)
    } loc(#loc134)
    cir.return loc(#loc6)
  } loc(#loc128)
  cir.func private @printIntLine(!s32i) loc(#loc137)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc138)
  cir.func @_ZN58CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_433badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc140)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc32)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc141)
    cir.call @_ZN58CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43L9badSourceERPi(%0) : (!cir.ptr<!cir.ptr<!s32i>>) -> () loc(#loc34)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc143)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc143)
      cir.store %3, %2 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc143)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc39)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc40)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc40)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc41)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc41)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc144)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc145)
      cir.libc.memmove %11 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc146)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc46)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc47)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc48)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc46)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc49)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc50)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc51)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc51)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc50)
    } loc(#loc142)
    cir.return loc(#loc29)
  } loc(#loc139)
  cir.func internal private @_ZN58CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43L13goodG2BSourceERPi(%arg0: !cir.ptr<!cir.ptr<!s32i>> loc(fused[#loc54, #loc55])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["data", init, const] {alignment = 8 : i64} loc(#loc148)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc56)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc57)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc58)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc58)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc149)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc150)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc57)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc151)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc62)
    cir.store %7, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc152)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc65)
      %10 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc65)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc66)
      %12 = cir.cmp(eq, %10, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc154)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc68)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc69)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc70)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc68)
      } loc(#loc155)
    } loc(#loc153)
    cir.return loc(#loc53)
  } loc(#loc147)
  cir.func internal private @_ZN58CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc157)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc75)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc158)
    cir.call @_ZN58CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43L13goodG2BSourceERPi(%0) : (!cir.ptr<!cir.ptr<!s32i>>) -> () loc(#loc77)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc160)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc160)
      cir.store %3, %2 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc160)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc82)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc82)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc83)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc83)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc84)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc84)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc161)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc162)
      cir.libc.memmove %11 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc163)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc89)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc90)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc91)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc89)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc92)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc93)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc94)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc94)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc93)
    } loc(#loc159)
    cir.return loc(#loc72)
  } loc(#loc156)
  cir.func @_ZN58CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_434goodEv() extra(#fn_attr1) {
    cir.call @_ZN58CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43L7goodG2BEv() : () -> () loc(#loc97)
    cir.return loc(#loc96)
  } loc(#loc164)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc165)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc166)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc167)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc105)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc107)
  cir.func @main(%arg0: !s32i loc(fused[#loc110, #loc111]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc112, #loc113])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc169)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc170)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc109)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc114)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc115)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc116)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc116)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc117)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc104)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc104)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc118)
    cir.call @_ZN58CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_434goodEv() : () -> () loc(#loc119)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc105)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc105)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc106)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc106)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    cir.call @_ZN58CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_433badEv() : () -> () loc(#loc122)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc107)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc107)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc123)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc124)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc171)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc171)
    cir.return %15 : !s32i loc(#loc171)
  } loc(#loc168)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":24:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":29:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":25:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":27:19)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":27:26)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":27:29)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":27:39)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":27:40)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":27:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":28:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":28:33)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":28:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":28:17)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":28:23)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":28:24)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":28:30)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":28:29)
#loc24 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc26 = loc("/usr/include/stdlib.h":687:1)
#loc27 = loc("/usr/include/stdlib.h":687:32)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":31:1)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":43:1)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":33:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":33:11)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":34:12)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":34:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":35:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":36:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":42:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":37:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":37:29)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":39:17)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":39:23)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":39:31)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":39:35)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":39:45)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":39:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":39:46)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":40:22)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":40:27)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":40:28)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":40:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":41:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":41:14)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":50:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":55:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":51:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":53:19)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":53:26)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":53:30)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":53:40)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":53:41)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":53:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":54:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":54:33)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":54:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":54:17)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":54:23)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":54:24)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":54:30)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":54:29)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":57:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":69:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":59:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":59:11)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":60:12)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":60:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":61:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":62:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":68:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":63:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":63:29)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":65:17)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":65:23)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":65:31)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":65:35)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":65:45)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":65:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":65:46)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":66:22)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":66:27)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":66:28)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":66:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":67:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":67:14)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":71:1)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":74:1)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":73:5)
#loc98 = loc("/usr/include/stdlib.h":575:1)
#loc99 = loc("/usr/include/stdlib.h":575:41)
#loc100 = loc("/usr/include/time.h":76:1)
#loc101 = loc("/usr/include/time.h":76:38)
#loc102 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc103 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":95:15)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":97:15)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":100:15)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":102:15)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":90:1)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":105:1)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":91:1)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":93:27)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":93:22)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":93:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":95:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":96:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":97:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":100:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":101:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":102:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":104:12)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp":104:5)
#loc126 = loc(fused[#loc1, #loc2])
#loc127 = loc(fused[#loc3, #loc4])
#loc128 = loc(fused[#loc5, #loc6])
#loc130 = loc(fused[#loc12, #loc13])
#loc131 = loc(fused[#loc11, #loc13])
#loc132 = loc(fused[#loc10, #loc14])
#loc133 = loc(fused[#loc15, #loc14])
#loc134 = loc(fused[#loc16, #loc17])
#loc135 = loc(fused[#loc18, #loc19])
#loc136 = loc(fused[#loc20, #loc17])
#loc137 = loc(fused[#loc24, #loc25])
#loc138 = loc(fused[#loc26, #loc27])
#loc139 = loc(fused[#loc28, #loc29])
#loc140 = loc(fused[#loc30, #loc31])
#loc141 = loc(fused[#loc33, #loc32])
#loc142 = loc(fused[#loc35, #loc36])
#loc143 = loc(fused[#loc37, #loc38])
#loc144 = loc(fused[#loc42, #loc43])
#loc145 = loc(fused[#loc41, #loc43])
#loc146 = loc(fused[#loc44, #loc45])
#loc147 = loc(fused[#loc52, #loc53])
#loc149 = loc(fused[#loc59, #loc60])
#loc150 = loc(fused[#loc58, #loc60])
#loc151 = loc(fused[#loc57, #loc61])
#loc152 = loc(fused[#loc62, #loc61])
#loc153 = loc(fused[#loc63, #loc64])
#loc154 = loc(fused[#loc65, #loc66])
#loc155 = loc(fused[#loc67, #loc64])
#loc156 = loc(fused[#loc71, #loc72])
#loc157 = loc(fused[#loc73, #loc74])
#loc158 = loc(fused[#loc76, #loc75])
#loc159 = loc(fused[#loc78, #loc79])
#loc160 = loc(fused[#loc80, #loc81])
#loc161 = loc(fused[#loc85, #loc86])
#loc162 = loc(fused[#loc84, #loc86])
#loc163 = loc(fused[#loc87, #loc88])
#loc164 = loc(fused[#loc95, #loc96])
#loc165 = loc(fused[#loc98, #loc99])
#loc166 = loc(fused[#loc100, #loc101])
#loc167 = loc(fused[#loc102, #loc103])
#loc168 = loc(fused[#loc108, #loc109])
#loc171 = loc(fused[#loc125, #loc124])
