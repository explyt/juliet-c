!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc61 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":110:10)
#loc62 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":110:14)
#loc63 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":110:20)
#loc64 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":110:32)
#loc193 = loc(fused[#loc61, #loc62])
#loc194 = loc(fused[#loc63, #loc64])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc166)
  cir.func private @printIntLine(!s32i) loc(#loc167)
  cir.func no_proto @CWE190_Integer_Overflow__short_rand_square_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc169)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc170)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc171)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc12)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc12)
    cir.store %4, %2 : !s16i, !cir.ptr<!s16i> loc(#loc172)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc16)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc174)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc19)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc175)
        cir.condition(%8) loc(#loc20)
      } body {
        cir.scope {
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc22)
          %8 = cir.binop(and, %6, %7) : !s32i loc(#loc22)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc22)
          %10 = cir.ternary(%9, true {
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc22)
            %15 = cir.const #cir.int<30> : !s32i loc(#loc22)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc22)
            %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc22)
            %19 = cir.const #cir.int<15> : !s32i loc(#loc22)
            %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc22)
            %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc22)
            %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc22)
            %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc22)
            cir.yield %24 : !u32i loc(#loc22)
          }, false {
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc22)
            %15 = cir.const #cir.int<30> : !s32i loc(#loc22)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc22)
            %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc22)
            %19 = cir.const #cir.int<15> : !s32i loc(#loc22)
            %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc22)
            %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc22)
            %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc22)
            %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc22)
            %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc22)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc22)
            %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc22)
            %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc22)
            cir.yield %28 : !u32i loc(#loc22)
          }) : (!cir.bool) -> !u32i loc(#loc22)
          %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc22)
          %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc22)
          cir.store %12, %2 : !s16i, !cir.ptr<!s16i> loc(#loc177)
        } loc(#loc176)
        cir.yield loc(#loc15)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc25)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc178)
        cir.yield loc(#loc173)
      } loc(#loc173)
    } loc(#loc173)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc28)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc180)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc30)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc31)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc181)
        cir.condition(%8) loc(#loc32)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc184)
            %7 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc38)
            %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc38)
            %9 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc37)
            %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc37)
            %11 = cir.binop(mul, %8, %10) nsw : !s32i loc(#loc38)
            %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc38)
            cir.store %12, %6 : !s16i, !cir.ptr<!s16i> loc(#loc184)
            %13 = cir.load %6 : !cir.ptr<!s16i>, !s16i loc(#loc39)
            %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc39)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc40)
          } loc(#loc183)
        } loc(#loc182)
        cir.yield loc(#loc27)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc41)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc42)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc185)
        cir.yield loc(#loc179)
      } loc(#loc179)
    } loc(#loc179)
    cir.return loc(#loc6)
  } loc(#loc168)
  cir.func no_proto @CWE190_Integer_Overflow__short_rand_square_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc187)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc188)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    cir.return loc(#loc44)
  } loc(#loc186)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc189)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc190)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc191)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc58)
  cir.func @main(%arg0: !s32i loc(fused[#loc61, #loc62]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc63, #loc64])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc193)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc194)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc60)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc65)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc65)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc66)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc67)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc67)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc68)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc55)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %8 = cir.get_global @CWE190_Integer_Overflow__short_rand_square_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc195)
    cir.call @CWE190_Integer_Overflow__short_rand_square_17_good() : () -> () loc(#loc70)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc56)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc57)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %13 = cir.get_global @CWE190_Integer_Overflow__short_rand_square_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc196)
    cir.call @CWE190_Integer_Overflow__short_rand_square_17_bad() : () -> () loc(#loc74)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc58)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc77)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc197)
    cir.return %17 : !s32i loc(#loc197)
  } loc(#loc192)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc79)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc80)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc199)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc200)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc201)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc88)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc88)
    cir.store %4, %2 : !s16i, !cir.ptr<!s16i> loc(#loc202)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc92)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc95)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc205)
        cir.condition(%8) loc(#loc96)
      } body {
        cir.scope {
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc98)
          %8 = cir.binop(and, %6, %7) : !s32i loc(#loc98)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc98)
          %10 = cir.ternary(%9, true {
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc98)
            %15 = cir.const #cir.int<30> : !s32i loc(#loc98)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc98)
            %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
            %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc98)
            %19 = cir.const #cir.int<15> : !s32i loc(#loc98)
            %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc98)
            %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc98)
            %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc98)
            %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc98)
            cir.yield %24 : !u32i loc(#loc98)
          }, false {
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc98)
            %15 = cir.const #cir.int<30> : !s32i loc(#loc98)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc98)
            %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
            %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc98)
            %19 = cir.const #cir.int<15> : !s32i loc(#loc98)
            %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc98)
            %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc98)
            %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc98)
            %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc98)
            %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc98)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc98)
            %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc98)
            %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc98)
            cir.yield %28 : !u32i loc(#loc98)
          }) : (!cir.bool) -> !u32i loc(#loc98)
          %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc98)
          %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc98)
          cir.store %12, %2 : !s16i, !cir.ptr<!s16i> loc(#loc207)
        } loc(#loc206)
        cir.yield loc(#loc91)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc101)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc208)
        cir.yield loc(#loc203)
      } loc(#loc203)
    } loc(#loc203)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc104)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc210)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc106)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc107)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc211)
        cir.condition(%8) loc(#loc108)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc112)
            %7 = cir.cast(integral, %6 : !s16i), !s64i loc(#loc112)
            %8 = cir.cast(integral, %7 : !s64i), !s32i loc(#loc112)
            %9 = cir.abs %8 poison : !s32i loc(#loc113)
            %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc113)
            %11 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc114)
            %12 = cir.const #cir.int<32767> : !s32i loc(#loc115)
            %13 = cir.cast(int_to_float, %12 : !s32i), !cir.double loc(#loc115)
            %14 = cir.call @sqrt(%13) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc114)
            %15 = cir.cast(float_to_int, %14 : !cir.double), !s64i loc(#loc114)
            %16 = cir.cmp(le, %10, %15) : !s64i, !cir.bool loc(#loc214)
            cir.if %16 {
              %17 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc216)
              %18 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc122)
              %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc122)
              %20 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc121)
              %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc121)
              %22 = cir.binop(mul, %19, %21) nsw : !s32i loc(#loc122)
              %23 = cir.cast(integral, %22 : !s32i), !s16i loc(#loc122)
              cir.store %23, %17 : !s16i, !cir.ptr<!s16i> loc(#loc216)
              %24 = cir.load %17 : !cir.ptr<!s16i>, !s16i loc(#loc123)
              %25 = cir.cast(integral, %24 : !s16i), !s32i loc(#loc123)
              cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc124)
            } else {
              %17 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc80)
              %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc80)
              cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc125)
            } loc(#loc215)
          } loc(#loc213)
        } loc(#loc212)
        cir.yield loc(#loc103)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc126)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc127)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc217)
        cir.yield loc(#loc209)
      } loc(#loc209)
    } loc(#loc209)
    cir.return loc(#loc82)
  } loc(#loc198)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc219)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc220)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc221)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc135)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc135)
    cir.store %4, %2 : !s16i, !cir.ptr<!s16i> loc(#loc222)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc139)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc224)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc141)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc142)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc225)
        cir.condition(%8) loc(#loc143)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<2> : !s32i loc(#loc145)
          %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc145)
          cir.store %7, %2 : !s16i, !cir.ptr<!s16i> loc(#loc227)
        } loc(#loc226)
        cir.yield loc(#loc138)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc147)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc148)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc228)
        cir.yield loc(#loc223)
      } loc(#loc223)
    } loc(#loc223)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc151)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc230)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc153)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc154)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc231)
        cir.condition(%8) loc(#loc155)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc234)
            %7 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc161)
            %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc161)
            %9 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc160)
            %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc160)
            %11 = cir.binop(mul, %8, %10) nsw : !s32i loc(#loc161)
            %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc161)
            cir.store %12, %6 : !s16i, !cir.ptr<!s16i> loc(#loc234)
            %13 = cir.load %6 : !cir.ptr<!s16i>, !s16i loc(#loc162)
            %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc162)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc163)
          } loc(#loc233)
        } loc(#loc232)
        cir.yield loc(#loc150)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc164)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc165)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc235)
        cir.yield loc(#loc229)
      } loc(#loc229)
    } loc(#loc229)
    cir.return loc(#loc129)
  } loc(#loc218)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":24:1)
#loc6 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":42:1)
#loc7 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":26:5)
#loc8 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":26:9)
#loc9 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":26:11)
#loc10 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":27:5)
#loc11 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":27:11)
#loc12 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":28:12)
#loc13 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":28:5)
#loc14 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":29:5)
#loc15 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":33:5)
#loc16 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":29:13)
#loc17 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":29:9)
#loc18 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":29:16)
#loc19 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":29:20)
#loc20 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":29:18)
#loc21 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":30:5)
#loc22 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":32:23)
#loc23 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":32:9)
#loc24 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":29:24)
#loc25 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":29:23)
#loc26 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":34:5)
#loc27 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":41:5)
#loc28 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":34:13)
#loc29 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":34:9)
#loc30 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":34:16)
#loc31 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":34:20)
#loc32 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":34:18)
#loc33 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":35:5)
#loc34 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":36:9)
#loc35 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":40:9)
#loc36 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":38:13)
#loc37 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":38:35)
#loc38 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":38:28)
#loc39 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":39:26)
#loc40 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":39:13)
#loc41 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":34:24)
#loc42 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":34:23)
#loc43 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":95:1)
#loc44 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":99:1)
#loc45 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":97:5)
#loc46 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":97:13)
#loc47 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":98:5)
#loc48 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":98:13)
#loc49 = loc("/usr/include/stdlib.h":575:1)
#loc50 = loc("/usr/include/stdlib.h":575:41)
#loc51 = loc("/usr/include/time.h":76:1)
#loc52 = loc("/usr/include/time.h":76:38)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc55 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":115:15)
#loc56 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":117:15)
#loc57 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":120:15)
#loc58 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":122:15)
#loc59 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":110:1)
#loc60 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":125:1)
#loc65 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":111:1)
#loc66 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":113:27)
#loc67 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":113:22)
#loc68 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":113:5)
#loc69 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":115:5)
#loc70 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":116:5)
#loc71 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":116:56)
#loc72 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":117:5)
#loc73 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":120:5)
#loc74 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":121:5)
#loc75 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":121:55)
#loc76 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":122:5)
#loc77 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":124:12)
#loc78 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":124:5)
#loc79 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc80 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":69:23)
#loc81 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":49:1)
#loc82 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":72:1)
#loc83 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":51:5)
#loc84 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":51:9)
#loc85 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":51:11)
#loc86 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":52:5)
#loc87 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":52:11)
#loc88 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":53:12)
#loc89 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":53:5)
#loc90 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":54:5)
#loc91 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":58:5)
#loc92 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":54:13)
#loc93 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":54:9)
#loc94 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":54:16)
#loc95 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":54:20)
#loc96 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":54:18)
#loc97 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":55:5)
#loc98 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":57:23)
#loc99 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":57:9)
#loc100 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":54:24)
#loc101 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":54:23)
#loc102 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":59:5)
#loc103 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":71:5)
#loc104 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":59:13)
#loc105 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":59:9)
#loc106 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":59:16)
#loc107 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":59:20)
#loc108 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":59:18)
#loc109 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":60:5)
#loc110 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":62:9)
#loc111 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":70:9)
#loc112 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":62:23)
#loc113 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":62:13)
#loc114 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":62:38)
#loc115 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":62:51)
#loc116 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":62:59)
#loc117 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":63:9)
#loc118 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":66:9)
#loc119 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":68:9)
#loc120 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":64:13)
#loc121 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":64:35)
#loc122 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":64:28)
#loc123 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":65:26)
#loc124 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":65:13)
#loc125 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":69:13)
#loc126 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":59:24)
#loc127 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":59:23)
#loc128 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":75:1)
#loc129 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":93:1)
#loc130 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":77:5)
#loc131 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":77:9)
#loc132 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":77:11)
#loc133 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":78:5)
#loc134 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":78:11)
#loc135 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":79:12)
#loc136 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":79:5)
#loc137 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":80:5)
#loc138 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":84:5)
#loc139 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":80:13)
#loc140 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":80:9)
#loc141 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":80:16)
#loc142 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":80:20)
#loc143 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":80:18)
#loc144 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":81:5)
#loc145 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":83:16)
#loc146 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":83:9)
#loc147 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":80:24)
#loc148 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":80:23)
#loc149 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":85:5)
#loc150 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":92:5)
#loc151 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":85:13)
#loc152 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":85:9)
#loc153 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":85:16)
#loc154 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":85:20)
#loc155 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":85:18)
#loc156 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":86:5)
#loc157 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":87:9)
#loc158 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":91:9)
#loc159 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":89:13)
#loc160 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":89:35)
#loc161 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":89:28)
#loc162 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":90:26)
#loc163 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":90:13)
#loc164 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":85:24)
#loc165 = loc("CWE190_Integer_Overflow__short_rand_square_17.c":85:23)
#loc166 = loc(fused[#loc1, #loc2])
#loc167 = loc(fused[#loc3, #loc4])
#loc168 = loc(fused[#loc5, #loc6])
#loc169 = loc(fused[#loc7, #loc8])
#loc170 = loc(fused[#loc7, #loc9])
#loc171 = loc(fused[#loc10, #loc11])
#loc172 = loc(fused[#loc13, #loc12])
#loc173 = loc(fused[#loc14, #loc15])
#loc174 = loc(fused[#loc17, #loc16])
#loc175 = loc(fused[#loc18, #loc19])
#loc176 = loc(fused[#loc21, #loc15])
#loc177 = loc(fused[#loc23, #loc22])
#loc178 = loc(fused[#loc25, #loc24])
#loc179 = loc(fused[#loc26, #loc27])
#loc180 = loc(fused[#loc29, #loc28])
#loc181 = loc(fused[#loc30, #loc31])
#loc182 = loc(fused[#loc33, #loc27])
#loc183 = loc(fused[#loc34, #loc35])
#loc184 = loc(fused[#loc36, #loc37])
#loc185 = loc(fused[#loc42, #loc41])
#loc186 = loc(fused[#loc43, #loc44])
#loc187 = loc(fused[#loc45, #loc46])
#loc188 = loc(fused[#loc47, #loc48])
#loc189 = loc(fused[#loc49, #loc50])
#loc190 = loc(fused[#loc51, #loc52])
#loc191 = loc(fused[#loc53, #loc54])
#loc192 = loc(fused[#loc59, #loc60])
#loc195 = loc(fused[#loc70, #loc71])
#loc196 = loc(fused[#loc74, #loc75])
#loc197 = loc(fused[#loc78, #loc77])
#loc198 = loc(fused[#loc81, #loc82])
#loc199 = loc(fused[#loc83, #loc84])
#loc200 = loc(fused[#loc83, #loc85])
#loc201 = loc(fused[#loc86, #loc87])
#loc202 = loc(fused[#loc89, #loc88])
#loc203 = loc(fused[#loc90, #loc91])
#loc204 = loc(fused[#loc93, #loc92])
#loc205 = loc(fused[#loc94, #loc95])
#loc206 = loc(fused[#loc97, #loc91])
#loc207 = loc(fused[#loc99, #loc98])
#loc208 = loc(fused[#loc101, #loc100])
#loc209 = loc(fused[#loc102, #loc103])
#loc210 = loc(fused[#loc105, #loc104])
#loc211 = loc(fused[#loc106, #loc107])
#loc212 = loc(fused[#loc109, #loc103])
#loc213 = loc(fused[#loc110, #loc111])
#loc214 = loc(fused[#loc113, #loc116])
#loc215 = loc(fused[#loc117, #loc118, #loc119, #loc111])
#loc216 = loc(fused[#loc120, #loc121])
#loc217 = loc(fused[#loc127, #loc126])
#loc218 = loc(fused[#loc128, #loc129])
#loc219 = loc(fused[#loc130, #loc131])
#loc220 = loc(fused[#loc130, #loc132])
#loc221 = loc(fused[#loc133, #loc134])
#loc222 = loc(fused[#loc136, #loc135])
#loc223 = loc(fused[#loc137, #loc138])
#loc224 = loc(fused[#loc140, #loc139])
#loc225 = loc(fused[#loc141, #loc142])
#loc226 = loc(fused[#loc144, #loc138])
#loc227 = loc(fused[#loc146, #loc145])
#loc228 = loc(fused[#loc148, #loc147])
#loc229 = loc(fused[#loc149, #loc150])
#loc230 = loc(fused[#loc152, #loc151])
#loc231 = loc(fused[#loc153, #loc154])
#loc232 = loc(fused[#loc156, #loc150])
#loc233 = loc(fused[#loc157, #loc158])
#loc234 = loc(fused[#loc159, #loc160])
#loc235 = loc(fused[#loc165, #loc164])
