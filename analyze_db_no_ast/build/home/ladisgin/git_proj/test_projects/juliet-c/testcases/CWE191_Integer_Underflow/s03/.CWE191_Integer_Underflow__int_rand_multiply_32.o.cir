!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc134)
  cir.func private  @printIntLine(!s32i) loc(#loc135)
  cir.func no_proto  @CWE191_Integer_Underflow__int_rand_multiply_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc137)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc138)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc139)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc138)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc139)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc13)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc142)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc18)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc142)
      %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc20)
      %9 = cir.binop(and, %7, %8) : !s32i loc(#loc20)
      %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc20)
      %11 = cir.ternary(%10, true {
        %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
        %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc20)
        %17 = cir.const #cir.int<30> : !s32i loc(#loc20)
        %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc20)
        %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
        %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc20)
        %21 = cir.const #cir.int<15> : !s32i loc(#loc20)
        %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc20)
        %23 = cir.binop(xor, %18, %22) : !u32i loc(#loc20)
        %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
        %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc20)
        %26 = cir.binop(xor, %23, %25) : !u32i loc(#loc20)
        cir.yield %26 : !u32i loc(#loc20)
      }, false {
        %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
        %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc20)
        %17 = cir.const #cir.int<30> : !s32i loc(#loc20)
        %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc20)
        %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
        %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc20)
        %21 = cir.const #cir.int<15> : !s32i loc(#loc20)
        %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc20)
        %23 = cir.binop(xor, %18, %22) : !u32i loc(#loc20)
        %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
        %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc20)
        %26 = cir.binop(xor, %23, %25) : !u32i loc(#loc20)
        %27 = cir.unary(minus, %26) : !u32i, !u32i loc(#loc20)
        %28 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc20)
        %30 = cir.binop(sub, %27, %29) : !u32i loc(#loc20)
        cir.yield %30 : !u32i loc(#loc20)
      }) : (!cir.bool) -> !u32i loc(#loc20)
      %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc20)
      cir.store %12, %4 : !s32i, !cir.ptr<!s32i> loc(#loc143)
      %13 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc22)
      %14 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc23)
      cir.store %13, %14 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    } loc(#loc141)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc146)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc28)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc29)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc146)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc32)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc33)
        %9 = cir.cmp(lt, %7, %8) : !s32i, !s32i loc(#loc148)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc34)
        cir.if %10 {
          %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc150)
          %12 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc38)
          %13 = cir.const #cir.int<2> : !s32i loc(#loc37)
          %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc38)
          cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc150)
          %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc39)
          cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc40)
        } loc(#loc149)
      } loc(#loc147)
    } loc(#loc145)
    cir.return loc(#loc6)
  } loc(#loc136)
  cir.func no_proto  @CWE191_Integer_Underflow__int_rand_multiply_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc152)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc153)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    cir.return loc(#loc42)
  } loc(#loc151)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc155)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc156)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc157)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc156)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc157)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc55)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc160)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc61)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc160)
      %7 = cir.const #cir.int<2> : !s32i loc(#loc62)
      %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc63)
      cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc161)
      %9 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc65)
      %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc66)
      cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc162)
    } loc(#loc159)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc164)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc71)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc72)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc164)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc75)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc76)
        %9 = cir.cmp(lt, %7, %8) : !s32i, !s32i loc(#loc166)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc77)
        cir.if %10 {
          %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc168)
          %12 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc81)
          %13 = cir.const #cir.int<2> : !s32i loc(#loc80)
          %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc81)
          cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc168)
          %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc82)
          cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc83)
        } loc(#loc167)
      } loc(#loc165)
    } loc(#loc163)
    cir.return loc(#loc48)
  } loc(#loc154)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc169)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc86)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc171)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc172)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc173)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc172)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc173)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc95)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc176)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc100)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc101)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc176)
      %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc102)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc102)
      %9 = cir.binop(and, %7, %8) : !s32i loc(#loc102)
      %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc102)
      %11 = cir.ternary(%10, true {
        %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc102)
        %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc102)
        %17 = cir.const #cir.int<30> : !s32i loc(#loc102)
        %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc102)
        %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc102)
        %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc102)
        %21 = cir.const #cir.int<15> : !s32i loc(#loc102)
        %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc102)
        %23 = cir.binop(xor, %18, %22) : !u32i loc(#loc102)
        %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc102)
        %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc102)
        %26 = cir.binop(xor, %23, %25) : !u32i loc(#loc102)
        cir.yield %26 : !u32i loc(#loc102)
      }, false {
        %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc102)
        %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc102)
        %17 = cir.const #cir.int<30> : !s32i loc(#loc102)
        %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc102)
        %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc102)
        %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc102)
        %21 = cir.const #cir.int<15> : !s32i loc(#loc102)
        %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc102)
        %23 = cir.binop(xor, %18, %22) : !u32i loc(#loc102)
        %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc102)
        %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc102)
        %26 = cir.binop(xor, %23, %25) : !u32i loc(#loc102)
        %27 = cir.unary(minus, %26) : !u32i, !u32i loc(#loc102)
        %28 = cir.const #cir.int<1> : !s32i loc(#loc102)
        %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc102)
        %30 = cir.binop(sub, %27, %29) : !u32i loc(#loc102)
        cir.yield %30 : !u32i loc(#loc102)
      }) : (!cir.bool) -> !u32i loc(#loc102)
      %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc102)
      cir.store %12, %4 : !s32i, !cir.ptr<!s32i> loc(#loc177)
      %13 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc104)
      %14 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc105)
      cir.store %13, %14 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    } loc(#loc175)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc180)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc110)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc111)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc180)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc114)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc115)
        %9 = cir.cmp(lt, %7, %8) : !s32i, !s32i loc(#loc182)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc116)
        cir.if %10 {
          cir.scope {
            %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc120)
            %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc121)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc121)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc121)
            %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc121)
            %16 = cir.const #cir.int<2> : !s32i loc(#loc122)
            %17 = cir.binop(div, %15, %16) : !s32i loc(#loc185)
            %18 = cir.cmp(gt, %11, %17) : !s32i, !s32i loc(#loc186)
            %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc124)
            cir.if %19 {
              %20 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc188)
              %21 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc130)
              %22 = cir.const #cir.int<2> : !s32i loc(#loc129)
              %23 = cir.binop(mul, %21, %22) nsw : !s32i loc(#loc130)
              cir.store %23, %20 : !s32i, !cir.ptr<!s32i> loc(#loc188)
              %24 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc131)
              cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc132)
            } else {
              %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc86)
              %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc86)
              cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc133)
            } loc(#loc187)
          } loc(#loc184)
        } loc(#loc183)
      } loc(#loc181)
    } loc(#loc179)
    cir.return loc(#loc88)
  } loc(#loc170)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_32.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":44:1)
#loc7 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":24:5)
#loc8 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":24:9)
#loc9 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":25:5)
#loc10 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":25:22)
#loc11 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":26:5)
#loc12 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":26:22)
#loc13 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":28:12)
#loc14 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":28:5)
#loc15 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":29:5)
#loc16 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":34:5)
#loc17 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":30:9)
#loc18 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":30:21)
#loc19 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":30:20)
#loc20 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":32:16)
#loc21 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":32:9)
#loc22 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":33:21)
#loc23 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":33:10)
#loc24 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":33:9)
#loc25 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":35:5)
#loc26 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":43:5)
#loc27 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":36:9)
#loc28 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":36:21)
#loc29 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":36:20)
#loc30 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":37:9)
#loc31 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":42:9)
#loc32 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":37:12)
#loc33 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":37:19)
#loc34 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":37:17)
#loc35 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":38:9)
#loc36 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":40:13)
#loc37 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":40:33)
#loc38 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":40:26)
#loc39 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":41:26)
#loc40 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":41:13)
#loc41 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":107:1)
#loc42 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":111:1)
#loc43 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":109:5)
#loc44 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":109:13)
#loc45 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":110:5)
#loc46 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":110:13)
#loc47 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":51:1)
#loc48 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":73:1)
#loc49 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":53:5)
#loc50 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":53:9)
#loc51 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":54:5)
#loc52 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":54:22)
#loc53 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":55:5)
#loc54 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":55:22)
#loc55 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":57:12)
#loc56 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":57:5)
#loc57 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":58:5)
#loc58 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":63:5)
#loc59 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":59:9)
#loc60 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":59:21)
#loc61 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":59:20)
#loc62 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":61:17)
#loc63 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":61:16)
#loc64 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":61:9)
#loc65 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":62:21)
#loc66 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":62:10)
#loc67 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":62:9)
#loc68 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":64:5)
#loc69 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":72:5)
#loc70 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":65:9)
#loc71 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":65:21)
#loc72 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":65:20)
#loc73 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":66:9)
#loc74 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":71:9)
#loc75 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":66:12)
#loc76 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":66:19)
#loc77 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":66:17)
#loc78 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":67:9)
#loc79 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":69:13)
#loc80 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":69:33)
#loc81 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":69:26)
#loc82 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":70:26)
#loc83 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":70:13)
#loc84 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc85 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc86 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":101:27)
#loc87 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":76:1)
#loc88 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":105:1)
#loc89 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":78:5)
#loc90 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":78:9)
#loc91 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":79:5)
#loc92 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":79:22)
#loc93 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":80:5)
#loc94 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":80:22)
#loc95 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":82:12)
#loc96 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":82:5)
#loc97 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":83:5)
#loc98 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":88:5)
#loc99 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":84:9)
#loc100 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":84:21)
#loc101 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":84:20)
#loc102 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":86:16)
#loc103 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":86:9)
#loc104 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":87:21)
#loc105 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":87:10)
#loc106 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":87:9)
#loc107 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":89:5)
#loc108 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":104:5)
#loc109 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":90:9)
#loc110 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":90:21)
#loc111 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":90:20)
#loc112 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":91:9)
#loc113 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":103:9)
#loc114 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":91:12)
#loc115 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":91:19)
#loc116 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":91:17)
#loc117 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":92:9)
#loc118 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":94:13)
#loc119 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":102:13)
#loc120 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":94:17)
#loc121 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":94:25)
#loc122 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":94:33)
#loc123 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":94:34)
#loc124 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":94:22)
#loc125 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":95:13)
#loc126 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":98:13)
#loc127 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":100:13)
#loc128 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":96:17)
#loc129 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":96:37)
#loc130 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":96:30)
#loc131 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":97:30)
#loc132 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":97:17)
#loc133 = loc("CWE191_Integer_Underflow__int_rand_multiply_32.c":101:17)
#loc134 = loc(fused[#loc1, #loc2])
#loc135 = loc(fused[#loc3, #loc4])
#loc136 = loc(fused[#loc5, #loc6])
#loc137 = loc(fused[#loc7, #loc8])
#loc138 = loc(fused[#loc9, #loc10])
#loc139 = loc(fused[#loc11, #loc12])
#loc140 = loc(fused[#loc14, #loc13])
#loc141 = loc(fused[#loc15, #loc16])
#loc142 = loc(fused[#loc17, #loc18])
#loc143 = loc(fused[#loc21, #loc20])
#loc144 = loc(fused[#loc24, #loc22])
#loc145 = loc(fused[#loc25, #loc26])
#loc146 = loc(fused[#loc27, #loc28])
#loc147 = loc(fused[#loc30, #loc31])
#loc148 = loc(fused[#loc32, #loc33])
#loc149 = loc(fused[#loc35, #loc31])
#loc150 = loc(fused[#loc36, #loc37])
#loc151 = loc(fused[#loc41, #loc42])
#loc152 = loc(fused[#loc43, #loc44])
#loc153 = loc(fused[#loc45, #loc46])
#loc154 = loc(fused[#loc47, #loc48])
#loc155 = loc(fused[#loc49, #loc50])
#loc156 = loc(fused[#loc51, #loc52])
#loc157 = loc(fused[#loc53, #loc54])
#loc158 = loc(fused[#loc56, #loc55])
#loc159 = loc(fused[#loc57, #loc58])
#loc160 = loc(fused[#loc59, #loc60])
#loc161 = loc(fused[#loc64, #loc62])
#loc162 = loc(fused[#loc67, #loc65])
#loc163 = loc(fused[#loc68, #loc69])
#loc164 = loc(fused[#loc70, #loc71])
#loc165 = loc(fused[#loc73, #loc74])
#loc166 = loc(fused[#loc75, #loc76])
#loc167 = loc(fused[#loc78, #loc74])
#loc168 = loc(fused[#loc79, #loc80])
#loc169 = loc(fused[#loc84, #loc85])
#loc170 = loc(fused[#loc87, #loc88])
#loc171 = loc(fused[#loc89, #loc90])
#loc172 = loc(fused[#loc91, #loc92])
#loc173 = loc(fused[#loc93, #loc94])
#loc174 = loc(fused[#loc96, #loc95])
#loc175 = loc(fused[#loc97, #loc98])
#loc176 = loc(fused[#loc99, #loc100])
#loc177 = loc(fused[#loc103, #loc102])
#loc178 = loc(fused[#loc106, #loc104])
#loc179 = loc(fused[#loc107, #loc108])
#loc180 = loc(fused[#loc109, #loc110])
#loc181 = loc(fused[#loc112, #loc113])
#loc182 = loc(fused[#loc114, #loc115])
#loc183 = loc(fused[#loc117, #loc113])
#loc184 = loc(fused[#loc118, #loc119])
#loc185 = loc(fused[#loc121, #loc122])
#loc186 = loc(fused[#loc120, #loc123])
#loc187 = loc(fused[#loc125, #loc126, #loc127, #loc119])
#loc188 = loc(fused[#loc128, #loc129])
