!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s01/CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrue(...) -> !s32i loc(#loc83)
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc84)
  cir.func private  @printHexCharLine(!s8i) loc(#loc85)
  cir.func no_proto  @CWE197_Numeric_Truncation_Error__int_rand_to_char_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc87)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc12)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc90)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc90)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc16)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc16)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc19)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc19)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc19)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc19)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc19)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc19)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc19)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc19)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc19)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc19)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc19)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc19)
          cir.yield %24 : !u32i loc(#loc19)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc19)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc19)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc19)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc19)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc19)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc19)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc19)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc19)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc19)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc19)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc19)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc19)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc19)
          cir.yield %28 : !u32i loc(#loc19)
        }) : (!cir.bool) -> !u32i loc(#loc19)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc19)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc92)
      } loc(#loc91)
    } loc(#loc89)
    cir.scope {
      %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc94)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
      %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc24)
      cir.store %5, %3 : !s8i, !cir.ptr<!s8i> loc(#loc94)
      %6 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc25)
      cir.call @printHexCharLine(%6) : (!s8i) -> () loc(#loc26)
    } loc(#loc93)
    cir.return loc(#loc8)
  } loc(#loc86)
  cir.func no_proto  @CWE197_Numeric_Truncation_Error__int_rand_to_char_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc96)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc97)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc95)
  cir.func no_proto private  @globalReturnsFalse(...) -> !s32i loc(#loc98)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc99)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc37)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc101)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc43)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc102)
    cir.scope {
      %3 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc104)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc104)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc47)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc47)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc37)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc37)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc52)
      } else {
        %7 = cir.const #cir.int<127> : !s32i loc(#loc53)
        %8 = cir.const #cir.int<5> : !s32i loc(#loc54)
        %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc53)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
      } loc(#loc105)
    } loc(#loc103)
    cir.scope {
      %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc108)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
      %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc59)
      cir.store %5, %3 : !s8i, !cir.ptr<!s8i> loc(#loc108)
      %6 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc60)
      cir.call @printHexCharLine(%6) : (!s8i) -> () loc(#loc61)
    } loc(#loc107)
    cir.return loc(#loc39)
  } loc(#loc100)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc110)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc66)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc67)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc113)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc113)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc71)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc71)
      cir.if %6 {
        %7 = cir.const #cir.int<127> : !s32i loc(#loc74)
        %8 = cir.const #cir.int<5> : !s32i loc(#loc75)
        %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc74)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc115)
      } loc(#loc114)
    } loc(#loc112)
    cir.scope {
      %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc117)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
      %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc80)
      cir.store %5, %3 : !s8i, !cir.ptr<!s8i> loc(#loc117)
      %6 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc81)
      cir.call @printHexCharLine(%6) : (!s8i) -> () loc(#loc82)
    } loc(#loc116)
    cir.return loc(#loc63)
  } loc(#loc109)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s01/CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc7 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":21:1)
#loc8 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":36:1)
#loc9 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":23:5)
#loc10 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":23:9)
#loc11 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":25:13)
#loc12 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":25:12)
#loc13 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":25:5)
#loc14 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":26:5)
#loc15 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":30:5)
#loc16 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":26:8)
#loc17 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":26:26)
#loc18 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":27:5)
#loc19 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":29:16)
#loc20 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":29:9)
#loc21 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":31:5)
#loc22 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":35:5)
#loc23 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":33:9)
#loc24 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":33:31)
#loc25 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":34:26)
#loc26 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":34:9)
#loc27 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":83:1)
#loc28 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":87:1)
#loc29 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":85:5)
#loc30 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":85:14)
#loc31 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":86:5)
#loc32 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":86:14)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc37 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":51:19)
#loc38 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":43:1)
#loc39 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":63:1)
#loc40 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":45:5)
#loc41 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":45:9)
#loc42 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":47:13)
#loc43 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":47:12)
#loc44 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":47:5)
#loc45 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":48:5)
#loc46 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":57:5)
#loc47 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":48:8)
#loc48 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":48:27)
#loc49 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":49:5)
#loc50 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":52:5)
#loc51 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":54:5)
#loc52 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":51:9)
#loc53 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":56:16)
#loc54 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":56:25)
#loc55 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":56:9)
#loc56 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":58:5)
#loc57 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":62:5)
#loc58 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":60:9)
#loc59 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":60:31)
#loc60 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":61:26)
#loc61 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":61:9)
#loc62 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":66:1)
#loc63 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":81:1)
#loc64 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":68:5)
#loc65 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":68:9)
#loc66 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":70:13)
#loc67 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":70:12)
#loc68 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":70:5)
#loc69 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":71:5)
#loc70 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":75:5)
#loc71 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":71:8)
#loc72 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":71:26)
#loc73 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":72:5)
#loc74 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":74:16)
#loc75 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":74:25)
#loc76 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":74:9)
#loc77 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":76:5)
#loc78 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":80:5)
#loc79 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":78:9)
#loc80 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":78:31)
#loc81 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":79:26)
#loc82 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_11.c":79:9)
#loc83 = loc(fused[#loc1, #loc2])
#loc84 = loc(fused[#loc3, #loc4])
#loc85 = loc(fused[#loc5, #loc6])
#loc86 = loc(fused[#loc7, #loc8])
#loc87 = loc(fused[#loc9, #loc10])
#loc88 = loc(fused[#loc13, #loc11])
#loc89 = loc(fused[#loc14, #loc15])
#loc90 = loc(fused[#loc16, #loc17])
#loc91 = loc(fused[#loc18, #loc15])
#loc92 = loc(fused[#loc20, #loc19])
#loc93 = loc(fused[#loc21, #loc22])
#loc94 = loc(fused[#loc23, #loc24])
#loc95 = loc(fused[#loc27, #loc28])
#loc96 = loc(fused[#loc29, #loc30])
#loc97 = loc(fused[#loc31, #loc32])
#loc98 = loc(fused[#loc33, #loc34])
#loc99 = loc(fused[#loc35, #loc36])
#loc100 = loc(fused[#loc38, #loc39])
#loc101 = loc(fused[#loc40, #loc41])
#loc102 = loc(fused[#loc44, #loc42])
#loc103 = loc(fused[#loc45, #loc46])
#loc104 = loc(fused[#loc47, #loc48])
#loc105 = loc(fused[#loc49, #loc50, #loc51, #loc46])
#loc106 = loc(fused[#loc55, #loc54])
#loc107 = loc(fused[#loc56, #loc57])
#loc108 = loc(fused[#loc58, #loc59])
#loc109 = loc(fused[#loc62, #loc63])
#loc110 = loc(fused[#loc64, #loc65])
#loc111 = loc(fused[#loc68, #loc66])
#loc112 = loc(fused[#loc69, #loc70])
#loc113 = loc(fused[#loc71, #loc72])
#loc114 = loc(fused[#loc73, #loc70])
#loc115 = loc(fused[#loc76, #loc75])
#loc116 = loc(fused[#loc77, #loc78])
#loc117 = loc(fused[#loc79, #loc80])
