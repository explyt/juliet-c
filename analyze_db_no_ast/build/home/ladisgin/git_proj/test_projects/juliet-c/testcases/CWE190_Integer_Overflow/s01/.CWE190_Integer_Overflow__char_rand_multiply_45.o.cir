!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_multiply_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc112)
  cir.global "private"  internal dsolocal @CWE190_Integer_Overflow__char_rand_multiply_45_badData = #cir.int<0> : !s8i {alignment = 1 : i64} loc(#loc113)
  cir.func no_proto  @CWE190_Integer_Overflow__char_rand_multiply_45_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc115)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc9)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc9)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc116)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc11)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc11)
    %7 = cir.ternary(%6, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc11)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc11)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc11)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc11)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc11)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc11)
      cir.yield %24 : !u32i loc(#loc11)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc11)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc11)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc11)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc11)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc11)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc11)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc11)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc11)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc11)
      cir.yield %28 : !u32i loc(#loc11)
    }) : (!cir.bool) -> !u32i loc(#loc11)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc11)
    %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc11)
    cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc117)
    %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc13)
    %11 = cir.get_global @CWE190_Integer_Overflow__char_rand_multiply_45_badData : !cir.ptr<!s8i> loc(#loc113)
    cir.store %10, %11 : !s8i, !cir.ptr<!s8i> loc(#loc118)
    %12 = cir.get_global @badSink : !cir.ptr<!cir.func<!void ()>> loc(#loc119)
    cir.call %12() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc15)
    cir.return loc(#loc6)
  } loc(#loc114)
  cir.func no_proto  @CWE190_Integer_Overflow__char_rand_multiply_45_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc121)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc19)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc122)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc21)
    cir.return loc(#loc18)
  } loc(#loc120)
  cir.func private  @printHexCharLine(!s8i) loc(#loc123)
  cir.func no_proto internal private  @badSink() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc125)
    %1 = cir.get_global @CWE190_Integer_Overflow__char_rand_multiply_45_badData : !cir.ptr<!s8i> loc(#loc113)
    %2 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc28)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc125)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc31)
      %4 = cir.cast(integral, %3 : !s8i), !s32i loc(#loc31)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc32)
      %6 = cir.cmp(gt, %4, %5) : !s32i, !s32i loc(#loc127)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc33)
      cir.if %7 {
        %8 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc129)
        %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc37)
        %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc37)
        %11 = cir.const #cir.int<2> : !s32i loc(#loc36)
        %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc37)
        %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc37)
        cir.store %13, %8 : !s8i, !cir.ptr<!s8i> loc(#loc129)
        %14 = cir.load %8 : !cir.ptr<!s8i>, !s8i loc(#loc38)
        cir.call @printHexCharLine(%14) : (!s8i) -> () loc(#loc39)
      } loc(#loc128)
    } loc(#loc126)
    cir.return loc(#loc26)
  } loc(#loc124)
  cir.global "private"  internal dsolocal @CWE190_Integer_Overflow__char_rand_multiply_45_goodG2BData = #cir.int<0> : !s8i {alignment = 1 : i64} loc(#loc130)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc132)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc46)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc46)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc133)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc48)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc48)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc134)
    %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc50)
    %6 = cir.get_global @CWE190_Integer_Overflow__char_rand_multiply_45_goodG2BData : !cir.ptr<!s8i> loc(#loc130)
    cir.store %5, %6 : !s8i, !cir.ptr<!s8i> loc(#loc135)
    %7 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void ()>> loc(#loc136)
    cir.call %7() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    cir.return loc(#loc43)
  } loc(#loc131)
  cir.func no_proto internal private  @goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc138)
    %1 = cir.get_global @CWE190_Integer_Overflow__char_rand_multiply_45_goodG2BData : !cir.ptr<!s8i> loc(#loc130)
    %2 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc57)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc138)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc60)
      %4 = cir.cast(integral, %3 : !s8i), !s32i loc(#loc60)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc61)
      %6 = cir.cmp(gt, %4, %5) : !s32i, !s32i loc(#loc140)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc62)
      cir.if %7 {
        %8 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc142)
        %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc66)
        %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc66)
        %11 = cir.const #cir.int<2> : !s32i loc(#loc65)
        %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc66)
        %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc66)
        cir.store %13, %8 : !s8i, !cir.ptr<!s8i> loc(#loc142)
        %14 = cir.load %8 : !cir.ptr<!s8i>, !s8i loc(#loc67)
        cir.call @printHexCharLine(%14) : (!s8i) -> () loc(#loc68)
      } loc(#loc141)
    } loc(#loc139)
    cir.return loc(#loc55)
  } loc(#loc137)
  cir.global "private"  internal dsolocal @CWE190_Integer_Overflow__char_rand_multiply_45_goodB2GData = #cir.int<0> : !s8i {alignment = 1 : i64} loc(#loc143)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc145)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc75)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc75)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc146)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc77)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc77)
    %7 = cir.ternary(%6, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc77)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc77)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc77)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc77)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc77)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc77)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc77)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc77)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc77)
      cir.yield %24 : !u32i loc(#loc77)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc77)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc77)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc77)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc77)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc77)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc77)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc77)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc77)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc77)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc77)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc77)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc77)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc77)
      cir.yield %28 : !u32i loc(#loc77)
    }) : (!cir.bool) -> !u32i loc(#loc77)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc77)
    %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc77)
    cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc147)
    %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc79)
    %11 = cir.get_global @CWE190_Integer_Overflow__char_rand_multiply_45_goodB2GData : !cir.ptr<!s8i> loc(#loc143)
    cir.store %10, %11 : !s8i, !cir.ptr<!s8i> loc(#loc148)
    %12 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void ()>> loc(#loc149)
    cir.call %12() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc81)
    cir.return loc(#loc72)
  } loc(#loc144)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc150)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc85)
  cir.func no_proto internal private  @goodB2GSink() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc152)
    %1 = cir.get_global @CWE190_Integer_Overflow__char_rand_multiply_45_goodB2GData : !cir.ptr<!s8i> loc(#loc143)
    %2 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc89)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc152)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc92)
      %4 = cir.cast(integral, %3 : !s8i), !s32i loc(#loc92)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc93)
      %6 = cir.cmp(gt, %4, %5) : !s32i, !s32i loc(#loc154)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc94)
      cir.if %7 {
        cir.scope {
          %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc98)
          %9 = cir.cast(integral, %8 : !s8i), !s32i loc(#loc98)
          %10 = cir.const #cir.int<127> : !s32i loc(#loc99)
          %11 = cir.const #cir.int<2> : !s32i loc(#loc100)
          %12 = cir.binop(div, %10, %11) : !s32i loc(#loc157)
          %13 = cir.cmp(lt, %9, %12) : !s32i, !s32i loc(#loc158)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc102)
          cir.if %14 {
            %15 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc160)
            %16 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc108)
            %17 = cir.cast(integral, %16 : !s8i), !s32i loc(#loc108)
            %18 = cir.const #cir.int<2> : !s32i loc(#loc107)
            %19 = cir.binop(mul, %17, %18) nsw : !s32i loc(#loc108)
            %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc108)
            cir.store %20, %15 : !s8i, !cir.ptr<!s8i> loc(#loc160)
            %21 = cir.load %15 : !cir.ptr<!s8i>, !s8i loc(#loc109)
            cir.call @printHexCharLine(%21) : (!s8i) -> () loc(#loc110)
          } else {
            %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc85)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc85)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc111)
          } loc(#loc159)
        } loc(#loc156)
      } loc(#loc155)
    } loc(#loc153)
    cir.return loc(#loc87)
  } loc(#loc151)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_multiply_45.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":20:1)
#loc4 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":20:13)
#loc5 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":37:1)
#loc6 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":45:1)
#loc7 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":39:5)
#loc8 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":39:10)
#loc9 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":40:12)
#loc10 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":40:5)
#loc11 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":42:18)
#loc12 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":42:5)
#loc13 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":43:62)
#loc14 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":43:5)
#loc15 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":44:5)
#loc16 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":44:13)
#loc17 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":102:1)
#loc18 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":106:1)
#loc19 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":104:5)
#loc20 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":104:13)
#loc21 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":105:5)
#loc22 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":105:13)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc24 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc25 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":26:1)
#loc26 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":35:1)
#loc27 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":28:5)
#loc28 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":28:17)
#loc29 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":29:5)
#loc30 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":34:5)
#loc31 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":29:8)
#loc32 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":29:15)
#loc33 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":29:13)
#loc34 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":30:5)
#loc35 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":32:9)
#loc36 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":32:30)
#loc37 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":32:23)
#loc38 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":33:26)
#loc39 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":33:9)
#loc40 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":21:1)
#loc41 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":21:13)
#loc42 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":63:1)
#loc43 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":71:1)
#loc44 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":65:5)
#loc45 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":65:10)
#loc46 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":66:12)
#loc47 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":66:5)
#loc48 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":68:12)
#loc49 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":68:5)
#loc50 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":69:66)
#loc51 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":69:5)
#loc52 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":70:5)
#loc53 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":70:17)
#loc54 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":52:1)
#loc55 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":61:1)
#loc56 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":54:5)
#loc57 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":54:17)
#loc58 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":55:5)
#loc59 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":60:5)
#loc60 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":55:8)
#loc61 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":55:15)
#loc62 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":55:13)
#loc63 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":56:5)
#loc64 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":58:9)
#loc65 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":58:30)
#loc66 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":58:23)
#loc67 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":59:26)
#loc68 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":59:9)
#loc69 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":22:1)
#loc70 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":22:13)
#loc71 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":92:1)
#loc72 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":100:1)
#loc73 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":94:5)
#loc74 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":94:10)
#loc75 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":95:12)
#loc76 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":95:5)
#loc77 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":97:18)
#loc78 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":97:5)
#loc79 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":98:66)
#loc80 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":98:5)
#loc81 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":99:5)
#loc82 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":99:17)
#loc83 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc84 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc85 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":87:23)
#loc86 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":74:1)
#loc87 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":90:1)
#loc88 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":76:5)
#loc89 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":76:17)
#loc90 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":77:5)
#loc91 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":89:5)
#loc92 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":77:8)
#loc93 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":77:15)
#loc94 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":77:13)
#loc95 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":78:5)
#loc96 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":80:9)
#loc97 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":88:9)
#loc98 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":80:13)
#loc99 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":80:21)
#loc100 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":80:30)
#loc101 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":80:31)
#loc102 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":80:18)
#loc103 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":81:9)
#loc104 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":84:9)
#loc105 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":86:9)
#loc106 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":82:13)
#loc107 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":82:34)
#loc108 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":82:27)
#loc109 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":83:30)
#loc110 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":83:13)
#loc111 = loc("CWE190_Integer_Overflow__char_rand_multiply_45.c":87:13)
#loc112 = loc(fused[#loc1, #loc2])
#loc113 = loc(fused[#loc3, #loc4])
#loc114 = loc(fused[#loc5, #loc6])
#loc115 = loc(fused[#loc7, #loc8])
#loc116 = loc(fused[#loc10, #loc9])
#loc117 = loc(fused[#loc12, #loc11])
#loc118 = loc(fused[#loc14, #loc13])
#loc119 = loc(fused[#loc15, #loc16])
#loc120 = loc(fused[#loc17, #loc18])
#loc121 = loc(fused[#loc19, #loc20])
#loc122 = loc(fused[#loc21, #loc22])
#loc123 = loc(fused[#loc23, #loc24])
#loc124 = loc(fused[#loc25, #loc26])
#loc125 = loc(fused[#loc27, #loc28])
#loc126 = loc(fused[#loc29, #loc30])
#loc127 = loc(fused[#loc31, #loc32])
#loc128 = loc(fused[#loc34, #loc30])
#loc129 = loc(fused[#loc35, #loc36])
#loc130 = loc(fused[#loc40, #loc41])
#loc131 = loc(fused[#loc42, #loc43])
#loc132 = loc(fused[#loc44, #loc45])
#loc133 = loc(fused[#loc47, #loc46])
#loc134 = loc(fused[#loc49, #loc48])
#loc135 = loc(fused[#loc51, #loc50])
#loc136 = loc(fused[#loc52, #loc53])
#loc137 = loc(fused[#loc54, #loc55])
#loc138 = loc(fused[#loc56, #loc57])
#loc139 = loc(fused[#loc58, #loc59])
#loc140 = loc(fused[#loc60, #loc61])
#loc141 = loc(fused[#loc63, #loc59])
#loc142 = loc(fused[#loc64, #loc65])
#loc143 = loc(fused[#loc69, #loc70])
#loc144 = loc(fused[#loc71, #loc72])
#loc145 = loc(fused[#loc73, #loc74])
#loc146 = loc(fused[#loc76, #loc75])
#loc147 = loc(fused[#loc78, #loc77])
#loc148 = loc(fused[#loc80, #loc79])
#loc149 = loc(fused[#loc81, #loc82])
#loc150 = loc(fused[#loc83, #loc84])
#loc151 = loc(fused[#loc86, #loc87])
#loc152 = loc(fused[#loc88, #loc89])
#loc153 = loc(fused[#loc90, #loc91])
#loc154 = loc(fused[#loc92, #loc93])
#loc155 = loc(fused[#loc95, #loc91])
#loc156 = loc(fused[#loc96, #loc97])
#loc157 = loc(fused[#loc99, #loc100])
#loc158 = loc(fused[#loc98, #loc101])
#loc159 = loc(fused[#loc103, #loc104, #loc105, #loc97])
#loc160 = loc(fused[#loc106, #loc107])
