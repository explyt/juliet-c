!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant external @GLOBAL_CONST_FIVE : !s32i {alignment = 4 : i64} loc(#loc188)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc3)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc189)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc190)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc191)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_13_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc193)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc14)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc194)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc188)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc18)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc19)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc196)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc3)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc3)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc3)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc198)
      } loc(#loc197)
    } loc(#loc195)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc188)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc24)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc25)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc200)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc203)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc204)
          %8 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc33)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc34)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
          %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc33)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc203)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc32)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc32)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc32)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc32)
          %16 = cir.const #cir.int<4> : !u64i loc(#loc32)
          %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc32)
          %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc32)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc32)
          cir.store %19, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc204)
          %20 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc35)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc35)
          %22 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc36)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc36)
          %24 = cir.call @wcscpy(%21, %23) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc37)
          %25 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc38)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc38)
          cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc39)
        } loc(#loc202)
      } loc(#loc201)
    } loc(#loc199)
    cir.return loc(#loc11)
  } loc(#loc192)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_13_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc206)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc207)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc208)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc209)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc48)
    cir.return loc(#loc41)
  } loc(#loc205)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc50)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc210)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc211)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc213)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc59)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc214)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc188)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc63)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc64)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc216)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc66)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc66)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc66)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc218)
      } loc(#loc217)
    } loc(#loc215)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc188)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc70)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc71)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc220)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc50)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc50)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc75)
      } else {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc223)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc224)
          %8 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc82)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc83)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc83)
          %11 = cir.call @wcslen(%10) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc82)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc223)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc81)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc81)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc81)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc81)
          %16 = cir.const #cir.int<4> : !u64i loc(#loc81)
          %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc81)
          %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc81)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc81)
          cir.store %19, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc224)
          %20 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc84)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc84)
          %22 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc85)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc85)
          %24 = cir.call @wcscpy(%21, %23) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc86)
          %25 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc87)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc87)
          cir.call @printWLine(%26) : (!cir.ptr<!s32i>) -> () loc(#loc88)
        } loc(#loc222)
      } loc(#loc221)
    } loc(#loc219)
    cir.return loc(#loc56)
  } loc(#loc212)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc226)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc93)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc227)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc188)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc97)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc98)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc229)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc100)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc100)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc100)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc231)
      } loc(#loc230)
    } loc(#loc228)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc188)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc104)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc105)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc233)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc236)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc237)
          %8 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc113)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc114)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc114)
          %11 = cir.call @wcslen(%10) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc113)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc236)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc112)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc112)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc112)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc112)
          %16 = cir.const #cir.int<4> : !u64i loc(#loc112)
          %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc112)
          %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc112)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc112)
          cir.store %19, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc237)
          %20 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc115)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc115)
          %22 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc116)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc116)
          %24 = cir.call @wcscpy(%21, %23) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc117)
          %25 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc118)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc118)
          cir.call @printWLine(%26) : (!cir.ptr<!s32i>) -> () loc(#loc119)
        } loc(#loc235)
      } loc(#loc234)
    } loc(#loc232)
    cir.return loc(#loc90)
  } loc(#loc225)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc120)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc238)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc240)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc127)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc241)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc188)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc131)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc132)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc243)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc136)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc136)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc137)
      } else {
        %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc120)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc120)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc120)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc245)
      } loc(#loc244)
    } loc(#loc242)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc188)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc141)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc142)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc247)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc250)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc251)
          %8 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc150)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc151)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc151)
          %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc150)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc250)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc149)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc149)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc149)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc149)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc149)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc149)
          %18 = cir.binop(mul, %15, %17) : !u64i loc(#loc149)
          %19 = cir.alloca !u8i, !cir.ptr<!u8i>, %18 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc149)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc149)
          cir.store %20, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc251)
          %21 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc152)
          %22 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc153)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc153)
          %24 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc154)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc154)
          %26 = cir.call @strcpy(%23, %25) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc152)
          %27 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc155)
          %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc155)
          cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc156)
        } loc(#loc249)
      } loc(#loc248)
    } loc(#loc246)
    cir.return loc(#loc124)
  } loc(#loc239)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc253)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc161)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc254)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc188)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc165)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc166)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc256)
      cir.if %5 {
        %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc168)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc168)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc168)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc258)
      } loc(#loc257)
    } loc(#loc255)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc188)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc172)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc173)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc260)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc263)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc264)
          %8 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc181)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc182)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc182)
          %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc181)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc263)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc180)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc180)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc180)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc180)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc180)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc180)
          %18 = cir.binop(mul, %15, %17) : !u64i loc(#loc180)
          %19 = cir.alloca !u8i, !cir.ptr<!u8i>, %18 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc180)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc180)
          cir.store %20, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc264)
          %21 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc183)
          %22 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc184)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc184)
          %24 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc185)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc185)
          %26 = cir.call @strcpy(%23, %25) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc183)
          %27 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc186)
          %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc186)
          cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc187)
        } loc(#loc262)
      } loc(#loc261)
    } loc(#loc259)
    cir.return loc(#loc158)
  } loc(#loc252)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":111:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":111:18)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":34:24)
#loc4 = loc("/usr/include/string.h":407:1)
#loc5 = loc("/usr/include/string.h":408:33)
#loc6 = loc("/usr/include/wchar.h":98:1)
#loc7 = loc("/usr/include/wchar.h":100:14)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":27:1)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":46:1)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":29:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":29:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":30:12)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":30:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":31:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":35:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":31:8)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":31:27)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":32:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":34:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":36:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":45:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":36:8)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":36:27)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":37:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":38:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":44:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":40:13)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":40:49)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":41:13)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":41:35)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":40:30)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":40:45)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":42:26)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":42:32)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":42:19)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":43:31)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":43:13)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":150:1)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":156:1)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":152:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":152:14)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":153:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":153:14)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":154:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":154:14)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":155:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":155:14)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":65:19)
#loc51 = loc("/usr/include/wchar.h":247:1)
#loc52 = loc("/usr/include/wchar.h":247:51)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":53:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":77:1)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":55:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":55:12)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":56:12)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":56:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":57:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":61:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":57:8)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":57:27)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":58:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":60:24)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":60:9)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":62:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":76:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":62:8)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":62:27)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":63:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":66:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":68:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":65:9)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":69:9)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":75:9)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":71:13)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":71:52)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":72:13)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":72:35)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":71:30)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":71:48)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":73:26)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":73:32)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":73:19)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":74:35)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":74:13)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":80:1)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":99:1)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":82:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":82:12)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":83:12)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":83:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":84:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":88:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":84:8)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":84:27)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":85:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":87:24)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":87:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":89:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":98:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":89:8)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":89:27)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":90:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":91:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":97:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":93:13)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":93:52)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":94:13)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":94:35)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":93:30)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":93:48)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":95:26)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":95:32)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":95:19)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":96:35)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":96:13)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":114:24)
#loc121 = loc("/usr/include/string.h":141:1)
#loc122 = loc("/usr/include/string.h":142:14)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":102:1)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":126:1)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":104:5)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":104:12)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":105:12)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":105:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":106:5)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":115:5)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":106:8)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":106:27)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":107:5)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":110:5)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":112:5)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":109:19)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":109:9)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":114:9)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":116:5)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":125:5)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":116:8)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":116:27)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":117:5)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":118:9)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":124:9)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":120:13)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":120:49)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":121:13)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":121:35)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":120:30)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":120:45)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":122:19)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":122:26)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":122:32)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":123:31)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":123:13)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":129:1)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":148:1)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":131:5)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":131:12)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":132:12)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":132:5)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":133:5)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":137:5)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":133:8)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":133:27)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":134:5)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":136:24)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":136:9)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":138:5)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":147:5)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":138:8)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":138:27)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":139:5)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":140:9)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":146:9)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":142:13)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":142:49)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":143:13)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":143:35)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":142:30)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":142:45)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":144:19)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":144:26)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":144:32)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":145:31)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c":145:13)
#loc188 = loc(fused[#loc1, #loc2])
#loc189 = loc(fused[#loc4, #loc5])
#loc190 = loc(fused[#loc6, #loc7])
#loc191 = loc(fused[#loc8, #loc9])
#loc192 = loc(fused[#loc10, #loc11])
#loc193 = loc(fused[#loc12, #loc13])
#loc194 = loc(fused[#loc15, #loc14])
#loc195 = loc(fused[#loc16, #loc17])
#loc196 = loc(fused[#loc18, #loc19])
#loc197 = loc(fused[#loc20, #loc17])
#loc198 = loc(fused[#loc21, #loc3])
#loc199 = loc(fused[#loc22, #loc23])
#loc200 = loc(fused[#loc24, #loc25])
#loc201 = loc(fused[#loc26, #loc23])
#loc202 = loc(fused[#loc27, #loc28])
#loc203 = loc(fused[#loc29, #loc30])
#loc204 = loc(fused[#loc31, #loc32])
#loc205 = loc(fused[#loc40, #loc41])
#loc206 = loc(fused[#loc42, #loc43])
#loc207 = loc(fused[#loc44, #loc45])
#loc208 = loc(fused[#loc46, #loc47])
#loc209 = loc(fused[#loc48, #loc49])
#loc210 = loc(fused[#loc51, #loc52])
#loc211 = loc(fused[#loc53, #loc54])
#loc212 = loc(fused[#loc55, #loc56])
#loc213 = loc(fused[#loc57, #loc58])
#loc214 = loc(fused[#loc60, #loc59])
#loc215 = loc(fused[#loc61, #loc62])
#loc216 = loc(fused[#loc63, #loc64])
#loc217 = loc(fused[#loc65, #loc62])
#loc218 = loc(fused[#loc67, #loc66])
#loc219 = loc(fused[#loc68, #loc69])
#loc220 = loc(fused[#loc70, #loc71])
#loc221 = loc(fused[#loc72, #loc73, #loc74, #loc69])
#loc222 = loc(fused[#loc76, #loc77])
#loc223 = loc(fused[#loc78, #loc79])
#loc224 = loc(fused[#loc80, #loc81])
#loc225 = loc(fused[#loc89, #loc90])
#loc226 = loc(fused[#loc91, #loc92])
#loc227 = loc(fused[#loc94, #loc93])
#loc228 = loc(fused[#loc95, #loc96])
#loc229 = loc(fused[#loc97, #loc98])
#loc230 = loc(fused[#loc99, #loc96])
#loc231 = loc(fused[#loc101, #loc100])
#loc232 = loc(fused[#loc102, #loc103])
#loc233 = loc(fused[#loc104, #loc105])
#loc234 = loc(fused[#loc106, #loc103])
#loc235 = loc(fused[#loc107, #loc108])
#loc236 = loc(fused[#loc109, #loc110])
#loc237 = loc(fused[#loc111, #loc112])
#loc238 = loc(fused[#loc121, #loc122])
#loc239 = loc(fused[#loc123, #loc124])
#loc240 = loc(fused[#loc125, #loc126])
#loc241 = loc(fused[#loc128, #loc127])
#loc242 = loc(fused[#loc129, #loc130])
#loc243 = loc(fused[#loc131, #loc132])
#loc244 = loc(fused[#loc133, #loc134, #loc135, #loc130])
#loc245 = loc(fused[#loc138, #loc120])
#loc246 = loc(fused[#loc139, #loc140])
#loc247 = loc(fused[#loc141, #loc142])
#loc248 = loc(fused[#loc143, #loc140])
#loc249 = loc(fused[#loc144, #loc145])
#loc250 = loc(fused[#loc146, #loc147])
#loc251 = loc(fused[#loc148, #loc149])
#loc252 = loc(fused[#loc157, #loc158])
#loc253 = loc(fused[#loc159, #loc160])
#loc254 = loc(fused[#loc162, #loc161])
#loc255 = loc(fused[#loc163, #loc164])
#loc256 = loc(fused[#loc165, #loc166])
#loc257 = loc(fused[#loc167, #loc164])
#loc258 = loc(fused[#loc169, #loc168])
#loc259 = loc(fused[#loc170, #loc171])
#loc260 = loc(fused[#loc172, #loc173])
#loc261 = loc(fused[#loc174, #loc171])
#loc262 = loc(fused[#loc175, #loc176])
#loc263 = loc(fused[#loc177, #loc178])
#loc264 = loc(fused[#loc179, #loc180])
