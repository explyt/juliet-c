!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc163 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":333:10)
#loc164 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":333:14)
#loc165 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":333:20)
#loc166 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":333:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc488 = loc(fused[#loc163, #loc164])
#loc489 = loc(fused[#loc165, #loc166])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_divide_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc425)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc426)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc427)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc7)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc428)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc429)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc430)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc431)
  cir.func private @close(!s32i) -> !s32i loc(#loc432)
  cir.func private @printIntLine(!s32i) loc(#loc433)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc434)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc22)
  cir.func no_proto @CWE369_Divide_by_Zero__int_connect_socket_divide_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc436)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc28)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc437)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc439)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc439)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc32)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc32)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc442)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc443)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc444)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc445)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc44)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc44)
          cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc444)
          cir.scope {
            cir.do {
              %13 = cir.const #cir.int<2> : !s32i loc(#loc49)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc50)
              %15 = cir.const #cir.int<6> : !s32i loc(#loc51)
              %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc52)
              cir.store %16, %9 : !s32i, !cir.ptr<!s32i> loc(#loc447)
              cir.scope {
                %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc57)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc58)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc58)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc449)
                cir.if %58 {
                  cir.break loc(#loc60)
                } loc(#loc450)
              } loc(#loc448)
              %17 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc451)
              %18 = cir.const #cir.int<0> : !s32i loc(#loc63)
              %19 = cir.const #cir.int<16> : !u64i loc(#loc452)
              cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc453)
              %20 = cir.const #cir.int<2> : !s32i loc(#loc68)
              %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc68)
              %22 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
              cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc454)
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc7)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc7)
              %25 = cir.call @inet_addr(%24) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc71)
              %26 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
              %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
              cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc455)
              %28 = cir.const #cir.int<27015> : !s32i loc(#loc76)
              %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc76)
              %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc77)
              %31 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
              cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc456)
              cir.scope {
                %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc83)
                %56 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc458)
                %57 = cir.const #cir.int<16> : !u64i loc(#loc459)
                %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc459)
                %59 = cir.call @connect(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc88)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc89)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc89)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc460)
                cir.if %62 {
                  cir.break loc(#loc91)
                } loc(#loc461)
              } loc(#loc457)
              %32 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc92)
              %33 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc93)
              %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc93)
              %35 = cir.const #cir.int<3> : !s32i loc(#loc94)
              %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc94)
              %37 = cir.const #cir.int<4> : !u64i loc(#loc94)
              %38 = cir.binop(mul, %36, %37) : !u64i loc(#loc94)
              %39 = cir.const #cir.int<2> : !s32i loc(#loc94)
              %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc94)
              %41 = cir.binop(add, %38, %40) : !u64i loc(#loc94)
              %42 = cir.const #cir.int<1> : !s32i loc(#loc95)
              %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc95)
              %44 = cir.binop(sub, %41, %43) : !u64i loc(#loc462)
              %45 = cir.const #cir.int<0> : !s32i loc(#loc96)
              %46 = cir.call @recv(%32, %34, %44, %45) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc97)
              %47 = cir.cast(integral, %46 : !s64i), !s32i loc(#loc97)
              cir.store %47, %7 : !s32i, !cir.ptr<!s32i> loc(#loc463)
              cir.scope {
                %55 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc102)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc103)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc103)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc465)
                %59 = cir.ternary(%58, true {
                  %60 = cir.const #true loc(#loc104)
                  cir.yield %60 : !cir.bool loc(#loc104)
                }, false {
                  %60 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                  %61 = cir.const #cir.int<0> : !s32i loc(#loc106)
                  %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc466)
                  %63 = cir.ternary(%62, true {
                    %64 = cir.const #true loc(#loc104)
                    cir.yield %64 : !cir.bool loc(#loc104)
                  }, false {
                    %64 = cir.const #false loc(#loc104)
                    cir.yield %64 : !cir.bool loc(#loc104)
                  }) : (!cir.bool) -> !cir.bool loc(#loc104)
                  cir.yield %63 : !cir.bool loc(#loc104)
                }) : (!cir.bool) -> !cir.bool loc(#loc104)
                cir.if %59 {
                  cir.break loc(#loc108)
                } loc(#loc467)
              } loc(#loc464)
              %48 = cir.const #cir.int<0> : !s32i loc(#loc109)
              %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc109)
              %50 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc110)
              %51 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc111)
              %52 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc111)
              cir.store %49, %52 : !s8i, !cir.ptr<!s8i> loc(#loc468)
              %53 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc112)
              %54 = cir.call @atoi(%53) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc113)
              cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc469)
              cir.yield loc(#loc48)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc116)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc116)
              cir.condition(%14) loc(#loc116)
            } loc(#loc446)
          } loc(#loc446)
          cir.scope {
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc119)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc120)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc120)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc471)
            cir.if %16 {
              %17 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc122)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc123)
            } loc(#loc472)
          } loc(#loc470)
        } loc(#loc441)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc124)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc473)
      } loc(#loc440)
    } loc(#loc438)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc475)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc475)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc128)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc128)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc133)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc134)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc477)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc135)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc138)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc139)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc479)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc143)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc144)
            %12 = cir.binop(div, %10, %11) : !s32i loc(#loc481)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc145)
          } else {
            %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc22)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc22)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc146)
          } loc(#loc480)
        } loc(#loc478)
      } loc(#loc476)
    } loc(#loc474)
    cir.return loc(#loc24)
  } loc(#loc435)
  cir.func no_proto @CWE369_Divide_by_Zero__int_connect_socket_divide_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc483)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc149)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc484)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc151)
    cir.return loc(#loc148)
  } loc(#loc482)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc485)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc486)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc157)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc158)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc159)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc160)
  cir.func @main(%arg0: !s32i loc(fused[#loc163, #loc164]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc165, #loc166])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc488)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc489)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc162)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc167)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc167)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc168)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc169)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc169)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc170)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc157)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc157)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc171)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_connect_socket_divide_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc490)
    cir.call @CWE369_Divide_by_Zero__int_connect_socket_divide_12_good() : () -> () loc(#loc172)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc158)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc158)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc174)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc159)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc159)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc175)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_connect_socket_divide_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc491)
    cir.call @CWE369_Divide_by_Zero__int_connect_socket_divide_12_bad() : () -> () loc(#loc176)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc160)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc160)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc178)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc179)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc492)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc492)
    cir.return %17 : !s32i loc(#loc492)
  } loc(#loc487)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc494)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc185)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc186)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc495)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc497)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc497)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc190)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc190)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc500)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc501)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc502)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc503)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc202)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc202)
          cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc502)
          cir.scope {
            cir.do {
              %13 = cir.const #cir.int<2> : !s32i loc(#loc207)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc208)
              %15 = cir.const #cir.int<6> : !s32i loc(#loc209)
              %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc210)
              cir.store %16, %9 : !s32i, !cir.ptr<!s32i> loc(#loc505)
              cir.scope {
                %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc215)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc216)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc216)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc507)
                cir.if %58 {
                  cir.break loc(#loc218)
                } loc(#loc508)
              } loc(#loc506)
              %17 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc509)
              %18 = cir.const #cir.int<0> : !s32i loc(#loc221)
              %19 = cir.const #cir.int<16> : !u64i loc(#loc510)
              cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc511)
              %20 = cir.const #cir.int<2> : !s32i loc(#loc226)
              %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc226)
              %22 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
              cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc512)
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc228)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc228)
              %25 = cir.call @inet_addr(%24) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc229)
              %26 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
              %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
              cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc513)
              %28 = cir.const #cir.int<27015> : !s32i loc(#loc232)
              %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc232)
              %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc233)
              %31 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
              cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc514)
              cir.scope {
                %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc238)
                %56 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc516)
                %57 = cir.const #cir.int<16> : !u64i loc(#loc517)
                %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc517)
                %59 = cir.call @connect(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc243)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc244)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc244)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc518)
                cir.if %62 {
                  cir.break loc(#loc246)
                } loc(#loc519)
              } loc(#loc515)
              %32 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc247)
              %33 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc248)
              %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc248)
              %35 = cir.const #cir.int<3> : !s32i loc(#loc249)
              %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc249)
              %37 = cir.const #cir.int<4> : !u64i loc(#loc249)
              %38 = cir.binop(mul, %36, %37) : !u64i loc(#loc249)
              %39 = cir.const #cir.int<2> : !s32i loc(#loc249)
              %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc249)
              %41 = cir.binop(add, %38, %40) : !u64i loc(#loc249)
              %42 = cir.const #cir.int<1> : !s32i loc(#loc250)
              %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc250)
              %44 = cir.binop(sub, %41, %43) : !u64i loc(#loc520)
              %45 = cir.const #cir.int<0> : !s32i loc(#loc251)
              %46 = cir.call @recv(%32, %34, %44, %45) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc252)
              %47 = cir.cast(integral, %46 : !s64i), !s32i loc(#loc252)
              cir.store %47, %7 : !s32i, !cir.ptr<!s32i> loc(#loc521)
              cir.scope {
                %55 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc257)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc258)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc258)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc523)
                %59 = cir.ternary(%58, true {
                  %60 = cir.const #true loc(#loc259)
                  cir.yield %60 : !cir.bool loc(#loc259)
                }, false {
                  %60 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc260)
                  %61 = cir.const #cir.int<0> : !s32i loc(#loc261)
                  %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc524)
                  %63 = cir.ternary(%62, true {
                    %64 = cir.const #true loc(#loc259)
                    cir.yield %64 : !cir.bool loc(#loc259)
                  }, false {
                    %64 = cir.const #false loc(#loc259)
                    cir.yield %64 : !cir.bool loc(#loc259)
                  }) : (!cir.bool) -> !cir.bool loc(#loc259)
                  cir.yield %63 : !cir.bool loc(#loc259)
                }) : (!cir.bool) -> !cir.bool loc(#loc259)
                cir.if %59 {
                  cir.break loc(#loc263)
                } loc(#loc525)
              } loc(#loc522)
              %48 = cir.const #cir.int<0> : !s32i loc(#loc264)
              %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc264)
              %50 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc265)
              %51 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc266)
              %52 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc266)
              cir.store %49, %52 : !s8i, !cir.ptr<!s8i> loc(#loc526)
              %53 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc267)
              %54 = cir.call @atoi(%53) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc268)
              cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc527)
              cir.yield loc(#loc206)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc271)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc271)
              cir.condition(%14) loc(#loc271)
            } loc(#loc504)
          } loc(#loc504)
          cir.scope {
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc274)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc275)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc275)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc529)
            cir.if %16 {
              %17 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc277)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc278)
            } loc(#loc530)
          } loc(#loc528)
        } loc(#loc499)
      } else {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc532)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc533)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc534)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc535)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc286)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc286)
          cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc534)
          cir.scope {
            cir.do {
              %13 = cir.const #cir.int<2> : !s32i loc(#loc291)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc292)
              %15 = cir.const #cir.int<6> : !s32i loc(#loc293)
              %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc294)
              cir.store %16, %9 : !s32i, !cir.ptr<!s32i> loc(#loc537)
              cir.scope {
                %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc299)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc300)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc300)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc539)
                cir.if %58 {
                  cir.break loc(#loc302)
                } loc(#loc540)
              } loc(#loc538)
              %17 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc541)
              %18 = cir.const #cir.int<0> : !s32i loc(#loc305)
              %19 = cir.const #cir.int<16> : !u64i loc(#loc542)
              cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc543)
              %20 = cir.const #cir.int<2> : !s32i loc(#loc310)
              %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc310)
              %22 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
              cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc544)
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc312)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc312)
              %25 = cir.call @inet_addr(%24) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc313)
              %26 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
              %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
              cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc545)
              %28 = cir.const #cir.int<27015> : !s32i loc(#loc316)
              %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc316)
              %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc317)
              %31 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
              cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc546)
              cir.scope {
                %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc322)
                %56 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc548)
                %57 = cir.const #cir.int<16> : !u64i loc(#loc549)
                %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc549)
                %59 = cir.call @connect(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc327)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc328)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc328)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc550)
                cir.if %62 {
                  cir.break loc(#loc330)
                } loc(#loc551)
              } loc(#loc547)
              %32 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc331)
              %33 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc332)
              %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc332)
              %35 = cir.const #cir.int<3> : !s32i loc(#loc333)
              %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc333)
              %37 = cir.const #cir.int<4> : !u64i loc(#loc333)
              %38 = cir.binop(mul, %36, %37) : !u64i loc(#loc333)
              %39 = cir.const #cir.int<2> : !s32i loc(#loc333)
              %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc333)
              %41 = cir.binop(add, %38, %40) : !u64i loc(#loc333)
              %42 = cir.const #cir.int<1> : !s32i loc(#loc334)
              %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc334)
              %44 = cir.binop(sub, %41, %43) : !u64i loc(#loc552)
              %45 = cir.const #cir.int<0> : !s32i loc(#loc335)
              %46 = cir.call @recv(%32, %34, %44, %45) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc336)
              %47 = cir.cast(integral, %46 : !s64i), !s32i loc(#loc336)
              cir.store %47, %7 : !s32i, !cir.ptr<!s32i> loc(#loc553)
              cir.scope {
                %55 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc341)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc342)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc342)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc555)
                %59 = cir.ternary(%58, true {
                  %60 = cir.const #true loc(#loc343)
                  cir.yield %60 : !cir.bool loc(#loc343)
                }, false {
                  %60 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc344)
                  %61 = cir.const #cir.int<0> : !s32i loc(#loc345)
                  %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc556)
                  %63 = cir.ternary(%62, true {
                    %64 = cir.const #true loc(#loc343)
                    cir.yield %64 : !cir.bool loc(#loc343)
                  }, false {
                    %64 = cir.const #false loc(#loc343)
                    cir.yield %64 : !cir.bool loc(#loc343)
                  }) : (!cir.bool) -> !cir.bool loc(#loc343)
                  cir.yield %63 : !cir.bool loc(#loc343)
                }) : (!cir.bool) -> !cir.bool loc(#loc343)
                cir.if %59 {
                  cir.break loc(#loc347)
                } loc(#loc557)
              } loc(#loc554)
              %48 = cir.const #cir.int<0> : !s32i loc(#loc348)
              %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc348)
              %50 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc349)
              %51 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc350)
              %52 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc350)
              cir.store %49, %52 : !s8i, !cir.ptr<!s8i> loc(#loc558)
              %53 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc351)
              %54 = cir.call @atoi(%53) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc352)
              cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc559)
              cir.yield loc(#loc290)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc355)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc355)
              cir.condition(%14) loc(#loc355)
            } loc(#loc536)
          } loc(#loc536)
          cir.scope {
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc358)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc359)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc359)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc561)
            cir.if %16 {
              %17 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc361)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc362)
            } loc(#loc562)
          } loc(#loc560)
        } loc(#loc531)
      } loc(#loc498)
    } loc(#loc496)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc564)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc564)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc365)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc365)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc372)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc373)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc567)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc377)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc378)
            %12 = cir.binop(div, %10, %11) : !s32i loc(#loc569)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc379)
          } else {
            %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc380)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc380)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc381)
          } loc(#loc568)
        } loc(#loc566)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc384)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc385)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc571)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc389)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc390)
            %12 = cir.binop(div, %10, %11) : !s32i loc(#loc573)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc391)
          } else {
            %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc392)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc392)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc393)
          } loc(#loc572)
        } loc(#loc570)
      } loc(#loc565)
    } loc(#loc563)
    cir.return loc(#loc182)
  } loc(#loc493)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc575)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc398)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc399)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc576)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc578)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc578)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc403)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc403)
      cir.if %6 {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc408)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc580)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc410)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc581)
      } loc(#loc579)
    } loc(#loc577)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc583)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc583)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc414)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc414)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc419)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc420)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc585)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc421)
      } else {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc422)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc423)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc586)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc424)
      } loc(#loc584)
    } loc(#loc582)
    cir.return loc(#loc395)
  } loc(#loc574)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/sys/socket.h":102:1)
#loc4 = loc("/usr/include/sys/socket.h":102:62)
#loc5 = loc("/usr/include/arpa/inet.h":34:1)
#loc6 = loc("/usr/include/arpa/inet.h":34:47)
#loc7 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":77:53)
#loc8 = loc("/usr/include/netinet/in.h":404:1)
#loc9 = loc("/usr/include/netinet/in.h":405:40)
#loc10 = loc("/usr/include/sys/socket.h":126:1)
#loc11 = loc("/usr/include/sys/socket.h":126:75)
#loc12 = loc("/usr/include/sys/socket.h":145:1)
#loc13 = loc("/usr/include/sys/socket.h":145:68)
#loc14 = loc("/usr/include/stdlib.h":105:1)
#loc15 = loc("/usr/include/stdlib.h":106:33)
#loc16 = loc("/usr/include/unistd.h":358:1)
#loc17 = loc("/usr/include/unistd.h":358:27)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc22 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":127:23)
#loc23 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":44:1)
#loc24 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":130:1)
#loc25 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":46:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":46:9)
#loc27 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":48:13)
#loc28 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":48:12)
#loc29 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":48:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":49:5)
#loc31 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":112:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":49:8)
#loc33 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":49:33)
#loc34 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":50:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":107:5)
#loc36 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":109:5)
#loc37 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":51:9)
#loc38 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":106:9)
#loc39 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":56:13)
#loc40 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":56:17)
#loc41 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":57:13)
#loc42 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":57:32)
#loc43 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":58:13)
#loc44 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":58:36)
#loc45 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":59:13)
#loc46 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":59:45)
#loc47 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":60:13)
#loc48 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":95:21)
#loc49 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":70:40)
#loc50 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":70:49)
#loc51 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":70:62)
#loc52 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":70:33)
#loc53 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":70:17)
#loc54 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":70:73)
#loc55 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":71:17)
#loc56 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":74:17)
#loc57 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":71:21)
#loc58 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":71:38)
#loc59 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":72:17)
#loc60 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":73:21)
#loc61 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":75:24)
#loc62 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":75:25)
#loc63 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":75:34)
#loc64 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":75:37)
#loc65 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":75:51)
#loc66 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":75:17)
#loc67 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":75:52)
#loc68 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":76:38)
#loc69 = loc("/usr/include/netinet/in.h":249:5)
#loc70 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":76:17)
#loc71 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":77:43)
#loc72 = loc("/usr/include/netinet/in.h":251:20)
#loc73 = loc("/usr/include/netinet/in.h":33:15)
#loc74 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":77:17)
#loc75 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":77:63)
#loc76 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":78:42)
#loc77 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":78:36)
#loc78 = loc("/usr/include/netinet/in.h":250:15)
#loc79 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":78:17)
#loc80 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":78:50)
#loc81 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":79:17)
#loc82 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":82:17)
#loc83 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":79:29)
#loc84 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":79:62)
#loc85 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":79:63)
#loc86 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":79:72)
#loc87 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":79:86)
#loc88 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":79:21)
#loc89 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":79:92)
#loc90 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":80:17)
#loc91 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":81:21)
#loc92 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":85:35)
#loc93 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":85:50)
#loc94 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":85:63)
#loc95 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":85:81)
#loc96 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":85:84)
#loc97 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":85:30)
#loc98 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":85:17)
#loc99 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":85:85)
#loc100 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":86:17)
#loc101 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":89:17)
#loc102 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":86:21)
#loc103 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":86:35)
#loc104 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":86:48)
#loc105 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":86:51)
#loc106 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":86:65)
#loc107 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":87:17)
#loc108 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":88:21)
#loc109 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":91:43)
#loc110 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":91:29)
#loc111 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":91:17)
#loc112 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":93:29)
#loc113 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":93:24)
#loc114 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":93:17)
#loc115 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":93:40)
#loc116 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":95:20)
#loc117 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":96:13)
#loc118 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":99:13)
#loc119 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":96:17)
#loc120 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":96:34)
#loc121 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":97:13)
#loc122 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":98:30)
#loc123 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":98:17)
#loc124 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":111:16)
#loc125 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":111:9)
#loc126 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":113:5)
#loc127 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":129:5)
#loc128 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":113:8)
#loc129 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":113:33)
#loc130 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":114:5)
#loc131 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":117:5)
#loc132 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":119:5)
#loc133 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":116:22)
#loc134 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":116:28)
#loc135 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":116:9)
#loc136 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":121:9)
#loc137 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":128:9)
#loc138 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":121:13)
#loc139 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":121:21)
#loc140 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":122:9)
#loc141 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":124:9)
#loc142 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":126:9)
#loc143 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":123:26)
#loc144 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":123:32)
#loc145 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":123:13)
#loc146 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":127:13)
#loc147 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":318:1)
#loc148 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":322:1)
#loc149 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":320:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":320:13)
#loc151 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":321:5)
#loc152 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":321:13)
#loc153 = loc("/usr/include/stdlib.h":575:1)
#loc154 = loc("/usr/include/stdlib.h":575:41)
#loc155 = loc("/usr/include/time.h":76:1)
#loc156 = loc("/usr/include/time.h":76:38)
#loc157 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":338:15)
#loc158 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":340:15)
#loc159 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":343:15)
#loc160 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":345:15)
#loc161 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":333:1)
#loc162 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":348:1)
#loc167 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":334:1)
#loc168 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":336:27)
#loc169 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":336:22)
#loc170 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":336:5)
#loc171 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":338:5)
#loc172 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":339:5)
#loc173 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":339:62)
#loc174 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":340:5)
#loc175 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":343:5)
#loc176 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":344:5)
#loc177 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":344:61)
#loc178 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":345:5)
#loc179 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":347:12)
#loc180 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":347:5)
#loc181 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":139:1)
#loc182 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":286:1)
#loc183 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":141:5)
#loc184 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":141:9)
#loc185 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":143:13)
#loc186 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":143:12)
#loc187 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":143:5)
#loc188 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":144:5)
#loc189 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":261:5)
#loc190 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":144:8)
#loc191 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":144:33)
#loc192 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":145:5)
#loc193 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":202:5)
#loc194 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":204:5)
#loc195 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":146:9)
#loc196 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":201:9)
#loc197 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":151:13)
#loc198 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":151:17)
#loc199 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":152:13)
#loc200 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":152:32)
#loc201 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":153:13)
#loc202 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":153:36)
#loc203 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":154:13)
#loc204 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":154:45)
#loc205 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":155:13)
#loc206 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":190:21)
#loc207 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":165:40)
#loc208 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":165:49)
#loc209 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":165:62)
#loc210 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":165:33)
#loc211 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":165:17)
#loc212 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":165:73)
#loc213 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":166:17)
#loc214 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":169:17)
#loc215 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":166:21)
#loc216 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":166:38)
#loc217 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":167:17)
#loc218 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":168:21)
#loc219 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":170:24)
#loc220 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":170:25)
#loc221 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":170:34)
#loc222 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":170:37)
#loc223 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":170:51)
#loc224 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":170:17)
#loc225 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":170:52)
#loc226 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":171:38)
#loc227 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":171:17)
#loc228 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":172:53)
#loc229 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":172:43)
#loc230 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":172:17)
#loc231 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":172:63)
#loc232 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":173:42)
#loc233 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":173:36)
#loc234 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":173:17)
#loc235 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":173:50)
#loc236 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":174:17)
#loc237 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":177:17)
#loc238 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":174:29)
#loc239 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":174:62)
#loc240 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":174:63)
#loc241 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":174:72)
#loc242 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":174:86)
#loc243 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":174:21)
#loc244 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":174:92)
#loc245 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":175:17)
#loc246 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":176:21)
#loc247 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":180:35)
#loc248 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":180:50)
#loc249 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":180:63)
#loc250 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":180:81)
#loc251 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":180:84)
#loc252 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":180:30)
#loc253 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":180:17)
#loc254 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":180:85)
#loc255 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":181:17)
#loc256 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":184:17)
#loc257 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":181:21)
#loc258 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":181:35)
#loc259 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":181:48)
#loc260 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":181:51)
#loc261 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":181:65)
#loc262 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":182:17)
#loc263 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":183:21)
#loc264 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":186:43)
#loc265 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":186:29)
#loc266 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":186:17)
#loc267 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":188:29)
#loc268 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":188:24)
#loc269 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":188:17)
#loc270 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":188:40)
#loc271 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":190:20)
#loc272 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":191:13)
#loc273 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":194:13)
#loc274 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":191:17)
#loc275 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":191:34)
#loc276 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":192:13)
#loc277 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":193:30)
#loc278 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":193:17)
#loc279 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":205:9)
#loc280 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":260:9)
#loc281 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":210:13)
#loc282 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":210:17)
#loc283 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":211:13)
#loc284 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":211:32)
#loc285 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":212:13)
#loc286 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":212:36)
#loc287 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":213:13)
#loc288 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":213:45)
#loc289 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":214:13)
#loc290 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":249:21)
#loc291 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":224:40)
#loc292 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":224:49)
#loc293 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":224:62)
#loc294 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":224:33)
#loc295 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":224:17)
#loc296 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":224:73)
#loc297 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":225:17)
#loc298 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":228:17)
#loc299 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":225:21)
#loc300 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":225:38)
#loc301 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":226:17)
#loc302 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":227:21)
#loc303 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":229:24)
#loc304 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":229:25)
#loc305 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":229:34)
#loc306 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":229:37)
#loc307 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":229:51)
#loc308 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":229:17)
#loc309 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":229:52)
#loc310 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":230:38)
#loc311 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":230:17)
#loc312 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":231:53)
#loc313 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":231:43)
#loc314 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":231:17)
#loc315 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":231:63)
#loc316 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":232:42)
#loc317 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":232:36)
#loc318 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":232:17)
#loc319 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":232:50)
#loc320 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":233:17)
#loc321 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":236:17)
#loc322 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":233:29)
#loc323 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":233:62)
#loc324 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":233:63)
#loc325 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":233:72)
#loc326 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":233:86)
#loc327 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":233:21)
#loc328 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":233:92)
#loc329 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":234:17)
#loc330 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":235:21)
#loc331 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":239:35)
#loc332 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":239:50)
#loc333 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":239:63)
#loc334 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":239:81)
#loc335 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":239:84)
#loc336 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":239:30)
#loc337 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":239:17)
#loc338 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":239:85)
#loc339 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":240:17)
#loc340 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":243:17)
#loc341 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":240:21)
#loc342 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":240:35)
#loc343 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":240:48)
#loc344 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":240:51)
#loc345 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":240:65)
#loc346 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":241:17)
#loc347 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":242:21)
#loc348 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":245:43)
#loc349 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":245:29)
#loc350 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":245:17)
#loc351 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":247:29)
#loc352 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":247:24)
#loc353 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":247:17)
#loc354 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":247:40)
#loc355 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":249:20)
#loc356 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":250:13)
#loc357 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":253:13)
#loc358 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":250:17)
#loc359 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":250:34)
#loc360 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":251:13)
#loc361 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":252:30)
#loc362 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":252:17)
#loc363 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":262:5)
#loc364 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":285:5)
#loc365 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":262:8)
#loc366 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":262:33)
#loc367 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":263:5)
#loc368 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":273:5)
#loc369 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":275:5)
#loc370 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":265:9)
#loc371 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":272:9)
#loc372 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":265:13)
#loc373 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":265:21)
#loc374 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":266:9)
#loc375 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":268:9)
#loc376 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":270:9)
#loc377 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":267:26)
#loc378 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":267:32)
#loc379 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":267:13)
#loc380 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":271:23)
#loc381 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":271:13)
#loc382 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":277:9)
#loc383 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":284:9)
#loc384 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":277:13)
#loc385 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":277:21)
#loc386 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":278:9)
#loc387 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":280:9)
#loc388 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":282:9)
#loc389 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":279:26)
#loc390 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":279:32)
#loc391 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":279:13)
#loc392 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":283:23)
#loc393 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":283:13)
#loc394 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":291:1)
#loc395 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":316:1)
#loc396 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":293:5)
#loc397 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":293:9)
#loc398 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":295:13)
#loc399 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":295:12)
#loc400 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":295:5)
#loc401 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":296:5)
#loc402 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":305:5)
#loc403 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":296:8)
#loc404 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":296:33)
#loc405 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":297:5)
#loc406 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":300:5)
#loc407 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":302:5)
#loc408 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":299:16)
#loc409 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":299:9)
#loc410 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":304:16)
#loc411 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":304:9)
#loc412 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":306:5)
#loc413 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":315:5)
#loc414 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":306:8)
#loc415 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":306:33)
#loc416 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":307:5)
#loc417 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":310:5)
#loc418 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":312:5)
#loc419 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":309:22)
#loc420 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":309:28)
#loc421 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":309:9)
#loc422 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":314:22)
#loc423 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":314:28)
#loc424 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_12.c":314:9)
#loc425 = loc(fused[#loc1, #loc2])
#loc426 = loc(fused[#loc3, #loc4])
#loc427 = loc(fused[#loc5, #loc6])
#loc428 = loc(fused[#loc8, #loc9])
#loc429 = loc(fused[#loc10, #loc11])
#loc430 = loc(fused[#loc12, #loc13])
#loc431 = loc(fused[#loc14, #loc15])
#loc432 = loc(fused[#loc16, #loc17])
#loc433 = loc(fused[#loc18, #loc19])
#loc434 = loc(fused[#loc20, #loc21])
#loc435 = loc(fused[#loc23, #loc24])
#loc436 = loc(fused[#loc25, #loc26])
#loc437 = loc(fused[#loc29, #loc27])
#loc438 = loc(fused[#loc30, #loc31])
#loc439 = loc(fused[#loc32, #loc33])
#loc440 = loc(fused[#loc34, #loc35, #loc36, #loc31])
#loc441 = loc(fused[#loc37, #loc38])
#loc442 = loc(fused[#loc39, #loc40])
#loc443 = loc(fused[#loc41, #loc42])
#loc444 = loc(fused[#loc43, #loc44])
#loc445 = loc(fused[#loc45, #loc46])
#loc446 = loc(fused[#loc47, #loc48])
#loc447 = loc(fused[#loc53, #loc54])
#loc448 = loc(fused[#loc55, #loc56])
#loc449 = loc(fused[#loc57, #loc58])
#loc450 = loc(fused[#loc59, #loc56])
#loc451 = loc(fused[#loc61, #loc62])
#loc452 = loc(fused[#loc64, #loc65])
#loc453 = loc(fused[#loc66, #loc67])
#loc454 = loc(fused[#loc70, #loc68])
#loc455 = loc(fused[#loc74, #loc75])
#loc456 = loc(fused[#loc79, #loc80])
#loc457 = loc(fused[#loc81, #loc82])
#loc458 = loc(fused[#loc84, #loc85])
#loc459 = loc(fused[#loc86, #loc87])
#loc460 = loc(fused[#loc88, #loc89])
#loc461 = loc(fused[#loc90, #loc82])
#loc462 = loc(fused[#loc94, #loc95])
#loc463 = loc(fused[#loc98, #loc99])
#loc464 = loc(fused[#loc100, #loc101])
#loc465 = loc(fused[#loc102, #loc103])
#loc466 = loc(fused[#loc105, #loc106])
#loc467 = loc(fused[#loc107, #loc101])
#loc468 = loc(fused[#loc111, #loc109])
#loc469 = loc(fused[#loc114, #loc115])
#loc470 = loc(fused[#loc117, #loc118])
#loc471 = loc(fused[#loc119, #loc120])
#loc472 = loc(fused[#loc121, #loc118])
#loc473 = loc(fused[#loc125, #loc124])
#loc474 = loc(fused[#loc126, #loc127])
#loc475 = loc(fused[#loc128, #loc129])
#loc476 = loc(fused[#loc130, #loc131, #loc132, #loc127])
#loc477 = loc(fused[#loc133, #loc134])
#loc478 = loc(fused[#loc136, #loc137])
#loc479 = loc(fused[#loc138, #loc139])
#loc480 = loc(fused[#loc140, #loc141, #loc142, #loc137])
#loc481 = loc(fused[#loc143, #loc144])
#loc482 = loc(fused[#loc147, #loc148])
#loc483 = loc(fused[#loc149, #loc150])
#loc484 = loc(fused[#loc151, #loc152])
#loc485 = loc(fused[#loc153, #loc154])
#loc486 = loc(fused[#loc155, #loc156])
#loc487 = loc(fused[#loc161, #loc162])
#loc490 = loc(fused[#loc172, #loc173])
#loc491 = loc(fused[#loc176, #loc177])
#loc492 = loc(fused[#loc180, #loc179])
#loc493 = loc(fused[#loc181, #loc182])
#loc494 = loc(fused[#loc183, #loc184])
#loc495 = loc(fused[#loc187, #loc185])
#loc496 = loc(fused[#loc188, #loc189])
#loc497 = loc(fused[#loc190, #loc191])
#loc498 = loc(fused[#loc192, #loc193, #loc194, #loc189])
#loc499 = loc(fused[#loc195, #loc196])
#loc500 = loc(fused[#loc197, #loc198])
#loc501 = loc(fused[#loc199, #loc200])
#loc502 = loc(fused[#loc201, #loc202])
#loc503 = loc(fused[#loc203, #loc204])
#loc504 = loc(fused[#loc205, #loc206])
#loc505 = loc(fused[#loc211, #loc212])
#loc506 = loc(fused[#loc213, #loc214])
#loc507 = loc(fused[#loc215, #loc216])
#loc508 = loc(fused[#loc217, #loc214])
#loc509 = loc(fused[#loc219, #loc220])
#loc510 = loc(fused[#loc222, #loc223])
#loc511 = loc(fused[#loc224, #loc225])
#loc512 = loc(fused[#loc227, #loc226])
#loc513 = loc(fused[#loc230, #loc231])
#loc514 = loc(fused[#loc234, #loc235])
#loc515 = loc(fused[#loc236, #loc237])
#loc516 = loc(fused[#loc239, #loc240])
#loc517 = loc(fused[#loc241, #loc242])
#loc518 = loc(fused[#loc243, #loc244])
#loc519 = loc(fused[#loc245, #loc237])
#loc520 = loc(fused[#loc249, #loc250])
#loc521 = loc(fused[#loc253, #loc254])
#loc522 = loc(fused[#loc255, #loc256])
#loc523 = loc(fused[#loc257, #loc258])
#loc524 = loc(fused[#loc260, #loc261])
#loc525 = loc(fused[#loc262, #loc256])
#loc526 = loc(fused[#loc266, #loc264])
#loc527 = loc(fused[#loc269, #loc270])
#loc528 = loc(fused[#loc272, #loc273])
#loc529 = loc(fused[#loc274, #loc275])
#loc530 = loc(fused[#loc276, #loc273])
#loc531 = loc(fused[#loc279, #loc280])
#loc532 = loc(fused[#loc281, #loc282])
#loc533 = loc(fused[#loc283, #loc284])
#loc534 = loc(fused[#loc285, #loc286])
#loc535 = loc(fused[#loc287, #loc288])
#loc536 = loc(fused[#loc289, #loc290])
#loc537 = loc(fused[#loc295, #loc296])
#loc538 = loc(fused[#loc297, #loc298])
#loc539 = loc(fused[#loc299, #loc300])
#loc540 = loc(fused[#loc301, #loc298])
#loc541 = loc(fused[#loc303, #loc304])
#loc542 = loc(fused[#loc306, #loc307])
#loc543 = loc(fused[#loc308, #loc309])
#loc544 = loc(fused[#loc311, #loc310])
#loc545 = loc(fused[#loc314, #loc315])
#loc546 = loc(fused[#loc318, #loc319])
#loc547 = loc(fused[#loc320, #loc321])
#loc548 = loc(fused[#loc323, #loc324])
#loc549 = loc(fused[#loc325, #loc326])
#loc550 = loc(fused[#loc327, #loc328])
#loc551 = loc(fused[#loc329, #loc321])
#loc552 = loc(fused[#loc333, #loc334])
#loc553 = loc(fused[#loc337, #loc338])
#loc554 = loc(fused[#loc339, #loc340])
#loc555 = loc(fused[#loc341, #loc342])
#loc556 = loc(fused[#loc344, #loc345])
#loc557 = loc(fused[#loc346, #loc340])
#loc558 = loc(fused[#loc350, #loc348])
#loc559 = loc(fused[#loc353, #loc354])
#loc560 = loc(fused[#loc356, #loc357])
#loc561 = loc(fused[#loc358, #loc359])
#loc562 = loc(fused[#loc360, #loc357])
#loc563 = loc(fused[#loc363, #loc364])
#loc564 = loc(fused[#loc365, #loc366])
#loc565 = loc(fused[#loc367, #loc368, #loc369, #loc364])
#loc566 = loc(fused[#loc370, #loc371])
#loc567 = loc(fused[#loc372, #loc373])
#loc568 = loc(fused[#loc374, #loc375, #loc376, #loc371])
#loc569 = loc(fused[#loc377, #loc378])
#loc570 = loc(fused[#loc382, #loc383])
#loc571 = loc(fused[#loc384, #loc385])
#loc572 = loc(fused[#loc386, #loc387, #loc388, #loc383])
#loc573 = loc(fused[#loc389, #loc390])
#loc574 = loc(fused[#loc394, #loc395])
#loc575 = loc(fused[#loc396, #loc397])
#loc576 = loc(fused[#loc400, #loc398])
#loc577 = loc(fused[#loc401, #loc402])
#loc578 = loc(fused[#loc403, #loc404])
#loc579 = loc(fused[#loc405, #loc406, #loc407, #loc402])
#loc580 = loc(fused[#loc409, #loc408])
#loc581 = loc(fused[#loc411, #loc410])
#loc582 = loc(fused[#loc412, #loc413])
#loc583 = loc(fused[#loc414, #loc415])
#loc584 = loc(fused[#loc416, #loc417, #loc418, #loc413])
#loc585 = loc(fused[#loc419, #loc420])
#loc586 = loc(fused[#loc422, #loc423])
