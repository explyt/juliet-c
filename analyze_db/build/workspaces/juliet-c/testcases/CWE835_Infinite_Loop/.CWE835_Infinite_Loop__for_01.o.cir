!s32i = !cir.int<s, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE835_Infinite_Loop/CWE835_Infinite_Loop__for_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc72)
  cir.func no_proto @CWE835_Infinite_Loop__for_01_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc74)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc6)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc74)
    cir.br ^bb1 loc(#loc75)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc76)
    cir.br ^bb2 loc(#loc75)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc11)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc12)
    %5 = cir.cmp(ge, %3, %4) : !s32i, !cir.bool loc(#loc77)
    cir.brcond %5 ^bb3, ^bb7 loc(#loc13)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc78)
  ^bb4:  // pred: ^bb3
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc15)
    cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc16)
    cir.br ^bb5 loc(#loc8)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc8)
  ^bb6:  // pred: ^bb5
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc17)
    %10 = cir.const #cir.int<256> : !s32i loc(#loc19)
    %11 = cir.binop(rem, %9, %10) : !s32i loc(#loc79)
    cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc80)
    cir.br ^bb2 loc(#loc75)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc8)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc4)
  } loc(#loc73)
  cir.func no_proto @CWE835_Infinite_Loop__for_01_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc82)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc24)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc83)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    cir.return loc(#loc23)
  } loc(#loc81)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc85)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc31)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    cir.br ^bb1 loc(#loc86)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<0> : !s32i loc(#loc34)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    cir.br ^bb2 loc(#loc86)
  ^bb2:  // 2 preds: ^bb1, ^bb10
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc36)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc37)
    %5 = cir.cmp(ge, %3, %4) : !s32i, !cir.bool loc(#loc88)
    cir.brcond %5 ^bb3, ^bb11 loc(#loc38)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc89)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc90)
  ^bb5:  // pred: ^bb4
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc43)
    %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc91)
    cir.brcond %8 ^bb6, ^bb7 loc(#loc92)
  ^bb6:  // pred: ^bb5
    cir.br ^bb11 loc(#loc45)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc41)
  ^bb8:  // pred: ^bb7
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc47)
    cir.br ^bb9 loc(#loc33)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc33)
  ^bb10:  // pred: ^bb9
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc48)
    %13 = cir.const #cir.int<256> : !s32i loc(#loc50)
    %14 = cir.binop(rem, %12, %13) : !s32i loc(#loc93)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    cir.br ^bb2 loc(#loc86)
  ^bb11:  // 2 preds: ^bb2, ^bb6
    cir.br ^bb12 loc(#loc33)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc29)
  } loc(#loc84)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc96)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc56)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    cir.br ^bb1 loc(#loc97)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<0> : !s32i loc(#loc59)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    cir.br ^bb2 loc(#loc97)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    %4 = cir.const #cir.int<11> : !s32i loc(#loc62)
    %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc99)
    cir.brcond %5 ^bb3, ^bb7 loc(#loc63)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc100)
  ^bb4:  // pred: ^bb3
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
    cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc66)
    cir.br ^bb5 loc(#loc58)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc58)
  ^bb6:  // pred: ^bb5
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc68)
    %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc67)
    %10 = cir.const #cir.int<256> : !s32i loc(#loc69)
    %11 = cir.binop(rem, %9, %10) : !s32i loc(#loc101)
    cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc102)
    cir.br ^bb2 loc(#loc97)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc58)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc54)
  } loc(#loc95)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE835_Infinite_Loop/CWE835_Infinite_Loop__for_01.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE835_Infinite_Loop__for_01.c":10:1)
#loc4 = loc("CWE835_Infinite_Loop__for_01.c":19:1)
#loc5 = loc("CWE835_Infinite_Loop__for_01.c":12:5)
#loc6 = loc("CWE835_Infinite_Loop__for_01.c":12:13)
#loc7 = loc("CWE835_Infinite_Loop__for_01.c":15:5)
#loc8 = loc("CWE835_Infinite_Loop__for_01.c":18:5)
#loc9 = loc("CWE835_Infinite_Loop__for_01.c":15:14)
#loc10 = loc("CWE835_Infinite_Loop__for_01.c":15:10)
#loc11 = loc("CWE835_Infinite_Loop__for_01.c":15:17)
#loc12 = loc("CWE835_Infinite_Loop__for_01.c":15:22)
#loc13 = loc("CWE835_Infinite_Loop__for_01.c":15:19)
#loc14 = loc("CWE835_Infinite_Loop__for_01.c":16:5)
#loc15 = loc("CWE835_Infinite_Loop__for_01.c":17:22)
#loc16 = loc("CWE835_Infinite_Loop__for_01.c":17:9)
#loc17 = loc("CWE835_Infinite_Loop__for_01.c":15:30)
#loc18 = loc("CWE835_Infinite_Loop__for_01.c":15:34)
#loc19 = loc("CWE835_Infinite_Loop__for_01.c":15:39)
#loc20 = loc("CWE835_Infinite_Loop__for_01.c":15:29)
#loc21 = loc("CWE835_Infinite_Loop__for_01.c":15:25)
#loc22 = loc("CWE835_Infinite_Loop__for_01.c":52:1)
#loc23 = loc("CWE835_Infinite_Loop__for_01.c":56:1)
#loc24 = loc("CWE835_Infinite_Loop__for_01.c":54:5)
#loc25 = loc("CWE835_Infinite_Loop__for_01.c":54:11)
#loc26 = loc("CWE835_Infinite_Loop__for_01.c":55:5)
#loc27 = loc("CWE835_Infinite_Loop__for_01.c":55:11)
#loc28 = loc("CWE835_Infinite_Loop__for_01.c":26:1)
#loc29 = loc("CWE835_Infinite_Loop__for_01.c":39:1)
#loc30 = loc("CWE835_Infinite_Loop__for_01.c":28:5)
#loc31 = loc("CWE835_Infinite_Loop__for_01.c":28:13)
#loc32 = loc("CWE835_Infinite_Loop__for_01.c":30:5)
#loc33 = loc("CWE835_Infinite_Loop__for_01.c":38:5)
#loc34 = loc("CWE835_Infinite_Loop__for_01.c":30:14)
#loc35 = loc("CWE835_Infinite_Loop__for_01.c":30:10)
#loc36 = loc("CWE835_Infinite_Loop__for_01.c":30:17)
#loc37 = loc("CWE835_Infinite_Loop__for_01.c":30:22)
#loc38 = loc("CWE835_Infinite_Loop__for_01.c":30:19)
#loc39 = loc("CWE835_Infinite_Loop__for_01.c":31:5)
#loc40 = loc("CWE835_Infinite_Loop__for_01.c":33:9)
#loc41 = loc("CWE835_Infinite_Loop__for_01.c":36:9)
#loc42 = loc("CWE835_Infinite_Loop__for_01.c":33:13)
#loc43 = loc("CWE835_Infinite_Loop__for_01.c":33:18)
#loc44 = loc("CWE835_Infinite_Loop__for_01.c":34:9)
#loc45 = loc("CWE835_Infinite_Loop__for_01.c":35:13)
#loc46 = loc("CWE835_Infinite_Loop__for_01.c":37:22)
#loc47 = loc("CWE835_Infinite_Loop__for_01.c":37:9)
#loc48 = loc("CWE835_Infinite_Loop__for_01.c":30:30)
#loc49 = loc("CWE835_Infinite_Loop__for_01.c":30:34)
#loc50 = loc("CWE835_Infinite_Loop__for_01.c":30:39)
#loc51 = loc("CWE835_Infinite_Loop__for_01.c":30:29)
#loc52 = loc("CWE835_Infinite_Loop__for_01.c":30:25)
#loc53 = loc("CWE835_Infinite_Loop__for_01.c":41:1)
#loc54 = loc("CWE835_Infinite_Loop__for_01.c":50:1)
#loc55 = loc("CWE835_Infinite_Loop__for_01.c":43:5)
#loc56 = loc("CWE835_Infinite_Loop__for_01.c":43:13)
#loc57 = loc("CWE835_Infinite_Loop__for_01.c":46:5)
#loc58 = loc("CWE835_Infinite_Loop__for_01.c":49:5)
#loc59 = loc("CWE835_Infinite_Loop__for_01.c":46:13)
#loc60 = loc("CWE835_Infinite_Loop__for_01.c":46:9)
#loc61 = loc("CWE835_Infinite_Loop__for_01.c":46:16)
#loc62 = loc("CWE835_Infinite_Loop__for_01.c":46:20)
#loc63 = loc("CWE835_Infinite_Loop__for_01.c":46:18)
#loc64 = loc("CWE835_Infinite_Loop__for_01.c":47:5)
#loc65 = loc("CWE835_Infinite_Loop__for_01.c":48:22)
#loc66 = loc("CWE835_Infinite_Loop__for_01.c":48:9)
#loc67 = loc("CWE835_Infinite_Loop__for_01.c":46:29)
#loc68 = loc("CWE835_Infinite_Loop__for_01.c":46:33)
#loc69 = loc("CWE835_Infinite_Loop__for_01.c":46:38)
#loc70 = loc("CWE835_Infinite_Loop__for_01.c":46:28)
#loc71 = loc("CWE835_Infinite_Loop__for_01.c":46:24)
#loc72 = loc(fused[#loc1, #loc2])
#loc73 = loc(fused[#loc3, #loc4])
#loc74 = loc(fused[#loc5, #loc6])
#loc75 = loc(fused[#loc7, #loc8])
#loc76 = loc(fused[#loc10, #loc9])
#loc77 = loc(fused[#loc11, #loc12])
#loc78 = loc(fused[#loc14, #loc8])
#loc79 = loc(fused[#loc20, #loc19])
#loc80 = loc(fused[#loc21, #loc19])
#loc81 = loc(fused[#loc22, #loc23])
#loc82 = loc(fused[#loc24, #loc25])
#loc83 = loc(fused[#loc26, #loc27])
#loc84 = loc(fused[#loc28, #loc29])
#loc85 = loc(fused[#loc30, #loc31])
#loc86 = loc(fused[#loc32, #loc33])
#loc87 = loc(fused[#loc35, #loc34])
#loc88 = loc(fused[#loc36, #loc37])
#loc89 = loc(fused[#loc39, #loc33])
#loc90 = loc(fused[#loc40, #loc41])
#loc91 = loc(fused[#loc42, #loc43])
#loc92 = loc(fused[#loc44, #loc41])
#loc93 = loc(fused[#loc51, #loc50])
#loc94 = loc(fused[#loc52, #loc50])
#loc95 = loc(fused[#loc53, #loc54])
#loc96 = loc(fused[#loc55, #loc56])
#loc97 = loc(fused[#loc57, #loc58])
#loc98 = loc(fused[#loc60, #loc59])
#loc99 = loc(fused[#loc61, #loc62])
#loc100 = loc(fused[#loc64, #loc58])
#loc101 = loc(fused[#loc70, #loc69])
#loc102 = loc(fused[#loc71, #loc69])
