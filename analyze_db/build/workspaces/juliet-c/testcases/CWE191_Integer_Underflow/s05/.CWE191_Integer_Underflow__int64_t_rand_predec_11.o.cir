!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__int64_t_rand_predec_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc175)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc176)
  cir.func private @printLongLongLine(!s64i) loc(#loc177)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_predec_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc179)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc11)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc180)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc182)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc182)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc15)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc18)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc18)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc18)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc18)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc18)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc18)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc18)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc18)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc18)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc18)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc18)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc18)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc18)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc18)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc18)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc18)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc18)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc18)
          cir.yield %33 : !u64i loc(#loc18)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc18)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc18)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc18)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc18)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc18)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc18)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc18)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc18)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc18)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc18)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc18)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc18)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc18)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc18)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc18)
          %34 = cir.unary(minus, %33) : !u64i, !u64i loc(#loc18)
          %35 = cir.const #cir.int<1> : !s32i loc(#loc18)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc18)
          %37 = cir.binop(sub, %34, %36) : !u64i loc(#loc18)
          cir.yield %37 : !u64i loc(#loc18)
        }) : (!cir.bool) -> !u64i loc(#loc18)
        %11 = cir.cast(integral, %10 : !u64i), !s64i loc(#loc18)
        cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc184)
      } loc(#loc183)
    } loc(#loc181)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc186)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc186)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc22)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc22)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc189)
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc29)
          %8 = cir.unary(dec, %7) nsw : !s64i, !s64i loc(#loc29)
          cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc190)
          %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc28)
          cir.store %9, %6 : !s64i, !cir.ptr<!s64i> loc(#loc189)
          %10 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc31)
          cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc32)
        } loc(#loc188)
      } loc(#loc187)
    } loc(#loc185)
    cir.return loc(#loc8)
  } loc(#loc178)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_predec_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc192)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc193)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc194)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc195)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    cir.return loc(#loc34)
  } loc(#loc191)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc196)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc197)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc48)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc199)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc53)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc200)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc202)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc202)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc57)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc57)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc60)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc60)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc60)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc60)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc60)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc60)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc60)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc60)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc60)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc60)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc60)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc60)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc60)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc60)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc60)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc60)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc60)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc60)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc60)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc60)
          cir.yield %33 : !u64i loc(#loc60)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc60)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc60)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc60)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc60)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc60)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc60)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc60)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc60)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc60)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc60)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc60)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc60)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc60)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc60)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc60)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc60)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc60)
          %34 = cir.unary(minus, %33) : !u64i, !u64i loc(#loc60)
          %35 = cir.const #cir.int<1> : !s32i loc(#loc60)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc60)
          %37 = cir.binop(sub, %34, %36) : !u64i loc(#loc60)
          cir.yield %37 : !u64i loc(#loc60)
        }) : (!cir.bool) -> !u64i loc(#loc60)
        %11 = cir.cast(integral, %10 : !u64i), !s64i loc(#loc60)
        cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc204)
      } loc(#loc203)
    } loc(#loc201)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc206)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc206)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc64)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc64)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc47)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc47)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc69)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc72)
          %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc73)
          %8 = cir.unary(minus, %7) nsw : !s64i, !s64i loc(#loc73)
          %9 = cir.const #cir.int<1> : !s64i loc(#loc73)
          %10 = cir.binop(sub, %8, %9) nsw : !s64i loc(#loc73)
          %11 = cir.cmp(gt, %6, %10) : !s64i, !cir.bool loc(#loc209)
          cir.if %11 {
            %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc211)
            %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc79)
            %14 = cir.unary(dec, %13) nsw : !s64i, !s64i loc(#loc79)
            cir.store %14, %0 : !s64i, !cir.ptr<!s64i> loc(#loc212)
            %15 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc78)
            cir.store %15, %12 : !s64i, !cir.ptr<!s64i> loc(#loc211)
            %16 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc81)
            cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc82)
          } else {
            %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc48)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc48)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc83)
          } loc(#loc210)
        } loc(#loc208)
      } loc(#loc207)
    } loc(#loc205)
    cir.return loc(#loc50)
  } loc(#loc198)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc214)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc88)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc215)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc217)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc217)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc92)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc92)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc95)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc95)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc95)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc95)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc95)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc95)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc95)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc95)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc95)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc95)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc95)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc95)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc95)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc95)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc95)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc95)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc95)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc95)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc95)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc95)
          cir.yield %33 : !u64i loc(#loc95)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc95)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc95)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc95)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc95)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc95)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc95)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc95)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc95)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc95)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc95)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc95)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc95)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc95)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc95)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc95)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc95)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc95)
          %34 = cir.unary(minus, %33) : !u64i, !u64i loc(#loc95)
          %35 = cir.const #cir.int<1> : !s32i loc(#loc95)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc95)
          %37 = cir.binop(sub, %34, %36) : !u64i loc(#loc95)
          cir.yield %37 : !u64i loc(#loc95)
        }) : (!cir.bool) -> !u64i loc(#loc95)
        %11 = cir.cast(integral, %10 : !u64i), !s64i loc(#loc95)
        cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc219)
      } loc(#loc218)
    } loc(#loc216)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc221)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc221)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc99)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc99)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc104)
          %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc105)
          %8 = cir.unary(minus, %7) nsw : !s64i, !s64i loc(#loc105)
          %9 = cir.const #cir.int<1> : !s64i loc(#loc105)
          %10 = cir.binop(sub, %8, %9) nsw : !s64i loc(#loc105)
          %11 = cir.cmp(gt, %6, %10) : !s64i, !cir.bool loc(#loc224)
          cir.if %11 {
            %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc226)
            %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc111)
            %14 = cir.unary(dec, %13) nsw : !s64i, !s64i loc(#loc111)
            cir.store %14, %0 : !s64i, !cir.ptr<!s64i> loc(#loc227)
            %15 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc110)
            cir.store %15, %12 : !s64i, !cir.ptr<!s64i> loc(#loc226)
            %16 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc113)
            cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc114)
          } else {
            %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc115)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc115)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc116)
          } loc(#loc225)
        } loc(#loc223)
      } loc(#loc222)
    } loc(#loc220)
    cir.return loc(#loc85)
  } loc(#loc213)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc229)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc121)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc230)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc232)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc232)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc125)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc125)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc130)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc130)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc131)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc132)
        %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc133)
        %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc133)
        cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc234)
      } loc(#loc233)
    } loc(#loc231)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc236)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc236)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc137)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc137)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc239)
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc144)
          %8 = cir.unary(dec, %7) nsw : !s64i, !s64i loc(#loc144)
          cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc240)
          %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc143)
          cir.store %9, %6 : !s64i, !cir.ptr<!s64i> loc(#loc239)
          %10 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc146)
          cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc147)
        } loc(#loc238)
      } loc(#loc237)
    } loc(#loc235)
    cir.return loc(#loc118)
  } loc(#loc228)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc242)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc152)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc243)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc245)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc245)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc156)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc156)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc159)
        %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc160)
        %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc160)
        cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc247)
      } loc(#loc246)
    } loc(#loc244)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc249)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc249)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc164)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc164)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc252)
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc171)
          %8 = cir.unary(dec, %7) nsw : !s64i, !s64i loc(#loc171)
          cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc253)
          %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc170)
          cir.store %9, %6 : !s64i, !cir.ptr<!s64i> loc(#loc252)
          %10 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc173)
          cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc174)
        } loc(#loc251)
      } loc(#loc250)
    } loc(#loc248)
    cir.return loc(#loc149)
  } loc(#loc241)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__int64_t_rand_predec_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":22:1)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":40:1)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":24:5)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":24:13)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":25:12)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":25:5)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":26:5)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":30:5)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":26:8)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":26:26)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":27:5)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":29:25)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":29:9)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":31:5)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":39:5)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":31:8)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":31:26)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":32:5)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":33:9)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":38:9)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":36:13)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":36:30)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":35:13)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":35:15)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":37:31)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":37:13)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":150:1)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":156:1)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":152:5)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":152:14)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":153:5)
#loc38 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":153:14)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":154:5)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":154:14)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":155:5)
#loc42 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":155:14)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":59:19)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":72:23)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":47:1)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":75:1)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":49:5)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":49:13)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":50:12)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":50:5)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":51:5)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":55:5)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":51:8)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":51:26)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":52:5)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":54:25)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":54:9)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":56:5)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":74:5)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":56:8)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":56:27)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":57:5)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":60:5)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":62:5)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":59:9)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":64:9)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":73:9)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":64:13)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":64:20)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":65:9)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":69:9)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":71:9)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":67:13)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":67:30)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":66:13)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":66:15)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":68:31)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":68:13)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":72:13)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":78:1)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":101:1)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":80:5)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":80:13)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":81:12)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":81:5)
#loc90 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":82:5)
#loc91 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":86:5)
#loc92 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":82:8)
#loc93 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":82:26)
#loc94 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":83:5)
#loc95 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":85:25)
#loc96 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":85:9)
#loc97 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":87:5)
#loc98 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":100:5)
#loc99 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":87:8)
#loc100 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":87:26)
#loc101 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":88:5)
#loc102 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":90:9)
#loc103 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":99:9)
#loc104 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":90:13)
#loc105 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":90:20)
#loc106 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":91:9)
#loc107 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":95:9)
#loc108 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":97:9)
#loc109 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":93:13)
#loc110 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":93:30)
#loc111 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":92:13)
#loc112 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":92:15)
#loc113 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":94:31)
#loc114 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":94:13)
#loc115 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":98:23)
#loc116 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":98:13)
#loc117 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":104:1)
#loc118 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":127:1)
#loc119 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":106:5)
#loc120 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":106:13)
#loc121 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":107:12)
#loc122 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":107:5)
#loc123 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":108:5)
#loc124 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":117:5)
#loc125 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":108:8)
#loc126 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":108:27)
#loc127 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":109:5)
#loc128 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":112:5)
#loc129 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":114:5)
#loc130 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":111:19)
#loc131 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":111:9)
#loc132 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":116:17)
#loc133 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":116:16)
#loc134 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":116:9)
#loc135 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":118:5)
#loc136 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":126:5)
#loc137 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":118:8)
#loc138 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":118:26)
#loc139 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":119:5)
#loc140 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":120:9)
#loc141 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":125:9)
#loc142 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":123:13)
#loc143 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":123:30)
#loc144 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":122:13)
#loc145 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":122:15)
#loc146 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":124:31)
#loc147 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":124:13)
#loc148 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":130:1)
#loc149 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":148:1)
#loc150 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":132:5)
#loc151 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":132:13)
#loc152 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":133:12)
#loc153 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":133:5)
#loc154 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":134:5)
#loc155 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":138:5)
#loc156 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":134:8)
#loc157 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":134:26)
#loc158 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":135:5)
#loc159 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":137:17)
#loc160 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":137:16)
#loc161 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":137:9)
#loc162 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":139:5)
#loc163 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":147:5)
#loc164 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":139:8)
#loc165 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":139:26)
#loc166 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":140:5)
#loc167 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":141:9)
#loc168 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":146:9)
#loc169 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":144:13)
#loc170 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":144:30)
#loc171 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":143:13)
#loc172 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":143:15)
#loc173 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":145:31)
#loc174 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_11.c":145:13)
#loc175 = loc(fused[#loc1, #loc2])
#loc176 = loc(fused[#loc3, #loc4])
#loc177 = loc(fused[#loc5, #loc6])
#loc178 = loc(fused[#loc7, #loc8])
#loc179 = loc(fused[#loc9, #loc10])
#loc180 = loc(fused[#loc12, #loc11])
#loc181 = loc(fused[#loc13, #loc14])
#loc182 = loc(fused[#loc15, #loc16])
#loc183 = loc(fused[#loc17, #loc14])
#loc184 = loc(fused[#loc19, #loc18])
#loc185 = loc(fused[#loc20, #loc21])
#loc186 = loc(fused[#loc22, #loc23])
#loc187 = loc(fused[#loc24, #loc21])
#loc188 = loc(fused[#loc25, #loc26])
#loc189 = loc(fused[#loc27, #loc28])
#loc190 = loc(fused[#loc29, #loc30])
#loc191 = loc(fused[#loc33, #loc34])
#loc192 = loc(fused[#loc35, #loc36])
#loc193 = loc(fused[#loc37, #loc38])
#loc194 = loc(fused[#loc39, #loc40])
#loc195 = loc(fused[#loc41, #loc42])
#loc196 = loc(fused[#loc43, #loc44])
#loc197 = loc(fused[#loc45, #loc46])
#loc198 = loc(fused[#loc49, #loc50])
#loc199 = loc(fused[#loc51, #loc52])
#loc200 = loc(fused[#loc54, #loc53])
#loc201 = loc(fused[#loc55, #loc56])
#loc202 = loc(fused[#loc57, #loc58])
#loc203 = loc(fused[#loc59, #loc56])
#loc204 = loc(fused[#loc61, #loc60])
#loc205 = loc(fused[#loc62, #loc63])
#loc206 = loc(fused[#loc64, #loc65])
#loc207 = loc(fused[#loc66, #loc67, #loc68, #loc63])
#loc208 = loc(fused[#loc70, #loc71])
#loc209 = loc(fused[#loc72, #loc73])
#loc210 = loc(fused[#loc74, #loc75, #loc76, #loc71])
#loc211 = loc(fused[#loc77, #loc78])
#loc212 = loc(fused[#loc79, #loc80])
#loc213 = loc(fused[#loc84, #loc85])
#loc214 = loc(fused[#loc86, #loc87])
#loc215 = loc(fused[#loc89, #loc88])
#loc216 = loc(fused[#loc90, #loc91])
#loc217 = loc(fused[#loc92, #loc93])
#loc218 = loc(fused[#loc94, #loc91])
#loc219 = loc(fused[#loc96, #loc95])
#loc220 = loc(fused[#loc97, #loc98])
#loc221 = loc(fused[#loc99, #loc100])
#loc222 = loc(fused[#loc101, #loc98])
#loc223 = loc(fused[#loc102, #loc103])
#loc224 = loc(fused[#loc104, #loc105])
#loc225 = loc(fused[#loc106, #loc107, #loc108, #loc103])
#loc226 = loc(fused[#loc109, #loc110])
#loc227 = loc(fused[#loc111, #loc112])
#loc228 = loc(fused[#loc117, #loc118])
#loc229 = loc(fused[#loc119, #loc120])
#loc230 = loc(fused[#loc122, #loc121])
#loc231 = loc(fused[#loc123, #loc124])
#loc232 = loc(fused[#loc125, #loc126])
#loc233 = loc(fused[#loc127, #loc128, #loc129, #loc124])
#loc234 = loc(fused[#loc134, #loc132])
#loc235 = loc(fused[#loc135, #loc136])
#loc236 = loc(fused[#loc137, #loc138])
#loc237 = loc(fused[#loc139, #loc136])
#loc238 = loc(fused[#loc140, #loc141])
#loc239 = loc(fused[#loc142, #loc143])
#loc240 = loc(fused[#loc144, #loc145])
#loc241 = loc(fused[#loc148, #loc149])
#loc242 = loc(fused[#loc150, #loc151])
#loc243 = loc(fused[#loc153, #loc152])
#loc244 = loc(fused[#loc154, #loc155])
#loc245 = loc(fused[#loc156, #loc157])
#loc246 = loc(fused[#loc158, #loc155])
#loc247 = loc(fused[#loc161, #loc159])
#loc248 = loc(fused[#loc162, #loc163])
#loc249 = loc(fused[#loc164, #loc165])
#loc250 = loc(fused[#loc166, #loc163])
#loc251 = loc(fused[#loc167, #loc168])
#loc252 = loc(fused[#loc169, #loc170])
#loc253 = loc(fused[#loc171, #loc172])
