!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @_ZN51CWE190_Integer_Overflow__unsigned_int_fscanf_add_629badSourceERj(!cir.ptr<!u32i>) loc(#loc64)
  cir.func private @printUnsignedLine(!u32i) loc(#loc65)
  cir.func @_ZN51CWE190_Integer_Overflow__unsigned_int_fscanf_add_623badEv() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc67)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc68)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc11)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc69)
    cir.call @_ZN51CWE190_Integer_Overflow__unsigned_int_fscanf_add_629badSourceERj(%1) : (!cir.ptr<!u32i>) -> () loc(#loc13)
    cir.br ^bb1 loc(#loc70)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc16)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc8)
    %7 = cir.binop(add, %4, %6) : !u32i loc(#loc71)
    cir.store %7, %0 : !u32i, !cir.ptr<!u32i> loc(#loc67)
    %8 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc17)
    cir.call @printUnsignedLine(%8) : (!u32i) -> () loc(#loc18)
    cir.br ^bb2 loc(#loc15)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc6)
  } loc(#loc66)
  cir.func private @_ZN51CWE190_Integer_Overflow__unsigned_int_fscanf_add_6213goodG2BSourceERj(!cir.ptr<!u32i>) loc(#loc72)
  cir.func internal private @_ZN51CWE190_Integer_Overflow__unsigned_int_fscanf_add_62L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc74)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc75)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc27)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc27)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc76)
    cir.call @_ZN51CWE190_Integer_Overflow__unsigned_int_fscanf_add_6213goodG2BSourceERj(%1) : (!cir.ptr<!u32i>) -> () loc(#loc29)
    cir.br ^bb1 loc(#loc77)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc32)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc24)
    %7 = cir.binop(add, %4, %6) : !u32i loc(#loc78)
    cir.store %7, %0 : !u32i, !cir.ptr<!u32i> loc(#loc74)
    %8 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc33)
    cir.call @printUnsignedLine(%8) : (!u32i) -> () loc(#loc34)
    cir.br ^bb2 loc(#loc31)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc22)
  } loc(#loc73)
  cir.func private @_ZN51CWE190_Integer_Overflow__unsigned_int_fscanf_add_6213goodB2GSourceERj(!cir.ptr<!u32i>) loc(#loc79)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc39)
  cir.func internal private @_ZN51CWE190_Integer_Overflow__unsigned_int_fscanf_add_62L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc82)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc83)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc46)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc46)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc84)
    cir.call @_ZN51CWE190_Integer_Overflow__unsigned_int_fscanf_add_6213goodB2GSourceERj(%1) : (!cir.ptr<!u32i>) -> () loc(#loc48)
    cir.br ^bb1 loc(#loc85)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc51)
    %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc52)
    %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc52)
    %7 = cir.const #cir.int<2> : !u32i loc(#loc52)
    %8 = cir.binop(mul, %6, %7) : !u32i loc(#loc52)
    %9 = cir.const #cir.int<1> : !u32i loc(#loc52)
    %10 = cir.binop(add, %8, %9) : !u32i loc(#loc52)
    %11 = cir.cmp(lt, %4, %10) : !u32i, !cir.bool loc(#loc86)
    cir.brcond %11 ^bb2, ^bb3 loc(#loc87)
  ^bb2:  // pred: ^bb1
    %12 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc56)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc43)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc43)
    %15 = cir.binop(add, %12, %14) : !u32i loc(#loc88)
    cir.store %15, %0 : !u32i, !cir.ptr<!u32i> loc(#loc82)
    %16 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc57)
    cir.call @printUnsignedLine(%16) : (!u32i) -> () loc(#loc58)
    cir.br ^bb4 loc(#loc54)
  ^bb3:  // pred: ^bb1
    %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc39)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    cir.br ^bb4 loc(#loc50)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc50)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc41)
  } loc(#loc81)
  cir.func @_ZN51CWE190_Integer_Overflow__unsigned_int_fscanf_add_624goodEv() extra(#fn_attr) {
    cir.call @_ZN51CWE190_Integer_Overflow__unsigned_int_fscanf_add_62L7goodG2BEv() : () -> () loc(#loc62)
    cir.call @_ZN51CWE190_Integer_Overflow__unsigned_int_fscanf_add_62L7goodB2GEv() : () -> () loc(#loc63)
    cir.return loc(#loc61)
  } loc(#loc89)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":0:0)
#loc1 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":26:1)
#loc2 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":26:34)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":28:1)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":38:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":35:9)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":35:38)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":30:5)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":30:18)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":31:12)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":31:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":32:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":33:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":37:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":35:31)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":36:27)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":36:9)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":45:1)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":45:38)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":47:1)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":57:1)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":54:9)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":54:38)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":49:5)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":49:18)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":50:12)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":50:5)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":51:5)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":52:5)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":56:5)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":54:31)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":55:27)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":55:9)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":60:1)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":60:38)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":75:19)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":62:1)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":77:1)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":70:9)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":70:38)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":64:5)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":64:18)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":65:12)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":65:5)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":66:5)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":68:5)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":76:5)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":68:9)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":68:16)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":69:5)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":72:5)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":74:5)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":70:31)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":71:27)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":71:9)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":75:9)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":79:1)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":83:1)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":81:5)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_62a.cpp":82:5)
#loc64 = loc(fused[#loc1, #loc2])
#loc65 = loc(fused[#loc3, #loc4])
#loc66 = loc(fused[#loc5, #loc6])
#loc67 = loc(fused[#loc7, #loc8])
#loc68 = loc(fused[#loc9, #loc10])
#loc69 = loc(fused[#loc12, #loc11])
#loc70 = loc(fused[#loc14, #loc15])
#loc71 = loc(fused[#loc16, #loc8])
#loc72 = loc(fused[#loc19, #loc20])
#loc73 = loc(fused[#loc21, #loc22])
#loc74 = loc(fused[#loc23, #loc24])
#loc75 = loc(fused[#loc25, #loc26])
#loc76 = loc(fused[#loc28, #loc27])
#loc77 = loc(fused[#loc30, #loc31])
#loc78 = loc(fused[#loc32, #loc24])
#loc79 = loc(fused[#loc35, #loc36])
#loc80 = loc(fused[#loc37, #loc38])
#loc81 = loc(fused[#loc40, #loc41])
#loc82 = loc(fused[#loc42, #loc43])
#loc83 = loc(fused[#loc44, #loc45])
#loc84 = loc(fused[#loc47, #loc46])
#loc85 = loc(fused[#loc49, #loc50])
#loc86 = loc(fused[#loc51, #loc52])
#loc87 = loc(fused[#loc53, #loc54, #loc55, #loc50])
#loc88 = loc(fused[#loc56, #loc43])
#loc89 = loc(fused[#loc60, #loc61])
