!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":24:21)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":24:34)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":104:10)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":104:14)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":104:20)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":104:32)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":66:25)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":66:38)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":47:25)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":47:38)
#loc118 = loc(fused[#loc5, #loc6])
#loc133 = loc(fused[#loc43, #loc44])
#loc134 = loc(fused[#loc45, #loc46])
#loc139 = loc(fused[#loc65, #loc66])
#loc150 = loc(fused[#loc96, #loc97])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printUnsignedLine(!u32i) loc(#loc116)
  cir.func internal private @badSink(%arg0: !u32i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc118)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc120)
      %2 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc12)
      %3 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc11)
      %4 = cir.binop(mul, %2, %3) : !u32i loc(#loc121)
      cir.store %4, %1 : !u32i, !cir.ptr<!u32i> loc(#loc120)
      %5 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc13)
      cir.call @printUnsignedLine(%5) : (!u32i) -> () loc(#loc14)
    } loc(#loc119)
    cir.return loc(#loc4)
  } loc(#loc117)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_square_41_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc123)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc19)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc19)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc124)
    %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc21)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc21)
    %5 = cir.const #cir.int<2> : !u32i loc(#loc21)
    %6 = cir.binop(mul, %4, %5) : !u32i loc(#loc21)
    %7 = cir.const #cir.int<1> : !u32i loc(#loc21)
    %8 = cir.binop(add, %6, %7) : !u32i loc(#loc21)
    cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc125)
    %9 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc23)
    cir.call @badSink(%9) : (!u32i) -> () loc(#loc24)
    cir.return loc(#loc16)
  } loc(#loc122)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_square_41_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc127)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc128)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    cir.return loc(#loc26)
  } loc(#loc126)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc129)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc130)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc131)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc40)
  cir.func @main(%arg0: !s32i loc(fused[#loc43, #loc44]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc45, #loc46])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc133)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc134)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc42)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc47)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc47)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc48)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc49)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc49)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc50)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc37)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    %8 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_max_square_41_good : !cir.ptr<!cir.func<!void ()>> loc(#loc135)
    cir.call @CWE190_Integer_Overflow__unsigned_int_max_square_41_good() : () -> () loc(#loc52)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc38)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc39)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %13 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_max_square_41_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc136)
    cir.call @CWE190_Integer_Overflow__unsigned_int_max_square_41_bad() : () -> () loc(#loc56)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc40)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc59)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc137)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    cir.return %17 : !s32i loc(#loc137)
  } loc(#loc132)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc62)
  cir.func internal private @goodB2GSink(%arg0: !u32i loc(fused[#loc65, #loc66])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc139)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc67)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc70)
      %2 = cir.cast(integral, %1 : !u32i), !s64i loc(#loc70)
      %3 = cir.cast(integral, %2 : !s64i), !s32i loc(#loc70)
      %4 = cir.abs %3 poison : !s32i loc(#loc71)
      %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc71)
      %6 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc72)
      %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc73)
      %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc73)
      %9 = cir.const #cir.int<2> : !u32i loc(#loc73)
      %10 = cir.binop(mul, %8, %9) : !u32i loc(#loc73)
      %11 = cir.const #cir.int<1> : !u32i loc(#loc73)
      %12 = cir.binop(add, %10, %11) : !u32i loc(#loc73)
      %13 = cir.cast(int_to_float, %12 : !u32i), !cir.double loc(#loc73)
      %14 = cir.call @sqrt(%13) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc72)
      %15 = cir.cast(float_to_int, %14 : !cir.double), !s64i loc(#loc72)
      %16 = cir.cmp(lt, %5, %15) : !s64i, !cir.bool loc(#loc141)
      cir.if %16 {
        %17 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc143)
        %18 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc80)
        %19 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc79)
        %20 = cir.binop(mul, %18, %19) : !u32i loc(#loc144)
        cir.store %20, %17 : !u32i, !cir.ptr<!u32i> loc(#loc143)
        %21 = cir.load %17 : !cir.ptr<!u32i>, !u32i loc(#loc81)
        cir.call @printUnsignedLine(%21) : (!u32i) -> () loc(#loc82)
      } else {
        %17 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc62)
        %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc62)
        cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc83)
      } loc(#loc142)
    } loc(#loc140)
    cir.return loc(#loc64)
  } loc(#loc138)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc146)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc88)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc88)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc147)
    %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc90)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc90)
    %5 = cir.const #cir.int<2> : !u32i loc(#loc90)
    %6 = cir.binop(mul, %4, %5) : !u32i loc(#loc90)
    %7 = cir.const #cir.int<1> : !u32i loc(#loc90)
    %8 = cir.binop(add, %6, %7) : !u32i loc(#loc90)
    cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc148)
    %9 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc92)
    cir.call @goodB2GSink(%9) : (!u32i) -> () loc(#loc93)
    cir.return loc(#loc85)
  } loc(#loc145)
  cir.func internal private @goodG2BSink(%arg0: !u32i loc(fused[#loc96, #loc97])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc150)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc98)
    cir.scope {
      %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc152)
      %2 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc103)
      %3 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc102)
      %4 = cir.binop(mul, %2, %3) : !u32i loc(#loc153)
      cir.store %4, %1 : !u32i, !cir.ptr<!u32i> loc(#loc152)
      %5 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc104)
      cir.call @printUnsignedLine(%5) : (!u32i) -> () loc(#loc105)
    } loc(#loc151)
    cir.return loc(#loc95)
  } loc(#loc149)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc155)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc110)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc110)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc156)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc112)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc112)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc157)
    %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc114)
    cir.call @goodG2BSink(%5) : (!u32i) -> () loc(#loc115)
    cir.return loc(#loc107)
  } loc(#loc154)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_41.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc3 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":31:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":25:1)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":26:5)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":30:5)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":28:9)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":28:38)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":28:31)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":29:27)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":29:9)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":33:1)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":40:1)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":35:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":35:18)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":36:12)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":36:5)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":38:12)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":38:5)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":39:13)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":39:5)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":89:1)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":93:1)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":91:5)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":91:13)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":92:5)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":92:13)
#loc31 = loc("/usr/include/stdlib.h":575:1)
#loc32 = loc("/usr/include/stdlib.h":575:41)
#loc33 = loc("/usr/include/time.h":76:1)
#loc34 = loc("/usr/include/time.h":76:38)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":109:15)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":111:15)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":114:15)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":116:15)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":104:1)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":119:1)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":105:1)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":107:27)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":107:22)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":107:5)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":109:5)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":110:5)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":110:62)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":111:5)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":114:5)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":115:5)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":115:61)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":116:5)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":118:12)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":118:5)
#loc61 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":76:19)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":66:1)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":78:1)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":67:1)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":69:5)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":77:5)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":69:19)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":69:9)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":69:33)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":69:46)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":69:54)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":70:5)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":73:5)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":75:5)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":71:9)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":71:38)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":71:31)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":72:27)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":72:9)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":76:9)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":80:1)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":87:1)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":82:5)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":82:18)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":83:12)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":83:5)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":85:12)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":85:5)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":86:17)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":86:5)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":47:1)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":54:1)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":48:1)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":49:5)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":53:5)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":51:9)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":51:38)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":51:31)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":52:27)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":52:9)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":56:1)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":63:1)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":58:5)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":58:18)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":59:12)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":59:5)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":61:12)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":61:5)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":62:17)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_41.c":62:5)
#loc116 = loc(fused[#loc1, #loc2])
#loc117 = loc(fused[#loc3, #loc4])
#loc119 = loc(fused[#loc8, #loc9])
#loc120 = loc(fused[#loc10, #loc11])
#loc121 = loc(fused[#loc12, #loc11])
#loc122 = loc(fused[#loc15, #loc16])
#loc123 = loc(fused[#loc17, #loc18])
#loc124 = loc(fused[#loc20, #loc19])
#loc125 = loc(fused[#loc22, #loc21])
#loc126 = loc(fused[#loc25, #loc26])
#loc127 = loc(fused[#loc27, #loc28])
#loc128 = loc(fused[#loc29, #loc30])
#loc129 = loc(fused[#loc31, #loc32])
#loc130 = loc(fused[#loc33, #loc34])
#loc131 = loc(fused[#loc35, #loc36])
#loc132 = loc(fused[#loc41, #loc42])
#loc135 = loc(fused[#loc52, #loc53])
#loc136 = loc(fused[#loc56, #loc57])
#loc137 = loc(fused[#loc60, #loc59])
#loc138 = loc(fused[#loc63, #loc64])
#loc140 = loc(fused[#loc68, #loc69])
#loc141 = loc(fused[#loc71, #loc74])
#loc142 = loc(fused[#loc75, #loc76, #loc77, #loc69])
#loc143 = loc(fused[#loc78, #loc79])
#loc144 = loc(fused[#loc80, #loc79])
#loc145 = loc(fused[#loc84, #loc85])
#loc146 = loc(fused[#loc86, #loc87])
#loc147 = loc(fused[#loc89, #loc88])
#loc148 = loc(fused[#loc91, #loc90])
#loc149 = loc(fused[#loc94, #loc95])
#loc151 = loc(fused[#loc99, #loc100])
#loc152 = loc(fused[#loc101, #loc102])
#loc153 = loc(fused[#loc103, #loc102])
#loc154 = loc(fused[#loc106, #loc107])
#loc155 = loc(fused[#loc108, #loc109])
#loc156 = loc(fused[#loc111, #loc110])
#loc157 = loc(fused[#loc113, #loc112])
