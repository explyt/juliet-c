!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @fprintf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc76)
  cir.global "private" external @stdout : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\0A\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc6)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"fprintf failed!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc10)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc15)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.get_global @fprintf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc19)
            %2 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc77)
            %3 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc20)
            %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc5)
            %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc5)
            %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc6)
            %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc6)
            %8 = cir.call @fprintf(%3, %5, %7) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc19)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc21)
            %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc82)
            cir.if %10 {
              %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc23)
            } loc(#loc83)
          } loc(#loc81)
          cir.break loc(#loc24)
        } loc(#loc16)
        cir.case(default, []) {
          %1 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc10)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc10)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc26)
          cir.break loc(#loc27)
        } loc(#loc25)
        cir.yield loc(#loc13)
      } loc(#loc13)
    } loc(#loc80)
    cir.return loc(#loc12)
  } loc(#loc79)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc85)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc86)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc84)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc38)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc40)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc40)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc41)
          cir.break loc(#loc42)
        } loc(#loc39)
        cir.case(default, []) {
          cir.scope {
            %1 = cir.get_global @fprintf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc46)
            %2 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc77)
            %3 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc47)
            %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc48)
            %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc48)
            %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc49)
            %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc49)
            %8 = cir.call @fprintf(%3, %5, %7) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc46)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc50)
            %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc90)
            cir.if %10 {
              %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc52)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc52)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc53)
            } loc(#loc91)
          } loc(#loc89)
          cir.break loc(#loc54)
        } loc(#loc43)
        cir.yield loc(#loc36)
      } loc(#loc36)
    } loc(#loc88)
    cir.return loc(#loc35)
  } loc(#loc87)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc59)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.get_global @fprintf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc63)
            %2 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc77)
            %3 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc64)
            %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc65)
            %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc65)
            %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc66)
            %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc66)
            %8 = cir.call @fprintf(%3, %5, %7) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc63)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc67)
            %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc95)
            cir.if %10 {
              %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc69)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc69)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc70)
            } loc(#loc96)
          } loc(#loc94)
          cir.break loc(#loc71)
        } loc(#loc60)
        cir.case(default, []) {
          %1 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc73)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc73)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc74)
          cir.break loc(#loc75)
        } loc(#loc72)
        cir.yield loc(#loc57)
      } loc(#loc57)
    } loc(#loc93)
    cir.return loc(#loc56)
  } loc(#loc92)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":357:1)
#loc2 = loc("/usr/include/stdio.h":358:45)
#loc3 = loc("/usr/include/stdio.h":150:1)
#loc4 = loc("/usr/include/stdio.h":150:14)
#loc5 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":31:29)
#loc6 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":31:37)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":33:23)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":38:19)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":24:1)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":41:1)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":26:5)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":40:5)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":26:12)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":28:5)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":31:9)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":34:9)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":31:13)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":31:21)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":31:50)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":32:9)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":33:13)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":35:9)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":36:5)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":38:9)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":39:9)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":85:1)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":89:1)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":87:5)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":87:11)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":88:5)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":88:11)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":48:1)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":64:1)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":50:5)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":63:5)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":50:12)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":52:5)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":54:19)
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":54:9)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":55:9)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":56:5)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":58:9)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":61:9)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":58:13)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":58:21)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":58:29)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":58:37)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":58:49)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":59:9)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":60:23)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":60:13)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":62:9)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":67:1)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":83:1)
#loc57 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":69:5)
#loc58 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":82:5)
#loc59 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":69:12)
#loc60 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":71:5)
#loc61 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":73:9)
#loc62 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":76:9)
#loc63 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":73:13)
#loc64 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":73:21)
#loc65 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":73:29)
#loc66 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":73:37)
#loc67 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":73:49)
#loc68 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":74:9)
#loc69 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":75:23)
#loc70 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":75:13)
#loc71 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":77:9)
#loc72 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":78:5)
#loc73 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":80:19)
#loc74 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":80:9)
#loc75 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fprintf_15.c":81:9)
#loc76 = loc(fused[#loc1, #loc2])
#loc77 = loc(fused[#loc3, #loc4])
#loc78 = loc(fused[#loc7, #loc8])
#loc79 = loc(fused[#loc11, #loc12])
#loc80 = loc(fused[#loc13, #loc14])
#loc81 = loc(fused[#loc17, #loc18])
#loc82 = loc(fused[#loc19, #loc21])
#loc83 = loc(fused[#loc22, #loc18])
#loc84 = loc(fused[#loc28, #loc29])
#loc85 = loc(fused[#loc30, #loc31])
#loc86 = loc(fused[#loc32, #loc33])
#loc87 = loc(fused[#loc34, #loc35])
#loc88 = loc(fused[#loc36, #loc37])
#loc89 = loc(fused[#loc44, #loc45])
#loc90 = loc(fused[#loc46, #loc50])
#loc91 = loc(fused[#loc51, #loc45])
#loc92 = loc(fused[#loc55, #loc56])
#loc93 = loc(fused[#loc57, #loc58])
#loc94 = loc(fused[#loc61, #loc62])
#loc95 = loc(fused[#loc63, #loc67])
#loc96 = loc(fused[#loc68, #loc62])
