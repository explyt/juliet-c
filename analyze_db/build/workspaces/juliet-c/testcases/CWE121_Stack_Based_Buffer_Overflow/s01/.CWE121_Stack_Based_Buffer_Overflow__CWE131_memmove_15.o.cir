!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc3)
  cir.func private @printIntLine(!s32i) loc(#loc108)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc110)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc10)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc111)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc14)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.const #cir.int<10> : !s32i loc(#loc16)
          %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc16)
          %5 = cir.alloca !u8i, !cir.ptr<!u8i>, %4 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc16)
          %6 = cir.cast(bitcast, %5 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc16)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc16)
          cir.store %7, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc113)
          cir.break loc(#loc18)
        } loc(#loc15)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc3)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc3)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc20)
          cir.break loc(#loc21)
        } loc(#loc19)
        cir.yield loc(#loc12)
      } loc(#loc12)
    } loc(#loc112)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc115)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc115)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc115)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc26)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc27)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc27)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc28)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc28)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc116)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc117)
      cir.libc.memmove %11 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc118)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc34)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc35)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc33)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc36)
    } loc(#loc114)
    cir.return loc(#loc7)
  } loc(#loc109)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc120)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc121)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    cir.return loc(#loc38)
  } loc(#loc119)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc123)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc47)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc124)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc51)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc53)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc53)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc54)
          cir.break loc(#loc55)
        } loc(#loc52)
        cir.case(default, []) {
          %3 = cir.const #cir.int<10> : !s32i loc(#loc57)
          %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc57)
          %5 = cir.const #cir.int<4> : !u64i loc(#loc57)
          %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc57)
          %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc57)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc57)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc57)
          cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc126)
          cir.break loc(#loc59)
        } loc(#loc56)
        cir.yield loc(#loc49)
      } loc(#loc49)
    } loc(#loc125)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc128)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc128)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc128)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc64)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc64)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc65)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc65)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc66)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc66)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc129)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc130)
      cir.libc.memmove %11 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc131)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc71)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc72)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc73)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc71)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc74)
    } loc(#loc127)
    cir.return loc(#loc44)
  } loc(#loc122)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc133)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc79)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc134)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc83)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.const #cir.int<10> : !s32i loc(#loc85)
          %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc85)
          %5 = cir.const #cir.int<4> : !u64i loc(#loc85)
          %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc85)
          %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc85)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc85)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc85)
          cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc136)
          cir.break loc(#loc87)
        } loc(#loc84)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc89)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc89)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc90)
          cir.break loc(#loc91)
        } loc(#loc88)
        cir.yield loc(#loc81)
      } loc(#loc81)
    } loc(#loc135)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc138)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc138)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc138)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc96)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc96)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc97)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc97)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc98)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc98)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc139)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc140)
      cir.libc.memmove %11 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc141)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc103)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc104)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc105)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc103)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc106)
    } loc(#loc137)
    cir.return loc(#loc76)
  } loc(#loc132)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":33:19)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":21:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":42:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":23:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":23:11)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":24:12)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":24:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":25:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":35:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":25:12)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":27:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":29:23)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":29:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":30:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":31:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":33:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":34:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":36:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":41:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":37:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":37:28)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":39:17)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":39:23)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":39:31)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":39:34)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":39:44)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":39:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":39:45)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":40:22)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":40:27)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":40:28)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":40:9)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":96:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":100:1)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":98:5)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":98:14)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":99:5)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":99:14)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":49:1)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":70:1)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":51:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":51:11)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":52:12)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":52:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":53:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":63:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":53:12)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":55:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":57:19)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":57:9)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":58:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":59:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":61:23)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":61:9)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":62:9)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":64:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":69:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":65:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":65:28)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":67:17)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":67:23)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":67:31)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":67:34)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":67:44)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":67:9)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":67:45)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":68:22)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":68:27)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":68:28)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":68:9)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":73:1)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":94:1)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":75:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":75:11)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":76:12)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":76:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":77:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":87:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":77:12)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":79:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":81:23)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":81:9)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":82:9)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":83:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":85:19)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":85:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":86:9)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":88:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":93:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":89:9)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":89:28)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":91:17)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":91:23)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":91:31)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":91:34)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":91:44)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":91:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":91:45)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":92:22)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":92:27)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":92:28)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c":92:9)
#loc107 = loc(fused[#loc1, #loc2])
#loc108 = loc(fused[#loc4, #loc5])
#loc109 = loc(fused[#loc6, #loc7])
#loc110 = loc(fused[#loc8, #loc9])
#loc111 = loc(fused[#loc11, #loc10])
#loc112 = loc(fused[#loc12, #loc13])
#loc113 = loc(fused[#loc17, #loc16])
#loc114 = loc(fused[#loc22, #loc23])
#loc115 = loc(fused[#loc24, #loc25])
#loc116 = loc(fused[#loc29, #loc30])
#loc117 = loc(fused[#loc28, #loc30])
#loc118 = loc(fused[#loc31, #loc32])
#loc119 = loc(fused[#loc37, #loc38])
#loc120 = loc(fused[#loc39, #loc40])
#loc121 = loc(fused[#loc41, #loc42])
#loc122 = loc(fused[#loc43, #loc44])
#loc123 = loc(fused[#loc45, #loc46])
#loc124 = loc(fused[#loc48, #loc47])
#loc125 = loc(fused[#loc49, #loc50])
#loc126 = loc(fused[#loc58, #loc57])
#loc127 = loc(fused[#loc60, #loc61])
#loc128 = loc(fused[#loc62, #loc63])
#loc129 = loc(fused[#loc67, #loc68])
#loc130 = loc(fused[#loc66, #loc68])
#loc131 = loc(fused[#loc69, #loc70])
#loc132 = loc(fused[#loc75, #loc76])
#loc133 = loc(fused[#loc77, #loc78])
#loc134 = loc(fused[#loc80, #loc79])
#loc135 = loc(fused[#loc81, #loc82])
#loc136 = loc(fused[#loc86, #loc85])
#loc137 = loc(fused[#loc92, #loc93])
#loc138 = loc(fused[#loc94, #loc95])
#loc139 = loc(fused[#loc99, #loc100])
#loc140 = loc(fused[#loc98, #loc100])
#loc141 = loc(fused[#loc101, #loc102])
