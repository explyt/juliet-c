!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc278 = loc("CWE510_Trapdoor__ip_based_logic_12.c":340:10)
#loc279 = loc("CWE510_Trapdoor__ip_based_logic_12.c":340:14)
#loc280 = loc("CWE510_Trapdoor__ip_based_logic_12.c":340:20)
#loc281 = loc("CWE510_Trapdoor__ip_based_logic_12.c":340:32)
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc605 = loc(fused[#loc278, #loc279])
#loc606 = loc(fused[#loc280, #loc281])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc495)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc496)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc497)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc498)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc499)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc500)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc501)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc502)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"192.168.30.123\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc17)
  cir.func private @inet_ntoa(!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc503)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc504)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc22)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc23)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc505)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc26)
  cir.func private @close(!s32i) -> !s32i loc(#loc506)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc508)
    %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc509)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc510)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc511)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc512)
    %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc513)
    %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc514)
    %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc515)
    cir.br ^bb1 loc(#loc516)
  ^bb1:  // pred: ^bb0
    %8 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc517)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc517)
    %10 = cir.call %9() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc48)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc48)
    cir.brcond %11 ^bb2, ^bb51 loc(#loc518)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc519)
  ^bb3:  // pred: ^bb2
    %12 = cir.const #cir.int<16> : !u64i loc(#loc520)
    %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc520)
    cir.store %13, %2 : !s32i, !cir.ptr<!s32i> loc(#loc510)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc37)
    cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc511)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc39)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc39)
    cir.store %17, %4 : !s32i, !cir.ptr<!s32i> loc(#loc512)
    cir.br ^bb4 loc(#loc521)
  ^bb4:  // pred: ^bb3
    cir.br ^bb6 loc(#loc521)
  ^bb5:  // pred: ^bb39
    %18 = cir.const #cir.int<0> : !s32i loc(#loc58)
    %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc58)
    cir.brcond %19 ^bb6, ^bb40 loc(#loc58)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    %20 = cir.const #cir.int<2> : !s32i loc(#loc59)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %22 = cir.const #cir.int<6> : !s32i loc(#loc61)
    %23 = cir.call @socket(%20, %21, %22) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc62)
    cir.store %23, %3 : !s32i, !cir.ptr<!s32i> loc(#loc522)
    cir.br ^bb7 loc(#loc523)
  ^bb7:  // pred: ^bb6
    %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc68)
    %26 = cir.unary(minus, %25) : !s32i, !s32i loc(#loc68)
    %27 = cir.cmp(eq, %24, %26) : !s32i, !cir.bool loc(#loc524)
    cir.brcond %27 ^bb8, ^bb9 loc(#loc525)
  ^bb8:  // pred: ^bb7
    cir.br ^bb40 loc(#loc70)
  ^bb9:  // pred: ^bb7
    cir.br ^bb10 loc(#loc66)
  ^bb10:  // pred: ^bb9
    %28 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc526)
    %29 = cir.const #cir.int<0> : !s32i loc(#loc73)
    %30 = cir.const #cir.int<16> : !u64i loc(#loc527)
    cir.libc.memset %30 bytes from %28 set to %29 : !cir.ptr<!void>, !s32i, !u64i loc(#loc528)
    %31 = cir.const #cir.int<2> : !s32i loc(#loc78)
    %32 = cir.cast(integral, %31 : !s32i), !u16i loc(#loc78)
    %33 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
    cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc529)
    %34 = cir.const #cir.int<0> : !s32i loc(#loc81)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc81)
    %36 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc82)
    %37 = cir.get_member %36[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc83)
    cir.store %35, %37 : !u32i, !cir.ptr<!u32i> loc(#loc530)
    %38 = cir.const #cir.int<20000> : !s32i loc(#loc85)
    %39 = cir.cast(integral, %38 : !s32i), !u16i loc(#loc85)
    %40 = cir.call @htons(%39) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc86)
    %41 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc87)
    cir.store %40, %41 : !u16i, !cir.ptr<!u16i> loc(#loc531)
    cir.br ^bb11 loc(#loc532)
  ^bb11:  // pred: ^bb10
    %42 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    %43 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc533)
    %44 = cir.const #cir.int<16> : !u64i loc(#loc534)
    %45 = cir.cast(integral, %44 : !u64i), !u32i loc(#loc534)
    %46 = cir.call @bind(%42, %43, %45) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc97)
    %47 = cir.const #cir.int<1> : !s32i loc(#loc98)
    %48 = cir.unary(minus, %47) : !s32i, !s32i loc(#loc98)
    %49 = cir.cmp(eq, %46, %48) : !s32i, !cir.bool loc(#loc535)
    cir.brcond %49 ^bb12, ^bb13 loc(#loc536)
  ^bb12:  // pred: ^bb11
    cir.br ^bb40 loc(#loc100)
  ^bb13:  // pred: ^bb11
    cir.br ^bb14 loc(#loc91)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc537)
  ^bb15:  // pred: ^bb14
    %50 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc103)
    %51 = cir.const #cir.int<5> : !s32i loc(#loc104)
    %52 = cir.call @listen(%50, %51) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc105)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc106)
    %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc106)
    %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc538)
    cir.brcond %55 ^bb16, ^bb17 loc(#loc539)
  ^bb16:  // pred: ^bb15
    cir.br ^bb40 loc(#loc108)
  ^bb17:  // pred: ^bb15
    cir.br ^bb18 loc(#loc102)
  ^bb18:  // pred: ^bb17
    %56 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc109)
    %57 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc110)
    %58 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc111)
    %59 = cir.call @accept(%56, %57, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc112)
    cir.store %59, %4 : !s32i, !cir.ptr<!s32i> loc(#loc540)
    cir.br ^bb19 loc(#loc541)
  ^bb19:  // pred: ^bb18
    %60 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    %61 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc118)
    %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc542)
    cir.brcond %63 ^bb20, ^bb21 loc(#loc543)
  ^bb20:  // pred: ^bb19
    cir.br ^bb40 loc(#loc120)
  ^bb21:  // pred: ^bb19
    cir.br ^bb22 loc(#loc116)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc544)
  ^bb23:  // pred: ^bb22
    %64 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc123)
    %65 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc545)
    %66 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc546)
    %67 = cir.call @getsockname(%64, %65, %66) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc128)
    %68 = cir.const #cir.int<1> : !s32i loc(#loc129)
    %69 = cir.unary(minus, %68) : !s32i, !s32i loc(#loc130)
    %70 = cir.cmp(eq, %67, %69) : !s32i, !cir.bool loc(#loc547)
    cir.brcond %70 ^bb24, ^bb25 loc(#loc548)
  ^bb24:  // pred: ^bb23
    cir.br ^bb40 loc(#loc132)
  ^bb25:  // pred: ^bb23
    cir.br ^bb26 loc(#loc122)
  ^bb26:  // pred: ^bb25
    cir.br ^bb27 loc(#loc549)
  ^bb27:  // pred: ^bb26
    %71 = cir.get_global @strcmp : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc135)
    %72 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc17)
    %73 = cir.cast(array_to_ptrdecay, %72 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc17)
    %74 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc82)
    %75 = cir.load %74 : !cir.ptr<!ty_in_addr>, !ty_in_addr loc(#loc136)
    %76 = cir.call @inet_ntoa(%75) : (!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc136)
    %77 = cir.call @strcmp(%73, %76) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc135)
    %78 = cir.const #cir.int<0> : !s32i loc(#loc137)
    %79 = cir.cmp(eq, %77, %78) : !s32i, !cir.bool loc(#loc550)
    cir.brcond %79 ^bb28, ^bb33 loc(#loc551)
  ^bb28:  // pred: ^bb27
    cir.br ^bb29 loc(#loc552)
  ^bb29:  // pred: ^bb28
    %80 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc143)
    %81 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc22)
    %82 = cir.cast(array_to_ptrdecay, %81 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc22)
    %83 = cir.cast(bitcast, %82 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc22)
    %84 = cir.const #cir.int<15> : !u64i loc(#loc553)
    %85 = cir.const #cir.int<0> : !s32i loc(#loc146)
    %86 = cir.call @send(%80, %83, %84, %85) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc147)
    %87 = cir.const #cir.int<1> : !s32i loc(#loc148)
    %88 = cir.unary(minus, %87) : !s32i, !s32i loc(#loc148)
    %89 = cir.cast(integral, %88 : !s32i), !s64i loc(#loc148)
    %90 = cir.cmp(eq, %86, %89) : !s64i, !cir.bool loc(#loc554)
    cir.brcond %90 ^bb30, ^bb31 loc(#loc555)
  ^bb30:  // pred: ^bb29
    cir.br ^bb40 loc(#loc150)
  ^bb31:  // pred: ^bb29
    cir.br ^bb32 loc(#loc142)
  ^bb32:  // pred: ^bb31
    cir.br ^bb38 loc(#loc139)
  ^bb33:  // pred: ^bb27
    cir.br ^bb34 loc(#loc556)
  ^bb34:  // pred: ^bb33
    %91 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc153)
    %92 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc23)
    %93 = cir.cast(array_to_ptrdecay, %92 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc23)
    %94 = cir.cast(bitcast, %93 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc23)
    %95 = cir.const #cir.int<8> : !u64i loc(#loc557)
    %96 = cir.const #cir.int<0> : !s32i loc(#loc156)
    %97 = cir.call @send(%91, %94, %95, %96) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc157)
    %98 = cir.const #cir.int<1> : !s32i loc(#loc158)
    %99 = cir.unary(minus, %98) : !s32i, !s32i loc(#loc158)
    %100 = cir.cast(integral, %99 : !s32i), !s64i loc(#loc158)
    %101 = cir.cmp(eq, %97, %100) : !s64i, !cir.bool loc(#loc558)
    cir.brcond %101 ^bb35, ^bb36 loc(#loc559)
  ^bb35:  // pred: ^bb34
    %102 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc26)
    %103 = cir.cast(array_to_ptrdecay, %102 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc26)
    cir.call @printLine(%103) : (!cir.ptr<!s8i>) -> () loc(#loc160)
    cir.br ^bb36 loc(#loc152)
  ^bb36:  // 2 preds: ^bb34, ^bb35
    cir.br ^bb37 loc(#loc152)
  ^bb37:  // pred: ^bb36
    cir.br ^bb38 loc(#loc134)
  ^bb38:  // 2 preds: ^bb32, ^bb37
    cir.br ^bb39 loc(#loc134)
  ^bb39:  // pred: ^bb38
    cir.br ^bb5 loc(#loc57)
  ^bb40:  // 7 preds: ^bb5, ^bb8, ^bb12, ^bb16, ^bb20, ^bb24, ^bb30
    cir.br ^bb41 loc(#loc57)
  ^bb41:  // pred: ^bb40
    cir.br ^bb42 loc(#loc560)
  ^bb42:  // pred: ^bb41
    %104 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc163)
    %105 = cir.const #cir.int<1> : !s32i loc(#loc164)
    %106 = cir.unary(minus, %105) : !s32i, !s32i loc(#loc164)
    %107 = cir.cmp(ne, %104, %106) : !s32i, !cir.bool loc(#loc561)
    cir.brcond %107 ^bb43, ^bb44 loc(#loc562)
  ^bb43:  // pred: ^bb42
    %108 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc166)
    %109 = cir.call @close(%108) : (!s32i) -> !s32i loc(#loc167)
    cir.br ^bb44 loc(#loc162)
  ^bb44:  // 2 preds: ^bb42, ^bb43
    cir.br ^bb45 loc(#loc162)
  ^bb45:  // pred: ^bb44
    cir.br ^bb46 loc(#loc563)
  ^bb46:  // pred: ^bb45
    %110 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc170)
    %111 = cir.const #cir.int<1> : !s32i loc(#loc171)
    %112 = cir.unary(minus, %111) : !s32i, !s32i loc(#loc171)
    %113 = cir.cmp(ne, %110, %112) : !s32i, !cir.bool loc(#loc564)
    cir.brcond %113 ^bb47, ^bb48 loc(#loc565)
  ^bb47:  // pred: ^bb46
    %114 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc173)
    %115 = cir.call @close(%114) : (!s32i) -> !s32i loc(#loc174)
    cir.br ^bb48 loc(#loc169)
  ^bb48:  // 2 preds: ^bb46, ^bb47
    cir.br ^bb49 loc(#loc169)
  ^bb49:  // pred: ^bb48
    cir.br ^bb50 loc(#loc54)
  ^bb50:  // pred: ^bb49
    cir.br ^bb87 loc(#loc51)
  ^bb51:  // pred: ^bb1
    cir.br ^bb52 loc(#loc566)
  ^bb52:  // pred: ^bb51
    %116 = cir.const #cir.int<1> : !s32i loc(#loc43)
    %117 = cir.unary(minus, %116) : !s32i, !s32i loc(#loc43)
    cir.store %117, %6 : !s32i, !cir.ptr<!s32i> loc(#loc514)
    %118 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %119 = cir.unary(minus, %118) : !s32i, !s32i loc(#loc45)
    cir.store %119, %7 : !s32i, !cir.ptr<!s32i> loc(#loc515)
    cir.br ^bb53 loc(#loc567)
  ^bb53:  // pred: ^bb52
    cir.br ^bb55 loc(#loc567)
  ^bb54:  // pred: ^bb75
    %120 = cir.const #cir.int<0> : !s32i loc(#loc179)
    %121 = cir.cast(int_to_bool, %120 : !s32i), !cir.bool loc(#loc179)
    cir.brcond %121 ^bb55, ^bb76 loc(#loc179)
  ^bb55:  // 2 preds: ^bb53, ^bb54
    %122 = cir.const #cir.int<2> : !s32i loc(#loc180)
    %123 = cir.const #cir.int<1> : !s32i loc(#loc181)
    %124 = cir.const #cir.int<6> : !s32i loc(#loc182)
    %125 = cir.call @socket(%122, %123, %124) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc183)
    cir.store %125, %6 : !s32i, !cir.ptr<!s32i> loc(#loc568)
    cir.br ^bb56 loc(#loc569)
  ^bb56:  // pred: ^bb55
    %126 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc188)
    %127 = cir.const #cir.int<1> : !s32i loc(#loc189)
    %128 = cir.unary(minus, %127) : !s32i, !s32i loc(#loc189)
    %129 = cir.cmp(eq, %126, %128) : !s32i, !cir.bool loc(#loc570)
    cir.brcond %129 ^bb57, ^bb58 loc(#loc571)
  ^bb57:  // pred: ^bb56
    cir.br ^bb76 loc(#loc191)
  ^bb58:  // pred: ^bb56
    cir.br ^bb59 loc(#loc187)
  ^bb59:  // pred: ^bb58
    %130 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc572)
    %131 = cir.const #cir.int<0> : !s32i loc(#loc194)
    %132 = cir.const #cir.int<16> : !u64i loc(#loc573)
    cir.libc.memset %132 bytes from %130 set to %131 : !cir.ptr<!void>, !s32i, !u64i loc(#loc574)
    %133 = cir.const #cir.int<2> : !s32i loc(#loc199)
    %134 = cir.cast(integral, %133 : !s32i), !u16i loc(#loc199)
    %135 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
    cir.store %134, %135 : !u16i, !cir.ptr<!u16i> loc(#loc575)
    %136 = cir.const #cir.int<0> : !s32i loc(#loc201)
    %137 = cir.cast(integral, %136 : !s32i), !u32i loc(#loc201)
    %138 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc82)
    %139 = cir.get_member %138[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc83)
    cir.store %137, %139 : !u32i, !cir.ptr<!u32i> loc(#loc576)
    %140 = cir.const #cir.int<20000> : !s32i loc(#loc203)
    %141 = cir.cast(integral, %140 : !s32i), !u16i loc(#loc203)
    %142 = cir.call @htons(%141) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc204)
    %143 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc87)
    cir.store %142, %143 : !u16i, !cir.ptr<!u16i> loc(#loc577)
    cir.br ^bb60 loc(#loc578)
  ^bb60:  // pred: ^bb59
    %144 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc209)
    %145 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc579)
    %146 = cir.const #cir.int<16> : !u64i loc(#loc580)
    %147 = cir.cast(integral, %146 : !u64i), !u32i loc(#loc580)
    %148 = cir.call @bind(%144, %145, %147) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc214)
    %149 = cir.const #cir.int<1> : !s32i loc(#loc215)
    %150 = cir.unary(minus, %149) : !s32i, !s32i loc(#loc215)
    %151 = cir.cmp(eq, %148, %150) : !s32i, !cir.bool loc(#loc581)
    cir.brcond %151 ^bb61, ^bb62 loc(#loc582)
  ^bb61:  // pred: ^bb60
    cir.br ^bb76 loc(#loc217)
  ^bb62:  // pred: ^bb60
    cir.br ^bb63 loc(#loc208)
  ^bb63:  // pred: ^bb62
    cir.br ^bb64 loc(#loc583)
  ^bb64:  // pred: ^bb63
    %152 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc220)
    %153 = cir.const #cir.int<5> : !s32i loc(#loc221)
    %154 = cir.call @listen(%152, %153) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc222)
    %155 = cir.const #cir.int<1> : !s32i loc(#loc223)
    %156 = cir.unary(minus, %155) : !s32i, !s32i loc(#loc223)
    %157 = cir.cmp(eq, %154, %156) : !s32i, !cir.bool loc(#loc584)
    cir.brcond %157 ^bb65, ^bb66 loc(#loc585)
  ^bb65:  // pred: ^bb64
    cir.br ^bb76 loc(#loc225)
  ^bb66:  // pred: ^bb64
    cir.br ^bb67 loc(#loc219)
  ^bb67:  // pred: ^bb66
    %158 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc226)
    %159 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc227)
    %160 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc228)
    %161 = cir.call @accept(%158, %159, %160) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc229)
    cir.store %161, %7 : !s32i, !cir.ptr<!s32i> loc(#loc586)
    cir.br ^bb68 loc(#loc587)
  ^bb68:  // pred: ^bb67
    %162 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc234)
    %163 = cir.const #cir.int<1> : !s32i loc(#loc235)
    %164 = cir.unary(minus, %163) : !s32i, !s32i loc(#loc235)
    %165 = cir.cmp(eq, %162, %164) : !s32i, !cir.bool loc(#loc588)
    cir.brcond %165 ^bb69, ^bb70 loc(#loc589)
  ^bb69:  // pred: ^bb68
    cir.br ^bb76 loc(#loc237)
  ^bb70:  // pred: ^bb68
    cir.br ^bb71 loc(#loc233)
  ^bb71:  // pred: ^bb70
    cir.br ^bb72 loc(#loc590)
  ^bb72:  // pred: ^bb71
    %166 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc240)
    %167 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc241)
    %168 = cir.cast(array_to_ptrdecay, %167 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc241)
    %169 = cir.cast(bitcast, %168 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc241)
    %170 = cir.const #cir.int<8> : !u64i loc(#loc591)
    %171 = cir.const #cir.int<0> : !s32i loc(#loc244)
    %172 = cir.call @send(%166, %169, %170, %171) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc245)
    %173 = cir.const #cir.int<1> : !s32i loc(#loc246)
    %174 = cir.unary(minus, %173) : !s32i, !s32i loc(#loc246)
    %175 = cir.cast(integral, %174 : !s32i), !s64i loc(#loc246)
    %176 = cir.cmp(eq, %172, %175) : !s64i, !cir.bool loc(#loc592)
    cir.brcond %176 ^bb73, ^bb74 loc(#loc593)
  ^bb73:  // pred: ^bb72
    %177 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc248)
    %178 = cir.cast(array_to_ptrdecay, %177 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc248)
    cir.call @printLine(%178) : (!cir.ptr<!s8i>) -> () loc(#loc249)
    cir.br ^bb74 loc(#loc239)
  ^bb74:  // 2 preds: ^bb72, ^bb73
    cir.br ^bb75 loc(#loc239)
  ^bb75:  // pred: ^bb74
    cir.br ^bb54 loc(#loc178)
  ^bb76:  // 5 preds: ^bb54, ^bb57, ^bb61, ^bb65, ^bb69
    cir.br ^bb77 loc(#loc178)
  ^bb77:  // pred: ^bb76
    cir.br ^bb78 loc(#loc594)
  ^bb78:  // pred: ^bb77
    %179 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc252)
    %180 = cir.const #cir.int<1> : !s32i loc(#loc253)
    %181 = cir.unary(minus, %180) : !s32i, !s32i loc(#loc253)
    %182 = cir.cmp(ne, %179, %181) : !s32i, !cir.bool loc(#loc595)
    cir.brcond %182 ^bb79, ^bb80 loc(#loc596)
  ^bb79:  // pred: ^bb78
    %183 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc255)
    %184 = cir.call @close(%183) : (!s32i) -> !s32i loc(#loc256)
    cir.br ^bb80 loc(#loc251)
  ^bb80:  // 2 preds: ^bb78, ^bb79
    cir.br ^bb81 loc(#loc251)
  ^bb81:  // pred: ^bb80
    cir.br ^bb82 loc(#loc597)
  ^bb82:  // pred: ^bb81
    %185 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc259)
    %186 = cir.const #cir.int<1> : !s32i loc(#loc260)
    %187 = cir.unary(minus, %186) : !s32i, !s32i loc(#loc260)
    %188 = cir.cmp(ne, %185, %187) : !s32i, !cir.bool loc(#loc598)
    cir.brcond %188 ^bb83, ^bb84 loc(#loc599)
  ^bb83:  // pred: ^bb82
    %189 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc262)
    %190 = cir.call @close(%189) : (!s32i) -> !s32i loc(#loc263)
    cir.br ^bb84 loc(#loc258)
  ^bb84:  // 2 preds: ^bb82, ^bb83
    cir.br ^bb85 loc(#loc258)
  ^bb85:  // pred: ^bb84
    cir.br ^bb86 loc(#loc176)
  ^bb86:  // pred: ^bb85
    cir.br ^bb87 loc(#loc47)
  ^bb87:  // 2 preds: ^bb50, ^bb86
    cir.br ^bb88 loc(#loc47)
  ^bb88:  // pred: ^bb87
    cir.return loc(#loc30)
  } loc(#loc507)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc601)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc266)
    cir.return loc(#loc265)
  } loc(#loc600)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc602)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc603)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc272)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc273)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc274)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc275)
  cir.func @main(%arg0: !s32i loc(fused[#loc278, #loc279]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc280, #loc281])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc605)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc606)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc277)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc282)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc282)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc283)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc284)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc284)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc285)
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc272)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc272)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc286)
    %8 = cir.get_global @CWE510_Trapdoor__ip_based_logic_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc607)
    cir.call @CWE510_Trapdoor__ip_based_logic_12_good() : () -> () loc(#loc287)
    %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc273)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc273)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc289)
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc274)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc274)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc290)
    %13 = cir.get_global @CWE510_Trapdoor__ip_based_logic_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc608)
    cir.call @CWE510_Trapdoor__ip_based_logic_12_bad() : () -> () loc(#loc291)
    %14 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc275)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc275)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc293)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc294)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc609)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc609)
    cir.return %17 : !s32i loc(#loc609)
  } loc(#loc604)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc611)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc612)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc613)
    %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc614)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc615)
    %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc616)
    cir.br ^bb1 loc(#loc617)
  ^bb1:  // pred: ^bb0
    %6 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc618)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc618)
    %8 = cir.call %7() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc312)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc312)
    cir.brcond %9 ^bb2, ^bb38 loc(#loc619)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc620)
  ^bb3:  // pred: ^bb2
    %10 = cir.const #cir.int<1> : !s32i loc(#loc301)
    %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc301)
    cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc612)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc303)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc303)
    cir.store %13, %2 : !s32i, !cir.ptr<!s32i> loc(#loc613)
    cir.br ^bb4 loc(#loc621)
  ^bb4:  // pred: ^bb3
    cir.br ^bb6 loc(#loc621)
  ^bb5:  // pred: ^bb26
    %14 = cir.const #cir.int<0> : !s32i loc(#loc321)
    %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc321)
    cir.brcond %15 ^bb6, ^bb27 loc(#loc321)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    %16 = cir.const #cir.int<2> : !s32i loc(#loc322)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc323)
    %18 = cir.const #cir.int<6> : !s32i loc(#loc324)
    %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc325)
    cir.store %19, %1 : !s32i, !cir.ptr<!s32i> loc(#loc622)
    cir.br ^bb7 loc(#loc623)
  ^bb7:  // pred: ^bb6
    %20 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc330)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc331)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc331)
    %23 = cir.cmp(eq, %20, %22) : !s32i, !cir.bool loc(#loc624)
    cir.brcond %23 ^bb8, ^bb9 loc(#loc625)
  ^bb8:  // pred: ^bb7
    cir.br ^bb27 loc(#loc333)
  ^bb9:  // pred: ^bb7
    cir.br ^bb10 loc(#loc329)
  ^bb10:  // pred: ^bb9
    %24 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc626)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc336)
    %26 = cir.const #cir.int<16> : !u64i loc(#loc627)
    cir.libc.memset %26 bytes from %24 set to %25 : !cir.ptr<!void>, !s32i, !u64i loc(#loc628)
    %27 = cir.const #cir.int<2> : !s32i loc(#loc341)
    %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc341)
    %29 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
    cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc629)
    %30 = cir.const #cir.int<0> : !s32i loc(#loc343)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc343)
    %32 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc82)
    %33 = cir.get_member %32[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc83)
    cir.store %31, %33 : !u32i, !cir.ptr<!u32i> loc(#loc630)
    %34 = cir.const #cir.int<20000> : !s32i loc(#loc345)
    %35 = cir.cast(integral, %34 : !s32i), !u16i loc(#loc345)
    %36 = cir.call @htons(%35) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc346)
    %37 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc87)
    cir.store %36, %37 : !u16i, !cir.ptr<!u16i> loc(#loc631)
    cir.br ^bb11 loc(#loc632)
  ^bb11:  // pred: ^bb10
    %38 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc351)
    %39 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc633)
    %40 = cir.const #cir.int<16> : !u64i loc(#loc634)
    %41 = cir.cast(integral, %40 : !u64i), !u32i loc(#loc634)
    %42 = cir.call @bind(%38, %39, %41) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc356)
    %43 = cir.const #cir.int<1> : !s32i loc(#loc357)
    %44 = cir.unary(minus, %43) : !s32i, !s32i loc(#loc357)
    %45 = cir.cmp(eq, %42, %44) : !s32i, !cir.bool loc(#loc635)
    cir.brcond %45 ^bb12, ^bb13 loc(#loc636)
  ^bb12:  // pred: ^bb11
    cir.br ^bb27 loc(#loc359)
  ^bb13:  // pred: ^bb11
    cir.br ^bb14 loc(#loc350)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc637)
  ^bb15:  // pred: ^bb14
    %46 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc362)
    %47 = cir.const #cir.int<5> : !s32i loc(#loc363)
    %48 = cir.call @listen(%46, %47) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc364)
    %49 = cir.const #cir.int<1> : !s32i loc(#loc365)
    %50 = cir.unary(minus, %49) : !s32i, !s32i loc(#loc365)
    %51 = cir.cmp(eq, %48, %50) : !s32i, !cir.bool loc(#loc638)
    cir.brcond %51 ^bb16, ^bb17 loc(#loc639)
  ^bb16:  // pred: ^bb15
    cir.br ^bb27 loc(#loc367)
  ^bb17:  // pred: ^bb15
    cir.br ^bb18 loc(#loc361)
  ^bb18:  // pred: ^bb17
    %52 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc368)
    %53 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc369)
    %54 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc370)
    %55 = cir.call @accept(%52, %53, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc371)
    cir.store %55, %2 : !s32i, !cir.ptr<!s32i> loc(#loc640)
    cir.br ^bb19 loc(#loc641)
  ^bb19:  // pred: ^bb18
    %56 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc376)
    %57 = cir.const #cir.int<1> : !s32i loc(#loc377)
    %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc377)
    %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc642)
    cir.brcond %59 ^bb20, ^bb21 loc(#loc643)
  ^bb20:  // pred: ^bb19
    cir.br ^bb27 loc(#loc379)
  ^bb21:  // pred: ^bb19
    cir.br ^bb22 loc(#loc375)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc644)
  ^bb23:  // pred: ^bb22
    %60 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc382)
    %61 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc383)
    %62 = cir.cast(array_to_ptrdecay, %61 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc383)
    %63 = cir.cast(bitcast, %62 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc383)
    %64 = cir.const #cir.int<8> : !u64i loc(#loc645)
    %65 = cir.const #cir.int<0> : !s32i loc(#loc386)
    %66 = cir.call @send(%60, %63, %64, %65) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc387)
    %67 = cir.const #cir.int<1> : !s32i loc(#loc388)
    %68 = cir.unary(minus, %67) : !s32i, !s32i loc(#loc388)
    %69 = cir.cast(integral, %68 : !s32i), !s64i loc(#loc388)
    %70 = cir.cmp(eq, %66, %69) : !s64i, !cir.bool loc(#loc646)
    cir.brcond %70 ^bb24, ^bb25 loc(#loc647)
  ^bb24:  // pred: ^bb23
    %71 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc390)
    %72 = cir.cast(array_to_ptrdecay, %71 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc390)
    cir.call @printLine(%72) : (!cir.ptr<!s8i>) -> () loc(#loc391)
    cir.br ^bb25 loc(#loc381)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    cir.br ^bb26 loc(#loc381)
  ^bb26:  // pred: ^bb25
    cir.br ^bb5 loc(#loc320)
  ^bb27:  // 5 preds: ^bb5, ^bb8, ^bb12, ^bb16, ^bb20
    cir.br ^bb28 loc(#loc320)
  ^bb28:  // pred: ^bb27
    cir.br ^bb29 loc(#loc648)
  ^bb29:  // pred: ^bb28
    %73 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc394)
    %74 = cir.const #cir.int<1> : !s32i loc(#loc395)
    %75 = cir.unary(minus, %74) : !s32i, !s32i loc(#loc395)
    %76 = cir.cmp(ne, %73, %75) : !s32i, !cir.bool loc(#loc649)
    cir.brcond %76 ^bb30, ^bb31 loc(#loc650)
  ^bb30:  // pred: ^bb29
    %77 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc397)
    %78 = cir.call @close(%77) : (!s32i) -> !s32i loc(#loc398)
    cir.br ^bb31 loc(#loc393)
  ^bb31:  // 2 preds: ^bb29, ^bb30
    cir.br ^bb32 loc(#loc393)
  ^bb32:  // pred: ^bb31
    cir.br ^bb33 loc(#loc651)
  ^bb33:  // pred: ^bb32
    %79 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc401)
    %80 = cir.const #cir.int<1> : !s32i loc(#loc402)
    %81 = cir.unary(minus, %80) : !s32i, !s32i loc(#loc402)
    %82 = cir.cmp(ne, %79, %81) : !s32i, !cir.bool loc(#loc652)
    cir.brcond %82 ^bb34, ^bb35 loc(#loc653)
  ^bb34:  // pred: ^bb33
    %83 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc404)
    %84 = cir.call @close(%83) : (!s32i) -> !s32i loc(#loc405)
    cir.br ^bb35 loc(#loc400)
  ^bb35:  // 2 preds: ^bb33, ^bb34
    cir.br ^bb36 loc(#loc400)
  ^bb36:  // pred: ^bb35
    cir.br ^bb37 loc(#loc318)
  ^bb37:  // pred: ^bb36
    cir.br ^bb74 loc(#loc315)
  ^bb38:  // pred: ^bb1
    cir.br ^bb39 loc(#loc654)
  ^bb39:  // pred: ^bb38
    %85 = cir.const #cir.int<1> : !s32i loc(#loc307)
    %86 = cir.unary(minus, %85) : !s32i, !s32i loc(#loc307)
    cir.store %86, %4 : !s32i, !cir.ptr<!s32i> loc(#loc615)
    %87 = cir.const #cir.int<1> : !s32i loc(#loc309)
    %88 = cir.unary(minus, %87) : !s32i, !s32i loc(#loc309)
    cir.store %88, %5 : !s32i, !cir.ptr<!s32i> loc(#loc616)
    cir.br ^bb40 loc(#loc655)
  ^bb40:  // pred: ^bb39
    cir.br ^bb42 loc(#loc655)
  ^bb41:  // pred: ^bb62
    %89 = cir.const #cir.int<0> : !s32i loc(#loc410)
    %90 = cir.cast(int_to_bool, %89 : !s32i), !cir.bool loc(#loc410)
    cir.brcond %90 ^bb42, ^bb63 loc(#loc410)
  ^bb42:  // 2 preds: ^bb40, ^bb41
    %91 = cir.const #cir.int<2> : !s32i loc(#loc411)
    %92 = cir.const #cir.int<1> : !s32i loc(#loc412)
    %93 = cir.const #cir.int<6> : !s32i loc(#loc413)
    %94 = cir.call @socket(%91, %92, %93) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc414)
    cir.store %94, %4 : !s32i, !cir.ptr<!s32i> loc(#loc656)
    cir.br ^bb43 loc(#loc657)
  ^bb43:  // pred: ^bb42
    %95 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc419)
    %96 = cir.const #cir.int<1> : !s32i loc(#loc420)
    %97 = cir.unary(minus, %96) : !s32i, !s32i loc(#loc420)
    %98 = cir.cmp(eq, %95, %97) : !s32i, !cir.bool loc(#loc658)
    cir.brcond %98 ^bb44, ^bb45 loc(#loc659)
  ^bb44:  // pred: ^bb43
    cir.br ^bb63 loc(#loc422)
  ^bb45:  // pred: ^bb43
    cir.br ^bb46 loc(#loc418)
  ^bb46:  // pred: ^bb45
    %99 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc660)
    %100 = cir.const #cir.int<0> : !s32i loc(#loc425)
    %101 = cir.const #cir.int<16> : !u64i loc(#loc661)
    cir.libc.memset %101 bytes from %99 set to %100 : !cir.ptr<!void>, !s32i, !u64i loc(#loc662)
    %102 = cir.const #cir.int<2> : !s32i loc(#loc430)
    %103 = cir.cast(integral, %102 : !s32i), !u16i loc(#loc430)
    %104 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
    cir.store %103, %104 : !u16i, !cir.ptr<!u16i> loc(#loc663)
    %105 = cir.const #cir.int<0> : !s32i loc(#loc432)
    %106 = cir.cast(integral, %105 : !s32i), !u32i loc(#loc432)
    %107 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc82)
    %108 = cir.get_member %107[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc83)
    cir.store %106, %108 : !u32i, !cir.ptr<!u32i> loc(#loc664)
    %109 = cir.const #cir.int<20000> : !s32i loc(#loc434)
    %110 = cir.cast(integral, %109 : !s32i), !u16i loc(#loc434)
    %111 = cir.call @htons(%110) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc435)
    %112 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc87)
    cir.store %111, %112 : !u16i, !cir.ptr<!u16i> loc(#loc665)
    cir.br ^bb47 loc(#loc666)
  ^bb47:  // pred: ^bb46
    %113 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc440)
    %114 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc667)
    %115 = cir.const #cir.int<16> : !u64i loc(#loc668)
    %116 = cir.cast(integral, %115 : !u64i), !u32i loc(#loc668)
    %117 = cir.call @bind(%113, %114, %116) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc445)
    %118 = cir.const #cir.int<1> : !s32i loc(#loc446)
    %119 = cir.unary(minus, %118) : !s32i, !s32i loc(#loc446)
    %120 = cir.cmp(eq, %117, %119) : !s32i, !cir.bool loc(#loc669)
    cir.brcond %120 ^bb48, ^bb49 loc(#loc670)
  ^bb48:  // pred: ^bb47
    cir.br ^bb63 loc(#loc448)
  ^bb49:  // pred: ^bb47
    cir.br ^bb50 loc(#loc439)
  ^bb50:  // pred: ^bb49
    cir.br ^bb51 loc(#loc671)
  ^bb51:  // pred: ^bb50
    %121 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc451)
    %122 = cir.const #cir.int<5> : !s32i loc(#loc452)
    %123 = cir.call @listen(%121, %122) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc453)
    %124 = cir.const #cir.int<1> : !s32i loc(#loc454)
    %125 = cir.unary(minus, %124) : !s32i, !s32i loc(#loc454)
    %126 = cir.cmp(eq, %123, %125) : !s32i, !cir.bool loc(#loc672)
    cir.brcond %126 ^bb52, ^bb53 loc(#loc673)
  ^bb52:  // pred: ^bb51
    cir.br ^bb63 loc(#loc456)
  ^bb53:  // pred: ^bb51
    cir.br ^bb54 loc(#loc450)
  ^bb54:  // pred: ^bb53
    %127 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc457)
    %128 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc458)
    %129 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc459)
    %130 = cir.call @accept(%127, %128, %129) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc460)
    cir.store %130, %5 : !s32i, !cir.ptr<!s32i> loc(#loc674)
    cir.br ^bb55 loc(#loc675)
  ^bb55:  // pred: ^bb54
    %131 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc465)
    %132 = cir.const #cir.int<1> : !s32i loc(#loc466)
    %133 = cir.unary(minus, %132) : !s32i, !s32i loc(#loc466)
    %134 = cir.cmp(eq, %131, %133) : !s32i, !cir.bool loc(#loc676)
    cir.brcond %134 ^bb56, ^bb57 loc(#loc677)
  ^bb56:  // pred: ^bb55
    cir.br ^bb63 loc(#loc468)
  ^bb57:  // pred: ^bb55
    cir.br ^bb58 loc(#loc464)
  ^bb58:  // pred: ^bb57
    cir.br ^bb59 loc(#loc678)
  ^bb59:  // pred: ^bb58
    %135 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc471)
    %136 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc472)
    %137 = cir.cast(array_to_ptrdecay, %136 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc472)
    %138 = cir.cast(bitcast, %137 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc472)
    %139 = cir.const #cir.int<8> : !u64i loc(#loc679)
    %140 = cir.const #cir.int<0> : !s32i loc(#loc475)
    %141 = cir.call @send(%135, %138, %139, %140) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc476)
    %142 = cir.const #cir.int<1> : !s32i loc(#loc477)
    %143 = cir.unary(minus, %142) : !s32i, !s32i loc(#loc477)
    %144 = cir.cast(integral, %143 : !s32i), !s64i loc(#loc477)
    %145 = cir.cmp(eq, %141, %144) : !s64i, !cir.bool loc(#loc680)
    cir.brcond %145 ^bb60, ^bb61 loc(#loc681)
  ^bb60:  // pred: ^bb59
    %146 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc479)
    %147 = cir.cast(array_to_ptrdecay, %146 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc479)
    cir.call @printLine(%147) : (!cir.ptr<!s8i>) -> () loc(#loc480)
    cir.br ^bb61 loc(#loc470)
  ^bb61:  // 2 preds: ^bb59, ^bb60
    cir.br ^bb62 loc(#loc470)
  ^bb62:  // pred: ^bb61
    cir.br ^bb41 loc(#loc409)
  ^bb63:  // 5 preds: ^bb41, ^bb44, ^bb48, ^bb52, ^bb56
    cir.br ^bb64 loc(#loc409)
  ^bb64:  // pred: ^bb63
    cir.br ^bb65 loc(#loc682)
  ^bb65:  // pred: ^bb64
    %148 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc483)
    %149 = cir.const #cir.int<1> : !s32i loc(#loc484)
    %150 = cir.unary(minus, %149) : !s32i, !s32i loc(#loc484)
    %151 = cir.cmp(ne, %148, %150) : !s32i, !cir.bool loc(#loc683)
    cir.brcond %151 ^bb66, ^bb67 loc(#loc684)
  ^bb66:  // pred: ^bb65
    %152 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc486)
    %153 = cir.call @close(%152) : (!s32i) -> !s32i loc(#loc487)
    cir.br ^bb67 loc(#loc482)
  ^bb67:  // 2 preds: ^bb65, ^bb66
    cir.br ^bb68 loc(#loc482)
  ^bb68:  // pred: ^bb67
    cir.br ^bb69 loc(#loc685)
  ^bb69:  // pred: ^bb68
    %154 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc490)
    %155 = cir.const #cir.int<1> : !s32i loc(#loc491)
    %156 = cir.unary(minus, %155) : !s32i, !s32i loc(#loc491)
    %157 = cir.cmp(ne, %154, %156) : !s32i, !cir.bool loc(#loc686)
    cir.brcond %157 ^bb70, ^bb71 loc(#loc687)
  ^bb70:  // pred: ^bb69
    %158 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc493)
    %159 = cir.call @close(%158) : (!s32i) -> !s32i loc(#loc494)
    cir.br ^bb71 loc(#loc489)
  ^bb71:  // 2 preds: ^bb69, ^bb70
    cir.br ^bb72 loc(#loc489)
  ^bb72:  // pred: ^bb71
    cir.br ^bb73 loc(#loc407)
  ^bb73:  // pred: ^bb72
    cir.br ^bb74 loc(#loc311)
  ^bb74:  // 2 preds: ^bb37, ^bb73
    cir.br ^bb75 loc(#loc311)
  ^bb75:  // pred: ^bb74
    cir.return loc(#loc297)
  } loc(#loc610)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/sys/socket.h":102:1)
#loc4 = loc("/usr/include/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":404:1)
#loc6 = loc("/usr/include/netinet/in.h":405:40)
#loc7 = loc("/usr/include/sys/socket.h":112:1)
#loc8 = loc("/usr/include/sys/socket.h":113:6)
#loc9 = loc("/usr/include/sys/socket.h":296:1)
#loc10 = loc("/usr/include/sys/socket.h":296:39)
#loc11 = loc("/usr/include/sys/socket.h":306:1)
#loc12 = loc("/usr/include/sys/socket.h":307:38)
#loc13 = loc("/usr/include/sys/socket.h":116:1)
#loc14 = loc("/usr/include/sys/socket.h":117:33)
#loc15 = loc("/usr/include/string.h":156:1)
#loc16 = loc("/usr/include/string.h":157:33)
#loc17 = loc("CWE510_Trapdoor__ip_based_logic_12.c":90:28)
#loc18 = loc("/usr/include/arpa/inet.h":53:1)
#loc19 = loc("/usr/include/arpa/inet.h":53:46)
#loc20 = loc("/usr/include/sys/socket.h":138:1)
#loc21 = loc("/usr/include/sys/socket.h":138:74)
#loc22 = loc("CWE510_Trapdoor__ip_based_logic_12.c":92:44)
#loc23 = loc("CWE510_Trapdoor__ip_based_logic_12.c":100:44)
#loc24 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc25 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc26 = loc("CWE510_Trapdoor__ip_based_logic_12.c":102:35)
#loc27 = loc("/usr/include/unistd.h":358:1)
#loc28 = loc("/usr/include/unistd.h":358:27)
#loc29 = loc("CWE510_Trapdoor__ip_based_logic_12.c":41:1)
#loc30 = loc("CWE510_Trapdoor__ip_based_logic_12.c":187:1)
#loc31 = loc("CWE510_Trapdoor__ip_based_logic_12.c":50:13)
#loc32 = loc("CWE510_Trapdoor__ip_based_logic_12.c":50:32)
#loc33 = loc("CWE510_Trapdoor__ip_based_logic_12.c":50:41)
#loc34 = loc("CWE510_Trapdoor__ip_based_logic_12.c":51:13)
#loc35 = loc("CWE510_Trapdoor__ip_based_logic_12.c":51:56)
#loc36 = loc("CWE510_Trapdoor__ip_based_logic_12.c":52:13)
#loc37 = loc("CWE510_Trapdoor__ip_based_logic_12.c":52:35)
#loc38 = loc("CWE510_Trapdoor__ip_based_logic_12.c":53:13)
#loc39 = loc("CWE510_Trapdoor__ip_based_logic_12.c":53:35)
#loc40 = loc("CWE510_Trapdoor__ip_based_logic_12.c":130:13)
#loc41 = loc("CWE510_Trapdoor__ip_based_logic_12.c":130:32)
#loc42 = loc("CWE510_Trapdoor__ip_based_logic_12.c":131:13)
#loc43 = loc("CWE510_Trapdoor__ip_based_logic_12.c":131:35)
#loc44 = loc("CWE510_Trapdoor__ip_based_logic_12.c":132:13)
#loc45 = loc("CWE510_Trapdoor__ip_based_logic_12.c":132:35)
#loc46 = loc("CWE510_Trapdoor__ip_based_logic_12.c":43:5)
#loc47 = loc("CWE510_Trapdoor__ip_based_logic_12.c":186:5)
#loc48 = loc("CWE510_Trapdoor__ip_based_logic_12.c":43:8)
#loc49 = loc("CWE510_Trapdoor__ip_based_logic_12.c":43:33)
#loc50 = loc("CWE510_Trapdoor__ip_based_logic_12.c":44:5)
#loc51 = loc("CWE510_Trapdoor__ip_based_logic_12.c":122:5)
#loc52 = loc("CWE510_Trapdoor__ip_based_logic_12.c":124:5)
#loc53 = loc("CWE510_Trapdoor__ip_based_logic_12.c":45:9)
#loc54 = loc("CWE510_Trapdoor__ip_based_logic_12.c":121:9)
#loc55 = loc("CWE510_Trapdoor__ip_based_logic_12.c":51:36)
#loc56 = loc("CWE510_Trapdoor__ip_based_logic_12.c":54:13)
#loc57 = loc("CWE510_Trapdoor__ip_based_logic_12.c":106:21)
#loc58 = loc("CWE510_Trapdoor__ip_based_logic_12.c":106:20)
#loc59 = loc("CWE510_Trapdoor__ip_based_logic_12.c":63:39)
#loc60 = loc("CWE510_Trapdoor__ip_based_logic_12.c":63:48)
#loc61 = loc("CWE510_Trapdoor__ip_based_logic_12.c":63:61)
#loc62 = loc("CWE510_Trapdoor__ip_based_logic_12.c":63:32)
#loc63 = loc("CWE510_Trapdoor__ip_based_logic_12.c":63:17)
#loc64 = loc("CWE510_Trapdoor__ip_based_logic_12.c":63:72)
#loc65 = loc("CWE510_Trapdoor__ip_based_logic_12.c":64:17)
#loc66 = loc("CWE510_Trapdoor__ip_based_logic_12.c":67:17)
#loc67 = loc("CWE510_Trapdoor__ip_based_logic_12.c":64:21)
#loc68 = loc("CWE510_Trapdoor__ip_based_logic_12.c":64:37)
#loc69 = loc("CWE510_Trapdoor__ip_based_logic_12.c":65:17)
#loc70 = loc("CWE510_Trapdoor__ip_based_logic_12.c":66:21)
#loc71 = loc("CWE510_Trapdoor__ip_based_logic_12.c":68:24)
#loc72 = loc("CWE510_Trapdoor__ip_based_logic_12.c":68:25)
#loc73 = loc("CWE510_Trapdoor__ip_based_logic_12.c":68:34)
#loc74 = loc("CWE510_Trapdoor__ip_based_logic_12.c":68:37)
#loc75 = loc("CWE510_Trapdoor__ip_based_logic_12.c":68:51)
#loc76 = loc("CWE510_Trapdoor__ip_based_logic_12.c":68:17)
#loc77 = loc("CWE510_Trapdoor__ip_based_logic_12.c":68:52)
#loc78 = loc("CWE510_Trapdoor__ip_based_logic_12.c":69:38)
#loc79 = loc("/usr/include/netinet/in.h":249:5)
#loc80 = loc("CWE510_Trapdoor__ip_based_logic_12.c":69:17)
#loc81 = loc("CWE510_Trapdoor__ip_based_logic_12.c":70:43)
#loc82 = loc("/usr/include/netinet/in.h":251:20)
#loc83 = loc("/usr/include/netinet/in.h":33:15)
#loc84 = loc("CWE510_Trapdoor__ip_based_logic_12.c":70:17)
#loc85 = loc("CWE510_Trapdoor__ip_based_logic_12.c":71:42)
#loc86 = loc("CWE510_Trapdoor__ip_based_logic_12.c":71:36)
#loc87 = loc("/usr/include/netinet/in.h":250:15)
#loc88 = loc("CWE510_Trapdoor__ip_based_logic_12.c":71:17)
#loc89 = loc("CWE510_Trapdoor__ip_based_logic_12.c":71:47)
#loc90 = loc("CWE510_Trapdoor__ip_based_logic_12.c":72:17)
#loc91 = loc("CWE510_Trapdoor__ip_based_logic_12.c":75:17)
#loc92 = loc("CWE510_Trapdoor__ip_based_logic_12.c":72:26)
#loc93 = loc("CWE510_Trapdoor__ip_based_logic_12.c":72:58)
#loc94 = loc("CWE510_Trapdoor__ip_based_logic_12.c":72:59)
#loc95 = loc("CWE510_Trapdoor__ip_based_logic_12.c":72:68)
#loc96 = loc("CWE510_Trapdoor__ip_based_logic_12.c":72:82)
#loc97 = loc("CWE510_Trapdoor__ip_based_logic_12.c":72:21)
#loc98 = loc("CWE510_Trapdoor__ip_based_logic_12.c":72:88)
#loc99 = loc("CWE510_Trapdoor__ip_based_logic_12.c":73:17)
#loc100 = loc("CWE510_Trapdoor__ip_based_logic_12.c":74:21)
#loc101 = loc("CWE510_Trapdoor__ip_based_logic_12.c":76:17)
#loc102 = loc("CWE510_Trapdoor__ip_based_logic_12.c":79:17)
#loc103 = loc("CWE510_Trapdoor__ip_based_logic_12.c":76:28)
#loc104 = loc("CWE510_Trapdoor__ip_based_logic_12.c":76:42)
#loc105 = loc("CWE510_Trapdoor__ip_based_logic_12.c":76:21)
#loc106 = loc("CWE510_Trapdoor__ip_based_logic_12.c":76:48)
#loc107 = loc("CWE510_Trapdoor__ip_based_logic_12.c":77:17)
#loc108 = loc("CWE510_Trapdoor__ip_based_logic_12.c":78:21)
#loc109 = loc("CWE510_Trapdoor__ip_based_logic_12.c":80:39)
#loc110 = loc("CWE510_Trapdoor__ip_based_logic_12.c":80:53)
#loc111 = loc("CWE510_Trapdoor__ip_based_logic_12.c":80:59)
#loc112 = loc("CWE510_Trapdoor__ip_based_logic_12.c":80:32)
#loc113 = loc("CWE510_Trapdoor__ip_based_logic_12.c":80:17)
#loc114 = loc("CWE510_Trapdoor__ip_based_logic_12.c":80:63)
#loc115 = loc("CWE510_Trapdoor__ip_based_logic_12.c":81:17)
#loc116 = loc("CWE510_Trapdoor__ip_based_logic_12.c":84:17)
#loc117 = loc("CWE510_Trapdoor__ip_based_logic_12.c":81:21)
#loc118 = loc("CWE510_Trapdoor__ip_based_logic_12.c":81:37)
#loc119 = loc("CWE510_Trapdoor__ip_based_logic_12.c":82:17)
#loc120 = loc("CWE510_Trapdoor__ip_based_logic_12.c":83:21)
#loc121 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:17)
#loc122 = loc("CWE510_Trapdoor__ip_based_logic_12.c":88:17)
#loc123 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:33)
#loc124 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:66)
#loc125 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:67)
#loc126 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:82)
#loc127 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:83)
#loc128 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:21)
#loc129 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:105)
#loc130 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:104)
#loc131 = loc("CWE510_Trapdoor__ip_based_logic_12.c":86:17)
#loc132 = loc("CWE510_Trapdoor__ip_based_logic_12.c":87:21)
#loc133 = loc("CWE510_Trapdoor__ip_based_logic_12.c":90:17)
#loc134 = loc("CWE510_Trapdoor__ip_based_logic_12.c":104:17)
#loc135 = loc("CWE510_Trapdoor__ip_based_logic_12.c":90:21)
#loc136 = loc("CWE510_Trapdoor__ip_based_logic_12.c":90:46)
#loc137 = loc("CWE510_Trapdoor__ip_based_logic_12.c":90:84)
#loc138 = loc("CWE510_Trapdoor__ip_based_logic_12.c":91:17)
#loc139 = loc("CWE510_Trapdoor__ip_based_logic_12.c":97:17)
#loc140 = loc("CWE510_Trapdoor__ip_based_logic_12.c":99:17)
#loc141 = loc("CWE510_Trapdoor__ip_based_logic_12.c":92:21)
#loc142 = loc("CWE510_Trapdoor__ip_based_logic_12.c":96:21)
#loc143 = loc("CWE510_Trapdoor__ip_based_logic_12.c":92:30)
#loc144 = loc("CWE510_Trapdoor__ip_based_logic_12.c":92:59)
#loc145 = loc("CWE510_Trapdoor__ip_based_logic_12.c":92:79)
#loc146 = loc("CWE510_Trapdoor__ip_based_logic_12.c":92:82)
#loc147 = loc("CWE510_Trapdoor__ip_based_logic_12.c":92:25)
#loc148 = loc("CWE510_Trapdoor__ip_based_logic_12.c":92:89)
#loc149 = loc("CWE510_Trapdoor__ip_based_logic_12.c":93:21)
#loc150 = loc("CWE510_Trapdoor__ip_based_logic_12.c":95:25)
#loc151 = loc("CWE510_Trapdoor__ip_based_logic_12.c":100:21)
#loc152 = loc("CWE510_Trapdoor__ip_based_logic_12.c":103:21)
#loc153 = loc("CWE510_Trapdoor__ip_based_logic_12.c":100:30)
#loc154 = loc("CWE510_Trapdoor__ip_based_logic_12.c":100:61)
#loc155 = loc("CWE510_Trapdoor__ip_based_logic_12.c":100:83)
#loc156 = loc("CWE510_Trapdoor__ip_based_logic_12.c":100:86)
#loc157 = loc("CWE510_Trapdoor__ip_based_logic_12.c":100:25)
#loc158 = loc("CWE510_Trapdoor__ip_based_logic_12.c":100:92)
#loc159 = loc("CWE510_Trapdoor__ip_based_logic_12.c":101:21)
#loc160 = loc("CWE510_Trapdoor__ip_based_logic_12.c":102:25)
#loc161 = loc("CWE510_Trapdoor__ip_based_logic_12.c":107:13)
#loc162 = loc("CWE510_Trapdoor__ip_based_logic_12.c":110:13)
#loc163 = loc("CWE510_Trapdoor__ip_based_logic_12.c":107:17)
#loc164 = loc("CWE510_Trapdoor__ip_based_logic_12.c":107:33)
#loc165 = loc("CWE510_Trapdoor__ip_based_logic_12.c":108:13)
#loc166 = loc("CWE510_Trapdoor__ip_based_logic_12.c":109:30)
#loc167 = loc("CWE510_Trapdoor__ip_based_logic_12.c":109:17)
#loc168 = loc("CWE510_Trapdoor__ip_based_logic_12.c":111:13)
#loc169 = loc("CWE510_Trapdoor__ip_based_logic_12.c":114:13)
#loc170 = loc("CWE510_Trapdoor__ip_based_logic_12.c":111:17)
#loc171 = loc("CWE510_Trapdoor__ip_based_logic_12.c":111:33)
#loc172 = loc("CWE510_Trapdoor__ip_based_logic_12.c":112:13)
#loc173 = loc("CWE510_Trapdoor__ip_based_logic_12.c":113:30)
#loc174 = loc("CWE510_Trapdoor__ip_based_logic_12.c":113:17)
#loc175 = loc("CWE510_Trapdoor__ip_based_logic_12.c":125:9)
#loc176 = loc("CWE510_Trapdoor__ip_based_logic_12.c":185:9)
#loc177 = loc("CWE510_Trapdoor__ip_based_logic_12.c":133:13)
#loc178 = loc("CWE510_Trapdoor__ip_based_logic_12.c":170:21)
#loc179 = loc("CWE510_Trapdoor__ip_based_logic_12.c":170:20)
#loc180 = loc("CWE510_Trapdoor__ip_based_logic_12.c":142:39)
#loc181 = loc("CWE510_Trapdoor__ip_based_logic_12.c":142:48)
#loc182 = loc("CWE510_Trapdoor__ip_based_logic_12.c":142:61)
#loc183 = loc("CWE510_Trapdoor__ip_based_logic_12.c":142:32)
#loc184 = loc("CWE510_Trapdoor__ip_based_logic_12.c":142:17)
#loc185 = loc("CWE510_Trapdoor__ip_based_logic_12.c":142:72)
#loc186 = loc("CWE510_Trapdoor__ip_based_logic_12.c":143:17)
#loc187 = loc("CWE510_Trapdoor__ip_based_logic_12.c":146:17)
#loc188 = loc("CWE510_Trapdoor__ip_based_logic_12.c":143:21)
#loc189 = loc("CWE510_Trapdoor__ip_based_logic_12.c":143:37)
#loc190 = loc("CWE510_Trapdoor__ip_based_logic_12.c":144:17)
#loc191 = loc("CWE510_Trapdoor__ip_based_logic_12.c":145:21)
#loc192 = loc("CWE510_Trapdoor__ip_based_logic_12.c":147:24)
#loc193 = loc("CWE510_Trapdoor__ip_based_logic_12.c":147:25)
#loc194 = loc("CWE510_Trapdoor__ip_based_logic_12.c":147:34)
#loc195 = loc("CWE510_Trapdoor__ip_based_logic_12.c":147:37)
#loc196 = loc("CWE510_Trapdoor__ip_based_logic_12.c":147:51)
#loc197 = loc("CWE510_Trapdoor__ip_based_logic_12.c":147:17)
#loc198 = loc("CWE510_Trapdoor__ip_based_logic_12.c":147:52)
#loc199 = loc("CWE510_Trapdoor__ip_based_logic_12.c":148:38)
#loc200 = loc("CWE510_Trapdoor__ip_based_logic_12.c":148:17)
#loc201 = loc("CWE510_Trapdoor__ip_based_logic_12.c":149:43)
#loc202 = loc("CWE510_Trapdoor__ip_based_logic_12.c":149:17)
#loc203 = loc("CWE510_Trapdoor__ip_based_logic_12.c":150:42)
#loc204 = loc("CWE510_Trapdoor__ip_based_logic_12.c":150:36)
#loc205 = loc("CWE510_Trapdoor__ip_based_logic_12.c":150:17)
#loc206 = loc("CWE510_Trapdoor__ip_based_logic_12.c":150:47)
#loc207 = loc("CWE510_Trapdoor__ip_based_logic_12.c":151:17)
#loc208 = loc("CWE510_Trapdoor__ip_based_logic_12.c":154:17)
#loc209 = loc("CWE510_Trapdoor__ip_based_logic_12.c":151:26)
#loc210 = loc("CWE510_Trapdoor__ip_based_logic_12.c":151:58)
#loc211 = loc("CWE510_Trapdoor__ip_based_logic_12.c":151:59)
#loc212 = loc("CWE510_Trapdoor__ip_based_logic_12.c":151:68)
#loc213 = loc("CWE510_Trapdoor__ip_based_logic_12.c":151:82)
#loc214 = loc("CWE510_Trapdoor__ip_based_logic_12.c":151:21)
#loc215 = loc("CWE510_Trapdoor__ip_based_logic_12.c":151:88)
#loc216 = loc("CWE510_Trapdoor__ip_based_logic_12.c":152:17)
#loc217 = loc("CWE510_Trapdoor__ip_based_logic_12.c":153:21)
#loc218 = loc("CWE510_Trapdoor__ip_based_logic_12.c":155:17)
#loc219 = loc("CWE510_Trapdoor__ip_based_logic_12.c":158:17)
#loc220 = loc("CWE510_Trapdoor__ip_based_logic_12.c":155:28)
#loc221 = loc("CWE510_Trapdoor__ip_based_logic_12.c":155:42)
#loc222 = loc("CWE510_Trapdoor__ip_based_logic_12.c":155:21)
#loc223 = loc("CWE510_Trapdoor__ip_based_logic_12.c":155:48)
#loc224 = loc("CWE510_Trapdoor__ip_based_logic_12.c":156:17)
#loc225 = loc("CWE510_Trapdoor__ip_based_logic_12.c":157:21)
#loc226 = loc("CWE510_Trapdoor__ip_based_logic_12.c":159:39)
#loc227 = loc("CWE510_Trapdoor__ip_based_logic_12.c":159:53)
#loc228 = loc("CWE510_Trapdoor__ip_based_logic_12.c":159:59)
#loc229 = loc("CWE510_Trapdoor__ip_based_logic_12.c":159:32)
#loc230 = loc("CWE510_Trapdoor__ip_based_logic_12.c":159:17)
#loc231 = loc("CWE510_Trapdoor__ip_based_logic_12.c":159:63)
#loc232 = loc("CWE510_Trapdoor__ip_based_logic_12.c":160:17)
#loc233 = loc("CWE510_Trapdoor__ip_based_logic_12.c":163:17)
#loc234 = loc("CWE510_Trapdoor__ip_based_logic_12.c":160:21)
#loc235 = loc("CWE510_Trapdoor__ip_based_logic_12.c":160:37)
#loc236 = loc("CWE510_Trapdoor__ip_based_logic_12.c":161:17)
#loc237 = loc("CWE510_Trapdoor__ip_based_logic_12.c":162:21)
#loc238 = loc("CWE510_Trapdoor__ip_based_logic_12.c":165:17)
#loc239 = loc("CWE510_Trapdoor__ip_based_logic_12.c":168:17)
#loc240 = loc("CWE510_Trapdoor__ip_based_logic_12.c":165:26)
#loc241 = loc("CWE510_Trapdoor__ip_based_logic_12.c":165:40)
#loc242 = loc("CWE510_Trapdoor__ip_based_logic_12.c":165:57)
#loc243 = loc("CWE510_Trapdoor__ip_based_logic_12.c":165:79)
#loc244 = loc("CWE510_Trapdoor__ip_based_logic_12.c":165:82)
#loc245 = loc("CWE510_Trapdoor__ip_based_logic_12.c":165:21)
#loc246 = loc("CWE510_Trapdoor__ip_based_logic_12.c":165:88)
#loc247 = loc("CWE510_Trapdoor__ip_based_logic_12.c":166:17)
#loc248 = loc("CWE510_Trapdoor__ip_based_logic_12.c":167:31)
#loc249 = loc("CWE510_Trapdoor__ip_based_logic_12.c":167:21)
#loc250 = loc("CWE510_Trapdoor__ip_based_logic_12.c":171:13)
#loc251 = loc("CWE510_Trapdoor__ip_based_logic_12.c":174:13)
#loc252 = loc("CWE510_Trapdoor__ip_based_logic_12.c":171:17)
#loc253 = loc("CWE510_Trapdoor__ip_based_logic_12.c":171:33)
#loc254 = loc("CWE510_Trapdoor__ip_based_logic_12.c":172:13)
#loc255 = loc("CWE510_Trapdoor__ip_based_logic_12.c":173:30)
#loc256 = loc("CWE510_Trapdoor__ip_based_logic_12.c":173:17)
#loc257 = loc("CWE510_Trapdoor__ip_based_logic_12.c":175:13)
#loc258 = loc("CWE510_Trapdoor__ip_based_logic_12.c":178:13)
#loc259 = loc("CWE510_Trapdoor__ip_based_logic_12.c":175:17)
#loc260 = loc("CWE510_Trapdoor__ip_based_logic_12.c":175:33)
#loc261 = loc("CWE510_Trapdoor__ip_based_logic_12.c":176:13)
#loc262 = loc("CWE510_Trapdoor__ip_based_logic_12.c":177:30)
#loc263 = loc("CWE510_Trapdoor__ip_based_logic_12.c":177:17)
#loc264 = loc("CWE510_Trapdoor__ip_based_logic_12.c":326:1)
#loc265 = loc("CWE510_Trapdoor__ip_based_logic_12.c":329:1)
#loc266 = loc("CWE510_Trapdoor__ip_based_logic_12.c":328:5)
#loc267 = loc("CWE510_Trapdoor__ip_based_logic_12.c":328:11)
#loc268 = loc("/usr/include/stdlib.h":575:1)
#loc269 = loc("/usr/include/stdlib.h":575:41)
#loc270 = loc("/usr/include/time.h":76:1)
#loc271 = loc("/usr/include/time.h":76:38)
#loc272 = loc("CWE510_Trapdoor__ip_based_logic_12.c":345:15)
#loc273 = loc("CWE510_Trapdoor__ip_based_logic_12.c":347:15)
#loc274 = loc("CWE510_Trapdoor__ip_based_logic_12.c":350:15)
#loc275 = loc("CWE510_Trapdoor__ip_based_logic_12.c":352:15)
#loc276 = loc("CWE510_Trapdoor__ip_based_logic_12.c":340:1)
#loc277 = loc("CWE510_Trapdoor__ip_based_logic_12.c":355:1)
#loc282 = loc("CWE510_Trapdoor__ip_based_logic_12.c":341:1)
#loc283 = loc("CWE510_Trapdoor__ip_based_logic_12.c":343:27)
#loc284 = loc("CWE510_Trapdoor__ip_based_logic_12.c":343:22)
#loc285 = loc("CWE510_Trapdoor__ip_based_logic_12.c":343:5)
#loc286 = loc("CWE510_Trapdoor__ip_based_logic_12.c":345:5)
#loc287 = loc("CWE510_Trapdoor__ip_based_logic_12.c":346:5)
#loc288 = loc("CWE510_Trapdoor__ip_based_logic_12.c":346:45)
#loc289 = loc("CWE510_Trapdoor__ip_based_logic_12.c":347:5)
#loc290 = loc("CWE510_Trapdoor__ip_based_logic_12.c":350:5)
#loc291 = loc("CWE510_Trapdoor__ip_based_logic_12.c":351:5)
#loc292 = loc("CWE510_Trapdoor__ip_based_logic_12.c":351:44)
#loc293 = loc("CWE510_Trapdoor__ip_based_logic_12.c":352:5)
#loc294 = loc("CWE510_Trapdoor__ip_based_logic_12.c":354:12)
#loc295 = loc("CWE510_Trapdoor__ip_based_logic_12.c":354:5)
#loc296 = loc("CWE510_Trapdoor__ip_based_logic_12.c":194:1)
#loc297 = loc("CWE510_Trapdoor__ip_based_logic_12.c":324:1)
#loc298 = loc("CWE510_Trapdoor__ip_based_logic_12.c":203:13)
#loc299 = loc("CWE510_Trapdoor__ip_based_logic_12.c":203:32)
#loc300 = loc("CWE510_Trapdoor__ip_based_logic_12.c":204:13)
#loc301 = loc("CWE510_Trapdoor__ip_based_logic_12.c":204:35)
#loc302 = loc("CWE510_Trapdoor__ip_based_logic_12.c":205:13)
#loc303 = loc("CWE510_Trapdoor__ip_based_logic_12.c":205:35)
#loc304 = loc("CWE510_Trapdoor__ip_based_logic_12.c":267:13)
#loc305 = loc("CWE510_Trapdoor__ip_based_logic_12.c":267:32)
#loc306 = loc("CWE510_Trapdoor__ip_based_logic_12.c":268:13)
#loc307 = loc("CWE510_Trapdoor__ip_based_logic_12.c":268:35)
#loc308 = loc("CWE510_Trapdoor__ip_based_logic_12.c":269:13)
#loc309 = loc("CWE510_Trapdoor__ip_based_logic_12.c":269:35)
#loc310 = loc("CWE510_Trapdoor__ip_based_logic_12.c":196:5)
#loc311 = loc("CWE510_Trapdoor__ip_based_logic_12.c":323:5)
#loc312 = loc("CWE510_Trapdoor__ip_based_logic_12.c":196:8)
#loc313 = loc("CWE510_Trapdoor__ip_based_logic_12.c":196:33)
#loc314 = loc("CWE510_Trapdoor__ip_based_logic_12.c":197:5)
#loc315 = loc("CWE510_Trapdoor__ip_based_logic_12.c":259:5)
#loc316 = loc("CWE510_Trapdoor__ip_based_logic_12.c":261:5)
#loc317 = loc("CWE510_Trapdoor__ip_based_logic_12.c":198:9)
#loc318 = loc("CWE510_Trapdoor__ip_based_logic_12.c":258:9)
#loc319 = loc("CWE510_Trapdoor__ip_based_logic_12.c":206:13)
#loc320 = loc("CWE510_Trapdoor__ip_based_logic_12.c":243:21)
#loc321 = loc("CWE510_Trapdoor__ip_based_logic_12.c":243:20)
#loc322 = loc("CWE510_Trapdoor__ip_based_logic_12.c":215:39)
#loc323 = loc("CWE510_Trapdoor__ip_based_logic_12.c":215:48)
#loc324 = loc("CWE510_Trapdoor__ip_based_logic_12.c":215:61)
#loc325 = loc("CWE510_Trapdoor__ip_based_logic_12.c":215:32)
#loc326 = loc("CWE510_Trapdoor__ip_based_logic_12.c":215:17)
#loc327 = loc("CWE510_Trapdoor__ip_based_logic_12.c":215:72)
#loc328 = loc("CWE510_Trapdoor__ip_based_logic_12.c":216:17)
#loc329 = loc("CWE510_Trapdoor__ip_based_logic_12.c":219:17)
#loc330 = loc("CWE510_Trapdoor__ip_based_logic_12.c":216:21)
#loc331 = loc("CWE510_Trapdoor__ip_based_logic_12.c":216:37)
#loc332 = loc("CWE510_Trapdoor__ip_based_logic_12.c":217:17)
#loc333 = loc("CWE510_Trapdoor__ip_based_logic_12.c":218:21)
#loc334 = loc("CWE510_Trapdoor__ip_based_logic_12.c":220:24)
#loc335 = loc("CWE510_Trapdoor__ip_based_logic_12.c":220:25)
#loc336 = loc("CWE510_Trapdoor__ip_based_logic_12.c":220:34)
#loc337 = loc("CWE510_Trapdoor__ip_based_logic_12.c":220:37)
#loc338 = loc("CWE510_Trapdoor__ip_based_logic_12.c":220:51)
#loc339 = loc("CWE510_Trapdoor__ip_based_logic_12.c":220:17)
#loc340 = loc("CWE510_Trapdoor__ip_based_logic_12.c":220:52)
#loc341 = loc("CWE510_Trapdoor__ip_based_logic_12.c":221:38)
#loc342 = loc("CWE510_Trapdoor__ip_based_logic_12.c":221:17)
#loc343 = loc("CWE510_Trapdoor__ip_based_logic_12.c":222:43)
#loc344 = loc("CWE510_Trapdoor__ip_based_logic_12.c":222:17)
#loc345 = loc("CWE510_Trapdoor__ip_based_logic_12.c":223:42)
#loc346 = loc("CWE510_Trapdoor__ip_based_logic_12.c":223:36)
#loc347 = loc("CWE510_Trapdoor__ip_based_logic_12.c":223:17)
#loc348 = loc("CWE510_Trapdoor__ip_based_logic_12.c":223:47)
#loc349 = loc("CWE510_Trapdoor__ip_based_logic_12.c":224:17)
#loc350 = loc("CWE510_Trapdoor__ip_based_logic_12.c":227:17)
#loc351 = loc("CWE510_Trapdoor__ip_based_logic_12.c":224:26)
#loc352 = loc("CWE510_Trapdoor__ip_based_logic_12.c":224:58)
#loc353 = loc("CWE510_Trapdoor__ip_based_logic_12.c":224:59)
#loc354 = loc("CWE510_Trapdoor__ip_based_logic_12.c":224:68)
#loc355 = loc("CWE510_Trapdoor__ip_based_logic_12.c":224:82)
#loc356 = loc("CWE510_Trapdoor__ip_based_logic_12.c":224:21)
#loc357 = loc("CWE510_Trapdoor__ip_based_logic_12.c":224:88)
#loc358 = loc("CWE510_Trapdoor__ip_based_logic_12.c":225:17)
#loc359 = loc("CWE510_Trapdoor__ip_based_logic_12.c":226:21)
#loc360 = loc("CWE510_Trapdoor__ip_based_logic_12.c":228:17)
#loc361 = loc("CWE510_Trapdoor__ip_based_logic_12.c":231:17)
#loc362 = loc("CWE510_Trapdoor__ip_based_logic_12.c":228:28)
#loc363 = loc("CWE510_Trapdoor__ip_based_logic_12.c":228:42)
#loc364 = loc("CWE510_Trapdoor__ip_based_logic_12.c":228:21)
#loc365 = loc("CWE510_Trapdoor__ip_based_logic_12.c":228:48)
#loc366 = loc("CWE510_Trapdoor__ip_based_logic_12.c":229:17)
#loc367 = loc("CWE510_Trapdoor__ip_based_logic_12.c":230:21)
#loc368 = loc("CWE510_Trapdoor__ip_based_logic_12.c":232:39)
#loc369 = loc("CWE510_Trapdoor__ip_based_logic_12.c":232:53)
#loc370 = loc("CWE510_Trapdoor__ip_based_logic_12.c":232:59)
#loc371 = loc("CWE510_Trapdoor__ip_based_logic_12.c":232:32)
#loc372 = loc("CWE510_Trapdoor__ip_based_logic_12.c":232:17)
#loc373 = loc("CWE510_Trapdoor__ip_based_logic_12.c":232:63)
#loc374 = loc("CWE510_Trapdoor__ip_based_logic_12.c":233:17)
#loc375 = loc("CWE510_Trapdoor__ip_based_logic_12.c":236:17)
#loc376 = loc("CWE510_Trapdoor__ip_based_logic_12.c":233:21)
#loc377 = loc("CWE510_Trapdoor__ip_based_logic_12.c":233:37)
#loc378 = loc("CWE510_Trapdoor__ip_based_logic_12.c":234:17)
#loc379 = loc("CWE510_Trapdoor__ip_based_logic_12.c":235:21)
#loc380 = loc("CWE510_Trapdoor__ip_based_logic_12.c":238:17)
#loc381 = loc("CWE510_Trapdoor__ip_based_logic_12.c":241:17)
#loc382 = loc("CWE510_Trapdoor__ip_based_logic_12.c":238:26)
#loc383 = loc("CWE510_Trapdoor__ip_based_logic_12.c":238:40)
#loc384 = loc("CWE510_Trapdoor__ip_based_logic_12.c":238:57)
#loc385 = loc("CWE510_Trapdoor__ip_based_logic_12.c":238:79)
#loc386 = loc("CWE510_Trapdoor__ip_based_logic_12.c":238:82)
#loc387 = loc("CWE510_Trapdoor__ip_based_logic_12.c":238:21)
#loc388 = loc("CWE510_Trapdoor__ip_based_logic_12.c":238:88)
#loc389 = loc("CWE510_Trapdoor__ip_based_logic_12.c":239:17)
#loc390 = loc("CWE510_Trapdoor__ip_based_logic_12.c":240:31)
#loc391 = loc("CWE510_Trapdoor__ip_based_logic_12.c":240:21)
#loc392 = loc("CWE510_Trapdoor__ip_based_logic_12.c":244:13)
#loc393 = loc("CWE510_Trapdoor__ip_based_logic_12.c":247:13)
#loc394 = loc("CWE510_Trapdoor__ip_based_logic_12.c":244:17)
#loc395 = loc("CWE510_Trapdoor__ip_based_logic_12.c":244:33)
#loc396 = loc("CWE510_Trapdoor__ip_based_logic_12.c":245:13)
#loc397 = loc("CWE510_Trapdoor__ip_based_logic_12.c":246:30)
#loc398 = loc("CWE510_Trapdoor__ip_based_logic_12.c":246:17)
#loc399 = loc("CWE510_Trapdoor__ip_based_logic_12.c":248:13)
#loc400 = loc("CWE510_Trapdoor__ip_based_logic_12.c":251:13)
#loc401 = loc("CWE510_Trapdoor__ip_based_logic_12.c":248:17)
#loc402 = loc("CWE510_Trapdoor__ip_based_logic_12.c":248:33)
#loc403 = loc("CWE510_Trapdoor__ip_based_logic_12.c":249:13)
#loc404 = loc("CWE510_Trapdoor__ip_based_logic_12.c":250:30)
#loc405 = loc("CWE510_Trapdoor__ip_based_logic_12.c":250:17)
#loc406 = loc("CWE510_Trapdoor__ip_based_logic_12.c":262:9)
#loc407 = loc("CWE510_Trapdoor__ip_based_logic_12.c":322:9)
#loc408 = loc("CWE510_Trapdoor__ip_based_logic_12.c":270:13)
#loc409 = loc("CWE510_Trapdoor__ip_based_logic_12.c":307:21)
#loc410 = loc("CWE510_Trapdoor__ip_based_logic_12.c":307:20)
#loc411 = loc("CWE510_Trapdoor__ip_based_logic_12.c":279:39)
#loc412 = loc("CWE510_Trapdoor__ip_based_logic_12.c":279:48)
#loc413 = loc("CWE510_Trapdoor__ip_based_logic_12.c":279:61)
#loc414 = loc("CWE510_Trapdoor__ip_based_logic_12.c":279:32)
#loc415 = loc("CWE510_Trapdoor__ip_based_logic_12.c":279:17)
#loc416 = loc("CWE510_Trapdoor__ip_based_logic_12.c":279:72)
#loc417 = loc("CWE510_Trapdoor__ip_based_logic_12.c":280:17)
#loc418 = loc("CWE510_Trapdoor__ip_based_logic_12.c":283:17)
#loc419 = loc("CWE510_Trapdoor__ip_based_logic_12.c":280:21)
#loc420 = loc("CWE510_Trapdoor__ip_based_logic_12.c":280:37)
#loc421 = loc("CWE510_Trapdoor__ip_based_logic_12.c":281:17)
#loc422 = loc("CWE510_Trapdoor__ip_based_logic_12.c":282:21)
#loc423 = loc("CWE510_Trapdoor__ip_based_logic_12.c":284:24)
#loc424 = loc("CWE510_Trapdoor__ip_based_logic_12.c":284:25)
#loc425 = loc("CWE510_Trapdoor__ip_based_logic_12.c":284:34)
#loc426 = loc("CWE510_Trapdoor__ip_based_logic_12.c":284:37)
#loc427 = loc("CWE510_Trapdoor__ip_based_logic_12.c":284:51)
#loc428 = loc("CWE510_Trapdoor__ip_based_logic_12.c":284:17)
#loc429 = loc("CWE510_Trapdoor__ip_based_logic_12.c":284:52)
#loc430 = loc("CWE510_Trapdoor__ip_based_logic_12.c":285:38)
#loc431 = loc("CWE510_Trapdoor__ip_based_logic_12.c":285:17)
#loc432 = loc("CWE510_Trapdoor__ip_based_logic_12.c":286:43)
#loc433 = loc("CWE510_Trapdoor__ip_based_logic_12.c":286:17)
#loc434 = loc("CWE510_Trapdoor__ip_based_logic_12.c":287:42)
#loc435 = loc("CWE510_Trapdoor__ip_based_logic_12.c":287:36)
#loc436 = loc("CWE510_Trapdoor__ip_based_logic_12.c":287:17)
#loc437 = loc("CWE510_Trapdoor__ip_based_logic_12.c":287:47)
#loc438 = loc("CWE510_Trapdoor__ip_based_logic_12.c":288:17)
#loc439 = loc("CWE510_Trapdoor__ip_based_logic_12.c":291:17)
#loc440 = loc("CWE510_Trapdoor__ip_based_logic_12.c":288:26)
#loc441 = loc("CWE510_Trapdoor__ip_based_logic_12.c":288:58)
#loc442 = loc("CWE510_Trapdoor__ip_based_logic_12.c":288:59)
#loc443 = loc("CWE510_Trapdoor__ip_based_logic_12.c":288:68)
#loc444 = loc("CWE510_Trapdoor__ip_based_logic_12.c":288:82)
#loc445 = loc("CWE510_Trapdoor__ip_based_logic_12.c":288:21)
#loc446 = loc("CWE510_Trapdoor__ip_based_logic_12.c":288:88)
#loc447 = loc("CWE510_Trapdoor__ip_based_logic_12.c":289:17)
#loc448 = loc("CWE510_Trapdoor__ip_based_logic_12.c":290:21)
#loc449 = loc("CWE510_Trapdoor__ip_based_logic_12.c":292:17)
#loc450 = loc("CWE510_Trapdoor__ip_based_logic_12.c":295:17)
#loc451 = loc("CWE510_Trapdoor__ip_based_logic_12.c":292:28)
#loc452 = loc("CWE510_Trapdoor__ip_based_logic_12.c":292:42)
#loc453 = loc("CWE510_Trapdoor__ip_based_logic_12.c":292:21)
#loc454 = loc("CWE510_Trapdoor__ip_based_logic_12.c":292:48)
#loc455 = loc("CWE510_Trapdoor__ip_based_logic_12.c":293:17)
#loc456 = loc("CWE510_Trapdoor__ip_based_logic_12.c":294:21)
#loc457 = loc("CWE510_Trapdoor__ip_based_logic_12.c":296:39)
#loc458 = loc("CWE510_Trapdoor__ip_based_logic_12.c":296:53)
#loc459 = loc("CWE510_Trapdoor__ip_based_logic_12.c":296:59)
#loc460 = loc("CWE510_Trapdoor__ip_based_logic_12.c":296:32)
#loc461 = loc("CWE510_Trapdoor__ip_based_logic_12.c":296:17)
#loc462 = loc("CWE510_Trapdoor__ip_based_logic_12.c":296:63)
#loc463 = loc("CWE510_Trapdoor__ip_based_logic_12.c":297:17)
#loc464 = loc("CWE510_Trapdoor__ip_based_logic_12.c":300:17)
#loc465 = loc("CWE510_Trapdoor__ip_based_logic_12.c":297:21)
#loc466 = loc("CWE510_Trapdoor__ip_based_logic_12.c":297:37)
#loc467 = loc("CWE510_Trapdoor__ip_based_logic_12.c":298:17)
#loc468 = loc("CWE510_Trapdoor__ip_based_logic_12.c":299:21)
#loc469 = loc("CWE510_Trapdoor__ip_based_logic_12.c":302:17)
#loc470 = loc("CWE510_Trapdoor__ip_based_logic_12.c":305:17)
#loc471 = loc("CWE510_Trapdoor__ip_based_logic_12.c":302:26)
#loc472 = loc("CWE510_Trapdoor__ip_based_logic_12.c":302:40)
#loc473 = loc("CWE510_Trapdoor__ip_based_logic_12.c":302:57)
#loc474 = loc("CWE510_Trapdoor__ip_based_logic_12.c":302:79)
#loc475 = loc("CWE510_Trapdoor__ip_based_logic_12.c":302:82)
#loc476 = loc("CWE510_Trapdoor__ip_based_logic_12.c":302:21)
#loc477 = loc("CWE510_Trapdoor__ip_based_logic_12.c":302:88)
#loc478 = loc("CWE510_Trapdoor__ip_based_logic_12.c":303:17)
#loc479 = loc("CWE510_Trapdoor__ip_based_logic_12.c":304:31)
#loc480 = loc("CWE510_Trapdoor__ip_based_logic_12.c":304:21)
#loc481 = loc("CWE510_Trapdoor__ip_based_logic_12.c":308:13)
#loc482 = loc("CWE510_Trapdoor__ip_based_logic_12.c":311:13)
#loc483 = loc("CWE510_Trapdoor__ip_based_logic_12.c":308:17)
#loc484 = loc("CWE510_Trapdoor__ip_based_logic_12.c":308:33)
#loc485 = loc("CWE510_Trapdoor__ip_based_logic_12.c":309:13)
#loc486 = loc("CWE510_Trapdoor__ip_based_logic_12.c":310:30)
#loc487 = loc("CWE510_Trapdoor__ip_based_logic_12.c":310:17)
#loc488 = loc("CWE510_Trapdoor__ip_based_logic_12.c":312:13)
#loc489 = loc("CWE510_Trapdoor__ip_based_logic_12.c":315:13)
#loc490 = loc("CWE510_Trapdoor__ip_based_logic_12.c":312:17)
#loc491 = loc("CWE510_Trapdoor__ip_based_logic_12.c":312:33)
#loc492 = loc("CWE510_Trapdoor__ip_based_logic_12.c":313:13)
#loc493 = loc("CWE510_Trapdoor__ip_based_logic_12.c":314:30)
#loc494 = loc("CWE510_Trapdoor__ip_based_logic_12.c":314:17)
#loc495 = loc(fused[#loc1, #loc2])
#loc496 = loc(fused[#loc3, #loc4])
#loc497 = loc(fused[#loc5, #loc6])
#loc498 = loc(fused[#loc7, #loc8])
#loc499 = loc(fused[#loc9, #loc10])
#loc500 = loc(fused[#loc11, #loc12])
#loc501 = loc(fused[#loc13, #loc14])
#loc502 = loc(fused[#loc15, #loc16])
#loc503 = loc(fused[#loc18, #loc19])
#loc504 = loc(fused[#loc20, #loc21])
#loc505 = loc(fused[#loc24, #loc25])
#loc506 = loc(fused[#loc27, #loc28])
#loc507 = loc(fused[#loc29, #loc30])
#loc508 = loc(fused[#loc31, #loc32])
#loc509 = loc(fused[#loc31, #loc33])
#loc510 = loc(fused[#loc34, #loc35])
#loc511 = loc(fused[#loc36, #loc37])
#loc512 = loc(fused[#loc38, #loc39])
#loc513 = loc(fused[#loc40, #loc41])
#loc514 = loc(fused[#loc42, #loc43])
#loc515 = loc(fused[#loc44, #loc45])
#loc516 = loc(fused[#loc46, #loc47])
#loc517 = loc(fused[#loc48, #loc49])
#loc518 = loc(fused[#loc50, #loc51, #loc52, #loc47])
#loc519 = loc(fused[#loc53, #loc54])
#loc520 = loc(fused[#loc55, #loc35])
#loc521 = loc(fused[#loc56, #loc57])
#loc522 = loc(fused[#loc63, #loc64])
#loc523 = loc(fused[#loc65, #loc66])
#loc524 = loc(fused[#loc67, #loc68])
#loc525 = loc(fused[#loc69, #loc66])
#loc526 = loc(fused[#loc71, #loc72])
#loc527 = loc(fused[#loc74, #loc75])
#loc528 = loc(fused[#loc76, #loc77])
#loc529 = loc(fused[#loc80, #loc78])
#loc530 = loc(fused[#loc84, #loc81])
#loc531 = loc(fused[#loc88, #loc89])
#loc532 = loc(fused[#loc90, #loc91])
#loc533 = loc(fused[#loc93, #loc94])
#loc534 = loc(fused[#loc95, #loc96])
#loc535 = loc(fused[#loc97, #loc98])
#loc536 = loc(fused[#loc99, #loc91])
#loc537 = loc(fused[#loc101, #loc102])
#loc538 = loc(fused[#loc105, #loc106])
#loc539 = loc(fused[#loc107, #loc102])
#loc540 = loc(fused[#loc113, #loc114])
#loc541 = loc(fused[#loc115, #loc116])
#loc542 = loc(fused[#loc117, #loc118])
#loc543 = loc(fused[#loc119, #loc116])
#loc544 = loc(fused[#loc121, #loc122])
#loc545 = loc(fused[#loc124, #loc125])
#loc546 = loc(fused[#loc126, #loc127])
#loc547 = loc(fused[#loc128, #loc129])
#loc548 = loc(fused[#loc131, #loc122])
#loc549 = loc(fused[#loc133, #loc134])
#loc550 = loc(fused[#loc135, #loc137])
#loc551 = loc(fused[#loc138, #loc139, #loc140, #loc134])
#loc552 = loc(fused[#loc141, #loc142])
#loc553 = loc(fused[#loc144, #loc145])
#loc554 = loc(fused[#loc147, #loc148])
#loc555 = loc(fused[#loc149, #loc142])
#loc556 = loc(fused[#loc151, #loc152])
#loc557 = loc(fused[#loc154, #loc155])
#loc558 = loc(fused[#loc157, #loc158])
#loc559 = loc(fused[#loc159, #loc152])
#loc560 = loc(fused[#loc161, #loc162])
#loc561 = loc(fused[#loc163, #loc164])
#loc562 = loc(fused[#loc165, #loc162])
#loc563 = loc(fused[#loc168, #loc169])
#loc564 = loc(fused[#loc170, #loc171])
#loc565 = loc(fused[#loc172, #loc169])
#loc566 = loc(fused[#loc175, #loc176])
#loc567 = loc(fused[#loc177, #loc178])
#loc568 = loc(fused[#loc184, #loc185])
#loc569 = loc(fused[#loc186, #loc187])
#loc570 = loc(fused[#loc188, #loc189])
#loc571 = loc(fused[#loc190, #loc187])
#loc572 = loc(fused[#loc192, #loc193])
#loc573 = loc(fused[#loc195, #loc196])
#loc574 = loc(fused[#loc197, #loc198])
#loc575 = loc(fused[#loc200, #loc199])
#loc576 = loc(fused[#loc202, #loc201])
#loc577 = loc(fused[#loc205, #loc206])
#loc578 = loc(fused[#loc207, #loc208])
#loc579 = loc(fused[#loc210, #loc211])
#loc580 = loc(fused[#loc212, #loc213])
#loc581 = loc(fused[#loc214, #loc215])
#loc582 = loc(fused[#loc216, #loc208])
#loc583 = loc(fused[#loc218, #loc219])
#loc584 = loc(fused[#loc222, #loc223])
#loc585 = loc(fused[#loc224, #loc219])
#loc586 = loc(fused[#loc230, #loc231])
#loc587 = loc(fused[#loc232, #loc233])
#loc588 = loc(fused[#loc234, #loc235])
#loc589 = loc(fused[#loc236, #loc233])
#loc590 = loc(fused[#loc238, #loc239])
#loc591 = loc(fused[#loc242, #loc243])
#loc592 = loc(fused[#loc245, #loc246])
#loc593 = loc(fused[#loc247, #loc239])
#loc594 = loc(fused[#loc250, #loc251])
#loc595 = loc(fused[#loc252, #loc253])
#loc596 = loc(fused[#loc254, #loc251])
#loc597 = loc(fused[#loc257, #loc258])
#loc598 = loc(fused[#loc259, #loc260])
#loc599 = loc(fused[#loc261, #loc258])
#loc600 = loc(fused[#loc264, #loc265])
#loc601 = loc(fused[#loc266, #loc267])
#loc602 = loc(fused[#loc268, #loc269])
#loc603 = loc(fused[#loc270, #loc271])
#loc604 = loc(fused[#loc276, #loc277])
#loc607 = loc(fused[#loc287, #loc288])
#loc608 = loc(fused[#loc291, #loc292])
#loc609 = loc(fused[#loc295, #loc294])
#loc610 = loc(fused[#loc296, #loc297])
#loc611 = loc(fused[#loc298, #loc299])
#loc612 = loc(fused[#loc300, #loc301])
#loc613 = loc(fused[#loc302, #loc303])
#loc614 = loc(fused[#loc304, #loc305])
#loc615 = loc(fused[#loc306, #loc307])
#loc616 = loc(fused[#loc308, #loc309])
#loc617 = loc(fused[#loc310, #loc311])
#loc618 = loc(fused[#loc312, #loc313])
#loc619 = loc(fused[#loc314, #loc315, #loc316, #loc311])
#loc620 = loc(fused[#loc317, #loc318])
#loc621 = loc(fused[#loc319, #loc320])
#loc622 = loc(fused[#loc326, #loc327])
#loc623 = loc(fused[#loc328, #loc329])
#loc624 = loc(fused[#loc330, #loc331])
#loc625 = loc(fused[#loc332, #loc329])
#loc626 = loc(fused[#loc334, #loc335])
#loc627 = loc(fused[#loc337, #loc338])
#loc628 = loc(fused[#loc339, #loc340])
#loc629 = loc(fused[#loc342, #loc341])
#loc630 = loc(fused[#loc344, #loc343])
#loc631 = loc(fused[#loc347, #loc348])
#loc632 = loc(fused[#loc349, #loc350])
#loc633 = loc(fused[#loc352, #loc353])
#loc634 = loc(fused[#loc354, #loc355])
#loc635 = loc(fused[#loc356, #loc357])
#loc636 = loc(fused[#loc358, #loc350])
#loc637 = loc(fused[#loc360, #loc361])
#loc638 = loc(fused[#loc364, #loc365])
#loc639 = loc(fused[#loc366, #loc361])
#loc640 = loc(fused[#loc372, #loc373])
#loc641 = loc(fused[#loc374, #loc375])
#loc642 = loc(fused[#loc376, #loc377])
#loc643 = loc(fused[#loc378, #loc375])
#loc644 = loc(fused[#loc380, #loc381])
#loc645 = loc(fused[#loc384, #loc385])
#loc646 = loc(fused[#loc387, #loc388])
#loc647 = loc(fused[#loc389, #loc381])
#loc648 = loc(fused[#loc392, #loc393])
#loc649 = loc(fused[#loc394, #loc395])
#loc650 = loc(fused[#loc396, #loc393])
#loc651 = loc(fused[#loc399, #loc400])
#loc652 = loc(fused[#loc401, #loc402])
#loc653 = loc(fused[#loc403, #loc400])
#loc654 = loc(fused[#loc406, #loc407])
#loc655 = loc(fused[#loc408, #loc409])
#loc656 = loc(fused[#loc415, #loc416])
#loc657 = loc(fused[#loc417, #loc418])
#loc658 = loc(fused[#loc419, #loc420])
#loc659 = loc(fused[#loc421, #loc418])
#loc660 = loc(fused[#loc423, #loc424])
#loc661 = loc(fused[#loc426, #loc427])
#loc662 = loc(fused[#loc428, #loc429])
#loc663 = loc(fused[#loc431, #loc430])
#loc664 = loc(fused[#loc433, #loc432])
#loc665 = loc(fused[#loc436, #loc437])
#loc666 = loc(fused[#loc438, #loc439])
#loc667 = loc(fused[#loc441, #loc442])
#loc668 = loc(fused[#loc443, #loc444])
#loc669 = loc(fused[#loc445, #loc446])
#loc670 = loc(fused[#loc447, #loc439])
#loc671 = loc(fused[#loc449, #loc450])
#loc672 = loc(fused[#loc453, #loc454])
#loc673 = loc(fused[#loc455, #loc450])
#loc674 = loc(fused[#loc461, #loc462])
#loc675 = loc(fused[#loc463, #loc464])
#loc676 = loc(fused[#loc465, #loc466])
#loc677 = loc(fused[#loc467, #loc464])
#loc678 = loc(fused[#loc469, #loc470])
#loc679 = loc(fused[#loc473, #loc474])
#loc680 = loc(fused[#loc476, #loc477])
#loc681 = loc(fused[#loc478, #loc470])
#loc682 = loc(fused[#loc481, #loc482])
#loc683 = loc(fused[#loc483, #loc484])
#loc684 = loc(fused[#loc485, #loc482])
#loc685 = loc(fused[#loc488, #loc489])
#loc686 = loc(fused[#loc490, #loc491])
#loc687 = loc(fused[#loc492, #loc489])
