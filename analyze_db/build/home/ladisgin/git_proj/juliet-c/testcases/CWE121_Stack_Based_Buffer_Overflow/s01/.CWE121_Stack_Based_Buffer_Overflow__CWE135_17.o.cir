!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc151)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc152)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc153)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc155)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc156)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc157)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc158)
    %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc159)
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc19)
    cir.store %5, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc160)
    cir.br ^bb1 loc(#loc161)
  ^bb1:  // pred: ^bb0
    %6 = cir.const #cir.int<0> : !s32i loc(#loc23)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc162)
    cir.br ^bb2 loc(#loc161)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc163)
    cir.brcond %9 ^bb3, ^bb7 loc(#loc27)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc164)
  ^bb4:  // pred: ^bb3
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
    cir.store %12, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc165)
    cir.br ^bb5 loc(#loc22)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc22)
  ^bb6:  // pred: ^bb5
    %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    %14 = cir.unary(inc, %13) : !s32i, !s32i loc(#loc31)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    cir.br ^bb2 loc(#loc161)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc22)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc167)
  ^bb9:  // pred: ^bb8
    %15 = cir.const #cir.int<0> : !s32i loc(#loc34)
    cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc168)
    cir.br ^bb10 loc(#loc167)
  ^bb10:  // 2 preds: ^bb9, ^bb16
    %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc36)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc169)
    cir.brcond %18 ^bb11, ^bb17 loc(#loc38)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc170)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc171)
  ^bb13:  // pred: ^bb12
    %19 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc42)
    %20 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc43)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc43)
    %22 = cir.call @strlen(%21) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc42)
    cir.store %22, %0 : !u64i, !cir.ptr<!u64i> loc(#loc155)
    %23 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc13)
    %24 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc13)
    %26 = cir.binop(add, %23, %25) : !u64i loc(#loc13)
    %27 = cir.const #cir.int<4> : !u64i loc(#loc13)
    %28 = cir.binop(mul, %26, %27) : !u64i loc(#loc13)
    %29 = cir.alloca !u8i, !cir.ptr<!u8i>, %28 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc13)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc13)
    cir.store %30, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc156)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc44)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc44)
    %33 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc45)
    %34 = cir.cast(bitcast, %33 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc45)
    %35 = cir.call @wcscpy(%32, %34) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc46)
    %36 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc47)
    %37 = cir.cast(bitcast, %36 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    cir.br ^bb14 loc(#loc41)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc33)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc33)
  ^bb16:  // pred: ^bb15
    %38 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    %39 = cir.unary(inc, %38) : !s32i, !s32i loc(#loc50)
    cir.store %39, %3 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    cir.br ^bb10 loc(#loc167)
  ^bb17:  // pred: ^bb10
    cir.br ^bb18 loc(#loc33)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc9)
  } loc(#loc154)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc174)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc53)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc55)
    cir.return loc(#loc52)
  } loc(#loc173)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc176)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc177)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc179)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc180)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc181)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc182)
    %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc183)
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc72)
    cir.store %5, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc184)
    cir.br ^bb1 loc(#loc185)
  ^bb1:  // pred: ^bb0
    %6 = cir.const #cir.int<0> : !s32i loc(#loc76)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    cir.br ^bb2 loc(#loc185)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc187)
    cir.brcond %9 ^bb3, ^bb7 loc(#loc80)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc188)
  ^bb4:  // pred: ^bb3
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc82)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc82)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc82)
    cir.store %12, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc189)
    cir.br ^bb5 loc(#loc75)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc75)
  ^bb6:  // pred: ^bb5
    %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc84)
    %14 = cir.unary(inc, %13) : !s32i, !s32i loc(#loc85)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    cir.br ^bb2 loc(#loc185)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc75)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc191)
  ^bb9:  // pred: ^bb8
    %15 = cir.const #cir.int<0> : !s32i loc(#loc88)
    cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    cir.br ^bb10 loc(#loc191)
  ^bb10:  // 2 preds: ^bb9, ^bb16
    %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc90)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc193)
    cir.brcond %18 ^bb11, ^bb17 loc(#loc92)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc194)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc195)
  ^bb13:  // pred: ^bb12
    %19 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc96)
    %20 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc97)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc97)
    %22 = cir.call @wcslen(%21) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc96)
    cir.store %22, %0 : !u64i, !cir.ptr<!u64i> loc(#loc179)
    %23 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc66)
    %24 = cir.const #cir.int<1> : !s32i loc(#loc66)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc66)
    %26 = cir.binop(add, %23, %25) : !u64i loc(#loc66)
    %27 = cir.const #cir.int<4> : !u64i loc(#loc66)
    %28 = cir.binop(mul, %26, %27) : !u64i loc(#loc66)
    %29 = cir.alloca !u8i, !cir.ptr<!u8i>, %28 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc66)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc66)
    cir.store %30, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc180)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc98)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc98)
    %33 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc99)
    %34 = cir.cast(bitcast, %33 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc99)
    %35 = cir.call @wcscpy(%32, %34) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc100)
    %36 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc101)
    %37 = cir.cast(bitcast, %36 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc101)
    cir.call @printWLine(%37) : (!cir.ptr<!s32i>) -> () loc(#loc102)
    cir.br ^bb14 loc(#loc95)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc87)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc87)
  ^bb16:  // pred: ^bb15
    %38 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc103)
    %39 = cir.unary(inc, %38) : !s32i, !s32i loc(#loc104)
    cir.store %39, %3 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    cir.br ^bb10 loc(#loc191)
  ^bb17:  // pred: ^bb10
    cir.br ^bb18 loc(#loc87)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc62)
  } loc(#loc178)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc105)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc197)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc199)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc200)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc201)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc202)
    %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc203)
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc119)
    cir.store %5, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc204)
    cir.br ^bb1 loc(#loc205)
  ^bb1:  // pred: ^bb0
    %6 = cir.const #cir.int<0> : !s32i loc(#loc123)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    cir.br ^bb2 loc(#loc205)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc125)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc126)
    %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc207)
    cir.brcond %9 ^bb3, ^bb7 loc(#loc127)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc208)
  ^bb4:  // pred: ^bb3
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc105)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc105)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc105)
    cir.store %12, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc209)
    cir.br ^bb5 loc(#loc122)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc122)
  ^bb6:  // pred: ^bb5
    %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc130)
    %14 = cir.unary(inc, %13) : !s32i, !s32i loc(#loc131)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    cir.br ^bb2 loc(#loc205)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc122)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc211)
  ^bb9:  // pred: ^bb8
    %15 = cir.const #cir.int<0> : !s32i loc(#loc134)
    cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    cir.br ^bb10 loc(#loc211)
  ^bb10:  // 2 preds: ^bb9, ^bb16
    %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc136)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc137)
    %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc213)
    cir.brcond %18 ^bb11, ^bb17 loc(#loc138)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc214)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc215)
  ^bb13:  // pred: ^bb12
    %19 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc142)
    %20 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc143)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc143)
    %22 = cir.call @strlen(%21) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc142)
    cir.store %22, %0 : !u64i, !cir.ptr<!u64i> loc(#loc199)
    %23 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc113)
    %24 = cir.const #cir.int<1> : !s32i loc(#loc113)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc113)
    %26 = cir.binop(add, %23, %25) : !u64i loc(#loc113)
    %27 = cir.const #cir.int<1> : !s32i loc(#loc113)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc113)
    %29 = cir.binop(mul, %26, %28) : !u64i loc(#loc113)
    %30 = cir.alloca !u8i, !cir.ptr<!u8i>, %29 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc113)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc113)
    cir.store %31, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc200)
    %32 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc144)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc145)
    %34 = cir.cast(bitcast, %33 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc145)
    %35 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc146)
    %36 = cir.cast(bitcast, %35 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc146)
    %37 = cir.call @strcpy(%34, %36) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc144)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc147)
    %39 = cir.cast(bitcast, %38 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc147)
    cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc148)
    cir.br ^bb14 loc(#loc141)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc133)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc133)
  ^bb16:  // pred: ^bb15
    %40 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    %41 = cir.unary(inc, %40) : !s32i, !s32i loc(#loc150)
    cir.store %41, %3 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    cir.br ^bb10 loc(#loc211)
  ^bb17:  // pred: ^bb10
    cir.br ^bb18 loc(#loc133)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc109)
  } loc(#loc198)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":35:24)
#loc2 = loc("/usr/include/string.h":407:1)
#loc3 = loc("/usr/include/string.h":408:33)
#loc4 = loc("/usr/include/wchar.h":98:1)
#loc5 = loc("/usr/include/wchar.h":100:14)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":27:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":47:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":41:13)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":41:49)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":42:13)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":42:35)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":29:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":29:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":29:11)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":30:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":30:12)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":31:12)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":31:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":32:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":36:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":32:13)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":32:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":32:16)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":32:20)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":32:18)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":33:5)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":35:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":32:24)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":32:23)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":37:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":46:5)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":37:13)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":37:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":37:16)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":37:20)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":37:18)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":38:5)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":39:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":45:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":41:30)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":41:45)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":43:26)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":43:32)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":43:19)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":44:31)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":44:13)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":37:24)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":37:23)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":99:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":103:1)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":101:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":101:13)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":102:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":102:13)
#loc57 = loc("/usr/include/wchar.h":247:1)
#loc58 = loc("/usr/include/wchar.h":247:51)
#loc59 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc60 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":54:1)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":74:1)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":68:13)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":68:52)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":69:13)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":69:35)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":56:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":56:9)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":56:11)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":57:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":57:12)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":58:12)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":58:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":59:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":63:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":59:13)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":59:9)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":59:16)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":59:20)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":59:18)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":60:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":62:24)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":62:9)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":59:24)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":59:23)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":64:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":73:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":64:13)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":64:9)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":64:16)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":64:20)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":64:18)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":65:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":66:9)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":72:9)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":68:30)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":68:48)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":70:26)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":70:32)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":70:19)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":71:35)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":71:13)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":64:24)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":64:23)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":85:24)
#loc106 = loc("/usr/include/string.h":141:1)
#loc107 = loc("/usr/include/string.h":142:14)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":77:1)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":97:1)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":91:13)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":91:49)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":92:13)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":92:35)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":79:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":79:9)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":79:11)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":80:5)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":80:12)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":81:12)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":81:5)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":82:5)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":86:5)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":82:13)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":82:9)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":82:16)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":82:20)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":82:18)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":83:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":85:9)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":82:24)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":82:23)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":87:5)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":96:5)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":87:13)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":87:9)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":87:16)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":87:20)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":87:18)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":88:5)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":89:9)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":95:9)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":91:30)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":91:45)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":93:19)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":93:26)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":93:32)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":94:31)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":94:13)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":87:24)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c":87:23)
#loc151 = loc(fused[#loc2, #loc3])
#loc152 = loc(fused[#loc4, #loc5])
#loc153 = loc(fused[#loc6, #loc7])
#loc154 = loc(fused[#loc8, #loc9])
#loc155 = loc(fused[#loc10, #loc11])
#loc156 = loc(fused[#loc12, #loc13])
#loc157 = loc(fused[#loc14, #loc15])
#loc158 = loc(fused[#loc14, #loc16])
#loc159 = loc(fused[#loc17, #loc18])
#loc160 = loc(fused[#loc20, #loc19])
#loc161 = loc(fused[#loc21, #loc22])
#loc162 = loc(fused[#loc24, #loc23])
#loc163 = loc(fused[#loc25, #loc26])
#loc164 = loc(fused[#loc28, #loc22])
#loc165 = loc(fused[#loc29, #loc1])
#loc166 = loc(fused[#loc31, #loc30])
#loc167 = loc(fused[#loc32, #loc33])
#loc168 = loc(fused[#loc35, #loc34])
#loc169 = loc(fused[#loc36, #loc37])
#loc170 = loc(fused[#loc39, #loc33])
#loc171 = loc(fused[#loc40, #loc41])
#loc172 = loc(fused[#loc50, #loc49])
#loc173 = loc(fused[#loc51, #loc52])
#loc174 = loc(fused[#loc53, #loc54])
#loc175 = loc(fused[#loc55, #loc56])
#loc176 = loc(fused[#loc57, #loc58])
#loc177 = loc(fused[#loc59, #loc60])
#loc178 = loc(fused[#loc61, #loc62])
#loc179 = loc(fused[#loc63, #loc64])
#loc180 = loc(fused[#loc65, #loc66])
#loc181 = loc(fused[#loc67, #loc68])
#loc182 = loc(fused[#loc67, #loc69])
#loc183 = loc(fused[#loc70, #loc71])
#loc184 = loc(fused[#loc73, #loc72])
#loc185 = loc(fused[#loc74, #loc75])
#loc186 = loc(fused[#loc77, #loc76])
#loc187 = loc(fused[#loc78, #loc79])
#loc188 = loc(fused[#loc81, #loc75])
#loc189 = loc(fused[#loc83, #loc82])
#loc190 = loc(fused[#loc85, #loc84])
#loc191 = loc(fused[#loc86, #loc87])
#loc192 = loc(fused[#loc89, #loc88])
#loc193 = loc(fused[#loc90, #loc91])
#loc194 = loc(fused[#loc93, #loc87])
#loc195 = loc(fused[#loc94, #loc95])
#loc196 = loc(fused[#loc104, #loc103])
#loc197 = loc(fused[#loc106, #loc107])
#loc198 = loc(fused[#loc108, #loc109])
#loc199 = loc(fused[#loc110, #loc111])
#loc200 = loc(fused[#loc112, #loc113])
#loc201 = loc(fused[#loc114, #loc115])
#loc202 = loc(fused[#loc114, #loc116])
#loc203 = loc(fused[#loc117, #loc118])
#loc204 = loc(fused[#loc120, #loc119])
#loc205 = loc(fused[#loc121, #loc122])
#loc206 = loc(fused[#loc124, #loc123])
#loc207 = loc(fused[#loc125, #loc126])
#loc208 = loc(fused[#loc128, #loc122])
#loc209 = loc(fused[#loc129, #loc105])
#loc210 = loc(fused[#loc131, #loc130])
#loc211 = loc(fused[#loc132, #loc133])
#loc212 = loc(fused[#loc135, #loc134])
#loc213 = loc(fused[#loc136, #loc137])
#loc214 = loc(fused[#loc139, #loc133])
#loc215 = loc(fused[#loc140, #loc141])
#loc216 = loc(fused[#loc150, #loc149])
