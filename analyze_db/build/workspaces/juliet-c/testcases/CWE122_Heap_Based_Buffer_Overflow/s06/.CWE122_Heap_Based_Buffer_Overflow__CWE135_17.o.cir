!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc284)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc285)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc286)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc287)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc288)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc289)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc290)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc291)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc293)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc294)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc295)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc24)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc296)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc28)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc298)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc31)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc299)
        cir.condition(%7) loc(#loc32)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc302)
            %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc38)
            %7 = cir.const #cir.int<50> : !s32i loc(#loc39)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc39)
            %9 = cir.const #cir.int<4> : !u64i loc(#loc303)
            %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc304)
            %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc38)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc305)
            cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc302)
            cir.scope {
              %28 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
              %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc45)
              %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc45)
              %31 = cir.cmp(eq, %28, %30) : !cir.ptr<!s32i>, !cir.bool loc(#loc307)
              cir.if %31 {
                %32 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc47)
                %33 = cir.const #cir.int<1> : !s32i loc(#loc48)
                %34 = cir.unary(minus, %33) nsw : !s32i, !s32i loc(#loc49)
                cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc47)
              } loc(#loc308)
            } loc(#loc306)
            %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
            %14 = cir.const #cir.int<65> : !s32i loc(#loc51)
            %15 = cir.const #cir.int<50> : !s32i loc(#loc52)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc53)
            %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc52)
            %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc52)
            %19 = cir.call @wmemset(%13, %14, %18) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc54)
            %20 = cir.const #cir.int<0> : !s32i loc(#loc55)
            %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc56)
            %22 = cir.const #cir.int<50> : !s32i loc(#loc57)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc58)
            %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc57)
            %25 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc59)
            cir.store %20, %25 : !s32i, !cir.ptr<!s32i> loc(#loc309)
            %26 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
            %27 = cir.cast(bitcast, %26 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc60)
            cir.store %27, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc310)
          } loc(#loc301)
        } loc(#loc300)
        cir.yield loc(#loc27)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc63)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc311)
        cir.yield loc(#loc297)
      } loc(#loc297)
    } loc(#loc297)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc66)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc313)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc68)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc69)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc314)
        cir.condition(%7) loc(#loc70)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc317)
            %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc318)
            %7 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc78)
            %8 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc79)
            %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc79)
            %10 = cir.call @strlen(%9) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc78)
            cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc317)
            %11 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc80)
            %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc81)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc82)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc82)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc319)
            %16 = cir.const #cir.int<4> : !u64i loc(#loc320)
            %17 = cir.call @calloc(%15, %16) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc80)
            cir.store %17, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc318)
            cir.scope {
              %27 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc87)
              %28 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc88)
              %29 = cir.cmp(eq, %27, %28) : !cir.ptr<!void>, !cir.bool loc(#loc322)
              cir.if %29 {
                %30 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc90)
                %31 = cir.const #cir.int<1> : !s32i loc(#loc91)
                %32 = cir.unary(minus, %31) nsw : !s32i, !s32i loc(#loc92)
                cir.call @exit(%32) : (!s32i) -> () extra(#fn_attr) loc(#loc90)
              } loc(#loc323)
            } loc(#loc321)
            %18 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc93)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc93)
            %20 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc94)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc94)
            %22 = cir.call @wcscpy(%19, %21) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc95)
            %23 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc96)
            %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc96)
            cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc97)
            %25 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc98)
            %26 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc99)
            cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc98)
          } loc(#loc316)
        } loc(#loc315)
        cir.yield loc(#loc65)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc100)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc101)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc324)
        cir.yield loc(#loc312)
      } loc(#loc312)
    } loc(#loc312)
    cir.return loc(#loc18)
  } loc(#loc292)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc326)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc104)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc327)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc106)
    cir.return loc(#loc103)
  } loc(#loc325)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc328)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc329)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc331)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc332)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc333)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc119)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc334)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc123)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc336)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc125)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc126)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc337)
        cir.condition(%7) loc(#loc127)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc340)
            %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc133)
            %7 = cir.const #cir.int<50> : !s32i loc(#loc134)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc134)
            %9 = cir.const #cir.int<4> : !u64i loc(#loc341)
            %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc342)
            %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc133)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc343)
            cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc340)
            cir.scope {
              %28 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc139)
              %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc140)
              %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc140)
              %31 = cir.cmp(eq, %28, %30) : !cir.ptr<!s32i>, !cir.bool loc(#loc345)
              cir.if %31 {
                %32 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc142)
                %33 = cir.const #cir.int<1> : !s32i loc(#loc143)
                %34 = cir.unary(minus, %33) nsw : !s32i, !s32i loc(#loc144)
                cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc142)
              } loc(#loc346)
            } loc(#loc344)
            %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc145)
            %14 = cir.const #cir.int<65> : !s32i loc(#loc146)
            %15 = cir.const #cir.int<50> : !s32i loc(#loc147)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc148)
            %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc147)
            %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc147)
            %19 = cir.call @wmemset(%13, %14, %18) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc149)
            %20 = cir.const #cir.int<0> : !s32i loc(#loc150)
            %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc151)
            %22 = cir.const #cir.int<50> : !s32i loc(#loc152)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc153)
            %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc152)
            %25 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc154)
            cir.store %20, %25 : !s32i, !cir.ptr<!s32i> loc(#loc347)
            %26 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc155)
            %27 = cir.cast(bitcast, %26 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc155)
            cir.store %27, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc348)
          } loc(#loc339)
        } loc(#loc338)
        cir.yield loc(#loc122)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc158)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc349)
        cir.yield loc(#loc335)
      } loc(#loc335)
    } loc(#loc335)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc161)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc351)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc163)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc164)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc352)
        cir.condition(%7) loc(#loc165)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc355)
            %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc356)
            %7 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc173)
            %8 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc174)
            %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc174)
            %10 = cir.call @wcslen(%9) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc173)
            cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc355)
            %11 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc175)
            %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc176)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc177)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc177)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc357)
            %16 = cir.const #cir.int<4> : !u64i loc(#loc358)
            %17 = cir.call @calloc(%15, %16) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc175)
            cir.store %17, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc356)
            cir.scope {
              %27 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc182)
              %28 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc183)
              %29 = cir.cmp(eq, %27, %28) : !cir.ptr<!void>, !cir.bool loc(#loc360)
              cir.if %29 {
                %30 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc185)
                %31 = cir.const #cir.int<1> : !s32i loc(#loc186)
                %32 = cir.unary(minus, %31) nsw : !s32i, !s32i loc(#loc187)
                cir.call @exit(%32) : (!s32i) -> () extra(#fn_attr) loc(#loc185)
              } loc(#loc361)
            } loc(#loc359)
            %18 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc188)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc188)
            %20 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc189)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc189)
            %22 = cir.call @wcscpy(%19, %21) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc190)
            %23 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc191)
            %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc191)
            cir.call @printWLine(%24) : (!cir.ptr<!s32i>) -> () loc(#loc192)
            %25 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc193)
            %26 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc194)
            cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc193)
          } loc(#loc354)
        } loc(#loc353)
        cir.yield loc(#loc160)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc195)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc196)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc362)
        cir.yield loc(#loc350)
      } loc(#loc350)
    } loc(#loc350)
    cir.return loc(#loc113)
  } loc(#loc330)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc363)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc365)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc366)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc367)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc206)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc368)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc210)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc370)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc212)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc213)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc371)
        cir.condition(%7) loc(#loc214)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc374)
            %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc220)
            %7 = cir.const #cir.int<50> : !s32i loc(#loc221)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc221)
            %9 = cir.const #cir.int<1> : !u64i loc(#loc375)
            %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc376)
            %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc220)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc377)
            cir.store %12, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc374)
            cir.scope {
              %29 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc226)
              %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc227)
              %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc227)
              %32 = cir.cmp(eq, %29, %31) : !cir.ptr<!s8i>, !cir.bool loc(#loc379)
              cir.if %32 {
                %33 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc229)
                %34 = cir.const #cir.int<1> : !s32i loc(#loc230)
                %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc231)
                cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc229)
              } loc(#loc380)
            } loc(#loc378)
            %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc232)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc232)
            %15 = cir.const #cir.int<65> : !s32i loc(#loc233)
            %16 = cir.const #cir.int<50> : !s32i loc(#loc234)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc235)
            %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc234)
            %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc234)
            cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc381)
            %20 = cir.const #cir.int<0> : !s32i loc(#loc238)
            %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc238)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc239)
            %23 = cir.const #cir.int<50> : !s32i loc(#loc240)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc241)
            %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc240)
            %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc242)
            cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc382)
            %27 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc243)
            %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc243)
            cir.store %28, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc383)
          } loc(#loc373)
        } loc(#loc372)
        cir.yield loc(#loc209)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc245)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc246)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc384)
        cir.yield loc(#loc369)
      } loc(#loc369)
    } loc(#loc369)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc249)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc386)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc251)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc252)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc387)
        cir.condition(%7) loc(#loc253)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc390)
            %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc391)
            %7 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc261)
            %8 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc262)
            %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc262)
            %10 = cir.call @strlen(%9) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc261)
            cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc390)
            %11 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc263)
            %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc264)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc265)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc265)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc392)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc266)
            %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc266)
            %18 = cir.call @calloc(%15, %17) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc263)
            cir.store %18, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc391)
            cir.scope {
              %29 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc269)
              %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc270)
              %31 = cir.cmp(eq, %29, %30) : !cir.ptr<!void>, !cir.bool loc(#loc394)
              cir.if %31 {
                %32 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc272)
                %33 = cir.const #cir.int<1> : !s32i loc(#loc273)
                %34 = cir.unary(minus, %33) nsw : !s32i, !s32i loc(#loc274)
                cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc272)
              } loc(#loc395)
            } loc(#loc393)
            %19 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc275)
            %20 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc276)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc276)
            %22 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc277)
            %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc277)
            %24 = cir.call @strcpy(%21, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc275)
            %25 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc278)
            %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc278)
            cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc279)
            %27 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc280)
            %28 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc281)
            cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc280)
          } loc(#loc389)
        } loc(#loc388)
        cir.yield loc(#loc248)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc282)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc283)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc396)
        cir.yield loc(#loc385)
      } loc(#loc385)
    } loc(#loc385)
    cir.return loc(#loc200)
  } loc(#loc364)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/stdlib.h":675:1)
#loc10 = loc("/usr/include/stdlib.h":676:14)
#loc11 = loc("/usr/include/wchar.h":98:1)
#loc12 = loc("/usr/include/wchar.h":100:14)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc15 = loc("/usr/include/stdlib.h":687:1)
#loc16 = loc("/usr/include/stdlib.h":687:32)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":24:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":52:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":26:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":26:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":26:11)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":27:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":27:12)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":28:12)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":28:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":29:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":39:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":29:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":29:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":29:16)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":29:20)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":29:18)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":30:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":31:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":38:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":32:13)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":32:75)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":32:50)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":32:57)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":32:60)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":32:74)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":33:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":33:50)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":33:17)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":33:34)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":33:40)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":33:41)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":33:47)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":33:46)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":34:21)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":34:36)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":34:42)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":34:45)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":34:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":35:35)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":35:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":35:27)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":35:30)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":35:31)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":37:28)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":37:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":29:24)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":29:23)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":40:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":51:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":40:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":40:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":40:16)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":40:20)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":40:18)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":41:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":42:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":50:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":44:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":44:49)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":45:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":45:68)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":44:30)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":44:45)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":45:35)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":45:42)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":45:50)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":45:53)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":45:67)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":46:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":46:41)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":46:17)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":46:25)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":46:31)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":46:32)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":46:38)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":46:37)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":47:26)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":47:32)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":47:19)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":48:31)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":48:13)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":49:13)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":49:18)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":40:24)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":40:23)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":120:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":124:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":122:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":122:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":123:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":123:13)
#loc108 = loc("/usr/include/wchar.h":247:1)
#loc109 = loc("/usr/include/wchar.h":247:51)
#loc110 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc111 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":59:1)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":87:1)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":61:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":61:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":61:11)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":62:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":62:12)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":63:12)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":63:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":64:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":74:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":64:13)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":64:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":64:16)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":64:20)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":64:18)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":65:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":66:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":73:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":67:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":67:75)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":67:50)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":67:57)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":67:60)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":67:74)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":68:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":68:50)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":68:17)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":68:34)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":68:40)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":68:41)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":68:47)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":68:46)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":69:21)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":69:36)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":69:42)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":69:45)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":69:13)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":70:35)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":70:13)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":70:27)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":70:30)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":70:31)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":72:28)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":72:13)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":64:24)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":64:23)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":75:5)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":86:5)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":75:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":75:9)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":75:16)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":75:20)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":75:18)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":76:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":77:9)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":85:9)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":79:13)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":79:52)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":80:13)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":80:68)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":79:30)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":79:48)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":80:35)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":80:42)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":80:50)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":80:53)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":80:67)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":81:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":81:41)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":81:17)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":81:25)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":81:31)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":81:32)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":81:38)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":81:37)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":82:26)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":82:32)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":82:19)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":83:35)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":83:13)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":84:13)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":84:18)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":75:24)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":75:23)
#loc197 = loc("/usr/include/string.h":141:1)
#loc198 = loc("/usr/include/string.h":142:14)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":90:1)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":118:1)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":92:5)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":92:9)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":92:11)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":93:5)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":93:12)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":94:12)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":94:5)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":95:5)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":105:5)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":95:13)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":95:9)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":95:16)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":95:20)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":95:18)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":96:5)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":97:9)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":104:9)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":98:13)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":98:67)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":98:45)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":98:52)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":98:55)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":98:66)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":99:13)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":99:51)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":99:17)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":99:35)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":99:41)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":99:42)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":99:48)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":99:47)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":100:20)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":100:36)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":100:41)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":100:44)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":100:13)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":100:45)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":101:36)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":101:13)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":101:28)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":101:31)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":101:32)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":103:28)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":103:13)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":95:24)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":95:23)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":106:5)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":117:5)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":106:13)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":106:9)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":106:16)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":106:20)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":106:18)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":107:5)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":108:9)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":116:9)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":110:13)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":110:49)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":111:13)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":111:54)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":110:30)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":110:45)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":111:35)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":111:42)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":111:50)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":111:53)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":112:13)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":112:41)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":112:17)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":112:25)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":112:31)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":112:32)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":112:38)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":112:37)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":113:19)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":113:26)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":113:32)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":114:31)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":114:13)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":115:13)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":115:18)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":106:24)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c":106:23)
#loc284 = loc(fused[#loc1, #loc2])
#loc285 = loc(fused[#loc3, #loc4])
#loc286 = loc(fused[#loc5, #loc6])
#loc287 = loc(fused[#loc7, #loc8])
#loc288 = loc(fused[#loc9, #loc10])
#loc289 = loc(fused[#loc11, #loc12])
#loc290 = loc(fused[#loc13, #loc14])
#loc291 = loc(fused[#loc15, #loc16])
#loc292 = loc(fused[#loc17, #loc18])
#loc293 = loc(fused[#loc19, #loc20])
#loc294 = loc(fused[#loc19, #loc21])
#loc295 = loc(fused[#loc22, #loc23])
#loc296 = loc(fused[#loc25, #loc24])
#loc297 = loc(fused[#loc26, #loc27])
#loc298 = loc(fused[#loc29, #loc28])
#loc299 = loc(fused[#loc30, #loc31])
#loc300 = loc(fused[#loc33, #loc27])
#loc301 = loc(fused[#loc34, #loc35])
#loc302 = loc(fused[#loc36, #loc37])
#loc303 = loc(fused[#loc40, #loc41])
#loc304 = loc(fused[#loc39, #loc41])
#loc305 = loc(fused[#loc38, #loc37])
#loc306 = loc(fused[#loc42, #loc43])
#loc307 = loc(fused[#loc44, #loc45])
#loc308 = loc(fused[#loc46, #loc43])
#loc309 = loc(fused[#loc56, #loc55])
#loc310 = loc(fused[#loc61, #loc60])
#loc311 = loc(fused[#loc63, #loc62])
#loc312 = loc(fused[#loc64, #loc65])
#loc313 = loc(fused[#loc67, #loc66])
#loc314 = loc(fused[#loc68, #loc69])
#loc315 = loc(fused[#loc71, #loc65])
#loc316 = loc(fused[#loc72, #loc73])
#loc317 = loc(fused[#loc74, #loc75])
#loc318 = loc(fused[#loc76, #loc77])
#loc319 = loc(fused[#loc81, #loc82])
#loc320 = loc(fused[#loc83, #loc84])
#loc321 = loc(fused[#loc85, #loc86])
#loc322 = loc(fused[#loc87, #loc88])
#loc323 = loc(fused[#loc89, #loc86])
#loc324 = loc(fused[#loc101, #loc100])
#loc325 = loc(fused[#loc102, #loc103])
#loc326 = loc(fused[#loc104, #loc105])
#loc327 = loc(fused[#loc106, #loc107])
#loc328 = loc(fused[#loc108, #loc109])
#loc329 = loc(fused[#loc110, #loc111])
#loc330 = loc(fused[#loc112, #loc113])
#loc331 = loc(fused[#loc114, #loc115])
#loc332 = loc(fused[#loc114, #loc116])
#loc333 = loc(fused[#loc117, #loc118])
#loc334 = loc(fused[#loc120, #loc119])
#loc335 = loc(fused[#loc121, #loc122])
#loc336 = loc(fused[#loc124, #loc123])
#loc337 = loc(fused[#loc125, #loc126])
#loc338 = loc(fused[#loc128, #loc122])
#loc339 = loc(fused[#loc129, #loc130])
#loc340 = loc(fused[#loc131, #loc132])
#loc341 = loc(fused[#loc135, #loc136])
#loc342 = loc(fused[#loc134, #loc136])
#loc343 = loc(fused[#loc133, #loc132])
#loc344 = loc(fused[#loc137, #loc138])
#loc345 = loc(fused[#loc139, #loc140])
#loc346 = loc(fused[#loc141, #loc138])
#loc347 = loc(fused[#loc151, #loc150])
#loc348 = loc(fused[#loc156, #loc155])
#loc349 = loc(fused[#loc158, #loc157])
#loc350 = loc(fused[#loc159, #loc160])
#loc351 = loc(fused[#loc162, #loc161])
#loc352 = loc(fused[#loc163, #loc164])
#loc353 = loc(fused[#loc166, #loc160])
#loc354 = loc(fused[#loc167, #loc168])
#loc355 = loc(fused[#loc169, #loc170])
#loc356 = loc(fused[#loc171, #loc172])
#loc357 = loc(fused[#loc176, #loc177])
#loc358 = loc(fused[#loc178, #loc179])
#loc359 = loc(fused[#loc180, #loc181])
#loc360 = loc(fused[#loc182, #loc183])
#loc361 = loc(fused[#loc184, #loc181])
#loc362 = loc(fused[#loc196, #loc195])
#loc363 = loc(fused[#loc197, #loc198])
#loc364 = loc(fused[#loc199, #loc200])
#loc365 = loc(fused[#loc201, #loc202])
#loc366 = loc(fused[#loc201, #loc203])
#loc367 = loc(fused[#loc204, #loc205])
#loc368 = loc(fused[#loc207, #loc206])
#loc369 = loc(fused[#loc208, #loc209])
#loc370 = loc(fused[#loc211, #loc210])
#loc371 = loc(fused[#loc212, #loc213])
#loc372 = loc(fused[#loc215, #loc209])
#loc373 = loc(fused[#loc216, #loc217])
#loc374 = loc(fused[#loc218, #loc219])
#loc375 = loc(fused[#loc222, #loc223])
#loc376 = loc(fused[#loc221, #loc223])
#loc377 = loc(fused[#loc220, #loc219])
#loc378 = loc(fused[#loc224, #loc225])
#loc379 = loc(fused[#loc226, #loc227])
#loc380 = loc(fused[#loc228, #loc225])
#loc381 = loc(fused[#loc236, #loc237])
#loc382 = loc(fused[#loc239, #loc238])
#loc383 = loc(fused[#loc244, #loc243])
#loc384 = loc(fused[#loc246, #loc245])
#loc385 = loc(fused[#loc247, #loc248])
#loc386 = loc(fused[#loc250, #loc249])
#loc387 = loc(fused[#loc251, #loc252])
#loc388 = loc(fused[#loc254, #loc248])
#loc389 = loc(fused[#loc255, #loc256])
#loc390 = loc(fused[#loc257, #loc258])
#loc391 = loc(fused[#loc259, #loc260])
#loc392 = loc(fused[#loc264, #loc265])
#loc393 = loc(fused[#loc267, #loc268])
#loc394 = loc(fused[#loc269, #loc270])
#loc395 = loc(fused[#loc271, #loc268])
#loc396 = loc(fused[#loc283, #loc282])
