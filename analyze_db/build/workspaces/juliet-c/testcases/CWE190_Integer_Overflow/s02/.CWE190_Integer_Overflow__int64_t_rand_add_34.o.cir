!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":34:21)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":76:21)
!ty_CWE190_Integer_Overflow__int64_t_rand_add_34_unionType = !cir.record<union "CWE190_Integer_Overflow__int64_t_rand_add_34_unionType" {!s64i, !s64i}>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_add_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc91)
  cir.func private @printLongLongLine(!s64i) loc(#loc92)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_add_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc94)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc95)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc96)
    %3 = cir.alloca !ty_CWE190_Integer_Overflow__int64_t_rand_add_34_unionType, !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_add_34_unionType>, ["myUnion"] {alignment = 8 : i64} loc(#loc97)
    %4 = cir.const #cir.int<0> : !s64i loc(#loc15)
    cir.store %4, %2 : !s64i, !cir.ptr<!s64i> loc(#loc98)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc17)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc17)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc17)
    %11 = cir.const #cir.int<60> : !s32i loc(#loc17)
    %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc17)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc17)
    %15 = cir.const #cir.int<45> : !s32i loc(#loc17)
    %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc17)
    %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc17)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc17)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc17)
    %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc17)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc17)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc17)
    %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc17)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc17)
    %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc17)
    cir.br ^bb3(%30 : !u64i) loc(#loc17)
  ^bb2:  // pred: ^bb0
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc17)
    %33 = cir.const #cir.int<60> : !s32i loc(#loc17)
    %34 = cir.shift(left, %32 : !u64i, %33 : !s32i) -> !u64i loc(#loc17)
    %35 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc17)
    %37 = cir.const #cir.int<45> : !s32i loc(#loc17)
    %38 = cir.shift(left, %36 : !u64i, %37 : !s32i) -> !u64i loc(#loc17)
    %39 = cir.binop(xor, %34, %38) : !u64i loc(#loc17)
    %40 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc17)
    %42 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %43 = cir.shift(left, %41 : !u64i, %42 : !s32i) -> !u64i loc(#loc17)
    %44 = cir.binop(xor, %39, %43) : !u64i loc(#loc17)
    %45 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc17)
    %47 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %48 = cir.shift(left, %46 : !u64i, %47 : !s32i) -> !u64i loc(#loc17)
    %49 = cir.binop(xor, %44, %48) : !u64i loc(#loc17)
    %50 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc17)
    %52 = cir.binop(xor, %49, %51) : !u64i loc(#loc17)
    %53 = cir.unary(minus, %52) : !u64i, !u64i loc(#loc17)
    %54 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %55 = cir.cast(integral, %54 : !s32i), !u64i loc(#loc17)
    %56 = cir.binop(sub, %53, %55) : !u64i loc(#loc17)
    cir.br ^bb3(%56 : !u64i) loc(#loc17)
  ^bb3(%57: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":34:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    %58 = cir.cast(integral, %57 : !u64i), !s64i loc(#loc17)
    cir.store %58, %2 : !s64i, !cir.ptr<!s64i> loc(#loc99)
    %59 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc19)
    %60 = cir.get_member %3[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_add_34_unionType> -> !cir.ptr<!s64i> loc(#loc20)
    cir.store %59, %60 : !s64i, !cir.ptr<!s64i> loc(#loc100)
    cir.br ^bb5 loc(#loc101)
  ^bb5:  // pred: ^bb4
    %61 = cir.get_member %3[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_add_34_unionType> -> !cir.ptr<!s64i> loc(#loc24)
    %62 = cir.load %61 : !cir.ptr<!s64i>, !s64i loc(#loc8)
    cir.store %62, %0 : !s64i, !cir.ptr<!s64i> loc(#loc94)
    cir.br ^bb6 loc(#loc102)
  ^bb6:  // pred: ^bb5
    %63 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc27)
    %64 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %65 = cir.cast(integral, %64 : !s32i), !s64i loc(#loc10)
    %66 = cir.binop(add, %63, %65) nsw : !s64i loc(#loc27)
    cir.store %66, %1 : !s64i, !cir.ptr<!s64i> loc(#loc95)
    %67 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc28)
    cir.call @printLongLongLine(%67) : (!s64i) -> () loc(#loc29)
    cir.br ^bb7 loc(#loc26)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc23)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc6)
  } loc(#loc93)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_add_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc104)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc105)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc103)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc107)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc108)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc109)
    %3 = cir.alloca !ty_CWE190_Integer_Overflow__int64_t_rand_add_34_unionType, !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_add_34_unionType>, ["myUnion"] {alignment = 8 : i64} loc(#loc110)
    %4 = cir.const #cir.int<0> : !s64i loc(#loc46)
    cir.store %4, %2 : !s64i, !cir.ptr<!s64i> loc(#loc111)
    %5 = cir.const #cir.int<2> : !s32i loc(#loc48)
    %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc48)
    cir.store %6, %2 : !s64i, !cir.ptr<!s64i> loc(#loc112)
    %7 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc50)
    %8 = cir.get_member %3[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_add_34_unionType> -> !cir.ptr<!s64i> loc(#loc20)
    cir.store %7, %8 : !s64i, !cir.ptr<!s64i> loc(#loc113)
    cir.br ^bb1 loc(#loc114)
  ^bb1:  // pred: ^bb0
    %9 = cir.get_member %3[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_add_34_unionType> -> !cir.ptr<!s64i> loc(#loc24)
    %10 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc39)
    cir.store %10, %0 : !s64i, !cir.ptr<!s64i> loc(#loc107)
    cir.br ^bb2 loc(#loc115)
  ^bb2:  // pred: ^bb1
    %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc56)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc41)
    %14 = cir.binop(add, %11, %13) nsw : !s64i loc(#loc56)
    cir.store %14, %1 : !s64i, !cir.ptr<!s64i> loc(#loc108)
    %15 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc57)
    cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc58)
    cir.br ^bb3 loc(#loc55)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc53)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc37)
  } loc(#loc106)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc116)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc61)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc118)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc119)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc120)
    %3 = cir.alloca !ty_CWE190_Integer_Overflow__int64_t_rand_add_34_unionType, !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_add_34_unionType>, ["myUnion"] {alignment = 8 : i64} loc(#loc121)
    %4 = cir.const #cir.int<0> : !s64i loc(#loc72)
    cir.store %4, %2 : !s64i, !cir.ptr<!s64i> loc(#loc122)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc74)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc74)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc74)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc74)
    %11 = cir.const #cir.int<60> : !s32i loc(#loc74)
    %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc74)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc74)
    %15 = cir.const #cir.int<45> : !s32i loc(#loc74)
    %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc74)
    %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc74)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc74)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc74)
    %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc74)
    %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc74)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc74)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc74)
    %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc74)
    %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc74)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc74)
    %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc74)
    cir.br ^bb3(%30 : !u64i) loc(#loc74)
  ^bb2:  // pred: ^bb0
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc74)
    %33 = cir.const #cir.int<60> : !s32i loc(#loc74)
    %34 = cir.shift(left, %32 : !u64i, %33 : !s32i) -> !u64i loc(#loc74)
    %35 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
    %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc74)
    %37 = cir.const #cir.int<45> : !s32i loc(#loc74)
    %38 = cir.shift(left, %36 : !u64i, %37 : !s32i) -> !u64i loc(#loc74)
    %39 = cir.binop(xor, %34, %38) : !u64i loc(#loc74)
    %40 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
    %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc74)
    %42 = cir.const #cir.int<30> : !s32i loc(#loc74)
    %43 = cir.shift(left, %41 : !u64i, %42 : !s32i) -> !u64i loc(#loc74)
    %44 = cir.binop(xor, %39, %43) : !u64i loc(#loc74)
    %45 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
    %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc74)
    %47 = cir.const #cir.int<15> : !s32i loc(#loc74)
    %48 = cir.shift(left, %46 : !u64i, %47 : !s32i) -> !u64i loc(#loc74)
    %49 = cir.binop(xor, %44, %48) : !u64i loc(#loc74)
    %50 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
    %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc74)
    %52 = cir.binop(xor, %49, %51) : !u64i loc(#loc74)
    %53 = cir.unary(minus, %52) : !u64i, !u64i loc(#loc74)
    %54 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %55 = cir.cast(integral, %54 : !s32i), !u64i loc(#loc74)
    %56 = cir.binop(sub, %53, %55) : !u64i loc(#loc74)
    cir.br ^bb3(%56 : !u64i) loc(#loc74)
  ^bb3(%57: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":76:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc74)
  ^bb4:  // pred: ^bb3
    %58 = cir.cast(integral, %57 : !u64i), !s64i loc(#loc74)
    cir.store %58, %2 : !s64i, !cir.ptr<!s64i> loc(#loc123)
    %59 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc76)
    %60 = cir.get_member %3[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_add_34_unionType> -> !cir.ptr<!s64i> loc(#loc20)
    cir.store %59, %60 : !s64i, !cir.ptr<!s64i> loc(#loc124)
    cir.br ^bb5 loc(#loc125)
  ^bb5:  // pred: ^bb4
    %61 = cir.get_member %3[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int64_t_rand_add_34_unionType> -> !cir.ptr<!s64i> loc(#loc24)
    %62 = cir.load %61 : !cir.ptr<!s64i>, !s64i loc(#loc65)
    cir.store %62, %0 : !s64i, !cir.ptr<!s64i> loc(#loc118)
    cir.br ^bb6 loc(#loc126)
  ^bb6:  // pred: ^bb5
    %63 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc82)
    %64 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc83)
    %65 = cir.cmp(lt, %63, %64) : !s64i, !cir.bool loc(#loc127)
    cir.brcond %65 ^bb7, ^bb8 loc(#loc128)
  ^bb7:  // pred: ^bb6
    %66 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc87)
    %67 = cir.const #cir.int<1> : !s32i loc(#loc67)
    %68 = cir.cast(integral, %67 : !s32i), !s64i loc(#loc67)
    %69 = cir.binop(add, %66, %68) nsw : !s64i loc(#loc87)
    cir.store %69, %1 : !s64i, !cir.ptr<!s64i> loc(#loc119)
    %70 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc88)
    cir.call @printLongLongLine(%70) : (!s64i) -> () loc(#loc89)
    cir.br ^bb9 loc(#loc85)
  ^bb8:  // pred: ^bb6
    %71 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc61)
    %72 = cir.cast(array_to_ptrdecay, %71 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%72) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    cir.br ^bb9 loc(#loc81)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc81)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc79)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc63)
  } loc(#loc117)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_add_34.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":28:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":44:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":37:9)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":37:32)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":40:13)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":40:37)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":30:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":30:13)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":31:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":31:60)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":32:12)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":32:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":34:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":35:26)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":22:13)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":35:5)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":36:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":43:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":23:13)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":38:9)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":42:9)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":40:30)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":41:31)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":41:13)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":93:1)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":97:1)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":95:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":95:13)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":96:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":96:13)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":51:1)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":67:1)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":60:9)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":60:32)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":63:13)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":63:37)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":53:5)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":53:13)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":54:5)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":54:60)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":55:12)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":55:5)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":57:12)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":57:5)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":58:26)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":58:5)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":59:5)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":66:5)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":61:9)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":65:9)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":63:30)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":64:31)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":64:13)
#loc59 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc60 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":88:23)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":70:1)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":91:1)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":79:9)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":79:32)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":83:13)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":83:37)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":72:5)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":72:13)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":73:5)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":73:60)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":74:12)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":74:5)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":76:5)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":77:26)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":77:5)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":78:5)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":90:5)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":81:9)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":89:9)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":81:13)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":81:20)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":82:9)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":85:9)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":87:9)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":83:30)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":84:31)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":84:13)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_add_34.c":88:13)
#loc91 = loc(fused[#loc1, #loc2])
#loc92 = loc(fused[#loc3, #loc4])
#loc93 = loc(fused[#loc5, #loc6])
#loc94 = loc(fused[#loc7, #loc8])
#loc95 = loc(fused[#loc9, #loc10])
#loc96 = loc(fused[#loc11, #loc12])
#loc97 = loc(fused[#loc13, #loc14])
#loc98 = loc(fused[#loc16, #loc15])
#loc99 = loc(fused[#loc18, #loc17])
#loc100 = loc(fused[#loc21, #loc19])
#loc101 = loc(fused[#loc22, #loc23])
#loc102 = loc(fused[#loc25, #loc26])
#loc103 = loc(fused[#loc30, #loc31])
#loc104 = loc(fused[#loc32, #loc33])
#loc105 = loc(fused[#loc34, #loc35])
#loc106 = loc(fused[#loc36, #loc37])
#loc107 = loc(fused[#loc38, #loc39])
#loc108 = loc(fused[#loc40, #loc41])
#loc109 = loc(fused[#loc42, #loc43])
#loc110 = loc(fused[#loc44, #loc45])
#loc111 = loc(fused[#loc47, #loc46])
#loc112 = loc(fused[#loc49, #loc48])
#loc113 = loc(fused[#loc51, #loc50])
#loc114 = loc(fused[#loc52, #loc53])
#loc115 = loc(fused[#loc54, #loc55])
#loc116 = loc(fused[#loc59, #loc60])
#loc117 = loc(fused[#loc62, #loc63])
#loc118 = loc(fused[#loc64, #loc65])
#loc119 = loc(fused[#loc66, #loc67])
#loc120 = loc(fused[#loc68, #loc69])
#loc121 = loc(fused[#loc70, #loc71])
#loc122 = loc(fused[#loc73, #loc72])
#loc123 = loc(fused[#loc75, #loc74])
#loc124 = loc(fused[#loc77, #loc76])
#loc125 = loc(fused[#loc78, #loc79])
#loc126 = loc(fused[#loc80, #loc81])
#loc127 = loc(fused[#loc82, #loc83])
#loc128 = loc(fused[#loc84, #loc85, #loc86, #loc81])
