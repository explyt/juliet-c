!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE78_OS_Command_Injection/s02/CWE78_OS_Command_Injection__char_environment_execl_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc78)
  cir.func private  @getenv(!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc79)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ADD\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc5)
  cir.func private  @strncat(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc80)
  cir.func private  @execl(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc81)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"/bin/sh\00" : !cir.array<!s8i x 8>> : !cir.array<!s8i x 8> {alignment = 1 : i64} loc(#loc10)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"-c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc11)
  cir.func no_proto  @CWE78_OS_Command_Injection__char_environment_execl_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc83)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc84)
    %2 = cir.const #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc84)
    cir.store %2, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc84)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc18)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc85)
    cir.scope {
      cir.while {
        %13 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc22)
        cir.condition(%14) loc(#loc22)
      } do {
        cir.scope {
          %13 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc88)
          %14 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["environment", init] {alignment = 8 : i64} loc(#loc89)
          %15 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc29)
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
          %17 = cir.call @strlen(%16) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc29)
          cir.store %17, %13 : !u64i, !cir.ptr<!u64i> loc(#loc88)
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc5)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc5)
          %20 = cir.call @getenv(%19) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc31)
          cir.store %20, %14 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc89)
          cir.scope {
            %21 = cir.load %14 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
            %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc35)
            %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc35)
            %24 = cir.cmp(ne, %21, %23) : !cir.ptr<!s8i>, !s32i loc(#loc91)
            %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc36)
            cir.if %25 {
              %26 = cir.get_global @strncat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc38)
              %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
              %28 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc40)
              %29 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %28 : !u64i), !cir.ptr<!s8i> loc(#loc41)
              %30 = cir.load %14 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc42)
              %31 = cir.const #cir.int<100> : !s32i loc(#loc43)
              %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc43)
              %33 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc44)
              %34 = cir.binop(sub, %32, %33) : !u64i loc(#loc93)
              %35 = cir.const #cir.int<1> : !s32i loc(#loc45)
              %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc45)
              %37 = cir.binop(sub, %34, %36) : !u64i loc(#loc94)
              %38 = cir.call @strncat(%29, %30, %37) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc38)
            } loc(#loc92)
          } loc(#loc90)
        } loc(#loc87)
        cir.break loc(#loc46)
      } loc(#loc86)
    } loc(#loc86)
    %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc10)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc10)
    %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc47)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc47)
    %8 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc11)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc11)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc49)
    %12 = cir.call @execl(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc50)
    cir.return loc(#loc13)
  } loc(#loc82)
  cir.func no_proto  @CWE78_OS_Command_Injection__char_environment_execl_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc96)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc53)
    cir.return loc(#loc52)
  } loc(#loc95)
  cir.func private  @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc97)
  cir.global "private"  constant internal dsolocal @".str3" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc57)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc99)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc100)
    %2 = cir.const #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc100)
    cir.store %2, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc100)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc64)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc101)
    cir.scope {
      cir.while {
        %13 = cir.const #cir.int<1> : !s32i loc(#loc68)
        %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc68)
        cir.condition(%14) loc(#loc68)
      } do {
        %13 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc69)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
        %15 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc57)
        %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc57)
        %17 = cir.call @strcat(%14, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc69)
        cir.break loc(#loc71)
      } loc(#loc102)
    } loc(#loc102)
    %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc72)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc72)
    %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc73)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc73)
    %8 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc74)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc74)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc76)
    %12 = cir.call @execl(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc77)
    cir.return loc(#loc59)
  } loc(#loc98)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE78_OS_Command_Injection/s02/CWE78_OS_Command_Injection__char_environment_execl_16.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("/usr/include/stdlib.h":773:1)
#loc4 = loc("/usr/include/stdlib.h":773:50)
#loc5 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":63:41)
#loc6 = loc("/usr/include/string.h":152:1)
#loc7 = loc("/usr/include/string.h":153:29)
#loc8 = loc("/usr/include/unistd.h":594:1)
#loc9 = loc("/usr/include/unistd.h":595:14)
#loc10 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":75:11)
#loc11 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":75:47)
#loc12 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":53:1)
#loc13 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":76:1)
#loc14 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":55:5)
#loc15 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":55:12)
#loc16 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":56:5)
#loc17 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":56:28)
#loc18 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":57:12)
#loc19 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":57:5)
#loc20 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":58:5)
#loc21 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":72:5)
#loc22 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":58:11)
#loc23 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":60:9)
#loc24 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":70:9)
#loc25 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":62:13)
#loc26 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":62:41)
#loc27 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":63:13)
#loc28 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":63:53)
#loc29 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":62:30)
#loc30 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":62:37)
#loc31 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":63:34)
#loc32 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":65:13)
#loc33 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":69:13)
#loc34 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":65:17)
#loc35 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":65:32)
#loc36 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":65:29)
#loc37 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":66:13)
#loc38 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":68:17)
#loc39 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":68:25)
#loc40 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":68:30)
#loc41 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":68:29)
#loc42 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":68:39)
#loc43 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":68:52)
#loc44 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":68:56)
#loc45 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":68:64)
#loc46 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":71:9)
#loc47 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":75:29)
#loc48 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":75:61)
#loc49 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":75:75)
#loc50 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":75:5)
#loc51 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":99:1)
#loc52 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":102:1)
#loc53 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":101:5)
#loc54 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":101:13)
#loc55 = loc("/usr/include/string.h":149:1)
#loc56 = loc("/usr/include/string.h":150:14)
#loc57 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":91:22)
#loc58 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":83:1)
#loc59 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":97:1)
#loc60 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":85:5)
#loc61 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":85:12)
#loc62 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":86:5)
#loc63 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":86:28)
#loc64 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":87:12)
#loc65 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":87:5)
#loc66 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":88:5)
#loc67 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":93:5)
#loc68 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":88:11)
#loc69 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":91:9)
#loc70 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":91:16)
#loc71 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":92:9)
#loc72 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":96:11)
#loc73 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":96:29)
#loc74 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":96:47)
#loc75 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":96:61)
#loc76 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":96:75)
#loc77 = loc("CWE78_OS_Command_Injection__char_environment_execl_16.c":96:5)
#loc78 = loc(fused[#loc1, #loc2])
#loc79 = loc(fused[#loc3, #loc4])
#loc80 = loc(fused[#loc6, #loc7])
#loc81 = loc(fused[#loc8, #loc9])
#loc82 = loc(fused[#loc12, #loc13])
#loc83 = loc(fused[#loc14, #loc15])
#loc84 = loc(fused[#loc16, #loc17])
#loc85 = loc(fused[#loc19, #loc18])
#loc86 = loc(fused[#loc20, #loc21])
#loc87 = loc(fused[#loc23, #loc24])
#loc88 = loc(fused[#loc25, #loc26])
#loc89 = loc(fused[#loc27, #loc28])
#loc90 = loc(fused[#loc32, #loc33])
#loc91 = loc(fused[#loc34, #loc35])
#loc92 = loc(fused[#loc37, #loc33])
#loc93 = loc(fused[#loc43, #loc44])
#loc94 = loc(fused[#loc43, #loc45])
#loc95 = loc(fused[#loc51, #loc52])
#loc96 = loc(fused[#loc53, #loc54])
#loc97 = loc(fused[#loc55, #loc56])
#loc98 = loc(fused[#loc58, #loc59])
#loc99 = loc(fused[#loc60, #loc61])
#loc100 = loc(fused[#loc62, #loc63])
#loc101 = loc(fused[#loc65, #loc64])
#loc102 = loc(fused[#loc66, #loc67])
