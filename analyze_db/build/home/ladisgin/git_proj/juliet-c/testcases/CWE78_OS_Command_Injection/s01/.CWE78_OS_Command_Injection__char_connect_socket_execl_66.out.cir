!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc176 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":180:10)
#loc177 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":180:14)
#loc178 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":180:20)
#loc179 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":180:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc283 = loc(fused[#loc176, #loc177])
#loc284 = loc(fused[#loc178, #loc179])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const.goodG2B.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc214)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_connect_socket_execl_66_bad.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc215)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc216)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc217)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc218)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc11)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc219)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc220)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc221)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc222)
  cir.func private @close(!s32i) -> !s32i loc(#loc223)
  cir.func private @CWE78_OS_Command_Injection__char_connect_socket_execl_66b_badSink(!cir.ptr<!cir.ptr<!s8i>>) loc(#loc224)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execl_66_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc226)
    %1 = cir.alloca !cir.array<!cir.ptr<!s8i> x 5>, !cir.ptr<!cir.array<!cir.ptr<!s8i> x 5>>, ["dataArray"] {alignment = 16 : i64} loc(#loc227)
    %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc215)
    %3 = cir.get_global @__const.CWE78_OS_Command_Injection__char_connect_socket_execl_66_bad.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc215)
    cir.copy %3 to %2 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc215)
    %4 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc30)
    cir.store %4, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc228)
    cir.scope {
      %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc230)
      %11 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc231)
      %12 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc232)
      %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc233)
      %14 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc234)
      %15 = cir.const #cir.int<1> : !s32i loc(#loc41)
      %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc41)
      cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc233)
      %17 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc44)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
      %19 = cir.call @strlen(%18) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc44)
      cir.store %19, %14 : !u64i, !cir.ptr<!u64i> loc(#loc234)
      cir.scope {
        cir.do {
          %20 = cir.const #cir.int<2> : !s32i loc(#loc48)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc49)
          %22 = cir.const #cir.int<6> : !s32i loc(#loc50)
          %23 = cir.call @socket(%20, %21, %22) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc51)
          cir.store %23, %13 : !s32i, !cir.ptr<!s32i> loc(#loc236)
          cir.scope {
            %74 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc56)
            %75 = cir.const #cir.int<1> : !s32i loc(#loc57)
            %76 = cir.unary(minus, %75) : !s32i, !s32i loc(#loc57)
            %77 = cir.cmp(eq, %74, %76) : !s32i, !cir.bool loc(#loc238)
            cir.if %77 {
              cir.break loc(#loc59)
            } loc(#loc239)
          } loc(#loc237)
          %24 = cir.cast(bitcast, %11 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc240)
          %25 = cir.const #cir.int<0> : !s32i loc(#loc62)
          %26 = cir.const #cir.int<16> : !u64i loc(#loc241)
          cir.libc.memset %26 bytes from %24 set to %25 : !cir.ptr<!void>, !s32i, !u64i loc(#loc242)
          %27 = cir.const #cir.int<2> : !s32i loc(#loc67)
          %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc67)
          %29 = cir.get_member %11[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc68)
          cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc243)
          %30 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc11)
          %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc11)
          %32 = cir.call @inet_addr(%31) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc70)
          %33 = cir.get_member %11[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc71)
          %34 = cir.get_member %33[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc72)
          cir.store %32, %34 : !u32i, !cir.ptr<!u32i> loc(#loc244)
          %35 = cir.const #cir.int<27015> : !s32i loc(#loc75)
          %36 = cir.cast(integral, %35 : !s32i), !u16i loc(#loc75)
          %37 = cir.call @htons(%36) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc76)
          %38 = cir.get_member %11[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
          cir.store %37, %38 : !u16i, !cir.ptr<!u16i> loc(#loc245)
          cir.scope {
            %74 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc82)
            %75 = cir.cast(bitcast, %11 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc247)
            %76 = cir.const #cir.int<16> : !u64i loc(#loc248)
            %77 = cir.cast(integral, %76 : !u64i), !u32i loc(#loc248)
            %78 = cir.call @connect(%74, %75, %77) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc87)
            %79 = cir.const #cir.int<1> : !s32i loc(#loc88)
            %80 = cir.unary(minus, %79) : !s32i, !s32i loc(#loc88)
            %81 = cir.cmp(eq, %78, %80) : !s32i, !cir.bool loc(#loc249)
            cir.if %81 {
              cir.break loc(#loc90)
            } loc(#loc250)
          } loc(#loc246)
          %39 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc91)
          %40 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc92)
          %41 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc93)
          %42 = cir.ptr_stride(%40 : !cir.ptr<!s8i>, %41 : !u64i), !cir.ptr<!s8i> loc(#loc94)
          %43 = cir.cast(bitcast, %42 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc251)
          %44 = cir.const #cir.int<1> : !u64i loc(#loc252)
          %45 = cir.const #cir.int<100> : !s32i loc(#loc99)
          %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc99)
          %47 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc100)
          %48 = cir.binop(sub, %46, %47) : !u64i loc(#loc253)
          %49 = cir.const #cir.int<1> : !s32i loc(#loc101)
          %50 = cir.cast(integral, %49 : !s32i), !u64i loc(#loc101)
          %51 = cir.binop(sub, %48, %50) : !u64i loc(#loc254)
          %52 = cir.binop(mul, %44, %51) : !u64i loc(#loc255)
          %53 = cir.const #cir.int<0> : !s32i loc(#loc103)
          %54 = cir.call @recv(%39, %43, %52, %53) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc104)
          %55 = cir.cast(integral, %54 : !s64i), !s32i loc(#loc104)
          cir.store %55, %10 : !s32i, !cir.ptr<!s32i> loc(#loc256)
          cir.scope {
            %74 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc109)
            %75 = cir.const #cir.int<1> : !s32i loc(#loc110)
            %76 = cir.unary(minus, %75) : !s32i, !s32i loc(#loc110)
            %77 = cir.cmp(eq, %74, %76) : !s32i, !cir.bool loc(#loc258)
            %78 = cir.ternary(%77, true {
              %79 = cir.const #true loc(#loc111)
              cir.yield %79 : !cir.bool loc(#loc111)
            }, false {
              %79 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc112)
              %80 = cir.const #cir.int<0> : !s32i loc(#loc113)
              %81 = cir.cmp(eq, %79, %80) : !s32i, !cir.bool loc(#loc259)
              %82 = cir.ternary(%81, true {
                %83 = cir.const #true loc(#loc111)
                cir.yield %83 : !cir.bool loc(#loc111)
              }, false {
                %83 = cir.const #false loc(#loc111)
                cir.yield %83 : !cir.bool loc(#loc111)
              }) : (!cir.bool) -> !cir.bool loc(#loc111)
              cir.yield %82 : !cir.bool loc(#loc111)
            }) : (!cir.bool) -> !cir.bool loc(#loc111)
            cir.if %78 {
              cir.break loc(#loc115)
            } loc(#loc260)
          } loc(#loc257)
          %56 = cir.const #cir.int<0> : !s32i loc(#loc116)
          %57 = cir.cast(integral, %56 : !s32i), !s8i loc(#loc116)
          %58 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc117)
          %59 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc118)
          %60 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc119)
          %61 = cir.cast(integral, %60 : !s32i), !u64i loc(#loc119)
          %62 = cir.const #cir.int<1> : !u64i loc(#loc261)
          %63 = cir.binop(div, %61, %62) : !u64i loc(#loc262)
          %64 = cir.binop(add, %59, %63) : !u64i loc(#loc263)
          %65 = cir.ptr_stride(%58 : !cir.ptr<!s8i>, %64 : !u64i), !cir.ptr<!s8i> loc(#loc122)
          cir.store %57, %65 : !s8i, !cir.ptr<!s8i> loc(#loc264)
          %66 = cir.get_global @strchr : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !s32i)>> loc(#loc123)
          %67 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc124)
          %68 = cir.const #cir.int<13> : !s32i loc(#loc125)
          %69 = cir.call @strchr(%67, %68) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc123)
          cir.store %69, %12 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc265)
          cir.scope {
            %74 = cir.load %12 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc130)
            %75 = cir.cast(ptr_to_bool, %74 : !cir.ptr<!s8i>), !cir.bool loc(#loc130)
            cir.if %75 {
              %76 = cir.const #cir.int<0> : !s32i loc(#loc132)
              %77 = cir.cast(integral, %76 : !s32i), !s8i loc(#loc132)
              %78 = cir.load deref %12 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
              cir.store %77, %78 : !s8i, !cir.ptr<!s8i> loc(#loc268)
            } loc(#loc267)
          } loc(#loc266)
          %70 = cir.get_global @strchr : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !s32i)>> loc(#loc135)
          %71 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc136)
          %72 = cir.const #cir.int<10> : !s32i loc(#loc137)
          %73 = cir.call @strchr(%71, %72) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc135)
          cir.store %73, %12 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc269)
          cir.scope {
            %74 = cir.load %12 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
            %75 = cir.cast(ptr_to_bool, %74 : !cir.ptr<!s8i>), !cir.bool loc(#loc142)
            cir.if %75 {
              %76 = cir.const #cir.int<0> : !s32i loc(#loc144)
              %77 = cir.cast(integral, %76 : !s32i), !s8i loc(#loc144)
              %78 = cir.load deref %12 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
              cir.store %77, %78 : !s8i, !cir.ptr<!s8i> loc(#loc272)
            } loc(#loc271)
          } loc(#loc270)
          cir.yield loc(#loc47)
        } while {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc147)
          %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc147)
          cir.condition(%21) loc(#loc147)
        } loc(#loc235)
      } loc(#loc235)
      cir.scope {
        %20 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc150)
        %21 = cir.const #cir.int<1> : !s32i loc(#loc151)
        %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc151)
        %23 = cir.cmp(ne, %20, %22) : !s32i, !cir.bool loc(#loc274)
        cir.if %23 {
          %24 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc153)
          %25 = cir.call @close(%24) : (!s32i) -> !s32i loc(#loc154)
        } loc(#loc275)
      } loc(#loc273)
    } loc(#loc229)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc155)
    %6 = cir.const #cir.int<2> : !s32i loc(#loc156)
    %7 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!cir.ptr<!s8i> x 5>>), !cir.ptr<!cir.ptr<!s8i>> loc(#loc157)
    %8 = cir.ptr_stride(%7 : !cir.ptr<!cir.ptr<!s8i>>, %6 : !s32i), !cir.ptr<!cir.ptr<!s8i>> loc(#loc157)
    cir.store %5, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc276)
    %9 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!cir.ptr<!s8i> x 5>>), !cir.ptr<!cir.ptr<!s8i>> loc(#loc158)
    cir.call @CWE78_OS_Command_Injection__char_connect_socket_execl_66b_badSink(%9) : (!cir.ptr<!cir.ptr<!s8i>>) -> () loc(#loc159)
    cir.return loc(#loc25)
  } loc(#loc225)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execl_66_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc278)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc162)
    cir.return loc(#loc161)
  } loc(#loc277)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc279)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc280)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc281)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc170)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc171)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc172)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc173)
  cir.func @main(%arg0: !s32i loc(fused[#loc176, #loc177]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc178, #loc179])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc283)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc284)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc175)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc180)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc181)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc182)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc182)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc183)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc170)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc170)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc184)
    %8 = cir.get_global @CWE78_OS_Command_Injection__char_connect_socket_execl_66_good : !cir.ptr<!cir.func<!void ()>> loc(#loc285)
    cir.call @CWE78_OS_Command_Injection__char_connect_socket_execl_66_good() : () -> () loc(#loc185)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc171)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc171)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc187)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc172)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc172)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc188)
    %13 = cir.get_global @CWE78_OS_Command_Injection__char_connect_socket_execl_66_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc286)
    cir.call @CWE78_OS_Command_Injection__char_connect_socket_execl_66_bad() : () -> () loc(#loc189)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc173)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc173)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc191)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc192)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc287)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc287)
    cir.return %17 : !s32i loc(#loc287)
  } loc(#loc282)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc288)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc196)
  cir.func private @CWE78_OS_Command_Injection__char_connect_socket_execl_66b_goodG2BSink(!cir.ptr<!cir.ptr<!s8i>>) loc(#loc289)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc291)
    %1 = cir.alloca !cir.array<!cir.ptr<!s8i> x 5>, !cir.ptr<!cir.array<!cir.ptr<!s8i> x 5>>, ["dataArray"] {alignment = 16 : i64} loc(#loc292)
    %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc214)
    %3 = cir.get_global @__const.goodG2B.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc214)
    cir.copy %3 to %2 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc214)
    %4 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc205)
    cir.store %4, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc293)
    %5 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc207)
    %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc208)
    %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc196)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc196)
    %9 = cir.call @strcat(%6, %8) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc207)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc209)
    %11 = cir.const #cir.int<2> : !s32i loc(#loc210)
    %12 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!cir.ptr<!s8i> x 5>>), !cir.ptr<!cir.ptr<!s8i>> loc(#loc211)
    %13 = cir.ptr_stride(%12 : !cir.ptr<!cir.ptr<!s8i>>, %11 : !s32i), !cir.ptr<!cir.ptr<!s8i>> loc(#loc211)
    cir.store %10, %13 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc294)
    %14 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!cir.ptr<!s8i> x 5>>), !cir.ptr<!cir.ptr<!s8i>> loc(#loc212)
    cir.call @CWE78_OS_Command_Injection__char_connect_socket_execl_66b_goodG2BSink(%14) : (!cir.ptr<!cir.ptr<!s8i>>) -> () loc(#loc213)
    cir.return loc(#loc200)
  } loc(#loc290)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":157:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":157:28)
#loc3 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":72:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":72:28)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/sys/socket.h":102:1)
#loc8 = loc("/usr/include/sys/socket.h":102:62)
#loc9 = loc("/usr/include/arpa/inet.h":34:1)
#loc10 = loc("/usr/include/arpa/inet.h":34:47)
#loc11 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":101:49)
#loc12 = loc("/usr/include/netinet/in.h":404:1)
#loc13 = loc("/usr/include/netinet/in.h":405:40)
#loc14 = loc("/usr/include/sys/socket.h":126:1)
#loc15 = loc("/usr/include/sys/socket.h":126:75)
#loc16 = loc("/usr/include/sys/socket.h":145:1)
#loc17 = loc("/usr/include/sys/socket.h":145:68)
#loc18 = loc("/usr/include/string.h":246:1)
#loc19 = loc("/usr/include/string.h":247:33)
#loc20 = loc("/usr/include/unistd.h":358:1)
#loc21 = loc("/usr/include/unistd.h":358:27)
#loc22 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":66:1)
#loc23 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":66:90)
#loc24 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":68:1)
#loc25 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":144:1)
#loc26 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":70:5)
#loc27 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":70:12)
#loc28 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":71:5)
#loc29 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":71:23)
#loc30 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":73:12)
#loc31 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":73:5)
#loc32 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":74:5)
#loc33 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":140:5)
#loc34 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":79:9)
#loc35 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":79:13)
#loc36 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":80:9)
#loc37 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":80:28)
#loc38 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":81:9)
#loc39 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":81:15)
#loc40 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":82:9)
#loc41 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":82:32)
#loc42 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":83:9)
#loc43 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":83:37)
#loc44 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":83:26)
#loc45 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":83:33)
#loc46 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":84:9)
#loc47 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":129:17)
#loc48 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":94:36)
#loc49 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":94:45)
#loc50 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":94:58)
#loc51 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":94:29)
#loc52 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":94:13)
#loc53 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":94:69)
#loc54 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":95:13)
#loc55 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":98:13)
#loc56 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":95:17)
#loc57 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":95:34)
#loc58 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":96:13)
#loc59 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":97:17)
#loc60 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":99:20)
#loc61 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":99:21)
#loc62 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":99:30)
#loc63 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":99:33)
#loc64 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":99:47)
#loc65 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":99:13)
#loc66 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":99:48)
#loc67 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":100:34)
#loc68 = loc("/usr/include/netinet/in.h":249:5)
#loc69 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":100:13)
#loc70 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":101:39)
#loc71 = loc("/usr/include/netinet/in.h":251:20)
#loc72 = loc("/usr/include/netinet/in.h":33:15)
#loc73 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":101:13)
#loc74 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":101:59)
#loc75 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":102:38)
#loc76 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":102:32)
#loc77 = loc("/usr/include/netinet/in.h":250:15)
#loc78 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":102:13)
#loc79 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":102:46)
#loc80 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":103:13)
#loc81 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":106:13)
#loc82 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":103:25)
#loc83 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":103:58)
#loc84 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":103:59)
#loc85 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":103:68)
#loc86 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":103:82)
#loc87 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":103:17)
#loc88 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":103:88)
#loc89 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":104:13)
#loc90 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":105:17)
#loc91 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":110:31)
#loc92 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":110:55)
#loc93 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":110:62)
#loc94 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":110:60)
#loc95 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":110:46)
#loc96 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":110:69)
#loc97 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":110:72)
#loc98 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":110:83)
#loc99 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":110:88)
#loc100 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":110:94)
#loc101 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":110:104)
#loc102 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":110:105)
#loc103 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":110:108)
#loc104 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":110:26)
#loc105 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":110:13)
#loc106 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":110:109)
#loc107 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":111:13)
#loc108 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":114:13)
#loc109 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":111:17)
#loc110 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":111:31)
#loc111 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":111:44)
#loc112 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":111:47)
#loc113 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":111:61)
#loc114 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":112:13)
#loc115 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":113:17)
#loc116 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":116:57)
#loc117 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":116:13)
#loc118 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":116:18)
#loc119 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":116:28)
#loc120 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":116:41)
#loc121 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":116:52)
#loc122 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":116:53)
#loc123 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":118:23)
#loc124 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":118:30)
#loc125 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":118:36)
#loc126 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":118:13)
#loc127 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":118:40)
#loc128 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":119:13)
#loc129 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":122:13)
#loc130 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":119:17)
#loc131 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":120:13)
#loc132 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":121:28)
#loc133 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":121:18)
#loc134 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":121:17)
#loc135 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":123:23)
#loc136 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":123:30)
#loc137 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":123:36)
#loc138 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":123:13)
#loc139 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":123:40)
#loc140 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":124:13)
#loc141 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":127:13)
#loc142 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":124:17)
#loc143 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":125:13)
#loc144 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":126:28)
#loc145 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":126:18)
#loc146 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":126:17)
#loc147 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":129:16)
#loc148 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":130:9)
#loc149 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":133:9)
#loc150 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":130:13)
#loc151 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":130:30)
#loc152 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":131:9)
#loc153 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":132:26)
#loc154 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":132:13)
#loc155 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":142:20)
#loc156 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":142:15)
#loc157 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":142:5)
#loc158 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":143:71)
#loc159 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":143:5)
#loc160 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":165:1)
#loc161 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":168:1)
#loc162 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":167:5)
#loc163 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":167:13)
#loc164 = loc("/usr/include/stdlib.h":575:1)
#loc165 = loc("/usr/include/stdlib.h":575:41)
#loc166 = loc("/usr/include/time.h":76:1)
#loc167 = loc("/usr/include/time.h":76:38)
#loc168 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc169 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc170 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":185:15)
#loc171 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":187:15)
#loc172 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":190:15)
#loc173 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":192:15)
#loc174 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":180:1)
#loc175 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":195:1)
#loc180 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":181:1)
#loc181 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":183:27)
#loc182 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":183:22)
#loc183 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":183:5)
#loc184 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":185:5)
#loc185 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":186:5)
#loc186 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":186:67)
#loc187 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":187:5)
#loc188 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":190:5)
#loc189 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":191:5)
#loc190 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":191:66)
#loc191 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":192:5)
#loc192 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":194:12)
#loc193 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":194:5)
#loc194 = loc("/usr/include/string.h":149:1)
#loc195 = loc("/usr/include/string.h":150:14)
#loc196 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":160:18)
#loc197 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":151:1)
#loc198 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":151:94)
#loc199 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":153:1)
#loc200 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":163:1)
#loc201 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":155:5)
#loc202 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":155:12)
#loc203 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":156:5)
#loc204 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":156:23)
#loc205 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":158:12)
#loc206 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":158:5)
#loc207 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":160:5)
#loc208 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":160:12)
#loc209 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":161:20)
#loc210 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":161:15)
#loc211 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":161:5)
#loc212 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":162:75)
#loc213 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_66a.c":162:5)
#loc214 = loc(fused[#loc1, #loc2])
#loc215 = loc(fused[#loc3, #loc4])
#loc216 = loc(fused[#loc5, #loc6])
#loc217 = loc(fused[#loc7, #loc8])
#loc218 = loc(fused[#loc9, #loc10])
#loc219 = loc(fused[#loc12, #loc13])
#loc220 = loc(fused[#loc14, #loc15])
#loc221 = loc(fused[#loc16, #loc17])
#loc222 = loc(fused[#loc18, #loc19])
#loc223 = loc(fused[#loc20, #loc21])
#loc224 = loc(fused[#loc22, #loc23])
#loc225 = loc(fused[#loc24, #loc25])
#loc226 = loc(fused[#loc26, #loc27])
#loc227 = loc(fused[#loc28, #loc29])
#loc228 = loc(fused[#loc31, #loc30])
#loc229 = loc(fused[#loc32, #loc33])
#loc230 = loc(fused[#loc34, #loc35])
#loc231 = loc(fused[#loc36, #loc37])
#loc232 = loc(fused[#loc38, #loc39])
#loc233 = loc(fused[#loc40, #loc41])
#loc234 = loc(fused[#loc42, #loc43])
#loc235 = loc(fused[#loc46, #loc47])
#loc236 = loc(fused[#loc52, #loc53])
#loc237 = loc(fused[#loc54, #loc55])
#loc238 = loc(fused[#loc56, #loc57])
#loc239 = loc(fused[#loc58, #loc55])
#loc240 = loc(fused[#loc60, #loc61])
#loc241 = loc(fused[#loc63, #loc64])
#loc242 = loc(fused[#loc65, #loc66])
#loc243 = loc(fused[#loc69, #loc67])
#loc244 = loc(fused[#loc73, #loc74])
#loc245 = loc(fused[#loc78, #loc79])
#loc246 = loc(fused[#loc80, #loc81])
#loc247 = loc(fused[#loc83, #loc84])
#loc248 = loc(fused[#loc85, #loc86])
#loc249 = loc(fused[#loc87, #loc88])
#loc250 = loc(fused[#loc89, #loc81])
#loc251 = loc(fused[#loc95, #loc96])
#loc252 = loc(fused[#loc97, #loc98])
#loc253 = loc(fused[#loc99, #loc100])
#loc254 = loc(fused[#loc99, #loc101])
#loc255 = loc(fused[#loc97, #loc102])
#loc256 = loc(fused[#loc105, #loc106])
#loc257 = loc(fused[#loc107, #loc108])
#loc258 = loc(fused[#loc109, #loc110])
#loc259 = loc(fused[#loc112, #loc113])
#loc260 = loc(fused[#loc114, #loc108])
#loc261 = loc(fused[#loc120, #loc121])
#loc262 = loc(fused[#loc119, #loc121])
#loc263 = loc(fused[#loc118, #loc121])
#loc264 = loc(fused[#loc117, #loc116])
#loc265 = loc(fused[#loc126, #loc127])
#loc266 = loc(fused[#loc128, #loc129])
#loc267 = loc(fused[#loc131, #loc129])
#loc268 = loc(fused[#loc134, #loc132])
#loc269 = loc(fused[#loc138, #loc139])
#loc270 = loc(fused[#loc140, #loc141])
#loc271 = loc(fused[#loc143, #loc141])
#loc272 = loc(fused[#loc146, #loc144])
#loc273 = loc(fused[#loc148, #loc149])
#loc274 = loc(fused[#loc150, #loc151])
#loc275 = loc(fused[#loc152, #loc149])
#loc276 = loc(fused[#loc157, #loc155])
#loc277 = loc(fused[#loc160, #loc161])
#loc278 = loc(fused[#loc162, #loc163])
#loc279 = loc(fused[#loc164, #loc165])
#loc280 = loc(fused[#loc166, #loc167])
#loc281 = loc(fused[#loc168, #loc169])
#loc282 = loc(fused[#loc174, #loc175])
#loc285 = loc(fused[#loc185, #loc186])
#loc286 = loc(fused[#loc189, #loc190])
#loc287 = loc(fused[#loc193, #loc192])
#loc288 = loc(fused[#loc194, #loc195])
#loc289 = loc(fused[#loc197, #loc198])
#loc290 = loc(fused[#loc199, #loc200])
#loc291 = loc(fused[#loc201, #loc202])
#loc292 = loc(fused[#loc203, #loc204])
#loc293 = loc(fused[#loc206, #loc205])
#loc294 = loc(fused[#loc211, #loc209])
