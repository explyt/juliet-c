!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":145:10)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":145:14)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":145:20)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":145:32)
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc281 = loc(fused[#loc95, #loc96])
#loc282 = loc(fused[#loc97, #loc98])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc245)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc246)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc247)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc248)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc249)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc251)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc16)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc252)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc20)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc22)
          %4 = cir.const #cir.int<50> : !s32i loc(#loc23)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc23)
          %6 = cir.const #cir.int<8> : !u64i loc(#loc254)
          %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc255)
          %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc256)
          cir.store %9, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc257)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc30)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc31)
            %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc259)
            cir.if %13 {
              %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc33)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc34)
              %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc35)
              cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
            } loc(#loc260)
          } loc(#loc258)
          cir.break loc(#loc36)
        } loc(#loc21)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc38)
          cir.break loc(#loc39)
        } loc(#loc37)
        cir.yield loc(#loc18)
      } loc(#loc18)
    } loc(#loc253)
    cir.scope {
      %2 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc262)
      cir.scope {
        %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc264)
        cir.scope {
          %18 = cir.const #cir.int<0> : !s32i loc(#loc50)
          %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc50)
          cir.store %19, %17 : !u64i, !cir.ptr<!u64i> loc(#loc266)
          cir.for : cond {
            %20 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc52)
            %21 = cir.const #cir.int<100> : !s32i loc(#loc53)
            %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc53)
            %23 = cir.cmp(lt, %20, %22) : !u64i, !cir.bool loc(#loc267)
            cir.condition(%23) loc(#loc54)
          } body {
            cir.scope {
              %20 = cir.const #cir.int<0> : !s32i loc(#loc56)
              %21 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc57)
              %22 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc58)
              %23 = cir.ptr_stride(%22 : !cir.ptr<!ty__twoIntsStruct>, %21 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc58)
              %24 = cir.get_member %23[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc59)
              cir.store %20, %24 : !s32i, !cir.ptr<!s32i> loc(#loc269)
              %25 = cir.const #cir.int<0> : !s32i loc(#loc60)
              %26 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc61)
              %27 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc62)
              %28 = cir.ptr_stride(%27 : !cir.ptr<!ty__twoIntsStruct>, %26 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc62)
              %29 = cir.get_member %28[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc63)
              cir.store %25, %29 : !s32i, !cir.ptr<!s32i> loc(#loc270)
            } loc(#loc268)
            cir.yield loc(#loc49)
          } step {
            %20 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc64)
            %21 = cir.unary(inc, %20) : !u64i, !u64i loc(#loc65)
            cir.store %21, %17 : !u64i, !cir.ptr<!u64i> loc(#loc271)
            cir.yield loc(#loc265)
          } loc(#loc265)
        } loc(#loc265)
      } loc(#loc263)
      %3 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc66)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc66)
      %5 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc67)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc67)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc68)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc68)
      %9 = cir.const #cir.int<8> : !u64i loc(#loc272)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc273)
      cir.libc.memcpy %10 bytes from %6 to %4 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc274)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc73)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc74)
      %13 = cir.ptr_stride(%11 : !cir.ptr<!ty__twoIntsStruct>, %12 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc75)
      cir.call @printStructLine(%13) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc76)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc77)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc78)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc78)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc77)
    } loc(#loc261)
    cir.return loc(#loc13)
  } loc(#loc250)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc276)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc81)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc277)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc83)
    cir.return loc(#loc80)
  } loc(#loc275)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc278)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc279)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc89)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc90)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc91)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc92)
  cir.func @main(%arg0: !s32i loc(fused[#loc95, #loc96]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc97, #loc98])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc281)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc282)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc94)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc99)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc100)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc101)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc101)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc102)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc89)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc103)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc283)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15_good() : () -> () loc(#loc104)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc90)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc90)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc106)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc91)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc91)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc107)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc284)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15_bad() : () -> () loc(#loc108)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc92)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc110)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc111)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc285)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc285)
    cir.return %17 : !s32i loc(#loc285)
  } loc(#loc280)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc287)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc117)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc288)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc121)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc123)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc123)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc124)
          cir.break loc(#loc125)
        } loc(#loc122)
        cir.case(default, []) {
          %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc127)
          %4 = cir.const #cir.int<100> : !s32i loc(#loc128)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc128)
          %6 = cir.const #cir.int<8> : !u64i loc(#loc290)
          %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc291)
          %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc127)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc292)
          cir.store %9, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc293)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc135)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc136)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc136)
            %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc295)
            cir.if %13 {
              %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc138)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc139)
              %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc140)
              cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc138)
            } loc(#loc296)
          } loc(#loc294)
          cir.break loc(#loc141)
        } loc(#loc126)
        cir.yield loc(#loc119)
      } loc(#loc119)
    } loc(#loc289)
    cir.scope {
      %2 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc298)
      cir.scope {
        %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc300)
        cir.scope {
          %18 = cir.const #cir.int<0> : !s32i loc(#loc152)
          %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc152)
          cir.store %19, %17 : !u64i, !cir.ptr<!u64i> loc(#loc302)
          cir.for : cond {
            %20 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc154)
            %21 = cir.const #cir.int<100> : !s32i loc(#loc155)
            %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc155)
            %23 = cir.cmp(lt, %20, %22) : !u64i, !cir.bool loc(#loc303)
            cir.condition(%23) loc(#loc156)
          } body {
            cir.scope {
              %20 = cir.const #cir.int<0> : !s32i loc(#loc158)
              %21 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc159)
              %22 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc160)
              %23 = cir.ptr_stride(%22 : !cir.ptr<!ty__twoIntsStruct>, %21 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc160)
              %24 = cir.get_member %23[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc59)
              cir.store %20, %24 : !s32i, !cir.ptr<!s32i> loc(#loc305)
              %25 = cir.const #cir.int<0> : !s32i loc(#loc161)
              %26 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc162)
              %27 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc163)
              %28 = cir.ptr_stride(%27 : !cir.ptr<!ty__twoIntsStruct>, %26 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc163)
              %29 = cir.get_member %28[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc63)
              cir.store %25, %29 : !s32i, !cir.ptr<!s32i> loc(#loc306)
            } loc(#loc304)
            cir.yield loc(#loc151)
          } step {
            %20 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc164)
            %21 = cir.unary(inc, %20) : !u64i, !u64i loc(#loc165)
            cir.store %21, %17 : !u64i, !cir.ptr<!u64i> loc(#loc307)
            cir.yield loc(#loc301)
          } loc(#loc301)
        } loc(#loc301)
      } loc(#loc299)
      %3 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc166)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc166)
      %5 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc167)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc167)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc168)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc168)
      %9 = cir.const #cir.int<8> : !u64i loc(#loc308)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc309)
      cir.libc.memcpy %10 bytes from %6 to %4 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc310)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc173)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc174)
      %13 = cir.ptr_stride(%11 : !cir.ptr<!ty__twoIntsStruct>, %12 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc175)
      cir.call @printStructLine(%13) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc176)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc177)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc178)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc178)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc177)
    } loc(#loc297)
    cir.return loc(#loc114)
  } loc(#loc286)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc312)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc183)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc313)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc187)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc189)
          %4 = cir.const #cir.int<100> : !s32i loc(#loc190)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc190)
          %6 = cir.const #cir.int<8> : !u64i loc(#loc315)
          %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc316)
          %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc189)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc317)
          cir.store %9, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc318)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc197)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc198)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc198)
            %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc320)
            cir.if %13 {
              %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc200)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc201)
              %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc202)
              cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc200)
            } loc(#loc321)
          } loc(#loc319)
          cir.break loc(#loc203)
        } loc(#loc188)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc205)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc205)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc206)
          cir.break loc(#loc207)
        } loc(#loc204)
        cir.yield loc(#loc185)
      } loc(#loc185)
    } loc(#loc314)
    cir.scope {
      %2 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc323)
      cir.scope {
        %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc325)
        cir.scope {
          %18 = cir.const #cir.int<0> : !s32i loc(#loc218)
          %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc218)
          cir.store %19, %17 : !u64i, !cir.ptr<!u64i> loc(#loc327)
          cir.for : cond {
            %20 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc220)
            %21 = cir.const #cir.int<100> : !s32i loc(#loc221)
            %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc221)
            %23 = cir.cmp(lt, %20, %22) : !u64i, !cir.bool loc(#loc328)
            cir.condition(%23) loc(#loc222)
          } body {
            cir.scope {
              %20 = cir.const #cir.int<0> : !s32i loc(#loc224)
              %21 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc225)
              %22 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc226)
              %23 = cir.ptr_stride(%22 : !cir.ptr<!ty__twoIntsStruct>, %21 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc226)
              %24 = cir.get_member %23[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc59)
              cir.store %20, %24 : !s32i, !cir.ptr<!s32i> loc(#loc330)
              %25 = cir.const #cir.int<0> : !s32i loc(#loc227)
              %26 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc228)
              %27 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc229)
              %28 = cir.ptr_stride(%27 : !cir.ptr<!ty__twoIntsStruct>, %26 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc229)
              %29 = cir.get_member %28[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc63)
              cir.store %25, %29 : !s32i, !cir.ptr<!s32i> loc(#loc331)
            } loc(#loc329)
            cir.yield loc(#loc217)
          } step {
            %20 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc230)
            %21 = cir.unary(inc, %20) : !u64i, !u64i loc(#loc231)
            cir.store %21, %17 : !u64i, !cir.ptr<!u64i> loc(#loc332)
            cir.yield loc(#loc326)
          } loc(#loc326)
        } loc(#loc326)
      } loc(#loc324)
      %3 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc232)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc232)
      %5 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc233)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc233)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc234)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc234)
      %9 = cir.const #cir.int<8> : !u64i loc(#loc333)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc334)
      cir.libc.memcpy %10 bytes from %6 to %4 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc335)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc239)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc240)
      %13 = cir.ptr_stride(%11 : !cir.ptr<!ty__twoIntsStruct>, %12 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc241)
      cir.call @printStructLine(%13) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc242)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc243)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc244)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc244)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc243)
    } loc(#loc322)
    cir.return loc(#loc180)
  } loc(#loc311)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":34:19)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":21:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":53:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":23:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":23:21)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":24:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":24:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":25:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":36:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":25:12)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":27:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":29:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":29:40)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":29:43)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":29:63)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":29:64)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":29:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":30:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":30:37)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":30:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":30:21)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":30:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":30:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":30:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":30:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":31:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":32:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":34:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":35:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":37:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":52:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":38:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":38:33)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":39:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":47:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":40:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":40:20)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":42:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":46:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":42:22)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":42:18)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":42:25)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":42:29)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":42:27)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":43:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":44:36)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":44:24)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":44:17)
#loc59 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":45:36)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":45:24)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":45:17)
#loc63 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":42:35)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":42:34)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":49:16)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":49:22)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":49:30)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":49:34)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":49:54)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":49:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":49:55)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":50:26)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":50:31)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":50:32)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":50:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":51:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":51:14)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":129:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":133:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":131:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":131:14)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":132:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":132:14)
#loc85 = loc("/usr/include/stdlib.h":575:1)
#loc86 = loc("/usr/include/stdlib.h":575:41)
#loc87 = loc("/usr/include/time.h":76:1)
#loc88 = loc("/usr/include/time.h":76:38)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":150:15)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":152:15)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":155:15)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":157:15)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":145:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":160:1)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":146:1)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":148:27)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":148:22)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":148:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":150:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":151:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":151:71)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":152:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":155:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":156:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":156:70)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":157:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":159:12)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":159:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":60:1)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":92:1)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":62:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":62:21)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":63:12)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":63:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":64:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":75:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":64:12)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":66:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":68:19)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":68:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":69:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":70:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":72:33)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":72:40)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":72:44)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":72:64)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":72:65)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":72:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":73:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":73:37)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":73:13)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":73:21)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":73:27)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":73:28)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":73:34)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":73:33)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":74:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":76:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":91:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":77:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":77:33)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":78:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":86:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":79:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":79:20)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":81:13)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":85:13)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":81:22)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":81:18)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":81:25)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":81:29)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":81:27)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":82:13)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":83:36)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":83:24)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":83:17)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":84:36)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":84:24)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":84:17)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":81:35)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":81:34)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":88:16)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":88:22)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":88:30)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":88:34)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":88:54)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":88:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":88:55)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":89:26)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":89:31)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":89:32)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":89:9)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":90:9)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":90:14)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":95:1)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":127:1)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":97:5)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":97:21)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":98:12)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":98:5)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":99:5)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":110:5)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":99:12)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":101:5)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":103:33)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":103:40)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":103:44)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":103:64)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":103:65)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":103:9)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":104:9)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":104:37)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":104:13)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":104:21)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":104:27)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":104:28)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":104:34)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":104:33)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":105:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":106:5)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":108:19)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":108:9)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":109:9)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":111:5)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":126:5)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":112:9)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":112:33)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":113:9)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":121:9)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":114:13)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":114:20)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":116:13)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":120:13)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":116:22)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":116:18)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":116:25)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":116:29)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":116:27)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":117:13)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":118:36)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":118:24)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":118:17)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":119:36)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":119:24)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":119:17)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":116:35)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":116:34)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":123:16)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":123:22)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":123:30)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":123:34)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":123:54)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":123:9)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":123:55)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":124:26)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":124:31)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":124:32)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":124:9)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":125:9)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c":125:14)
#loc245 = loc(fused[#loc1, #loc2])
#loc246 = loc(fused[#loc3, #loc4])
#loc247 = loc(fused[#loc5, #loc6])
#loc248 = loc(fused[#loc8, #loc9])
#loc249 = loc(fused[#loc10, #loc11])
#loc250 = loc(fused[#loc12, #loc13])
#loc251 = loc(fused[#loc14, #loc15])
#loc252 = loc(fused[#loc17, #loc16])
#loc253 = loc(fused[#loc18, #loc19])
#loc254 = loc(fused[#loc24, #loc25])
#loc255 = loc(fused[#loc23, #loc25])
#loc256 = loc(fused[#loc22, #loc26])
#loc257 = loc(fused[#loc27, #loc26])
#loc258 = loc(fused[#loc28, #loc29])
#loc259 = loc(fused[#loc30, #loc31])
#loc260 = loc(fused[#loc32, #loc29])
#loc261 = loc(fused[#loc40, #loc41])
#loc262 = loc(fused[#loc42, #loc43])
#loc263 = loc(fused[#loc44, #loc45])
#loc264 = loc(fused[#loc46, #loc47])
#loc265 = loc(fused[#loc48, #loc49])
#loc266 = loc(fused[#loc51, #loc50])
#loc267 = loc(fused[#loc52, #loc53])
#loc268 = loc(fused[#loc55, #loc49])
#loc269 = loc(fused[#loc58, #loc56])
#loc270 = loc(fused[#loc62, #loc60])
#loc271 = loc(fused[#loc65, #loc64])
#loc272 = loc(fused[#loc69, #loc70])
#loc273 = loc(fused[#loc68, #loc70])
#loc274 = loc(fused[#loc71, #loc72])
#loc275 = loc(fused[#loc79, #loc80])
#loc276 = loc(fused[#loc81, #loc82])
#loc277 = loc(fused[#loc83, #loc84])
#loc278 = loc(fused[#loc85, #loc86])
#loc279 = loc(fused[#loc87, #loc88])
#loc280 = loc(fused[#loc93, #loc94])
#loc283 = loc(fused[#loc104, #loc105])
#loc284 = loc(fused[#loc108, #loc109])
#loc285 = loc(fused[#loc112, #loc111])
#loc286 = loc(fused[#loc113, #loc114])
#loc287 = loc(fused[#loc115, #loc116])
#loc288 = loc(fused[#loc118, #loc117])
#loc289 = loc(fused[#loc119, #loc120])
#loc290 = loc(fused[#loc129, #loc130])
#loc291 = loc(fused[#loc128, #loc130])
#loc292 = loc(fused[#loc127, #loc131])
#loc293 = loc(fused[#loc132, #loc131])
#loc294 = loc(fused[#loc133, #loc134])
#loc295 = loc(fused[#loc135, #loc136])
#loc296 = loc(fused[#loc137, #loc134])
#loc297 = loc(fused[#loc142, #loc143])
#loc298 = loc(fused[#loc144, #loc145])
#loc299 = loc(fused[#loc146, #loc147])
#loc300 = loc(fused[#loc148, #loc149])
#loc301 = loc(fused[#loc150, #loc151])
#loc302 = loc(fused[#loc153, #loc152])
#loc303 = loc(fused[#loc154, #loc155])
#loc304 = loc(fused[#loc157, #loc151])
#loc305 = loc(fused[#loc160, #loc158])
#loc306 = loc(fused[#loc163, #loc161])
#loc307 = loc(fused[#loc165, #loc164])
#loc308 = loc(fused[#loc169, #loc170])
#loc309 = loc(fused[#loc168, #loc170])
#loc310 = loc(fused[#loc171, #loc172])
#loc311 = loc(fused[#loc179, #loc180])
#loc312 = loc(fused[#loc181, #loc182])
#loc313 = loc(fused[#loc184, #loc183])
#loc314 = loc(fused[#loc185, #loc186])
#loc315 = loc(fused[#loc191, #loc192])
#loc316 = loc(fused[#loc190, #loc192])
#loc317 = loc(fused[#loc189, #loc193])
#loc318 = loc(fused[#loc194, #loc193])
#loc319 = loc(fused[#loc195, #loc196])
#loc320 = loc(fused[#loc197, #loc198])
#loc321 = loc(fused[#loc199, #loc196])
#loc322 = loc(fused[#loc208, #loc209])
#loc323 = loc(fused[#loc210, #loc211])
#loc324 = loc(fused[#loc212, #loc213])
#loc325 = loc(fused[#loc214, #loc215])
#loc326 = loc(fused[#loc216, #loc217])
#loc327 = loc(fused[#loc219, #loc218])
#loc328 = loc(fused[#loc220, #loc221])
#loc329 = loc(fused[#loc223, #loc217])
#loc330 = loc(fused[#loc226, #loc224])
#loc331 = loc(fused[#loc229, #loc227])
#loc332 = loc(fused[#loc231, #loc230])
#loc333 = loc(fused[#loc235, #loc236])
#loc334 = loc(fused[#loc234, #loc236])
#loc335 = loc(fused[#loc237, #loc238])
