!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc50 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":121:10)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":121:14)
#loc52 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":121:20)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":121:32)
#loc147 = loc(fused[#loc50, #loc51])
#loc148 = loc(fused[#loc52, #loc53])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_else_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc130)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc131)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Inside the else statement\00" : !cir.array<!s8i x 26>> : !cir.array<!s8i x 26> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc6)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_else_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc133)
    cir.br ^bb1 loc(#loc134)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<6> : !s32i loc(#loc14)
    cir.br ^bb2 loc(#loc12)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %1 : !s32i, ^bb12 [
      6: ^bb4
    ] loc(#loc12)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc15)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc135)
  ^bb5:  // pred: ^bb4
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %3 = cir.const #cir.int<3> : !s32i loc(#loc19)
    %4 = cir.binop(rem, %2, %3) : !s32i loc(#loc136)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc137)
    cir.br ^bb6 loc(#loc138)
  ^bb6:  // pred: ^bb5
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc25)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc139)
    cir.brcond %7 ^bb7, ^bb8 loc(#loc140)
  ^bb7:  // pred: ^bb6
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc5)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc29)
    cir.br ^bb9 loc(#loc27)
  ^bb8:  // pred: ^bb6
    cir.br ^bb9 loc(#loc23)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc23)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc17)
  ^bb11:  // pred: ^bb10
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc6)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc6)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc30)
    cir.br ^bb13 loc(#loc31)
  ^bb12:  // pred: ^bb2
    %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc32)
    cir.br ^bb13 loc(#loc33)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc13)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc9)
  } loc(#loc132)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_else_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc142)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc143)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc35)
  } loc(#loc141)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc144)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc145)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc47)
  cir.func @main(%arg0: !s32i loc(fused[#loc50, #loc51]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc52, #loc53])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc147)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc148)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc49)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc54)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc54)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc55)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc56)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc56)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc57)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc44)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %8 = cir.get_global @CWE398_Poor_Code_Quality__empty_else_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc149)
    cir.call @CWE398_Poor_Code_Quality__empty_else_15_good() : () -> () loc(#loc59)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc45)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc46)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %13 = cir.get_global @CWE398_Poor_Code_Quality__empty_else_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc150)
    cir.call @CWE398_Poor_Code_Quality__empty_else_15_bad() : () -> () loc(#loc63)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc47)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc66)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    cir.return %17 : !s32i loc(#loc151)
  } loc(#loc146)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Inside the if statement\00" : !cir.array<!s8i x 24>> : !cir.array<!s8i x 24> {alignment = 1 : i64} loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc69)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc153)
    cir.br ^bb1 loc(#loc154)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<5> : !s32i loc(#loc76)
    cir.br ^bb2 loc(#loc74)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %1 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc74)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc77)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %2 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc78)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    cir.br ^bb13 loc(#loc80)
  ^bb5:  // pred: ^bb2
    cir.br ^bb6 loc(#loc155)
  ^bb6:  // pred: ^bb5
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
    %5 = cir.const #cir.int<3> : !s32i loc(#loc84)
    %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc156)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc157)
    cir.br ^bb7 loc(#loc158)
  ^bb7:  // pred: ^bb6
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc90)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc159)
    cir.brcond %9 ^bb8, ^bb9 loc(#loc160)
  ^bb8:  // pred: ^bb7
    %10 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 24>> loc(#loc68)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 24>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    cir.br ^bb10 loc(#loc92)
  ^bb9:  // pred: ^bb7
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc95)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc95)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    cir.br ^bb10 loc(#loc88)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc88)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc82)
  ^bb12:  // pred: ^bb11
    %14 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc69)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc97)
    cir.br ^bb13 loc(#loc98)
  ^bb13:  // 2 preds: ^bb4, ^bb12
    cir.br ^bb14 loc(#loc75)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc71)
  } loc(#loc152)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc162)
    cir.br ^bb1 loc(#loc163)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<6> : !s32i loc(#loc105)
    cir.br ^bb2 loc(#loc103)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %1 : !s32i, ^bb12 [
      6: ^bb4
    ] loc(#loc103)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc106)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc164)
  ^bb5:  // pred: ^bb4
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
    %3 = cir.const #cir.int<3> : !s32i loc(#loc110)
    %4 = cir.binop(rem, %2, %3) : !s32i loc(#loc165)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    cir.br ^bb6 loc(#loc167)
  ^bb6:  // pred: ^bb5
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc115)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc116)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc168)
    cir.brcond %7 ^bb7, ^bb8 loc(#loc169)
  ^bb7:  // pred: ^bb6
    %8 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 24>> loc(#loc120)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 24>>), !cir.ptr<!s8i> loc(#loc120)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    cir.br ^bb9 loc(#loc118)
  ^bb8:  // pred: ^bb6
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc122)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc122)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc123)
    cir.br ^bb9 loc(#loc114)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc114)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc108)
  ^bb11:  // pred: ^bb10
    %12 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc124)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc124)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc125)
    cir.br ^bb13 loc(#loc126)
  ^bb12:  // pred: ^bb2
    %14 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc127)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc127)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc128)
    cir.br ^bb13 loc(#loc129)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc104)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc100)
  } loc(#loc161)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_else_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":31:23)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":37:15)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":41:19)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":20:1)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":44:1)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":27:9)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":27:13)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":22:5)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":43:5)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":22:12)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":24:5)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":26:5)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":36:5)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":28:14)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":28:23)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":28:9)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":28:24)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":29:9)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":35:9)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":29:13)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":29:18)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":30:9)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":32:9)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":34:9)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":31:13)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":37:5)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":38:5)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":41:9)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":42:9)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":106:1)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":110:1)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":108:5)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":108:11)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":109:5)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":109:11)
#loc40 = loc("/usr/include/stdlib.h":575:1)
#loc41 = loc("/usr/include/stdlib.h":575:41)
#loc42 = loc("/usr/include/time.h":76:1)
#loc43 = loc("/usr/include/time.h":76:38)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":126:15)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":128:15)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":131:15)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":133:15)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":121:1)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":136:1)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":122:1)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":124:27)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":124:22)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":124:5)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":126:5)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":127:5)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":127:50)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":128:5)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":131:5)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":132:5)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":132:49)
#loc65 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":133:5)
#loc66 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":135:12)
#loc67 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":135:5)
#loc68 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":66:23)
#loc69 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":73:15)
#loc70 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":51:1)
#loc71 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":76:1)
#loc72 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":62:9)
#loc73 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":62:13)
#loc74 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":53:5)
#loc75 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":75:5)
#loc76 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":53:12)
#loc77 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":55:5)
#loc78 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":57:19)
#loc79 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":57:9)
#loc80 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":58:9)
#loc81 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":61:5)
#loc82 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":72:5)
#loc83 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":63:14)
#loc84 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":63:23)
#loc85 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":63:9)
#loc86 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":63:24)
#loc87 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":64:9)
#loc88 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":71:9)
#loc89 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":64:13)
#loc90 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":64:18)
#loc91 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":65:9)
#loc92 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":67:9)
#loc93 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":69:9)
#loc94 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":66:13)
#loc95 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":70:23)
#loc96 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":70:13)
#loc97 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":73:5)
#loc98 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":74:5)
#loc99 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":79:1)
#loc100 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":104:1)
#loc101 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":86:9)
#loc102 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":86:13)
#loc103 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":81:5)
#loc104 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":103:5)
#loc105 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":81:12)
#loc106 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":83:5)
#loc107 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":85:5)
#loc108 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":96:5)
#loc109 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":87:14)
#loc110 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":87:23)
#loc111 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":87:9)
#loc112 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":87:24)
#loc113 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":88:9)
#loc114 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":95:9)
#loc115 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":88:13)
#loc116 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":88:18)
#loc117 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":89:9)
#loc118 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":91:9)
#loc119 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":93:9)
#loc120 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":90:23)
#loc121 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":90:13)
#loc122 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":94:23)
#loc123 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":94:13)
#loc124 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":97:15)
#loc125 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":97:5)
#loc126 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":98:5)
#loc127 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":101:19)
#loc128 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":101:9)
#loc129 = loc("CWE398_Poor_Code_Quality__empty_else_15.c":102:9)
#loc130 = loc(fused[#loc1, #loc2])
#loc131 = loc(fused[#loc3, #loc4])
#loc132 = loc(fused[#loc8, #loc9])
#loc133 = loc(fused[#loc10, #loc11])
#loc134 = loc(fused[#loc12, #loc13])
#loc135 = loc(fused[#loc16, #loc17])
#loc136 = loc(fused[#loc18, #loc19])
#loc137 = loc(fused[#loc20, #loc21])
#loc138 = loc(fused[#loc22, #loc23])
#loc139 = loc(fused[#loc24, #loc25])
#loc140 = loc(fused[#loc26, #loc27, #loc28, #loc23])
#loc141 = loc(fused[#loc34, #loc35])
#loc142 = loc(fused[#loc36, #loc37])
#loc143 = loc(fused[#loc38, #loc39])
#loc144 = loc(fused[#loc40, #loc41])
#loc145 = loc(fused[#loc42, #loc43])
#loc146 = loc(fused[#loc48, #loc49])
#loc149 = loc(fused[#loc59, #loc60])
#loc150 = loc(fused[#loc63, #loc64])
#loc151 = loc(fused[#loc67, #loc66])
#loc152 = loc(fused[#loc70, #loc71])
#loc153 = loc(fused[#loc72, #loc73])
#loc154 = loc(fused[#loc74, #loc75])
#loc155 = loc(fused[#loc81, #loc82])
#loc156 = loc(fused[#loc83, #loc84])
#loc157 = loc(fused[#loc85, #loc86])
#loc158 = loc(fused[#loc87, #loc88])
#loc159 = loc(fused[#loc89, #loc90])
#loc160 = loc(fused[#loc91, #loc92, #loc93, #loc88])
#loc161 = loc(fused[#loc99, #loc100])
#loc162 = loc(fused[#loc101, #loc102])
#loc163 = loc(fused[#loc103, #loc104])
#loc164 = loc(fused[#loc107, #loc108])
#loc165 = loc(fused[#loc109, #loc110])
#loc166 = loc(fused[#loc111, #loc112])
#loc167 = loc(fused[#loc113, #loc114])
#loc168 = loc(fused[#loc115, #loc116])
#loc169 = loc(fused[#loc117, #loc118, #loc119, #loc114])
