!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":22:64)
#loc6 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":22:69)
#loc14 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":34:68)
#loc15 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":34:73)
#loc23 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":42:68)
#loc24 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":42:73)
#loc32 = loc(fused[#loc5, #loc6])
#loc36 = loc(fused[#loc14, #loc15])
#loc40 = loc(fused[#loc23, #loc24])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_multiply_61b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc30)
  cir.func  @CWE190_Integer_Overflow__char_rand_multiply_61b_badSource(%arg0: !s8i loc(fused[#loc5, #loc6])) -> !s8i extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc32)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["__retval"] {alignment = 1 : i64} loc(#loc4)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc7)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc8)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc8)
    %6 = cir.ternary(%5, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc8)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc8)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc8)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc8)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc8)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc8)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc8)
      cir.yield %22 : !u32i loc(#loc8)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc8)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc8)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc8)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc8)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc8)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc8)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc8)
      %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc8)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc8)
      %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc8)
      cir.yield %26 : !u32i loc(#loc8)
    }) : (!cir.bool) -> !u32i loc(#loc8)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc8)
    %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc8)
    cir.store %8, %0 : !s8i, !cir.ptr<!s8i> loc(#loc33)
    %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc10)
    cir.store %9, %1 : !s8i, !cir.ptr<!s8i> loc(#loc34)
    %10 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc34)
    cir.return %10 : !s8i loc(#loc34)
  } loc(#loc31)
  cir.func  @CWE190_Integer_Overflow__char_rand_multiply_61b_goodG2BSource(%arg0: !s8i loc(fused[#loc14, #loc15])) -> !s8i extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc36)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["__retval"] {alignment = 1 : i64} loc(#loc13)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc16)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc17)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc17)
    cir.store %3, %0 : !s8i, !cir.ptr<!s8i> loc(#loc37)
    %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc19)
    cir.store %4, %1 : !s8i, !cir.ptr<!s8i> loc(#loc38)
    %5 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc38)
    cir.return %5 : !s8i loc(#loc38)
  } loc(#loc35)
  cir.func  @CWE190_Integer_Overflow__char_rand_multiply_61b_goodB2GSource(%arg0: !s8i loc(fused[#loc23, #loc24])) -> !s8i extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc40)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["__retval"] {alignment = 1 : i64} loc(#loc22)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc25)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc26)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc26)
    %6 = cir.ternary(%5, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc26)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc26)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc26)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc26)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc26)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc26)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc26)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc26)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc26)
      cir.yield %22 : !u32i loc(#loc26)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc26)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc26)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc26)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc26)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc26)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc26)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc26)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc26)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc26)
      %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc26)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc26)
      %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc26)
      %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc26)
      cir.yield %26 : !u32i loc(#loc26)
    }) : (!cir.bool) -> !u32i loc(#loc26)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc26)
    %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc26)
    cir.store %8, %0 : !s8i, !cir.ptr<!s8i> loc(#loc41)
    %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc28)
    cir.store %9, %1 : !s8i, !cir.ptr<!s8i> loc(#loc42)
    %10 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc42)
    cir.return %10 : !s8i loc(#loc42)
  } loc(#loc39)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_multiply_61b.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":27:1)
#loc7 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":23:1)
#loc8 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":25:18)
#loc9 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":25:5)
#loc10 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":26:12)
#loc11 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":26:5)
#loc12 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":34:1)
#loc13 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":39:1)
#loc16 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":35:1)
#loc17 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":37:12)
#loc18 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":37:5)
#loc19 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":38:12)
#loc20 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":38:5)
#loc21 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":42:1)
#loc22 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":47:1)
#loc25 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":43:1)
#loc26 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":45:18)
#loc27 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":45:5)
#loc28 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":46:12)
#loc29 = loc("CWE190_Integer_Overflow__char_rand_multiply_61b.c":46:5)
#loc30 = loc(fused[#loc1, #loc2])
#loc31 = loc(fused[#loc3, #loc4])
#loc33 = loc(fused[#loc9, #loc8])
#loc34 = loc(fused[#loc11, #loc10])
#loc35 = loc(fused[#loc12, #loc13])
#loc37 = loc(fused[#loc18, #loc17])
#loc38 = loc(fused[#loc20, #loc19])
#loc39 = loc(fused[#loc21, #loc22])
#loc41 = loc(fused[#loc27, #loc26])
#loc42 = loc(fused[#loc29, #loc28])
