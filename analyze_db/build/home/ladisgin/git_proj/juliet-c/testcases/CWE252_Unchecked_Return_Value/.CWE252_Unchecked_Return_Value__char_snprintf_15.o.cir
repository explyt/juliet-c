!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_snprintf_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc95)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\0A\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc4)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc96)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE252_Unchecked_Return_Value__char_snprintf_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc98)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc99)
    cir.br ^bb1 loc(#loc100)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<6> : !s32i loc(#loc16)
    cir.br ^bb2 loc(#loc14)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb7 [
      6: ^bb4
    ] loc(#loc14)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc101)
  ^bb5:  // pred: ^bb4
    %3 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc98)
    cir.store %3, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc98)
    %4 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc13)
    cir.store %4, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc99)
    %5 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc20)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc21)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc22)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc22)
    %9 = cir.const #cir.int<6> : !u64i loc(#loc102)
    %10 = cir.binop(sub, %8, %9) : !u64i loc(#loc103)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc25)
    %13 = cir.binop(sub, %10, %12) : !u64i loc(#loc104)
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc3)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc3)
    %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc4)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc4)
    %18 = cir.call @snprintf(%6, %13, %15, %17) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc20)
    cir.br ^bb6 loc(#loc19)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8 loc(#loc26)
  ^bb7:  // pred: ^bb2
    %19 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc27)
    cir.br ^bb8 loc(#loc28)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc15)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc9)
  } loc(#loc97)
  cir.func no_proto @CWE252_Unchecked_Return_Value__char_snprintf_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc106)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc107)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    cir.return loc(#loc30)
  } loc(#loc105)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"snprintf failed!\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc35)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc109)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc110)
    cir.br ^bb1 loc(#loc111)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<5> : !s32i loc(#loc44)
    cir.br ^bb2 loc(#loc42)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc42)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc45)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %3 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc46)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc47)
    cir.br ^bb12 loc(#loc48)
  ^bb5:  // pred: ^bb2
    cir.br ^bb6 loc(#loc112)
  ^bb6:  // pred: ^bb5
    %5 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc109)
    cir.store %5, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc109)
    %6 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc41)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc110)
    cir.br ^bb7 loc(#loc113)
  ^bb7:  // pred: ^bb6
    %7 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc53)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
    %9 = cir.const #cir.int<100> : !s32i loc(#loc55)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc55)
    %11 = cir.const #cir.int<6> : !u64i loc(#loc114)
    %12 = cir.binop(sub, %10, %11) : !u64i loc(#loc115)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc58)
    %15 = cir.binop(sub, %12, %14) : !u64i loc(#loc116)
    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc59)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc59)
    %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc60)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc60)
    %20 = cir.call @snprintf(%8, %15, %17, %19) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc53)
    %21 = cir.const #cir.int<0> : !s32i loc(#loc61)
    %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc117)
    cir.brcond %22 ^bb8, ^bb9 loc(#loc118)
  ^bb8:  // pred: ^bb7
    %23 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc35)
    %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    cir.br ^bb9 loc(#loc52)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc52)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc50)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc64)
  ^bb12:  // 2 preds: ^bb4, ^bb11
    cir.br ^bb13 loc(#loc43)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc37)
  } loc(#loc108)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc120)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc121)
    cir.br ^bb1 loc(#loc122)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<6> : !s32i loc(#loc73)
    cir.br ^bb2 loc(#loc71)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb11 [
      6: ^bb4
    ] loc(#loc71)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc74)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc123)
  ^bb5:  // pred: ^bb4
    %3 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc120)
    cir.store %3, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc120)
    %4 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc70)
    cir.store %4, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc121)
    cir.br ^bb6 loc(#loc124)
  ^bb6:  // pred: ^bb5
    %5 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc79)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc80)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc81)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc81)
    %9 = cir.const #cir.int<6> : !u64i loc(#loc125)
    %10 = cir.binop(sub, %8, %9) : !u64i loc(#loc126)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc84)
    %13 = cir.binop(sub, %10, %12) : !u64i loc(#loc127)
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc85)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc85)
    %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc86)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc86)
    %18 = cir.call @snprintf(%6, %13, %15, %17) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc79)
    %19 = cir.const #cir.int<0> : !s32i loc(#loc87)
    %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc128)
    cir.brcond %20 ^bb7, ^bb8 loc(#loc129)
  ^bb7:  // pred: ^bb6
    %21 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc89)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    cir.br ^bb8 loc(#loc78)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc78)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc76)
  ^bb10:  // pred: ^bb9
    cir.br ^bb12 loc(#loc91)
  ^bb11:  // pred: ^bb2
    %23 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc92)
    %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    cir.br ^bb12 loc(#loc94)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc72)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc66)
  } loc(#loc119)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_snprintf_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":385:1)
#loc2 = loc("/usr/include/stdio.h":387:62)
#loc3 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":43:42)
#loc4 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":43:50)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":48:19)
#loc8 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":32:1)
#loc9 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":51:1)
#loc10 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":40:9)
#loc11 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":40:32)
#loc12 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":41:9)
#loc13 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":41:23)
#loc14 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":34:5)
#loc15 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":50:5)
#loc16 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":34:12)
#loc17 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":36:5)
#loc18 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":37:5)
#loc19 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":44:5)
#loc20 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":43:9)
#loc21 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":43:18)
#loc22 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":43:23)
#loc23 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":43:27)
#loc24 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":43:37)
#loc25 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":43:39)
#loc26 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":45:5)
#loc27 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":48:9)
#loc28 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":49:9)
#loc29 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":107:1)
#loc30 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":111:1)
#loc31 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":109:5)
#loc32 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":109:11)
#loc33 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":110:5)
#loc34 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":110:11)
#loc35 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":75:23)
#loc36 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":58:1)
#loc37 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":80:1)
#loc38 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":70:9)
#loc39 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":70:32)
#loc40 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":71:9)
#loc41 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":71:23)
#loc42 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":60:5)
#loc43 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":79:5)
#loc44 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":60:12)
#loc45 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":62:5)
#loc46 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":64:19)
#loc47 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":64:9)
#loc48 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":65:9)
#loc49 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":67:5)
#loc50 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":77:5)
#loc51 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":73:9)
#loc52 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":76:9)
#loc53 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":73:13)
#loc54 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":73:22)
#loc55 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":73:27)
#loc56 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":73:31)
#loc57 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":73:41)
#loc58 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":73:43)
#loc59 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":73:46)
#loc60 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":73:54)
#loc61 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":73:61)
#loc62 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":74:9)
#loc63 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":75:13)
#loc64 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":78:5)
#loc65 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":83:1)
#loc66 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":105:1)
#loc67 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":91:9)
#loc68 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":91:32)
#loc69 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":92:9)
#loc70 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":92:23)
#loc71 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":85:5)
#loc72 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":104:5)
#loc73 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":85:12)
#loc74 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":87:5)
#loc75 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":88:5)
#loc76 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":98:5)
#loc77 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":94:9)
#loc78 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":97:9)
#loc79 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":94:13)
#loc80 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":94:22)
#loc81 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":94:27)
#loc82 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":94:31)
#loc83 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":94:41)
#loc84 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":94:43)
#loc85 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":94:46)
#loc86 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":94:54)
#loc87 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":94:61)
#loc88 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":95:9)
#loc89 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":96:23)
#loc90 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":96:13)
#loc91 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":99:5)
#loc92 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":102:19)
#loc93 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":102:9)
#loc94 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":103:9)
#loc95 = loc(fused[#loc1, #loc2])
#loc96 = loc(fused[#loc5, #loc6])
#loc97 = loc(fused[#loc8, #loc9])
#loc98 = loc(fused[#loc10, #loc11])
#loc99 = loc(fused[#loc12, #loc13])
#loc100 = loc(fused[#loc14, #loc15])
#loc101 = loc(fused[#loc18, #loc19])
#loc102 = loc(fused[#loc23, #loc24])
#loc103 = loc(fused[#loc22, #loc24])
#loc104 = loc(fused[#loc22, #loc25])
#loc105 = loc(fused[#loc29, #loc30])
#loc106 = loc(fused[#loc31, #loc32])
#loc107 = loc(fused[#loc33, #loc34])
#loc108 = loc(fused[#loc36, #loc37])
#loc109 = loc(fused[#loc38, #loc39])
#loc110 = loc(fused[#loc40, #loc41])
#loc111 = loc(fused[#loc42, #loc43])
#loc112 = loc(fused[#loc49, #loc50])
#loc113 = loc(fused[#loc51, #loc52])
#loc114 = loc(fused[#loc56, #loc57])
#loc115 = loc(fused[#loc55, #loc57])
#loc116 = loc(fused[#loc55, #loc58])
#loc117 = loc(fused[#loc53, #loc61])
#loc118 = loc(fused[#loc62, #loc52])
#loc119 = loc(fused[#loc65, #loc66])
#loc120 = loc(fused[#loc67, #loc68])
#loc121 = loc(fused[#loc69, #loc70])
#loc122 = loc(fused[#loc71, #loc72])
#loc123 = loc(fused[#loc75, #loc76])
#loc124 = loc(fused[#loc77, #loc78])
#loc125 = loc(fused[#loc82, #loc83])
#loc126 = loc(fused[#loc81, #loc83])
#loc127 = loc(fused[#loc81, #loc84])
#loc128 = loc(fused[#loc79, #loc87])
#loc129 = loc(fused[#loc88, #loc78])
