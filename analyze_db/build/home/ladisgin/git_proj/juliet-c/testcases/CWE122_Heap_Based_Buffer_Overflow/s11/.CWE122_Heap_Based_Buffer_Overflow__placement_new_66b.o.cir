!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc1 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":25:14)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":25:31)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":50:18)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":50:35)
#loc56 = loc("../../../testcasesupport/std_testcase.h":68:7)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":70:18)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":70:35)
!ty_OneIntClass = !cir.struct<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
#loc83 = loc(fused[#loc8, #loc9])
#loc91 = loc(fused[#loc34, #loc35])
#loc99 = loc(fused[#loc59, #loc60])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func linkonce_odr @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc1)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc1)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc1)
    cir.return loc(#loc1)
  } loc(#loc1)
  cir.func private @printIntLine(!s32i) loc(#loc80)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr1) loc(#loc81)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_667badSinkEPPc(%arg0: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc8, #loc9])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc84)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc83)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc85)
    cir.store %arg0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc14)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc15)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc16)
    %5 = cir.ptr_stride(%3 : !cir.ptr<!cir.ptr<!s8i>>, %4 : !s32i), !cir.ptr<!cir.ptr<!s8i>> loc(#loc13)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc15)
    cir.store %6, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc85)
    cir.br ^bb1 loc(#loc86)
  ^bb1:  // pred: ^bb0
    %7 = cir.const #cir.int<8> : !u64i loc(#loc87)
    %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc20)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc87)
    cir.call @_ZN12TwoIntsClassC2Ev(%10) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr1) loc(#loc11)
    cir.store %10, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc84)
    %11 = cir.const #cir.int<5> : !s32i loc(#loc21)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc22)
    %13 = cir.get_member %12[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc23)
    cir.store %11, %13 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    %14 = cir.const #cir.int<10> : !s32i loc(#loc24)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc25)
    %16 = cir.get_member %15[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc26)
    cir.store %14, %16 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc27)
    %18 = cir.get_member %17[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc23)
    %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc29)
    %20 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc30)
    %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc31)
    cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc30)
    cir.br ^bb2 loc(#loc18)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc7)
  } loc(#loc82)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_6611goodG2BSinkEPPc(%arg0: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc34, #loc35])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc92)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc91)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc93)
    cir.store %arg0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc40)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc41)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc42)
    %5 = cir.ptr_stride(%3 : !cir.ptr<!cir.ptr<!s8i>>, %4 : !s32i), !cir.ptr<!cir.ptr<!s8i>> loc(#loc39)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
    cir.store %6, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc93)
    cir.br ^bb1 loc(#loc94)
  ^bb1:  // pred: ^bb0
    %7 = cir.const #cir.int<8> : !u64i loc(#loc95)
    %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc46)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc95)
    cir.call @_ZN12TwoIntsClassC2Ev(%10) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr1) loc(#loc37)
    cir.store %10, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc92)
    %11 = cir.const #cir.int<5> : !s32i loc(#loc47)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc48)
    %13 = cir.get_member %12[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc23)
    cir.store %11, %13 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    %14 = cir.const #cir.int<10> : !s32i loc(#loc49)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc50)
    %16 = cir.get_member %15[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc26)
    cir.store %14, %16 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc51)
    %18 = cir.get_member %17[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc23)
    %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc53)
    %20 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc54)
    %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc55)
    cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc54)
    cir.br ^bb2 loc(#loc44)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc33)
  } loc(#loc90)
  cir.func linkonce_odr @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc56)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc56)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc56)
    cir.return loc(#loc56)
  } loc(#loc56)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_6611goodB2GSinkEPPc(%arg0: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc59, #loc60])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc100)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc99)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc101)
    cir.store %arg0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc65)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc66)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc67)
    %5 = cir.ptr_stride(%3 : !cir.ptr<!cir.ptr<!s8i>>, %4 : !s32i), !cir.ptr<!cir.ptr<!s8i>> loc(#loc64)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc66)
    cir.store %6, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc101)
    cir.br ^bb1 loc(#loc102)
  ^bb1:  // pred: ^bb0
    %7 = cir.const #cir.int<4> : !u64i loc(#loc103)
    %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc71)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc71)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc103)
    cir.call @_ZN11OneIntClassC2Ev(%10) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr1) loc(#loc62)
    cir.store %10, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc100)
    %11 = cir.const #cir.int<5> : !s32i loc(#loc72)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc73)
    %13 = cir.get_member %12[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc74)
    cir.store %11, %13 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc75)
    %15 = cir.get_member %14[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc74)
    %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc76)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc77)
    %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc78)
    %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc79)
    cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc78)
    cir.br ^bb2 loc(#loc69)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc58)
  } loc(#loc98)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":0:0)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc4 = loc("/usr/include/stdlib.h":687:1)
#loc5 = loc("/usr/include/stdlib.h":687:32)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":25:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":43:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":35:9)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":35:45)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":28:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":28:30)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":26:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":28:19)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":28:29)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":29:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":42:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":35:35)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":35:39)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":37:28)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":37:9)
#loc23 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":38:28)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":38:9)
#loc26 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":39:22)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":39:32)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":39:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":41:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":41:14)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":50:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":67:1)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":59:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":59:45)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":52:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":52:30)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":51:1)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":52:19)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":52:29)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":53:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":66:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":59:35)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":59:39)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":61:28)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":61:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":62:28)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":62:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":63:22)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":63:32)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":63:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":65:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":65:14)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":70:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":85:1)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":79:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":79:44)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":72:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":72:30)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":71:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":72:19)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":72:29)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":73:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":84:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":79:34)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":79:38)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":81:28)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":81:9)
#loc74 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":82:22)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":82:32)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":82:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":83:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_66b.cpp":83:14)
#loc80 = loc(fused[#loc2, #loc3])
#loc81 = loc(fused[#loc4, #loc5])
#loc82 = loc(fused[#loc6, #loc7])
#loc84 = loc(fused[#loc10, #loc11])
#loc85 = loc(fused[#loc12, #loc13])
#loc86 = loc(fused[#loc17, #loc18])
#loc87 = loc(fused[#loc19, #loc11])
#loc88 = loc(fused[#loc22, #loc21])
#loc89 = loc(fused[#loc25, #loc24])
#loc90 = loc(fused[#loc32, #loc33])
#loc92 = loc(fused[#loc36, #loc37])
#loc93 = loc(fused[#loc38, #loc39])
#loc94 = loc(fused[#loc43, #loc44])
#loc95 = loc(fused[#loc45, #loc37])
#loc96 = loc(fused[#loc48, #loc47])
#loc97 = loc(fused[#loc50, #loc49])
#loc98 = loc(fused[#loc57, #loc58])
#loc100 = loc(fused[#loc61, #loc62])
#loc101 = loc(fused[#loc63, #loc64])
#loc102 = loc(fused[#loc68, #loc69])
#loc103 = loc(fused[#loc70, #loc62])
#loc104 = loc(fused[#loc73, #loc72])
