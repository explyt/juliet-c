!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc138)
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc139)
  cir.func private  @printIntLine(!s32i) loc(#loc140)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc141)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_rand_divide_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc143)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc15)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc146)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc146)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc19)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc19)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc24)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc24)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc24)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc24)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc24)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc24)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc24)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc24)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc24)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc24)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc24)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc24)
          cir.yield %24 : !u32i loc(#loc24)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc24)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc24)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc24)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc24)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc24)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc24)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc24)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc24)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc24)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc24)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc24)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc24)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc24)
          cir.yield %28 : !u32i loc(#loc24)
        }) : (!cir.bool) -> !u32i loc(#loc24)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc24)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc148)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc26)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc149)
      } loc(#loc147)
    } loc(#loc145)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc151)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc151)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc30)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc30)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc35)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc36)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc153)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc37)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc40)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc41)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !s32i loc(#loc155)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc42)
          cir.if %10 {
            %11 = cir.const #cir.int<100> : !s32i loc(#loc46)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc47)
            %13 = cir.binop(div, %11, %12) : !s32i loc(#loc157)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc48)
          } else {
            %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc9)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc9)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc49)
          } loc(#loc156)
        } loc(#loc154)
      } loc(#loc152)
    } loc(#loc150)
    cir.return loc(#loc11)
  } loc(#loc142)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_rand_divide_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc159)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc160)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    cir.return loc(#loc51)
  } loc(#loc158)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc162)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc61)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc163)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc165)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc165)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc65)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc65)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc70)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc70)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc70)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc70)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc70)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc70)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc70)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc70)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc70)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc70)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc70)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc70)
          cir.yield %24 : !u32i loc(#loc70)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc70)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc70)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc70)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc70)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc70)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc70)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc70)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc70)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc70)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc70)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc70)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc70)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc70)
          cir.yield %28 : !u32i loc(#loc70)
        }) : (!cir.bool) -> !u32i loc(#loc70)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc70)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc167)
      } else {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc72)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc72)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc72)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc72)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc72)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc72)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc72)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc72)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc72)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc72)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc72)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc72)
          cir.yield %24 : !u32i loc(#loc72)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc72)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc72)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc72)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc72)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc72)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc72)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc72)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc72)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc72)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc72)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc72)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc72)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc72)
          cir.yield %28 : !u32i loc(#loc72)
        }) : (!cir.bool) -> !u32i loc(#loc72)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc72)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc168)
      } loc(#loc166)
    } loc(#loc164)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc170)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc170)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc76)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc76)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc83)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc84)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !s32i loc(#loc173)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc85)
          cir.if %10 {
            %11 = cir.const #cir.int<100> : !s32i loc(#loc89)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc90)
            %13 = cir.binop(div, %11, %12) : !s32i loc(#loc175)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc91)
          } else {
            %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc92)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc92)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc93)
          } loc(#loc174)
        } loc(#loc172)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc96)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc97)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !s32i loc(#loc177)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc98)
          cir.if %10 {
            %11 = cir.const #cir.int<100> : !s32i loc(#loc102)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
            %13 = cir.binop(div, %11, %12) : !s32i loc(#loc179)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc104)
          } else {
            %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc105)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc105)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc106)
          } loc(#loc178)
        } loc(#loc176)
      } loc(#loc171)
    } loc(#loc169)
    cir.return loc(#loc57)
  } loc(#loc161)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc181)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc112)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc184)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc184)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc116)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc116)
      cir.if %6 {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc121)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc186)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc123)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
      } loc(#loc185)
    } loc(#loc183)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc189)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc189)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc127)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc127)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc132)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc133)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc191)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc134)
      } else {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc135)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc136)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc192)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc137)
      } loc(#loc190)
    } loc(#loc188)
    cir.return loc(#loc108)
  } loc(#loc180)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":51:23)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":22:1)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":54:1)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":24:5)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":24:9)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":26:13)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":26:12)
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":26:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":27:5)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":36:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":27:8)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":27:33)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":28:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":31:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":33:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":30:16)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":30:9)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":35:16)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":35:9)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":37:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":53:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":37:8)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":37:33)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":38:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":41:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":43:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":40:22)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":40:28)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":40:9)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":45:9)
#loc39 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":52:9)
#loc40 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":45:13)
#loc41 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":45:21)
#loc42 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":45:18)
#loc43 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":46:9)
#loc44 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":48:9)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":50:9)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":47:26)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":47:32)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":47:13)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":51:13)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":134:1)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":138:1)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":136:5)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":136:13)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":137:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":137:13)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":63:1)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":102:1)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":65:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":65:9)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":67:13)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":67:12)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":67:5)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":68:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":77:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":68:8)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":68:33)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":69:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":72:5)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":74:5)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":71:16)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":71:9)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":76:16)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":76:9)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":78:5)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":101:5)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":78:8)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":78:33)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":79:5)
#loc79 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":89:5)
#loc80 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":91:5)
#loc81 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":81:9)
#loc82 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":88:9)
#loc83 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":81:13)
#loc84 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":81:21)
#loc85 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":81:18)
#loc86 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":82:9)
#loc87 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":84:9)
#loc88 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":86:9)
#loc89 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":83:26)
#loc90 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":83:32)
#loc91 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":83:13)
#loc92 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":87:23)
#loc93 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":87:13)
#loc94 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":93:9)
#loc95 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":100:9)
#loc96 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":93:13)
#loc97 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":93:21)
#loc98 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":93:18)
#loc99 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":94:9)
#loc100 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":96:9)
#loc101 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":98:9)
#loc102 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":95:26)
#loc103 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":95:32)
#loc104 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":95:13)
#loc105 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":99:23)
#loc106 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":99:13)
#loc107 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":107:1)
#loc108 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":132:1)
#loc109 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":109:5)
#loc110 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":109:9)
#loc111 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":111:13)
#loc112 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":111:12)
#loc113 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":111:5)
#loc114 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":112:5)
#loc115 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":121:5)
#loc116 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":112:8)
#loc117 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":112:33)
#loc118 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":113:5)
#loc119 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":116:5)
#loc120 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":118:5)
#loc121 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":115:16)
#loc122 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":115:9)
#loc123 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":120:16)
#loc124 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":120:9)
#loc125 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":122:5)
#loc126 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":131:5)
#loc127 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":122:8)
#loc128 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":122:33)
#loc129 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":123:5)
#loc130 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":126:5)
#loc131 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":128:5)
#loc132 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":125:22)
#loc133 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":125:28)
#loc134 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":125:9)
#loc135 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":130:22)
#loc136 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":130:28)
#loc137 = loc("CWE369_Divide_by_Zero__int_rand_divide_12.c":130:9)
#loc138 = loc(fused[#loc1, #loc2])
#loc139 = loc(fused[#loc3, #loc4])
#loc140 = loc(fused[#loc5, #loc6])
#loc141 = loc(fused[#loc7, #loc8])
#loc142 = loc(fused[#loc10, #loc11])
#loc143 = loc(fused[#loc12, #loc13])
#loc144 = loc(fused[#loc16, #loc14])
#loc145 = loc(fused[#loc17, #loc18])
#loc146 = loc(fused[#loc19, #loc20])
#loc147 = loc(fused[#loc21, #loc22, #loc23, #loc18])
#loc148 = loc(fused[#loc25, #loc24])
#loc149 = loc(fused[#loc27, #loc26])
#loc150 = loc(fused[#loc28, #loc29])
#loc151 = loc(fused[#loc30, #loc31])
#loc152 = loc(fused[#loc32, #loc33, #loc34, #loc29])
#loc153 = loc(fused[#loc35, #loc36])
#loc154 = loc(fused[#loc38, #loc39])
#loc155 = loc(fused[#loc40, #loc41])
#loc156 = loc(fused[#loc43, #loc44, #loc45, #loc39])
#loc157 = loc(fused[#loc46, #loc47])
#loc158 = loc(fused[#loc50, #loc51])
#loc159 = loc(fused[#loc52, #loc53])
#loc160 = loc(fused[#loc54, #loc55])
#loc161 = loc(fused[#loc56, #loc57])
#loc162 = loc(fused[#loc58, #loc59])
#loc163 = loc(fused[#loc62, #loc60])
#loc164 = loc(fused[#loc63, #loc64])
#loc165 = loc(fused[#loc65, #loc66])
#loc166 = loc(fused[#loc67, #loc68, #loc69, #loc64])
#loc167 = loc(fused[#loc71, #loc70])
#loc168 = loc(fused[#loc73, #loc72])
#loc169 = loc(fused[#loc74, #loc75])
#loc170 = loc(fused[#loc76, #loc77])
#loc171 = loc(fused[#loc78, #loc79, #loc80, #loc75])
#loc172 = loc(fused[#loc81, #loc82])
#loc173 = loc(fused[#loc83, #loc84])
#loc174 = loc(fused[#loc86, #loc87, #loc88, #loc82])
#loc175 = loc(fused[#loc89, #loc90])
#loc176 = loc(fused[#loc94, #loc95])
#loc177 = loc(fused[#loc96, #loc97])
#loc178 = loc(fused[#loc99, #loc100, #loc101, #loc95])
#loc179 = loc(fused[#loc102, #loc103])
#loc180 = loc(fused[#loc107, #loc108])
#loc181 = loc(fused[#loc109, #loc110])
#loc182 = loc(fused[#loc113, #loc111])
#loc183 = loc(fused[#loc114, #loc115])
#loc184 = loc(fused[#loc116, #loc117])
#loc185 = loc(fused[#loc118, #loc119, #loc120, #loc115])
#loc186 = loc(fused[#loc122, #loc121])
#loc187 = loc(fused[#loc124, #loc123])
#loc188 = loc(fused[#loc125, #loc126])
#loc189 = loc(fused[#loc127, #loc128])
#loc190 = loc(fused[#loc129, #loc130, #loc131, #loc126])
#loc191 = loc(fused[#loc132, #loc133])
#loc192 = loc(fused[#loc135, #loc136])
