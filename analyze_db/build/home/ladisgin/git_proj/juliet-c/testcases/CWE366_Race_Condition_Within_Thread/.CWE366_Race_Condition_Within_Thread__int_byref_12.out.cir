!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__stdThread = !cir.struct<struct "_stdThread" incomplete>
!ty__stdThreadLock = !cir.struct<struct "_stdThreadLock" incomplete>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc7 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":24:23)
#loc8 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":24:29)
#loc45 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":38:24)
#loc46 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":38:30)
#loc201 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":201:10)
#loc202 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":201:14)
#loc203 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":201:20)
#loc204 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":201:32)
#true = #cir.bool<true> : !cir.bool
#loc341 = loc(fused[#loc7, #loc8])
#loc358 = loc(fused[#loc45, #loc46])
#loc414 = loc(fused[#loc201, #loc202])
#loc415 = loc(fused[#loc203, #loc204])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__int_byref_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc338)
  cir.func private @stdThreadCreate(!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc339)
  cir.func internal private @helperBad(%arg0: !cir.ptr<!void> loc(fused[#loc7, #loc8])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc341)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["pIntArgs", init] {alignment = 8 : i64} loc(#loc342)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc343)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc13)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc10)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc10)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc342)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc16)
      cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc345)
      cir.for : cond {
        %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc18)
        %7 = cir.const #cir.int<1000000> : !s32i loc(#loc19)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc346)
        cir.condition(%8) loc(#loc20)
      } body {
        cir.scope {
          %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc22)
          %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc23)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc24)
          %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc23)
          %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
          cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc348)
        } loc(#loc347)
        cir.yield loc(#loc15)
      } step {
        %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc27)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc28)
        cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc349)
        cir.yield loc(#loc344)
      } loc(#loc344)
    } loc(#loc344)
    cir.return loc(#loc6)
  } loc(#loc340)
  cir.func private @stdThreadJoin(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc350)
  cir.func private @stdThreadDestroy(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc351)
  cir.func private @printIntLine(!s32i) loc(#loc352)
  cir.func private @stdThreadLockCreate(!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc353)
  cir.global "private" internal dsolocal @gGoodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc354)
  cir.func private @stdThreadLockAcquire(!cir.ptr<!ty__stdThreadLock>) loc(#loc355)
  cir.func private @stdThreadLockRelease(!cir.ptr<!ty__stdThreadLock>) loc(#loc356)
  cir.func internal private @helperGood(%arg0: !cir.ptr<!void> loc(fused[#loc45, #loc46])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc358)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["pIntArgs", init] {alignment = 8 : i64} loc(#loc359)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc360)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc51)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc48)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc48)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc359)
    %5 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc354)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc52)
    cir.call @stdThreadLockAcquire(%6) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc53)
    cir.scope {
      %9 = cir.const #cir.int<0> : !s32i loc(#loc56)
      cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc362)
      cir.for : cond {
        %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc58)
        %11 = cir.const #cir.int<1000000> : !s32i loc(#loc59)
        %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc363)
        cir.condition(%12) loc(#loc60)
      } body {
        cir.scope {
          %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc62)
          %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc63)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc64)
          %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc63)
          %14 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc65)
          cir.store %13, %14 : !s32i, !cir.ptr<!s32i> loc(#loc365)
        } loc(#loc364)
        cir.yield loc(#loc55)
      } step {
        %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc67)
        %11 = cir.unary(inc, %10) : !s32i, !s32i loc(#loc68)
        cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc366)
        cir.yield loc(#loc361)
      } loc(#loc361)
    } loc(#loc361)
    %7 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc354)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc69)
    cir.call @stdThreadLockRelease(%8) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc70)
    cir.return loc(#loc44)
  } loc(#loc357)
  cir.func private @stdThreadLockDestroy(!cir.ptr<!ty__stdThreadLock>) loc(#loc367)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__int_byref_12_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc370)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc370)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc77)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc77)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc373)
          %5 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc374)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["valBadSink"] {alignment = 4 : i64} loc(#loc375)
          %7 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc85)
          cir.store %7, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc373)
          %8 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc87)
          cir.store %8, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc374)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc90)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc376)
          cir.scope {
            %11 = cir.get_global @helperBad : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc94)
            %12 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc378)
            %13 = cir.call @stdThreadCreate(%11, %12, %4) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc97)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc97)
            %15 = cir.unary(not, %14) : !cir.bool, !cir.bool loc(#loc97)
            cir.if %15 {
              %16 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc99)
              cir.store %16, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc380)
            } loc(#loc379)
          } loc(#loc377)
          cir.scope {
            %11 = cir.get_global @helperBad : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc103)
            %12 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc382)
            %13 = cir.call @stdThreadCreate(%11, %12, %5) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc106)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc106)
            %15 = cir.unary(not, %14) : !cir.bool, !cir.bool loc(#loc106)
            cir.if %15 {
              %16 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc108)
              cir.store %16, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc384)
            } loc(#loc383)
          } loc(#loc381)
          cir.scope {
            %11 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc112)
            %12 = cir.cast(ptr_to_bool, %11 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc112)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc114)
              %15 = cir.call @stdThreadJoin(%14) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc115)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc115)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc113)
                cir.yield %18 : !cir.bool loc(#loc113)
              }, false {
                %18 = cir.const #false loc(#loc113)
                cir.yield %18 : !cir.bool loc(#loc113)
              }) : (!cir.bool) -> !cir.bool loc(#loc113)
              cir.yield %17 : !cir.bool loc(#loc113)
            }, false {
              %14 = cir.const #false loc(#loc113)
              cir.yield %14 : !cir.bool loc(#loc113)
            }) : (!cir.bool) -> !cir.bool loc(#loc113)
            cir.if %13 {
              %14 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc117)
              %15 = cir.call @stdThreadDestroy(%14) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc118)
            } loc(#loc386)
          } loc(#loc385)
          cir.scope {
            %11 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc121)
            %12 = cir.cast(ptr_to_bool, %11 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc121)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc123)
              %15 = cir.call @stdThreadJoin(%14) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc124)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc124)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc122)
                cir.yield %18 : !cir.bool loc(#loc122)
              }, false {
                %18 = cir.const #false loc(#loc122)
                cir.yield %18 : !cir.bool loc(#loc122)
              }) : (!cir.bool) -> !cir.bool loc(#loc122)
              cir.yield %17 : !cir.bool loc(#loc122)
            }, false {
              %14 = cir.const #false loc(#loc122)
              cir.yield %14 : !cir.bool loc(#loc122)
            }) : (!cir.bool) -> !cir.bool loc(#loc122)
            cir.if %13 {
              %14 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc126)
              %15 = cir.call @stdThreadDestroy(%14) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc127)
            } loc(#loc388)
          } loc(#loc387)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc128)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc129)
        } loc(#loc372)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc390)
          %5 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc391)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["valGoodSink"] {alignment = 4 : i64} loc(#loc392)
          %7 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc133)
          cir.store %7, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc390)
          %8 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc135)
          cir.store %8, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc391)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc138)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc393)
          cir.scope {
            %13 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc354)
            %14 = cir.call @stdThreadLockCreate(%13) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc142)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc142)
            %16 = cir.unary(not, %15) : !cir.bool, !cir.bool loc(#loc142)
            cir.if %16 {
              cir.return loc(#loc144)
            } loc(#loc395)
          } loc(#loc394)
          cir.scope {
            %13 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc147)
            %14 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc397)
            %15 = cir.call @stdThreadCreate(%13, %14, %4) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc150)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc150)
            %17 = cir.unary(not, %16) : !cir.bool, !cir.bool loc(#loc150)
            cir.if %17 {
              %18 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc152)
              cir.store %18, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc399)
            } loc(#loc398)
          } loc(#loc396)
          cir.scope {
            %13 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc156)
            %14 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc401)
            %15 = cir.call @stdThreadCreate(%13, %14, %5) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc159)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc159)
            %17 = cir.unary(not, %16) : !cir.bool, !cir.bool loc(#loc159)
            cir.if %17 {
              %18 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc161)
              cir.store %18, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc403)
            } loc(#loc402)
          } loc(#loc400)
          cir.scope {
            %13 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc165)
            %14 = cir.cast(ptr_to_bool, %13 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc165)
            %15 = cir.ternary(%14, true {
              %16 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc167)
              %17 = cir.call @stdThreadJoin(%16) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc168)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc168)
              %19 = cir.ternary(%18, true {
                %20 = cir.const #true loc(#loc166)
                cir.yield %20 : !cir.bool loc(#loc166)
              }, false {
                %20 = cir.const #false loc(#loc166)
                cir.yield %20 : !cir.bool loc(#loc166)
              }) : (!cir.bool) -> !cir.bool loc(#loc166)
              cir.yield %19 : !cir.bool loc(#loc166)
            }, false {
              %16 = cir.const #false loc(#loc166)
              cir.yield %16 : !cir.bool loc(#loc166)
            }) : (!cir.bool) -> !cir.bool loc(#loc166)
            cir.if %15 {
              %16 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc170)
              %17 = cir.call @stdThreadDestroy(%16) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc171)
            } loc(#loc405)
          } loc(#loc404)
          cir.scope {
            %13 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc174)
            %14 = cir.cast(ptr_to_bool, %13 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc174)
            %15 = cir.ternary(%14, true {
              %16 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc176)
              %17 = cir.call @stdThreadJoin(%16) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc177)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc177)
              %19 = cir.ternary(%18, true {
                %20 = cir.const #true loc(#loc175)
                cir.yield %20 : !cir.bool loc(#loc175)
              }, false {
                %20 = cir.const #false loc(#loc175)
                cir.yield %20 : !cir.bool loc(#loc175)
              }) : (!cir.bool) -> !cir.bool loc(#loc175)
              cir.yield %19 : !cir.bool loc(#loc175)
            }, false {
              %16 = cir.const #false loc(#loc175)
              cir.yield %16 : !cir.bool loc(#loc175)
            }) : (!cir.bool) -> !cir.bool loc(#loc175)
            cir.if %15 {
              %16 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc179)
              %17 = cir.call @stdThreadDestroy(%16) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc180)
            } loc(#loc407)
          } loc(#loc406)
          %10 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc354)
          %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc181)
          cir.call @stdThreadLockDestroy(%11) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc182)
          %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc183)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc184)
        } loc(#loc389)
      } loc(#loc371)
    } loc(#loc369)
    cir.return loc(#loc74)
  } loc(#loc368)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__int_byref_12_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc409)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc187)
    cir.return loc(#loc186)
  } loc(#loc408)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc410)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc411)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc412)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc195)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc196)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc197)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc198)
  cir.func @main(%arg0: !s32i loc(fused[#loc201, #loc202]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc203, #loc204])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc414)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc415)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc200)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc205)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc205)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc206)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc207)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc207)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc208)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc195)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc195)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc209)
    %8 = cir.get_global @CWE366_Race_Condition_Within_Thread__int_byref_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc416)
    cir.call @CWE366_Race_Condition_Within_Thread__int_byref_12_good() : () -> () loc(#loc210)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc196)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc196)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc212)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc197)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc197)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc213)
    %13 = cir.get_global @CWE366_Race_Condition_Within_Thread__int_byref_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc417)
    cir.call @CWE366_Race_Condition_Within_Thread__int_byref_12_bad() : () -> () loc(#loc214)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc198)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc198)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc216)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc217)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc418)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc418)
    cir.return %17 : !s32i loc(#loc418)
  } loc(#loc413)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc421)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc421)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc223)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc223)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc424)
          %5 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc425)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["valGoodSink"] {alignment = 4 : i64} loc(#loc426)
          %7 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc231)
          cir.store %7, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc424)
          %8 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc233)
          cir.store %8, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc425)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc236)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc427)
          cir.scope {
            %13 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc354)
            %14 = cir.call @stdThreadLockCreate(%13) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc240)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc240)
            %16 = cir.unary(not, %15) : !cir.bool, !cir.bool loc(#loc240)
            cir.if %16 {
              cir.return loc(#loc242)
            } loc(#loc429)
          } loc(#loc428)
          cir.scope {
            %13 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc245)
            %14 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc431)
            %15 = cir.call @stdThreadCreate(%13, %14, %4) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc248)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc248)
            %17 = cir.unary(not, %16) : !cir.bool, !cir.bool loc(#loc248)
            cir.if %17 {
              %18 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc250)
              cir.store %18, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc433)
            } loc(#loc432)
          } loc(#loc430)
          cir.scope {
            %13 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc254)
            %14 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc435)
            %15 = cir.call @stdThreadCreate(%13, %14, %5) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc257)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc257)
            %17 = cir.unary(not, %16) : !cir.bool, !cir.bool loc(#loc257)
            cir.if %17 {
              %18 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc259)
              cir.store %18, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc437)
            } loc(#loc436)
          } loc(#loc434)
          cir.scope {
            %13 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc263)
            %14 = cir.cast(ptr_to_bool, %13 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc263)
            %15 = cir.ternary(%14, true {
              %16 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc265)
              %17 = cir.call @stdThreadJoin(%16) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc266)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc266)
              %19 = cir.ternary(%18, true {
                %20 = cir.const #true loc(#loc264)
                cir.yield %20 : !cir.bool loc(#loc264)
              }, false {
                %20 = cir.const #false loc(#loc264)
                cir.yield %20 : !cir.bool loc(#loc264)
              }) : (!cir.bool) -> !cir.bool loc(#loc264)
              cir.yield %19 : !cir.bool loc(#loc264)
            }, false {
              %16 = cir.const #false loc(#loc264)
              cir.yield %16 : !cir.bool loc(#loc264)
            }) : (!cir.bool) -> !cir.bool loc(#loc264)
            cir.if %15 {
              %16 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc268)
              %17 = cir.call @stdThreadDestroy(%16) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc269)
            } loc(#loc439)
          } loc(#loc438)
          cir.scope {
            %13 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc272)
            %14 = cir.cast(ptr_to_bool, %13 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc272)
            %15 = cir.ternary(%14, true {
              %16 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc274)
              %17 = cir.call @stdThreadJoin(%16) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc275)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc275)
              %19 = cir.ternary(%18, true {
                %20 = cir.const #true loc(#loc273)
                cir.yield %20 : !cir.bool loc(#loc273)
              }, false {
                %20 = cir.const #false loc(#loc273)
                cir.yield %20 : !cir.bool loc(#loc273)
              }) : (!cir.bool) -> !cir.bool loc(#loc273)
              cir.yield %19 : !cir.bool loc(#loc273)
            }, false {
              %16 = cir.const #false loc(#loc273)
              cir.yield %16 : !cir.bool loc(#loc273)
            }) : (!cir.bool) -> !cir.bool loc(#loc273)
            cir.if %15 {
              %16 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc277)
              %17 = cir.call @stdThreadDestroy(%16) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc278)
            } loc(#loc441)
          } loc(#loc440)
          %10 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc354)
          %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc279)
          cir.call @stdThreadLockDestroy(%11) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc280)
          %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc281)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc282)
        } loc(#loc423)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc443)
          %5 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc444)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["valGoodSink"] {alignment = 4 : i64} loc(#loc445)
          %7 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc286)
          cir.store %7, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc443)
          %8 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc288)
          cir.store %8, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc444)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc291)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc446)
          cir.scope {
            %13 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc354)
            %14 = cir.call @stdThreadLockCreate(%13) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc295)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc295)
            %16 = cir.unary(not, %15) : !cir.bool, !cir.bool loc(#loc295)
            cir.if %16 {
              cir.return loc(#loc297)
            } loc(#loc448)
          } loc(#loc447)
          cir.scope {
            %13 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc300)
            %14 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc450)
            %15 = cir.call @stdThreadCreate(%13, %14, %4) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc303)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc303)
            %17 = cir.unary(not, %16) : !cir.bool, !cir.bool loc(#loc303)
            cir.if %17 {
              %18 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc305)
              cir.store %18, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc452)
            } loc(#loc451)
          } loc(#loc449)
          cir.scope {
            %13 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc309)
            %14 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc454)
            %15 = cir.call @stdThreadCreate(%13, %14, %5) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc312)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc312)
            %17 = cir.unary(not, %16) : !cir.bool, !cir.bool loc(#loc312)
            cir.if %17 {
              %18 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc314)
              cir.store %18, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc456)
            } loc(#loc455)
          } loc(#loc453)
          cir.scope {
            %13 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc318)
            %14 = cir.cast(ptr_to_bool, %13 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc318)
            %15 = cir.ternary(%14, true {
              %16 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc320)
              %17 = cir.call @stdThreadJoin(%16) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc321)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc321)
              %19 = cir.ternary(%18, true {
                %20 = cir.const #true loc(#loc319)
                cir.yield %20 : !cir.bool loc(#loc319)
              }, false {
                %20 = cir.const #false loc(#loc319)
                cir.yield %20 : !cir.bool loc(#loc319)
              }) : (!cir.bool) -> !cir.bool loc(#loc319)
              cir.yield %19 : !cir.bool loc(#loc319)
            }, false {
              %16 = cir.const #false loc(#loc319)
              cir.yield %16 : !cir.bool loc(#loc319)
            }) : (!cir.bool) -> !cir.bool loc(#loc319)
            cir.if %15 {
              %16 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc323)
              %17 = cir.call @stdThreadDestroy(%16) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc324)
            } loc(#loc458)
          } loc(#loc457)
          cir.scope {
            %13 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc327)
            %14 = cir.cast(ptr_to_bool, %13 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc327)
            %15 = cir.ternary(%14, true {
              %16 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc329)
              %17 = cir.call @stdThreadJoin(%16) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc330)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc330)
              %19 = cir.ternary(%18, true {
                %20 = cir.const #true loc(#loc328)
                cir.yield %20 : !cir.bool loc(#loc328)
              }, false {
                %20 = cir.const #false loc(#loc328)
                cir.yield %20 : !cir.bool loc(#loc328)
              }) : (!cir.bool) -> !cir.bool loc(#loc328)
              cir.yield %19 : !cir.bool loc(#loc328)
            }, false {
              %16 = cir.const #false loc(#loc328)
              cir.yield %16 : !cir.bool loc(#loc328)
            }) : (!cir.bool) -> !cir.bool loc(#loc328)
            cir.if %15 {
              %16 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc332)
              %17 = cir.call @stdThreadDestroy(%16) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc333)
            } loc(#loc460)
          } loc(#loc459)
          %10 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc354)
          %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc334)
          cir.call @stdThreadLockDestroy(%11) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc335)
          %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc336)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc337)
        } loc(#loc442)
      } loc(#loc422)
    } loc(#loc420)
    cir.return loc(#loc220)
  } loc(#loc419)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__int_byref_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../testcasesupport/std_thread.h":14:1)
#loc4 = loc("../../testcasesupport/std_thread.h":14:74)
#loc5 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":24:1)
#loc6 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":36:1)
#loc9 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":26:5)
#loc10 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":26:27)
#loc11 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":27:5)
#loc12 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":27:9)
#loc13 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":25:1)
#loc14 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":32:5)
#loc15 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":35:5)
#loc16 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":32:14)
#loc17 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":32:10)
#loc18 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":32:17)
#loc19 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":32:21)
#loc20 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":32:19)
#loc21 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":33:5)
#loc22 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":34:22)
#loc23 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":34:21)
#loc24 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":34:33)
#loc25 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":34:10)
#loc26 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":34:9)
#loc27 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":32:31)
#loc28 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":32:30)
#loc29 = loc("../../testcasesupport/std_thread.h":15:1)
#loc30 = loc("../../testcasesupport/std_thread.h":15:35)
#loc31 = loc("../../testcasesupport/std_thread.h":16:1)
#loc32 = loc("../../testcasesupport/std_thread.h":16:38)
#loc33 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc34 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc35 = loc("../../testcasesupport/std_thread.h":18:1)
#loc36 = loc("../../testcasesupport/std_thread.h":18:44)
#loc37 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":22:1)
#loc38 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":22:34)
#loc39 = loc("../../testcasesupport/std_thread.h":19:1)
#loc40 = loc("../../testcasesupport/std_thread.h":19:45)
#loc41 = loc("../../testcasesupport/std_thread.h":20:1)
#loc42 = loc("../../testcasesupport/std_thread.h":20:45)
#loc43 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":38:1)
#loc44 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":51:1)
#loc47 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":40:5)
#loc48 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":40:28)
#loc49 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":41:5)
#loc50 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":41:9)
#loc51 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":39:1)
#loc52 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":45:26)
#loc53 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":45:5)
#loc54 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":46:5)
#loc55 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":49:5)
#loc56 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":46:14)
#loc57 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":46:10)
#loc58 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":46:17)
#loc59 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":46:21)
#loc60 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":46:19)
#loc61 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":47:5)
#loc62 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":48:22)
#loc63 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":48:21)
#loc64 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":48:33)
#loc65 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":48:10)
#loc66 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":48:9)
#loc67 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":46:31)
#loc68 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":46:30)
#loc69 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":50:26)
#loc70 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":50:5)
#loc71 = loc("../../testcasesupport/std_thread.h":21:1)
#loc72 = loc("../../testcasesupport/std_thread.h":21:45)
#loc73 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":55:1)
#loc74 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":114:1)
#loc75 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":57:5)
#loc76 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":113:5)
#loc77 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":57:8)
#loc78 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":57:33)
#loc79 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":58:5)
#loc80 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":82:5)
#loc81 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":84:5)
#loc82 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":59:9)
#loc83 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":81:9)
#loc84 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":60:13)
#loc85 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":60:33)
#loc86 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":61:13)
#loc87 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":61:33)
#loc88 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":62:13)
#loc89 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":62:17)
#loc90 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":63:26)
#loc91 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":63:13)
#loc92 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":64:13)
#loc93 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":67:13)
#loc94 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":64:34)
#loc95 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":64:52)
#loc96 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":64:53)
#loc97 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":64:18)
#loc98 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":65:13)
#loc99 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":66:27)
#loc100 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":66:17)
#loc101 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":68:13)
#loc102 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":71:13)
#loc103 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":68:34)
#loc104 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":68:52)
#loc105 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":68:53)
#loc106 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":68:18)
#loc107 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":69:13)
#loc108 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":70:27)
#loc109 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":70:17)
#loc110 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":72:13)
#loc111 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":75:13)
#loc112 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":72:17)
#loc113 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":72:25)
#loc114 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":72:42)
#loc115 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":72:28)
#loc116 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":73:13)
#loc117 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":74:34)
#loc118 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":74:17)
#loc119 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":76:13)
#loc120 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":79:13)
#loc121 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":76:17)
#loc122 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":76:25)
#loc123 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":76:42)
#loc124 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":76:28)
#loc125 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":77:13)
#loc126 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":78:34)
#loc127 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":78:17)
#loc128 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":80:26)
#loc129 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":80:13)
#loc130 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":85:9)
#loc131 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":112:9)
#loc132 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":86:13)
#loc133 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":86:33)
#loc134 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":87:13)
#loc135 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":87:33)
#loc136 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":88:13)
#loc137 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":88:17)
#loc138 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":89:27)
#loc139 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":89:13)
#loc140 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":90:13)
#loc141 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":93:13)
#loc142 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":90:18)
#loc143 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":91:13)
#loc144 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":92:17)
#loc145 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":94:13)
#loc146 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":97:13)
#loc147 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":94:34)
#loc148 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":94:53)
#loc149 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":94:54)
#loc150 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":94:18)
#loc151 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":95:13)
#loc152 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":96:27)
#loc153 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":96:17)
#loc154 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":98:13)
#loc155 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":101:13)
#loc156 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":98:34)
#loc157 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":98:53)
#loc158 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":98:54)
#loc159 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":98:18)
#loc160 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":99:13)
#loc161 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":100:27)
#loc162 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":100:17)
#loc163 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":102:13)
#loc164 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":105:13)
#loc165 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":102:17)
#loc166 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":102:25)
#loc167 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":102:42)
#loc168 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":102:28)
#loc169 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":103:13)
#loc170 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":104:34)
#loc171 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":104:17)
#loc172 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":106:13)
#loc173 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":109:13)
#loc174 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":106:17)
#loc175 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":106:25)
#loc176 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":106:42)
#loc177 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":106:28)
#loc178 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":107:13)
#loc179 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":108:34)
#loc180 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":108:17)
#loc181 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":110:34)
#loc182 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":110:13)
#loc183 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":111:26)
#loc184 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":111:13)
#loc185 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":187:1)
#loc186 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":190:1)
#loc187 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":189:5)
#loc188 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":189:11)
#loc189 = loc("/usr/include/stdlib.h":575:1)
#loc190 = loc("/usr/include/stdlib.h":575:41)
#loc191 = loc("/usr/include/time.h":76:1)
#loc192 = loc("/usr/include/time.h":76:38)
#loc193 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc194 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc195 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":206:15)
#loc196 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":208:15)
#loc197 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":211:15)
#loc198 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":213:15)
#loc199 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":201:1)
#loc200 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":216:1)
#loc205 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":202:1)
#loc206 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":204:27)
#loc207 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":204:22)
#loc208 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":204:5)
#loc209 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":206:5)
#loc210 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":207:5)
#loc211 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":207:60)
#loc212 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":208:5)
#loc213 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":211:5)
#loc214 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":212:5)
#loc215 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":212:59)
#loc216 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":213:5)
#loc217 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":215:12)
#loc218 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":215:5)
#loc219 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":121:1)
#loc220 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":185:1)
#loc221 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":123:5)
#loc222 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":184:5)
#loc223 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":123:8)
#loc224 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":123:33)
#loc225 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":124:5)
#loc226 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":153:5)
#loc227 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":155:5)
#loc228 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":125:9)
#loc229 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":152:9)
#loc230 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":126:13)
#loc231 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":126:33)
#loc232 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":127:13)
#loc233 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":127:33)
#loc234 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":128:13)
#loc235 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":128:17)
#loc236 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":129:27)
#loc237 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":129:13)
#loc238 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":130:13)
#loc239 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":133:13)
#loc240 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":130:18)
#loc241 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":131:13)
#loc242 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":132:17)
#loc243 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":134:13)
#loc244 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":137:13)
#loc245 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":134:34)
#loc246 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":134:53)
#loc247 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":134:54)
#loc248 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":134:18)
#loc249 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":135:13)
#loc250 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":136:27)
#loc251 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":136:17)
#loc252 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":138:13)
#loc253 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":141:13)
#loc254 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":138:34)
#loc255 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":138:53)
#loc256 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":138:54)
#loc257 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":138:18)
#loc258 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":139:13)
#loc259 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":140:27)
#loc260 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":140:17)
#loc261 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":142:13)
#loc262 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":145:13)
#loc263 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":142:17)
#loc264 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":142:25)
#loc265 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":142:42)
#loc266 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":142:28)
#loc267 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":143:13)
#loc268 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":144:34)
#loc269 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":144:17)
#loc270 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":146:13)
#loc271 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":149:13)
#loc272 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":146:17)
#loc273 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":146:25)
#loc274 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":146:42)
#loc275 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":146:28)
#loc276 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":147:13)
#loc277 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":148:34)
#loc278 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":148:17)
#loc279 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":150:34)
#loc280 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":150:13)
#loc281 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":151:26)
#loc282 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":151:13)
#loc283 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":156:9)
#loc284 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":183:9)
#loc285 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":157:13)
#loc286 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":157:33)
#loc287 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":158:13)
#loc288 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":158:33)
#loc289 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":159:13)
#loc290 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":159:17)
#loc291 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":160:27)
#loc292 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":160:13)
#loc293 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":161:13)
#loc294 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":164:13)
#loc295 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":161:18)
#loc296 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":162:13)
#loc297 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":163:17)
#loc298 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":165:13)
#loc299 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":168:13)
#loc300 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":165:34)
#loc301 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":165:53)
#loc302 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":165:54)
#loc303 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":165:18)
#loc304 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":166:13)
#loc305 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":167:27)
#loc306 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":167:17)
#loc307 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":169:13)
#loc308 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":172:13)
#loc309 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":169:34)
#loc310 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":169:53)
#loc311 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":169:54)
#loc312 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":169:18)
#loc313 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":170:13)
#loc314 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":171:27)
#loc315 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":171:17)
#loc316 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":173:13)
#loc317 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":176:13)
#loc318 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":173:17)
#loc319 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":173:25)
#loc320 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":173:42)
#loc321 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":173:28)
#loc322 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":174:13)
#loc323 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":175:34)
#loc324 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":175:17)
#loc325 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":177:13)
#loc326 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":180:13)
#loc327 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":177:17)
#loc328 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":177:25)
#loc329 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":177:42)
#loc330 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":177:28)
#loc331 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":178:13)
#loc332 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":179:34)
#loc333 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":179:17)
#loc334 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":181:34)
#loc335 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":181:13)
#loc336 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":182:26)
#loc337 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":182:13)
#loc338 = loc(fused[#loc1, #loc2])
#loc339 = loc(fused[#loc3, #loc4])
#loc340 = loc(fused[#loc5, #loc6])
#loc342 = loc(fused[#loc9, #loc10])
#loc343 = loc(fused[#loc11, #loc12])
#loc344 = loc(fused[#loc14, #loc15])
#loc345 = loc(fused[#loc17, #loc16])
#loc346 = loc(fused[#loc18, #loc19])
#loc347 = loc(fused[#loc21, #loc15])
#loc348 = loc(fused[#loc26, #loc24])
#loc349 = loc(fused[#loc28, #loc27])
#loc350 = loc(fused[#loc29, #loc30])
#loc351 = loc(fused[#loc31, #loc32])
#loc352 = loc(fused[#loc33, #loc34])
#loc353 = loc(fused[#loc35, #loc36])
#loc354 = loc(fused[#loc37, #loc38])
#loc355 = loc(fused[#loc39, #loc40])
#loc356 = loc(fused[#loc41, #loc42])
#loc357 = loc(fused[#loc43, #loc44])
#loc359 = loc(fused[#loc47, #loc48])
#loc360 = loc(fused[#loc49, #loc50])
#loc361 = loc(fused[#loc54, #loc55])
#loc362 = loc(fused[#loc57, #loc56])
#loc363 = loc(fused[#loc58, #loc59])
#loc364 = loc(fused[#loc61, #loc55])
#loc365 = loc(fused[#loc66, #loc64])
#loc366 = loc(fused[#loc68, #loc67])
#loc367 = loc(fused[#loc71, #loc72])
#loc368 = loc(fused[#loc73, #loc74])
#loc369 = loc(fused[#loc75, #loc76])
#loc370 = loc(fused[#loc77, #loc78])
#loc371 = loc(fused[#loc79, #loc80, #loc81, #loc76])
#loc372 = loc(fused[#loc82, #loc83])
#loc373 = loc(fused[#loc84, #loc85])
#loc374 = loc(fused[#loc86, #loc87])
#loc375 = loc(fused[#loc88, #loc89])
#loc376 = loc(fused[#loc91, #loc90])
#loc377 = loc(fused[#loc92, #loc93])
#loc378 = loc(fused[#loc95, #loc96])
#loc379 = loc(fused[#loc98, #loc93])
#loc380 = loc(fused[#loc100, #loc99])
#loc381 = loc(fused[#loc101, #loc102])
#loc382 = loc(fused[#loc104, #loc105])
#loc383 = loc(fused[#loc107, #loc102])
#loc384 = loc(fused[#loc109, #loc108])
#loc385 = loc(fused[#loc110, #loc111])
#loc386 = loc(fused[#loc116, #loc111])
#loc387 = loc(fused[#loc119, #loc120])
#loc388 = loc(fused[#loc125, #loc120])
#loc389 = loc(fused[#loc130, #loc131])
#loc390 = loc(fused[#loc132, #loc133])
#loc391 = loc(fused[#loc134, #loc135])
#loc392 = loc(fused[#loc136, #loc137])
#loc393 = loc(fused[#loc139, #loc138])
#loc394 = loc(fused[#loc140, #loc141])
#loc395 = loc(fused[#loc143, #loc141])
#loc396 = loc(fused[#loc145, #loc146])
#loc397 = loc(fused[#loc148, #loc149])
#loc398 = loc(fused[#loc151, #loc146])
#loc399 = loc(fused[#loc153, #loc152])
#loc400 = loc(fused[#loc154, #loc155])
#loc401 = loc(fused[#loc157, #loc158])
#loc402 = loc(fused[#loc160, #loc155])
#loc403 = loc(fused[#loc162, #loc161])
#loc404 = loc(fused[#loc163, #loc164])
#loc405 = loc(fused[#loc169, #loc164])
#loc406 = loc(fused[#loc172, #loc173])
#loc407 = loc(fused[#loc178, #loc173])
#loc408 = loc(fused[#loc185, #loc186])
#loc409 = loc(fused[#loc187, #loc188])
#loc410 = loc(fused[#loc189, #loc190])
#loc411 = loc(fused[#loc191, #loc192])
#loc412 = loc(fused[#loc193, #loc194])
#loc413 = loc(fused[#loc199, #loc200])
#loc416 = loc(fused[#loc210, #loc211])
#loc417 = loc(fused[#loc214, #loc215])
#loc418 = loc(fused[#loc218, #loc217])
#loc419 = loc(fused[#loc219, #loc220])
#loc420 = loc(fused[#loc221, #loc222])
#loc421 = loc(fused[#loc223, #loc224])
#loc422 = loc(fused[#loc225, #loc226, #loc227, #loc222])
#loc423 = loc(fused[#loc228, #loc229])
#loc424 = loc(fused[#loc230, #loc231])
#loc425 = loc(fused[#loc232, #loc233])
#loc426 = loc(fused[#loc234, #loc235])
#loc427 = loc(fused[#loc237, #loc236])
#loc428 = loc(fused[#loc238, #loc239])
#loc429 = loc(fused[#loc241, #loc239])
#loc430 = loc(fused[#loc243, #loc244])
#loc431 = loc(fused[#loc246, #loc247])
#loc432 = loc(fused[#loc249, #loc244])
#loc433 = loc(fused[#loc251, #loc250])
#loc434 = loc(fused[#loc252, #loc253])
#loc435 = loc(fused[#loc255, #loc256])
#loc436 = loc(fused[#loc258, #loc253])
#loc437 = loc(fused[#loc260, #loc259])
#loc438 = loc(fused[#loc261, #loc262])
#loc439 = loc(fused[#loc267, #loc262])
#loc440 = loc(fused[#loc270, #loc271])
#loc441 = loc(fused[#loc276, #loc271])
#loc442 = loc(fused[#loc283, #loc284])
#loc443 = loc(fused[#loc285, #loc286])
#loc444 = loc(fused[#loc287, #loc288])
#loc445 = loc(fused[#loc289, #loc290])
#loc446 = loc(fused[#loc292, #loc291])
#loc447 = loc(fused[#loc293, #loc294])
#loc448 = loc(fused[#loc296, #loc294])
#loc449 = loc(fused[#loc298, #loc299])
#loc450 = loc(fused[#loc301, #loc302])
#loc451 = loc(fused[#loc304, #loc299])
#loc452 = loc(fused[#loc306, #loc305])
#loc453 = loc(fused[#loc307, #loc308])
#loc454 = loc(fused[#loc310, #loc311])
#loc455 = loc(fused[#loc313, #loc308])
#loc456 = loc(fused[#loc315, #loc314])
#loc457 = loc(fused[#loc316, #loc317])
#loc458 = loc(fused[#loc322, #loc317])
#loc459 = loc(fused[#loc325, #loc326])
#loc460 = loc(fused[#loc331, #loc326])
