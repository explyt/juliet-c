!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc47 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":116:10)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":116:14)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":116:20)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":116:32)
#loc147 = loc(fused[#loc47, #loc48])
#loc148 = loc(fused[#loc49, #loc50])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_min_multiply_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLongLongLine(!s64i) loc(#loc129)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_min_multiply_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc131)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc132)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc133)
    cir.br ^bb1 loc(#loc134)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc134)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc13)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc14)
    %6 = cir.unary(minus, %5) : !s64i, !s64i loc(#loc14)
    %7 = cir.const #cir.int<1> : !s64i loc(#loc14)
    %8 = cir.binop(sub, %6, %7) nsw : !s64i loc(#loc14)
    cir.store %8, %1 : !s64i, !cir.ptr<!s64i> loc(#loc135)
    cir.br ^bb4 loc(#loc16)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc12)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc136)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc136)
  ^bb7:  // pred: ^bb6
    %9 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %10 ^bb8, ^bb13 loc(#loc19)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc137)
  ^bb9:  // pred: ^bb8
    %11 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc22)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc23)
    %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc23)
    %14 = cir.cmp(lt, %11, %13) : !s64i, !cir.bool loc(#loc138)
    cir.brcond %14 ^bb10, ^bb11 loc(#loc139)
  ^bb10:  // pred: ^bb9
    %15 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc25)
    %16 = cir.const #cir.int<2> : !s32i loc(#loc6)
    %17 = cir.cast(integral, %16 : !s32i), !s64i loc(#loc6)
    %18 = cir.binop(mul, %15, %17) nsw : !s64i loc(#loc25)
    cir.store %18, %0 : !s64i, !cir.ptr<!s64i> loc(#loc131)
    %19 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc26)
    cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc27)
    cir.br ^bb11 loc(#loc21)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc21)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc28)
  ^bb13:  // 2 preds: ^bb7, ^bb12
    cir.br ^bb14 loc(#loc18)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc4)
  } loc(#loc130)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_min_multiply_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc141)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc142)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    cir.return loc(#loc30)
  } loc(#loc140)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc143)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc144)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc145)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc44)
  cir.func @main(%arg0: !s32i loc(fused[#loc47, #loc48]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc49, #loc50])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc147)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc148)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc46)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc51)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc51)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc52)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc53)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc53)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc54)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc41)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %8 = cir.get_global @CWE191_Integer_Underflow__int64_t_min_multiply_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc149)
    cir.call @CWE191_Integer_Underflow__int64_t_min_multiply_16_good() : () -> () loc(#loc56)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc42)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc43)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %13 = cir.get_global @CWE191_Integer_Underflow__int64_t_min_multiply_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc150)
    cir.call @CWE191_Integer_Underflow__int64_t_min_multiply_16_bad() : () -> () loc(#loc60)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc44)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc63)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    cir.return %17 : !s32i loc(#loc151)
  } loc(#loc146)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc65)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc153)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc154)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc72)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc155)
    cir.br ^bb1 loc(#loc156)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc156)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc76)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc76)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc76)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc77)
    %6 = cir.unary(minus, %5) : !s64i, !s64i loc(#loc77)
    %7 = cir.const #cir.int<1> : !s64i loc(#loc77)
    %8 = cir.binop(sub, %6, %7) nsw : !s64i loc(#loc77)
    cir.store %8, %1 : !s64i, !cir.ptr<!s64i> loc(#loc157)
    cir.br ^bb4 loc(#loc79)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc75)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc158)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc158)
  ^bb7:  // pred: ^bb6
    %9 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc82)
    cir.brcond %10 ^bb8, ^bb18 loc(#loc82)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc159)
  ^bb9:  // pred: ^bb8
    %11 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc85)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc86)
    %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc86)
    %14 = cir.cmp(lt, %11, %13) : !s64i, !cir.bool loc(#loc160)
    cir.brcond %14 ^bb10, ^bb16 loc(#loc161)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc162)
  ^bb11:  // pred: ^bb10
    %15 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc90)
    %16 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc91)
    %17 = cir.unary(minus, %16) : !s64i, !s64i loc(#loc91)
    %18 = cir.const #cir.int<1> : !s64i loc(#loc91)
    %19 = cir.binop(sub, %17, %18) nsw : !s64i loc(#loc91)
    %20 = cir.const #cir.int<2> : !s32i loc(#loc92)
    %21 = cir.cast(integral, %20 : !s32i), !s64i loc(#loc92)
    %22 = cir.binop(div, %19, %21) : !s64i loc(#loc163)
    %23 = cir.cmp(gt, %15, %22) : !s64i, !cir.bool loc(#loc164)
    cir.brcond %23 ^bb12, ^bb13 loc(#loc165)
  ^bb12:  // pred: ^bb11
    %24 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc97)
    %25 = cir.const #cir.int<2> : !s32i loc(#loc69)
    %26 = cir.cast(integral, %25 : !s32i), !s64i loc(#loc69)
    %27 = cir.binop(mul, %24, %26) nsw : !s64i loc(#loc97)
    cir.store %27, %0 : !s64i, !cir.ptr<!s64i> loc(#loc153)
    %28 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc98)
    cir.call @printLongLongLine(%28) : (!s64i) -> () loc(#loc99)
    cir.br ^bb14 loc(#loc95)
  ^bb13:  // pred: ^bb11
    %29 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc65)
    %30 = cir.cast(array_to_ptrdecay, %29 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    cir.br ^bb14 loc(#loc89)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc89)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc84)
  ^bb16:  // 2 preds: ^bb9, ^bb15
    cir.br ^bb17 loc(#loc84)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc101)
  ^bb18:  // 2 preds: ^bb7, ^bb17
    cir.br ^bb19 loc(#loc81)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc67)
  } loc(#loc152)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc167)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc168)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc108)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc169)
    cir.br ^bb1 loc(#loc170)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc170)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc112)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc112)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc112)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<2> : !s32i loc(#loc113)
    %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc114)
    %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc114)
    cir.store %7, %1 : !s64i, !cir.ptr<!s64i> loc(#loc171)
    cir.br ^bb4 loc(#loc116)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc111)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc172)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc172)
  ^bb7:  // pred: ^bb6
    %8 = cir.const #cir.int<1> : !s32i loc(#loc119)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc119)
    cir.brcond %9 ^bb8, ^bb13 loc(#loc119)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc173)
  ^bb9:  // pred: ^bb8
    %10 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc122)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc123)
    %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc123)
    %13 = cir.cmp(lt, %10, %12) : !s64i, !cir.bool loc(#loc174)
    cir.brcond %13 ^bb10, ^bb11 loc(#loc175)
  ^bb10:  // pred: ^bb9
    %14 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc125)
    %15 = cir.const #cir.int<2> : !s32i loc(#loc105)
    %16 = cir.cast(integral, %15 : !s32i), !s64i loc(#loc105)
    %17 = cir.binop(mul, %14, %16) nsw : !s64i loc(#loc125)
    cir.store %17, %0 : !s64i, !cir.ptr<!s64i> loc(#loc167)
    %18 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc126)
    cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc127)
    cir.br ^bb11 loc(#loc121)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc121)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc128)
  ^bb13:  // 2 preds: ^bb7, ^bb12
    cir.br ^bb14 loc(#loc118)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc103)
  } loc(#loc166)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_min_multiply_16.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":42:1)
#loc5 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":37:13)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":37:37)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":24:5)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":24:13)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":25:12)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":25:5)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":26:5)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":31:5)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":26:11)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":29:16)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":29:9)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":30:9)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":32:5)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":41:5)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":32:11)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":34:9)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":39:9)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":34:12)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":34:19)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":35:9)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":37:30)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":38:31)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":38:13)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":40:9)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":101:1)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":105:1)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":103:5)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":103:13)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":104:5)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":104:13)
#loc35 = loc("/usr/include/stdlib.h":575:1)
#loc36 = loc("/usr/include/stdlib.h":575:41)
#loc37 = loc("/usr/include/time.h":76:1)
#loc38 = loc("/usr/include/time.h":76:38)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":121:15)
#loc42 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":123:15)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":126:15)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":128:15)
#loc45 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":116:1)
#loc46 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":131:1)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":117:1)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":119:27)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":119:22)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":119:5)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":121:5)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":122:5)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":122:60)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":123:5)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":126:5)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":127:5)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":127:59)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":128:5)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":130:12)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":130:5)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":71:27)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":49:1)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":76:1)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":66:17)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":66:41)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":51:5)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":51:13)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":52:12)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":52:5)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":53:5)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":58:5)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":53:11)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":56:16)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":56:9)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":57:9)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":59:5)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":75:5)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":59:11)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":61:9)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":73:9)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":61:12)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":61:19)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":62:9)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":64:13)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":72:13)
#loc90 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":64:17)
#loc91 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":64:25)
#loc92 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":64:35)
#loc93 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":64:36)
#loc94 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":65:13)
#loc95 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":68:13)
#loc96 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":70:13)
#loc97 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":66:34)
#loc98 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":67:35)
#loc99 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":67:17)
#loc100 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":71:17)
#loc101 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":74:9)
#loc102 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":79:1)
#loc103 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":99:1)
#loc104 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":94:13)
#loc105 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":94:37)
#loc106 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":81:5)
#loc107 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":81:13)
#loc108 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":82:12)
#loc109 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":82:5)
#loc110 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":83:5)
#loc111 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":88:5)
#loc112 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":83:11)
#loc113 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":86:17)
#loc114 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":86:16)
#loc115 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":86:9)
#loc116 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":87:9)
#loc117 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":89:5)
#loc118 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":98:5)
#loc119 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":89:11)
#loc120 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":91:9)
#loc121 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":96:9)
#loc122 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":91:12)
#loc123 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":91:19)
#loc124 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":92:9)
#loc125 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":94:30)
#loc126 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":95:31)
#loc127 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":95:13)
#loc128 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_16.c":97:9)
#loc129 = loc(fused[#loc1, #loc2])
#loc130 = loc(fused[#loc3, #loc4])
#loc131 = loc(fused[#loc5, #loc6])
#loc132 = loc(fused[#loc7, #loc8])
#loc133 = loc(fused[#loc10, #loc9])
#loc134 = loc(fused[#loc11, #loc12])
#loc135 = loc(fused[#loc15, #loc14])
#loc136 = loc(fused[#loc17, #loc18])
#loc137 = loc(fused[#loc20, #loc21])
#loc138 = loc(fused[#loc22, #loc23])
#loc139 = loc(fused[#loc24, #loc21])
#loc140 = loc(fused[#loc29, #loc30])
#loc141 = loc(fused[#loc31, #loc32])
#loc142 = loc(fused[#loc33, #loc34])
#loc143 = loc(fused[#loc35, #loc36])
#loc144 = loc(fused[#loc37, #loc38])
#loc145 = loc(fused[#loc39, #loc40])
#loc146 = loc(fused[#loc45, #loc46])
#loc149 = loc(fused[#loc56, #loc57])
#loc150 = loc(fused[#loc60, #loc61])
#loc151 = loc(fused[#loc64, #loc63])
#loc152 = loc(fused[#loc66, #loc67])
#loc153 = loc(fused[#loc68, #loc69])
#loc154 = loc(fused[#loc70, #loc71])
#loc155 = loc(fused[#loc73, #loc72])
#loc156 = loc(fused[#loc74, #loc75])
#loc157 = loc(fused[#loc78, #loc77])
#loc158 = loc(fused[#loc80, #loc81])
#loc159 = loc(fused[#loc83, #loc84])
#loc160 = loc(fused[#loc85, #loc86])
#loc161 = loc(fused[#loc87, #loc84])
#loc162 = loc(fused[#loc88, #loc89])
#loc163 = loc(fused[#loc91, #loc92])
#loc164 = loc(fused[#loc90, #loc93])
#loc165 = loc(fused[#loc94, #loc95, #loc96, #loc89])
#loc166 = loc(fused[#loc102, #loc103])
#loc167 = loc(fused[#loc104, #loc105])
#loc168 = loc(fused[#loc106, #loc107])
#loc169 = loc(fused[#loc109, #loc108])
#loc170 = loc(fused[#loc110, #loc111])
#loc171 = loc(fused[#loc115, #loc113])
#loc172 = loc(fused[#loc117, #loc118])
#loc173 = loc(fused[#loc120, #loc121])
#loc174 = loc(fused[#loc122, #loc123])
#loc175 = loc(fused[#loc124, #loc121])
