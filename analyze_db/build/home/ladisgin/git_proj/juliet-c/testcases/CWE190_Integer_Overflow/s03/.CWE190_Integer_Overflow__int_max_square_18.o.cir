!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc48 = loc("CWE190_Integer_Overflow__int_max_square_18.c":59:24)
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc78)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_18_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc80)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc81)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    cir.br ^bb1 loc(#loc83)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc13)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    cir.br ^bb2 loc(#loc85)
  ^bb2:  // pred: ^bb1
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc8)
    %6 = cir.binop(mul, %4, %5) nsw : !s32i loc(#loc17)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc18)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc19)
    cir.return loc(#loc4)
  } loc(#loc79)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_18_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc87)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc22)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc88)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc24)
    cir.return loc(#loc21)
  } loc(#loc86)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc26)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc89)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc29)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc91)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc92)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc36)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc93)
    cir.br ^bb1 loc(#loc94)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc40)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc95)
    cir.br ^bb2 loc(#loc96)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc97)
  ^bb3:  // pred: ^bb2
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc47)
    %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc47)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc47)
    %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc98)
    cir.brcond %9 ^bb4, ^bb9 loc(#loc48)
  ^bb4:  // pred: ^bb3
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    %11 = cir.abs %10 poison : !s32i loc(#loc50)
    %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc50)
    %13 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc51)
    %14 = cir.const #cir.int<2147483647> : !s32i loc(#loc52)
    %15 = cir.cast(int_to_float, %14 : !s32i), !cir.double loc(#loc52)
    %16 = cir.call @sqrt(%15) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc51)
    %17 = cir.cast(float_to_int, %16 : !cir.double), !s64i loc(#loc51)
    %18 = cir.cmp(lt, %12, %17) : !s64i, !cir.bool loc(#loc99)
    cir.brcond %18 ^bb5, ^bb6 loc(#loc48)
  ^bb5:  // pred: ^bb4
    %19 = cir.const #true loc(#loc48)
    cir.br ^bb7(%19 : !cir.bool) loc(#loc48)
  ^bb6:  // pred: ^bb4
    %20 = cir.const #false loc(#loc48)
    cir.br ^bb7(%20 : !cir.bool) loc(#loc48)
  ^bb7(%21: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_18.c":59:24)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc48)
  ^bb8:  // pred: ^bb7
    cir.br ^bb10(%21 : !cir.bool) loc(#loc48)
  ^bb9:  // pred: ^bb3
    %22 = cir.const #false loc(#loc48)
    cir.br ^bb10(%22 : !cir.bool) loc(#loc48)
  ^bb10(%23: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_18.c":59:24)):  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc48)
  ^bb11:  // pred: ^bb10
    cir.brcond %23 ^bb12, ^bb13 loc(#loc100)
  ^bb12:  // pred: ^bb11
    %24 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    %25 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    %26 = cir.binop(mul, %24, %25) nsw : !s32i loc(#loc57)
    cir.store %26, %0 : !s32i, !cir.ptr<!s32i> loc(#loc91)
    %27 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc58)
    cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc59)
    cir.br ^bb14 loc(#loc55)
  ^bb13:  // pred: ^bb11
    %28 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc29)
    %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    cir.br ^bb14 loc(#loc45)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc45)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc31)
  } loc(#loc90)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc102)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc103)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc67)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    cir.br ^bb1 loc(#loc105)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<2> : !s32i loc(#loc71)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    cir.br ^bb2 loc(#loc107)
  ^bb2:  // pred: ^bb1
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    %6 = cir.binop(mul, %4, %5) nsw : !s32i loc(#loc75)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc76)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc77)
    cir.return loc(#loc62)
  } loc(#loc101)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_18.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_square_18.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_square_18.c":40:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_square_18.c":26:5)
#loc6 = loc("CWE190_Integer_Overflow__int_max_square_18.c":26:9)
#loc7 = loc("CWE190_Integer_Overflow__int_max_square_18.c":37:9)
#loc8 = loc("CWE190_Integer_Overflow__int_max_square_18.c":37:29)
#loc9 = loc("CWE190_Integer_Overflow__int_max_square_18.c":28:12)
#loc10 = loc("CWE190_Integer_Overflow__int_max_square_18.c":28:5)
#loc11 = loc("CWE190_Integer_Overflow__int_max_square_18.c":29:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_square_18.c":29:10)
#loc13 = loc("CWE190_Integer_Overflow__int_max_square_18.c":32:12)
#loc14 = loc("CWE190_Integer_Overflow__int_max_square_18.c":32:5)
#loc15 = loc("CWE190_Integer_Overflow__int_max_square_18.c":33:5)
#loc16 = loc("CWE190_Integer_Overflow__int_max_square_18.c":33:10)
#loc17 = loc("CWE190_Integer_Overflow__int_max_square_18.c":37:22)
#loc18 = loc("CWE190_Integer_Overflow__int_max_square_18.c":38:22)
#loc19 = loc("CWE190_Integer_Overflow__int_max_square_18.c":38:9)
#loc20 = loc("CWE190_Integer_Overflow__int_max_square_18.c":89:1)
#loc21 = loc("CWE190_Integer_Overflow__int_max_square_18.c":93:1)
#loc22 = loc("CWE190_Integer_Overflow__int_max_square_18.c":91:5)
#loc23 = loc("CWE190_Integer_Overflow__int_max_square_18.c":91:13)
#loc24 = loc("CWE190_Integer_Overflow__int_max_square_18.c":92:5)
#loc25 = loc("CWE190_Integer_Overflow__int_max_square_18.c":92:13)
#loc26 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc27 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc28 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc29 = loc("CWE190_Integer_Overflow__int_max_square_18.c":66:19)
#loc30 = loc("CWE190_Integer_Overflow__int_max_square_18.c":47:1)
#loc31 = loc("CWE190_Integer_Overflow__int_max_square_18.c":68:1)
#loc32 = loc("CWE190_Integer_Overflow__int_max_square_18.c":61:9)
#loc33 = loc("CWE190_Integer_Overflow__int_max_square_18.c":61:29)
#loc34 = loc("CWE190_Integer_Overflow__int_max_square_18.c":49:5)
#loc35 = loc("CWE190_Integer_Overflow__int_max_square_18.c":49:9)
#loc36 = loc("CWE190_Integer_Overflow__int_max_square_18.c":51:12)
#loc37 = loc("CWE190_Integer_Overflow__int_max_square_18.c":51:5)
#loc38 = loc("CWE190_Integer_Overflow__int_max_square_18.c":52:5)
#loc39 = loc("CWE190_Integer_Overflow__int_max_square_18.c":52:10)
#loc40 = loc("CWE190_Integer_Overflow__int_max_square_18.c":55:12)
#loc41 = loc("CWE190_Integer_Overflow__int_max_square_18.c":55:5)
#loc42 = loc("CWE190_Integer_Overflow__int_max_square_18.c":56:5)
#loc43 = loc("CWE190_Integer_Overflow__int_max_square_18.c":56:10)
#loc44 = loc("CWE190_Integer_Overflow__int_max_square_18.c":59:5)
#loc45 = loc("CWE190_Integer_Overflow__int_max_square_18.c":67:5)
#loc46 = loc("CWE190_Integer_Overflow__int_max_square_18.c":59:9)
#loc47 = loc("CWE190_Integer_Overflow__int_max_square_18.c":59:16)
#loc49 = loc("CWE190_Integer_Overflow__int_max_square_18.c":59:31)
#loc50 = loc("CWE190_Integer_Overflow__int_max_square_18.c":59:27)
#loc51 = loc("CWE190_Integer_Overflow__int_max_square_18.c":59:45)
#loc52 = loc("CWE190_Integer_Overflow__int_max_square_18.c":59:58)
#loc53 = loc("CWE190_Integer_Overflow__int_max_square_18.c":59:65)
#loc54 = loc("CWE190_Integer_Overflow__int_max_square_18.c":60:5)
#loc55 = loc("CWE190_Integer_Overflow__int_max_square_18.c":63:5)
#loc56 = loc("CWE190_Integer_Overflow__int_max_square_18.c":65:5)
#loc57 = loc("CWE190_Integer_Overflow__int_max_square_18.c":61:22)
#loc58 = loc("CWE190_Integer_Overflow__int_max_square_18.c":62:22)
#loc59 = loc("CWE190_Integer_Overflow__int_max_square_18.c":62:9)
#loc60 = loc("CWE190_Integer_Overflow__int_max_square_18.c":66:9)
#loc61 = loc("CWE190_Integer_Overflow__int_max_square_18.c":71:1)
#loc62 = loc("CWE190_Integer_Overflow__int_max_square_18.c":87:1)
#loc63 = loc("CWE190_Integer_Overflow__int_max_square_18.c":73:5)
#loc64 = loc("CWE190_Integer_Overflow__int_max_square_18.c":73:9)
#loc65 = loc("CWE190_Integer_Overflow__int_max_square_18.c":84:9)
#loc66 = loc("CWE190_Integer_Overflow__int_max_square_18.c":84:29)
#loc67 = loc("CWE190_Integer_Overflow__int_max_square_18.c":75:12)
#loc68 = loc("CWE190_Integer_Overflow__int_max_square_18.c":75:5)
#loc69 = loc("CWE190_Integer_Overflow__int_max_square_18.c":76:5)
#loc70 = loc("CWE190_Integer_Overflow__int_max_square_18.c":76:10)
#loc71 = loc("CWE190_Integer_Overflow__int_max_square_18.c":79:12)
#loc72 = loc("CWE190_Integer_Overflow__int_max_square_18.c":79:5)
#loc73 = loc("CWE190_Integer_Overflow__int_max_square_18.c":80:5)
#loc74 = loc("CWE190_Integer_Overflow__int_max_square_18.c":80:10)
#loc75 = loc("CWE190_Integer_Overflow__int_max_square_18.c":84:22)
#loc76 = loc("CWE190_Integer_Overflow__int_max_square_18.c":85:22)
#loc77 = loc("CWE190_Integer_Overflow__int_max_square_18.c":85:9)
#loc78 = loc(fused[#loc1, #loc2])
#loc79 = loc(fused[#loc3, #loc4])
#loc80 = loc(fused[#loc5, #loc6])
#loc81 = loc(fused[#loc7, #loc8])
#loc82 = loc(fused[#loc10, #loc9])
#loc83 = loc(fused[#loc11, #loc12])
#loc84 = loc(fused[#loc14, #loc13])
#loc85 = loc(fused[#loc15, #loc16])
#loc86 = loc(fused[#loc20, #loc21])
#loc87 = loc(fused[#loc22, #loc23])
#loc88 = loc(fused[#loc24, #loc25])
#loc89 = loc(fused[#loc27, #loc28])
#loc90 = loc(fused[#loc30, #loc31])
#loc91 = loc(fused[#loc32, #loc33])
#loc92 = loc(fused[#loc34, #loc35])
#loc93 = loc(fused[#loc37, #loc36])
#loc94 = loc(fused[#loc38, #loc39])
#loc95 = loc(fused[#loc41, #loc40])
#loc96 = loc(fused[#loc42, #loc43])
#loc97 = loc(fused[#loc44, #loc45])
#loc98 = loc(fused[#loc46, #loc47])
#loc99 = loc(fused[#loc50, #loc53])
#loc100 = loc(fused[#loc54, #loc55, #loc56, #loc45])
#loc101 = loc(fused[#loc61, #loc62])
#loc102 = loc(fused[#loc63, #loc64])
#loc103 = loc(fused[#loc65, #loc66])
#loc104 = loc(fused[#loc68, #loc67])
#loc105 = loc(fused[#loc69, #loc70])
#loc106 = loc(fused[#loc72, #loc71])
#loc107 = loc(fused[#loc73, #loc74])
