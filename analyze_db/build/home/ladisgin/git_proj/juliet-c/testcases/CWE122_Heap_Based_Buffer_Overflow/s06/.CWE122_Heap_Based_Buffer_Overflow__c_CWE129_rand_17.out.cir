!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":169:10)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":169:14)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":169:20)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":169:32)
#true = #cir.bool<true> : !cir.bool
#loc382 = loc(fused[#loc122, #loc123])
#loc383 = loc(fused[#loc124, #loc125])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc330)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc331)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc332)
  cir.func private @printIntLine(!s32i) loc(#loc333)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc334)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc11)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc335)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc337)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc338)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc339)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc22)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc340)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc26)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc342)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc343)
        cir.condition(%8) loc(#loc30)
      } body {
        cir.scope {
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc32)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc32)
          %8 = cir.binop(and, %6, %7) : !s32i loc(#loc32)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc32)
          %10 = cir.ternary(%9, true {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc32)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc32)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc32)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc32)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc32)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc32)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc32)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc32)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc32)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc32)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc32)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc32)
            cir.yield %23 : !u32i loc(#loc32)
          }, false {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc32)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc32)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc32)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc32)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc32)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc32)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc32)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc32)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc32)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc32)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc32)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc32)
            %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc32)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc32)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc32)
            %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc32)
            cir.yield %27 : !u32i loc(#loc32)
          }) : (!cir.bool) -> !u32i loc(#loc32)
          %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc32)
          cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc345)
        } loc(#loc344)
        cir.yield loc(#loc25)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc34)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc35)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc346)
        cir.yield loc(#loc341)
      } loc(#loc341)
    } loc(#loc341)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc38)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc348)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc40)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc41)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc349)
        cir.condition(%8) loc(#loc42)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc352)
            %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc353)
            %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc50)
            %9 = cir.const #cir.int<10> : !s32i loc(#loc51)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc51)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc354)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc355)
            %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc50)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc356)
            cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc353)
            cir.scope {
              %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc56)
              %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc57)
              %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc57)
              %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc358)
              cir.if %21 {
                %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc59)
                %23 = cir.const #cir.int<1> : !s32i loc(#loc60)
                %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc61)
                cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc59)
              } loc(#loc359)
            } loc(#loc357)
            cir.scope {
              %18 = cir.const #cir.int<0> : !s32i loc(#loc64)
              cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc361)
              cir.for : cond {
                %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc66)
                %20 = cir.const #cir.int<10> : !s32i loc(#loc67)
                %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc362)
                cir.condition(%21) loc(#loc68)
              } body {
                cir.scope {
                  %19 = cir.const #cir.int<0> : !s32i loc(#loc70)
                  %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc71)
                  %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc72)
                  %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc73)
                  cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc364)
                } loc(#loc363)
                cir.yield loc(#loc63)
              } step {
                %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc74)
                %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc75)
                cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc365)
                cir.yield loc(#loc360)
              } loc(#loc360)
            } loc(#loc360)
            cir.scope {
              %18 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc78)
              %19 = cir.const #cir.int<0> : !s32i loc(#loc79)
              %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc367)
              cir.if %20 {
                %21 = cir.const #cir.int<1> : !s32i loc(#loc83)
                %22 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc84)
                %23 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc85)
                %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc86)
                cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc369)
                cir.scope {
                  %25 = cir.const #cir.int<0> : !s32i loc(#loc89)
                  cir.store %25, %6 : !s32i, !cir.ptr<!s32i> loc(#loc371)
                  cir.for : cond {
                    %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc91)
                    %27 = cir.const #cir.int<10> : !s32i loc(#loc92)
                    %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc372)
                    cir.condition(%28) loc(#loc93)
                  } body {
                    cir.scope {
                      %26 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
                      %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc96)
                      %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc97)
                      %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc95)
                      cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc98)
                    } loc(#loc373)
                    cir.yield loc(#loc88)
                  } step {
                    %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc99)
                    %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc100)
                    cir.store %27, %6 : !s32i, !cir.ptr<!s32i> loc(#loc374)
                    cir.yield loc(#loc370)
                  } loc(#loc370)
                } loc(#loc370)
              } else {
                %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc11)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc11)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc101)
              } loc(#loc368)
            } loc(#loc366)
            %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc102)
            %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc103)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc103)
            cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc102)
          } loc(#loc351)
        } loc(#loc350)
        cir.yield loc(#loc37)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc104)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc105)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc375)
        cir.yield loc(#loc347)
      } loc(#loc347)
    } loc(#loc347)
    cir.return loc(#loc15)
  } loc(#loc336)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc377)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc108)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc378)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc110)
    cir.return loc(#loc107)
  } loc(#loc376)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc379)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc380)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc116)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc117)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc118)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc119)
  cir.func @main(%arg0: !s32i loc(fused[#loc122, #loc123]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc124, #loc125])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc382)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc383)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc121)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc126)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc127)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc128)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc128)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc129)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc116)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc116)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc130)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc384)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17_good() : () -> () loc(#loc131)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc117)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc117)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc133)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc118)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc118)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc134)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc385)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17_bad() : () -> () loc(#loc135)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc119)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc119)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc137)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc138)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc386)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc386)
    cir.return %17 : !s32i loc(#loc386)
  } loc(#loc381)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc140)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc388)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc389)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc390)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc148)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc149)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc391)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc153)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc393)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc155)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc156)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc394)
        cir.condition(%8) loc(#loc157)
      } body {
        cir.scope {
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc159)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc159)
          %8 = cir.binop(and, %6, %7) : !s32i loc(#loc159)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc159)
          %10 = cir.ternary(%9, true {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc159)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc159)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc159)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc159)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc159)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc159)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc159)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc159)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc159)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc159)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc159)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc159)
            cir.yield %23 : !u32i loc(#loc159)
          }, false {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc159)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc159)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc159)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc159)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc159)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc159)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc159)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc159)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc159)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc159)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc159)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc159)
            %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc159)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc159)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc159)
            %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc159)
            cir.yield %27 : !u32i loc(#loc159)
          }) : (!cir.bool) -> !u32i loc(#loc159)
          %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc159)
          cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc396)
        } loc(#loc395)
        cir.yield loc(#loc152)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc161)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc162)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc397)
        cir.yield loc(#loc392)
      } loc(#loc392)
    } loc(#loc392)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc165)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc399)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc167)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc168)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc400)
        cir.condition(%8) loc(#loc169)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc403)
            %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc404)
            %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc177)
            %9 = cir.const #cir.int<10> : !s32i loc(#loc178)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc178)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc405)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc406)
            %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc177)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc407)
            cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc404)
            cir.scope {
              %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc183)
              %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc184)
              %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc184)
              %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc409)
              cir.if %21 {
                %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc186)
                %23 = cir.const #cir.int<1> : !s32i loc(#loc187)
                %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc188)
                cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc186)
              } loc(#loc410)
            } loc(#loc408)
            cir.scope {
              %18 = cir.const #cir.int<0> : !s32i loc(#loc191)
              cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc412)
              cir.for : cond {
                %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc193)
                %20 = cir.const #cir.int<10> : !s32i loc(#loc194)
                %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc413)
                cir.condition(%21) loc(#loc195)
              } body {
                cir.scope {
                  %19 = cir.const #cir.int<0> : !s32i loc(#loc197)
                  %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc198)
                  %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc199)
                  %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc200)
                  cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc415)
                } loc(#loc414)
                cir.yield loc(#loc190)
              } step {
                %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc201)
                %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc202)
                cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc416)
                cir.yield loc(#loc411)
              } loc(#loc411)
            } loc(#loc411)
            cir.scope {
              %18 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc205)
              %19 = cir.const #cir.int<0> : !s32i loc(#loc206)
              %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc418)
              %21 = cir.ternary(%20, true {
                %22 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc208)
                %23 = cir.const #cir.int<10> : !s32i loc(#loc209)
                %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc419)
                %25 = cir.ternary(%24, true {
                  %26 = cir.const #true loc(#loc207)
                  cir.yield %26 : !cir.bool loc(#loc207)
                }, false {
                  %26 = cir.const #false loc(#loc207)
                  cir.yield %26 : !cir.bool loc(#loc207)
                }) : (!cir.bool) -> !cir.bool loc(#loc207)
                cir.yield %25 : !cir.bool loc(#loc207)
              }, false {
                %22 = cir.const #false loc(#loc207)
                cir.yield %22 : !cir.bool loc(#loc207)
              }) : (!cir.bool) -> !cir.bool loc(#loc207)
              cir.if %21 {
                %22 = cir.const #cir.int<1> : !s32i loc(#loc214)
                %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc215)
                %24 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc216)
                %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc217)
                cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc421)
                cir.scope {
                  %26 = cir.const #cir.int<0> : !s32i loc(#loc220)
                  cir.store %26, %6 : !s32i, !cir.ptr<!s32i> loc(#loc423)
                  cir.for : cond {
                    %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc222)
                    %28 = cir.const #cir.int<10> : !s32i loc(#loc223)
                    %29 = cir.cmp(lt, %27, %28) : !s32i, !cir.bool loc(#loc424)
                    cir.condition(%29) loc(#loc224)
                  } body {
                    cir.scope {
                      %27 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc226)
                      %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc227)
                      %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc228)
                      %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc226)
                      cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc229)
                    } loc(#loc425)
                    cir.yield loc(#loc219)
                  } step {
                    %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc230)
                    %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc231)
                    cir.store %28, %6 : !s32i, !cir.ptr<!s32i> loc(#loc426)
                    cir.yield loc(#loc422)
                  } loc(#loc422)
                } loc(#loc422)
              } else {
                %22 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc140)
                %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc140)
                cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc232)
              } loc(#loc420)
            } loc(#loc417)
            %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc233)
            %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc234)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc234)
            cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc233)
          } loc(#loc402)
        } loc(#loc401)
        cir.yield loc(#loc164)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc235)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc236)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc427)
        cir.yield loc(#loc398)
      } loc(#loc398)
    } loc(#loc398)
    cir.return loc(#loc142)
  } loc(#loc387)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc429)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc430)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc431)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc244)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc245)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc432)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc249)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc434)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc251)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc252)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc435)
        cir.condition(%8) loc(#loc253)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<7> : !s32i loc(#loc255)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc437)
        } loc(#loc436)
        cir.yield loc(#loc248)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc257)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc258)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc438)
        cir.yield loc(#loc433)
      } loc(#loc433)
    } loc(#loc433)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc261)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc440)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc263)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc264)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc441)
        cir.condition(%8) loc(#loc265)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc444)
            %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc445)
            %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc273)
            %9 = cir.const #cir.int<10> : !s32i loc(#loc274)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc274)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc446)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc447)
            %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc273)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc448)
            cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc445)
            cir.scope {
              %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc279)
              %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc280)
              %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc280)
              %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc450)
              cir.if %21 {
                %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc282)
                %23 = cir.const #cir.int<1> : !s32i loc(#loc283)
                %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc284)
                cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc282)
              } loc(#loc451)
            } loc(#loc449)
            cir.scope {
              %18 = cir.const #cir.int<0> : !s32i loc(#loc287)
              cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc453)
              cir.for : cond {
                %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc289)
                %20 = cir.const #cir.int<10> : !s32i loc(#loc290)
                %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc454)
                cir.condition(%21) loc(#loc291)
              } body {
                cir.scope {
                  %19 = cir.const #cir.int<0> : !s32i loc(#loc293)
                  %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc294)
                  %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc295)
                  %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc296)
                  cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc456)
                } loc(#loc455)
                cir.yield loc(#loc286)
              } step {
                %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc297)
                %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc298)
                cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc457)
                cir.yield loc(#loc452)
              } loc(#loc452)
            } loc(#loc452)
            cir.scope {
              %18 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc301)
              %19 = cir.const #cir.int<0> : !s32i loc(#loc302)
              %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc459)
              cir.if %20 {
                %21 = cir.const #cir.int<1> : !s32i loc(#loc306)
                %22 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc307)
                %23 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc308)
                %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc309)
                cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc461)
                cir.scope {
                  %25 = cir.const #cir.int<0> : !s32i loc(#loc312)
                  cir.store %25, %6 : !s32i, !cir.ptr<!s32i> loc(#loc463)
                  cir.for : cond {
                    %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc314)
                    %27 = cir.const #cir.int<10> : !s32i loc(#loc315)
                    %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc464)
                    cir.condition(%28) loc(#loc316)
                  } body {
                    cir.scope {
                      %26 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc318)
                      %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc319)
                      %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc320)
                      %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc318)
                      cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc321)
                    } loc(#loc465)
                    cir.yield loc(#loc311)
                  } step {
                    %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc322)
                    %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc323)
                    cir.store %27, %6 : !s32i, !cir.ptr<!s32i> loc(#loc466)
                    cir.yield loc(#loc462)
                  } loc(#loc462)
                } loc(#loc462)
              } else {
                %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc324)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc324)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc325)
              } loc(#loc460)
            } loc(#loc458)
            %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc326)
            %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc327)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc327)
            cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc326)
          } loc(#loc443)
        } loc(#loc442)
        cir.yield loc(#loc260)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc328)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc329)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc467)
        cir.yield loc(#loc439)
      } loc(#loc439)
    } loc(#loc439)
    cir.return loc(#loc238)
  } loc(#loc428)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":57:27)
#loc12 = loc("/usr/include/stdlib.h":687:1)
#loc13 = loc("/usr/include/stdlib.h":687:32)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":22:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":62:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":24:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":24:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":24:11)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":25:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":25:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":27:13)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":27:12)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":27:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":28:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":32:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":28:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":28:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":28:16)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":28:20)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":28:18)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":29:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":31:16)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":31:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":28:24)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":28:23)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":33:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":61:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":33:13)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":33:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":33:16)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":33:20)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":33:18)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":34:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":35:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":60:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":36:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":36:17)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":37:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":37:58)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":37:35)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":37:42)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":37:47)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":37:57)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":38:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":38:43)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":38:17)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":38:27)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":38:33)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":38:34)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":38:40)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":38:39)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":40:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":43:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":40:22)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":40:18)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":40:25)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":40:29)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":40:27)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":41:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":42:29)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":42:17)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":42:24)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":42:25)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":40:34)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":40:33)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":46:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":58:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":46:17)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":46:25)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":47:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":54:13)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":56:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":48:32)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":48:17)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":48:24)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":48:28)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":50:17)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":53:17)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":50:25)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":50:21)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":50:28)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":50:32)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":50:30)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":51:17)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":52:34)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":52:41)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":52:42)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":52:21)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":50:37)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":50:36)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":57:17)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":59:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":59:18)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":33:24)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":33:23)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":154:1)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":158:1)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":156:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":156:13)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":157:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":157:13)
#loc112 = loc("/usr/include/stdlib.h":575:1)
#loc113 = loc("/usr/include/stdlib.h":575:41)
#loc114 = loc("/usr/include/time.h":76:1)
#loc115 = loc("/usr/include/time.h":76:38)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":174:15)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":176:15)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":179:15)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":181:15)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":169:1)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":184:1)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":170:1)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":172:27)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":172:22)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":172:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":174:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":175:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":175:62)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":176:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":179:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":180:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":180:61)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":181:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":183:12)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":183:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":103:27)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":69:1)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":108:1)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":71:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":71:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":71:11)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":72:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":72:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":74:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":74:12)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":74:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":75:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":79:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":75:13)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":75:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":75:16)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":75:20)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":75:18)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":76:5)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":78:16)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":78:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":75:24)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":75:23)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":80:5)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":107:5)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":80:13)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":80:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":80:16)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":80:20)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":80:18)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":81:5)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":82:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":106:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":83:13)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":83:17)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":84:13)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":84:58)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":84:35)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":84:42)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":84:47)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":84:57)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":85:13)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":85:43)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":85:17)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":85:27)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":85:33)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":85:34)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":85:40)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":85:39)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":87:13)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":90:13)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":87:22)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":87:18)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":87:25)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":87:29)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":87:27)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":88:13)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":89:29)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":89:17)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":89:24)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":89:25)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":87:34)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":87:33)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":92:13)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":104:13)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":92:17)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":92:25)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":92:27)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":92:30)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":92:38)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":92:40)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":93:13)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":100:13)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":102:13)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":94:32)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":94:17)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":94:24)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":94:28)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":96:17)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":99:17)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":96:25)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":96:21)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":96:28)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":96:32)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":96:30)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":97:17)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":98:34)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":98:41)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":98:42)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":98:21)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":96:37)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":96:36)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":103:17)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":105:13)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":105:18)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":80:24)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":80:23)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":111:1)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":152:1)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":113:5)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":113:9)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":113:11)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":114:5)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":114:9)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":116:13)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":116:12)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":116:5)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":117:5)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":122:5)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":117:13)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":117:9)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":117:16)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":117:20)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":117:18)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":118:5)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":121:16)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":121:9)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":117:24)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":117:23)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":123:5)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":151:5)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":123:13)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":123:9)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":123:16)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":123:20)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":123:18)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":124:5)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":125:9)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":150:9)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":126:13)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":126:17)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":127:13)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":127:58)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":127:35)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":127:42)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":127:47)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":127:57)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":128:13)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":128:43)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":128:17)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":128:27)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":128:33)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":128:34)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":128:40)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":128:39)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":130:13)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":133:13)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":130:22)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":130:18)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":130:25)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":130:29)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":130:27)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":131:13)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":132:29)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":132:17)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":132:24)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":132:25)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":130:34)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":130:33)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":136:13)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":148:13)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":136:17)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":136:25)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":137:13)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":144:13)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":146:13)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":138:32)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":138:17)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":138:24)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":138:28)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":140:17)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":143:17)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":140:25)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":140:21)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":140:28)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":140:32)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":140:30)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":141:17)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":142:34)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":142:41)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":142:42)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":142:21)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":140:37)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":140:36)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":147:27)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":147:17)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":149:13)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":149:18)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":123:24)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c":123:23)
#loc330 = loc(fused[#loc1, #loc2])
#loc331 = loc(fused[#loc3, #loc4])
#loc332 = loc(fused[#loc5, #loc6])
#loc333 = loc(fused[#loc7, #loc8])
#loc334 = loc(fused[#loc9, #loc10])
#loc335 = loc(fused[#loc12, #loc13])
#loc336 = loc(fused[#loc14, #loc15])
#loc337 = loc(fused[#loc16, #loc17])
#loc338 = loc(fused[#loc16, #loc18])
#loc339 = loc(fused[#loc19, #loc20])
#loc340 = loc(fused[#loc23, #loc21])
#loc341 = loc(fused[#loc24, #loc25])
#loc342 = loc(fused[#loc27, #loc26])
#loc343 = loc(fused[#loc28, #loc29])
#loc344 = loc(fused[#loc31, #loc25])
#loc345 = loc(fused[#loc33, #loc32])
#loc346 = loc(fused[#loc35, #loc34])
#loc347 = loc(fused[#loc36, #loc37])
#loc348 = loc(fused[#loc39, #loc38])
#loc349 = loc(fused[#loc40, #loc41])
#loc350 = loc(fused[#loc43, #loc37])
#loc351 = loc(fused[#loc44, #loc45])
#loc352 = loc(fused[#loc46, #loc47])
#loc353 = loc(fused[#loc48, #loc49])
#loc354 = loc(fused[#loc52, #loc53])
#loc355 = loc(fused[#loc51, #loc53])
#loc356 = loc(fused[#loc50, #loc49])
#loc357 = loc(fused[#loc54, #loc55])
#loc358 = loc(fused[#loc56, #loc57])
#loc359 = loc(fused[#loc58, #loc55])
#loc360 = loc(fused[#loc62, #loc63])
#loc361 = loc(fused[#loc65, #loc64])
#loc362 = loc(fused[#loc66, #loc67])
#loc363 = loc(fused[#loc69, #loc63])
#loc364 = loc(fused[#loc71, #loc70])
#loc365 = loc(fused[#loc75, #loc74])
#loc366 = loc(fused[#loc76, #loc77])
#loc367 = loc(fused[#loc78, #loc79])
#loc368 = loc(fused[#loc80, #loc81, #loc82, #loc77])
#loc369 = loc(fused[#loc84, #loc83])
#loc370 = loc(fused[#loc87, #loc88])
#loc371 = loc(fused[#loc90, #loc89])
#loc372 = loc(fused[#loc91, #loc92])
#loc373 = loc(fused[#loc94, #loc88])
#loc374 = loc(fused[#loc100, #loc99])
#loc375 = loc(fused[#loc105, #loc104])
#loc376 = loc(fused[#loc106, #loc107])
#loc377 = loc(fused[#loc108, #loc109])
#loc378 = loc(fused[#loc110, #loc111])
#loc379 = loc(fused[#loc112, #loc113])
#loc380 = loc(fused[#loc114, #loc115])
#loc381 = loc(fused[#loc120, #loc121])
#loc384 = loc(fused[#loc131, #loc132])
#loc385 = loc(fused[#loc135, #loc136])
#loc386 = loc(fused[#loc139, #loc138])
#loc387 = loc(fused[#loc141, #loc142])
#loc388 = loc(fused[#loc143, #loc144])
#loc389 = loc(fused[#loc143, #loc145])
#loc390 = loc(fused[#loc146, #loc147])
#loc391 = loc(fused[#loc150, #loc148])
#loc392 = loc(fused[#loc151, #loc152])
#loc393 = loc(fused[#loc154, #loc153])
#loc394 = loc(fused[#loc155, #loc156])
#loc395 = loc(fused[#loc158, #loc152])
#loc396 = loc(fused[#loc160, #loc159])
#loc397 = loc(fused[#loc162, #loc161])
#loc398 = loc(fused[#loc163, #loc164])
#loc399 = loc(fused[#loc166, #loc165])
#loc400 = loc(fused[#loc167, #loc168])
#loc401 = loc(fused[#loc170, #loc164])
#loc402 = loc(fused[#loc171, #loc172])
#loc403 = loc(fused[#loc173, #loc174])
#loc404 = loc(fused[#loc175, #loc176])
#loc405 = loc(fused[#loc179, #loc180])
#loc406 = loc(fused[#loc178, #loc180])
#loc407 = loc(fused[#loc177, #loc176])
#loc408 = loc(fused[#loc181, #loc182])
#loc409 = loc(fused[#loc183, #loc184])
#loc410 = loc(fused[#loc185, #loc182])
#loc411 = loc(fused[#loc189, #loc190])
#loc412 = loc(fused[#loc192, #loc191])
#loc413 = loc(fused[#loc193, #loc194])
#loc414 = loc(fused[#loc196, #loc190])
#loc415 = loc(fused[#loc198, #loc197])
#loc416 = loc(fused[#loc202, #loc201])
#loc417 = loc(fused[#loc203, #loc204])
#loc418 = loc(fused[#loc205, #loc206])
#loc419 = loc(fused[#loc208, #loc210])
#loc420 = loc(fused[#loc211, #loc212, #loc213, #loc204])
#loc421 = loc(fused[#loc215, #loc214])
#loc422 = loc(fused[#loc218, #loc219])
#loc423 = loc(fused[#loc221, #loc220])
#loc424 = loc(fused[#loc222, #loc223])
#loc425 = loc(fused[#loc225, #loc219])
#loc426 = loc(fused[#loc231, #loc230])
#loc427 = loc(fused[#loc236, #loc235])
#loc428 = loc(fused[#loc237, #loc238])
#loc429 = loc(fused[#loc239, #loc240])
#loc430 = loc(fused[#loc239, #loc241])
#loc431 = loc(fused[#loc242, #loc243])
#loc432 = loc(fused[#loc246, #loc244])
#loc433 = loc(fused[#loc247, #loc248])
#loc434 = loc(fused[#loc250, #loc249])
#loc435 = loc(fused[#loc251, #loc252])
#loc436 = loc(fused[#loc254, #loc248])
#loc437 = loc(fused[#loc256, #loc255])
#loc438 = loc(fused[#loc258, #loc257])
#loc439 = loc(fused[#loc259, #loc260])
#loc440 = loc(fused[#loc262, #loc261])
#loc441 = loc(fused[#loc263, #loc264])
#loc442 = loc(fused[#loc266, #loc260])
#loc443 = loc(fused[#loc267, #loc268])
#loc444 = loc(fused[#loc269, #loc270])
#loc445 = loc(fused[#loc271, #loc272])
#loc446 = loc(fused[#loc275, #loc276])
#loc447 = loc(fused[#loc274, #loc276])
#loc448 = loc(fused[#loc273, #loc272])
#loc449 = loc(fused[#loc277, #loc278])
#loc450 = loc(fused[#loc279, #loc280])
#loc451 = loc(fused[#loc281, #loc278])
#loc452 = loc(fused[#loc285, #loc286])
#loc453 = loc(fused[#loc288, #loc287])
#loc454 = loc(fused[#loc289, #loc290])
#loc455 = loc(fused[#loc292, #loc286])
#loc456 = loc(fused[#loc294, #loc293])
#loc457 = loc(fused[#loc298, #loc297])
#loc458 = loc(fused[#loc299, #loc300])
#loc459 = loc(fused[#loc301, #loc302])
#loc460 = loc(fused[#loc303, #loc304, #loc305, #loc300])
#loc461 = loc(fused[#loc307, #loc306])
#loc462 = loc(fused[#loc310, #loc311])
#loc463 = loc(fused[#loc313, #loc312])
#loc464 = loc(fused[#loc314, #loc315])
#loc465 = loc(fused[#loc317, #loc311])
#loc466 = loc(fused[#loc323, #loc322])
#loc467 = loc(fused[#loc329, #loc328])
