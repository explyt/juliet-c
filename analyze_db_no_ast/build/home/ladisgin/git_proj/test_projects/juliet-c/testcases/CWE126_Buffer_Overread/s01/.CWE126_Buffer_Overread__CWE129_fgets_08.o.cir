!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_fgets_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc284)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc285)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc286)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc287)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @printIntLine(!s32i) loc(#loc288)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is negative\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc12)
  cir.func no_proto  @CWE126_Buffer_Overread__CWE129_fgets_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc290)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc18)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc291)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc293)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc22)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc22)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc296)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc296)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc296)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc31)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc32)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc32)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc32)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc32)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc32)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc32)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc32)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc32)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc285)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc33)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc34)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc35)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc35)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !s32i loc(#loc298)
            %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc36)
            cir.if %23 {
              %24 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc40)
              %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc41)
              cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc300)
            } else {
              %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc44)
            } loc(#loc299)
          } loc(#loc297)
        } loc(#loc295)
      } loc(#loc294)
    } loc(#loc292)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc302)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc47)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc47)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc305)
          %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc305)
          cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc305)
          cir.scope {
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc57)
            %10 = cir.cmp(ge, %8, %9) : !s32i, !s32i loc(#loc307)
            %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc58)
            cir.if %11 {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
              %13 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc63)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc63)
              %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc63)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc64)
            } else {
              %12 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc12)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc12)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc65)
            } loc(#loc308)
          } loc(#loc306)
        } loc(#loc304)
      } loc(#loc303)
    } loc(#loc301)
    cir.return loc(#loc14)
  } loc(#loc289)
  cir.func no_proto  @CWE126_Buffer_Overread__CWE129_fgets_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc310)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc68)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc311)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc70)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc312)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc72)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc313)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc74)
    cir.return loc(#loc67)
  } loc(#loc309)
  cir.func no_proto internal private  @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc77)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc78)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc315)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc315)
    cir.return %2 : !s32i loc(#loc315)
  } loc(#loc314)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc80)
  cir.global "private"  constant internal dsolocal @".str3" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc81)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc317)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc87)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc318)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc320)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc91)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc91)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc323)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc323)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc323)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc100)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc101)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc101)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc101)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc101)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc101)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc101)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc101)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc101)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc285)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc102)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc103)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc104)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc104)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !s32i loc(#loc325)
            %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc105)
            cir.if %23 {
              %24 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc109)
              %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc110)
              cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc327)
            } else {
              %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc113)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc113)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc114)
            } loc(#loc326)
          } loc(#loc324)
        } loc(#loc322)
      } loc(#loc321)
    } loc(#loc319)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc329)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc117)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc117)
      cir.if %5 {
        %6 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc80)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc80)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc122)
      } else {
        cir.scope {
          %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc332)
          %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc332)
          cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc332)
          cir.scope {
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc130)
            %10 = cir.cmp(ge, %8, %9) : !s32i, !s32i loc(#loc334)
            %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc131)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc133)
              %14 = cir.const #cir.int<10> : !s32i loc(#loc134)
              %15 = cir.cmp(lt, %13, %14) : !s32i, !s32i loc(#loc335)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc136)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc132)
                cir.yield %18 : !cir.bool loc(#loc132)
              }, false {
                %18 = cir.const #false loc(#loc132)
                cir.yield %18 : !cir.bool loc(#loc132)
              }) : (!cir.bool) -> !cir.bool loc(#loc132)
              cir.yield %17 : !cir.bool loc(#loc132)
            }, false {
              %13 = cir.const #false loc(#loc132)
              cir.yield %13 : !cir.bool loc(#loc132)
            }) : (!cir.bool) -> !cir.bool loc(#loc132)
            cir.if %12 {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc140)
              %14 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc141)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc141)
              %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc141)
              cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc142)
            } else {
              %13 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc81)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc81)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc143)
            } loc(#loc336)
          } loc(#loc333)
        } loc(#loc331)
      } loc(#loc330)
    } loc(#loc328)
    cir.return loc(#loc83)
  } loc(#loc316)
  cir.func no_proto internal private  @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc145)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc146)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc338)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc338)
    cir.return %2 : !s32i loc(#loc338)
  } loc(#loc337)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc340)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc152)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc153)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc341)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc343)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc157)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc157)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc346)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc346)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc346)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc166)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc167)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc167)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc167)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc167)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc167)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc167)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc167)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc167)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc285)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc168)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc169)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc170)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc170)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !s32i loc(#loc348)
            %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc171)
            cir.if %23 {
              %24 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc175)
              %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc176)
              cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc350)
            } else {
              %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc179)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc179)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc180)
            } loc(#loc349)
          } loc(#loc347)
        } loc(#loc345)
      } loc(#loc344)
    } loc(#loc342)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc352)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc183)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc183)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc355)
          %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc355)
          cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc355)
          cir.scope {
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc192)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc193)
            %10 = cir.cmp(ge, %8, %9) : !s32i, !s32i loc(#loc357)
            %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc194)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc196)
              %14 = cir.const #cir.int<10> : !s32i loc(#loc197)
              %15 = cir.cmp(lt, %13, %14) : !s32i, !s32i loc(#loc358)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc199)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc195)
                cir.yield %18 : !cir.bool loc(#loc195)
              }, false {
                %18 = cir.const #false loc(#loc195)
                cir.yield %18 : !cir.bool loc(#loc195)
              }) : (!cir.bool) -> !cir.bool loc(#loc195)
              cir.yield %17 : !cir.bool loc(#loc195)
            }, false {
              %13 = cir.const #false loc(#loc195)
              cir.yield %13 : !cir.bool loc(#loc195)
            }) : (!cir.bool) -> !cir.bool loc(#loc195)
            cir.if %12 {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc203)
              %14 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc204)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc204)
              %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc204)
              cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc205)
            } else {
              %13 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc206)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc206)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc207)
            } loc(#loc359)
          } loc(#loc356)
        } loc(#loc354)
      } loc(#loc353)
    } loc(#loc351)
    cir.return loc(#loc149)
  } loc(#loc339)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc361)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc212)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc213)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc362)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc364)
      %4 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc217)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc217)
      cir.if %5 {
        %6 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc222)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc222)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc223)
      } else {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc224)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc366)
      } loc(#loc365)
    } loc(#loc363)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc368)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc228)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc228)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc371)
          %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc371)
          cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc371)
          cir.scope {
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc237)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc238)
            %10 = cir.cmp(ge, %8, %9) : !s32i, !s32i loc(#loc373)
            %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc239)
            cir.if %11 {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc243)
              %13 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc244)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc244)
              %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc244)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc245)
            } else {
              %12 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc246)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc246)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc247)
            } loc(#loc374)
          } loc(#loc372)
        } loc(#loc370)
      } loc(#loc369)
    } loc(#loc367)
    cir.return loc(#loc209)
  } loc(#loc360)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc376)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc252)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc253)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc377)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc379)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc257)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc257)
      cir.if %5 {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc260)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc381)
      } loc(#loc380)
    } loc(#loc378)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc383)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc264)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc264)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc386)
          %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc386)
          cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc386)
          cir.scope {
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc273)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc274)
            %10 = cir.cmp(ge, %8, %9) : !s32i, !s32i loc(#loc388)
            %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc275)
            cir.if %11 {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc279)
              %13 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc280)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc280)
              %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc280)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc281)
            } else {
              %12 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc282)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc282)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc283)
            } loc(#loc389)
          } loc(#loc387)
        } loc(#loc385)
      } loc(#loc384)
    } loc(#loc382)
    cir.return loc(#loc249)
  } loc(#loc375)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_fgets_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":54:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":70:27)
#loc13 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":37:1)
#loc14 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":74:1)
#loc15 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":39:5)
#loc16 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":39:9)
#loc17 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":41:13)
#loc18 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":41:12)
#loc19 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":41:5)
#loc20 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":42:5)
#loc21 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":57:5)
#loc22 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":42:8)
#loc23 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":42:26)
#loc24 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":43:5)
#loc25 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":44:9)
#loc26 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":56:9)
#loc27 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":45:13)
#loc28 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":45:49)
#loc29 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":47:13)
#loc30 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":55:13)
#loc31 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":47:23)
#loc32 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":47:36)
#loc33 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":47:53)
#loc34 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":47:17)
#loc35 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":47:63)
#loc36 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":47:60)
#loc37 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":48:13)
#loc38 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":51:13)
#loc39 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":53:13)
#loc40 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":50:29)
#loc41 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":50:24)
#loc42 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":50:17)
#loc43 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":50:40)
#loc44 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":54:17)
#loc45 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":58:5)
#loc46 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":73:5)
#loc47 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":58:8)
#loc48 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":58:26)
#loc49 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":59:5)
#loc50 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":60:9)
#loc51 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":72:9)
#loc52 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":61:13)
#loc53 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":61:34)
#loc54 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":64:13)
#loc55 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":71:13)
#loc56 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":64:17)
#loc57 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":64:25)
#loc58 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":64:22)
#loc59 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":65:13)
#loc60 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":67:13)
#loc61 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":69:13)
#loc62 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":66:37)
#loc63 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":66:30)
#loc64 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":66:17)
#loc65 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":70:17)
#loc66 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":228:1)
#loc67 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":234:1)
#loc68 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":230:5)
#loc69 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":230:14)
#loc70 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":231:5)
#loc71 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":231:14)
#loc72 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":232:5)
#loc73 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":232:14)
#loc74 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":233:5)
#loc75 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":233:14)
#loc76 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":25:1)
#loc77 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":28:1)
#loc78 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":27:12)
#loc79 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":27:5)
#loc80 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":105:19)
#loc81 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":118:27)
#loc82 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":81:1)
#loc83 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":122:1)
#loc84 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":83:5)
#loc85 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":83:9)
#loc86 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":85:13)
#loc87 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":85:12)
#loc88 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":85:5)
#loc89 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":86:5)
#loc90 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":101:5)
#loc91 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":86:8)
#loc92 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":86:26)
#loc93 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":87:5)
#loc94 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":88:9)
#loc95 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":100:9)
#loc96 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":89:13)
#loc97 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":89:49)
#loc98 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":91:13)
#loc99 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":99:13)
#loc100 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":91:23)
#loc101 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":91:36)
#loc102 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":91:53)
#loc103 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":91:17)
#loc104 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":91:63)
#loc105 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":91:60)
#loc106 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":92:13)
#loc107 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":95:13)
#loc108 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":97:13)
#loc109 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":94:29)
#loc110 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":94:24)
#loc111 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":94:17)
#loc112 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":94:40)
#loc113 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":98:27)
#loc114 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":98:17)
#loc115 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":102:5)
#loc116 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":121:5)
#loc117 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":102:8)
#loc118 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":102:27)
#loc119 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":103:5)
#loc120 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":106:5)
#loc121 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":108:5)
#loc122 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":105:9)
#loc123 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":109:9)
#loc124 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":120:9)
#loc125 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":110:13)
#loc126 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":110:34)
#loc127 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":112:13)
#loc128 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":119:13)
#loc129 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":112:17)
#loc130 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":112:25)
#loc131 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":112:22)
#loc132 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":112:27)
#loc133 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":112:30)
#loc134 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":112:38)
#loc135 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":112:40)
#loc136 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":112:35)
#loc137 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":113:13)
#loc138 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":115:13)
#loc139 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":117:13)
#loc140 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":114:37)
#loc141 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":114:30)
#loc142 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":114:17)
#loc143 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":118:17)
#loc144 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":30:1)
#loc145 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":33:1)
#loc146 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":32:12)
#loc147 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":32:5)
#loc148 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":125:1)
#loc149 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":161:1)
#loc150 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":127:5)
#loc151 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":127:9)
#loc152 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":129:13)
#loc153 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":129:12)
#loc154 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":129:5)
#loc155 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":130:5)
#loc156 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":145:5)
#loc157 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":130:8)
#loc158 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":130:26)
#loc159 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":131:5)
#loc160 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":132:9)
#loc161 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":144:9)
#loc162 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":133:13)
#loc163 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":133:49)
#loc164 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":135:13)
#loc165 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":143:13)
#loc166 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":135:23)
#loc167 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":135:36)
#loc168 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":135:53)
#loc169 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":135:17)
#loc170 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":135:63)
#loc171 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":135:60)
#loc172 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":136:13)
#loc173 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":139:13)
#loc174 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":141:13)
#loc175 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":138:29)
#loc176 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":138:24)
#loc177 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":138:17)
#loc178 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":138:40)
#loc179 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":142:27)
#loc180 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":142:17)
#loc181 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":146:5)
#loc182 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":160:5)
#loc183 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":146:8)
#loc184 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":146:26)
#loc185 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":147:5)
#loc186 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":148:9)
#loc187 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":159:9)
#loc188 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":149:13)
#loc189 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":149:34)
#loc190 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":151:13)
#loc191 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":158:13)
#loc192 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":151:17)
#loc193 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":151:25)
#loc194 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":151:22)
#loc195 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":151:27)
#loc196 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":151:30)
#loc197 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":151:38)
#loc198 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":151:40)
#loc199 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":151:35)
#loc200 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":152:13)
#loc201 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":154:13)
#loc202 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":156:13)
#loc203 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":153:37)
#loc204 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":153:30)
#loc205 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":153:17)
#loc206 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":157:27)
#loc207 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":157:17)
#loc208 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":164:1)
#loc209 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":196:1)
#loc210 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":166:5)
#loc211 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":166:9)
#loc212 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":168:13)
#loc213 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":168:12)
#loc214 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":168:5)
#loc215 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":169:5)
#loc216 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":179:5)
#loc217 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":169:8)
#loc218 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":169:27)
#loc219 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":170:5)
#loc220 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":173:5)
#loc221 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":175:5)
#loc222 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":172:19)
#loc223 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":172:9)
#loc224 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":178:16)
#loc225 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":178:9)
#loc226 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":180:5)
#loc227 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":195:5)
#loc228 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":180:8)
#loc229 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":180:26)
#loc230 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":181:5)
#loc231 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":182:9)
#loc232 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":194:9)
#loc233 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":183:13)
#loc234 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":183:34)
#loc235 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":186:13)
#loc236 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":193:13)
#loc237 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":186:17)
#loc238 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":186:25)
#loc239 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":186:22)
#loc240 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":187:13)
#loc241 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":189:13)
#loc242 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":191:13)
#loc243 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":188:37)
#loc244 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":188:30)
#loc245 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":188:17)
#loc246 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":192:27)
#loc247 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":192:17)
#loc248 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":199:1)
#loc249 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":226:1)
#loc250 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":201:5)
#loc251 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":201:9)
#loc252 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":203:13)
#loc253 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":203:12)
#loc254 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":203:5)
#loc255 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":204:5)
#loc256 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":209:5)
#loc257 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":204:8)
#loc258 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":204:26)
#loc259 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":205:5)
#loc260 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":208:16)
#loc261 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":208:9)
#loc262 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":210:5)
#loc263 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":225:5)
#loc264 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":210:8)
#loc265 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":210:26)
#loc266 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":211:5)
#loc267 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":212:9)
#loc268 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":224:9)
#loc269 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":213:13)
#loc270 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":213:34)
#loc271 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":216:13)
#loc272 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":223:13)
#loc273 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":216:17)
#loc274 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":216:25)
#loc275 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":216:22)
#loc276 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":217:13)
#loc277 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":219:13)
#loc278 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":221:13)
#loc279 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":218:37)
#loc280 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":218:30)
#loc281 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":218:17)
#loc282 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":222:27)
#loc283 = loc("CWE126_Buffer_Overread__CWE129_fgets_08.c":222:17)
#loc284 = loc(fused[#loc1, #loc2])
#loc285 = loc(fused[#loc3, #loc4])
#loc286 = loc(fused[#loc5, #loc6])
#loc287 = loc(fused[#loc7, #loc8])
#loc288 = loc(fused[#loc10, #loc11])
#loc289 = loc(fused[#loc13, #loc14])
#loc290 = loc(fused[#loc15, #loc16])
#loc291 = loc(fused[#loc19, #loc17])
#loc292 = loc(fused[#loc20, #loc21])
#loc293 = loc(fused[#loc22, #loc23])
#loc294 = loc(fused[#loc24, #loc21])
#loc295 = loc(fused[#loc25, #loc26])
#loc296 = loc(fused[#loc27, #loc28])
#loc297 = loc(fused[#loc29, #loc30])
#loc298 = loc(fused[#loc34, #loc35])
#loc299 = loc(fused[#loc37, #loc38, #loc39, #loc30])
#loc300 = loc(fused[#loc42, #loc43])
#loc301 = loc(fused[#loc45, #loc46])
#loc302 = loc(fused[#loc47, #loc48])
#loc303 = loc(fused[#loc49, #loc46])
#loc304 = loc(fused[#loc50, #loc51])
#loc305 = loc(fused[#loc52, #loc53])
#loc306 = loc(fused[#loc54, #loc55])
#loc307 = loc(fused[#loc56, #loc57])
#loc308 = loc(fused[#loc59, #loc60, #loc61, #loc55])
#loc309 = loc(fused[#loc66, #loc67])
#loc310 = loc(fused[#loc68, #loc69])
#loc311 = loc(fused[#loc70, #loc71])
#loc312 = loc(fused[#loc72, #loc73])
#loc313 = loc(fused[#loc74, #loc75])
#loc314 = loc(fused[#loc76, #loc77])
#loc315 = loc(fused[#loc79, #loc78])
#loc316 = loc(fused[#loc82, #loc83])
#loc317 = loc(fused[#loc84, #loc85])
#loc318 = loc(fused[#loc88, #loc86])
#loc319 = loc(fused[#loc89, #loc90])
#loc320 = loc(fused[#loc91, #loc92])
#loc321 = loc(fused[#loc93, #loc90])
#loc322 = loc(fused[#loc94, #loc95])
#loc323 = loc(fused[#loc96, #loc97])
#loc324 = loc(fused[#loc98, #loc99])
#loc325 = loc(fused[#loc103, #loc104])
#loc326 = loc(fused[#loc106, #loc107, #loc108, #loc99])
#loc327 = loc(fused[#loc111, #loc112])
#loc328 = loc(fused[#loc115, #loc116])
#loc329 = loc(fused[#loc117, #loc118])
#loc330 = loc(fused[#loc119, #loc120, #loc121, #loc116])
#loc331 = loc(fused[#loc123, #loc124])
#loc332 = loc(fused[#loc125, #loc126])
#loc333 = loc(fused[#loc127, #loc128])
#loc334 = loc(fused[#loc129, #loc130])
#loc335 = loc(fused[#loc133, #loc135])
#loc336 = loc(fused[#loc137, #loc138, #loc139, #loc128])
#loc337 = loc(fused[#loc144, #loc145])
#loc338 = loc(fused[#loc147, #loc146])
#loc339 = loc(fused[#loc148, #loc149])
#loc340 = loc(fused[#loc150, #loc151])
#loc341 = loc(fused[#loc154, #loc152])
#loc342 = loc(fused[#loc155, #loc156])
#loc343 = loc(fused[#loc157, #loc158])
#loc344 = loc(fused[#loc159, #loc156])
#loc345 = loc(fused[#loc160, #loc161])
#loc346 = loc(fused[#loc162, #loc163])
#loc347 = loc(fused[#loc164, #loc165])
#loc348 = loc(fused[#loc169, #loc170])
#loc349 = loc(fused[#loc172, #loc173, #loc174, #loc165])
#loc350 = loc(fused[#loc177, #loc178])
#loc351 = loc(fused[#loc181, #loc182])
#loc352 = loc(fused[#loc183, #loc184])
#loc353 = loc(fused[#loc185, #loc182])
#loc354 = loc(fused[#loc186, #loc187])
#loc355 = loc(fused[#loc188, #loc189])
#loc356 = loc(fused[#loc190, #loc191])
#loc357 = loc(fused[#loc192, #loc193])
#loc358 = loc(fused[#loc196, #loc198])
#loc359 = loc(fused[#loc200, #loc201, #loc202, #loc191])
#loc360 = loc(fused[#loc208, #loc209])
#loc361 = loc(fused[#loc210, #loc211])
#loc362 = loc(fused[#loc214, #loc212])
#loc363 = loc(fused[#loc215, #loc216])
#loc364 = loc(fused[#loc217, #loc218])
#loc365 = loc(fused[#loc219, #loc220, #loc221, #loc216])
#loc366 = loc(fused[#loc225, #loc224])
#loc367 = loc(fused[#loc226, #loc227])
#loc368 = loc(fused[#loc228, #loc229])
#loc369 = loc(fused[#loc230, #loc227])
#loc370 = loc(fused[#loc231, #loc232])
#loc371 = loc(fused[#loc233, #loc234])
#loc372 = loc(fused[#loc235, #loc236])
#loc373 = loc(fused[#loc237, #loc238])
#loc374 = loc(fused[#loc240, #loc241, #loc242, #loc236])
#loc375 = loc(fused[#loc248, #loc249])
#loc376 = loc(fused[#loc250, #loc251])
#loc377 = loc(fused[#loc254, #loc252])
#loc378 = loc(fused[#loc255, #loc256])
#loc379 = loc(fused[#loc257, #loc258])
#loc380 = loc(fused[#loc259, #loc256])
#loc381 = loc(fused[#loc261, #loc260])
#loc382 = loc(fused[#loc262, #loc263])
#loc383 = loc(fused[#loc264, #loc265])
#loc384 = loc(fused[#loc266, #loc263])
#loc385 = loc(fused[#loc267, #loc268])
#loc386 = loc(fused[#loc269, #loc270])
#loc387 = loc(fused[#loc271, #loc272])
#loc388 = loc(fused[#loc273, #loc274])
#loc389 = loc(fused[#loc276, #loc277, #loc278, #loc272])
