!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":22:21)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":22:29)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":49:25)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":49:33)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":70:25)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":70:33)
#loc111 = loc(fused[#loc5, #loc6])
#loc126 = loc(fused[#loc41, #loc42])
#loc138 = loc(fused[#loc72, #loc73])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printLongLongLine(!s64i) loc(#loc109)
  cir.func internal private  @badSink(%arg0: !s64i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc111)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc7)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc10)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
      %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc11)
      %4 = cir.cmp(gt, %1, %3) : !s64i, !s32i loc(#loc113)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc12)
      cir.if %5 {
        %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc115)
        %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc16)
        %8 = cir.const #cir.int<2> : !s32i loc(#loc15)
        %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc15)
        %10 = cir.binop(mul, %7, %9) nsw : !s64i loc(#loc16)
        cir.store %10, %6 : !s64i, !cir.ptr<!s64i> loc(#loc115)
        %11 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc17)
        cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc18)
      } loc(#loc114)
    } loc(#loc112)
    cir.return loc(#loc4)
  } loc(#loc110)
  cir.func private  @rand() -> !s32i extra(#fn_attr1) loc(#loc116)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_rand_multiply_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc118)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc119)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc26)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>> loc(#loc119)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc27)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc120)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc29)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc29)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc29)
    %8 = cir.ternary(%7, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc29)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc29)
      %14 = cir.const #cir.int<60> : !s32i loc(#loc29)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc29)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc29)
      %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc29)
      %18 = cir.const #cir.int<45> : !s32i loc(#loc29)
      %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc29)
      %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc29)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc29)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc29)
      %23 = cir.const #cir.int<30> : !s32i loc(#loc29)
      %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc29)
      %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc29)
      %26 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc29)
      %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc29)
      %28 = cir.const #cir.int<15> : !s32i loc(#loc29)
      %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc29)
      %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc29)
      %31 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc29)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc29)
      %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc29)
      cir.yield %33 : !u64i loc(#loc29)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc29)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc29)
      %14 = cir.const #cir.int<60> : !s32i loc(#loc29)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc29)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc29)
      %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc29)
      %18 = cir.const #cir.int<45> : !s32i loc(#loc29)
      %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc29)
      %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc29)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc29)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc29)
      %23 = cir.const #cir.int<30> : !s32i loc(#loc29)
      %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc29)
      %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc29)
      %26 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc29)
      %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc29)
      %28 = cir.const #cir.int<15> : !s32i loc(#loc29)
      %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc29)
      %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc29)
      %31 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc29)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc29)
      %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc29)
      %34 = cir.unary(minus, %33) : !u64i, !u64i loc(#loc29)
      %35 = cir.const #cir.int<1> : !s32i loc(#loc29)
      %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc29)
      %37 = cir.binop(sub, %34, %36) : !u64i loc(#loc29)
      cir.yield %37 : !u64i loc(#loc29)
    }) : (!cir.bool) -> !u64i loc(#loc29)
    %9 = cir.cast(integral, %8 : !u64i), !s64i loc(#loc29)
    cir.store %9, %0 : !s64i, !cir.ptr<!s64i> loc(#loc121)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc31)
    %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc32)
    cir.call %10(%11) : (!cir.ptr<!cir.func<!void (!s64i)>>, !s64i) -> () loc(#loc31)
    cir.return loc(#loc22)
  } loc(#loc117)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_rand_multiply_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc123)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc124)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc122)
  cir.func internal private  @goodG2BSink(%arg0: !s64i loc(fused[#loc41, #loc42])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc126)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc43)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc46)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc47)
      %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc47)
      %4 = cir.cmp(gt, %1, %3) : !s64i, !s32i loc(#loc128)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc48)
      cir.if %5 {
        %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc130)
        %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc52)
        %8 = cir.const #cir.int<2> : !s32i loc(#loc51)
        %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc51)
        %10 = cir.binop(mul, %7, %9) nsw : !s64i loc(#loc52)
        cir.store %10, %6 : !s64i, !cir.ptr<!s64i> loc(#loc130)
        %11 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc53)
        cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc54)
      } loc(#loc129)
    } loc(#loc127)
    cir.return loc(#loc40)
  } loc(#loc125)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc132)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc133)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc60)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>> loc(#loc133)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc61)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc134)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc63)
    %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc63)
    cir.store %5, %0 : !s64i, !cir.ptr<!s64i> loc(#loc135)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc65)
    %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc66)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!s64i)>>, !s64i) -> () loc(#loc65)
    cir.return loc(#loc56)
  } loc(#loc131)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc136)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc69)
  cir.func internal private  @goodB2GSink(%arg0: !s64i loc(fused[#loc72, #loc73])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc138)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc74)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc77)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc78)
      %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc78)
      %4 = cir.cmp(gt, %1, %3) : !s64i, !s32i loc(#loc140)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc79)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc83)
          %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc84)
          %8 = cir.const #cir.int<2> : !s32i loc(#loc85)
          %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc85)
          %10 = cir.binop(div, %7, %9) : !s64i loc(#loc143)
          %11 = cir.cmp(lt, %6, %10) : !s64i, !s32i loc(#loc144)
          %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc87)
          cir.if %12 {
            %13 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc146)
            %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc93)
            %15 = cir.const #cir.int<2> : !s32i loc(#loc92)
            %16 = cir.cast(integral, %15 : !s32i), !s64i loc(#loc92)
            %17 = cir.binop(mul, %14, %16) nsw : !s64i loc(#loc93)
            cir.store %17, %13 : !s64i, !cir.ptr<!s64i> loc(#loc146)
            %18 = cir.load %13 : !cir.ptr<!s64i>, !s64i loc(#loc94)
            cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc95)
          } else {
            %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc69)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc69)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc96)
          } loc(#loc145)
        } loc(#loc142)
      } loc(#loc141)
    } loc(#loc139)
    cir.return loc(#loc71)
  } loc(#loc137)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc148)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc149)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc102)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>> loc(#loc149)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc103)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc150)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc105)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc105)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc105)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc105)
    %8 = cir.ternary(%7, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc105)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc105)
      %14 = cir.const #cir.int<60> : !s32i loc(#loc105)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc105)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc105)
      %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc105)
      %18 = cir.const #cir.int<45> : !s32i loc(#loc105)
      %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc105)
      %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc105)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc105)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc105)
      %23 = cir.const #cir.int<30> : !s32i loc(#loc105)
      %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc105)
      %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc105)
      %26 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc105)
      %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc105)
      %28 = cir.const #cir.int<15> : !s32i loc(#loc105)
      %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc105)
      %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc105)
      %31 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc105)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc105)
      %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc105)
      cir.yield %33 : !u64i loc(#loc105)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc105)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc105)
      %14 = cir.const #cir.int<60> : !s32i loc(#loc105)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc105)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc105)
      %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc105)
      %18 = cir.const #cir.int<45> : !s32i loc(#loc105)
      %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc105)
      %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc105)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc105)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc105)
      %23 = cir.const #cir.int<30> : !s32i loc(#loc105)
      %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc105)
      %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc105)
      %26 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc105)
      %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc105)
      %28 = cir.const #cir.int<15> : !s32i loc(#loc105)
      %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc105)
      %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc105)
      %31 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc105)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc105)
      %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc105)
      %34 = cir.unary(minus, %33) : !u64i, !u64i loc(#loc105)
      %35 = cir.const #cir.int<1> : !s32i loc(#loc105)
      %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc105)
      %37 = cir.binop(sub, %34, %36) : !u64i loc(#loc105)
      cir.yield %37 : !u64i loc(#loc105)
    }) : (!cir.bool) -> !u64i loc(#loc105)
    %9 = cir.cast(integral, %8 : !u64i), !s64i loc(#loc105)
    cir.store %9, %0 : !s64i, !cir.ptr<!s64i> loc(#loc151)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc107)
    %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc108)
    cir.call %10(%11) : (!cir.ptr<!cir.func<!void (!s64i)>>, !s64i) -> () loc(#loc107)
    cir.return loc(#loc98)
  } loc(#loc147)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":30:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":23:1)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":24:5)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":29:5)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":24:8)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":24:15)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":24:13)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":25:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":27:9)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":27:33)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":27:26)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":28:27)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":28:9)
#loc19 = loc("/usr/include/stdlib.h":573:1)
#loc20 = loc("/usr/include/stdlib.h":573:24)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":32:1)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":42:1)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":34:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":34:13)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":36:5)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":36:33)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":37:12)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":37:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":39:21)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":39:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":41:5)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":41:13)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":97:1)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":101:1)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":99:5)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":99:13)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":100:5)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":100:13)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":49:1)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":57:1)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":50:1)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":51:5)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":56:5)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":51:8)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":51:15)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":51:13)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":52:5)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":54:9)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":54:33)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":54:26)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":55:27)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":55:9)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":59:1)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":67:1)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":61:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":61:13)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":62:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":62:33)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":63:12)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":63:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":65:12)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":65:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":66:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":66:13)
#loc67 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc68 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":82:23)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":70:1)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":85:1)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":71:1)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":72:5)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":84:5)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":72:8)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":72:15)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":72:13)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":73:5)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":75:9)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":83:9)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":75:13)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":75:21)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":75:31)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":75:32)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":75:18)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":76:9)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":79:9)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":81:9)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":77:13)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":77:37)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":77:30)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":78:31)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":78:13)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":82:13)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":87:1)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":95:1)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":89:5)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":89:13)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":90:5)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":90:33)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":91:12)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":91:5)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":93:21)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":93:5)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":94:5)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_44.c":94:13)
#loc109 = loc(fused[#loc1, #loc2])
#loc110 = loc(fused[#loc3, #loc4])
#loc112 = loc(fused[#loc8, #loc9])
#loc113 = loc(fused[#loc10, #loc11])
#loc114 = loc(fused[#loc13, #loc9])
#loc115 = loc(fused[#loc14, #loc15])
#loc116 = loc(fused[#loc19, #loc20])
#loc117 = loc(fused[#loc21, #loc22])
#loc118 = loc(fused[#loc23, #loc24])
#loc119 = loc(fused[#loc25, #loc26])
#loc120 = loc(fused[#loc28, #loc27])
#loc121 = loc(fused[#loc30, #loc29])
#loc122 = loc(fused[#loc33, #loc34])
#loc123 = loc(fused[#loc35, #loc36])
#loc124 = loc(fused[#loc37, #loc38])
#loc125 = loc(fused[#loc39, #loc40])
#loc127 = loc(fused[#loc44, #loc45])
#loc128 = loc(fused[#loc46, #loc47])
#loc129 = loc(fused[#loc49, #loc45])
#loc130 = loc(fused[#loc50, #loc51])
#loc131 = loc(fused[#loc55, #loc56])
#loc132 = loc(fused[#loc57, #loc58])
#loc133 = loc(fused[#loc59, #loc60])
#loc134 = loc(fused[#loc62, #loc61])
#loc135 = loc(fused[#loc64, #loc63])
#loc136 = loc(fused[#loc67, #loc68])
#loc137 = loc(fused[#loc70, #loc71])
#loc139 = loc(fused[#loc75, #loc76])
#loc140 = loc(fused[#loc77, #loc78])
#loc141 = loc(fused[#loc80, #loc76])
#loc142 = loc(fused[#loc81, #loc82])
#loc143 = loc(fused[#loc84, #loc85])
#loc144 = loc(fused[#loc83, #loc86])
#loc145 = loc(fused[#loc88, #loc89, #loc90, #loc82])
#loc146 = loc(fused[#loc91, #loc92])
#loc147 = loc(fused[#loc97, #loc98])
#loc148 = loc(fused[#loc99, #loc100])
#loc149 = loc(fused[#loc101, #loc102])
#loc150 = loc(fused[#loc104, #loc103])
#loc151 = loc(fused[#loc106, #loc105])
