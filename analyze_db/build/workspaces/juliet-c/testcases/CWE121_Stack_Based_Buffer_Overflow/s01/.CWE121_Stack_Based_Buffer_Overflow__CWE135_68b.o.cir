!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @CWE121_Stack_Based_Buffer_Overflow__CWE135_68_badData : !cir.ptr<!void> {alignment = 8 : i64} loc(#loc70)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc71)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc72)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc73)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_68b_badSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc75)
    %1 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_68_badData : !cir.ptr<!cir.ptr<!void>> loc(#loc70)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc12)
    cir.store %2, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc75)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc77)
      %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc78)
      %5 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc19)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc20)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc20)
      %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc19)
      cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc77)
      %9 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc18)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc18)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc18)
      %12 = cir.binop(add, %9, %11) : !u64i loc(#loc18)
      %13 = cir.const #cir.int<4> : !u64i loc(#loc18)
      %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc18)
      %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc18)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc18)
      cir.store %16, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc78)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc21)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc21)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc22)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc22)
      %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc23)
      %22 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc24)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc24)
      cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc25)
    } loc(#loc76)
    cir.return loc(#loc10)
  } loc(#loc74)
  cir.global "private" external @CWE121_Stack_Based_Buffer_Overflow__CWE135_68_goodG2BData : !cir.ptr<!void> {alignment = 8 : i64} loc(#loc79)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc80)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_68b_goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc82)
    %1 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_68_goodG2BData : !cir.ptr<!cir.ptr<!void>> loc(#loc79)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc33)
    cir.store %2, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc82)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc84)
      %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc85)
      %5 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc40)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc41)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc41)
      %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc40)
      cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc84)
      %9 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc39)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc39)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc39)
      %12 = cir.binop(add, %9, %11) : !u64i loc(#loc39)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc39)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc39)
      %15 = cir.binop(mul, %12, %14) : !u64i loc(#loc39)
      %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc39)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc39)
      cir.store %17, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc85)
      %18 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc42)
      %19 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc43)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc43)
      %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc44)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc44)
      %23 = cir.call @strcpy(%20, %22) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc42)
      %24 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc45)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc45)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc46)
    } loc(#loc83)
    cir.return loc(#loc31)
  } loc(#loc81)
  cir.global "private" external @CWE121_Stack_Based_Buffer_Overflow__CWE135_68_goodB2GData : !cir.ptr<!void> {alignment = 8 : i64} loc(#loc86)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc87)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc88)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_68b_goodB2GSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc90)
    %1 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_68_goodB2GData : !cir.ptr<!cir.ptr<!void>> loc(#loc86)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc56)
    cir.store %2, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc90)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc92)
      %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc93)
      %5 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc63)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc64)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc64)
      %8 = cir.call @wcslen(%7) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc63)
      cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc92)
      %9 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc62)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc62)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc62)
      %12 = cir.binop(add, %9, %11) : !u64i loc(#loc62)
      %13 = cir.const #cir.int<4> : !u64i loc(#loc62)
      %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc62)
      %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc62)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc62)
      cir.store %16, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc93)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc65)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc65)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc66)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc66)
      %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc67)
      %22 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc68)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc68)
      cir.call @printWLine(%23) : (!cir.ptr<!s32i>) -> () loc(#loc69)
    } loc(#loc91)
    cir.return loc(#loc54)
  } loc(#loc89)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":25:1)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":25:15)
#loc3 = loc("/usr/include/string.h":407:1)
#loc4 = loc("/usr/include/string.h":408:33)
#loc5 = loc("/usr/include/wchar.h":98:1)
#loc6 = loc("/usr/include/wchar.h":100:14)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":31:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":41:1)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":33:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":33:19)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":34:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":40:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":36:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":36:45)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":37:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":37:31)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":36:26)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":36:41)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":38:22)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":38:28)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":38:15)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":39:27)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":39:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":26:1)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":26:15)
#loc28 = loc("/usr/include/string.h":141:1)
#loc29 = loc("/usr/include/string.h":142:14)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":48:1)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":58:1)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":50:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":50:19)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":51:5)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":57:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":53:9)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":53:45)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":54:9)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":54:31)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":53:26)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":53:41)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":55:15)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":55:22)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":55:28)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":56:27)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":56:9)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":27:1)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":27:15)
#loc49 = loc("/usr/include/wchar.h":247:1)
#loc50 = loc("/usr/include/wchar.h":247:51)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":61:1)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":71:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":63:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":63:19)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":64:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":70:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":66:9)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":66:48)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":67:9)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":67:31)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":66:26)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":66:44)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":68:22)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":68:28)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":68:15)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":69:31)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c":69:9)
#loc70 = loc(fused[#loc1, #loc2])
#loc71 = loc(fused[#loc3, #loc4])
#loc72 = loc(fused[#loc5, #loc6])
#loc73 = loc(fused[#loc7, #loc8])
#loc74 = loc(fused[#loc9, #loc10])
#loc75 = loc(fused[#loc11, #loc12])
#loc76 = loc(fused[#loc13, #loc14])
#loc77 = loc(fused[#loc15, #loc16])
#loc78 = loc(fused[#loc17, #loc18])
#loc79 = loc(fused[#loc26, #loc27])
#loc80 = loc(fused[#loc28, #loc29])
#loc81 = loc(fused[#loc30, #loc31])
#loc82 = loc(fused[#loc32, #loc33])
#loc83 = loc(fused[#loc34, #loc35])
#loc84 = loc(fused[#loc36, #loc37])
#loc85 = loc(fused[#loc38, #loc39])
#loc86 = loc(fused[#loc47, #loc48])
#loc87 = loc(fused[#loc49, #loc50])
#loc88 = loc(fused[#loc51, #loc52])
#loc89 = loc(fused[#loc53, #loc54])
#loc90 = loc(fused[#loc55, #loc56])
#loc91 = loc(fused[#loc57, #loc58])
#loc92 = loc(fused[#loc59, #loc60])
#loc93 = loc(fused[#loc61, #loc62])
