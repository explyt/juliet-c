!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc105)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc106)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc107)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc108)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc109)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_add_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc111)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc16)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc114)
      %3 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc114)
      cir.store %3, %2 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc114)
      cir.scope {
        %4 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc24)
        %5 = cir.const #cir.int<3> : !s32i loc(#loc25)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc25)
        %7 = cir.const #cir.int<4> : !u64i loc(#loc25)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc25)
        %9 = cir.const #cir.int<2> : !s32i loc(#loc25)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc25)
        %11 = cir.binop(add, %8, %10) : !u64i loc(#loc25)
        %12 = cir.cast(integral, %11 : !u64i), !s32i loc(#loc25)
        %13 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc106)
        %14 = cir.load %13 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc26)
        %15 = cir.call @fgets(%4, %12, %14) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc27)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc28)
        %18 = cir.cmp(ne, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc116)
        cir.if %18 {
          %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc32)
          %20 = cir.call @atoi(%19) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc33)
          cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc118)
        } else {
          %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc36)
        } loc(#loc117)
      } loc(#loc115)
    } loc(#loc113)
    cir.scope {
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc120)
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc41)
      %4 = cir.const #cir.int<1> : !s32i loc(#loc40)
      %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc41)
      cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc120)
      %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc42)
      cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc43)
    } loc(#loc119)
    cir.return loc(#loc13)
  } loc(#loc110)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_add_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc122)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc123)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc48)
    cir.return loc(#loc45)
  } loc(#loc121)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc125)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc54)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc56)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc129)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
      %5 = cir.const #cir.int<1> : !s32i loc(#loc61)
      %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc62)
      cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc129)
      %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc63)
      cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc64)
    } loc(#loc128)
    cir.return loc(#loc51)
  } loc(#loc124)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc65)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc131)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc70)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc132)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc134)
      %3 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc134)
      cir.store %3, %2 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc134)
      cir.scope {
        %4 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc78)
        %5 = cir.const #cir.int<3> : !s32i loc(#loc79)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc79)
        %7 = cir.const #cir.int<4> : !u64i loc(#loc79)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc79)
        %9 = cir.const #cir.int<2> : !s32i loc(#loc79)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc79)
        %11 = cir.binop(add, %8, %10) : !u64i loc(#loc79)
        %12 = cir.cast(integral, %11 : !u64i), !s32i loc(#loc79)
        %13 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc106)
        %14 = cir.load %13 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc80)
        %15 = cir.call @fgets(%4, %12, %14) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc81)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc82)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc82)
        %18 = cir.cmp(ne, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc136)
        cir.if %18 {
          %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc86)
          %20 = cir.call @atoi(%19) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc87)
          cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc138)
        } else {
          %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc90)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc90)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc91)
        } loc(#loc137)
      } loc(#loc135)
    } loc(#loc133)
    cir.scope {
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
      %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc95)
      %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc140)
      cir.if %4 {
        %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc142)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc100)
        %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc101)
        cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc142)
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc102)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc103)
      } else {
        %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc65)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc65)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc104)
      } loc(#loc141)
    } loc(#loc139)
    cir.return loc(#loc67)
  } loc(#loc130)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_01.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":39:23)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":24:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":47:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":26:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":28:12)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":28:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":29:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":41:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":30:9)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":30:45)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":32:9)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":40:9)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":32:19)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":32:32)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":32:49)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":32:13)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":32:59)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":33:9)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":36:9)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":38:9)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":35:25)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":35:20)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":35:13)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":35:36)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":39:13)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":42:5)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":46:5)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":44:9)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":44:29)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":44:22)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":45:22)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":45:9)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":99:1)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":103:1)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":101:5)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":101:13)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":102:5)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":102:13)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":54:1)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":66:1)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":56:5)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":56:9)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":58:12)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":58:5)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":60:12)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":60:5)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":61:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":65:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":63:9)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":63:29)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":63:22)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":64:22)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":64:9)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":95:19)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":69:1)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":97:1)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":71:5)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":71:9)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":73:12)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":73:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":74:5)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":86:5)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":75:9)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":75:45)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":77:9)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":85:9)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":77:19)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":77:32)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":77:49)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":77:13)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":77:59)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":78:9)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":81:9)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":83:9)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":80:25)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":80:20)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":80:13)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":80:36)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":84:23)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":84:13)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":88:5)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":96:5)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":88:9)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":88:16)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":89:5)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":92:5)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":94:5)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":90:9)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":90:29)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":90:22)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":91:22)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":91:9)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_add_01.c":95:9)
#loc105 = loc(fused[#loc1, #loc2])
#loc106 = loc(fused[#loc3, #loc4])
#loc107 = loc(fused[#loc5, #loc6])
#loc108 = loc(fused[#loc7, #loc8])
#loc109 = loc(fused[#loc10, #loc11])
#loc110 = loc(fused[#loc12, #loc13])
#loc111 = loc(fused[#loc14, #loc15])
#loc112 = loc(fused[#loc17, #loc16])
#loc113 = loc(fused[#loc18, #loc19])
#loc114 = loc(fused[#loc20, #loc21])
#loc115 = loc(fused[#loc22, #loc23])
#loc116 = loc(fused[#loc27, #loc28])
#loc117 = loc(fused[#loc29, #loc30, #loc31, #loc23])
#loc118 = loc(fused[#loc34, #loc35])
#loc119 = loc(fused[#loc37, #loc38])
#loc120 = loc(fused[#loc39, #loc40])
#loc121 = loc(fused[#loc44, #loc45])
#loc122 = loc(fused[#loc46, #loc47])
#loc123 = loc(fused[#loc48, #loc49])
#loc124 = loc(fused[#loc50, #loc51])
#loc125 = loc(fused[#loc52, #loc53])
#loc126 = loc(fused[#loc55, #loc54])
#loc127 = loc(fused[#loc57, #loc56])
#loc128 = loc(fused[#loc58, #loc59])
#loc129 = loc(fused[#loc60, #loc61])
#loc130 = loc(fused[#loc66, #loc67])
#loc131 = loc(fused[#loc68, #loc69])
#loc132 = loc(fused[#loc71, #loc70])
#loc133 = loc(fused[#loc72, #loc73])
#loc134 = loc(fused[#loc74, #loc75])
#loc135 = loc(fused[#loc76, #loc77])
#loc136 = loc(fused[#loc81, #loc82])
#loc137 = loc(fused[#loc83, #loc84, #loc85, #loc77])
#loc138 = loc(fused[#loc88, #loc89])
#loc139 = loc(fused[#loc92, #loc93])
#loc140 = loc(fused[#loc94, #loc95])
#loc141 = loc(fused[#loc96, #loc97, #loc98, #loc93])
#loc142 = loc(fused[#loc99, #loc100])
