!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":24:14)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":24:30)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":42:18)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":42:34)
#loc55 = loc(fused[#loc5, #loc6])
#loc63 = loc(fused[#loc30, #loc31])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s03/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @printIntLine(!s32i) loc(#loc53)
  cir.func @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_667badSinkEPPi(%arg0: !cir.ptr<!cir.ptr<!s32i>> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc55)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc56)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc9)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc10)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc11)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!cir.ptr<!s32i>>, %3 : !s32i), !cir.ptr<!cir.ptr<!s32i>> loc(#loc8)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc10)
    cir.store %5, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc56)
    cir.scope {
      %6 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc58)
      %7 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc58)
      cir.store %7, %6 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc58)
      %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc16)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc16)
      %10 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc17)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc17)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc18)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc18)
      %14 = cir.const #cir.int<4> : !u64i loc(#loc59)
      %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc60)
      cir.libc.memcpy %15 bytes from %11 to %9 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc61)
      %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc23)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc24)
      %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc25)
      %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc23)
      cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc26)
      %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
      cir.delete.array %20 : <!s32i> loc(#loc27)
    } loc(#loc57)
    cir.return loc(#loc4)
  } loc(#loc54)
  cir.func @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_6611goodG2BSinkEPPi(%arg0: !cir.ptr<!cir.ptr<!s32i>> loc(fused[#loc30, #loc31])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc63)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc64)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc34)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc35)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc36)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!cir.ptr<!s32i>>, %3 : !s32i), !cir.ptr<!cir.ptr<!s32i>> loc(#loc33)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc35)
    cir.store %5, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc64)
    cir.scope {
      %6 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc66)
      %7 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc66)
      cir.store %7, %6 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc66)
      %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc41)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc41)
      %10 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc42)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc42)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc43)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc43)
      %14 = cir.const #cir.int<4> : !u64i loc(#loc67)
      %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc68)
      cir.libc.memcpy %15 bytes from %11 to %9 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc69)
      %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc48)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc49)
      %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc50)
      %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc48)
      cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc51)
      %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc52)
      cir.delete.array %20 : <!s32i> loc(#loc52)
    } loc(#loc65)
    cir.return loc(#loc29)
  } loc(#loc62)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s03/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":24:1)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":35:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":27:5)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":27:29)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":25:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":27:18)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":27:28)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":28:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":34:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":29:9)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":29:29)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":31:16)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":31:22)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":31:30)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":31:34)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":31:44)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":31:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":31:45)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":32:22)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":32:27)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":32:28)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":32:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":33:19)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":42:1)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":52:1)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":44:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":44:29)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":43:1)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":44:18)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":44:28)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":45:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":51:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":46:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":46:29)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":48:16)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":48:22)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":48:30)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":48:34)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":48:44)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":48:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":48:45)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":49:22)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":49:27)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":49:28)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":49:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memcpy_66b.cpp":50:19)
#loc53 = loc(fused[#loc1, #loc2])
#loc54 = loc(fused[#loc3, #loc4])
#loc56 = loc(fused[#loc7, #loc8])
#loc57 = loc(fused[#loc12, #loc13])
#loc58 = loc(fused[#loc14, #loc15])
#loc59 = loc(fused[#loc19, #loc20])
#loc60 = loc(fused[#loc18, #loc20])
#loc61 = loc(fused[#loc21, #loc22])
#loc62 = loc(fused[#loc28, #loc29])
#loc64 = loc(fused[#loc32, #loc33])
#loc65 = loc(fused[#loc37, #loc38])
#loc66 = loc(fused[#loc39, #loc40])
#loc67 = loc(fused[#loc44, #loc45])
#loc68 = loc(fused[#loc43, #loc45])
#loc69 = loc(fused[#loc46, #loc47])
