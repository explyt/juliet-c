!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_case_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc87)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc88)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc89)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc7)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Inside the case statement\00" : !cir.array<!s8i x 26>> : !cir.array<!s8i x 26> {alignment = 1 : i64} loc(#loc8)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_case_12_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc92)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc92)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc14)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc14)
      cir.if %3 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc95)
          %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %8 = cir.const #cir.int<3> : !s32i loc(#loc24)
          %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc96)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc95)
          cir.scope {
            %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc27)
            cir.switch (%10 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                cir.break loc(#loc29)
              } loc(#loc28)
              cir.yield loc(#loc25)
            } loc(#loc25)
          } loc(#loc97)
        } loc(#loc94)
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc7)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc7)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc30)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc99)
          %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc35)
          %8 = cir.const #cir.int<3> : !s32i loc(#loc36)
          %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc100)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc99)
          cir.scope {
            %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc39)
            cir.switch (%10 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc8)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc8)
                cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc41)
                cir.break loc(#loc42)
              } loc(#loc40)
              cir.yield loc(#loc37)
            } loc(#loc37)
          } loc(#loc101)
        } loc(#loc98)
        %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc9)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc9)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc43)
      } loc(#loc93)
    } loc(#loc91)
    cir.return loc(#loc11)
  } loc(#loc90)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_case_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc103)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    cir.return loc(#loc45)
  } loc(#loc102)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc106)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc106)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc52)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc52)
      cir.if %3 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc109)
          %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
          %8 = cir.const #cir.int<3> : !s32i loc(#loc62)
          %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc110)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc109)
          cir.scope {
            %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc65)
            cir.switch (%10 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc67)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc67)
                cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc68)
                cir.break loc(#loc69)
              } loc(#loc66)
              cir.yield loc(#loc63)
            } loc(#loc63)
          } loc(#loc111)
        } loc(#loc108)
        %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc70)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc70)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc71)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc113)
          %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc76)
          %8 = cir.const #cir.int<3> : !s32i loc(#loc77)
          %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc114)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc113)
          cir.scope {
            %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc80)
            cir.switch (%10 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc82)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc82)
                cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc83)
                cir.break loc(#loc84)
              } loc(#loc81)
              cir.yield loc(#loc78)
            } loc(#loc78)
          } loc(#loc115)
        } loc(#loc112)
        %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc85)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc85)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc86)
      } loc(#loc107)
    } loc(#loc105)
    cir.return loc(#loc49)
  } loc(#loc104)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_case_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":33:19)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":43:27)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":47:19)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":20:1)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":49:1)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":22:5)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":48:5)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":22:8)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":22:33)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":23:5)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":34:5)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":36:5)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":25:9)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":32:9)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":26:13)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":26:32)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":26:22)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":26:31)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":27:13)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":31:13)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":27:21)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":29:13)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":30:17)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":33:9)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":38:9)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":46:9)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":39:13)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":39:32)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":39:22)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":39:31)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":40:13)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":45:13)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":40:21)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":42:13)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":43:17)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":44:17)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":47:9)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":88:1)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":91:1)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":90:5)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":90:11)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":56:1)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":86:1)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":58:5)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":85:5)
#loc52 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":58:8)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":58:33)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":59:5)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":71:5)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":73:5)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":61:9)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":69:9)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":62:13)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":62:32)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":62:22)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":62:31)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":63:13)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":68:13)
#loc65 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":63:21)
#loc66 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":65:13)
#loc67 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":66:27)
#loc68 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":66:17)
#loc69 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":67:17)
#loc70 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":70:19)
#loc71 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":70:9)
#loc72 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":75:9)
#loc73 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":83:9)
#loc74 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":76:13)
#loc75 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":76:32)
#loc76 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":76:22)
#loc77 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":76:31)
#loc78 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":77:13)
#loc79 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":82:13)
#loc80 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":77:21)
#loc81 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":79:13)
#loc82 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":80:27)
#loc83 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":80:17)
#loc84 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":81:17)
#loc85 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":84:19)
#loc86 = loc("CWE398_Poor_Code_Quality__empty_case_12.c":84:9)
#loc87 = loc(fused[#loc1, #loc2])
#loc88 = loc(fused[#loc3, #loc4])
#loc89 = loc(fused[#loc5, #loc6])
#loc90 = loc(fused[#loc10, #loc11])
#loc91 = loc(fused[#loc12, #loc13])
#loc92 = loc(fused[#loc14, #loc15])
#loc93 = loc(fused[#loc16, #loc17, #loc18, #loc13])
#loc94 = loc(fused[#loc19, #loc20])
#loc95 = loc(fused[#loc21, #loc22])
#loc96 = loc(fused[#loc23, #loc24])
#loc97 = loc(fused[#loc25, #loc26])
#loc98 = loc(fused[#loc31, #loc32])
#loc99 = loc(fused[#loc33, #loc34])
#loc100 = loc(fused[#loc35, #loc36])
#loc101 = loc(fused[#loc37, #loc38])
#loc102 = loc(fused[#loc44, #loc45])
#loc103 = loc(fused[#loc46, #loc47])
#loc104 = loc(fused[#loc48, #loc49])
#loc105 = loc(fused[#loc50, #loc51])
#loc106 = loc(fused[#loc52, #loc53])
#loc107 = loc(fused[#loc54, #loc55, #loc56, #loc51])
#loc108 = loc(fused[#loc57, #loc58])
#loc109 = loc(fused[#loc59, #loc60])
#loc110 = loc(fused[#loc61, #loc62])
#loc111 = loc(fused[#loc63, #loc64])
#loc112 = loc(fused[#loc72, #loc73])
#loc113 = loc(fused[#loc74, #loc75])
#loc114 = loc(fused[#loc76, #loc77])
#loc115 = loc(fused[#loc78, #loc79])
