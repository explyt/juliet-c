!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc122)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc123)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc125)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc126)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc10)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc10)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc10)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc10)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc10)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc126)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc11)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc127)
    cir.scope {
      %10 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc129)
      %11 = cir.call %10() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc15)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc15)
      cir.if %12 {
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc18)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc18)
        %15 = cir.const #cir.int<65> : !s32i loc(#loc19)
        %16 = cir.const #cir.int<100> : !s32i loc(#loc20)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc20)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc20)
        cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc131)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc24)
        %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc24)
        %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
        %23 = cir.const #cir.int<100> : !s32i loc(#loc26)
        %24 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc26)
        %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc28)
        cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc132)
      } loc(#loc130)
    } loc(#loc128)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc134)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc134)
      cir.store %11, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc134)
      %12 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc33)
      %13 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc34)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc35)
      %15 = cir.call @strcpy(%13, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc33)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
      cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc37)
    } loc(#loc133)
    cir.return loc(#loc6)
  } loc(#loc124)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc136)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc137)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    cir.return loc(#loc39)
  } loc(#loc135)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc45)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc46)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc139)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc139)
    cir.return %2 : !s32i loc(#loc139)
  } loc(#loc138)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc48)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc141)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc142)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc54)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc54)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc54)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc54)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc54)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc54)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc54)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc142)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc143)
    cir.scope {
      %10 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc145)
      %11 = cir.call %10() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc59)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc59)
      cir.if %12 {
        %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc48)
        %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc48)
        cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc64)
      } else {
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc65)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc65)
        %15 = cir.const #cir.int<65> : !s32i loc(#loc66)
        %16 = cir.const #cir.int<50> : !s32i loc(#loc67)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc68)
        %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc67)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc67)
        cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc147)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc71)
        %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc71)
        %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc72)
        %23 = cir.const #cir.int<50> : !s32i loc(#loc73)
        %24 = cir.const #cir.int<1> : !s32i loc(#loc74)
        %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc73)
        %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc75)
        cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc148)
      } loc(#loc146)
    } loc(#loc144)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc150)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc150)
      cir.store %11, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc150)
      %12 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc80)
      %13 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc81)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc82)
      %15 = cir.call @strcpy(%13, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc80)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc83)
      cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc84)
    } loc(#loc149)
    cir.return loc(#loc50)
  } loc(#loc140)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc86)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc87)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc152)
    cir.return %2 : !s32i loc(#loc152)
  } loc(#loc151)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc154)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc155)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc94)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc94)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc94)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc94)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc94)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc94)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc94)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc155)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc95)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc156)
    cir.scope {
      %10 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc158)
      %11 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc99)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc99)
      cir.if %12 {
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc102)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc102)
        %15 = cir.const #cir.int<65> : !s32i loc(#loc103)
        %16 = cir.const #cir.int<50> : !s32i loc(#loc104)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc105)
        %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc104)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc104)
        cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc160)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc108)
        %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc108)
        %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc109)
        %23 = cir.const #cir.int<50> : !s32i loc(#loc110)
        %24 = cir.const #cir.int<1> : !s32i loc(#loc111)
        %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc110)
        %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc112)
        cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc161)
      } loc(#loc159)
    } loc(#loc157)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc163)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc163)
      cir.store %11, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc163)
      %12 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc117)
      %13 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc118)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
      %15 = cir.call @strcpy(%13, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc117)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc120)
      cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    } loc(#loc162)
    cir.return loc(#loc90)
  } loc(#loc153)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":0:0)
#loc1 = loc("/usr/include/string.h":141:1)
#loc2 = loc("/usr/include/string.h":142:14)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":37:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":54:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":39:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":39:12)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":40:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":40:33)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":41:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":41:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":42:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":47:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":42:8)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":42:26)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":43:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":45:16)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":45:22)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":45:27)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":45:31)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":45:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":45:32)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":46:23)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":46:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":46:14)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":46:18)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":46:19)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":48:5)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":53:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":49:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":49:25)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":51:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":51:16)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":51:22)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":52:19)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":52:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":105:1)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":109:1)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":107:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":107:14)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":108:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":108:14)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":25:1)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":28:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":27:12)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":27:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":69:19)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":61:1)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":83:1)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":63:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":63:12)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":64:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":64:33)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":65:12)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":65:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":66:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":76:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":66:8)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":66:27)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":67:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":70:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":72:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":69:9)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":74:16)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":74:22)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":74:27)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":74:30)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":74:9)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":74:31)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":75:22)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":75:9)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":75:14)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":75:17)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":75:18)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":77:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":82:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":78:9)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":78:25)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":80:9)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":80:16)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":80:22)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":81:19)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":81:9)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":30:1)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":33:1)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":32:12)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":32:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":86:1)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":103:1)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":88:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":88:12)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":89:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":89:33)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":90:12)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":90:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":91:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":96:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":91:8)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":91:26)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":92:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":94:16)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":94:22)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":94:27)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":94:30)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":94:9)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":94:31)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":95:22)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":95:9)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":95:14)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":95:17)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":95:18)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":97:5)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":102:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":98:9)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":98:25)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":100:9)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":100:16)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":100:22)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":101:19)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c":101:9)
#loc122 = loc(fused[#loc1, #loc2])
#loc123 = loc(fused[#loc3, #loc4])
#loc124 = loc(fused[#loc5, #loc6])
#loc125 = loc(fused[#loc7, #loc8])
#loc126 = loc(fused[#loc9, #loc10])
#loc127 = loc(fused[#loc12, #loc11])
#loc128 = loc(fused[#loc13, #loc14])
#loc129 = loc(fused[#loc15, #loc16])
#loc130 = loc(fused[#loc17, #loc14])
#loc131 = loc(fused[#loc22, #loc23])
#loc132 = loc(fused[#loc25, #loc24])
#loc133 = loc(fused[#loc29, #loc30])
#loc134 = loc(fused[#loc31, #loc32])
#loc135 = loc(fused[#loc38, #loc39])
#loc136 = loc(fused[#loc40, #loc41])
#loc137 = loc(fused[#loc42, #loc43])
#loc138 = loc(fused[#loc44, #loc45])
#loc139 = loc(fused[#loc47, #loc46])
#loc140 = loc(fused[#loc49, #loc50])
#loc141 = loc(fused[#loc51, #loc52])
#loc142 = loc(fused[#loc53, #loc54])
#loc143 = loc(fused[#loc56, #loc55])
#loc144 = loc(fused[#loc57, #loc58])
#loc145 = loc(fused[#loc59, #loc60])
#loc146 = loc(fused[#loc61, #loc62, #loc63, #loc58])
#loc147 = loc(fused[#loc69, #loc70])
#loc148 = loc(fused[#loc72, #loc71])
#loc149 = loc(fused[#loc76, #loc77])
#loc150 = loc(fused[#loc78, #loc79])
#loc151 = loc(fused[#loc85, #loc86])
#loc152 = loc(fused[#loc88, #loc87])
#loc153 = loc(fused[#loc89, #loc90])
#loc154 = loc(fused[#loc91, #loc92])
#loc155 = loc(fused[#loc93, #loc94])
#loc156 = loc(fused[#loc96, #loc95])
#loc157 = loc(fused[#loc97, #loc98])
#loc158 = loc(fused[#loc99, #loc100])
#loc159 = loc(fused[#loc101, #loc98])
#loc160 = loc(fused[#loc106, #loc107])
#loc161 = loc(fused[#loc109, #loc108])
#loc162 = loc(fused[#loc113, #loc114])
#loc163 = loc(fused[#loc115, #loc116])
