!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_rand_multiply_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc183)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc184)
  cir.func private @printIntLine(!s32i) loc(#loc185)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc186)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE191_Integer_Underflow__short_rand_multiply_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc188)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc14)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc14)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc189)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc191)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc191)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc18)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc18)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc23)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc23)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc23)
        %11 = cir.ternary(%10, true {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc23)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc23)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc23)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc23)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc23)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc23)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc23)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc23)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc23)
          cir.yield %25 : !u32i loc(#loc23)
        }, false {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc23)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc23)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc23)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc23)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc23)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc23)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc23)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc23)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc23)
          %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc23)
          %27 = cir.const #cir.int<1> : !s32i loc(#loc23)
          %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc23)
          %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc23)
          cir.yield %29 : !u32i loc(#loc23)
        }) : (!cir.bool) -> !u32i loc(#loc23)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc23)
        %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc23)
        cir.store %13, %0 : !s16i, !cir.ptr<!s16i> loc(#loc193)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc25)
        %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc26)
        %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc26)
        cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc194)
      } loc(#loc192)
    } loc(#loc190)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc196)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc196)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc30)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc30)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc37)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc37)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc38)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc199)
          cir.if %10 {
            %11 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc201)
            %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc42)
            %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc42)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc41)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc42)
            %16 = cir.cast(integral, %15 : !s32i), !s16i loc(#loc42)
            cir.store %16, %11 : !s16i, !cir.ptr<!s16i> loc(#loc201)
            %17 = cir.load %11 : !cir.ptr<!s16i>, !s16i loc(#loc43)
            %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc43)
            cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc44)
          } loc(#loc200)
        } loc(#loc198)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc47)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc47)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc48)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc203)
          cir.if %10 {
            cir.scope {
              %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc52)
              %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc52)
              %13 = cir.const #cir.int<32767> : !s32i loc(#loc53)
              %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc53)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc53)
              %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc53)
              %17 = cir.const #cir.int<2> : !s32i loc(#loc54)
              %18 = cir.binop(div, %16, %17) : !s32i loc(#loc206)
              %19 = cir.cmp(gt, %12, %18) : !s32i, !cir.bool loc(#loc207)
              cir.if %19 {
                %20 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc209)
                %21 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc61)
                %22 = cir.cast(integral, %21 : !s16i), !s32i loc(#loc61)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc60)
                %24 = cir.binop(mul, %22, %23) nsw : !s32i loc(#loc61)
                %25 = cir.cast(integral, %24 : !s32i), !s16i loc(#loc61)
                cir.store %25, %20 : !s16i, !cir.ptr<!s16i> loc(#loc209)
                %26 = cir.load %20 : !cir.ptr<!s16i>, !s16i loc(#loc62)
                %27 = cir.cast(integral, %26 : !s16i), !s32i loc(#loc62)
                cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc63)
              } else {
                %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc9)
                %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc64)
              } loc(#loc208)
            } loc(#loc205)
          } loc(#loc204)
        } loc(#loc202)
      } loc(#loc197)
    } loc(#loc195)
    cir.return loc(#loc11)
  } loc(#loc187)
  cir.func no_proto @CWE191_Integer_Underflow__short_rand_multiply_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc211)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc67)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc212)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc69)
    cir.return loc(#loc66)
  } loc(#loc210)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc214)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc75)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc75)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc215)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc217)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc217)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc79)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc79)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc84)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc84)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc84)
        %11 = cir.ternary(%10, true {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc84)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc84)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc84)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc84)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc84)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc84)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc84)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc84)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc84)
          cir.yield %25 : !u32i loc(#loc84)
        }, false {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc84)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc84)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc84)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc84)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc84)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc84)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc84)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc84)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc84)
          %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc84)
          %27 = cir.const #cir.int<1> : !s32i loc(#loc84)
          %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc84)
          %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc84)
          cir.yield %29 : !u32i loc(#loc84)
        }) : (!cir.bool) -> !u32i loc(#loc84)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc84)
        %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc84)
        cir.store %13, %0 : !s16i, !cir.ptr<!s16i> loc(#loc219)
      } else {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc86)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc86)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc86)
        %11 = cir.ternary(%10, true {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc86)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc86)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc86)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc86)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc86)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc86)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc86)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc86)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc86)
          cir.yield %25 : !u32i loc(#loc86)
        }, false {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc86)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc86)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc86)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc86)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc86)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc86)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc86)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc86)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc86)
          %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc86)
          %27 = cir.const #cir.int<1> : !s32i loc(#loc86)
          %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc86)
          %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc86)
          cir.yield %29 : !u32i loc(#loc86)
        }) : (!cir.bool) -> !u32i loc(#loc86)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc86)
        %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc86)
        cir.store %13, %0 : !s16i, !cir.ptr<!s16i> loc(#loc220)
      } loc(#loc218)
    } loc(#loc216)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc222)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc222)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc90)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc90)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc97)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc97)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc98)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc225)
          cir.if %10 {
            cir.scope {
              %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc102)
              %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc102)
              %13 = cir.const #cir.int<32767> : !s32i loc(#loc103)
              %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc103)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc103)
              %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc103)
              %17 = cir.const #cir.int<2> : !s32i loc(#loc104)
              %18 = cir.binop(div, %16, %17) : !s32i loc(#loc228)
              %19 = cir.cmp(gt, %12, %18) : !s32i, !cir.bool loc(#loc229)
              cir.if %19 {
                %20 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc231)
                %21 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc111)
                %22 = cir.cast(integral, %21 : !s16i), !s32i loc(#loc111)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc110)
                %24 = cir.binop(mul, %22, %23) nsw : !s32i loc(#loc111)
                %25 = cir.cast(integral, %24 : !s32i), !s16i loc(#loc111)
                cir.store %25, %20 : !s16i, !cir.ptr<!s16i> loc(#loc231)
                %26 = cir.load %20 : !cir.ptr<!s16i>, !s16i loc(#loc112)
                %27 = cir.cast(integral, %26 : !s16i), !s32i loc(#loc112)
                cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc113)
              } else {
                %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc114)
                %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc114)
                cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc115)
              } loc(#loc230)
            } loc(#loc227)
          } loc(#loc226)
        } loc(#loc224)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc118)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc118)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc119)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc233)
          cir.if %10 {
            cir.scope {
              %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc123)
              %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc123)
              %13 = cir.const #cir.int<32767> : !s32i loc(#loc124)
              %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc124)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc124)
              %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc124)
              %17 = cir.const #cir.int<2> : !s32i loc(#loc125)
              %18 = cir.binop(div, %16, %17) : !s32i loc(#loc236)
              %19 = cir.cmp(gt, %12, %18) : !s32i, !cir.bool loc(#loc237)
              cir.if %19 {
                %20 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc239)
                %21 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc132)
                %22 = cir.cast(integral, %21 : !s16i), !s32i loc(#loc132)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc131)
                %24 = cir.binop(mul, %22, %23) nsw : !s32i loc(#loc132)
                %25 = cir.cast(integral, %24 : !s32i), !s16i loc(#loc132)
                cir.store %25, %20 : !s16i, !cir.ptr<!s16i> loc(#loc239)
                %26 = cir.load %20 : !cir.ptr<!s16i>, !s16i loc(#loc133)
                %27 = cir.cast(integral, %26 : !s16i), !s32i loc(#loc133)
                cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc134)
              } else {
                %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc135)
                %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc135)
                cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc136)
              } loc(#loc238)
            } loc(#loc235)
          } loc(#loc234)
        } loc(#loc232)
      } loc(#loc223)
    } loc(#loc221)
    cir.return loc(#loc72)
  } loc(#loc213)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc241)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc141)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc141)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc242)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc244)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc244)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc145)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc145)
      cir.if %6 {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc150)
        %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc151)
        %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc151)
        cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc246)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc153)
        %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc154)
        %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc154)
        cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc247)
      } loc(#loc245)
    } loc(#loc243)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc249)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc249)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc158)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc158)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc165)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc165)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc166)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc252)
          cir.if %10 {
            %11 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc254)
            %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc170)
            %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc170)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc169)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc170)
            %16 = cir.cast(integral, %15 : !s32i), !s16i loc(#loc170)
            cir.store %16, %11 : !s16i, !cir.ptr<!s16i> loc(#loc254)
            %17 = cir.load %11 : !cir.ptr<!s16i>, !s16i loc(#loc171)
            %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc171)
            cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc172)
          } loc(#loc253)
        } loc(#loc251)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc175)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc175)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc176)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc256)
          cir.if %10 {
            %11 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc258)
            %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc180)
            %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc180)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc179)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc180)
            %16 = cir.cast(integral, %15 : !s32i), !s16i loc(#loc180)
            cir.store %16, %11 : !s16i, !cir.ptr<!s16i> loc(#loc258)
            %17 = cir.load %11 : !cir.ptr<!s16i>, !s16i loc(#loc181)
            %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc181)
            cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc182)
          } loc(#loc257)
        } loc(#loc255)
      } loc(#loc250)
    } loc(#loc248)
    cir.return loc(#loc138)
  } loc(#loc240)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_rand_multiply_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":57:27)
#loc10 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":22:1)
#loc11 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":61:1)
#loc12 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":24:5)
#loc13 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":24:11)
#loc14 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":25:12)
#loc15 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":25:5)
#loc16 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":26:5)
#loc17 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":35:5)
#loc18 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":26:8)
#loc19 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":26:33)
#loc20 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":27:5)
#loc21 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":30:5)
#loc22 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":32:5)
#loc23 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":29:23)
#loc24 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":29:9)
#loc25 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":34:17)
#loc26 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":34:16)
#loc27 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":34:9)
#loc28 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":36:5)
#loc29 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":60:5)
#loc30 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":36:8)
#loc31 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":36:33)
#loc32 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":37:5)
#loc33 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":44:5)
#loc34 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":46:5)
#loc35 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":38:9)
#loc36 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":43:9)
#loc37 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":38:12)
#loc38 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":38:19)
#loc39 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":39:9)
#loc40 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":41:13)
#loc41 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":41:35)
#loc42 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":41:28)
#loc43 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":42:26)
#loc44 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":42:13)
#loc45 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":47:9)
#loc46 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":59:9)
#loc47 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":47:12)
#loc48 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":47:19)
#loc49 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":48:9)
#loc50 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":50:13)
#loc51 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":58:13)
#loc52 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":50:17)
#loc53 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":50:25)
#loc54 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":50:34)
#loc55 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":50:35)
#loc56 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":51:13)
#loc57 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":54:13)
#loc58 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":56:13)
#loc59 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":52:17)
#loc60 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":52:39)
#loc61 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":52:32)
#loc62 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":53:30)
#loc63 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":53:17)
#loc64 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":57:17)
#loc65 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":155:1)
#loc66 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":159:1)
#loc67 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":157:5)
#loc68 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":157:13)
#loc69 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":158:5)
#loc70 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":158:13)
#loc71 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":70:1)
#loc72 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":116:1)
#loc73 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":72:5)
#loc74 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":72:11)
#loc75 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":73:12)
#loc76 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":73:5)
#loc77 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":74:5)
#loc78 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":83:5)
#loc79 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":74:8)
#loc80 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":74:33)
#loc81 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":75:5)
#loc82 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":78:5)
#loc83 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":80:5)
#loc84 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":77:23)
#loc85 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":77:9)
#loc86 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":82:23)
#loc87 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":82:9)
#loc88 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":84:5)
#loc89 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":115:5)
#loc90 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":84:8)
#loc91 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":84:33)
#loc92 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":85:5)
#loc93 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":99:5)
#loc94 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":101:5)
#loc95 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":86:9)
#loc96 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":98:9)
#loc97 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":86:12)
#loc98 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":86:19)
#loc99 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":87:9)
#loc100 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":89:13)
#loc101 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":97:13)
#loc102 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":89:17)
#loc103 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":89:25)
#loc104 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":89:34)
#loc105 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":89:35)
#loc106 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":90:13)
#loc107 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":93:13)
#loc108 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":95:13)
#loc109 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":91:17)
#loc110 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":91:39)
#loc111 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":91:32)
#loc112 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":92:30)
#loc113 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":92:17)
#loc114 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":96:27)
#loc115 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":96:17)
#loc116 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":102:9)
#loc117 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":114:9)
#loc118 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":102:12)
#loc119 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":102:19)
#loc120 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":103:9)
#loc121 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":105:13)
#loc122 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":113:13)
#loc123 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":105:17)
#loc124 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":105:25)
#loc125 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":105:34)
#loc126 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":105:35)
#loc127 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":106:13)
#loc128 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":109:13)
#loc129 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":111:13)
#loc130 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":107:17)
#loc131 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":107:39)
#loc132 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":107:32)
#loc133 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":108:30)
#loc134 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":108:17)
#loc135 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":112:27)
#loc136 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":112:17)
#loc137 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":121:1)
#loc138 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":153:1)
#loc139 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":123:5)
#loc140 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":123:11)
#loc141 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":124:12)
#loc142 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":124:5)
#loc143 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":125:5)
#loc144 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":134:5)
#loc145 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":125:8)
#loc146 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":125:33)
#loc147 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":126:5)
#loc148 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":129:5)
#loc149 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":131:5)
#loc150 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":128:17)
#loc151 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":128:16)
#loc152 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":128:9)
#loc153 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":133:17)
#loc154 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":133:16)
#loc155 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":133:9)
#loc156 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":135:5)
#loc157 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":152:5)
#loc158 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":135:8)
#loc159 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":135:33)
#loc160 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":136:5)
#loc161 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":143:5)
#loc162 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":145:5)
#loc163 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":137:9)
#loc164 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":142:9)
#loc165 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":137:12)
#loc166 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":137:19)
#loc167 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":138:9)
#loc168 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":140:13)
#loc169 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":140:35)
#loc170 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":140:28)
#loc171 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":141:26)
#loc172 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":141:13)
#loc173 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":146:9)
#loc174 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":151:9)
#loc175 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":146:12)
#loc176 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":146:19)
#loc177 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":147:9)
#loc178 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":149:13)
#loc179 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":149:35)
#loc180 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":149:28)
#loc181 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":150:26)
#loc182 = loc("CWE191_Integer_Underflow__short_rand_multiply_12.c":150:13)
#loc183 = loc(fused[#loc1, #loc2])
#loc184 = loc(fused[#loc3, #loc4])
#loc185 = loc(fused[#loc5, #loc6])
#loc186 = loc(fused[#loc7, #loc8])
#loc187 = loc(fused[#loc10, #loc11])
#loc188 = loc(fused[#loc12, #loc13])
#loc189 = loc(fused[#loc15, #loc14])
#loc190 = loc(fused[#loc16, #loc17])
#loc191 = loc(fused[#loc18, #loc19])
#loc192 = loc(fused[#loc20, #loc21, #loc22, #loc17])
#loc193 = loc(fused[#loc24, #loc23])
#loc194 = loc(fused[#loc27, #loc25])
#loc195 = loc(fused[#loc28, #loc29])
#loc196 = loc(fused[#loc30, #loc31])
#loc197 = loc(fused[#loc32, #loc33, #loc34, #loc29])
#loc198 = loc(fused[#loc35, #loc36])
#loc199 = loc(fused[#loc37, #loc38])
#loc200 = loc(fused[#loc39, #loc36])
#loc201 = loc(fused[#loc40, #loc41])
#loc202 = loc(fused[#loc45, #loc46])
#loc203 = loc(fused[#loc47, #loc48])
#loc204 = loc(fused[#loc49, #loc46])
#loc205 = loc(fused[#loc50, #loc51])
#loc206 = loc(fused[#loc53, #loc54])
#loc207 = loc(fused[#loc52, #loc55])
#loc208 = loc(fused[#loc56, #loc57, #loc58, #loc51])
#loc209 = loc(fused[#loc59, #loc60])
#loc210 = loc(fused[#loc65, #loc66])
#loc211 = loc(fused[#loc67, #loc68])
#loc212 = loc(fused[#loc69, #loc70])
#loc213 = loc(fused[#loc71, #loc72])
#loc214 = loc(fused[#loc73, #loc74])
#loc215 = loc(fused[#loc76, #loc75])
#loc216 = loc(fused[#loc77, #loc78])
#loc217 = loc(fused[#loc79, #loc80])
#loc218 = loc(fused[#loc81, #loc82, #loc83, #loc78])
#loc219 = loc(fused[#loc85, #loc84])
#loc220 = loc(fused[#loc87, #loc86])
#loc221 = loc(fused[#loc88, #loc89])
#loc222 = loc(fused[#loc90, #loc91])
#loc223 = loc(fused[#loc92, #loc93, #loc94, #loc89])
#loc224 = loc(fused[#loc95, #loc96])
#loc225 = loc(fused[#loc97, #loc98])
#loc226 = loc(fused[#loc99, #loc96])
#loc227 = loc(fused[#loc100, #loc101])
#loc228 = loc(fused[#loc103, #loc104])
#loc229 = loc(fused[#loc102, #loc105])
#loc230 = loc(fused[#loc106, #loc107, #loc108, #loc101])
#loc231 = loc(fused[#loc109, #loc110])
#loc232 = loc(fused[#loc116, #loc117])
#loc233 = loc(fused[#loc118, #loc119])
#loc234 = loc(fused[#loc120, #loc117])
#loc235 = loc(fused[#loc121, #loc122])
#loc236 = loc(fused[#loc124, #loc125])
#loc237 = loc(fused[#loc123, #loc126])
#loc238 = loc(fused[#loc127, #loc128, #loc129, #loc122])
#loc239 = loc(fused[#loc130, #loc131])
#loc240 = loc(fused[#loc137, #loc138])
#loc241 = loc(fused[#loc139, #loc140])
#loc242 = loc(fused[#loc142, #loc141])
#loc243 = loc(fused[#loc143, #loc144])
#loc244 = loc(fused[#loc145, #loc146])
#loc245 = loc(fused[#loc147, #loc148, #loc149, #loc144])
#loc246 = loc(fused[#loc152, #loc150])
#loc247 = loc(fused[#loc155, #loc153])
#loc248 = loc(fused[#loc156, #loc157])
#loc249 = loc(fused[#loc158, #loc159])
#loc250 = loc(fused[#loc160, #loc161, #loc162, #loc157])
#loc251 = loc(fused[#loc163, #loc164])
#loc252 = loc(fused[#loc165, #loc166])
#loc253 = loc(fused[#loc167, #loc164])
#loc254 = loc(fused[#loc168, #loc169])
#loc255 = loc(fused[#loc173, #loc174])
#loc256 = loc(fused[#loc175, #loc176])
#loc257 = loc(fused[#loc177, #loc174])
#loc258 = loc(fused[#loc178, #loc179])
