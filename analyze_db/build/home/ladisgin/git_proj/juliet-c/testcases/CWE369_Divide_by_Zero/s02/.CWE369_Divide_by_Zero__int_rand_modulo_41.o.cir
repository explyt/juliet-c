!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":22:21)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":22:25)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":34:12)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":60:25)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":60:29)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":79:12)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":43:25)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":43:29)
#loc82 = loc(fused[#loc7, #loc8])
#loc93 = loc(fused[#loc35, #loc36])
#loc103 = loc(fused[#loc62, #loc63])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc79)
  cir.func private @printIntLine(!s32i) loc(#loc80)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc82)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc9)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc10)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc11)
    %3 = cir.binop(rem, %1, %2) : !s32i loc(#loc83)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc12)
    cir.return loc(#loc6)
  } loc(#loc81)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_modulo_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc85)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc18)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc86)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc20)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc20)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc20)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc20)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc20)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc20)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc20)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc20)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc20)
    cir.br ^bb3(%18 : !u32i) loc(#loc20)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc20)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc20)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc20)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc20)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc20)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc20)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc20)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc20)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc20)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc20)
    cir.br ^bb3(%34 : !u32i) loc(#loc20)
  ^bb3(%35: !u32i loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":34:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc20)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc20)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    %37 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
    cir.call @badSink(%37) : (!s32i) -> () loc(#loc23)
    cir.return loc(#loc14)
  } loc(#loc84)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_modulo_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc89)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc26)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc90)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    cir.return loc(#loc25)
  } loc(#loc88)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc91)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc32)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc35, #loc36])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc93)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc37)
    cir.br ^bb1 loc(#loc94)
  ^bb1:  // pred: ^bb0
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc40)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc41)
    %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc95)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc96)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<100> : !s32i loc(#loc45)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc97)
    cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc47)
    cir.br ^bb4 loc(#loc43)
  ^bb3:  // pred: ^bb1
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc32)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    cir.br ^bb4 loc(#loc39)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc39)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc34)
  } loc(#loc92)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc99)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc54)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc56)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc56)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc56)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc56)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc56)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc56)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc56)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc56)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc56)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc56)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc56)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc56)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc56)
    cir.br ^bb3(%18 : !u32i) loc(#loc56)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc56)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc56)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc56)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc56)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc56)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc56)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc56)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc56)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc56)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc56)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc56)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc56)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc56)
    cir.br ^bb3(%34 : !u32i) loc(#loc56)
  ^bb3(%35: !u32i loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":79:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc56)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc56)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    %37 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc58)
    cir.call @goodB2GSink(%37) : (!s32i) -> () loc(#loc59)
    cir.return loc(#loc50)
  } loc(#loc98)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc62, #loc63])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc103)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc65)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    %3 = cir.binop(rem, %1, %2) : !s32i loc(#loc104)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc67)
    cir.return loc(#loc61)
  } loc(#loc102)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc106)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc72)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc73)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc107)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc75)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc77)
    cir.call @goodG2BSink(%4) : (!s32i) -> () loc(#loc78)
    cir.return loc(#loc69)
  } loc(#loc105)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_41.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":22:1)
#loc6 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":26:1)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":23:1)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":25:18)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":25:24)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":25:5)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":28:1)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":36:1)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":30:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":30:9)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":32:13)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":32:12)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":32:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":34:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":35:13)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":35:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":83:1)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":87:1)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":85:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":85:13)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":86:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":86:13)
#loc30 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc31 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":69:19)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":60:1)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":71:1)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":61:1)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":63:5)
#loc39 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":70:5)
#loc40 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":63:9)
#loc41 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":63:17)
#loc42 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":64:5)
#loc43 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":66:5)
#loc44 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":68:5)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":65:22)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":65:28)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":65:9)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":69:9)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":73:1)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":81:1)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":75:5)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":75:9)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":77:13)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":77:12)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":77:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":79:5)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":80:17)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":80:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":43:1)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":47:1)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":44:1)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":46:18)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":46:24)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":46:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":49:1)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":57:1)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":51:5)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":51:9)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":53:13)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":53:12)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":53:5)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":55:12)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":55:5)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":56:17)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_modulo_41.c":56:5)
#loc79 = loc(fused[#loc1, #loc2])
#loc80 = loc(fused[#loc3, #loc4])
#loc81 = loc(fused[#loc5, #loc6])
#loc83 = loc(fused[#loc10, #loc11])
#loc84 = loc(fused[#loc13, #loc14])
#loc85 = loc(fused[#loc15, #loc16])
#loc86 = loc(fused[#loc19, #loc17])
#loc87 = loc(fused[#loc21, #loc20])
#loc88 = loc(fused[#loc24, #loc25])
#loc89 = loc(fused[#loc26, #loc27])
#loc90 = loc(fused[#loc28, #loc29])
#loc91 = loc(fused[#loc30, #loc31])
#loc92 = loc(fused[#loc33, #loc34])
#loc94 = loc(fused[#loc38, #loc39])
#loc95 = loc(fused[#loc40, #loc41])
#loc96 = loc(fused[#loc42, #loc43, #loc44, #loc39])
#loc97 = loc(fused[#loc45, #loc46])
#loc98 = loc(fused[#loc49, #loc50])
#loc99 = loc(fused[#loc51, #loc52])
#loc100 = loc(fused[#loc55, #loc53])
#loc101 = loc(fused[#loc57, #loc56])
#loc102 = loc(fused[#loc60, #loc61])
#loc104 = loc(fused[#loc65, #loc66])
#loc105 = loc(fused[#loc68, #loc69])
#loc106 = loc(fused[#loc70, #loc71])
#loc107 = loc(fused[#loc74, #loc72])
#loc108 = loc(fused[#loc76, #loc75])
