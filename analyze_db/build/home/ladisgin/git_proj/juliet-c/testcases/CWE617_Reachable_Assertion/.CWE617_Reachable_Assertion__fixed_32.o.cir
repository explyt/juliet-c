!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__fixed_32.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__fixed_32_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc65)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc66)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc67)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc68)
    %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc69)
    cir.store %2, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc68)
    cir.store %2, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc69)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc17)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc70)
    cir.br ^bb1 loc(#loc71)
  ^bb1:  // pred: ^bb0
    %7 = cir.load deref %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc7)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc65)
    %9 = cir.const #cir.int<5> : !s32i loc(#loc22)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc22)
    cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc72)
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %13 = cir.load deref %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
    cir.store %12, %13 : !s32i, !cir.ptr<!s32i> loc(#loc73)
    cir.br ^bb2 loc(#loc20)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc74)
  ^bb3:  // pred: ^bb2
    %14 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc9)
    %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc66)
    %16 = cir.const #cir.int<4> : !u64i loc(#loc3)
    cir.br ^bb4 loc(#loc3)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc3)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc3)
    %18 = cir.const #cir.int<5> : !s32i loc(#loc3)
    %19 = cir.cmp(gt, %17, %18) : !s32i, !cir.bool loc(#loc3)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc3)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8 loc(#loc3)
  ^bb7:  // pred: ^bb5
    %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc3)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc3)
    %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc3)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc3)
    %24 = cir.const #cir.int<41> : !s32i loc(#loc3)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc3)
    %26 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc3)
    %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc3)
    cir.call @__assert_fail(%21, %23, %25, %27) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc3)
    cir.br ^bb8 loc(#loc3)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc3)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc3)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc29)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc5)
  } loc(#loc64)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc76)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    cir.return loc(#loc32)
  } loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc35)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc78)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc79)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc80)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc81)
    %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc82)
    cir.store %2, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc81)
    cir.store %2, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc82)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc49)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    cir.br ^bb1 loc(#loc84)
  ^bb1:  // pred: ^bb0
    %7 = cir.load deref %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc78)
    %9 = cir.const #cir.int<5> : !s32i loc(#loc54)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %11 = cir.binop(add, %9, %10) nsw : !s32i loc(#loc54)
    cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    %13 = cir.load deref %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc58)
    cir.store %12, %13 : !s32i, !cir.ptr<!s32i> loc(#loc86)
    cir.br ^bb2 loc(#loc52)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc87)
  ^bb3:  // pred: ^bb2
    %14 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc41)
    %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc79)
    %16 = cir.const #cir.int<4> : !u64i loc(#loc35)
    cir.br ^bb4 loc(#loc35)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc35)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc35)
    %18 = cir.const #cir.int<5> : !s32i loc(#loc35)
    %19 = cir.cmp(gt, %17, %18) : !s32i, !cir.bool loc(#loc35)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc35)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8 loc(#loc35)
  ^bb7:  // pred: ^bb5
    %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc35)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc35)
    %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc35)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc35)
    %24 = cir.const #cir.int<66> : !s32i loc(#loc35)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc35)
    %26 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc35)
    %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @__assert_fail(%21, %23, %25, %27) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc35)
    cir.br ^bb8 loc(#loc35)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc35)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc35)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc61)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc37)
  } loc(#loc77)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_32.c":0:0)
#loc1 = loc("/usr/include/assert.h":67:1)
#loc2 = loc("/usr/include/assert.h":69:43)
#loc3 = loc("CWE617_Reachable_Assertion__fixed_32.c":41:9)
#loc4 = loc("CWE617_Reachable_Assertion__fixed_32.c":25:1)
#loc5 = loc("CWE617_Reachable_Assertion__fixed_32.c":43:1)
#loc6 = loc("CWE617_Reachable_Assertion__fixed_32.c":33:9)
#loc7 = loc("CWE617_Reachable_Assertion__fixed_32.c":33:21)
#loc8 = loc("CWE617_Reachable_Assertion__fixed_32.c":39:9)
#loc9 = loc("CWE617_Reachable_Assertion__fixed_32.c":39:21)
#loc10 = loc("CWE617_Reachable_Assertion__fixed_32.c":27:5)
#loc11 = loc("CWE617_Reachable_Assertion__fixed_32.c":27:9)
#loc12 = loc("CWE617_Reachable_Assertion__fixed_32.c":28:5)
#loc13 = loc("CWE617_Reachable_Assertion__fixed_32.c":28:22)
#loc14 = loc("CWE617_Reachable_Assertion__fixed_32.c":29:5)
#loc15 = loc("CWE617_Reachable_Assertion__fixed_32.c":29:22)
#loc16 = loc("CWE617_Reachable_Assertion__fixed_32.c":31:13)
#loc17 = loc("CWE617_Reachable_Assertion__fixed_32.c":31:12)
#loc18 = loc("CWE617_Reachable_Assertion__fixed_32.c":31:5)
#loc19 = loc("CWE617_Reachable_Assertion__fixed_32.c":32:5)
#loc20 = loc("CWE617_Reachable_Assertion__fixed_32.c":37:5)
#loc21 = loc("CWE617_Reachable_Assertion__fixed_32.c":33:20)
#loc22 = loc("CWE617_Reachable_Assertion__fixed_32.c":35:16)
#loc23 = loc("CWE617_Reachable_Assertion__fixed_32.c":35:29)
#loc24 = loc("CWE617_Reachable_Assertion__fixed_32.c":35:9)
#loc25 = loc("CWE617_Reachable_Assertion__fixed_32.c":36:21)
#loc26 = loc("CWE617_Reachable_Assertion__fixed_32.c":36:10)
#loc27 = loc("CWE617_Reachable_Assertion__fixed_32.c":36:9)
#loc28 = loc("CWE617_Reachable_Assertion__fixed_32.c":38:5)
#loc29 = loc("CWE617_Reachable_Assertion__fixed_32.c":42:5)
#loc30 = loc("CWE617_Reachable_Assertion__fixed_32.c":39:20)
#loc31 = loc("CWE617_Reachable_Assertion__fixed_32.c":70:1)
#loc32 = loc("CWE617_Reachable_Assertion__fixed_32.c":73:1)
#loc33 = loc("CWE617_Reachable_Assertion__fixed_32.c":72:5)
#loc34 = loc("CWE617_Reachable_Assertion__fixed_32.c":72:13)
#loc35 = loc("CWE617_Reachable_Assertion__fixed_32.c":66:9)
#loc36 = loc("CWE617_Reachable_Assertion__fixed_32.c":50:1)
#loc37 = loc("CWE617_Reachable_Assertion__fixed_32.c":68:1)
#loc38 = loc("CWE617_Reachable_Assertion__fixed_32.c":58:9)
#loc39 = loc("CWE617_Reachable_Assertion__fixed_32.c":58:21)
#loc40 = loc("CWE617_Reachable_Assertion__fixed_32.c":64:9)
#loc41 = loc("CWE617_Reachable_Assertion__fixed_32.c":64:21)
#loc42 = loc("CWE617_Reachable_Assertion__fixed_32.c":52:5)
#loc43 = loc("CWE617_Reachable_Assertion__fixed_32.c":52:9)
#loc44 = loc("CWE617_Reachable_Assertion__fixed_32.c":53:5)
#loc45 = loc("CWE617_Reachable_Assertion__fixed_32.c":53:22)
#loc46 = loc("CWE617_Reachable_Assertion__fixed_32.c":54:5)
#loc47 = loc("CWE617_Reachable_Assertion__fixed_32.c":54:22)
#loc48 = loc("CWE617_Reachable_Assertion__fixed_32.c":56:13)
#loc49 = loc("CWE617_Reachable_Assertion__fixed_32.c":56:12)
#loc50 = loc("CWE617_Reachable_Assertion__fixed_32.c":56:5)
#loc51 = loc("CWE617_Reachable_Assertion__fixed_32.c":57:5)
#loc52 = loc("CWE617_Reachable_Assertion__fixed_32.c":62:5)
#loc53 = loc("CWE617_Reachable_Assertion__fixed_32.c":58:20)
#loc54 = loc("CWE617_Reachable_Assertion__fixed_32.c":60:16)
#loc55 = loc("CWE617_Reachable_Assertion__fixed_32.c":60:29)
#loc56 = loc("CWE617_Reachable_Assertion__fixed_32.c":60:9)
#loc57 = loc("CWE617_Reachable_Assertion__fixed_32.c":61:21)
#loc58 = loc("CWE617_Reachable_Assertion__fixed_32.c":61:10)
#loc59 = loc("CWE617_Reachable_Assertion__fixed_32.c":61:9)
#loc60 = loc("CWE617_Reachable_Assertion__fixed_32.c":63:5)
#loc61 = loc("CWE617_Reachable_Assertion__fixed_32.c":67:5)
#loc62 = loc("CWE617_Reachable_Assertion__fixed_32.c":64:20)
#loc63 = loc(fused[#loc1, #loc2])
#loc64 = loc(fused[#loc4, #loc5])
#loc65 = loc(fused[#loc6, #loc7])
#loc66 = loc(fused[#loc8, #loc9])
#loc67 = loc(fused[#loc10, #loc11])
#loc68 = loc(fused[#loc12, #loc13])
#loc69 = loc(fused[#loc14, #loc15])
#loc70 = loc(fused[#loc18, #loc16])
#loc71 = loc(fused[#loc19, #loc20])
#loc72 = loc(fused[#loc24, #loc23])
#loc73 = loc(fused[#loc27, #loc25])
#loc74 = loc(fused[#loc28, #loc29])
#loc75 = loc(fused[#loc31, #loc32])
#loc76 = loc(fused[#loc33, #loc34])
#loc77 = loc(fused[#loc36, #loc37])
#loc78 = loc(fused[#loc38, #loc39])
#loc79 = loc(fused[#loc40, #loc41])
#loc80 = loc(fused[#loc42, #loc43])
#loc81 = loc(fused[#loc44, #loc45])
#loc82 = loc(fused[#loc46, #loc47])
#loc83 = loc(fused[#loc50, #loc48])
#loc84 = loc(fused[#loc51, #loc52])
#loc85 = loc(fused[#loc56, #loc55])
#loc86 = loc(fused[#loc59, #loc57])
#loc87 = loc(fused[#loc60, #loc61])
