!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc103)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printHexCharLine(!s8i) loc(#loc105)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_square_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc107)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc12)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc12)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc108)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc16)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc16)
        cir.condition(%4) loc(#loc16)
      } do {
        cir.scope {
          %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc18)
          %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc104)
          %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc19)
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
          %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc18)
          cir.break loc(#loc20)
        } loc(#loc110)
        cir.yield loc(#loc15)
      } loc(#loc109)
    } loc(#loc109)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc23)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc23)
        cir.condition(%4) loc(#loc23)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc114)
            %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc29)
            %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc29)
            %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc28)
            %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc28)
            %8 = cir.binop(mul, %5, %7) nsw : !s32i loc(#loc29)
            %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc29)
            cir.store %9, %3 : !s8i, !cir.ptr<!s8i> loc(#loc114)
            %10 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc30)
            cir.call @printHexCharLine(%10) : (!s8i) -> () loc(#loc31)
          } loc(#loc113)
          cir.break loc(#loc32)
        } loc(#loc112)
        cir.yield loc(#loc22)
      } loc(#loc111)
    } loc(#loc111)
    cir.return loc(#loc9)
  } loc(#loc106)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_square_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc116)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc117)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc115)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc39)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc118)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc42)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc120)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc47)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc47)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc121)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc51)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc51)
        cir.condition(%4) loc(#loc51)
      } do {
        cir.scope {
          %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc53)
          %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc104)
          %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc54)
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc55)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc55)
          %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc53)
          cir.break loc(#loc56)
        } loc(#loc123)
        cir.yield loc(#loc50)
      } loc(#loc122)
    } loc(#loc122)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc59)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc59)
        cir.condition(%4) loc(#loc59)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc63)
            %4 = cir.cast(integral, %3 : !s8i), !s64i loc(#loc63)
            %5 = cir.cast(integral, %4 : !s64i), !s32i loc(#loc63)
            %6 = cir.abs %5 poison : !s32i loc(#loc64)
            %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc64)
            %8 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc65)
            %9 = cir.const #cir.int<127> : !s32i loc(#loc66)
            %10 = cir.cast(int_to_float, %9 : !s32i), !cir.double loc(#loc66)
            %11 = cir.call @sqrt(%10) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc65)
            %12 = cir.cast(float_to_int, %11 : !cir.double), !s64i loc(#loc65)
            %13 = cir.cmp(le, %7, %12) : !s64i, !cir.bool loc(#loc127)
            cir.if %13 {
              %14 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc129)
              %15 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc73)
              %16 = cir.cast(integral, %15 : !s8i), !s32i loc(#loc73)
              %17 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc72)
              %18 = cir.cast(integral, %17 : !s8i), !s32i loc(#loc72)
              %19 = cir.binop(mul, %16, %18) nsw : !s32i loc(#loc73)
              %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc73)
              cir.store %20, %14 : !s8i, !cir.ptr<!s8i> loc(#loc129)
              %21 = cir.load %14 : !cir.ptr<!s8i>, !s8i loc(#loc74)
              cir.call @printHexCharLine(%21) : (!s8i) -> () loc(#loc75)
            } else {
              %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc42)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc42)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc76)
            } loc(#loc128)
          } loc(#loc126)
          cir.break loc(#loc77)
        } loc(#loc125)
        cir.yield loc(#loc58)
      } loc(#loc124)
    } loc(#loc124)
    cir.return loc(#loc44)
  } loc(#loc119)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc131)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc82)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc82)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc132)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc86)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc86)
        cir.condition(%4) loc(#loc86)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<2> : !s32i loc(#loc88)
          %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc88)
          cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc135)
          cir.break loc(#loc90)
        } loc(#loc134)
        cir.yield loc(#loc85)
      } loc(#loc133)
    } loc(#loc133)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc93)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc93)
        cir.condition(%4) loc(#loc93)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc139)
            %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc99)
            %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc99)
            %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc98)
            %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc98)
            %8 = cir.binop(mul, %5, %7) nsw : !s32i loc(#loc99)
            %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc99)
            cir.store %9, %3 : !s8i, !cir.ptr<!s8i> loc(#loc139)
            %10 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc100)
            cir.call @printHexCharLine(%10) : (!s8i) -> () loc(#loc101)
          } loc(#loc138)
          cir.break loc(#loc102)
        } loc(#loc137)
        cir.yield loc(#loc92)
      } loc(#loc136)
    } loc(#loc136)
    cir.return loc(#loc79)
  } loc(#loc130)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":31:24)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc8 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":24:1)
#loc9 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":43:1)
#loc10 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":26:5)
#loc11 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":26:10)
#loc12 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":27:12)
#loc13 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":27:5)
#loc14 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":28:5)
#loc15 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":33:5)
#loc16 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":28:11)
#loc17 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":29:5)
#loc18 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":31:9)
#loc19 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":31:17)
#loc20 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":32:9)
#loc21 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":34:5)
#loc22 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":42:5)
#loc23 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":34:11)
#loc24 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":35:5)
#loc25 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":36:9)
#loc26 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":40:9)
#loc27 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":38:13)
#loc28 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":38:34)
#loc29 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":38:27)
#loc30 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":39:30)
#loc31 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":39:13)
#loc32 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":41:9)
#loc33 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":98:1)
#loc34 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":102:1)
#loc35 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":100:5)
#loc36 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":100:13)
#loc37 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":101:5)
#loc38 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":101:13)
#loc39 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":70:23)
#loc43 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":50:1)
#loc44 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":74:1)
#loc45 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":52:5)
#loc46 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":52:10)
#loc47 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":53:12)
#loc48 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":53:5)
#loc49 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":54:5)
#loc50 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":59:5)
#loc51 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":54:11)
#loc52 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":55:5)
#loc53 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":57:9)
#loc54 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":57:17)
#loc55 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":57:24)
#loc56 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":58:9)
#loc57 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":60:5)
#loc58 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":73:5)
#loc59 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":60:11)
#loc60 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":61:5)
#loc61 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":63:9)
#loc62 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":71:9)
#loc63 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":63:23)
#loc64 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":63:13)
#loc65 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":63:38)
#loc66 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":63:51)
#loc67 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":63:59)
#loc68 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":64:9)
#loc69 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":67:9)
#loc70 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":69:9)
#loc71 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":65:13)
#loc72 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":65:34)
#loc73 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":65:27)
#loc74 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":66:30)
#loc75 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":66:13)
#loc76 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":70:13)
#loc77 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":72:9)
#loc78 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":77:1)
#loc79 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":96:1)
#loc80 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":79:5)
#loc81 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":79:10)
#loc82 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":80:12)
#loc83 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":80:5)
#loc84 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":81:5)
#loc85 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":86:5)
#loc86 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":81:11)
#loc87 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":82:5)
#loc88 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":84:16)
#loc89 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":84:9)
#loc90 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":85:9)
#loc91 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":87:5)
#loc92 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":95:5)
#loc93 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":87:11)
#loc94 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":88:5)
#loc95 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":89:9)
#loc96 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":93:9)
#loc97 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":91:13)
#loc98 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":91:34)
#loc99 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":91:27)
#loc100 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":92:30)
#loc101 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":92:13)
#loc102 = loc("CWE190_Integer_Overflow__char_fscanf_square_16.c":94:9)
#loc103 = loc(fused[#loc1, #loc2])
#loc104 = loc(fused[#loc3, #loc4])
#loc105 = loc(fused[#loc6, #loc7])
#loc106 = loc(fused[#loc8, #loc9])
#loc107 = loc(fused[#loc10, #loc11])
#loc108 = loc(fused[#loc13, #loc12])
#loc109 = loc(fused[#loc14, #loc15])
#loc110 = loc(fused[#loc17, #loc15])
#loc111 = loc(fused[#loc21, #loc22])
#loc112 = loc(fused[#loc24, #loc22])
#loc113 = loc(fused[#loc25, #loc26])
#loc114 = loc(fused[#loc27, #loc28])
#loc115 = loc(fused[#loc33, #loc34])
#loc116 = loc(fused[#loc35, #loc36])
#loc117 = loc(fused[#loc37, #loc38])
#loc118 = loc(fused[#loc40, #loc41])
#loc119 = loc(fused[#loc43, #loc44])
#loc120 = loc(fused[#loc45, #loc46])
#loc121 = loc(fused[#loc48, #loc47])
#loc122 = loc(fused[#loc49, #loc50])
#loc123 = loc(fused[#loc52, #loc50])
#loc124 = loc(fused[#loc57, #loc58])
#loc125 = loc(fused[#loc60, #loc58])
#loc126 = loc(fused[#loc61, #loc62])
#loc127 = loc(fused[#loc64, #loc67])
#loc128 = loc(fused[#loc68, #loc69, #loc70, #loc62])
#loc129 = loc(fused[#loc71, #loc72])
#loc130 = loc(fused[#loc78, #loc79])
#loc131 = loc(fused[#loc80, #loc81])
#loc132 = loc(fused[#loc83, #loc82])
#loc133 = loc(fused[#loc84, #loc85])
#loc134 = loc(fused[#loc87, #loc85])
#loc135 = loc(fused[#loc89, #loc88])
#loc136 = loc(fused[#loc91, #loc92])
#loc137 = loc(fused[#loc94, #loc92])
#loc138 = loc(fused[#loc95, #loc96])
#loc139 = loc(fused[#loc97, #loc98])
