!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":167:10)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":167:14)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":167:20)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":167:32)
#loc231 = loc(fused[#loc58, #loc59])
#loc232 = loc(fused[#loc60, #loc61])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc208)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc3)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc209)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc210)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc211)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_10_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc213)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc214)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc215)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc18)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc216)
    cir.br ^bb1 loc(#loc217)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc208)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc22)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc22)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc218)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc3)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc3)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc3)
    cir.store %9, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc219)
    cir.br ^bb3 loc(#loc21)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc21)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc220)
  ^bb5:  // pred: ^bb4
    %10 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc208)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc27)
    cir.brcond %12 ^bb6, ^bb9 loc(#loc221)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc222)
  ^bb7:  // pred: ^bb6
    %13 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc31)
    %14 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc32)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc32)
    %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc31)
    cir.store %16, %0 : !u64i, !cir.ptr<!u64i> loc(#loc213)
    %17 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc15)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc15)
    %20 = cir.binop(add, %17, %19) : !u64i loc(#loc15)
    %21 = cir.const #cir.int<4> : !u64i loc(#loc15)
    %22 = cir.binop(mul, %20, %21) : !u64i loc(#loc15)
    %23 = cir.alloca !u8i, !cir.ptr<!u8i>, %22 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc15)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc15)
    cir.store %24, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc214)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc33)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc33)
    %27 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc34)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc34)
    %29 = cir.call @wcscpy(%26, %28) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc35)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc36)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc37)
    cir.br ^bb8 loc(#loc30)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc26)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc26)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc11)
  } loc(#loc212)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_10_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc224)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc225)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc226)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc227)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    cir.return loc(#loc39)
  } loc(#loc223)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc228)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc229)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc55)
  cir.func @main(%arg0: !s32i loc(fused[#loc58, #loc59]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc60, #loc61])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc231)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc232)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc57)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc62)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc62)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc63)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc64)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc64)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc65)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc52)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_10_good : !cir.ptr<!cir.func<!void ()>> loc(#loc233)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_10_good() : () -> () loc(#loc67)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc53)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc54)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_10_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc234)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_10_bad() : () -> () loc(#loc71)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc55)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc74)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc235)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc235)
    cir.return %17 : !s32i loc(#loc235)
  } loc(#loc230)
  cir.global "private" external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc236)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc78)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc237)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc238)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc240)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc241)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc242)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc91)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc243)
    cir.br ^bb1 loc(#loc244)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc208)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc95)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc245)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc97)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc97)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc97)
    cir.store %9, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc246)
    cir.br ^bb3 loc(#loc94)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc94)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc247)
  ^bb5:  // pred: ^bb4
    %10 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc236)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc101)
    cir.brcond %12 ^bb6, ^bb7 loc(#loc248)
  ^bb6:  // pred: ^bb5
    %13 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc78)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    cir.br ^bb10 loc(#loc103)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc249)
  ^bb8:  // pred: ^bb7
    %15 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc108)
    %16 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc109)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc109)
    %18 = cir.call @wcslen(%17) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc108)
    cir.store %18, %0 : !u64i, !cir.ptr<!u64i> loc(#loc240)
    %19 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc88)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc88)
    %22 = cir.binop(add, %19, %21) : !u64i loc(#loc88)
    %23 = cir.const #cir.int<4> : !u64i loc(#loc88)
    %24 = cir.binop(mul, %22, %23) : !u64i loc(#loc88)
    %25 = cir.alloca !u8i, !cir.ptr<!u8i>, %24 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc88)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc88)
    cir.store %26, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc241)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc110)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc110)
    %29 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc111)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc111)
    %31 = cir.call @wcscpy(%28, %30) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc112)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc113)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc113)
    cir.call @printWLine(%33) : (!cir.ptr<!s32i>) -> () loc(#loc114)
    cir.br ^bb9 loc(#loc107)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc100)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc100)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc84)
  } loc(#loc239)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc251)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc252)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc253)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc123)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc254)
    cir.br ^bb1 loc(#loc255)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc208)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc127)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc127)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc256)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc129)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc129)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc129)
    cir.store %9, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc257)
    cir.br ^bb3 loc(#loc126)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc126)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc258)
  ^bb5:  // pred: ^bb4
    %10 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc208)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc133)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc133)
    cir.brcond %12 ^bb6, ^bb9 loc(#loc259)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc260)
  ^bb7:  // pred: ^bb6
    %13 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc137)
    %14 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc138)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc138)
    %16 = cir.call @wcslen(%15) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc137)
    cir.store %16, %0 : !u64i, !cir.ptr<!u64i> loc(#loc251)
    %17 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc120)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc120)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc120)
    %20 = cir.binop(add, %17, %19) : !u64i loc(#loc120)
    %21 = cir.const #cir.int<4> : !u64i loc(#loc120)
    %22 = cir.binop(mul, %20, %21) : !u64i loc(#loc120)
    %23 = cir.alloca !u8i, !cir.ptr<!u8i>, %22 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc120)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc120)
    cir.store %24, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc252)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc139)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc139)
    %27 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc140)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc140)
    %29 = cir.call @wcscpy(%26, %28) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc141)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc142)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc142)
    cir.call @printWLine(%31) : (!cir.ptr<!s32i>) -> () loc(#loc143)
    cir.br ^bb8 loc(#loc136)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc132)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc132)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc116)
  } loc(#loc250)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc144)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc261)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc263)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc264)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc265)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc155)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc266)
    cir.br ^bb1 loc(#loc267)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc236)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc159)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc159)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc268)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc163)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc163)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc164)
    cir.br ^bb4 loc(#loc161)
  ^bb3:  // pred: ^bb1
    %9 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc144)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc144)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc144)
    cir.store %11, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc269)
    cir.br ^bb4 loc(#loc158)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc158)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc270)
  ^bb6:  // pred: ^bb5
    %12 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc208)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc168)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc168)
    cir.brcond %14 ^bb7, ^bb10 loc(#loc271)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc272)
  ^bb8:  // pred: ^bb7
    %15 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc172)
    %16 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc173)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc173)
    %18 = cir.call @strlen(%17) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc172)
    cir.store %18, %0 : !u64i, !cir.ptr<!u64i> loc(#loc263)
    %19 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc152)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc152)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc152)
    %22 = cir.binop(add, %19, %21) : !u64i loc(#loc152)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc152)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc152)
    %25 = cir.binop(mul, %22, %24) : !u64i loc(#loc152)
    %26 = cir.alloca !u8i, !cir.ptr<!u8i>, %25 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc152)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc152)
    cir.store %27, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc264)
    %28 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc174)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc175)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc175)
    %31 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc176)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc176)
    %33 = cir.call @strcpy(%30, %32) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc174)
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc177)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc177)
    cir.call @printLine(%35) : (!cir.ptr<!s8i>) -> () loc(#loc178)
    cir.br ^bb9 loc(#loc171)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc167)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc167)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc148)
  } loc(#loc262)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc274)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc275)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc276)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc187)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc277)
    cir.br ^bb1 loc(#loc278)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc208)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc191)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc191)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc279)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc193)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc193)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc193)
    cir.store %9, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc280)
    cir.br ^bb3 loc(#loc190)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc190)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc281)
  ^bb5:  // pred: ^bb4
    %10 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc208)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc197)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc197)
    cir.brcond %12 ^bb6, ^bb9 loc(#loc282)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc283)
  ^bb7:  // pred: ^bb6
    %13 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc201)
    %14 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc202)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc202)
    %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc201)
    cir.store %16, %0 : !u64i, !cir.ptr<!u64i> loc(#loc274)
    %17 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc184)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc184)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc184)
    %20 = cir.binop(add, %17, %19) : !u64i loc(#loc184)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc184)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc184)
    %23 = cir.binop(mul, %20, %22) : !u64i loc(#loc184)
    %24 = cir.alloca !u8i, !cir.ptr<!u8i>, %23 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc184)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc184)
    cir.store %25, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc275)
    %26 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc203)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc204)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc204)
    %29 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc205)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc205)
    %31 = cir.call @strcpy(%28, %30) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc203)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc206)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc206)
    cir.call @printLine(%33) : (!cir.ptr<!s8i>) -> () loc(#loc207)
    cir.br ^bb8 loc(#loc200)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc196)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc196)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc180)
  } loc(#loc273)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":116:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":116:12)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":34:24)
#loc4 = loc("/usr/include/string.h":407:1)
#loc5 = loc("/usr/include/string.h":408:33)
#loc6 = loc("/usr/include/wchar.h":98:1)
#loc7 = loc("/usr/include/wchar.h":100:14)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":27:1)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":46:1)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":40:13)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":40:49)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":41:13)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":41:35)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":29:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":29:12)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":30:12)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":30:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":31:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":35:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":31:8)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":32:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":34:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":36:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":45:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":36:8)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":37:5)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":38:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":44:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":40:30)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":40:45)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":42:26)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":42:32)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":42:19)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":43:31)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":43:13)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":150:1)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":156:1)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":152:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":152:14)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":153:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":153:14)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":154:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":154:14)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":155:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":155:14)
#loc48 = loc("/usr/include/stdlib.h":575:1)
#loc49 = loc("/usr/include/stdlib.h":575:41)
#loc50 = loc("/usr/include/time.h":76:1)
#loc51 = loc("/usr/include/time.h":76:38)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":172:15)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":174:15)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":177:15)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":179:15)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":167:1)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":182:1)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":168:1)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":170:27)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":170:22)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":170:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":172:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":173:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":173:56)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":174:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":177:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":178:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":178:55)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":179:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":181:12)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":181:5)
#loc76 = loc("../../../testcasesupport/std_testcase.h":117:1)
#loc77 = loc("../../../testcasesupport/std_testcase.h":117:12)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":65:19)
#loc79 = loc("/usr/include/wchar.h":247:1)
#loc80 = loc("/usr/include/wchar.h":247:51)
#loc81 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc82 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":53:1)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":77:1)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":71:13)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":71:52)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":72:13)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":72:35)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":55:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":55:12)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":56:12)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":56:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":57:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":61:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":57:8)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":58:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":60:24)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":60:9)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":62:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":76:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":62:8)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":63:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":66:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":68:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":65:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":69:9)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":75:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":71:30)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":71:48)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":73:26)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":73:32)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":73:19)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":74:35)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":74:13)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":80:1)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":99:1)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":93:13)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":93:52)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":94:13)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":94:35)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":82:5)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":82:12)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":83:12)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":83:5)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":84:5)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":88:5)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":84:8)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":85:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":87:24)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":87:9)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":89:5)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":98:5)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":89:8)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":90:5)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":91:9)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":97:9)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":93:30)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":93:48)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":95:26)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":95:32)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":95:19)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":96:35)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":96:13)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":114:24)
#loc145 = loc("/usr/include/string.h":141:1)
#loc146 = loc("/usr/include/string.h":142:14)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":102:1)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":126:1)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":120:13)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":120:49)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":121:13)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":121:35)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":104:5)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":104:12)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":105:12)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":105:5)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":106:5)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":115:5)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":106:8)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":107:5)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":110:5)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":112:5)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":109:19)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":109:9)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":114:9)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":116:5)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":125:5)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":116:8)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":117:5)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":118:9)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":124:9)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":120:30)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":120:45)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":122:19)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":122:26)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":122:32)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":123:31)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":123:13)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":129:1)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":148:1)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":142:13)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":142:49)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":143:13)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":143:35)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":131:5)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":131:12)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":132:12)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":132:5)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":133:5)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":137:5)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":133:8)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":134:5)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":136:24)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":136:9)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":138:5)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":147:5)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":138:8)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":139:5)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":140:9)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":146:9)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":142:30)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":142:45)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":144:19)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":144:26)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":144:32)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":145:31)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c":145:13)
#loc208 = loc(fused[#loc1, #loc2])
#loc209 = loc(fused[#loc4, #loc5])
#loc210 = loc(fused[#loc6, #loc7])
#loc211 = loc(fused[#loc8, #loc9])
#loc212 = loc(fused[#loc10, #loc11])
#loc213 = loc(fused[#loc12, #loc13])
#loc214 = loc(fused[#loc14, #loc15])
#loc215 = loc(fused[#loc16, #loc17])
#loc216 = loc(fused[#loc19, #loc18])
#loc217 = loc(fused[#loc20, #loc21])
#loc218 = loc(fused[#loc23, #loc21])
#loc219 = loc(fused[#loc24, #loc3])
#loc220 = loc(fused[#loc25, #loc26])
#loc221 = loc(fused[#loc28, #loc26])
#loc222 = loc(fused[#loc29, #loc30])
#loc223 = loc(fused[#loc38, #loc39])
#loc224 = loc(fused[#loc40, #loc41])
#loc225 = loc(fused[#loc42, #loc43])
#loc226 = loc(fused[#loc44, #loc45])
#loc227 = loc(fused[#loc46, #loc47])
#loc228 = loc(fused[#loc48, #loc49])
#loc229 = loc(fused[#loc50, #loc51])
#loc230 = loc(fused[#loc56, #loc57])
#loc233 = loc(fused[#loc67, #loc68])
#loc234 = loc(fused[#loc71, #loc72])
#loc235 = loc(fused[#loc75, #loc74])
#loc236 = loc(fused[#loc76, #loc77])
#loc237 = loc(fused[#loc79, #loc80])
#loc238 = loc(fused[#loc81, #loc82])
#loc239 = loc(fused[#loc83, #loc84])
#loc240 = loc(fused[#loc85, #loc86])
#loc241 = loc(fused[#loc87, #loc88])
#loc242 = loc(fused[#loc89, #loc90])
#loc243 = loc(fused[#loc92, #loc91])
#loc244 = loc(fused[#loc93, #loc94])
#loc245 = loc(fused[#loc96, #loc94])
#loc246 = loc(fused[#loc98, #loc97])
#loc247 = loc(fused[#loc99, #loc100])
#loc248 = loc(fused[#loc102, #loc103, #loc104, #loc100])
#loc249 = loc(fused[#loc106, #loc107])
#loc250 = loc(fused[#loc115, #loc116])
#loc251 = loc(fused[#loc117, #loc118])
#loc252 = loc(fused[#loc119, #loc120])
#loc253 = loc(fused[#loc121, #loc122])
#loc254 = loc(fused[#loc124, #loc123])
#loc255 = loc(fused[#loc125, #loc126])
#loc256 = loc(fused[#loc128, #loc126])
#loc257 = loc(fused[#loc130, #loc129])
#loc258 = loc(fused[#loc131, #loc132])
#loc259 = loc(fused[#loc134, #loc132])
#loc260 = loc(fused[#loc135, #loc136])
#loc261 = loc(fused[#loc145, #loc146])
#loc262 = loc(fused[#loc147, #loc148])
#loc263 = loc(fused[#loc149, #loc150])
#loc264 = loc(fused[#loc151, #loc152])
#loc265 = loc(fused[#loc153, #loc154])
#loc266 = loc(fused[#loc156, #loc155])
#loc267 = loc(fused[#loc157, #loc158])
#loc268 = loc(fused[#loc160, #loc161, #loc162, #loc158])
#loc269 = loc(fused[#loc165, #loc144])
#loc270 = loc(fused[#loc166, #loc167])
#loc271 = loc(fused[#loc169, #loc167])
#loc272 = loc(fused[#loc170, #loc171])
#loc273 = loc(fused[#loc179, #loc180])
#loc274 = loc(fused[#loc181, #loc182])
#loc275 = loc(fused[#loc183, #loc184])
#loc276 = loc(fused[#loc185, #loc186])
#loc277 = loc(fused[#loc188, #loc187])
#loc278 = loc(fused[#loc189, #loc190])
#loc279 = loc(fused[#loc192, #loc190])
#loc280 = loc(fused[#loc194, #loc193])
#loc281 = loc(fused[#loc195, #loc196])
#loc282 = loc(fused[#loc198, #loc196])
#loc283 = loc(fused[#loc199, #loc200])
