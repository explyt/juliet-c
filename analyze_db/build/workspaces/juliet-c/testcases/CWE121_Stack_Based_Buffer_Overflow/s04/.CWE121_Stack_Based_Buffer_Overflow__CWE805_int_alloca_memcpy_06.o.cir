!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc105)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc107)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc108)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc8)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc8)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc8)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc8)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc8)
    %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc109)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc8)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc8)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc108)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc10)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc10)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc10)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc10)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc10)
    cir.store %16, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc109)
    cir.scope {
      %17 = cir.const #cir.int<5> : !s32i loc(#loc13)
      %18 = cir.const #cir.int<5> : !s32i loc(#loc14)
      %19 = cir.cmp(eq, %17, %18) : !s32i, !cir.bool loc(#loc111)
      cir.if %19 {
        %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc16)
        cir.store %20, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc113)
      } loc(#loc112)
    } loc(#loc110)
    cir.scope {
      %17 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc115)
      %18 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc115)
      cir.store %18, %17 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc115)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc22)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc22)
      %21 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc23)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc23)
      %23 = cir.const #cir.int<100> : !s32i loc(#loc24)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc24)
      %25 = cir.const #cir.int<4> : !u64i loc(#loc116)
      %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc117)
      cir.libc.memcpy %26 bytes from %22 to %20 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc118)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc29)
      %28 = cir.const #cir.int<0> : !s32i loc(#loc30)
      %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc31)
      %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc29)
      cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc32)
    } loc(#loc114)
    cir.return loc(#loc4)
  } loc(#loc106)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc120)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc121)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc119)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc122)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc41)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc124)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc125)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc47)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc47)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc47)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc47)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc47)
    %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc126)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc47)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc47)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc125)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc49)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc49)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc49)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc49)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc49)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc49)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc49)
    cir.store %16, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc126)
    cir.scope {
      %17 = cir.const #cir.int<5> : !s32i loc(#loc52)
      %18 = cir.const #cir.int<5> : !s32i loc(#loc53)
      %19 = cir.cmp(ne, %17, %18) : !s32i, !cir.bool loc(#loc128)
      cir.if %19 {
        %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc41)
        %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc41)
        cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc57)
      } else {
        %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc58)
        cir.store %20, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc130)
      } loc(#loc129)
    } loc(#loc127)
    cir.scope {
      %17 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc132)
      %18 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc132)
      cir.store %18, %17 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc132)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc64)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc64)
      %21 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc65)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc65)
      %23 = cir.const #cir.int<100> : !s32i loc(#loc66)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc66)
      %25 = cir.const #cir.int<4> : !u64i loc(#loc133)
      %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc134)
      cir.libc.memcpy %26 bytes from %22 to %20 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc135)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc71)
      %28 = cir.const #cir.int<0> : !s32i loc(#loc72)
      %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc73)
      %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc71)
      cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc74)
    } loc(#loc131)
    cir.return loc(#loc43)
  } loc(#loc123)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc137)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc138)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc80)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc80)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc80)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc80)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc80)
    %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc139)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc80)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc80)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc138)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc82)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc82)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc82)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc82)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc82)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc82)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc82)
    cir.store %16, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc139)
    cir.scope {
      %17 = cir.const #cir.int<5> : !s32i loc(#loc85)
      %18 = cir.const #cir.int<5> : !s32i loc(#loc86)
      %19 = cir.cmp(eq, %17, %18) : !s32i, !cir.bool loc(#loc141)
      cir.if %19 {
        %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc88)
        cir.store %20, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc143)
      } loc(#loc142)
    } loc(#loc140)
    cir.scope {
      %17 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc145)
      %18 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc145)
      cir.store %18, %17 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc145)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc94)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc94)
      %21 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc95)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc95)
      %23 = cir.const #cir.int<100> : !s32i loc(#loc96)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc96)
      %25 = cir.const #cir.int<4> : !u64i loc(#loc146)
      %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc147)
      cir.libc.memcpy %26 bytes from %22 to %20 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc148)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc101)
      %28 = cir.const #cir.int<0> : !s32i loc(#loc102)
      %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc103)
      %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc101)
      cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc104)
    } loc(#loc144)
    cir.return loc(#loc76)
  } loc(#loc136)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":25:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":42:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":27:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":27:11)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":28:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":28:34)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":29:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":29:35)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":30:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":35:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":30:8)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":30:27)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":31:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":34:16)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":34:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":36:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":41:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":37:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":37:29)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":39:16)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":39:22)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":39:30)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":39:34)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":39:44)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":39:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":39:45)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":40:22)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":40:27)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":40:28)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":40:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":91:1)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":95:1)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":93:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":93:14)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":94:5)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":94:14)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":57:19)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":49:1)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":70:1)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":51:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":51:11)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":52:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":52:34)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":53:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":53:35)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":54:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":63:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":54:8)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":54:27)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":55:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":58:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":60:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":57:9)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":62:16)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":62:9)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":64:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":69:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":65:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":65:29)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":67:16)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":67:22)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":67:30)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":67:34)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":67:44)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":67:9)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":67:45)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":68:22)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":68:27)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":68:28)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":68:9)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":73:1)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":89:1)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":75:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":75:11)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":76:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":76:34)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":77:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":77:35)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":78:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":82:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":78:8)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":78:27)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":79:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":81:16)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":81:9)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":83:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":88:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":84:9)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":84:29)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":86:16)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":86:22)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":86:30)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":86:34)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":86:44)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":86:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":86:45)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":87:22)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":87:27)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":87:28)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c":87:9)
#loc105 = loc(fused[#loc1, #loc2])
#loc106 = loc(fused[#loc3, #loc4])
#loc107 = loc(fused[#loc5, #loc6])
#loc108 = loc(fused[#loc7, #loc8])
#loc109 = loc(fused[#loc9, #loc10])
#loc110 = loc(fused[#loc11, #loc12])
#loc111 = loc(fused[#loc13, #loc14])
#loc112 = loc(fused[#loc15, #loc12])
#loc113 = loc(fused[#loc17, #loc16])
#loc114 = loc(fused[#loc18, #loc19])
#loc115 = loc(fused[#loc20, #loc21])
#loc116 = loc(fused[#loc25, #loc26])
#loc117 = loc(fused[#loc24, #loc26])
#loc118 = loc(fused[#loc27, #loc28])
#loc119 = loc(fused[#loc33, #loc34])
#loc120 = loc(fused[#loc35, #loc36])
#loc121 = loc(fused[#loc37, #loc38])
#loc122 = loc(fused[#loc39, #loc40])
#loc123 = loc(fused[#loc42, #loc43])
#loc124 = loc(fused[#loc44, #loc45])
#loc125 = loc(fused[#loc46, #loc47])
#loc126 = loc(fused[#loc48, #loc49])
#loc127 = loc(fused[#loc50, #loc51])
#loc128 = loc(fused[#loc52, #loc53])
#loc129 = loc(fused[#loc54, #loc55, #loc56, #loc51])
#loc130 = loc(fused[#loc59, #loc58])
#loc131 = loc(fused[#loc60, #loc61])
#loc132 = loc(fused[#loc62, #loc63])
#loc133 = loc(fused[#loc67, #loc68])
#loc134 = loc(fused[#loc66, #loc68])
#loc135 = loc(fused[#loc69, #loc70])
#loc136 = loc(fused[#loc75, #loc76])
#loc137 = loc(fused[#loc77, #loc78])
#loc138 = loc(fused[#loc79, #loc80])
#loc139 = loc(fused[#loc81, #loc82])
#loc140 = loc(fused[#loc83, #loc84])
#loc141 = loc(fused[#loc85, #loc86])
#loc142 = loc(fused[#loc87, #loc84])
#loc143 = loc(fused[#loc89, #loc88])
#loc144 = loc(fused[#loc90, #loc91])
#loc145 = loc(fused[#loc92, #loc93])
#loc146 = loc(fused[#loc97, #loc98])
#loc147 = loc(fused[#loc96, #loc98])
#loc148 = loc(fused[#loc99, #loc100])
