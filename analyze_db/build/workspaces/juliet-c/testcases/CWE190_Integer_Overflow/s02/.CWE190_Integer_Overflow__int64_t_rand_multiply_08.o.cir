!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":42:25)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":67:25)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":100:25)
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc195)
  cir.func private @printLongLongLine(!s64i) loc(#loc196)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_multiply_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc198)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc199)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc11)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc200)
    cir.br ^bb1 loc(#loc201)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc202)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc15)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc203)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc18)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc18)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc18)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc18)
    %12 = cir.const #cir.int<60> : !s32i loc(#loc18)
    %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc18)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc18)
    %16 = cir.const #cir.int<45> : !s32i loc(#loc18)
    %17 = cir.shift(left, %15 : !u64i, %16 : !s32i) -> !u64i loc(#loc18)
    %18 = cir.binop(xor, %13, %17) : !u64i loc(#loc18)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc18)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc18)
    %22 = cir.shift(left, %20 : !u64i, %21 : !s32i) -> !u64i loc(#loc18)
    %23 = cir.binop(xor, %18, %22) : !u64i loc(#loc18)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc18)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc18)
    %27 = cir.shift(left, %25 : !u64i, %26 : !s32i) -> !u64i loc(#loc18)
    %28 = cir.binop(xor, %23, %27) : !u64i loc(#loc18)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc18)
    %31 = cir.binop(xor, %28, %30) : !u64i loc(#loc18)
    cir.br ^bb5(%31 : !u64i) loc(#loc18)
  ^bb4:  // pred: ^bb2
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc18)
    %34 = cir.const #cir.int<60> : !s32i loc(#loc18)
    %35 = cir.shift(left, %33 : !u64i, %34 : !s32i) -> !u64i loc(#loc18)
    %36 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc18)
    %38 = cir.const #cir.int<45> : !s32i loc(#loc18)
    %39 = cir.shift(left, %37 : !u64i, %38 : !s32i) -> !u64i loc(#loc18)
    %40 = cir.binop(xor, %35, %39) : !u64i loc(#loc18)
    %41 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc18)
    %43 = cir.const #cir.int<30> : !s32i loc(#loc18)
    %44 = cir.shift(left, %42 : !u64i, %43 : !s32i) -> !u64i loc(#loc18)
    %45 = cir.binop(xor, %40, %44) : !u64i loc(#loc18)
    %46 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc18)
    %48 = cir.const #cir.int<15> : !s32i loc(#loc18)
    %49 = cir.shift(left, %47 : !u64i, %48 : !s32i) -> !u64i loc(#loc18)
    %50 = cir.binop(xor, %45, %49) : !u64i loc(#loc18)
    %51 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %52 = cir.cast(integral, %51 : !s32i), !u64i loc(#loc18)
    %53 = cir.binop(xor, %50, %52) : !u64i loc(#loc18)
    %54 = cir.unary(minus, %53) : !u64i, !u64i loc(#loc18)
    %55 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %56 = cir.cast(integral, %55 : !s32i), !u64i loc(#loc18)
    %57 = cir.binop(sub, %54, %56) : !u64i loc(#loc18)
    cir.br ^bb5(%57 : !u64i) loc(#loc18)
  ^bb5(%58: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":42:25)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc18)
  ^bb6:  // pred: ^bb5
    %59 = cir.cast(integral, %58 : !u64i), !s64i loc(#loc18)
    cir.store %59, %1 : !s64i, !cir.ptr<!s64i> loc(#loc204)
    cir.br ^bb7 loc(#loc14)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc14)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc205)
  ^bb9:  // pred: ^bb8
    %60 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc206)
    %61 = cir.call %60() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc22)
    %62 = cir.cast(int_to_bool, %61 : !s32i), !cir.bool loc(#loc22)
    cir.brcond %62 ^bb10, ^bb15 loc(#loc207)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc208)
  ^bb11:  // pred: ^bb10
    %63 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc27)
    %64 = cir.const #cir.int<0> : !s32i loc(#loc28)
    %65 = cir.cast(integral, %64 : !s32i), !s64i loc(#loc28)
    %66 = cir.cmp(gt, %63, %65) : !s64i, !cir.bool loc(#loc209)
    cir.brcond %66 ^bb12, ^bb13 loc(#loc210)
  ^bb12:  // pred: ^bb11
    %67 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc30)
    %68 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %69 = cir.cast(integral, %68 : !s32i), !s64i loc(#loc8)
    %70 = cir.binop(mul, %67, %69) nsw : !s64i loc(#loc30)
    cir.store %70, %0 : !s64i, !cir.ptr<!s64i> loc(#loc198)
    %71 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc31)
    cir.call @printLongLongLine(%71) : (!s64i) -> () loc(#loc32)
    cir.br ^bb13 loc(#loc26)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc26)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc21)
  ^bb15:  // 2 preds: ^bb9, ^bb14
    cir.br ^bb16 loc(#loc21)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc6)
  } loc(#loc197)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_multiply_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc212)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc213)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc214)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc215)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    cir.return loc(#loc34)
  } loc(#loc211)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc44)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc45)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc217)
    cir.return %2 : !s32i loc(#loc217)
  } loc(#loc216)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc218)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc50)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc220)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc221)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc57)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc222)
    cir.br ^bb1 loc(#loc223)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc224)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc61)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc61)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc225)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc64)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc64)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc64)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc64)
    %12 = cir.const #cir.int<60> : !s32i loc(#loc64)
    %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc64)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc64)
    %16 = cir.const #cir.int<45> : !s32i loc(#loc64)
    %17 = cir.shift(left, %15 : !u64i, %16 : !s32i) -> !u64i loc(#loc64)
    %18 = cir.binop(xor, %13, %17) : !u64i loc(#loc64)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc64)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc64)
    %22 = cir.shift(left, %20 : !u64i, %21 : !s32i) -> !u64i loc(#loc64)
    %23 = cir.binop(xor, %18, %22) : !u64i loc(#loc64)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc64)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc64)
    %27 = cir.shift(left, %25 : !u64i, %26 : !s32i) -> !u64i loc(#loc64)
    %28 = cir.binop(xor, %23, %27) : !u64i loc(#loc64)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc64)
    %31 = cir.binop(xor, %28, %30) : !u64i loc(#loc64)
    cir.br ^bb5(%31 : !u64i) loc(#loc64)
  ^bb4:  // pred: ^bb2
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc64)
    %34 = cir.const #cir.int<60> : !s32i loc(#loc64)
    %35 = cir.shift(left, %33 : !u64i, %34 : !s32i) -> !u64i loc(#loc64)
    %36 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc64)
    %38 = cir.const #cir.int<45> : !s32i loc(#loc64)
    %39 = cir.shift(left, %37 : !u64i, %38 : !s32i) -> !u64i loc(#loc64)
    %40 = cir.binop(xor, %35, %39) : !u64i loc(#loc64)
    %41 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc64)
    %43 = cir.const #cir.int<30> : !s32i loc(#loc64)
    %44 = cir.shift(left, %42 : !u64i, %43 : !s32i) -> !u64i loc(#loc64)
    %45 = cir.binop(xor, %40, %44) : !u64i loc(#loc64)
    %46 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc64)
    %48 = cir.const #cir.int<15> : !s32i loc(#loc64)
    %49 = cir.shift(left, %47 : !u64i, %48 : !s32i) -> !u64i loc(#loc64)
    %50 = cir.binop(xor, %45, %49) : !u64i loc(#loc64)
    %51 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %52 = cir.cast(integral, %51 : !s32i), !u64i loc(#loc64)
    %53 = cir.binop(xor, %50, %52) : !u64i loc(#loc64)
    %54 = cir.unary(minus, %53) : !u64i, !u64i loc(#loc64)
    %55 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %56 = cir.cast(integral, %55 : !s32i), !u64i loc(#loc64)
    %57 = cir.binop(sub, %54, %56) : !u64i loc(#loc64)
    cir.br ^bb5(%57 : !u64i) loc(#loc64)
  ^bb5(%58: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":67:25)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc64)
  ^bb6:  // pred: ^bb5
    %59 = cir.cast(integral, %58 : !u64i), !s64i loc(#loc64)
    cir.store %59, %1 : !s64i, !cir.ptr<!s64i> loc(#loc226)
    cir.br ^bb7 loc(#loc60)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc60)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc227)
  ^bb9:  // pred: ^bb8
    %60 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc228)
    %61 = cir.call %60() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc68)
    %62 = cir.cast(int_to_bool, %61 : !s32i), !cir.bool loc(#loc68)
    cir.brcond %62 ^bb10, ^bb11 loc(#loc229)
  ^bb10:  // pred: ^bb9
    %63 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc49)
    %64 = cir.cast(array_to_ptrdecay, %63 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%64) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    cir.br ^bb21 loc(#loc71)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc230)
  ^bb12:  // pred: ^bb11
    %65 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc76)
    %66 = cir.const #cir.int<0> : !s32i loc(#loc77)
    %67 = cir.cast(integral, %66 : !s32i), !s64i loc(#loc77)
    %68 = cir.cmp(gt, %65, %67) : !s64i, !cir.bool loc(#loc231)
    cir.brcond %68 ^bb13, ^bb19 loc(#loc232)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc233)
  ^bb14:  // pred: ^bb13
    %69 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc81)
    %70 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc82)
    %71 = cir.const #cir.int<2> : !s32i loc(#loc83)
    %72 = cir.cast(integral, %71 : !s32i), !s64i loc(#loc83)
    %73 = cir.binop(div, %70, %72) : !s64i loc(#loc234)
    %74 = cir.cmp(lt, %69, %73) : !s64i, !cir.bool loc(#loc235)
    cir.brcond %74 ^bb15, ^bb16 loc(#loc236)
  ^bb15:  // pred: ^bb14
    %75 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc88)
    %76 = cir.const #cir.int<2> : !s32i loc(#loc54)
    %77 = cir.cast(integral, %76 : !s32i), !s64i loc(#loc54)
    %78 = cir.binop(mul, %75, %77) nsw : !s64i loc(#loc88)
    cir.store %78, %0 : !s64i, !cir.ptr<!s64i> loc(#loc220)
    %79 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc89)
    cir.call @printLongLongLine(%79) : (!s64i) -> () loc(#loc90)
    cir.br ^bb17 loc(#loc86)
  ^bb16:  // pred: ^bb14
    %80 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc50)
    %81 = cir.cast(array_to_ptrdecay, %80 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%81) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    cir.br ^bb17 loc(#loc80)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc80)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc75)
  ^bb19:  // 2 preds: ^bb12, ^bb18
    cir.br ^bb20 loc(#loc75)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc67)
  ^bb21:  // 2 preds: ^bb10, ^bb20
    cir.br ^bb22 loc(#loc67)
  ^bb22:  // pred: ^bb21
    cir.return loc(#loc52)
  } loc(#loc219)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc93)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc94)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc238)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc238)
    cir.return %2 : !s32i loc(#loc238)
  } loc(#loc237)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc240)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc241)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc102)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc242)
    cir.br ^bb1 loc(#loc243)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc244)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc106)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc106)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc245)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc109)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc109)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc109)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc109)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc109)
    %12 = cir.const #cir.int<60> : !s32i loc(#loc109)
    %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc109)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc109)
    %16 = cir.const #cir.int<45> : !s32i loc(#loc109)
    %17 = cir.shift(left, %15 : !u64i, %16 : !s32i) -> !u64i loc(#loc109)
    %18 = cir.binop(xor, %13, %17) : !u64i loc(#loc109)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
    %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc109)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc109)
    %22 = cir.shift(left, %20 : !u64i, %21 : !s32i) -> !u64i loc(#loc109)
    %23 = cir.binop(xor, %18, %22) : !u64i loc(#loc109)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc109)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc109)
    %27 = cir.shift(left, %25 : !u64i, %26 : !s32i) -> !u64i loc(#loc109)
    %28 = cir.binop(xor, %23, %27) : !u64i loc(#loc109)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
    %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc109)
    %31 = cir.binop(xor, %28, %30) : !u64i loc(#loc109)
    cir.br ^bb5(%31 : !u64i) loc(#loc109)
  ^bb4:  // pred: ^bb2
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
    %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc109)
    %34 = cir.const #cir.int<60> : !s32i loc(#loc109)
    %35 = cir.shift(left, %33 : !u64i, %34 : !s32i) -> !u64i loc(#loc109)
    %36 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
    %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc109)
    %38 = cir.const #cir.int<45> : !s32i loc(#loc109)
    %39 = cir.shift(left, %37 : !u64i, %38 : !s32i) -> !u64i loc(#loc109)
    %40 = cir.binop(xor, %35, %39) : !u64i loc(#loc109)
    %41 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
    %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc109)
    %43 = cir.const #cir.int<30> : !s32i loc(#loc109)
    %44 = cir.shift(left, %42 : !u64i, %43 : !s32i) -> !u64i loc(#loc109)
    %45 = cir.binop(xor, %40, %44) : !u64i loc(#loc109)
    %46 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
    %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc109)
    %48 = cir.const #cir.int<15> : !s32i loc(#loc109)
    %49 = cir.shift(left, %47 : !u64i, %48 : !s32i) -> !u64i loc(#loc109)
    %50 = cir.binop(xor, %45, %49) : !u64i loc(#loc109)
    %51 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
    %52 = cir.cast(integral, %51 : !s32i), !u64i loc(#loc109)
    %53 = cir.binop(xor, %50, %52) : !u64i loc(#loc109)
    %54 = cir.unary(minus, %53) : !u64i, !u64i loc(#loc109)
    %55 = cir.const #cir.int<1> : !s32i loc(#loc109)
    %56 = cir.cast(integral, %55 : !s32i), !u64i loc(#loc109)
    %57 = cir.binop(sub, %54, %56) : !u64i loc(#loc109)
    cir.br ^bb5(%57 : !u64i) loc(#loc109)
  ^bb5(%58: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":100:25)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc109)
  ^bb6:  // pred: ^bb5
    %59 = cir.cast(integral, %58 : !u64i), !s64i loc(#loc109)
    cir.store %59, %1 : !s64i, !cir.ptr<!s64i> loc(#loc246)
    cir.br ^bb7 loc(#loc105)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc105)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc247)
  ^bb9:  // pred: ^bb8
    %60 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc248)
    %61 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc113)
    %62 = cir.cast(int_to_bool, %61 : !s32i), !cir.bool loc(#loc113)
    cir.brcond %62 ^bb10, ^bb20 loc(#loc249)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc250)
  ^bb11:  // pred: ^bb10
    %63 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc118)
    %64 = cir.const #cir.int<0> : !s32i loc(#loc119)
    %65 = cir.cast(integral, %64 : !s32i), !s64i loc(#loc119)
    %66 = cir.cmp(gt, %63, %65) : !s64i, !cir.bool loc(#loc251)
    cir.brcond %66 ^bb12, ^bb18 loc(#loc252)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc253)
  ^bb13:  // pred: ^bb12
    %67 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc123)
    %68 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc124)
    %69 = cir.const #cir.int<2> : !s32i loc(#loc125)
    %70 = cir.cast(integral, %69 : !s32i), !s64i loc(#loc125)
    %71 = cir.binop(div, %68, %70) : !s64i loc(#loc254)
    %72 = cir.cmp(lt, %67, %71) : !s64i, !cir.bool loc(#loc255)
    cir.brcond %72 ^bb14, ^bb15 loc(#loc256)
  ^bb14:  // pred: ^bb13
    %73 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc130)
    %74 = cir.const #cir.int<2> : !s32i loc(#loc99)
    %75 = cir.cast(integral, %74 : !s32i), !s64i loc(#loc99)
    %76 = cir.binop(mul, %73, %75) nsw : !s64i loc(#loc130)
    cir.store %76, %0 : !s64i, !cir.ptr<!s64i> loc(#loc240)
    %77 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc131)
    cir.call @printLongLongLine(%77) : (!s64i) -> () loc(#loc132)
    cir.br ^bb16 loc(#loc128)
  ^bb15:  // pred: ^bb13
    %78 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc133)
    %79 = cir.cast(array_to_ptrdecay, %78 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc133)
    cir.call @printLine(%79) : (!cir.ptr<!s8i>) -> () loc(#loc134)
    cir.br ^bb16 loc(#loc122)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc122)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc117)
  ^bb18:  // 2 preds: ^bb11, ^bb17
    cir.br ^bb19 loc(#loc117)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc112)
  ^bb20:  // 2 preds: ^bb9, ^bb19
    cir.br ^bb21 loc(#loc112)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc97)
  } loc(#loc239)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc258)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc259)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc141)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc260)
    cir.br ^bb1 loc(#loc261)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc262)
    %4 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc145)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc145)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc263)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc150)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc150)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc151)
    cir.br ^bb4 loc(#loc148)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc152)
    %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc152)
    cir.store %9, %1 : !s64i, !cir.ptr<!s64i> loc(#loc264)
    cir.br ^bb4 loc(#loc144)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc144)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc265)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc266)
    %11 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc156)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc156)
    cir.brcond %12 ^bb7, ^bb12 loc(#loc267)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc268)
  ^bb8:  // pred: ^bb7
    %13 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc161)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc162)
    %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc162)
    %16 = cir.cmp(gt, %13, %15) : !s64i, !cir.bool loc(#loc269)
    cir.brcond %16 ^bb9, ^bb10 loc(#loc270)
  ^bb9:  // pred: ^bb8
    %17 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc164)
    %18 = cir.const #cir.int<2> : !s32i loc(#loc138)
    %19 = cir.cast(integral, %18 : !s32i), !s64i loc(#loc138)
    %20 = cir.binop(mul, %17, %19) nsw : !s64i loc(#loc164)
    cir.store %20, %0 : !s64i, !cir.ptr<!s64i> loc(#loc258)
    %21 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc165)
    cir.call @printLongLongLine(%21) : (!s64i) -> () loc(#loc166)
    cir.br ^bb10 loc(#loc160)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc160)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc155)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc155)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc136)
  } loc(#loc257)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc272)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc273)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc173)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc274)
    cir.br ^bb1 loc(#loc275)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc276)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc177)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc177)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc277)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2> : !s32i loc(#loc180)
    %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc180)
    cir.store %7, %1 : !s64i, !cir.ptr<!s64i> loc(#loc278)
    cir.br ^bb3 loc(#loc176)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc176)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc279)
  ^bb5:  // pred: ^bb4
    %8 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc280)
    %9 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc184)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc184)
    cir.brcond %10 ^bb6, ^bb11 loc(#loc281)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc282)
  ^bb7:  // pred: ^bb6
    %11 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc189)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc190)
    %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc190)
    %14 = cir.cmp(gt, %11, %13) : !s64i, !cir.bool loc(#loc283)
    cir.brcond %14 ^bb8, ^bb9 loc(#loc284)
  ^bb8:  // pred: ^bb7
    %15 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc192)
    %16 = cir.const #cir.int<2> : !s32i loc(#loc170)
    %17 = cir.cast(integral, %16 : !s32i), !s64i loc(#loc170)
    %18 = cir.binop(mul, %15, %17) nsw : !s64i loc(#loc192)
    cir.store %18, %0 : !s64i, !cir.ptr<!s64i> loc(#loc272)
    %19 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc193)
    cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc194)
    cir.br ^bb9 loc(#loc188)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc188)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc183)
  ^bb11:  // 2 preds: ^bb5, ^bb10
    cir.br ^bb12 loc(#loc183)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc168)
  } loc(#loc271)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":35:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":53:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":49:13)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":49:37)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":37:5)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":37:13)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":38:12)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":38:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":39:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":43:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":39:8)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":39:26)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":40:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":42:9)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":44:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":52:5)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":44:8)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":44:26)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":45:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":46:9)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":51:9)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":46:12)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":46:19)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":47:9)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":49:30)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":50:31)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":50:13)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":167:1)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":173:1)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":169:5)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":169:14)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":170:5)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":170:14)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":171:5)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":171:14)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":172:5)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":172:14)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":23:1)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":26:1)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":25:12)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":25:5)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":72:19)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":86:27)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":60:1)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":90:1)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":81:17)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":81:41)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":62:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":62:13)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":63:12)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":63:5)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":64:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":68:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":64:8)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":64:26)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":65:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":67:9)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":69:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":89:5)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":69:8)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":69:27)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":70:5)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":73:5)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":75:5)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":72:9)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":76:9)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":88:9)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":76:12)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":76:19)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":77:9)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":79:13)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":87:13)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":79:17)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":79:25)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":79:35)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":79:36)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":80:13)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":83:13)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":85:13)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":81:34)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":82:35)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":82:17)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":86:17)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":28:1)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":31:1)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":30:12)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":30:5)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":93:1)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":118:1)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":109:17)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":109:41)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":95:5)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":95:13)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":96:12)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":96:5)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":97:5)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":101:5)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":97:8)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":97:26)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":98:5)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":100:9)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":102:5)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":117:5)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":102:8)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":102:26)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":103:5)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":104:9)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":116:9)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":104:12)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":104:19)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":105:9)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":107:13)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":115:13)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":107:17)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":107:25)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":107:35)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":107:36)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":108:13)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":111:13)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":113:13)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":109:34)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":110:35)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":110:17)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":114:27)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":114:17)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":121:1)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":144:1)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":140:13)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":140:37)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":123:5)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":123:13)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":124:12)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":124:5)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":125:5)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":134:5)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":125:8)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":125:27)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":126:5)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":129:5)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":131:5)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":128:19)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":128:9)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":133:16)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":133:9)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":135:5)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":143:5)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":135:8)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":135:26)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":136:5)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":137:9)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":142:9)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":137:12)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":137:19)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":138:9)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":140:30)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":141:31)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":141:13)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":147:1)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":165:1)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":161:13)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":161:37)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":149:5)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":149:13)
#loc173 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":150:12)
#loc174 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":150:5)
#loc175 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":151:5)
#loc176 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":155:5)
#loc177 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":151:8)
#loc178 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":151:26)
#loc179 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":152:5)
#loc180 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":154:16)
#loc181 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":154:9)
#loc182 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":156:5)
#loc183 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":164:5)
#loc184 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":156:8)
#loc185 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":156:26)
#loc186 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":157:5)
#loc187 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":158:9)
#loc188 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":163:9)
#loc189 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":158:12)
#loc190 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":158:19)
#loc191 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":159:9)
#loc192 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":161:30)
#loc193 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":162:31)
#loc194 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_08.c":162:13)
#loc195 = loc(fused[#loc1, #loc2])
#loc196 = loc(fused[#loc3, #loc4])
#loc197 = loc(fused[#loc5, #loc6])
#loc198 = loc(fused[#loc7, #loc8])
#loc199 = loc(fused[#loc9, #loc10])
#loc200 = loc(fused[#loc12, #loc11])
#loc201 = loc(fused[#loc13, #loc14])
#loc202 = loc(fused[#loc15, #loc16])
#loc203 = loc(fused[#loc17, #loc14])
#loc204 = loc(fused[#loc19, #loc18])
#loc205 = loc(fused[#loc20, #loc21])
#loc206 = loc(fused[#loc22, #loc23])
#loc207 = loc(fused[#loc24, #loc21])
#loc208 = loc(fused[#loc25, #loc26])
#loc209 = loc(fused[#loc27, #loc28])
#loc210 = loc(fused[#loc29, #loc26])
#loc211 = loc(fused[#loc33, #loc34])
#loc212 = loc(fused[#loc35, #loc36])
#loc213 = loc(fused[#loc37, #loc38])
#loc214 = loc(fused[#loc39, #loc40])
#loc215 = loc(fused[#loc41, #loc42])
#loc216 = loc(fused[#loc43, #loc44])
#loc217 = loc(fused[#loc46, #loc45])
#loc218 = loc(fused[#loc47, #loc48])
#loc219 = loc(fused[#loc51, #loc52])
#loc220 = loc(fused[#loc53, #loc54])
#loc221 = loc(fused[#loc55, #loc56])
#loc222 = loc(fused[#loc58, #loc57])
#loc223 = loc(fused[#loc59, #loc60])
#loc224 = loc(fused[#loc61, #loc62])
#loc225 = loc(fused[#loc63, #loc60])
#loc226 = loc(fused[#loc65, #loc64])
#loc227 = loc(fused[#loc66, #loc67])
#loc228 = loc(fused[#loc68, #loc69])
#loc229 = loc(fused[#loc70, #loc71, #loc72, #loc67])
#loc230 = loc(fused[#loc74, #loc75])
#loc231 = loc(fused[#loc76, #loc77])
#loc232 = loc(fused[#loc78, #loc75])
#loc233 = loc(fused[#loc79, #loc80])
#loc234 = loc(fused[#loc82, #loc83])
#loc235 = loc(fused[#loc81, #loc84])
#loc236 = loc(fused[#loc85, #loc86, #loc87, #loc80])
#loc237 = loc(fused[#loc92, #loc93])
#loc238 = loc(fused[#loc95, #loc94])
#loc239 = loc(fused[#loc96, #loc97])
#loc240 = loc(fused[#loc98, #loc99])
#loc241 = loc(fused[#loc100, #loc101])
#loc242 = loc(fused[#loc103, #loc102])
#loc243 = loc(fused[#loc104, #loc105])
#loc244 = loc(fused[#loc106, #loc107])
#loc245 = loc(fused[#loc108, #loc105])
#loc246 = loc(fused[#loc110, #loc109])
#loc247 = loc(fused[#loc111, #loc112])
#loc248 = loc(fused[#loc113, #loc114])
#loc249 = loc(fused[#loc115, #loc112])
#loc250 = loc(fused[#loc116, #loc117])
#loc251 = loc(fused[#loc118, #loc119])
#loc252 = loc(fused[#loc120, #loc117])
#loc253 = loc(fused[#loc121, #loc122])
#loc254 = loc(fused[#loc124, #loc125])
#loc255 = loc(fused[#loc123, #loc126])
#loc256 = loc(fused[#loc127, #loc128, #loc129, #loc122])
#loc257 = loc(fused[#loc135, #loc136])
#loc258 = loc(fused[#loc137, #loc138])
#loc259 = loc(fused[#loc139, #loc140])
#loc260 = loc(fused[#loc142, #loc141])
#loc261 = loc(fused[#loc143, #loc144])
#loc262 = loc(fused[#loc145, #loc146])
#loc263 = loc(fused[#loc147, #loc148, #loc149, #loc144])
#loc264 = loc(fused[#loc153, #loc152])
#loc265 = loc(fused[#loc154, #loc155])
#loc266 = loc(fused[#loc156, #loc157])
#loc267 = loc(fused[#loc158, #loc155])
#loc268 = loc(fused[#loc159, #loc160])
#loc269 = loc(fused[#loc161, #loc162])
#loc270 = loc(fused[#loc163, #loc160])
#loc271 = loc(fused[#loc167, #loc168])
#loc272 = loc(fused[#loc169, #loc170])
#loc273 = loc(fused[#loc171, #loc172])
#loc274 = loc(fused[#loc174, #loc173])
#loc275 = loc(fused[#loc175, #loc176])
#loc276 = loc(fused[#loc177, #loc178])
#loc277 = loc(fused[#loc179, #loc176])
#loc278 = loc(fused[#loc181, #loc180])
#loc279 = loc(fused[#loc182, #loc183])
#loc280 = loc(fused[#loc184, #loc185])
#loc281 = loc(fused[#loc186, #loc183])
#loc282 = loc(fused[#loc187, #loc188])
#loc283 = loc(fused[#loc189, #loc190])
#loc284 = loc(fused[#loc191, #loc188])
