!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  external @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_badData : !s32i {alignment = 4 : i64} loc(#loc223)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc224)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc225)
  cir.func private  @printIntLine(!s32i) loc(#loc226)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc227)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc11)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc228)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b_badSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc230)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_badData : !cir.ptr<!s32i> loc(#loc223)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc230)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc232)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc233)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc24)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc25)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc25)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc234)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc235)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc236)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc233)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc30)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc31)
        %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !s32i loc(#loc238)
        %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc32)
        cir.if %19 {
          %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc34)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc35)
          %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc36)
          cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc34)
        } loc(#loc239)
      } loc(#loc237)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc39)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc241)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc41)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc42)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !s32i loc(#loc242)
          %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc43)
          cir.condition(%19) loc(#loc43)
        } body {
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc45)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc46)
            %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc47)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc48)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc244)
          } loc(#loc243)
          cir.yield loc(#loc38)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc49)
          %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc50)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc245)
          cir.yield loc(#loc240)
        } loc(#loc240)
      } loc(#loc240)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc53)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc54)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !s32i loc(#loc247)
        %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc55)
        cir.if %18 {
          %19 = cir.const #cir.int<1> : !s32i loc(#loc59)
          %20 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
          %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
          %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc62)
          cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc249)
          cir.scope {
            %23 = cir.const #cir.int<0> : !s32i loc(#loc65)
            cir.store %23, %3 : !s32i, !cir.ptr<!s32i> loc(#loc251)
            cir.for : cond {
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc67)
              %25 = cir.const #cir.int<10> : !s32i loc(#loc68)
              %26 = cir.cmp(lt, %24, %25) : !s32i, !s32i loc(#loc252)
              %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc69)
              cir.condition(%27) loc(#loc69)
            } body {
              cir.scope {
                %24 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc71)
                %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc72)
                %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc73)
                %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc71)
                cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc74)
              } loc(#loc253)
              cir.yield loc(#loc64)
            } step {
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc75)
              %25 = cir.unary(inc, %24) : !s32i, !s32i loc(#loc76)
              cir.store %25, %3 : !s32i, !cir.ptr<!s32i> loc(#loc254)
              cir.yield loc(#loc250)
            } loc(#loc250)
          } loc(#loc250)
        } else {
          %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc11)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc11)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc77)
        } loc(#loc248)
      } loc(#loc246)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc78)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc79)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc79)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc78)
    } loc(#loc231)
    cir.return loc(#loc15)
  } loc(#loc229)
  cir.global "private"  external @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_goodG2BData : !s32i {alignment = 4 : i64} loc(#loc255)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b_goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc257)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_goodG2BData : !cir.ptr<!s32i> loc(#loc255)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc257)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc259)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc260)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc92)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc93)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc93)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc261)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc262)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc92)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc263)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc260)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc98)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc99)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc99)
        %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !s32i loc(#loc265)
        %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc100)
        cir.if %19 {
          %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc102)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc103)
          %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc104)
          cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc102)
        } loc(#loc266)
      } loc(#loc264)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc107)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc268)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc109)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc110)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !s32i loc(#loc269)
          %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc111)
          cir.condition(%19) loc(#loc111)
        } body {
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc113)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc114)
            %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc115)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc116)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc271)
          } loc(#loc270)
          cir.yield loc(#loc106)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc117)
          %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc118)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc272)
          cir.yield loc(#loc267)
        } loc(#loc267)
      } loc(#loc267)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc121)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc122)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !s32i loc(#loc274)
        %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc123)
        cir.if %18 {
          %19 = cir.const #cir.int<1> : !s32i loc(#loc127)
          %20 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc128)
          %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
          %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc130)
          cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc276)
          cir.scope {
            %23 = cir.const #cir.int<0> : !s32i loc(#loc133)
            cir.store %23, %3 : !s32i, !cir.ptr<!s32i> loc(#loc278)
            cir.for : cond {
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc135)
              %25 = cir.const #cir.int<10> : !s32i loc(#loc136)
              %26 = cir.cmp(lt, %24, %25) : !s32i, !s32i loc(#loc279)
              %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc137)
              cir.condition(%27) loc(#loc137)
            } body {
              cir.scope {
                %24 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc139)
                %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc140)
                %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc141)
                %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc139)
                cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc142)
              } loc(#loc280)
              cir.yield loc(#loc132)
            } step {
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc143)
              %25 = cir.unary(inc, %24) : !s32i, !s32i loc(#loc144)
              cir.store %25, %3 : !s32i, !cir.ptr<!s32i> loc(#loc281)
              cir.yield loc(#loc277)
            } loc(#loc277)
          } loc(#loc277)
        } else {
          %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc145)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc145)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc146)
        } loc(#loc275)
      } loc(#loc273)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc147)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc148)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc148)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc147)
    } loc(#loc258)
    cir.return loc(#loc83)
  } loc(#loc256)
  cir.global "private"  external @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_goodB2GData : !s32i {alignment = 4 : i64} loc(#loc282)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc151)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b_goodB2GSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc284)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68_goodB2GData : !cir.ptr<!s32i> loc(#loc282)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc155)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc284)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc286)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc287)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc162)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc163)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc163)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc288)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc289)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc162)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc290)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc287)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc168)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc169)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc169)
        %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !s32i loc(#loc292)
        %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc170)
        cir.if %19 {
          %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc172)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc173)
          %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc174)
          cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc172)
        } loc(#loc293)
      } loc(#loc291)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc177)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc295)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc179)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc180)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !s32i loc(#loc296)
          %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc181)
          cir.condition(%19) loc(#loc181)
        } body {
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc183)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc184)
            %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc185)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc186)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc298)
          } loc(#loc297)
          cir.yield loc(#loc176)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc187)
          %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc188)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc299)
          cir.yield loc(#loc294)
        } loc(#loc294)
      } loc(#loc294)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc191)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc192)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !s32i loc(#loc301)
        %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc193)
        %19 = cir.ternary(%18, true {
          %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc195)
          %21 = cir.const #cir.int<10> : !s32i loc(#loc196)
          %22 = cir.cmp(lt, %20, %21) : !s32i, !s32i loc(#loc302)
          %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc198)
          %24 = cir.ternary(%23, true {
            %25 = cir.const #true loc(#loc194)
            cir.yield %25 : !cir.bool loc(#loc194)
          }, false {
            %25 = cir.const #false loc(#loc194)
            cir.yield %25 : !cir.bool loc(#loc194)
          }) : (!cir.bool) -> !cir.bool loc(#loc194)
          cir.yield %24 : !cir.bool loc(#loc194)
        }, false {
          %20 = cir.const #false loc(#loc194)
          cir.yield %20 : !cir.bool loc(#loc194)
        }) : (!cir.bool) -> !cir.bool loc(#loc194)
        cir.if %19 {
          %20 = cir.const #cir.int<1> : !s32i loc(#loc202)
          %21 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc203)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc204)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc205)
          cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc304)
          cir.scope {
            %24 = cir.const #cir.int<0> : !s32i loc(#loc208)
            cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc306)
            cir.for : cond {
              %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc210)
              %26 = cir.const #cir.int<10> : !s32i loc(#loc211)
              %27 = cir.cmp(lt, %25, %26) : !s32i, !s32i loc(#loc307)
              %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc212)
              cir.condition(%28) loc(#loc212)
            } body {
              cir.scope {
                %25 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc214)
                %26 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc215)
                %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc216)
                %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc214)
                cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc217)
              } loc(#loc308)
              cir.yield loc(#loc207)
            } step {
              %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc218)
              %26 = cir.unary(inc, %25) : !s32i, !s32i loc(#loc219)
              cir.store %26, %3 : !s32i, !cir.ptr<!s32i> loc(#loc309)
              cir.yield loc(#loc305)
            } loc(#loc305)
          } loc(#loc305)
        } else {
          %20 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc151)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc151)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc220)
        } loc(#loc303)
      } loc(#loc300)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc221)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc222)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc222)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc221)
    } loc(#loc285)
    cir.return loc(#loc153)
  } loc(#loc283)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":42:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":42:12)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":73:23)
#loc12 = loc("/usr/include/stdlib.h":687:1)
#loc13 = loc("/usr/include/stdlib.h":687:32)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":48:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":77:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":50:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":50:16)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":51:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":76:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":52:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":52:13)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":53:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":53:54)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":53:31)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":53:38)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":53:43)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":53:53)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":54:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":54:39)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":54:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":54:23)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":54:20)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":54:29)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":54:30)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":54:36)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":54:35)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":56:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":59:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":56:18)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":56:14)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":56:21)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":56:25)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":56:23)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":57:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":58:25)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":58:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":58:20)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":58:21)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":56:30)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":56:29)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":62:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":74:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":62:13)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":62:21)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":62:18)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":63:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":70:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":72:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":64:28)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":64:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":64:20)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":64:24)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":66:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":69:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":66:21)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":66:17)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":66:24)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":66:28)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":66:26)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":67:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":68:30)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":68:37)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":68:38)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":68:17)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":66:33)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":66:32)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":73:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":75:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":75:14)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":43:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":43:12)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":84:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":113:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":86:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":86:16)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":87:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":112:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":88:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":88:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":89:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":89:54)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":89:31)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":89:38)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":89:43)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":89:53)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":90:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":90:39)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":90:13)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":90:23)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":90:20)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":90:29)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":90:30)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":90:36)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":90:35)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":92:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":95:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":92:18)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":92:14)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":92:21)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":92:25)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":92:23)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":93:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":94:25)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":94:13)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":94:20)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":94:21)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":92:30)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":92:29)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":98:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":110:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":98:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":98:21)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":98:18)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":99:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":106:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":108:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":100:28)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":100:13)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":100:20)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":100:24)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":102:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":105:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":102:21)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":102:17)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":102:24)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":102:28)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":102:26)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":103:13)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":104:30)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":104:37)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":104:38)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":104:17)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":102:33)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":102:32)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":109:23)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":109:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":111:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":111:14)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":44:1)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":44:12)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":140:23)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":116:1)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":144:1)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":118:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":118:16)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":119:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":143:5)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":120:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":120:13)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":121:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":121:54)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":121:31)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":121:38)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":121:43)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":121:53)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":122:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":122:39)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":122:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":122:23)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":122:20)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":122:29)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":122:30)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":122:36)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":122:35)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":124:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":127:9)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":124:18)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":124:14)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":124:21)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":124:25)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":124:23)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":125:9)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":126:25)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":126:13)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":126:20)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":126:21)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":124:30)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":124:29)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":129:9)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":141:9)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":129:13)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":129:21)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":129:18)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":129:23)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":129:26)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":129:34)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":129:36)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":129:31)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":130:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":137:9)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":139:9)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":131:28)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":131:13)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":131:20)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":131:24)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":133:13)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":136:13)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":133:21)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":133:17)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":133:24)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":133:28)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":133:26)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":134:13)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":135:30)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":135:37)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":135:38)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":135:17)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":133:33)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":133:32)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":140:13)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":142:9)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c":142:14)
#loc223 = loc(fused[#loc1, #loc2])
#loc224 = loc(fused[#loc3, #loc4])
#loc225 = loc(fused[#loc5, #loc6])
#loc226 = loc(fused[#loc7, #loc8])
#loc227 = loc(fused[#loc9, #loc10])
#loc228 = loc(fused[#loc12, #loc13])
#loc229 = loc(fused[#loc14, #loc15])
#loc230 = loc(fused[#loc16, #loc17])
#loc231 = loc(fused[#loc18, #loc19])
#loc232 = loc(fused[#loc20, #loc21])
#loc233 = loc(fused[#loc22, #loc23])
#loc234 = loc(fused[#loc26, #loc27])
#loc235 = loc(fused[#loc25, #loc27])
#loc236 = loc(fused[#loc24, #loc23])
#loc237 = loc(fused[#loc28, #loc29])
#loc238 = loc(fused[#loc30, #loc31])
#loc239 = loc(fused[#loc33, #loc29])
#loc240 = loc(fused[#loc37, #loc38])
#loc241 = loc(fused[#loc40, #loc39])
#loc242 = loc(fused[#loc41, #loc42])
#loc243 = loc(fused[#loc44, #loc38])
#loc244 = loc(fused[#loc46, #loc45])
#loc245 = loc(fused[#loc50, #loc49])
#loc246 = loc(fused[#loc51, #loc52])
#loc247 = loc(fused[#loc53, #loc54])
#loc248 = loc(fused[#loc56, #loc57, #loc58, #loc52])
#loc249 = loc(fused[#loc60, #loc59])
#loc250 = loc(fused[#loc63, #loc64])
#loc251 = loc(fused[#loc66, #loc65])
#loc252 = loc(fused[#loc67, #loc68])
#loc253 = loc(fused[#loc70, #loc64])
#loc254 = loc(fused[#loc76, #loc75])
#loc255 = loc(fused[#loc80, #loc81])
#loc256 = loc(fused[#loc82, #loc83])
#loc257 = loc(fused[#loc84, #loc85])
#loc258 = loc(fused[#loc86, #loc87])
#loc259 = loc(fused[#loc88, #loc89])
#loc260 = loc(fused[#loc90, #loc91])
#loc261 = loc(fused[#loc94, #loc95])
#loc262 = loc(fused[#loc93, #loc95])
#loc263 = loc(fused[#loc92, #loc91])
#loc264 = loc(fused[#loc96, #loc97])
#loc265 = loc(fused[#loc98, #loc99])
#loc266 = loc(fused[#loc101, #loc97])
#loc267 = loc(fused[#loc105, #loc106])
#loc268 = loc(fused[#loc108, #loc107])
#loc269 = loc(fused[#loc109, #loc110])
#loc270 = loc(fused[#loc112, #loc106])
#loc271 = loc(fused[#loc114, #loc113])
#loc272 = loc(fused[#loc118, #loc117])
#loc273 = loc(fused[#loc119, #loc120])
#loc274 = loc(fused[#loc121, #loc122])
#loc275 = loc(fused[#loc124, #loc125, #loc126, #loc120])
#loc276 = loc(fused[#loc128, #loc127])
#loc277 = loc(fused[#loc131, #loc132])
#loc278 = loc(fused[#loc134, #loc133])
#loc279 = loc(fused[#loc135, #loc136])
#loc280 = loc(fused[#loc138, #loc132])
#loc281 = loc(fused[#loc144, #loc143])
#loc282 = loc(fused[#loc149, #loc150])
#loc283 = loc(fused[#loc152, #loc153])
#loc284 = loc(fused[#loc154, #loc155])
#loc285 = loc(fused[#loc156, #loc157])
#loc286 = loc(fused[#loc158, #loc159])
#loc287 = loc(fused[#loc160, #loc161])
#loc288 = loc(fused[#loc164, #loc165])
#loc289 = loc(fused[#loc163, #loc165])
#loc290 = loc(fused[#loc162, #loc161])
#loc291 = loc(fused[#loc166, #loc167])
#loc292 = loc(fused[#loc168, #loc169])
#loc293 = loc(fused[#loc171, #loc167])
#loc294 = loc(fused[#loc175, #loc176])
#loc295 = loc(fused[#loc178, #loc177])
#loc296 = loc(fused[#loc179, #loc180])
#loc297 = loc(fused[#loc182, #loc176])
#loc298 = loc(fused[#loc184, #loc183])
#loc299 = loc(fused[#loc188, #loc187])
#loc300 = loc(fused[#loc189, #loc190])
#loc301 = loc(fused[#loc191, #loc192])
#loc302 = loc(fused[#loc195, #loc197])
#loc303 = loc(fused[#loc199, #loc200, #loc201, #loc190])
#loc304 = loc(fused[#loc203, #loc202])
#loc305 = loc(fused[#loc206, #loc207])
#loc306 = loc(fused[#loc209, #loc208])
#loc307 = loc(fused[#loc210, #loc211])
#loc308 = loc(fused[#loc213, #loc207])
#loc309 = loc(fused[#loc219, #loc218])
