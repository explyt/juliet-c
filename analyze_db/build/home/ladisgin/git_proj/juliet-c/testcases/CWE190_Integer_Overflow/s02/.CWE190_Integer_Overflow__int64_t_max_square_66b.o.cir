!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":25:62)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":25:80)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":41:66)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":41:84)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":52:66)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":52:84)
#loc68 = loc(fused[#loc5, #loc6])
#loc73 = loc(fused[#loc21, #loc22])
#loc80 = loc(fused[#loc43, #loc44])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_66b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printLongLongLine(!s64i) loc(#loc66)
  cir.func @CWE190_Integer_Overflow__int64_t_max_square_66b_badSink(%arg0: !cir.ptr<!s64i> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc69)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc68)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc70)
    cir.store %arg0, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc11)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc12)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc13)
    %5 = cir.ptr_stride(%3 : !cir.ptr<!s64i>, %4 : !s32i), !cir.ptr<!s64i> loc(#loc10)
    %6 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc12)
    cir.store %6, %2 : !s64i, !cir.ptr<!s64i> loc(#loc70)
    cir.br ^bb1 loc(#loc71)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc16)
    %8 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc8)
    %9 = cir.binop(mul, %7, %8) nsw : !s64i loc(#loc16)
    cir.store %9, %0 : !s64i, !cir.ptr<!s64i> loc(#loc69)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc17)
    cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc18)
    cir.br ^bb2 loc(#loc15)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc4)
  } loc(#loc67)
  cir.func @CWE190_Integer_Overflow__int64_t_max_square_66b_goodG2BSink(%arg0: !cir.ptr<!s64i> loc(fused[#loc21, #loc22])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc74)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc73)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc75)
    cir.store %arg0, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc27)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc28)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc29)
    %5 = cir.ptr_stride(%3 : !cir.ptr<!s64i>, %4 : !s32i), !cir.ptr<!s64i> loc(#loc26)
    %6 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc28)
    cir.store %6, %2 : !s64i, !cir.ptr<!s64i> loc(#loc75)
    cir.br ^bb1 loc(#loc76)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc32)
    %8 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc24)
    %9 = cir.binop(mul, %7, %8) nsw : !s64i loc(#loc32)
    cir.store %9, %0 : !s64i, !cir.ptr<!s64i> loc(#loc74)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc33)
    cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc34)
    cir.br ^bb2 loc(#loc31)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc20)
  } loc(#loc72)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc77)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc37)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc40)
  cir.func @CWE190_Integer_Overflow__int64_t_max_square_66b_goodB2GSink(%arg0: !cir.ptr<!s64i> loc(fused[#loc43, #loc44])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc81)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc80)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc82)
    cir.store %arg0, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc49)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc50)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc51)
    %5 = cir.ptr_stride(%3 : !cir.ptr<!s64i>, %4 : !s32i), !cir.ptr<!s64i> loc(#loc48)
    %6 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc50)
    cir.store %6, %2 : !s64i, !cir.ptr<!s64i> loc(#loc82)
    cir.br ^bb1 loc(#loc83)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc54)
    %8 = cir.call @imaxabs(%7) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc55)
    %9 = cir.cast(int_to_float, %8 : !s64i), !cir.long_double<!cir.f80> loc(#loc55)
    %10 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc56)
    %11 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc57)
    %12 = cir.cast(int_to_float, %11 : !s64i), !cir.long_double<!cir.f80> loc(#loc57)
    %13 = cir.call @sqrtl(%12) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc56)
    %14 = cir.cmp(le, %9, %13) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc84)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc85)
  ^bb2:  // pred: ^bb1
    %15 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc62)
    %16 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc46)
    %17 = cir.binop(mul, %15, %16) nsw : !s64i loc(#loc62)
    cir.store %17, %0 : !s64i, !cir.ptr<!s64i> loc(#loc81)
    %18 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc63)
    cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc64)
    cir.br ^bb4 loc(#loc60)
  ^bb3:  // pred: ^bb1
    %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc40)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    cir.br ^bb4 loc(#loc53)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc53)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc42)
  } loc(#loc79)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_66b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":25:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":34:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":31:9)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":31:33)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":28:5)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":28:31)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":26:1)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":28:20)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":28:30)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":29:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":33:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":31:26)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":32:27)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":32:9)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":41:1)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":49:1)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":46:9)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":46:33)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":43:5)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":43:31)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":42:1)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":43:20)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":43:30)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":44:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":48:5)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":46:26)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":47:27)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":47:9)
#loc35 = loc("/usr/include/inttypes.h":351:1)
#loc36 = loc("/usr/include/inttypes.h":351:74)
#loc37 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":63:19)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":52:1)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":65:1)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":58:9)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":58:33)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":54:5)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":54:31)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":53:1)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":54:20)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":54:30)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":56:5)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":64:5)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":56:27)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":56:9)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":56:36)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":56:42)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":56:51)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":57:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":60:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":62:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":58:26)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":59:27)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":59:9)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_max_square_66b.c":63:9)
#loc66 = loc(fused[#loc1, #loc2])
#loc67 = loc(fused[#loc3, #loc4])
#loc69 = loc(fused[#loc7, #loc8])
#loc70 = loc(fused[#loc9, #loc10])
#loc71 = loc(fused[#loc14, #loc15])
#loc72 = loc(fused[#loc19, #loc20])
#loc74 = loc(fused[#loc23, #loc24])
#loc75 = loc(fused[#loc25, #loc26])
#loc76 = loc(fused[#loc30, #loc31])
#loc77 = loc(fused[#loc35, #loc36])
#loc78 = loc(fused[#loc38, #loc39])
#loc79 = loc(fused[#loc41, #loc42])
#loc81 = loc(fused[#loc45, #loc46])
#loc82 = loc(fused[#loc47, #loc48])
#loc83 = loc(fused[#loc52, #loc53])
#loc84 = loc(fused[#loc55, #loc58])
#loc85 = loc(fused[#loc59, #loc60, #loc61, #loc53])
