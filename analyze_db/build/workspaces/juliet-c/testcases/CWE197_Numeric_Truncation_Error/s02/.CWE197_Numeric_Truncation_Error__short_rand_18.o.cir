!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s02/CWE197_Numeric_Truncation_Error__short_rand_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc46)
  cir.func private @printHexCharLine(!s8i) loc(#loc47)
  cir.func no_proto @CWE197_Numeric_Truncation_Error__short_rand_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc49)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc10)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc10)
    cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc50)
    cir.goto "source" loc(#loc51)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc14)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc15)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc15)
    %8 = cir.ternary(%7, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc15)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc15)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc15)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc15)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc15)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc15)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc15)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc15)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc15)
      cir.yield %22 : !u32i loc(#loc15)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc15)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc15)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc15)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc15)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc15)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc15)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc15)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc15)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc15)
      %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc15)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc15)
      %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc15)
      %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc15)
      cir.yield %26 : !u32i loc(#loc15)
    }) : (!cir.bool) -> !u32i loc(#loc15)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc15)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc15)
    cir.store %10, %0 : !s16i, !cir.ptr<!s16i> loc(#loc52)
    cir.scope {
      %11 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc54)
      %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc20)
      %13 = cir.cast(integral, %12 : !s16i), !s8i loc(#loc20)
      cir.store %13, %11 : !s8i, !cir.ptr<!s8i> loc(#loc54)
      %14 = cir.load %11 : !cir.ptr<!s8i>, !s8i loc(#loc21)
      cir.call @printHexCharLine(%14) : (!s8i) -> () loc(#loc22)
    } loc(#loc53)
    cir.return loc(#loc6)
  } loc(#loc48)
  cir.func no_proto @CWE197_Numeric_Truncation_Error__short_rand_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc56)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc25)
    cir.return loc(#loc24)
  } loc(#loc55)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc58)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc32)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc32)
    cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc59)
    cir.goto "source" loc(#loc60)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc36)
    %4 = cir.const #cir.int<127> : !s32i loc(#loc37)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc38)
    %6 = cir.binop(sub, %4, %5) nsw : !s32i loc(#loc37)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc37)
    cir.store %7, %0 : !s16i, !cir.ptr<!s16i> loc(#loc61)
    cir.scope {
      %8 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc63)
      %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc43)
      %10 = cir.cast(integral, %9 : !s16i), !s8i loc(#loc43)
      cir.store %10, %8 : !s8i, !cir.ptr<!s8i> loc(#loc63)
      %11 = cir.load %8 : !cir.ptr<!s8i>, !s8i loc(#loc44)
      cir.call @printHexCharLine(%11) : (!s8i) -> () loc(#loc45)
    } loc(#loc62)
    cir.return loc(#loc28)
  } loc(#loc57)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s02/CWE197_Numeric_Truncation_Error__short_rand_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":21:1)
#loc6 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":35:1)
#loc7 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":23:5)
#loc8 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":23:11)
#loc9 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":25:13)
#loc10 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":25:12)
#loc11 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":25:5)
#loc12 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":26:5)
#loc13 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":26:10)
#loc14 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":27:1)
#loc15 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":29:19)
#loc16 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":29:5)
#loc17 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":30:5)
#loc18 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":34:5)
#loc19 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":32:9)
#loc20 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":32:31)
#loc21 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":33:26)
#loc22 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":33:9)
#loc23 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":58:1)
#loc24 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":61:1)
#loc25 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":60:5)
#loc26 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":60:13)
#loc27 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":42:1)
#loc28 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":56:1)
#loc29 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":44:5)
#loc30 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":44:11)
#loc31 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":46:13)
#loc32 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":46:12)
#loc33 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":46:5)
#loc34 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":47:5)
#loc35 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":47:10)
#loc36 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":48:1)
#loc37 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":50:12)
#loc38 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":50:21)
#loc39 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":50:5)
#loc40 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":51:5)
#loc41 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":55:5)
#loc42 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":53:9)
#loc43 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":53:31)
#loc44 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":54:26)
#loc45 = loc("CWE197_Numeric_Truncation_Error__short_rand_18.c":54:9)
#loc46 = loc(fused[#loc1, #loc2])
#loc47 = loc(fused[#loc3, #loc4])
#loc48 = loc(fused[#loc5, #loc6])
#loc49 = loc(fused[#loc7, #loc8])
#loc50 = loc(fused[#loc11, #loc9])
#loc51 = loc(fused[#loc12, #loc13])
#loc52 = loc(fused[#loc16, #loc15])
#loc53 = loc(fused[#loc17, #loc18])
#loc54 = loc(fused[#loc19, #loc20])
#loc55 = loc(fused[#loc23, #loc24])
#loc56 = loc(fused[#loc25, #loc26])
#loc57 = loc(fused[#loc27, #loc28])
#loc58 = loc(fused[#loc29, #loc30])
#loc59 = loc(fused[#loc33, #loc31])
#loc60 = loc(fused[#loc34, #loc35])
#loc61 = loc(fused[#loc39, #loc38])
#loc62 = loc(fused[#loc40, #loc41])
#loc63 = loc(fused[#loc42, #loc43])
