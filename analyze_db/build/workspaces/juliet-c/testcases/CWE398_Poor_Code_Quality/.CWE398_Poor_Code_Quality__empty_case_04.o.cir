!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_case_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc76)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_case_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc79)
    cir.br ^bb1 loc(#loc80)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc12)
    cir.brcond %2 ^bb2, ^bb11 loc(#loc81)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc82)
  ^bb3:  // pred: ^bb2
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %4 = cir.const #cir.int<3> : !s32i loc(#loc17)
    %5 = cir.binop(rem, %3, %4) : !s32i loc(#loc83)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc79)
    cir.br ^bb4 loc(#loc84)
  ^bb4:  // pred: ^bb3
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    cir.br ^bb5 loc(#loc18)
  ^bb5:  // pred: ^bb4
    cir.switch.flat %6 : !s32i, ^bb8 [
      0: ^bb7
    ] loc(#loc18)
  ^bb6:  // no predecessors
    cir.br ^bb7 loc(#loc21)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc22)
  ^bb8:  // 2 preds: ^bb5, ^bb7
    cir.br ^bb9 loc(#loc19)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc15)
  ^bb10:  // pred: ^bb9
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc5)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc23)
    cir.br ^bb11 loc(#loc11)
  ^bb11:  // 2 preds: ^bb1, ^bb10
    cir.br ^bb12 loc(#loc11)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc7)
  } loc(#loc78)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_case_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc86)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc87)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    cir.return loc(#loc25)
  } loc(#loc85)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc30)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Inside the case statement\00" : !cir.array<!s8i x 26>> : !cir.array<!s8i x 26> {alignment = 1 : i64} loc(#loc31)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc32)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc89)
    cir.br ^bb1 loc(#loc90)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<0> : !s32i loc(#loc39)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc39)
    cir.brcond %2 ^bb2, ^bb3 loc(#loc91)
  ^bb2:  // pred: ^bb1
    %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc30)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc30)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc43)
    cir.br ^bb12 loc(#loc41)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc92)
  ^bb4:  // pred: ^bb3
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc46)
    %6 = cir.const #cir.int<3> : !s32i loc(#loc47)
    %7 = cir.binop(rem, %5, %6) : !s32i loc(#loc93)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    cir.br ^bb5 loc(#loc94)
  ^bb5:  // pred: ^bb4
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc50)
    cir.br ^bb6 loc(#loc48)
  ^bb6:  // pred: ^bb5
    cir.switch.flat %8 : !s32i, ^bb9 [
      0: ^bb8
    ] loc(#loc48)
  ^bb7:  // no predecessors
    cir.br ^bb8 loc(#loc51)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc31)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc31)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    cir.br ^bb9 loc(#loc53)
  ^bb9:  // 2 preds: ^bb6, ^bb8
    cir.br ^bb10 loc(#loc49)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc45)
  ^bb11:  // pred: ^bb10
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc32)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    cir.br ^bb12 loc(#loc38)
  ^bb12:  // 2 preds: ^bb2, ^bb11
    cir.br ^bb13 loc(#loc38)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc34)
  } loc(#loc88)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc96)
    cir.br ^bb1 loc(#loc97)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<1> : !s32i loc(#loc61)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc61)
    cir.brcond %2 ^bb2, ^bb11 loc(#loc98)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc99)
  ^bb3:  // pred: ^bb2
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc65)
    %4 = cir.const #cir.int<3> : !s32i loc(#loc66)
    %5 = cir.binop(rem, %3, %4) : !s32i loc(#loc100)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    cir.br ^bb4 loc(#loc101)
  ^bb4:  // pred: ^bb3
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    cir.br ^bb5 loc(#loc67)
  ^bb5:  // pred: ^bb4
    cir.switch.flat %6 : !s32i, ^bb8 [
      0: ^bb7
    ] loc(#loc67)
  ^bb6:  // no predecessors
    cir.br ^bb7 loc(#loc70)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %7 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc71)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    cir.br ^bb8 loc(#loc73)
  ^bb8:  // 2 preds: ^bb5, ^bb7
    cir.br ^bb9 loc(#loc68)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc64)
  ^bb10:  // pred: ^bb9
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc74)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    cir.br ^bb11 loc(#loc60)
  ^bb11:  // 2 preds: ^bb1, ^bb10
    cir.br ^bb12 loc(#loc60)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc56)
  } loc(#loc95)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_case_04.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":39:19)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":26:1)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":41:1)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":32:13)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":32:32)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":28:5)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":40:5)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":28:8)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":29:5)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":31:9)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":38:9)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":32:22)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":32:31)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":33:13)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":37:13)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":33:21)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":35:13)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":36:17)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":39:9)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":90:1)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":94:1)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":92:5)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":92:11)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":93:5)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":93:11)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":53:19)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":63:27)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":67:19)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":48:1)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":69:1)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":59:13)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":59:32)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":50:5)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":68:5)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":50:8)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":51:5)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":54:5)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":56:5)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":53:9)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":58:9)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":66:9)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":59:22)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":59:31)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":60:13)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":65:13)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":60:21)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":62:13)
#loc52 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":63:17)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":64:17)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":67:9)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":72:1)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":88:1)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":78:13)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":78:32)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":74:5)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":87:5)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":74:8)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":75:5)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":77:9)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":85:9)
#loc65 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":78:22)
#loc66 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":78:31)
#loc67 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":79:13)
#loc68 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":84:13)
#loc69 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":79:21)
#loc70 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":81:13)
#loc71 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":82:27)
#loc72 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":82:17)
#loc73 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":83:17)
#loc74 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":86:19)
#loc75 = loc("CWE398_Poor_Code_Quality__empty_case_04.c":86:9)
#loc76 = loc(fused[#loc1, #loc2])
#loc77 = loc(fused[#loc3, #loc4])
#loc78 = loc(fused[#loc6, #loc7])
#loc79 = loc(fused[#loc8, #loc9])
#loc80 = loc(fused[#loc10, #loc11])
#loc81 = loc(fused[#loc13, #loc11])
#loc82 = loc(fused[#loc14, #loc15])
#loc83 = loc(fused[#loc16, #loc17])
#loc84 = loc(fused[#loc18, #loc19])
#loc85 = loc(fused[#loc24, #loc25])
#loc86 = loc(fused[#loc26, #loc27])
#loc87 = loc(fused[#loc28, #loc29])
#loc88 = loc(fused[#loc33, #loc34])
#loc89 = loc(fused[#loc35, #loc36])
#loc90 = loc(fused[#loc37, #loc38])
#loc91 = loc(fused[#loc40, #loc41, #loc42, #loc38])
#loc92 = loc(fused[#loc44, #loc45])
#loc93 = loc(fused[#loc46, #loc47])
#loc94 = loc(fused[#loc48, #loc49])
#loc95 = loc(fused[#loc55, #loc56])
#loc96 = loc(fused[#loc57, #loc58])
#loc97 = loc(fused[#loc59, #loc60])
#loc98 = loc(fused[#loc62, #loc60])
#loc99 = loc(fused[#loc63, #loc64])
#loc100 = loc(fused[#loc65, #loc66])
#loc101 = loc(fused[#loc67, #loc68])
