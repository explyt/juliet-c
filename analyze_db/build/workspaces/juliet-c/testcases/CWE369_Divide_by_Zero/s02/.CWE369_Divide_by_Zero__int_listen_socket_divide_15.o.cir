!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc536)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc537)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc538)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc539)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc540)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc541)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc542)
  cir.func private @close(!s32i) -> !s32i loc(#loc543)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc544)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc19)
  cir.func private @printIntLine(!s32i) loc(#loc545)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_divide_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc547)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc27)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc548)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc31)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc551)
            %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc552)
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc553)
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc554)
            %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc555)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc40)
            %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc40)
            cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc553)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc42)
            %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc42)
            cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc554)
            cir.scope {
              cir.do {
                cir.scope {
                  %13 = cir.const #cir.int<2> : !s32i loc(#loc49)
                  %14 = cir.const #cir.int<1> : !s32i loc(#loc50)
                  %15 = cir.const #cir.int<6> : !s32i loc(#loc51)
                  %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc52)
                  cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc558)
                  cir.scope {
                    %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc57)
                    %59 = cir.const #cir.int<1> : !s32i loc(#loc58)
                    %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc58)
                    %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc560)
                    cir.if %61 {
                      cir.break loc(#loc60)
                    } loc(#loc561)
                  } loc(#loc559)
                  %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc562)
                  %18 = cir.const #cir.int<0> : !s32i loc(#loc63)
                  %19 = cir.const #cir.int<16> : !u64i loc(#loc563)
                  cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc564)
                  %20 = cir.const #cir.int<2> : !s32i loc(#loc68)
                  %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc68)
                  %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
                  cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc565)
                  %23 = cir.const #cir.int<0> : !s32i loc(#loc71)
                  %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc71)
                  %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
                  %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
                  cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc566)
                  %27 = cir.const #cir.int<27015> : !s32i loc(#loc75)
                  %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc75)
                  %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc76)
                  %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
                  cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc567)
                  cir.scope {
                    %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc82)
                    %59 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc569)
                    %60 = cir.const #cir.int<16> : !u64i loc(#loc570)
                    %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc570)
                    %62 = cir.call @bind(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc87)
                    %63 = cir.const #cir.int<1> : !s32i loc(#loc88)
                    %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc88)
                    %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc571)
                    cir.if %65 {
                      cir.break loc(#loc90)
                    } loc(#loc572)
                  } loc(#loc568)
                  cir.scope {
                    %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc93)
                    %59 = cir.const #cir.int<5> : !s32i loc(#loc94)
                    %60 = cir.call @listen(%58, %59) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc95)
                    %61 = cir.const #cir.int<1> : !s32i loc(#loc96)
                    %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc96)
                    %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc574)
                    cir.if %63 {
                      cir.break loc(#loc98)
                    } loc(#loc575)
                  } loc(#loc573)
                  %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc99)
                  %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc100)
                  %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc101)
                  %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc102)
                  cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc576)
                  cir.scope {
                    %58 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc107)
                    %59 = cir.const #cir.int<1> : !s32i loc(#loc108)
                    %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc108)
                    %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc578)
                    cir.if %61 {
                      cir.break loc(#loc110)
                    } loc(#loc579)
                  } loc(#loc577)
                  %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc111)
                  %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc112)
                  %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc112)
                  %38 = cir.const #cir.int<3> : !s32i loc(#loc113)
                  %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc113)
                  %40 = cir.const #cir.int<4> : !u64i loc(#loc113)
                  %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc113)
                  %42 = cir.const #cir.int<2> : !s32i loc(#loc113)
                  %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc113)
                  %44 = cir.binop(add, %41, %43) : !u64i loc(#loc113)
                  %45 = cir.const #cir.int<1> : !s32i loc(#loc114)
                  %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc114)
                  %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc580)
                  %48 = cir.const #cir.int<0> : !s32i loc(#loc115)
                  %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc116)
                  %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc116)
                  cir.store %50, %4 : !s32i, !cir.ptr<!s32i> loc(#loc581)
                  cir.scope {
                    %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc121)
                    %59 = cir.const #cir.int<1> : !s32i loc(#loc122)
                    %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc122)
                    %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc583)
                    %62 = cir.ternary(%61, true {
                      %63 = cir.const #true loc(#loc123)
                      cir.yield %63 : !cir.bool loc(#loc123)
                    }, false {
                      %63 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc124)
                      %64 = cir.const #cir.int<0> : !s32i loc(#loc125)
                      %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc584)
                      %66 = cir.ternary(%65, true {
                        %67 = cir.const #true loc(#loc123)
                        cir.yield %67 : !cir.bool loc(#loc123)
                      }, false {
                        %67 = cir.const #false loc(#loc123)
                        cir.yield %67 : !cir.bool loc(#loc123)
                      }) : (!cir.bool) -> !cir.bool loc(#loc123)
                      cir.yield %66 : !cir.bool loc(#loc123)
                    }) : (!cir.bool) -> !cir.bool loc(#loc123)
                    cir.if %62 {
                      cir.break loc(#loc127)
                    } loc(#loc585)
                  } loc(#loc582)
                  %51 = cir.const #cir.int<0> : !s32i loc(#loc128)
                  %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc128)
                  %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc129)
                  %54 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc130)
                  %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc130)
                  cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc586)
                  %56 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc131)
                  %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc132)
                  cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc587)
                } loc(#loc557)
                cir.yield loc(#loc46)
              } while {
                %13 = cir.const #cir.int<0> : !s32i loc(#loc135)
                %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc135)
                cir.condition(%14) loc(#loc135)
              } loc(#loc556)
            } loc(#loc556)
            cir.scope {
              %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc138)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc139)
              %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc139)
              %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc589)
              cir.if %16 {
                %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc141)
                %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc142)
              } loc(#loc590)
            } loc(#loc588)
            cir.scope {
              %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc145)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc146)
              %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc146)
              %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc592)
              cir.if %16 {
                %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc148)
                %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc149)
              } loc(#loc593)
            } loc(#loc591)
          } loc(#loc550)
          cir.break loc(#loc150)
        } loc(#loc32)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc19)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc19)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc152)
          cir.break loc(#loc153)
        } loc(#loc151)
        cir.yield loc(#loc29)
      } loc(#loc29)
    } loc(#loc549)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc156)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.const #cir.int<100> : !s32i loc(#loc158)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc159)
          %6 = cir.binop(div, %4, %5) : !s32i loc(#loc595)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc160)
          cir.break loc(#loc161)
        } loc(#loc157)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc163)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc163)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc164)
          cir.break loc(#loc165)
        } loc(#loc162)
        cir.yield loc(#loc154)
      } loc(#loc154)
    } loc(#loc594)
    cir.return loc(#loc23)
  } loc(#loc546)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_divide_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc597)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc168)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc598)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc170)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc599)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc172)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc600)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc174)
    cir.return loc(#loc167)
  } loc(#loc596)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc176)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc602)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc181)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc182)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc603)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc186)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc606)
            %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc607)
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc608)
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc609)
            %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc610)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc195)
            %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc195)
            cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc608)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc197)
            %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc197)
            cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc609)
            cir.scope {
              cir.do {
                cir.scope {
                  %13 = cir.const #cir.int<2> : !s32i loc(#loc204)
                  %14 = cir.const #cir.int<1> : !s32i loc(#loc205)
                  %15 = cir.const #cir.int<6> : !s32i loc(#loc206)
                  %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc207)
                  cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc613)
                  cir.scope {
                    %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc212)
                    %59 = cir.const #cir.int<1> : !s32i loc(#loc213)
                    %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc213)
                    %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc615)
                    cir.if %61 {
                      cir.break loc(#loc215)
                    } loc(#loc616)
                  } loc(#loc614)
                  %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc617)
                  %18 = cir.const #cir.int<0> : !s32i loc(#loc218)
                  %19 = cir.const #cir.int<16> : !u64i loc(#loc618)
                  cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc619)
                  %20 = cir.const #cir.int<2> : !s32i loc(#loc223)
                  %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc223)
                  %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
                  cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc620)
                  %23 = cir.const #cir.int<0> : !s32i loc(#loc225)
                  %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc225)
                  %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
                  %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
                  cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc621)
                  %27 = cir.const #cir.int<27015> : !s32i loc(#loc227)
                  %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc227)
                  %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc228)
                  %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
                  cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc622)
                  cir.scope {
                    %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc233)
                    %59 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc624)
                    %60 = cir.const #cir.int<16> : !u64i loc(#loc625)
                    %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc625)
                    %62 = cir.call @bind(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc238)
                    %63 = cir.const #cir.int<1> : !s32i loc(#loc239)
                    %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc239)
                    %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc626)
                    cir.if %65 {
                      cir.break loc(#loc241)
                    } loc(#loc627)
                  } loc(#loc623)
                  cir.scope {
                    %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc244)
                    %59 = cir.const #cir.int<5> : !s32i loc(#loc245)
                    %60 = cir.call @listen(%58, %59) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc246)
                    %61 = cir.const #cir.int<1> : !s32i loc(#loc247)
                    %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc247)
                    %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc629)
                    cir.if %63 {
                      cir.break loc(#loc249)
                    } loc(#loc630)
                  } loc(#loc628)
                  %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc250)
                  %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc251)
                  %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc252)
                  %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc253)
                  cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc631)
                  cir.scope {
                    %58 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc258)
                    %59 = cir.const #cir.int<1> : !s32i loc(#loc259)
                    %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc259)
                    %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc633)
                    cir.if %61 {
                      cir.break loc(#loc261)
                    } loc(#loc634)
                  } loc(#loc632)
                  %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc262)
                  %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc263)
                  %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc263)
                  %38 = cir.const #cir.int<3> : !s32i loc(#loc264)
                  %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc264)
                  %40 = cir.const #cir.int<4> : !u64i loc(#loc264)
                  %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc264)
                  %42 = cir.const #cir.int<2> : !s32i loc(#loc264)
                  %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc264)
                  %44 = cir.binop(add, %41, %43) : !u64i loc(#loc264)
                  %45 = cir.const #cir.int<1> : !s32i loc(#loc265)
                  %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc265)
                  %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc635)
                  %48 = cir.const #cir.int<0> : !s32i loc(#loc266)
                  %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc267)
                  %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc267)
                  cir.store %50, %4 : !s32i, !cir.ptr<!s32i> loc(#loc636)
                  cir.scope {
                    %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc272)
                    %59 = cir.const #cir.int<1> : !s32i loc(#loc273)
                    %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc273)
                    %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc638)
                    %62 = cir.ternary(%61, true {
                      %63 = cir.const #true loc(#loc274)
                      cir.yield %63 : !cir.bool loc(#loc274)
                    }, false {
                      %63 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc275)
                      %64 = cir.const #cir.int<0> : !s32i loc(#loc276)
                      %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc639)
                      %66 = cir.ternary(%65, true {
                        %67 = cir.const #true loc(#loc274)
                        cir.yield %67 : !cir.bool loc(#loc274)
                      }, false {
                        %67 = cir.const #false loc(#loc274)
                        cir.yield %67 : !cir.bool loc(#loc274)
                      }) : (!cir.bool) -> !cir.bool loc(#loc274)
                      cir.yield %66 : !cir.bool loc(#loc274)
                    }) : (!cir.bool) -> !cir.bool loc(#loc274)
                    cir.if %62 {
                      cir.break loc(#loc278)
                    } loc(#loc640)
                  } loc(#loc637)
                  %51 = cir.const #cir.int<0> : !s32i loc(#loc279)
                  %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc279)
                  %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc280)
                  %54 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc281)
                  %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc281)
                  cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc641)
                  %56 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc282)
                  %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc283)
                  cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc642)
                } loc(#loc612)
                cir.yield loc(#loc201)
              } while {
                %13 = cir.const #cir.int<0> : !s32i loc(#loc286)
                %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc286)
                cir.condition(%14) loc(#loc286)
              } loc(#loc611)
            } loc(#loc611)
            cir.scope {
              %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc289)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc290)
              %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc290)
              %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc644)
              cir.if %16 {
                %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc292)
                %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc293)
              } loc(#loc645)
            } loc(#loc643)
            cir.scope {
              %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc296)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc297)
              %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc297)
              %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc647)
              cir.if %16 {
                %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc299)
                %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc300)
              } loc(#loc648)
            } loc(#loc646)
          } loc(#loc605)
          cir.break loc(#loc301)
        } loc(#loc187)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc303)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc303)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc304)
          cir.break loc(#loc305)
        } loc(#loc302)
        cir.yield loc(#loc184)
      } loc(#loc184)
    } loc(#loc604)
    cir.scope {
      %3 = cir.const #cir.int<8> : !s32i loc(#loc308)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc310)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc310)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc311)
          cir.break loc(#loc312)
        } loc(#loc309)
        cir.case(default, []) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc316)
            %5 = cir.const #cir.int<0> : !s32i loc(#loc317)
            %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc651)
            cir.if %6 {
              %7 = cir.const #cir.int<100> : !s32i loc(#loc321)
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc322)
              %9 = cir.binop(div, %7, %8) : !s32i loc(#loc653)
              cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc323)
            } else {
              %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc176)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc176)
              cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc324)
            } loc(#loc652)
          } loc(#loc650)
          cir.break loc(#loc325)
        } loc(#loc313)
        cir.yield loc(#loc306)
      } loc(#loc306)
    } loc(#loc649)
    cir.return loc(#loc178)
  } loc(#loc601)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc655)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc330)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc331)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc656)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc335)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc659)
            %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc660)
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc661)
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc662)
            %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc663)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc344)
            %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc344)
            cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc661)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc346)
            %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc346)
            cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc662)
            cir.scope {
              cir.do {
                cir.scope {
                  %13 = cir.const #cir.int<2> : !s32i loc(#loc353)
                  %14 = cir.const #cir.int<1> : !s32i loc(#loc354)
                  %15 = cir.const #cir.int<6> : !s32i loc(#loc355)
                  %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc356)
                  cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc666)
                  cir.scope {
                    %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc361)
                    %59 = cir.const #cir.int<1> : !s32i loc(#loc362)
                    %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc362)
                    %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc668)
                    cir.if %61 {
                      cir.break loc(#loc364)
                    } loc(#loc669)
                  } loc(#loc667)
                  %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc670)
                  %18 = cir.const #cir.int<0> : !s32i loc(#loc367)
                  %19 = cir.const #cir.int<16> : !u64i loc(#loc671)
                  cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc672)
                  %20 = cir.const #cir.int<2> : !s32i loc(#loc372)
                  %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc372)
                  %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
                  cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc673)
                  %23 = cir.const #cir.int<0> : !s32i loc(#loc374)
                  %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc374)
                  %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
                  %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
                  cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc674)
                  %27 = cir.const #cir.int<27015> : !s32i loc(#loc376)
                  %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc376)
                  %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc377)
                  %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
                  cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc675)
                  cir.scope {
                    %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc382)
                    %59 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc677)
                    %60 = cir.const #cir.int<16> : !u64i loc(#loc678)
                    %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc678)
                    %62 = cir.call @bind(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc387)
                    %63 = cir.const #cir.int<1> : !s32i loc(#loc388)
                    %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc388)
                    %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc679)
                    cir.if %65 {
                      cir.break loc(#loc390)
                    } loc(#loc680)
                  } loc(#loc676)
                  cir.scope {
                    %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc393)
                    %59 = cir.const #cir.int<5> : !s32i loc(#loc394)
                    %60 = cir.call @listen(%58, %59) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc395)
                    %61 = cir.const #cir.int<1> : !s32i loc(#loc396)
                    %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc396)
                    %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc682)
                    cir.if %63 {
                      cir.break loc(#loc398)
                    } loc(#loc683)
                  } loc(#loc681)
                  %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc399)
                  %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc400)
                  %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc401)
                  %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc402)
                  cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc684)
                  cir.scope {
                    %58 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc407)
                    %59 = cir.const #cir.int<1> : !s32i loc(#loc408)
                    %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc408)
                    %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc686)
                    cir.if %61 {
                      cir.break loc(#loc410)
                    } loc(#loc687)
                  } loc(#loc685)
                  %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc411)
                  %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc412)
                  %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc412)
                  %38 = cir.const #cir.int<3> : !s32i loc(#loc413)
                  %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc413)
                  %40 = cir.const #cir.int<4> : !u64i loc(#loc413)
                  %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc413)
                  %42 = cir.const #cir.int<2> : !s32i loc(#loc413)
                  %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc413)
                  %44 = cir.binop(add, %41, %43) : !u64i loc(#loc413)
                  %45 = cir.const #cir.int<1> : !s32i loc(#loc414)
                  %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc414)
                  %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc688)
                  %48 = cir.const #cir.int<0> : !s32i loc(#loc415)
                  %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc416)
                  %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc416)
                  cir.store %50, %4 : !s32i, !cir.ptr<!s32i> loc(#loc689)
                  cir.scope {
                    %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc421)
                    %59 = cir.const #cir.int<1> : !s32i loc(#loc422)
                    %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc422)
                    %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc691)
                    %62 = cir.ternary(%61, true {
                      %63 = cir.const #true loc(#loc423)
                      cir.yield %63 : !cir.bool loc(#loc423)
                    }, false {
                      %63 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc424)
                      %64 = cir.const #cir.int<0> : !s32i loc(#loc425)
                      %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc692)
                      %66 = cir.ternary(%65, true {
                        %67 = cir.const #true loc(#loc423)
                        cir.yield %67 : !cir.bool loc(#loc423)
                      }, false {
                        %67 = cir.const #false loc(#loc423)
                        cir.yield %67 : !cir.bool loc(#loc423)
                      }) : (!cir.bool) -> !cir.bool loc(#loc423)
                      cir.yield %66 : !cir.bool loc(#loc423)
                    }) : (!cir.bool) -> !cir.bool loc(#loc423)
                    cir.if %62 {
                      cir.break loc(#loc427)
                    } loc(#loc693)
                  } loc(#loc690)
                  %51 = cir.const #cir.int<0> : !s32i loc(#loc428)
                  %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc428)
                  %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc429)
                  %54 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc430)
                  %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc430)
                  cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc694)
                  %56 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc431)
                  %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc432)
                  cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc695)
                } loc(#loc665)
                cir.yield loc(#loc350)
              } while {
                %13 = cir.const #cir.int<0> : !s32i loc(#loc435)
                %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc435)
                cir.condition(%14) loc(#loc435)
              } loc(#loc664)
            } loc(#loc664)
            cir.scope {
              %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc438)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc439)
              %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc439)
              %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc697)
              cir.if %16 {
                %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc441)
                %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc442)
              } loc(#loc698)
            } loc(#loc696)
            cir.scope {
              %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc445)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc446)
              %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc446)
              %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc700)
              cir.if %16 {
                %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc448)
                %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc449)
              } loc(#loc701)
            } loc(#loc699)
          } loc(#loc658)
          cir.break loc(#loc450)
        } loc(#loc336)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc452)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc452)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc453)
          cir.break loc(#loc454)
        } loc(#loc451)
        cir.yield loc(#loc333)
      } loc(#loc333)
    } loc(#loc657)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc457)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc461)
            %5 = cir.const #cir.int<0> : !s32i loc(#loc462)
            %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc704)
            cir.if %6 {
              %7 = cir.const #cir.int<100> : !s32i loc(#loc466)
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc467)
              %9 = cir.binop(div, %7, %8) : !s32i loc(#loc706)
              cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc468)
            } else {
              %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc469)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc469)
              cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc470)
            } loc(#loc705)
          } loc(#loc703)
          cir.break loc(#loc471)
        } loc(#loc458)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc473)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc473)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc474)
          cir.break loc(#loc475)
        } loc(#loc472)
        cir.yield loc(#loc455)
      } loc(#loc455)
    } loc(#loc702)
    cir.return loc(#loc327)
  } loc(#loc654)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc708)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc480)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc481)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc709)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc485)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc487)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc487)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc488)
          cir.break loc(#loc489)
        } loc(#loc486)
        cir.case(default, []) {
          %4 = cir.const #cir.int<7> : !s32i loc(#loc491)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc711)
          cir.break loc(#loc493)
        } loc(#loc490)
        cir.yield loc(#loc483)
      } loc(#loc483)
    } loc(#loc710)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc496)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.const #cir.int<100> : !s32i loc(#loc498)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc499)
          %6 = cir.binop(div, %4, %5) : !s32i loc(#loc713)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc500)
          cir.break loc(#loc501)
        } loc(#loc497)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc503)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc503)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc504)
          cir.break loc(#loc505)
        } loc(#loc502)
        cir.yield loc(#loc494)
      } loc(#loc494)
    } loc(#loc712)
    cir.return loc(#loc477)
  } loc(#loc707)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc715)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc510)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc511)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc716)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc515)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<7> : !s32i loc(#loc517)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc718)
          cir.break loc(#loc519)
        } loc(#loc516)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc521)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc521)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc522)
          cir.break loc(#loc523)
        } loc(#loc520)
        cir.yield loc(#loc513)
      } loc(#loc513)
    } loc(#loc717)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc526)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.const #cir.int<100> : !s32i loc(#loc528)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc529)
          %6 = cir.binop(div, %4, %5) : !s32i loc(#loc720)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc530)
          cir.break loc(#loc531)
        } loc(#loc527)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc533)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc533)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc534)
          cir.break loc(#loc535)
        } loc(#loc532)
        cir.yield loc(#loc524)
      } loc(#loc524)
    } loc(#loc719)
    cir.return loc(#loc507)
  } loc(#loc714)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc19 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":124:19)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc22 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":44:1)
#loc23 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":138:1)
#loc24 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":46:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":46:9)
#loc26 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":48:13)
#loc27 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":48:12)
#loc28 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":48:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":49:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":126:5)
#loc31 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":49:12)
#loc32 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":51:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":52:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":120:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":57:9)
#loc36 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":57:13)
#loc37 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":58:9)
#loc38 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":58:28)
#loc39 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":59:9)
#loc40 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":59:31)
#loc41 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":60:9)
#loc42 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":60:31)
#loc43 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":61:9)
#loc44 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":61:41)
#loc45 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":62:9)
#loc46 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":105:17)
#loc47 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":63:9)
#loc48 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":104:9)
#loc49 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":72:35)
#loc50 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":72:44)
#loc51 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":72:57)
#loc52 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":72:28)
#loc53 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":72:13)
#loc54 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":72:68)
#loc55 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":73:13)
#loc56 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":76:13)
#loc57 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":73:17)
#loc58 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":73:33)
#loc59 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":74:13)
#loc60 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":75:17)
#loc61 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":77:20)
#loc62 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":77:21)
#loc63 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":77:30)
#loc64 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":77:33)
#loc65 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":77:47)
#loc66 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":77:13)
#loc67 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":77:48)
#loc68 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":78:34)
#loc69 = loc("/usr/include/netinet/in.h":249:5)
#loc70 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":78:13)
#loc71 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":79:39)
#loc72 = loc("/usr/include/netinet/in.h":251:20)
#loc73 = loc("/usr/include/netinet/in.h":33:15)
#loc74 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":79:13)
#loc75 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":80:38)
#loc76 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":80:32)
#loc77 = loc("/usr/include/netinet/in.h":250:15)
#loc78 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":80:13)
#loc79 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":80:46)
#loc80 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":81:13)
#loc81 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":84:13)
#loc82 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":81:22)
#loc83 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":81:54)
#loc84 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":81:55)
#loc85 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":81:64)
#loc86 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":81:78)
#loc87 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":81:17)
#loc88 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":81:84)
#loc89 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":82:13)
#loc90 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":83:17)
#loc91 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":85:13)
#loc92 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":88:13)
#loc93 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":85:24)
#loc94 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":85:38)
#loc95 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":85:17)
#loc96 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":85:57)
#loc97 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":86:13)
#loc98 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":87:17)
#loc99 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":89:35)
#loc100 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":89:49)
#loc101 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":89:55)
#loc102 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":89:28)
#loc103 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":89:13)
#loc104 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":89:59)
#loc105 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":90:13)
#loc106 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":93:13)
#loc107 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":90:17)
#loc108 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":90:33)
#loc109 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":91:13)
#loc110 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":92:17)
#loc111 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":95:31)
#loc112 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":95:45)
#loc113 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":95:58)
#loc114 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":95:76)
#loc115 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":95:79)
#loc116 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":95:26)
#loc117 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":95:13)
#loc118 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":95:80)
#loc119 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":96:13)
#loc120 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":99:13)
#loc121 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":96:17)
#loc122 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":96:31)
#loc123 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":96:44)
#loc124 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":96:47)
#loc125 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":96:61)
#loc126 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":97:13)
#loc127 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":98:17)
#loc128 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":101:39)
#loc129 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":101:25)
#loc130 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":101:13)
#loc131 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":103:25)
#loc132 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":103:20)
#loc133 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":103:13)
#loc134 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":103:36)
#loc135 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":105:16)
#loc136 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":106:9)
#loc137 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":109:9)
#loc138 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":106:13)
#loc139 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":106:29)
#loc140 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":107:9)
#loc141 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":108:26)
#loc142 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":108:13)
#loc143 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":110:9)
#loc144 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":113:9)
#loc145 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":110:13)
#loc146 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":110:29)
#loc147 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":111:9)
#loc148 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":112:26)
#loc149 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":112:13)
#loc150 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":121:5)
#loc151 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":122:5)
#loc152 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":124:9)
#loc153 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":125:9)
#loc154 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":127:5)
#loc155 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":137:5)
#loc156 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":127:12)
#loc157 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":129:5)
#loc158 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":131:22)
#loc159 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":131:28)
#loc160 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":131:9)
#loc161 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":132:9)
#loc162 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":133:5)
#loc163 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":135:19)
#loc164 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":135:9)
#loc165 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":136:9)
#loc166 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":412:1)
#loc167 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":418:1)
#loc168 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":414:5)
#loc169 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":414:14)
#loc170 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":415:5)
#loc171 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":415:14)
#loc172 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":416:5)
#loc173 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":416:14)
#loc174 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":417:5)
#loc175 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":417:14)
#loc176 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":242:23)
#loc177 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":145:1)
#loc178 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":246:1)
#loc179 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":147:5)
#loc180 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":147:9)
#loc181 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":149:13)
#loc182 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":149:12)
#loc183 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":149:5)
#loc184 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":150:5)
#loc185 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":227:5)
#loc186 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":150:12)
#loc187 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":152:5)
#loc188 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":153:5)
#loc189 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":221:5)
#loc190 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":158:9)
#loc191 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":158:13)
#loc192 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":159:9)
#loc193 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":159:28)
#loc194 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":160:9)
#loc195 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":160:31)
#loc196 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":161:9)
#loc197 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":161:31)
#loc198 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":162:9)
#loc199 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":162:41)
#loc200 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":163:9)
#loc201 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":206:17)
#loc202 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":164:9)
#loc203 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":205:9)
#loc204 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":173:35)
#loc205 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":173:44)
#loc206 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":173:57)
#loc207 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":173:28)
#loc208 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":173:13)
#loc209 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":173:68)
#loc210 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":174:13)
#loc211 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":177:13)
#loc212 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":174:17)
#loc213 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":174:33)
#loc214 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":175:13)
#loc215 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":176:17)
#loc216 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":178:20)
#loc217 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":178:21)
#loc218 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":178:30)
#loc219 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":178:33)
#loc220 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":178:47)
#loc221 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":178:13)
#loc222 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":178:48)
#loc223 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":179:34)
#loc224 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":179:13)
#loc225 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":180:39)
#loc226 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":180:13)
#loc227 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":181:38)
#loc228 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":181:32)
#loc229 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":181:13)
#loc230 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":181:46)
#loc231 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":182:13)
#loc232 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":185:13)
#loc233 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":182:22)
#loc234 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":182:54)
#loc235 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":182:55)
#loc236 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":182:64)
#loc237 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":182:78)
#loc238 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":182:17)
#loc239 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":182:84)
#loc240 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":183:13)
#loc241 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":184:17)
#loc242 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":186:13)
#loc243 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":189:13)
#loc244 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":186:24)
#loc245 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":186:38)
#loc246 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":186:17)
#loc247 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":186:57)
#loc248 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":187:13)
#loc249 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":188:17)
#loc250 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":190:35)
#loc251 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":190:49)
#loc252 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":190:55)
#loc253 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":190:28)
#loc254 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":190:13)
#loc255 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":190:59)
#loc256 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":191:13)
#loc257 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":194:13)
#loc258 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":191:17)
#loc259 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":191:33)
#loc260 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":192:13)
#loc261 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":193:17)
#loc262 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":196:31)
#loc263 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":196:45)
#loc264 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":196:58)
#loc265 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":196:76)
#loc266 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":196:79)
#loc267 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":196:26)
#loc268 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":196:13)
#loc269 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":196:80)
#loc270 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":197:13)
#loc271 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":200:13)
#loc272 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":197:17)
#loc273 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":197:31)
#loc274 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":197:44)
#loc275 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":197:47)
#loc276 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":197:61)
#loc277 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":198:13)
#loc278 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":199:17)
#loc279 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":202:39)
#loc280 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":202:25)
#loc281 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":202:13)
#loc282 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":204:25)
#loc283 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":204:20)
#loc284 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":204:13)
#loc285 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":204:36)
#loc286 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":206:16)
#loc287 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":207:9)
#loc288 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":210:9)
#loc289 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":207:13)
#loc290 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":207:29)
#loc291 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":208:9)
#loc292 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":209:26)
#loc293 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":209:13)
#loc294 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":211:9)
#loc295 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":214:9)
#loc296 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":211:13)
#loc297 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":211:29)
#loc298 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":212:9)
#loc299 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":213:26)
#loc300 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":213:13)
#loc301 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":222:5)
#loc302 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":223:5)
#loc303 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":225:19)
#loc304 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":225:9)
#loc305 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":226:9)
#loc306 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":228:5)
#loc307 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":245:5)
#loc308 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":228:12)
#loc309 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":230:5)
#loc310 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":232:19)
#loc311 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":232:9)
#loc312 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":233:9)
#loc313 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":234:5)
#loc314 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":236:9)
#loc315 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":243:9)
#loc316 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":236:13)
#loc317 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":236:21)
#loc318 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":237:9)
#loc319 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":239:9)
#loc320 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":241:9)
#loc321 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":238:26)
#loc322 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":238:32)
#loc323 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":238:13)
#loc324 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":242:13)
#loc325 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":244:9)
#loc326 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":249:1)
#loc327 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":350:1)
#loc328 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":251:5)
#loc329 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":251:9)
#loc330 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":253:13)
#loc331 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":253:12)
#loc332 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":253:5)
#loc333 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":254:5)
#loc334 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":331:5)
#loc335 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":254:12)
#loc336 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":256:5)
#loc337 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":257:5)
#loc338 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":325:5)
#loc339 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":262:9)
#loc340 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":262:13)
#loc341 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":263:9)
#loc342 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":263:28)
#loc343 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":264:9)
#loc344 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":264:31)
#loc345 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":265:9)
#loc346 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":265:31)
#loc347 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":266:9)
#loc348 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":266:41)
#loc349 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":267:9)
#loc350 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":310:17)
#loc351 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":268:9)
#loc352 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":309:9)
#loc353 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":277:35)
#loc354 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":277:44)
#loc355 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":277:57)
#loc356 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":277:28)
#loc357 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":277:13)
#loc358 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":277:68)
#loc359 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":278:13)
#loc360 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":281:13)
#loc361 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":278:17)
#loc362 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":278:33)
#loc363 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":279:13)
#loc364 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":280:17)
#loc365 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":282:20)
#loc366 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":282:21)
#loc367 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":282:30)
#loc368 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":282:33)
#loc369 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":282:47)
#loc370 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":282:13)
#loc371 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":282:48)
#loc372 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":283:34)
#loc373 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":283:13)
#loc374 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":284:39)
#loc375 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":284:13)
#loc376 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":285:38)
#loc377 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":285:32)
#loc378 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":285:13)
#loc379 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":285:46)
#loc380 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":286:13)
#loc381 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":289:13)
#loc382 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":286:22)
#loc383 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":286:54)
#loc384 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":286:55)
#loc385 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":286:64)
#loc386 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":286:78)
#loc387 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":286:17)
#loc388 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":286:84)
#loc389 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":287:13)
#loc390 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":288:17)
#loc391 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":290:13)
#loc392 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":293:13)
#loc393 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":290:24)
#loc394 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":290:38)
#loc395 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":290:17)
#loc396 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":290:57)
#loc397 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":291:13)
#loc398 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":292:17)
#loc399 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":294:35)
#loc400 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":294:49)
#loc401 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":294:55)
#loc402 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":294:28)
#loc403 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":294:13)
#loc404 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":294:59)
#loc405 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":295:13)
#loc406 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":298:13)
#loc407 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":295:17)
#loc408 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":295:33)
#loc409 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":296:13)
#loc410 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":297:17)
#loc411 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":300:31)
#loc412 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":300:45)
#loc413 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":300:58)
#loc414 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":300:76)
#loc415 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":300:79)
#loc416 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":300:26)
#loc417 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":300:13)
#loc418 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":300:80)
#loc419 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":301:13)
#loc420 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":304:13)
#loc421 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":301:17)
#loc422 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":301:31)
#loc423 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":301:44)
#loc424 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":301:47)
#loc425 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":301:61)
#loc426 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":302:13)
#loc427 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":303:17)
#loc428 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":306:39)
#loc429 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":306:25)
#loc430 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":306:13)
#loc431 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":308:25)
#loc432 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":308:20)
#loc433 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":308:13)
#loc434 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":308:36)
#loc435 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":310:16)
#loc436 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":311:9)
#loc437 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":314:9)
#loc438 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":311:13)
#loc439 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":311:29)
#loc440 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":312:9)
#loc441 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":313:26)
#loc442 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":313:13)
#loc443 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":315:9)
#loc444 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":318:9)
#loc445 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":315:13)
#loc446 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":315:29)
#loc447 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":316:9)
#loc448 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":317:26)
#loc449 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":317:13)
#loc450 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":326:5)
#loc451 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":327:5)
#loc452 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":329:19)
#loc453 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":329:9)
#loc454 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":330:9)
#loc455 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":332:5)
#loc456 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":349:5)
#loc457 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":332:12)
#loc458 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":334:5)
#loc459 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":336:9)
#loc460 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":343:9)
#loc461 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":336:13)
#loc462 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":336:21)
#loc463 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":337:9)
#loc464 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":339:9)
#loc465 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":341:9)
#loc466 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":338:26)
#loc467 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":338:32)
#loc468 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":338:13)
#loc469 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":342:23)
#loc470 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":342:13)
#loc471 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":344:9)
#loc472 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":345:5)
#loc473 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":347:19)
#loc474 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":347:9)
#loc475 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":348:9)
#loc476 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":353:1)
#loc477 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":380:1)
#loc478 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":355:5)
#loc479 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":355:9)
#loc480 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":357:13)
#loc481 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":357:12)
#loc482 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":357:5)
#loc483 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":358:5)
#loc484 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":368:5)
#loc485 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":358:12)
#loc486 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":360:5)
#loc487 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":362:19)
#loc488 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":362:9)
#loc489 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":363:9)
#loc490 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":364:5)
#loc491 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":366:16)
#loc492 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":366:9)
#loc493 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":367:9)
#loc494 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":369:5)
#loc495 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":379:5)
#loc496 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":369:12)
#loc497 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":371:5)
#loc498 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":373:22)
#loc499 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":373:28)
#loc500 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":373:9)
#loc501 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":374:9)
#loc502 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":375:5)
#loc503 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":377:19)
#loc504 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":377:9)
#loc505 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":378:9)
#loc506 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":383:1)
#loc507 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":410:1)
#loc508 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":385:5)
#loc509 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":385:9)
#loc510 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":387:13)
#loc511 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":387:12)
#loc512 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":387:5)
#loc513 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":388:5)
#loc514 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":398:5)
#loc515 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":388:12)
#loc516 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":390:5)
#loc517 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":392:16)
#loc518 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":392:9)
#loc519 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":393:9)
#loc520 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":394:5)
#loc521 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":396:19)
#loc522 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":396:9)
#loc523 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":397:9)
#loc524 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":399:5)
#loc525 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":409:5)
#loc526 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":399:12)
#loc527 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":401:5)
#loc528 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":403:22)
#loc529 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":403:28)
#loc530 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":403:9)
#loc531 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":404:9)
#loc532 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":405:5)
#loc533 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":407:19)
#loc534 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":407:9)
#loc535 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":408:9)
#loc536 = loc(fused[#loc1, #loc2])
#loc537 = loc(fused[#loc3, #loc4])
#loc538 = loc(fused[#loc5, #loc6])
#loc539 = loc(fused[#loc7, #loc8])
#loc540 = loc(fused[#loc9, #loc10])
#loc541 = loc(fused[#loc11, #loc12])
#loc542 = loc(fused[#loc13, #loc14])
#loc543 = loc(fused[#loc15, #loc16])
#loc544 = loc(fused[#loc17, #loc18])
#loc545 = loc(fused[#loc20, #loc21])
#loc546 = loc(fused[#loc22, #loc23])
#loc547 = loc(fused[#loc24, #loc25])
#loc548 = loc(fused[#loc28, #loc26])
#loc549 = loc(fused[#loc29, #loc30])
#loc550 = loc(fused[#loc33, #loc34])
#loc551 = loc(fused[#loc35, #loc36])
#loc552 = loc(fused[#loc37, #loc38])
#loc553 = loc(fused[#loc39, #loc40])
#loc554 = loc(fused[#loc41, #loc42])
#loc555 = loc(fused[#loc43, #loc44])
#loc556 = loc(fused[#loc45, #loc46])
#loc557 = loc(fused[#loc47, #loc48])
#loc558 = loc(fused[#loc53, #loc54])
#loc559 = loc(fused[#loc55, #loc56])
#loc560 = loc(fused[#loc57, #loc58])
#loc561 = loc(fused[#loc59, #loc56])
#loc562 = loc(fused[#loc61, #loc62])
#loc563 = loc(fused[#loc64, #loc65])
#loc564 = loc(fused[#loc66, #loc67])
#loc565 = loc(fused[#loc70, #loc68])
#loc566 = loc(fused[#loc74, #loc71])
#loc567 = loc(fused[#loc78, #loc79])
#loc568 = loc(fused[#loc80, #loc81])
#loc569 = loc(fused[#loc83, #loc84])
#loc570 = loc(fused[#loc85, #loc86])
#loc571 = loc(fused[#loc87, #loc88])
#loc572 = loc(fused[#loc89, #loc81])
#loc573 = loc(fused[#loc91, #loc92])
#loc574 = loc(fused[#loc95, #loc96])
#loc575 = loc(fused[#loc97, #loc92])
#loc576 = loc(fused[#loc103, #loc104])
#loc577 = loc(fused[#loc105, #loc106])
#loc578 = loc(fused[#loc107, #loc108])
#loc579 = loc(fused[#loc109, #loc106])
#loc580 = loc(fused[#loc113, #loc114])
#loc581 = loc(fused[#loc117, #loc118])
#loc582 = loc(fused[#loc119, #loc120])
#loc583 = loc(fused[#loc121, #loc122])
#loc584 = loc(fused[#loc124, #loc125])
#loc585 = loc(fused[#loc126, #loc120])
#loc586 = loc(fused[#loc130, #loc128])
#loc587 = loc(fused[#loc133, #loc134])
#loc588 = loc(fused[#loc136, #loc137])
#loc589 = loc(fused[#loc138, #loc139])
#loc590 = loc(fused[#loc140, #loc137])
#loc591 = loc(fused[#loc143, #loc144])
#loc592 = loc(fused[#loc145, #loc146])
#loc593 = loc(fused[#loc147, #loc144])
#loc594 = loc(fused[#loc154, #loc155])
#loc595 = loc(fused[#loc158, #loc159])
#loc596 = loc(fused[#loc166, #loc167])
#loc597 = loc(fused[#loc168, #loc169])
#loc598 = loc(fused[#loc170, #loc171])
#loc599 = loc(fused[#loc172, #loc173])
#loc600 = loc(fused[#loc174, #loc175])
#loc601 = loc(fused[#loc177, #loc178])
#loc602 = loc(fused[#loc179, #loc180])
#loc603 = loc(fused[#loc183, #loc181])
#loc604 = loc(fused[#loc184, #loc185])
#loc605 = loc(fused[#loc188, #loc189])
#loc606 = loc(fused[#loc190, #loc191])
#loc607 = loc(fused[#loc192, #loc193])
#loc608 = loc(fused[#loc194, #loc195])
#loc609 = loc(fused[#loc196, #loc197])
#loc610 = loc(fused[#loc198, #loc199])
#loc611 = loc(fused[#loc200, #loc201])
#loc612 = loc(fused[#loc202, #loc203])
#loc613 = loc(fused[#loc208, #loc209])
#loc614 = loc(fused[#loc210, #loc211])
#loc615 = loc(fused[#loc212, #loc213])
#loc616 = loc(fused[#loc214, #loc211])
#loc617 = loc(fused[#loc216, #loc217])
#loc618 = loc(fused[#loc219, #loc220])
#loc619 = loc(fused[#loc221, #loc222])
#loc620 = loc(fused[#loc224, #loc223])
#loc621 = loc(fused[#loc226, #loc225])
#loc622 = loc(fused[#loc229, #loc230])
#loc623 = loc(fused[#loc231, #loc232])
#loc624 = loc(fused[#loc234, #loc235])
#loc625 = loc(fused[#loc236, #loc237])
#loc626 = loc(fused[#loc238, #loc239])
#loc627 = loc(fused[#loc240, #loc232])
#loc628 = loc(fused[#loc242, #loc243])
#loc629 = loc(fused[#loc246, #loc247])
#loc630 = loc(fused[#loc248, #loc243])
#loc631 = loc(fused[#loc254, #loc255])
#loc632 = loc(fused[#loc256, #loc257])
#loc633 = loc(fused[#loc258, #loc259])
#loc634 = loc(fused[#loc260, #loc257])
#loc635 = loc(fused[#loc264, #loc265])
#loc636 = loc(fused[#loc268, #loc269])
#loc637 = loc(fused[#loc270, #loc271])
#loc638 = loc(fused[#loc272, #loc273])
#loc639 = loc(fused[#loc275, #loc276])
#loc640 = loc(fused[#loc277, #loc271])
#loc641 = loc(fused[#loc281, #loc279])
#loc642 = loc(fused[#loc284, #loc285])
#loc643 = loc(fused[#loc287, #loc288])
#loc644 = loc(fused[#loc289, #loc290])
#loc645 = loc(fused[#loc291, #loc288])
#loc646 = loc(fused[#loc294, #loc295])
#loc647 = loc(fused[#loc296, #loc297])
#loc648 = loc(fused[#loc298, #loc295])
#loc649 = loc(fused[#loc306, #loc307])
#loc650 = loc(fused[#loc314, #loc315])
#loc651 = loc(fused[#loc316, #loc317])
#loc652 = loc(fused[#loc318, #loc319, #loc320, #loc315])
#loc653 = loc(fused[#loc321, #loc322])
#loc654 = loc(fused[#loc326, #loc327])
#loc655 = loc(fused[#loc328, #loc329])
#loc656 = loc(fused[#loc332, #loc330])
#loc657 = loc(fused[#loc333, #loc334])
#loc658 = loc(fused[#loc337, #loc338])
#loc659 = loc(fused[#loc339, #loc340])
#loc660 = loc(fused[#loc341, #loc342])
#loc661 = loc(fused[#loc343, #loc344])
#loc662 = loc(fused[#loc345, #loc346])
#loc663 = loc(fused[#loc347, #loc348])
#loc664 = loc(fused[#loc349, #loc350])
#loc665 = loc(fused[#loc351, #loc352])
#loc666 = loc(fused[#loc357, #loc358])
#loc667 = loc(fused[#loc359, #loc360])
#loc668 = loc(fused[#loc361, #loc362])
#loc669 = loc(fused[#loc363, #loc360])
#loc670 = loc(fused[#loc365, #loc366])
#loc671 = loc(fused[#loc368, #loc369])
#loc672 = loc(fused[#loc370, #loc371])
#loc673 = loc(fused[#loc373, #loc372])
#loc674 = loc(fused[#loc375, #loc374])
#loc675 = loc(fused[#loc378, #loc379])
#loc676 = loc(fused[#loc380, #loc381])
#loc677 = loc(fused[#loc383, #loc384])
#loc678 = loc(fused[#loc385, #loc386])
#loc679 = loc(fused[#loc387, #loc388])
#loc680 = loc(fused[#loc389, #loc381])
#loc681 = loc(fused[#loc391, #loc392])
#loc682 = loc(fused[#loc395, #loc396])
#loc683 = loc(fused[#loc397, #loc392])
#loc684 = loc(fused[#loc403, #loc404])
#loc685 = loc(fused[#loc405, #loc406])
#loc686 = loc(fused[#loc407, #loc408])
#loc687 = loc(fused[#loc409, #loc406])
#loc688 = loc(fused[#loc413, #loc414])
#loc689 = loc(fused[#loc417, #loc418])
#loc690 = loc(fused[#loc419, #loc420])
#loc691 = loc(fused[#loc421, #loc422])
#loc692 = loc(fused[#loc424, #loc425])
#loc693 = loc(fused[#loc426, #loc420])
#loc694 = loc(fused[#loc430, #loc428])
#loc695 = loc(fused[#loc433, #loc434])
#loc696 = loc(fused[#loc436, #loc437])
#loc697 = loc(fused[#loc438, #loc439])
#loc698 = loc(fused[#loc440, #loc437])
#loc699 = loc(fused[#loc443, #loc444])
#loc700 = loc(fused[#loc445, #loc446])
#loc701 = loc(fused[#loc447, #loc444])
#loc702 = loc(fused[#loc455, #loc456])
#loc703 = loc(fused[#loc459, #loc460])
#loc704 = loc(fused[#loc461, #loc462])
#loc705 = loc(fused[#loc463, #loc464, #loc465, #loc460])
#loc706 = loc(fused[#loc466, #loc467])
#loc707 = loc(fused[#loc476, #loc477])
#loc708 = loc(fused[#loc478, #loc479])
#loc709 = loc(fused[#loc482, #loc480])
#loc710 = loc(fused[#loc483, #loc484])
#loc711 = loc(fused[#loc492, #loc491])
#loc712 = loc(fused[#loc494, #loc495])
#loc713 = loc(fused[#loc498, #loc499])
#loc714 = loc(fused[#loc506, #loc507])
#loc715 = loc(fused[#loc508, #loc509])
#loc716 = loc(fused[#loc512, #loc510])
#loc717 = loc(fused[#loc513, #loc514])
#loc718 = loc(fused[#loc518, #loc517])
#loc719 = loc(fused[#loc524, #loc525])
#loc720 = loc(fused[#loc528, #loc529])
