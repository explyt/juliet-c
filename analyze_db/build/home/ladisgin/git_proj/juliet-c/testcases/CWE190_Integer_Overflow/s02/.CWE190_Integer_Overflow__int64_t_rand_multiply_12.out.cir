!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":170:10)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":170:14)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":170:20)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":170:32)
#loc241 = loc(fused[#loc80, #loc81])
#loc242 = loc(fused[#loc82, #loc83])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc208)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc209)
  cir.func private @printLongLongLine(!s64i) loc(#loc210)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc211)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_multiply_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc213)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc14)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc214)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc216)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc216)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc18)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc18)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc23)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc23)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc23)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc23)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc23)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc23)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc23)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc23)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc23)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc23)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc23)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc23)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc23)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc23)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc23)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc23)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc23)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc23)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc23)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc23)
          cir.yield %33 : !u64i loc(#loc23)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc23)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc23)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc23)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc23)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc23)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc23)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc23)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc23)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc23)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc23)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc23)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc23)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc23)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc23)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc23)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc23)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc23)
          %34 = cir.unary(minus, %33) : !u64i, !u64i loc(#loc23)
          %35 = cir.const #cir.int<1> : !s32i loc(#loc23)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc23)
          %37 = cir.binop(sub, %34, %36) : !u64i loc(#loc23)
          cir.yield %37 : !u64i loc(#loc23)
        }) : (!cir.bool) -> !u64i loc(#loc23)
        %11 = cir.cast(integral, %10 : !u64i), !s64i loc(#loc23)
        cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc218)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc25)
        %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc25)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc219)
      } loc(#loc217)
    } loc(#loc215)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc221)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc221)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc29)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc29)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc36)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc37)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc37)
          %9 = cir.cmp(gt, %6, %8) : !s64i, !cir.bool loc(#loc224)
          cir.if %9 {
            %10 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc226)
            %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc41)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc40)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc40)
            %14 = cir.binop(mul, %11, %13) nsw : !s64i loc(#loc41)
            cir.store %14, %10 : !s64i, !cir.ptr<!s64i> loc(#loc226)
            %15 = cir.load %10 : !cir.ptr<!s64i>, !s64i loc(#loc42)
            cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc43)
          } loc(#loc225)
        } loc(#loc223)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc46)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc47)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc47)
          %9 = cir.cmp(gt, %6, %8) : !s64i, !cir.bool loc(#loc228)
          cir.if %9 {
            cir.scope {
              %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc51)
              %11 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc52)
              %12 = cir.const #cir.int<2> : !s32i loc(#loc53)
              %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc53)
              %14 = cir.binop(div, %11, %13) : !s64i loc(#loc231)
              %15 = cir.cmp(lt, %10, %14) : !s64i, !cir.bool loc(#loc232)
              cir.if %15 {
                %16 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc234)
                %17 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc60)
                %18 = cir.const #cir.int<2> : !s32i loc(#loc59)
                %19 = cir.cast(integral, %18 : !s32i), !s64i loc(#loc59)
                %20 = cir.binop(mul, %17, %19) nsw : !s64i loc(#loc60)
                cir.store %20, %16 : !s64i, !cir.ptr<!s64i> loc(#loc234)
                %21 = cir.load %16 : !cir.ptr<!s64i>, !s64i loc(#loc61)
                cir.call @printLongLongLine(%21) : (!s64i) -> () loc(#loc62)
              } else {
                %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc9)
                %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc63)
              } loc(#loc233)
            } loc(#loc230)
          } loc(#loc229)
        } loc(#loc227)
      } loc(#loc222)
    } loc(#loc220)
    cir.return loc(#loc11)
  } loc(#loc212)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_multiply_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc236)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc66)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc237)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc68)
    cir.return loc(#loc65)
  } loc(#loc235)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc238)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc239)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc77)
  cir.func @main(%arg0: !s32i loc(fused[#loc80, #loc81]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc82, #loc83])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc241)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc242)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc79)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc84)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc85)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc86)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc86)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc87)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc74)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    %8 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc243)
    cir.call @CWE190_Integer_Overflow__int64_t_rand_multiply_12_good() : () -> () loc(#loc89)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc75)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc76)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    %13 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc244)
    cir.call @CWE190_Integer_Overflow__int64_t_rand_multiply_12_bad() : () -> () loc(#loc93)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc77)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc96)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc245)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc245)
    cir.return %17 : !s32i loc(#loc245)
  } loc(#loc240)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc247)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc102)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc248)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc250)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc250)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc106)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc106)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc111)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc111)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc111)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc111)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc111)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc111)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc111)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc111)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc111)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc111)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc111)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc111)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc111)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc111)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc111)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc111)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc111)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc111)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc111)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc111)
          cir.yield %33 : !u64i loc(#loc111)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc111)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc111)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc111)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc111)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc111)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc111)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc111)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc111)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc111)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc111)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc111)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc111)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc111)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc111)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc111)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc111)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc111)
          %34 = cir.unary(minus, %33) : !u64i, !u64i loc(#loc111)
          %35 = cir.const #cir.int<1> : !s32i loc(#loc111)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc111)
          %37 = cir.binop(sub, %34, %36) : !u64i loc(#loc111)
          cir.yield %37 : !u64i loc(#loc111)
        }) : (!cir.bool) -> !u64i loc(#loc111)
        %11 = cir.cast(integral, %10 : !u64i), !s64i loc(#loc111)
        cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc252)
      } else {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc113)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc113)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc113)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc113)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc113)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc113)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc113)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc113)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc113)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc113)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc113)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc113)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc113)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc113)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc113)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc113)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc113)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc113)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc113)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc113)
          cir.yield %33 : !u64i loc(#loc113)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc113)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc113)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc113)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc113)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc113)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc113)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc113)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc113)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc113)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc113)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc113)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc113)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc113)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc113)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc113)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc113)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc113)
          %34 = cir.unary(minus, %33) : !u64i, !u64i loc(#loc113)
          %35 = cir.const #cir.int<1> : !s32i loc(#loc113)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc113)
          %37 = cir.binop(sub, %34, %36) : !u64i loc(#loc113)
          cir.yield %37 : !u64i loc(#loc113)
        }) : (!cir.bool) -> !u64i loc(#loc113)
        %11 = cir.cast(integral, %10 : !u64i), !s64i loc(#loc113)
        cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc253)
      } loc(#loc251)
    } loc(#loc249)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc255)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc255)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc117)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc117)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc124)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc125)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc125)
          %9 = cir.cmp(gt, %6, %8) : !s64i, !cir.bool loc(#loc258)
          cir.if %9 {
            cir.scope {
              %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc129)
              %11 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc130)
              %12 = cir.const #cir.int<2> : !s32i loc(#loc131)
              %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc131)
              %14 = cir.binop(div, %11, %13) : !s64i loc(#loc261)
              %15 = cir.cmp(lt, %10, %14) : !s64i, !cir.bool loc(#loc262)
              cir.if %15 {
                %16 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc264)
                %17 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc138)
                %18 = cir.const #cir.int<2> : !s32i loc(#loc137)
                %19 = cir.cast(integral, %18 : !s32i), !s64i loc(#loc137)
                %20 = cir.binop(mul, %17, %19) nsw : !s64i loc(#loc138)
                cir.store %20, %16 : !s64i, !cir.ptr<!s64i> loc(#loc264)
                %21 = cir.load %16 : !cir.ptr<!s64i>, !s64i loc(#loc139)
                cir.call @printLongLongLine(%21) : (!s64i) -> () loc(#loc140)
              } else {
                %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc141)
                %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc141)
                cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc142)
              } loc(#loc263)
            } loc(#loc260)
          } loc(#loc259)
        } loc(#loc257)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc145)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc146)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc146)
          %9 = cir.cmp(gt, %6, %8) : !s64i, !cir.bool loc(#loc266)
          cir.if %9 {
            cir.scope {
              %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc150)
              %11 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc151)
              %12 = cir.const #cir.int<2> : !s32i loc(#loc152)
              %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc152)
              %14 = cir.binop(div, %11, %13) : !s64i loc(#loc269)
              %15 = cir.cmp(lt, %10, %14) : !s64i, !cir.bool loc(#loc270)
              cir.if %15 {
                %16 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc272)
                %17 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc159)
                %18 = cir.const #cir.int<2> : !s32i loc(#loc158)
                %19 = cir.cast(integral, %18 : !s32i), !s64i loc(#loc158)
                %20 = cir.binop(mul, %17, %19) nsw : !s64i loc(#loc159)
                cir.store %20, %16 : !s64i, !cir.ptr<!s64i> loc(#loc272)
                %21 = cir.load %16 : !cir.ptr<!s64i>, !s64i loc(#loc160)
                cir.call @printLongLongLine(%21) : (!s64i) -> () loc(#loc161)
              } else {
                %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc162)
                %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc162)
                cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc163)
              } loc(#loc271)
            } loc(#loc268)
          } loc(#loc267)
        } loc(#loc265)
      } loc(#loc256)
    } loc(#loc254)
    cir.return loc(#loc99)
  } loc(#loc246)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc274)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc168)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc275)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc277)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc277)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc172)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc172)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc177)
        %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc177)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc279)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc179)
        %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc179)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc280)
      } loc(#loc278)
    } loc(#loc276)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc282)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc282)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc183)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc183)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc190)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc191)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc191)
          %9 = cir.cmp(gt, %6, %8) : !s64i, !cir.bool loc(#loc285)
          cir.if %9 {
            %10 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc287)
            %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc195)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc194)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc194)
            %14 = cir.binop(mul, %11, %13) nsw : !s64i loc(#loc195)
            cir.store %14, %10 : !s64i, !cir.ptr<!s64i> loc(#loc287)
            %15 = cir.load %10 : !cir.ptr<!s64i>, !s64i loc(#loc196)
            cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc197)
          } loc(#loc286)
        } loc(#loc284)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc200)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc201)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc201)
          %9 = cir.cmp(gt, %6, %8) : !s64i, !cir.bool loc(#loc289)
          cir.if %9 {
            %10 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc291)
            %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc205)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc204)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc204)
            %14 = cir.binop(mul, %11, %13) nsw : !s64i loc(#loc205)
            cir.store %14, %10 : !s64i, !cir.ptr<!s64i> loc(#loc291)
            %15 = cir.load %10 : !cir.ptr<!s64i>, !s64i loc(#loc206)
            cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc207)
          } loc(#loc290)
        } loc(#loc288)
      } loc(#loc283)
    } loc(#loc281)
    cir.return loc(#loc165)
  } loc(#loc273)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":57:27)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":22:1)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":61:1)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":24:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":24:13)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":25:12)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":25:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":26:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":35:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":26:8)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":26:33)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":27:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":30:5)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":32:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":29:25)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":29:9)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":34:16)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":34:9)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":36:5)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":60:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":36:8)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":36:33)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":37:5)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":44:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":46:5)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":38:9)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":43:9)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":38:12)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":38:19)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":39:9)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":41:13)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":41:37)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":41:30)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":42:31)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":42:13)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":47:9)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":59:9)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":47:12)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":47:19)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":48:9)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":50:13)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":58:13)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":50:17)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":50:25)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":50:35)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":50:36)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":51:13)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":54:13)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":56:13)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":52:17)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":52:41)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":52:34)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":53:35)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":53:17)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":57:17)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":155:1)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":159:1)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":157:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":157:13)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":158:5)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":158:13)
#loc70 = loc("/usr/include/stdlib.h":575:1)
#loc71 = loc("/usr/include/stdlib.h":575:41)
#loc72 = loc("/usr/include/time.h":76:1)
#loc73 = loc("/usr/include/time.h":76:38)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":175:15)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":177:15)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":180:15)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":182:15)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":170:1)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":185:1)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":171:1)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":173:27)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":173:22)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":173:5)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":175:5)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":176:5)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":176:60)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":177:5)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":180:5)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":181:5)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":181:59)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":182:5)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":184:12)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":184:5)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":70:1)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":116:1)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":72:5)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":72:13)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":73:12)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":73:5)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":74:5)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":83:5)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":74:8)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":74:33)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":75:5)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":78:5)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":80:5)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":77:25)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":77:9)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":82:25)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":82:9)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":84:5)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":115:5)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":84:8)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":84:33)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":85:5)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":99:5)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":101:5)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":86:9)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":98:9)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":86:12)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":86:19)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":87:9)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":89:13)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":97:13)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":89:17)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":89:25)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":89:35)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":89:36)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":90:13)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":93:13)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":95:13)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":91:17)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":91:41)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":91:34)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":92:35)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":92:17)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":96:27)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":96:17)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":102:9)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":114:9)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":102:12)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":102:19)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":103:9)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":105:13)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":113:13)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":105:17)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":105:25)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":105:35)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":105:36)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":106:13)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":109:13)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":111:13)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":107:17)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":107:41)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":107:34)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":108:35)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":108:17)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":112:27)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":112:17)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":121:1)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":153:1)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":123:5)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":123:13)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":124:12)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":124:5)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":125:5)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":134:5)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":125:8)
#loc173 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":125:33)
#loc174 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":126:5)
#loc175 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":129:5)
#loc176 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":131:5)
#loc177 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":128:16)
#loc178 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":128:9)
#loc179 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":133:16)
#loc180 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":133:9)
#loc181 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":135:5)
#loc182 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":152:5)
#loc183 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":135:8)
#loc184 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":135:33)
#loc185 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":136:5)
#loc186 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":143:5)
#loc187 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":145:5)
#loc188 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":137:9)
#loc189 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":142:9)
#loc190 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":137:12)
#loc191 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":137:19)
#loc192 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":138:9)
#loc193 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":140:13)
#loc194 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":140:37)
#loc195 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":140:30)
#loc196 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":141:31)
#loc197 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":141:13)
#loc198 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":146:9)
#loc199 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":151:9)
#loc200 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":146:12)
#loc201 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":146:19)
#loc202 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":147:9)
#loc203 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":149:13)
#loc204 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":149:37)
#loc205 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":149:30)
#loc206 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":150:31)
#loc207 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_12.c":150:13)
#loc208 = loc(fused[#loc1, #loc2])
#loc209 = loc(fused[#loc3, #loc4])
#loc210 = loc(fused[#loc5, #loc6])
#loc211 = loc(fused[#loc7, #loc8])
#loc212 = loc(fused[#loc10, #loc11])
#loc213 = loc(fused[#loc12, #loc13])
#loc214 = loc(fused[#loc15, #loc14])
#loc215 = loc(fused[#loc16, #loc17])
#loc216 = loc(fused[#loc18, #loc19])
#loc217 = loc(fused[#loc20, #loc21, #loc22, #loc17])
#loc218 = loc(fused[#loc24, #loc23])
#loc219 = loc(fused[#loc26, #loc25])
#loc220 = loc(fused[#loc27, #loc28])
#loc221 = loc(fused[#loc29, #loc30])
#loc222 = loc(fused[#loc31, #loc32, #loc33, #loc28])
#loc223 = loc(fused[#loc34, #loc35])
#loc224 = loc(fused[#loc36, #loc37])
#loc225 = loc(fused[#loc38, #loc35])
#loc226 = loc(fused[#loc39, #loc40])
#loc227 = loc(fused[#loc44, #loc45])
#loc228 = loc(fused[#loc46, #loc47])
#loc229 = loc(fused[#loc48, #loc45])
#loc230 = loc(fused[#loc49, #loc50])
#loc231 = loc(fused[#loc52, #loc53])
#loc232 = loc(fused[#loc51, #loc54])
#loc233 = loc(fused[#loc55, #loc56, #loc57, #loc50])
#loc234 = loc(fused[#loc58, #loc59])
#loc235 = loc(fused[#loc64, #loc65])
#loc236 = loc(fused[#loc66, #loc67])
#loc237 = loc(fused[#loc68, #loc69])
#loc238 = loc(fused[#loc70, #loc71])
#loc239 = loc(fused[#loc72, #loc73])
#loc240 = loc(fused[#loc78, #loc79])
#loc243 = loc(fused[#loc89, #loc90])
#loc244 = loc(fused[#loc93, #loc94])
#loc245 = loc(fused[#loc97, #loc96])
#loc246 = loc(fused[#loc98, #loc99])
#loc247 = loc(fused[#loc100, #loc101])
#loc248 = loc(fused[#loc103, #loc102])
#loc249 = loc(fused[#loc104, #loc105])
#loc250 = loc(fused[#loc106, #loc107])
#loc251 = loc(fused[#loc108, #loc109, #loc110, #loc105])
#loc252 = loc(fused[#loc112, #loc111])
#loc253 = loc(fused[#loc114, #loc113])
#loc254 = loc(fused[#loc115, #loc116])
#loc255 = loc(fused[#loc117, #loc118])
#loc256 = loc(fused[#loc119, #loc120, #loc121, #loc116])
#loc257 = loc(fused[#loc122, #loc123])
#loc258 = loc(fused[#loc124, #loc125])
#loc259 = loc(fused[#loc126, #loc123])
#loc260 = loc(fused[#loc127, #loc128])
#loc261 = loc(fused[#loc130, #loc131])
#loc262 = loc(fused[#loc129, #loc132])
#loc263 = loc(fused[#loc133, #loc134, #loc135, #loc128])
#loc264 = loc(fused[#loc136, #loc137])
#loc265 = loc(fused[#loc143, #loc144])
#loc266 = loc(fused[#loc145, #loc146])
#loc267 = loc(fused[#loc147, #loc144])
#loc268 = loc(fused[#loc148, #loc149])
#loc269 = loc(fused[#loc151, #loc152])
#loc270 = loc(fused[#loc150, #loc153])
#loc271 = loc(fused[#loc154, #loc155, #loc156, #loc149])
#loc272 = loc(fused[#loc157, #loc158])
#loc273 = loc(fused[#loc164, #loc165])
#loc274 = loc(fused[#loc166, #loc167])
#loc275 = loc(fused[#loc169, #loc168])
#loc276 = loc(fused[#loc170, #loc171])
#loc277 = loc(fused[#loc172, #loc173])
#loc278 = loc(fused[#loc174, #loc175, #loc176, #loc171])
#loc279 = loc(fused[#loc178, #loc177])
#loc280 = loc(fused[#loc180, #loc179])
#loc281 = loc(fused[#loc181, #loc182])
#loc282 = loc(fused[#loc183, #loc184])
#loc283 = loc(fused[#loc185, #loc186, #loc187, #loc182])
#loc284 = loc(fused[#loc188, #loc189])
#loc285 = loc(fused[#loc190, #loc191])
#loc286 = loc(fused[#loc192, #loc189])
#loc287 = loc(fused[#loc193, #loc194])
#loc288 = loc(fused[#loc198, #loc199])
#loc289 = loc(fused[#loc200, #loc201])
#loc290 = loc(fused[#loc202, #loc199])
#loc291 = loc(fused[#loc203, #loc204])
