!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc20 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":65:77)
#loc21 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":65:84)
#loc103 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":104:44)
#loc153 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":142:81)
#loc154 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":142:88)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc169 = loc(fused[#loc20, #loc21])
#loc220 = loc(fused[#loc153, #loc154])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc160)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc161)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc162)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc7)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc163)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc164)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc165)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc166)
  cir.func private @close(!s32i) -> !s32i loc(#loc167)
  cir.func @CWE78_OS_Command_Injection__char_connect_socket_execlp_61b_badSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc20, #loc21])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc170)
    %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc171)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc172)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc173)
    %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc174)
    %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc169)
    %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc19)
    cir.store %arg0, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc32)
    cir.br ^bb1 loc(#loc175)
  ^bb1:  // pred: ^bb0
    %7 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc29)
    cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc173)
    %9 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc35)
    %10 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
    %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc35)
    cir.store %11, %4 : !u64i, !cir.ptr<!u64i> loc(#loc174)
    cir.br ^bb2 loc(#loc176)
  ^bb2:  // pred: ^bb1
    cir.br ^bb4 loc(#loc176)
  ^bb3:  // pred: ^bb32
    %12 = cir.const #cir.int<0> : !s32i loc(#loc39)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc39)
    cir.brcond %13 ^bb4, ^bb33 loc(#loc39)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %14 = cir.const #cir.int<2> : !s32i loc(#loc40)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %16 = cir.const #cir.int<6> : !s32i loc(#loc42)
    %17 = cir.call @socket(%14, %15, %16) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc43)
    cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    cir.br ^bb5 loc(#loc178)
  ^bb5:  // pred: ^bb4
    %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc48)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc49)
    %21 = cir.cmp(eq, %18, %20) : !s32i, !cir.bool loc(#loc179)
    cir.brcond %21 ^bb6, ^bb7 loc(#loc180)
  ^bb6:  // pred: ^bb5
    cir.br ^bb33 loc(#loc51)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc47)
  ^bb8:  // pred: ^bb7
    %22 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc181)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc54)
    %24 = cir.const #cir.int<16> : !u64i loc(#loc182)
    cir.libc.memset %24 bytes from %22 set to %23 : !cir.ptr<!void>, !s32i, !u64i loc(#loc183)
    %25 = cir.const #cir.int<2> : !s32i loc(#loc59)
    %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc59)
    %27 = cir.get_member %1[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc60)
    cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc184)
    %28 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc7)
    %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc7)
    %30 = cir.call @inet_addr(%29) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc62)
    %31 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc63)
    %32 = cir.get_member %31[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc64)
    cir.store %30, %32 : !u32i, !cir.ptr<!u32i> loc(#loc185)
    %33 = cir.const #cir.int<27015> : !s32i loc(#loc67)
    %34 = cir.cast(integral, %33 : !s32i), !u16i loc(#loc67)
    %35 = cir.call @htons(%34) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc68)
    %36 = cir.get_member %1[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
    cir.store %35, %36 : !u16i, !cir.ptr<!u16i> loc(#loc186)
    cir.br ^bb9 loc(#loc187)
  ^bb9:  // pred: ^bb8
    %37 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    %38 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc188)
    %39 = cir.const #cir.int<16> : !u64i loc(#loc189)
    %40 = cir.cast(integral, %39 : !u64i), !u32i loc(#loc189)
    %41 = cir.call @connect(%37, %38, %40) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc79)
    %42 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %43 = cir.unary(minus, %42) : !s32i, !s32i loc(#loc80)
    %44 = cir.cmp(eq, %41, %43) : !s32i, !cir.bool loc(#loc190)
    cir.brcond %44 ^bb10, ^bb11 loc(#loc191)
  ^bb10:  // pred: ^bb9
    cir.br ^bb33 loc(#loc82)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc73)
  ^bb12:  // pred: ^bb11
    %45 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc83)
    %46 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc84)
    %47 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc85)
    %48 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %47 : !u64i), !cir.ptr<!s8i> loc(#loc86)
    %49 = cir.cast(bitcast, %48 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc192)
    %50 = cir.const #cir.int<1> : !u64i loc(#loc193)
    %51 = cir.const #cir.int<100> : !s32i loc(#loc91)
    %52 = cir.cast(integral, %51 : !s32i), !u64i loc(#loc91)
    %53 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc92)
    %54 = cir.binop(sub, %52, %53) : !u64i loc(#loc194)
    %55 = cir.const #cir.int<1> : !s32i loc(#loc93)
    %56 = cir.cast(integral, %55 : !s32i), !u64i loc(#loc93)
    %57 = cir.binop(sub, %54, %56) : !u64i loc(#loc195)
    %58 = cir.binop(mul, %50, %57) : !u64i loc(#loc196)
    %59 = cir.const #cir.int<0> : !s32i loc(#loc95)
    %60 = cir.call @recv(%45, %49, %58, %59) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc96)
    %61 = cir.cast(integral, %60 : !s64i), !s32i loc(#loc96)
    cir.store %61, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    cir.br ^bb13 loc(#loc198)
  ^bb13:  // pred: ^bb12
    %62 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    %63 = cir.const #cir.int<1> : !s32i loc(#loc102)
    %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc102)
    %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc199)
    cir.brcond %65 ^bb14, ^bb15 loc(#loc103)
  ^bb14:  // pred: ^bb13
    %66 = cir.const #true loc(#loc103)
    cir.br ^bb20(%66 : !cir.bool) loc(#loc103)
  ^bb15:  // pred: ^bb13
    %67 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc104)
    %68 = cir.const #cir.int<0> : !s32i loc(#loc105)
    %69 = cir.cmp(eq, %67, %68) : !s32i, !cir.bool loc(#loc200)
    cir.brcond %69 ^bb16, ^bb17 loc(#loc103)
  ^bb16:  // pred: ^bb15
    %70 = cir.const #true loc(#loc103)
    cir.br ^bb18(%70 : !cir.bool) loc(#loc103)
  ^bb17:  // pred: ^bb15
    %71 = cir.const #false loc(#loc103)
    cir.br ^bb18(%71 : !cir.bool) loc(#loc103)
  ^bb18(%72: !cir.bool loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":104:44)):  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc103)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20(%72 : !cir.bool) loc(#loc103)
  ^bb20(%73: !cir.bool loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":104:44)):  // 2 preds: ^bb14, ^bb19
    cir.br ^bb21 loc(#loc103)
  ^bb21:  // pred: ^bb20
    cir.brcond %73 ^bb22, ^bb23 loc(#loc201)
  ^bb22:  // pred: ^bb21
    cir.br ^bb33 loc(#loc107)
  ^bb23:  // pred: ^bb21
    cir.br ^bb24 loc(#loc100)
  ^bb24:  // pred: ^bb23
    %74 = cir.const #cir.int<0> : !s32i loc(#loc108)
    %75 = cir.cast(integral, %74 : !s32i), !s8i loc(#loc108)
    %76 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc109)
    %77 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc110)
    %78 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
    %79 = cir.cast(integral, %78 : !s32i), !u64i loc(#loc111)
    %80 = cir.const #cir.int<1> : !u64i loc(#loc202)
    %81 = cir.binop(div, %79, %80) : !u64i loc(#loc203)
    %82 = cir.binop(add, %77, %81) : !u64i loc(#loc204)
    %83 = cir.ptr_stride(%76 : !cir.ptr<!s8i>, %82 : !u64i), !cir.ptr<!s8i> loc(#loc114)
    cir.store %75, %83 : !s8i, !cir.ptr<!s8i> loc(#loc205)
    %84 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
    %85 = cir.const #cir.int<13> : !s32i loc(#loc116)
    %86 = cir.call @strchr(%84, %85) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc117)
    cir.store %86, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc206)
    cir.br ^bb25 loc(#loc207)
  ^bb25:  // pred: ^bb24
    %87 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc122)
    %88 = cir.cast(ptr_to_bool, %87 : !cir.ptr<!s8i>), !cir.bool loc(#loc122)
    cir.brcond %88 ^bb26, ^bb27 loc(#loc208)
  ^bb26:  // pred: ^bb25
    %89 = cir.const #cir.int<0> : !s32i loc(#loc124)
    %90 = cir.cast(integral, %89 : !s32i), !s8i loc(#loc124)
    %91 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
    cir.store %90, %91 : !s8i, !cir.ptr<!s8i> loc(#loc209)
    cir.br ^bb27 loc(#loc121)
  ^bb27:  // 2 preds: ^bb25, ^bb26
    cir.br ^bb28 loc(#loc121)
  ^bb28:  // pred: ^bb27
    %92 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
    %93 = cir.const #cir.int<10> : !s32i loc(#loc128)
    %94 = cir.call @strchr(%92, %93) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc129)
    cir.store %94, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc210)
    cir.br ^bb29 loc(#loc211)
  ^bb29:  // pred: ^bb28
    %95 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
    %96 = cir.cast(ptr_to_bool, %95 : !cir.ptr<!s8i>), !cir.bool loc(#loc134)
    cir.brcond %96 ^bb30, ^bb31 loc(#loc212)
  ^bb30:  // pred: ^bb29
    %97 = cir.const #cir.int<0> : !s32i loc(#loc136)
    %98 = cir.cast(integral, %97 : !s32i), !s8i loc(#loc136)
    %99 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc137)
    cir.store %98, %99 : !s8i, !cir.ptr<!s8i> loc(#loc213)
    cir.br ^bb31 loc(#loc133)
  ^bb31:  // 2 preds: ^bb29, ^bb30
    cir.br ^bb32 loc(#loc133)
  ^bb32:  // pred: ^bb31
    cir.br ^bb3 loc(#loc38)
  ^bb33:  // 4 preds: ^bb3, ^bb6, ^bb10, ^bb22
    cir.br ^bb34 loc(#loc38)
  ^bb34:  // pred: ^bb33
    cir.br ^bb35 loc(#loc214)
  ^bb35:  // pred: ^bb34
    %100 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc141)
    %101 = cir.const #cir.int<1> : !s32i loc(#loc142)
    %102 = cir.unary(minus, %101) : !s32i, !s32i loc(#loc142)
    %103 = cir.cmp(ne, %100, %102) : !s32i, !cir.bool loc(#loc215)
    cir.brcond %103 ^bb36, ^bb37 loc(#loc216)
  ^bb36:  // pred: ^bb35
    %104 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc144)
    %105 = cir.call @close(%104) : (!s32i) -> !s32i loc(#loc145)
    cir.br ^bb37 loc(#loc140)
  ^bb37:  // 2 preds: ^bb35, ^bb36
    cir.br ^bb38 loc(#loc140)
  ^bb38:  // pred: ^bb37
    cir.br ^bb39 loc(#loc34)
  ^bb39:  // pred: ^bb38
    %106 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc146)
    cir.store %106, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc217)
    %107 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc217)
    cir.return %107 : !cir.ptr<!s8i> loc(#loc217)
  } loc(#loc168)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc218)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc150)
  cir.func @CWE78_OS_Command_Injection__char_connect_socket_execlp_61b_goodG2BSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc153, #loc154])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc220)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc152)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc155)
    %2 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc156)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc157)
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc150)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc150)
    %6 = cir.call @strcat(%3, %5) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc156)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc158)
    cir.store %7, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc221)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc221)
    cir.return %8 : !cir.ptr<!s8i> loc(#loc221)
  } loc(#loc219)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("/usr/include/sys/socket.h":102:1)
#loc4 = loc("/usr/include/sys/socket.h":102:62)
#loc5 = loc("/usr/include/arpa/inet.h":34:1)
#loc6 = loc("/usr/include/arpa/inet.h":34:47)
#loc7 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":94:49)
#loc8 = loc("/usr/include/netinet/in.h":404:1)
#loc9 = loc("/usr/include/netinet/in.h":405:40)
#loc10 = loc("/usr/include/sys/socket.h":126:1)
#loc11 = loc("/usr/include/sys/socket.h":126:75)
#loc12 = loc("/usr/include/sys/socket.h":145:1)
#loc13 = loc("/usr/include/sys/socket.h":145:68)
#loc14 = loc("/usr/include/string.h":246:1)
#loc15 = loc("/usr/include/string.h":247:33)
#loc16 = loc("/usr/include/unistd.h":358:1)
#loc17 = loc("/usr/include/unistd.h":358:27)
#loc18 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":65:1)
#loc19 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":135:1)
#loc22 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":72:9)
#loc23 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":72:13)
#loc24 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":73:9)
#loc25 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":73:28)
#loc26 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":74:9)
#loc27 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":74:15)
#loc28 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":75:9)
#loc29 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":75:32)
#loc30 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":76:9)
#loc31 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":76:37)
#loc32 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":66:1)
#loc33 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":67:5)
#loc34 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":133:5)
#loc35 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":76:26)
#loc36 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":76:33)
#loc37 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":77:9)
#loc38 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":122:17)
#loc39 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":122:16)
#loc40 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":87:36)
#loc41 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":87:45)
#loc42 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":87:58)
#loc43 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":87:29)
#loc44 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":87:13)
#loc45 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":87:69)
#loc46 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":88:13)
#loc47 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":91:13)
#loc48 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":88:17)
#loc49 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":88:34)
#loc50 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":89:13)
#loc51 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":90:17)
#loc52 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":92:20)
#loc53 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":92:21)
#loc54 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":92:30)
#loc55 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":92:33)
#loc56 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":92:47)
#loc57 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":92:13)
#loc58 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":92:48)
#loc59 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":93:34)
#loc60 = loc("/usr/include/netinet/in.h":249:5)
#loc61 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":93:13)
#loc62 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":94:39)
#loc63 = loc("/usr/include/netinet/in.h":251:20)
#loc64 = loc("/usr/include/netinet/in.h":33:15)
#loc65 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":94:13)
#loc66 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":94:59)
#loc67 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":95:38)
#loc68 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":95:32)
#loc69 = loc("/usr/include/netinet/in.h":250:15)
#loc70 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":95:13)
#loc71 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":95:46)
#loc72 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":96:13)
#loc73 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":99:13)
#loc74 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":96:25)
#loc75 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":96:58)
#loc76 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":96:59)
#loc77 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":96:68)
#loc78 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":96:82)
#loc79 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":96:17)
#loc80 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":96:88)
#loc81 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":97:13)
#loc82 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":98:17)
#loc83 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:31)
#loc84 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:55)
#loc85 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:62)
#loc86 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:60)
#loc87 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:46)
#loc88 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:69)
#loc89 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:72)
#loc90 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:83)
#loc91 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:88)
#loc92 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:94)
#loc93 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:104)
#loc94 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:105)
#loc95 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:108)
#loc96 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:26)
#loc97 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:13)
#loc98 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":103:109)
#loc99 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":104:13)
#loc100 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":107:13)
#loc101 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":104:17)
#loc102 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":104:31)
#loc104 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":104:47)
#loc105 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":104:61)
#loc106 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":105:13)
#loc107 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":106:17)
#loc108 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":109:57)
#loc109 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":109:13)
#loc110 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":109:18)
#loc111 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":109:28)
#loc112 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":109:41)
#loc113 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":109:52)
#loc114 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":109:53)
#loc115 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":111:30)
#loc116 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":111:36)
#loc117 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":111:23)
#loc118 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":111:13)
#loc119 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":111:40)
#loc120 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":112:13)
#loc121 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":115:13)
#loc122 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":112:17)
#loc123 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":113:13)
#loc124 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":114:28)
#loc125 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":114:18)
#loc126 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":114:17)
#loc127 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":116:30)
#loc128 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":116:36)
#loc129 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":116:23)
#loc130 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":116:13)
#loc131 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":116:40)
#loc132 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":117:13)
#loc133 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":120:13)
#loc134 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":117:17)
#loc135 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":118:13)
#loc136 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":119:28)
#loc137 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":119:18)
#loc138 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":119:17)
#loc139 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":123:9)
#loc140 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":126:9)
#loc141 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":123:13)
#loc142 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":123:30)
#loc143 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":124:9)
#loc144 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":125:26)
#loc145 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":125:13)
#loc146 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":134:12)
#loc147 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":134:5)
#loc148 = loc("/usr/include/string.h":149:1)
#loc149 = loc("/usr/include/string.h":150:14)
#loc150 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":145:18)
#loc151 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":142:1)
#loc152 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":147:1)
#loc155 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":143:1)
#loc156 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":145:5)
#loc157 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":145:12)
#loc158 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":146:12)
#loc159 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_61b.c":146:5)
#loc160 = loc(fused[#loc1, #loc2])
#loc161 = loc(fused[#loc3, #loc4])
#loc162 = loc(fused[#loc5, #loc6])
#loc163 = loc(fused[#loc8, #loc9])
#loc164 = loc(fused[#loc10, #loc11])
#loc165 = loc(fused[#loc12, #loc13])
#loc166 = loc(fused[#loc14, #loc15])
#loc167 = loc(fused[#loc16, #loc17])
#loc168 = loc(fused[#loc18, #loc19])
#loc170 = loc(fused[#loc22, #loc23])
#loc171 = loc(fused[#loc24, #loc25])
#loc172 = loc(fused[#loc26, #loc27])
#loc173 = loc(fused[#loc28, #loc29])
#loc174 = loc(fused[#loc30, #loc31])
#loc175 = loc(fused[#loc33, #loc34])
#loc176 = loc(fused[#loc37, #loc38])
#loc177 = loc(fused[#loc44, #loc45])
#loc178 = loc(fused[#loc46, #loc47])
#loc179 = loc(fused[#loc48, #loc49])
#loc180 = loc(fused[#loc50, #loc47])
#loc181 = loc(fused[#loc52, #loc53])
#loc182 = loc(fused[#loc55, #loc56])
#loc183 = loc(fused[#loc57, #loc58])
#loc184 = loc(fused[#loc61, #loc59])
#loc185 = loc(fused[#loc65, #loc66])
#loc186 = loc(fused[#loc70, #loc71])
#loc187 = loc(fused[#loc72, #loc73])
#loc188 = loc(fused[#loc75, #loc76])
#loc189 = loc(fused[#loc77, #loc78])
#loc190 = loc(fused[#loc79, #loc80])
#loc191 = loc(fused[#loc81, #loc73])
#loc192 = loc(fused[#loc87, #loc88])
#loc193 = loc(fused[#loc89, #loc90])
#loc194 = loc(fused[#loc91, #loc92])
#loc195 = loc(fused[#loc91, #loc93])
#loc196 = loc(fused[#loc89, #loc94])
#loc197 = loc(fused[#loc97, #loc98])
#loc198 = loc(fused[#loc99, #loc100])
#loc199 = loc(fused[#loc101, #loc102])
#loc200 = loc(fused[#loc104, #loc105])
#loc201 = loc(fused[#loc106, #loc100])
#loc202 = loc(fused[#loc112, #loc113])
#loc203 = loc(fused[#loc111, #loc113])
#loc204 = loc(fused[#loc110, #loc113])
#loc205 = loc(fused[#loc109, #loc108])
#loc206 = loc(fused[#loc118, #loc119])
#loc207 = loc(fused[#loc120, #loc121])
#loc208 = loc(fused[#loc123, #loc121])
#loc209 = loc(fused[#loc126, #loc124])
#loc210 = loc(fused[#loc130, #loc131])
#loc211 = loc(fused[#loc132, #loc133])
#loc212 = loc(fused[#loc135, #loc133])
#loc213 = loc(fused[#loc138, #loc136])
#loc214 = loc(fused[#loc139, #loc140])
#loc215 = loc(fused[#loc141, #loc142])
#loc216 = loc(fused[#loc143, #loc140])
#loc217 = loc(fused[#loc147, #loc146])
#loc218 = loc(fused[#loc148, #loc149])
#loc219 = loc(fused[#loc151, #loc152])
#loc221 = loc(fused[#loc159, #loc158])
