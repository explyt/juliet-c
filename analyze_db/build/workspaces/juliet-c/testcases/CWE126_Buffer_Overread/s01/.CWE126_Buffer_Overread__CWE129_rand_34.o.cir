!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_CWE126_Buffer_Overread__CWE129_rand_34_unionType = !cir.record<union "CWE126_Buffer_Overread__CWE129_rand_34_unionType" {!s32i, !s32i}>
module @"/workspaces/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_rand_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc118)
  cir.func private @printIntLine(!s32i) loc(#loc119)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc120)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_rand_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc122)
    %1 = cir.alloca !ty_CWE126_Buffer_Overread__CWE129_rand_34_unionType, !cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc123)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc15)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc17)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc17)
    %8 = cir.ternary(%7, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc17)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc17)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc17)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc17)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc17)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc17)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc17)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc17)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc17)
      cir.yield %23 : !u32i loc(#loc17)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc17)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc17)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc17)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc17)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc17)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc17)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc17)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc17)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc17)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc17)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc17)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc17)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc17)
      cir.yield %27 : !u32i loc(#loc17)
    }) : (!cir.bool) -> !u32i loc(#loc17)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc17)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %11 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_34_unionType> -> !cir.ptr<!s32i> loc(#loc20)
    cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    cir.scope {
      %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc128)
      %13 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_34_unionType> -> !cir.ptr<!s32i> loc(#loc26)
      %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc25)
      cir.store %14, %12 : !s32i, !cir.ptr<!s32i> loc(#loc128)
      cir.scope {
        %15 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc130)
        %16 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc130)
        cir.store %16, %15 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc130)
        cir.scope {
          %17 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc33)
          %18 = cir.const #cir.int<0> : !s32i loc(#loc34)
          %19 = cir.cmp(ge, %17, %18) : !s32i, !cir.bool loc(#loc132)
          cir.if %19 {
            %20 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc38)
            %21 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc39)
            %22 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc39)
            %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc39)
            cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc40)
          } else {
            %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc7)
            %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc7)
            cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc41)
          } loc(#loc133)
        } loc(#loc131)
      } loc(#loc129)
    } loc(#loc127)
    cir.return loc(#loc9)
  } loc(#loc121)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_rand_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc135)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc136)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    cir.return loc(#loc43)
  } loc(#loc134)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc138)
    %1 = cir.alloca !ty_CWE126_Buffer_Overread__CWE129_rand_34_unionType, !cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc139)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc54)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc55)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    %4 = cir.const #cir.int<7> : !s32i loc(#loc57)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    %6 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_34_unionType> -> !cir.ptr<!s32i> loc(#loc20)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc142)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc144)
      %8 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_34_unionType> -> !cir.ptr<!s32i> loc(#loc26)
      %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc64)
      cir.store %9, %7 : !s32i, !cir.ptr<!s32i> loc(#loc144)
      cir.scope {
        %10 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc146)
        %11 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc146)
        cir.store %11, %10 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc146)
        cir.scope {
          %12 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc71)
          %13 = cir.const #cir.int<0> : !s32i loc(#loc72)
          %14 = cir.cmp(ge, %12, %13) : !s32i, !cir.bool loc(#loc148)
          cir.if %14 {
            %15 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc76)
            %16 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc77)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc77)
            %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc77)
            cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc78)
          } else {
            %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc79)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc79)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc80)
          } loc(#loc149)
        } loc(#loc147)
      } loc(#loc145)
    } loc(#loc143)
    cir.return loc(#loc49)
  } loc(#loc137)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc81)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc151)
    %1 = cir.alloca !ty_CWE126_Buffer_Overread__CWE129_rand_34_unionType, !cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc152)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc89)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc153)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc91)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc91)
    %8 = cir.ternary(%7, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc91)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc91)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc91)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc91)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc91)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc91)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc91)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc91)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc91)
      cir.yield %23 : !u32i loc(#loc91)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc91)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc91)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc91)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc91)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc91)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc91)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc91)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc91)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc91)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc91)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc91)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc91)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc91)
      cir.yield %27 : !u32i loc(#loc91)
    }) : (!cir.bool) -> !u32i loc(#loc91)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc91)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc154)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
    %11 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_34_unionType> -> !cir.ptr<!s32i> loc(#loc20)
    cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc155)
    cir.scope {
      %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc157)
      %13 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE126_Buffer_Overread__CWE129_rand_34_unionType> -> !cir.ptr<!s32i> loc(#loc26)
      %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc98)
      cir.store %14, %12 : !s32i, !cir.ptr<!s32i> loc(#loc157)
      cir.scope {
        %15 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc159)
        %16 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc159)
        cir.store %16, %15 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc159)
        cir.scope {
          %17 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc105)
          %18 = cir.const #cir.int<0> : !s32i loc(#loc106)
          %19 = cir.cmp(ge, %17, %18) : !s32i, !cir.bool loc(#loc161)
          %20 = cir.ternary(%19, true {
            %21 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc108)
            %22 = cir.const #cir.int<10> : !s32i loc(#loc109)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc162)
            %24 = cir.ternary(%23, true {
              %25 = cir.const #true loc(#loc107)
              cir.yield %25 : !cir.bool loc(#loc107)
            }, false {
              %25 = cir.const #false loc(#loc107)
              cir.yield %25 : !cir.bool loc(#loc107)
            }) : (!cir.bool) -> !cir.bool loc(#loc107)
            cir.yield %24 : !cir.bool loc(#loc107)
          }, false {
            %21 = cir.const #false loc(#loc107)
            cir.yield %21 : !cir.bool loc(#loc107)
          }) : (!cir.bool) -> !cir.bool loc(#loc107)
          cir.if %20 {
            %21 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc114)
            %22 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc115)
            %23 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc115)
            %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc115)
            cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc116)
          } else {
            %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc81)
            %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc81)
            cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc117)
          } loc(#loc163)
        } loc(#loc160)
      } loc(#loc158)
    } loc(#loc156)
    cir.return loc(#loc83)
  } loc(#loc150)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_rand_34.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":49:27)
#loc8 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":28:1)
#loc9 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":53:1)
#loc10 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":30:5)
#loc11 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":30:9)
#loc12 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":31:5)
#loc13 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":31:54)
#loc14 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":33:13)
#loc15 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":33:12)
#loc16 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":33:5)
#loc17 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":35:12)
#loc18 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":35:5)
#loc19 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":36:26)
#loc20 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":22:9)
#loc21 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":36:5)
#loc22 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":37:5)
#loc23 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":52:5)
#loc24 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":38:9)
#loc25 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":38:28)
#loc26 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":23:9)
#loc27 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":39:9)
#loc28 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":51:9)
#loc29 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":40:13)
#loc30 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":40:34)
#loc31 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":43:13)
#loc32 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":50:13)
#loc33 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":43:17)
#loc34 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":43:25)
#loc35 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":44:13)
#loc36 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":46:13)
#loc37 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":48:13)
#loc38 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":45:37)
#loc39 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":45:30)
#loc40 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":45:17)
#loc41 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":49:17)
#loc42 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":115:1)
#loc43 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":119:1)
#loc44 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":117:5)
#loc45 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":117:13)
#loc46 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":118:5)
#loc47 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":118:13)
#loc48 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":60:1)
#loc49 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":86:1)
#loc50 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":62:5)
#loc51 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":62:9)
#loc52 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":63:5)
#loc53 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":63:54)
#loc54 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":65:13)
#loc55 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":65:12)
#loc56 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":65:5)
#loc57 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":68:12)
#loc58 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":68:5)
#loc59 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":69:26)
#loc60 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":69:5)
#loc61 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":70:5)
#loc62 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":85:5)
#loc63 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":71:9)
#loc64 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":71:28)
#loc65 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":72:9)
#loc66 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":84:9)
#loc67 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":73:13)
#loc68 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":73:34)
#loc69 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":76:13)
#loc70 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":83:13)
#loc71 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":76:17)
#loc72 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":76:25)
#loc73 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":77:13)
#loc74 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":79:13)
#loc75 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":81:13)
#loc76 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":78:37)
#loc77 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":78:30)
#loc78 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":78:17)
#loc79 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":82:27)
#loc80 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":82:17)
#loc81 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":109:27)
#loc82 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":89:1)
#loc83 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":113:1)
#loc84 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":91:5)
#loc85 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":91:9)
#loc86 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":92:5)
#loc87 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":92:54)
#loc88 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":94:13)
#loc89 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":94:12)
#loc90 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":94:5)
#loc91 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":96:12)
#loc92 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":96:5)
#loc93 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":97:26)
#loc94 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":97:5)
#loc95 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":98:5)
#loc96 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":112:5)
#loc97 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":99:9)
#loc98 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":99:28)
#loc99 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":100:9)
#loc100 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":111:9)
#loc101 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":101:13)
#loc102 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":101:34)
#loc103 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":103:13)
#loc104 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":110:13)
#loc105 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":103:17)
#loc106 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":103:25)
#loc107 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":103:27)
#loc108 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":103:30)
#loc109 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":103:38)
#loc110 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":103:40)
#loc111 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":104:13)
#loc112 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":106:13)
#loc113 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":108:13)
#loc114 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":105:37)
#loc115 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":105:30)
#loc116 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":105:17)
#loc117 = loc("CWE126_Buffer_Overread__CWE129_rand_34.c":109:17)
#loc118 = loc(fused[#loc1, #loc2])
#loc119 = loc(fused[#loc3, #loc4])
#loc120 = loc(fused[#loc5, #loc6])
#loc121 = loc(fused[#loc8, #loc9])
#loc122 = loc(fused[#loc10, #loc11])
#loc123 = loc(fused[#loc12, #loc13])
#loc124 = loc(fused[#loc16, #loc14])
#loc125 = loc(fused[#loc18, #loc17])
#loc126 = loc(fused[#loc21, #loc19])
#loc127 = loc(fused[#loc22, #loc23])
#loc128 = loc(fused[#loc24, #loc25])
#loc129 = loc(fused[#loc27, #loc28])
#loc130 = loc(fused[#loc29, #loc30])
#loc131 = loc(fused[#loc31, #loc32])
#loc132 = loc(fused[#loc33, #loc34])
#loc133 = loc(fused[#loc35, #loc36, #loc37, #loc32])
#loc134 = loc(fused[#loc42, #loc43])
#loc135 = loc(fused[#loc44, #loc45])
#loc136 = loc(fused[#loc46, #loc47])
#loc137 = loc(fused[#loc48, #loc49])
#loc138 = loc(fused[#loc50, #loc51])
#loc139 = loc(fused[#loc52, #loc53])
#loc140 = loc(fused[#loc56, #loc54])
#loc141 = loc(fused[#loc58, #loc57])
#loc142 = loc(fused[#loc60, #loc59])
#loc143 = loc(fused[#loc61, #loc62])
#loc144 = loc(fused[#loc63, #loc64])
#loc145 = loc(fused[#loc65, #loc66])
#loc146 = loc(fused[#loc67, #loc68])
#loc147 = loc(fused[#loc69, #loc70])
#loc148 = loc(fused[#loc71, #loc72])
#loc149 = loc(fused[#loc73, #loc74, #loc75, #loc70])
#loc150 = loc(fused[#loc82, #loc83])
#loc151 = loc(fused[#loc84, #loc85])
#loc152 = loc(fused[#loc86, #loc87])
#loc153 = loc(fused[#loc90, #loc88])
#loc154 = loc(fused[#loc92, #loc91])
#loc155 = loc(fused[#loc94, #loc93])
#loc156 = loc(fused[#loc95, #loc96])
#loc157 = loc(fused[#loc97, #loc98])
#loc158 = loc(fused[#loc99, #loc100])
#loc159 = loc(fused[#loc101, #loc102])
#loc160 = loc(fused[#loc103, #loc104])
#loc161 = loc(fused[#loc105, #loc106])
#loc162 = loc(fused[#loc108, #loc110])
#loc163 = loc(fused[#loc111, #loc112, #loc113, #loc104])
