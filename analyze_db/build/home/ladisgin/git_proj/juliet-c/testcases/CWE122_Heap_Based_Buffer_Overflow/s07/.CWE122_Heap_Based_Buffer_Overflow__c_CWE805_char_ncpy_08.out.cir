!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":133:10)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":133:14)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":133:20)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":133:32)
#loc258 = loc(fused[#loc84, #loc85])
#loc259 = loc(fused[#loc86, #loc87])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc228)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc229)
  cir.func private @strncpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc230)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc231)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc232)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc234)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc235)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc237)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc19)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc19)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc22)
        %6 = cir.const #cir.int<50> : !s32i loc(#loc23)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc23)
        %8 = cir.const #cir.int<1> : !u64i loc(#loc239)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc240)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc241)
        cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc242)
        cir.scope {
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
          %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc31)
          %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc244)
          cir.if %20 {
            %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc33)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc34)
            %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc35)
            cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
          } loc(#loc245)
        } loc(#loc243)
        %12 = cir.const #cir.int<0> : !s32i loc(#loc36)
        %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc36)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc38)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc39)
        cir.store %13, %16 : !s8i, !cir.ptr<!s8i> loc(#loc246)
      } loc(#loc238)
    } loc(#loc236)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc248)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc44)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc44)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc45)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc46)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc47)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc46)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc46)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc249)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc50)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc50)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc51)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc52)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc51)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc53)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc53)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc250)
      %17 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc54)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc56)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc57)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc58)
      %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc57)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc57)
      %24 = cir.call @strncpy(%18, %19, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc54)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc59)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc59)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc61)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc62)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc61)
      %31 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc63)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc251)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
      cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc65)
      %33 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc66)
      %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc67)
      %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc67)
      cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc66)
    } loc(#loc247)
    cir.return loc(#loc12)
  } loc(#loc233)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc253)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc70)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc254)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc72)
    cir.return loc(#loc69)
  } loc(#loc252)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc255)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc256)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc79)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc81)
  cir.func @main(%arg0: !s32i loc(fused[#loc84, #loc85]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc86, #loc87])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc258)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc259)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc83)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc88)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc89)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc90)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc90)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc91)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc78)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc260)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08_good() : () -> () loc(#loc93)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc79)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc79)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc80)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc80)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc261)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08_bad() : () -> () loc(#loc97)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc81)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc81)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc100)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc262)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc262)
    cir.return %17 : !s32i loc(#loc262)
  } loc(#loc257)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc103)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc104)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc264)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc264)
    cir.return %2 : !s32i loc(#loc264)
  } loc(#loc263)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc106)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc266)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc111)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc267)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc269)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc115)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc115)
      cir.if %4 {
        %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc106)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc106)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc120)
      } else {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc121)
        %6 = cir.const #cir.int<100> : !s32i loc(#loc122)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc122)
        %8 = cir.const #cir.int<1> : !u64i loc(#loc271)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc272)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc121)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc273)
        cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc274)
        cir.scope {
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
          %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc130)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc130)
          %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc276)
          cir.if %20 {
            %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc132)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc133)
            %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc134)
            cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc132)
          } loc(#loc277)
        } loc(#loc275)
        %12 = cir.const #cir.int<0> : !s32i loc(#loc135)
        %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc135)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc136)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc137)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc138)
        cir.store %13, %16 : !s8i, !cir.ptr<!s8i> loc(#loc278)
      } loc(#loc270)
    } loc(#loc268)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc280)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc143)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc143)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc144)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc145)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc146)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc145)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc145)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc281)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc149)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc149)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc150)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc151)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc150)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc152)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc152)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc282)
      %17 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc153)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc154)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc155)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc156)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc157)
      %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc156)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc156)
      %24 = cir.call @strncpy(%18, %19, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc153)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc158)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc158)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc160)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc161)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc160)
      %31 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc162)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc283)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc163)
      cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc164)
      %33 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc165)
      %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc166)
      %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc166)
      cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc165)
    } loc(#loc279)
    cir.return loc(#loc108)
  } loc(#loc265)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc168)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc169)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc285)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc285)
    cir.return %2 : !s32i loc(#loc285)
  } loc(#loc284)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc287)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc175)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc288)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc290)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc179)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc179)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc182)
        %6 = cir.const #cir.int<100> : !s32i loc(#loc183)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc183)
        %8 = cir.const #cir.int<1> : !u64i loc(#loc292)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc293)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc182)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc294)
        cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc295)
        cir.scope {
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc190)
          %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc191)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc191)
          %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc297)
          cir.if %20 {
            %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc193)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc194)
            %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc195)
            cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc193)
          } loc(#loc298)
        } loc(#loc296)
        %12 = cir.const #cir.int<0> : !s32i loc(#loc196)
        %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc196)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc197)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc198)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc199)
        cir.store %13, %16 : !s8i, !cir.ptr<!s8i> loc(#loc299)
      } loc(#loc291)
    } loc(#loc289)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc301)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc204)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc204)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc205)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc206)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc207)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc206)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc206)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc302)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc210)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc210)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc211)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc212)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc211)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc213)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc213)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc303)
      %17 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc214)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc215)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc216)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc217)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc218)
      %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc217)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc217)
      %24 = cir.call @strncpy(%18, %19, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc214)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc219)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc219)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc220)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc221)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc222)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc221)
      %31 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc223)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc304)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc224)
      cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc225)
      %33 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc226)
      %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc227)
      %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc227)
      cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc226)
    } loc(#loc300)
    cir.return loc(#loc172)
  } loc(#loc286)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":144:1)
#loc6 = loc("/usr/include/string.h":146:14)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":37:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":58:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":39:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":39:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":40:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":40:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":41:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":47:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":41:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":41:26)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":42:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":44:24)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":44:31)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":44:34)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":44:45)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":44:46)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":44:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":45:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":45:37)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":45:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":45:21)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":45:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":45:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":45:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":45:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":46:19)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":46:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":46:14)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":46:15)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":48:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":57:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":49:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":49:24)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":50:16)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":50:24)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":50:29)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":50:33)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":50:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":50:34)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":51:25)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":51:16)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":51:20)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":51:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":53:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":53:17)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":53:23)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":53:31)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":53:35)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":54:23)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":54:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":54:14)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":54:18)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":54:19)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":55:19)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":55:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":56:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":56:14)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":117:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":121:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":119:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":119:14)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":120:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":120:14)
#loc74 = loc("/usr/include/stdlib.h":575:1)
#loc75 = loc("/usr/include/stdlib.h":575:41)
#loc76 = loc("/usr/include/time.h":76:1)
#loc77 = loc("/usr/include/time.h":76:38)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":138:15)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":140:15)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":143:15)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":145:15)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":133:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":148:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":134:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":136:27)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":136:22)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":136:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":138:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":139:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":139:67)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":140:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":143:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":144:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":144:66)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":145:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":147:12)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":147:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":25:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":28:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":27:12)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":27:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":72:19)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":65:1)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":91:1)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":67:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":67:12)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":68:12)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":68:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":69:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":80:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":69:8)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":69:27)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":70:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":73:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":75:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":72:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":77:24)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":77:31)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":77:35)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":77:46)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":77:47)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":77:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":78:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":78:37)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":78:13)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":78:21)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":78:27)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":78:28)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":78:34)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":78:33)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":79:19)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":79:9)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":79:14)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":79:15)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":81:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":90:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":82:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":82:24)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":83:16)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":83:24)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":83:29)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":83:33)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":83:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":83:34)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":84:25)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":84:16)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":84:20)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":84:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":86:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":86:17)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":86:23)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":86:31)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":86:35)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":87:23)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":87:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":87:14)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":87:18)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":87:19)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":88:19)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":88:9)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":89:9)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":89:14)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":30:1)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":33:1)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":32:12)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":32:5)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":94:1)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":115:1)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":96:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":96:12)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":97:12)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":97:5)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":98:5)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":104:5)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":98:8)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":98:26)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":99:5)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":101:24)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":101:31)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":101:35)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":101:46)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":101:47)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":101:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":102:9)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":102:37)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":102:13)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":102:21)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":102:27)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":102:28)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":102:34)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":102:33)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":103:19)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":103:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":103:14)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":103:15)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":105:5)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":114:5)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":106:9)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":106:24)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":107:16)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":107:24)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":107:29)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":107:33)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":107:9)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":107:34)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":108:25)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":108:16)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":108:20)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":108:9)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":110:9)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":110:17)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":110:23)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":110:31)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":110:35)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":111:23)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":111:9)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":111:14)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":111:18)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":111:19)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":112:19)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":112:9)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":113:9)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c":113:14)
#loc228 = loc(fused[#loc1, #loc2])
#loc229 = loc(fused[#loc3, #loc4])
#loc230 = loc(fused[#loc5, #loc6])
#loc231 = loc(fused[#loc7, #loc8])
#loc232 = loc(fused[#loc9, #loc10])
#loc233 = loc(fused[#loc11, #loc12])
#loc234 = loc(fused[#loc13, #loc14])
#loc235 = loc(fused[#loc16, #loc15])
#loc236 = loc(fused[#loc17, #loc18])
#loc237 = loc(fused[#loc19, #loc20])
#loc238 = loc(fused[#loc21, #loc18])
#loc239 = loc(fused[#loc24, #loc25])
#loc240 = loc(fused[#loc23, #loc25])
#loc241 = loc(fused[#loc22, #loc26])
#loc242 = loc(fused[#loc27, #loc26])
#loc243 = loc(fused[#loc28, #loc29])
#loc244 = loc(fused[#loc30, #loc31])
#loc245 = loc(fused[#loc32, #loc29])
#loc246 = loc(fused[#loc37, #loc36])
#loc247 = loc(fused[#loc40, #loc41])
#loc248 = loc(fused[#loc42, #loc43])
#loc249 = loc(fused[#loc48, #loc49])
#loc250 = loc(fused[#loc53, #loc50])
#loc251 = loc(fused[#loc60, #loc59])
#loc252 = loc(fused[#loc68, #loc69])
#loc253 = loc(fused[#loc70, #loc71])
#loc254 = loc(fused[#loc72, #loc73])
#loc255 = loc(fused[#loc74, #loc75])
#loc256 = loc(fused[#loc76, #loc77])
#loc257 = loc(fused[#loc82, #loc83])
#loc260 = loc(fused[#loc93, #loc94])
#loc261 = loc(fused[#loc97, #loc98])
#loc262 = loc(fused[#loc101, #loc100])
#loc263 = loc(fused[#loc102, #loc103])
#loc264 = loc(fused[#loc105, #loc104])
#loc265 = loc(fused[#loc107, #loc108])
#loc266 = loc(fused[#loc109, #loc110])
#loc267 = loc(fused[#loc112, #loc111])
#loc268 = loc(fused[#loc113, #loc114])
#loc269 = loc(fused[#loc115, #loc116])
#loc270 = loc(fused[#loc117, #loc118, #loc119, #loc114])
#loc271 = loc(fused[#loc123, #loc124])
#loc272 = loc(fused[#loc122, #loc124])
#loc273 = loc(fused[#loc121, #loc125])
#loc274 = loc(fused[#loc126, #loc125])
#loc275 = loc(fused[#loc127, #loc128])
#loc276 = loc(fused[#loc129, #loc130])
#loc277 = loc(fused[#loc131, #loc128])
#loc278 = loc(fused[#loc136, #loc135])
#loc279 = loc(fused[#loc139, #loc140])
#loc280 = loc(fused[#loc141, #loc142])
#loc281 = loc(fused[#loc147, #loc148])
#loc282 = loc(fused[#loc152, #loc149])
#loc283 = loc(fused[#loc159, #loc158])
#loc284 = loc(fused[#loc167, #loc168])
#loc285 = loc(fused[#loc170, #loc169])
#loc286 = loc(fused[#loc171, #loc172])
#loc287 = loc(fused[#loc173, #loc174])
#loc288 = loc(fused[#loc176, #loc175])
#loc289 = loc(fused[#loc177, #loc178])
#loc290 = loc(fused[#loc179, #loc180])
#loc291 = loc(fused[#loc181, #loc178])
#loc292 = loc(fused[#loc184, #loc185])
#loc293 = loc(fused[#loc183, #loc185])
#loc294 = loc(fused[#loc182, #loc186])
#loc295 = loc(fused[#loc187, #loc186])
#loc296 = loc(fused[#loc188, #loc189])
#loc297 = loc(fused[#loc190, #loc191])
#loc298 = loc(fused[#loc192, #loc189])
#loc299 = loc(fused[#loc197, #loc196])
#loc300 = loc(fused[#loc200, #loc201])
#loc301 = loc(fused[#loc202, #loc203])
#loc302 = loc(fused[#loc208, #loc209])
#loc303 = loc(fused[#loc213, #loc210])
#loc304 = loc(fused[#loc220, #loc219])
