!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":257:10)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":257:14)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":257:20)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":257:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc407 = loc(fused[#loc161, #loc162])
#loc408 = loc(fused[#loc163, #loc164])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc345)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc346)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc347)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc348)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc349)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc350)
  cir.func private @close(!s32i) -> !s32i loc(#loc351)
  cir.func private @printIntLine(!s32i) loc(#loc352)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc353)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc20)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc355)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc26)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc356)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc358)
      %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc359)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc360)
      %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc361)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc35)
      %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc35)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc360)
      cir.scope {
        cir.do {
          %9 = cir.const #cir.int<2> : !s32i loc(#loc40)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc41)
          %11 = cir.const #cir.int<6> : !s32i loc(#loc42)
          %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc43)
          cir.store %12, %5 : !s32i, !cir.ptr<!s32i> loc(#loc363)
          cir.scope {
            %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc48)
            %52 = cir.const #cir.int<1> : !s32i loc(#loc49)
            %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc49)
            %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc365)
            cir.if %54 {
              cir.break loc(#loc51)
            } loc(#loc366)
          } loc(#loc364)
          %13 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc367)
          %14 = cir.const #cir.int<0> : !s32i loc(#loc54)
          %15 = cir.const #cir.int<16> : !u64i loc(#loc368)
          cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc369)
          %16 = cir.const #cir.int<2> : !s32i loc(#loc59)
          %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc59)
          %18 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc60)
          cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc370)
          %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
          %21 = cir.call @inet_addr(%20) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc62)
          %22 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc63)
          %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc64)
          cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc371)
          %24 = cir.const #cir.int<27015> : !s32i loc(#loc67)
          %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc67)
          %26 = cir.call @htons(%25) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc68)
          %27 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
          cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc372)
          cir.scope {
            %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc74)
            %52 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc374)
            %53 = cir.const #cir.int<16> : !u64i loc(#loc375)
            %54 = cir.cast(integral, %53 : !u64i), !u32i loc(#loc375)
            %55 = cir.call @connect(%51, %52, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc79)
            %56 = cir.const #cir.int<1> : !s32i loc(#loc80)
            %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc80)
            %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc376)
            cir.if %58 {
              cir.break loc(#loc82)
            } loc(#loc377)
          } loc(#loc373)
          %28 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc83)
          %29 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc84)
          %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc84)
          %31 = cir.const #cir.int<3> : !s32i loc(#loc85)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc85)
          %33 = cir.const #cir.int<4> : !u64i loc(#loc85)
          %34 = cir.binop(mul, %32, %33) : !u64i loc(#loc85)
          %35 = cir.const #cir.int<2> : !s32i loc(#loc85)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc85)
          %37 = cir.binop(add, %34, %36) : !u64i loc(#loc85)
          %38 = cir.const #cir.int<1> : !s32i loc(#loc86)
          %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc86)
          %40 = cir.binop(sub, %37, %39) : !u64i loc(#loc378)
          %41 = cir.const #cir.int<0> : !s32i loc(#loc87)
          %42 = cir.call @recv(%28, %30, %40, %41) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc88)
          %43 = cir.cast(integral, %42 : !s64i), !s32i loc(#loc88)
          cir.store %43, %3 : !s32i, !cir.ptr<!s32i> loc(#loc379)
          cir.scope {
            %51 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc93)
            %52 = cir.const #cir.int<1> : !s32i loc(#loc94)
            %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc94)
            %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc381)
            %55 = cir.ternary(%54, true {
              %56 = cir.const #true loc(#loc95)
              cir.yield %56 : !cir.bool loc(#loc95)
            }, false {
              %56 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc96)
              %57 = cir.const #cir.int<0> : !s32i loc(#loc97)
              %58 = cir.cmp(eq, %56, %57) : !s32i, !cir.bool loc(#loc382)
              %59 = cir.ternary(%58, true {
                %60 = cir.const #true loc(#loc95)
                cir.yield %60 : !cir.bool loc(#loc95)
              }, false {
                %60 = cir.const #false loc(#loc95)
                cir.yield %60 : !cir.bool loc(#loc95)
              }) : (!cir.bool) -> !cir.bool loc(#loc95)
              cir.yield %59 : !cir.bool loc(#loc95)
            }) : (!cir.bool) -> !cir.bool loc(#loc95)
            cir.if %55 {
              cir.break loc(#loc99)
            } loc(#loc383)
          } loc(#loc380)
          %44 = cir.const #cir.int<0> : !s32i loc(#loc100)
          %45 = cir.cast(integral, %44 : !s32i), !s8i loc(#loc100)
          %46 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc101)
          %47 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc102)
          %48 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %46 : !s32i), !cir.ptr<!s8i> loc(#loc102)
          cir.store %45, %48 : !s8i, !cir.ptr<!s8i> loc(#loc384)
          %49 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc103)
          %50 = cir.call @atoi(%49) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc104)
          cir.store %50, %0 : !s32i, !cir.ptr<!s32i> loc(#loc385)
          cir.yield loc(#loc39)
        } while {
          %9 = cir.const #cir.int<0> : !s32i loc(#loc107)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc107)
          cir.condition(%10) loc(#loc107)
        } loc(#loc362)
      } loc(#loc362)
      cir.scope {
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc110)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc111)
        %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc111)
        %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc387)
        cir.if %12 {
          %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc113)
          %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc114)
        } loc(#loc388)
      } loc(#loc386)
    } loc(#loc357)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc390)
      %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc391)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc391)
      cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc391)
      cir.scope {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc124)
        %8 = cir.cmp(ge, %6, %7) : !s32i, !cir.bool loc(#loc393)
        cir.if %8 {
          %9 = cir.const #cir.int<1> : !s32i loc(#loc128)
          %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
          %11 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc130)
          %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc130)
          cir.store %9, %12 : !s32i, !cir.ptr<!s32i> loc(#loc395)
          cir.scope {
            %13 = cir.const #cir.int<0> : !s32i loc(#loc133)
            cir.store %13, %3 : !s32i, !cir.ptr<!s32i> loc(#loc397)
            cir.for : cond {
              %14 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc135)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc136)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc398)
              cir.condition(%16) loc(#loc137)
            } body {
              cir.scope {
                %14 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc139)
                %15 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc140)
                %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc140)
                %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc140)
                cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc141)
              } loc(#loc399)
              cir.yield loc(#loc132)
            } step {
              %14 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc142)
              %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc143)
              cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc400)
              cir.yield loc(#loc396)
            } loc(#loc396)
          } loc(#loc396)
        } else {
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc20)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc20)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc144)
        } loc(#loc394)
      } loc(#loc392)
    } loc(#loc389)
    cir.return loc(#loc22)
  } loc(#loc354)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc402)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc147)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc403)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc149)
    cir.return loc(#loc146)
  } loc(#loc401)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc404)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc405)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc155)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc156)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc157)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc158)
  cir.func @main(%arg0: !s32i loc(fused[#loc161, #loc162]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc163, #loc164])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc407)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc408)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc160)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc165)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc166)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc167)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc167)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc168)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc155)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc155)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc169)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01_good : !cir.ptr<!cir.func<!void ()>> loc(#loc409)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01_good() : () -> () loc(#loc170)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc156)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc156)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc172)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc157)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc157)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc173)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc410)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01_bad() : () -> () loc(#loc174)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc158)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc158)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc176)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc177)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc411)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc411)
    cir.return %17 : !s32i loc(#loc411)
  } loc(#loc406)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc413)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc183)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc184)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc414)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc186)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc415)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc417)
      %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc418)
      %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc418)
      cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc418)
      cir.scope {
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc196)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc197)
        %9 = cir.cmp(ge, %7, %8) : !s32i, !cir.bool loc(#loc420)
        cir.if %9 {
          %10 = cir.const #cir.int<1> : !s32i loc(#loc201)
          %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc202)
          %12 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc203)
          %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc203)
          cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc422)
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc206)
            cir.store %14, %4 : !s32i, !cir.ptr<!s32i> loc(#loc424)
            cir.for : cond {
              %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc208)
              %16 = cir.const #cir.int<10> : !s32i loc(#loc209)
              %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc425)
              cir.condition(%17) loc(#loc210)
            } body {
              cir.scope {
                %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc212)
                %16 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc213)
                %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc213)
                %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc213)
                cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc214)
              } loc(#loc426)
              cir.yield loc(#loc205)
            } step {
              %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc215)
              %16 = cir.unary(inc, %15) : !s32i, !s32i loc(#loc216)
              cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc427)
              cir.yield loc(#loc423)
            } loc(#loc423)
          } loc(#loc423)
        } else {
          %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc217)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc217)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc218)
        } loc(#loc421)
      } loc(#loc419)
    } loc(#loc416)
    cir.return loc(#loc180)
  } loc(#loc412)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc219)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc429)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc224)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc225)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc430)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc432)
      %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc433)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc434)
      %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc435)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc234)
      %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc234)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc434)
      cir.scope {
        cir.do {
          %9 = cir.const #cir.int<2> : !s32i loc(#loc239)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc240)
          %11 = cir.const #cir.int<6> : !s32i loc(#loc241)
          %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc242)
          cir.store %12, %5 : !s32i, !cir.ptr<!s32i> loc(#loc437)
          cir.scope {
            %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc247)
            %52 = cir.const #cir.int<1> : !s32i loc(#loc248)
            %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc248)
            %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc439)
            cir.if %54 {
              cir.break loc(#loc250)
            } loc(#loc440)
          } loc(#loc438)
          %13 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc441)
          %14 = cir.const #cir.int<0> : !s32i loc(#loc253)
          %15 = cir.const #cir.int<16> : !u64i loc(#loc442)
          cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc443)
          %16 = cir.const #cir.int<2> : !s32i loc(#loc258)
          %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc258)
          %18 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc60)
          cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc444)
          %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc260)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc260)
          %21 = cir.call @inet_addr(%20) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc261)
          %22 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc63)
          %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc64)
          cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc445)
          %24 = cir.const #cir.int<27015> : !s32i loc(#loc264)
          %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc264)
          %26 = cir.call @htons(%25) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc265)
          %27 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
          cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc446)
          cir.scope {
            %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc270)
            %52 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc448)
            %53 = cir.const #cir.int<16> : !u64i loc(#loc449)
            %54 = cir.cast(integral, %53 : !u64i), !u32i loc(#loc449)
            %55 = cir.call @connect(%51, %52, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc275)
            %56 = cir.const #cir.int<1> : !s32i loc(#loc276)
            %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc276)
            %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc450)
            cir.if %58 {
              cir.break loc(#loc278)
            } loc(#loc451)
          } loc(#loc447)
          %28 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc279)
          %29 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc280)
          %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc280)
          %31 = cir.const #cir.int<3> : !s32i loc(#loc281)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc281)
          %33 = cir.const #cir.int<4> : !u64i loc(#loc281)
          %34 = cir.binop(mul, %32, %33) : !u64i loc(#loc281)
          %35 = cir.const #cir.int<2> : !s32i loc(#loc281)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc281)
          %37 = cir.binop(add, %34, %36) : !u64i loc(#loc281)
          %38 = cir.const #cir.int<1> : !s32i loc(#loc282)
          %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc282)
          %40 = cir.binop(sub, %37, %39) : !u64i loc(#loc452)
          %41 = cir.const #cir.int<0> : !s32i loc(#loc283)
          %42 = cir.call @recv(%28, %30, %40, %41) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc284)
          %43 = cir.cast(integral, %42 : !s64i), !s32i loc(#loc284)
          cir.store %43, %3 : !s32i, !cir.ptr<!s32i> loc(#loc453)
          cir.scope {
            %51 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc289)
            %52 = cir.const #cir.int<1> : !s32i loc(#loc290)
            %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc290)
            %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc455)
            %55 = cir.ternary(%54, true {
              %56 = cir.const #true loc(#loc291)
              cir.yield %56 : !cir.bool loc(#loc291)
            }, false {
              %56 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc292)
              %57 = cir.const #cir.int<0> : !s32i loc(#loc293)
              %58 = cir.cmp(eq, %56, %57) : !s32i, !cir.bool loc(#loc456)
              %59 = cir.ternary(%58, true {
                %60 = cir.const #true loc(#loc291)
                cir.yield %60 : !cir.bool loc(#loc291)
              }, false {
                %60 = cir.const #false loc(#loc291)
                cir.yield %60 : !cir.bool loc(#loc291)
              }) : (!cir.bool) -> !cir.bool loc(#loc291)
              cir.yield %59 : !cir.bool loc(#loc291)
            }) : (!cir.bool) -> !cir.bool loc(#loc291)
            cir.if %55 {
              cir.break loc(#loc295)
            } loc(#loc457)
          } loc(#loc454)
          %44 = cir.const #cir.int<0> : !s32i loc(#loc296)
          %45 = cir.cast(integral, %44 : !s32i), !s8i loc(#loc296)
          %46 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc297)
          %47 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc298)
          %48 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %46 : !s32i), !cir.ptr<!s8i> loc(#loc298)
          cir.store %45, %48 : !s8i, !cir.ptr<!s8i> loc(#loc458)
          %49 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc299)
          %50 = cir.call @atoi(%49) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc300)
          cir.store %50, %0 : !s32i, !cir.ptr<!s32i> loc(#loc459)
          cir.yield loc(#loc238)
        } while {
          %9 = cir.const #cir.int<0> : !s32i loc(#loc303)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc303)
          cir.condition(%10) loc(#loc303)
        } loc(#loc436)
      } loc(#loc436)
      cir.scope {
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc306)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc307)
        %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc307)
        %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc461)
        cir.if %12 {
          %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc309)
          %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc310)
        } loc(#loc462)
      } loc(#loc460)
    } loc(#loc431)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc464)
      %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc465)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc465)
      cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc465)
      cir.scope {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc319)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc320)
        %8 = cir.cmp(ge, %6, %7) : !s32i, !cir.bool loc(#loc467)
        %9 = cir.ternary(%8, true {
          %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc322)
          %11 = cir.const #cir.int<10> : !s32i loc(#loc323)
          %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc468)
          %13 = cir.ternary(%12, true {
            %14 = cir.const #true loc(#loc321)
            cir.yield %14 : !cir.bool loc(#loc321)
          }, false {
            %14 = cir.const #false loc(#loc321)
            cir.yield %14 : !cir.bool loc(#loc321)
          }) : (!cir.bool) -> !cir.bool loc(#loc321)
          cir.yield %13 : !cir.bool loc(#loc321)
        }, false {
          %10 = cir.const #false loc(#loc321)
          cir.yield %10 : !cir.bool loc(#loc321)
        }) : (!cir.bool) -> !cir.bool loc(#loc321)
        cir.if %9 {
          %10 = cir.const #cir.int<1> : !s32i loc(#loc328)
          %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc329)
          %12 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc330)
          %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc330)
          cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc470)
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc333)
            cir.store %14, %3 : !s32i, !cir.ptr<!s32i> loc(#loc472)
            cir.for : cond {
              %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc335)
              %16 = cir.const #cir.int<10> : !s32i loc(#loc336)
              %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc473)
              cir.condition(%17) loc(#loc337)
            } body {
              cir.scope {
                %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc339)
                %16 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc340)
                %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc340)
                %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc340)
                cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc341)
              } loc(#loc474)
              cir.yield loc(#loc332)
            } step {
              %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc342)
              %16 = cir.unary(inc, %15) : !s32i, !s32i loc(#loc343)
              cir.store %16, %3 : !s32i, !cir.ptr<!s32i> loc(#loc475)
              cir.yield loc(#loc471)
            } loc(#loc471)
          } loc(#loc471)
        } else {
          %10 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc219)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc219)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc344)
        } loc(#loc469)
      } loc(#loc466)
    } loc(#loc463)
    cir.return loc(#loc221)
  } loc(#loc428)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":75:49)
#loc6 = loc("/usr/include/netinet/in.h":404:1)
#loc7 = loc("/usr/include/netinet/in.h":405:40)
#loc8 = loc("/usr/include/sys/socket.h":126:1)
#loc9 = loc("/usr/include/sys/socket.h":126:75)
#loc10 = loc("/usr/include/sys/socket.h":145:1)
#loc11 = loc("/usr/include/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":121:23)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":44:1)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":124:1)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":46:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":46:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":48:13)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":48:12)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":48:5)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":49:5)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":104:5)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":54:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":54:13)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":55:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":55:28)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":56:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":56:32)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":57:9)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":57:41)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":58:9)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":93:17)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":68:36)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":68:45)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":68:58)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":68:29)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":68:13)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":68:69)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":69:13)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":72:13)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":69:17)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":69:34)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":70:13)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":71:17)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":73:20)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":73:21)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":73:30)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":73:33)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":73:47)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":73:13)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":73:48)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":74:34)
#loc60 = loc("/usr/include/netinet/in.h":249:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":74:13)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":75:39)
#loc63 = loc("/usr/include/netinet/in.h":251:20)
#loc64 = loc("/usr/include/netinet/in.h":33:15)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":75:13)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":75:59)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":76:38)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":76:32)
#loc69 = loc("/usr/include/netinet/in.h":250:15)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":76:13)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":76:46)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":77:13)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":80:13)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":77:25)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":77:58)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":77:59)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":77:68)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":77:82)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":77:17)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":77:88)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":78:13)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":79:17)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":83:31)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":83:46)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":83:59)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":83:77)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":83:80)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":83:26)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":83:13)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":83:81)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":84:13)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":87:13)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":84:17)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":84:31)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":84:44)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":84:47)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":84:61)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":85:13)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":86:17)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":89:39)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":89:25)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":89:13)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":91:25)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":91:20)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":91:13)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":91:36)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":93:16)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":94:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":97:9)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":94:13)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":94:30)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":95:9)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":96:26)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":96:13)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":105:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":123:5)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":106:9)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":106:13)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":107:9)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":107:30)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":110:9)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":122:9)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":110:13)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":110:21)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":111:9)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":118:9)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":120:9)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":112:28)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":112:20)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":112:13)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":114:13)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":117:13)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":114:21)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":114:17)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":114:24)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":114:28)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":114:26)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":115:13)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":116:37)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":116:30)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":116:17)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":114:33)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":114:32)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":121:13)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":242:1)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":246:1)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":244:5)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":244:13)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":245:5)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":245:13)
#loc151 = loc("/usr/include/stdlib.h":575:1)
#loc152 = loc("/usr/include/stdlib.h":575:41)
#loc153 = loc("/usr/include/time.h":76:1)
#loc154 = loc("/usr/include/time.h":76:38)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":262:15)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":264:15)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":267:15)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":269:15)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":257:1)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":272:1)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":258:1)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":260:27)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":260:22)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":260:5)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":262:5)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":263:5)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":263:71)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":264:5)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":267:5)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":268:5)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":268:70)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":269:5)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":271:12)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":271:5)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":131:1)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":158:1)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":133:5)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":133:9)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":135:13)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":135:12)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":135:5)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":138:12)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":138:5)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":139:5)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":157:5)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":140:9)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":140:13)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":141:9)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":141:30)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":144:9)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":156:9)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":144:13)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":144:21)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":145:9)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":152:9)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":154:9)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":146:28)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":146:20)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":146:13)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":148:13)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":151:13)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":148:21)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":148:17)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":148:24)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":148:28)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":148:26)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":149:13)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":150:37)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":150:30)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":150:17)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":148:33)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":148:32)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":155:23)
#loc218 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":155:13)
#loc219 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":237:23)
#loc220 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":161:1)
#loc221 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":240:1)
#loc222 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":163:5)
#loc223 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":163:9)
#loc224 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":165:13)
#loc225 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":165:12)
#loc226 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":165:5)
#loc227 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":166:5)
#loc228 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":221:5)
#loc229 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":171:9)
#loc230 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":171:13)
#loc231 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":172:9)
#loc232 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":172:28)
#loc233 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":173:9)
#loc234 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":173:32)
#loc235 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":174:9)
#loc236 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":174:41)
#loc237 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":175:9)
#loc238 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":210:17)
#loc239 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":185:36)
#loc240 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":185:45)
#loc241 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":185:58)
#loc242 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":185:29)
#loc243 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":185:13)
#loc244 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":185:69)
#loc245 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":186:13)
#loc246 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":189:13)
#loc247 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":186:17)
#loc248 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":186:34)
#loc249 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":187:13)
#loc250 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":188:17)
#loc251 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":190:20)
#loc252 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":190:21)
#loc253 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":190:30)
#loc254 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":190:33)
#loc255 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":190:47)
#loc256 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":190:13)
#loc257 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":190:48)
#loc258 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":191:34)
#loc259 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":191:13)
#loc260 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":192:49)
#loc261 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":192:39)
#loc262 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":192:13)
#loc263 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":192:59)
#loc264 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":193:38)
#loc265 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":193:32)
#loc266 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":193:13)
#loc267 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":193:46)
#loc268 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":194:13)
#loc269 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":197:13)
#loc270 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":194:25)
#loc271 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":194:58)
#loc272 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":194:59)
#loc273 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":194:68)
#loc274 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":194:82)
#loc275 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":194:17)
#loc276 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":194:88)
#loc277 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":195:13)
#loc278 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":196:17)
#loc279 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":200:31)
#loc280 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":200:46)
#loc281 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":200:59)
#loc282 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":200:77)
#loc283 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":200:80)
#loc284 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":200:26)
#loc285 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":200:13)
#loc286 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":200:81)
#loc287 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":201:13)
#loc288 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":204:13)
#loc289 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":201:17)
#loc290 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":201:31)
#loc291 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":201:44)
#loc292 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":201:47)
#loc293 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":201:61)
#loc294 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":202:13)
#loc295 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":203:17)
#loc296 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":206:39)
#loc297 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":206:25)
#loc298 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":206:13)
#loc299 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":208:25)
#loc300 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":208:20)
#loc301 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":208:13)
#loc302 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":208:36)
#loc303 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":210:16)
#loc304 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":211:9)
#loc305 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":214:9)
#loc306 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":211:13)
#loc307 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":211:30)
#loc308 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":212:9)
#loc309 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":213:26)
#loc310 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":213:13)
#loc311 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":222:5)
#loc312 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":239:5)
#loc313 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":223:9)
#loc314 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":223:13)
#loc315 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":224:9)
#loc316 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":224:30)
#loc317 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":226:9)
#loc318 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":238:9)
#loc319 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":226:13)
#loc320 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":226:21)
#loc321 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":226:23)
#loc322 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":226:26)
#loc323 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":226:34)
#loc324 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":226:36)
#loc325 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":227:9)
#loc326 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":234:9)
#loc327 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":236:9)
#loc328 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":228:28)
#loc329 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":228:20)
#loc330 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":228:13)
#loc331 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":230:13)
#loc332 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":233:13)
#loc333 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":230:21)
#loc334 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":230:17)
#loc335 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":230:24)
#loc336 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":230:28)
#loc337 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":230:26)
#loc338 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":231:13)
#loc339 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":232:37)
#loc340 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":232:30)
#loc341 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":232:17)
#loc342 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":230:33)
#loc343 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":230:32)
#loc344 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c":237:13)
#loc345 = loc(fused[#loc1, #loc2])
#loc346 = loc(fused[#loc3, #loc4])
#loc347 = loc(fused[#loc6, #loc7])
#loc348 = loc(fused[#loc8, #loc9])
#loc349 = loc(fused[#loc10, #loc11])
#loc350 = loc(fused[#loc12, #loc13])
#loc351 = loc(fused[#loc14, #loc15])
#loc352 = loc(fused[#loc16, #loc17])
#loc353 = loc(fused[#loc18, #loc19])
#loc354 = loc(fused[#loc21, #loc22])
#loc355 = loc(fused[#loc23, #loc24])
#loc356 = loc(fused[#loc27, #loc25])
#loc357 = loc(fused[#loc28, #loc29])
#loc358 = loc(fused[#loc30, #loc31])
#loc359 = loc(fused[#loc32, #loc33])
#loc360 = loc(fused[#loc34, #loc35])
#loc361 = loc(fused[#loc36, #loc37])
#loc362 = loc(fused[#loc38, #loc39])
#loc363 = loc(fused[#loc44, #loc45])
#loc364 = loc(fused[#loc46, #loc47])
#loc365 = loc(fused[#loc48, #loc49])
#loc366 = loc(fused[#loc50, #loc47])
#loc367 = loc(fused[#loc52, #loc53])
#loc368 = loc(fused[#loc55, #loc56])
#loc369 = loc(fused[#loc57, #loc58])
#loc370 = loc(fused[#loc61, #loc59])
#loc371 = loc(fused[#loc65, #loc66])
#loc372 = loc(fused[#loc70, #loc71])
#loc373 = loc(fused[#loc72, #loc73])
#loc374 = loc(fused[#loc75, #loc76])
#loc375 = loc(fused[#loc77, #loc78])
#loc376 = loc(fused[#loc79, #loc80])
#loc377 = loc(fused[#loc81, #loc73])
#loc378 = loc(fused[#loc85, #loc86])
#loc379 = loc(fused[#loc89, #loc90])
#loc380 = loc(fused[#loc91, #loc92])
#loc381 = loc(fused[#loc93, #loc94])
#loc382 = loc(fused[#loc96, #loc97])
#loc383 = loc(fused[#loc98, #loc92])
#loc384 = loc(fused[#loc102, #loc100])
#loc385 = loc(fused[#loc105, #loc106])
#loc386 = loc(fused[#loc108, #loc109])
#loc387 = loc(fused[#loc110, #loc111])
#loc388 = loc(fused[#loc112, #loc109])
#loc389 = loc(fused[#loc115, #loc116])
#loc390 = loc(fused[#loc117, #loc118])
#loc391 = loc(fused[#loc119, #loc120])
#loc392 = loc(fused[#loc121, #loc122])
#loc393 = loc(fused[#loc123, #loc124])
#loc394 = loc(fused[#loc125, #loc126, #loc127, #loc122])
#loc395 = loc(fused[#loc130, #loc128])
#loc396 = loc(fused[#loc131, #loc132])
#loc397 = loc(fused[#loc134, #loc133])
#loc398 = loc(fused[#loc135, #loc136])
#loc399 = loc(fused[#loc138, #loc132])
#loc400 = loc(fused[#loc143, #loc142])
#loc401 = loc(fused[#loc145, #loc146])
#loc402 = loc(fused[#loc147, #loc148])
#loc403 = loc(fused[#loc149, #loc150])
#loc404 = loc(fused[#loc151, #loc152])
#loc405 = loc(fused[#loc153, #loc154])
#loc406 = loc(fused[#loc159, #loc160])
#loc409 = loc(fused[#loc170, #loc171])
#loc410 = loc(fused[#loc174, #loc175])
#loc411 = loc(fused[#loc178, #loc177])
#loc412 = loc(fused[#loc179, #loc180])
#loc413 = loc(fused[#loc181, #loc182])
#loc414 = loc(fused[#loc185, #loc183])
#loc415 = loc(fused[#loc187, #loc186])
#loc416 = loc(fused[#loc188, #loc189])
#loc417 = loc(fused[#loc190, #loc191])
#loc418 = loc(fused[#loc192, #loc193])
#loc419 = loc(fused[#loc194, #loc195])
#loc420 = loc(fused[#loc196, #loc197])
#loc421 = loc(fused[#loc198, #loc199, #loc200, #loc195])
#loc422 = loc(fused[#loc203, #loc201])
#loc423 = loc(fused[#loc204, #loc205])
#loc424 = loc(fused[#loc207, #loc206])
#loc425 = loc(fused[#loc208, #loc209])
#loc426 = loc(fused[#loc211, #loc205])
#loc427 = loc(fused[#loc216, #loc215])
#loc428 = loc(fused[#loc220, #loc221])
#loc429 = loc(fused[#loc222, #loc223])
#loc430 = loc(fused[#loc226, #loc224])
#loc431 = loc(fused[#loc227, #loc228])
#loc432 = loc(fused[#loc229, #loc230])
#loc433 = loc(fused[#loc231, #loc232])
#loc434 = loc(fused[#loc233, #loc234])
#loc435 = loc(fused[#loc235, #loc236])
#loc436 = loc(fused[#loc237, #loc238])
#loc437 = loc(fused[#loc243, #loc244])
#loc438 = loc(fused[#loc245, #loc246])
#loc439 = loc(fused[#loc247, #loc248])
#loc440 = loc(fused[#loc249, #loc246])
#loc441 = loc(fused[#loc251, #loc252])
#loc442 = loc(fused[#loc254, #loc255])
#loc443 = loc(fused[#loc256, #loc257])
#loc444 = loc(fused[#loc259, #loc258])
#loc445 = loc(fused[#loc262, #loc263])
#loc446 = loc(fused[#loc266, #loc267])
#loc447 = loc(fused[#loc268, #loc269])
#loc448 = loc(fused[#loc271, #loc272])
#loc449 = loc(fused[#loc273, #loc274])
#loc450 = loc(fused[#loc275, #loc276])
#loc451 = loc(fused[#loc277, #loc269])
#loc452 = loc(fused[#loc281, #loc282])
#loc453 = loc(fused[#loc285, #loc286])
#loc454 = loc(fused[#loc287, #loc288])
#loc455 = loc(fused[#loc289, #loc290])
#loc456 = loc(fused[#loc292, #loc293])
#loc457 = loc(fused[#loc294, #loc288])
#loc458 = loc(fused[#loc298, #loc296])
#loc459 = loc(fused[#loc301, #loc302])
#loc460 = loc(fused[#loc304, #loc305])
#loc461 = loc(fused[#loc306, #loc307])
#loc462 = loc(fused[#loc308, #loc305])
#loc463 = loc(fused[#loc311, #loc312])
#loc464 = loc(fused[#loc313, #loc314])
#loc465 = loc(fused[#loc315, #loc316])
#loc466 = loc(fused[#loc317, #loc318])
#loc467 = loc(fused[#loc319, #loc320])
#loc468 = loc(fused[#loc322, #loc324])
#loc469 = loc(fused[#loc325, #loc326, #loc327, #loc318])
#loc470 = loc(fused[#loc330, #loc328])
#loc471 = loc(fused[#loc331, #loc332])
#loc472 = loc(fused[#loc334, #loc333])
#loc473 = loc(fused[#loc335, #loc336])
#loc474 = loc(fused[#loc338, #loc332])
#loc475 = loc(fused[#loc343, #loc342])
