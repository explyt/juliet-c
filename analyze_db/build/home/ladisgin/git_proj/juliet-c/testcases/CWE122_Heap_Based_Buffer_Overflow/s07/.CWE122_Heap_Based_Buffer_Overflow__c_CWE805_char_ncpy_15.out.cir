!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":132:10)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":132:14)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":132:20)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":132:32)
#loc256 = loc(fused[#loc88, #loc89])
#loc257 = loc(fused[#loc90, #loc91])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc228)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc229)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc230)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func private @strncpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc231)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc232)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc234)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc16)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc235)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc20)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc22)
          %4 = cir.const #cir.int<50> : !s32i loc(#loc23)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc23)
          %6 = cir.const #cir.int<1> : !u64i loc(#loc237)
          %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc238)
          %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc239)
          cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc240)
          cir.scope {
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
            %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc31)
            %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc242)
            cir.if %18 {
              %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc33)
              %20 = cir.const #cir.int<1> : !s32i loc(#loc34)
              %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc35)
              cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
            } loc(#loc243)
          } loc(#loc241)
          %10 = cir.const #cir.int<0> : !s32i loc(#loc36)
          %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc36)
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
          %13 = cir.const #cir.int<0> : !s32i loc(#loc38)
          %14 = cir.ptr_stride(%12 : !cir.ptr<!s8i>, %13 : !s32i), !cir.ptr<!s8i> loc(#loc39)
          cir.store %11, %14 : !s8i, !cir.ptr<!s8i> loc(#loc244)
          cir.break loc(#loc40)
        } loc(#loc21)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc42)
          cir.break loc(#loc43)
        } loc(#loc41)
        cir.yield loc(#loc18)
      } loc(#loc18)
    } loc(#loc236)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc246)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc48)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc48)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc49)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc50)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc51)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc50)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc50)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc247)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc54)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc54)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc55)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc56)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc55)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc57)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc57)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc248)
      %17 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc58)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc60)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc61)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc62)
      %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc61)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc61)
      %24 = cir.call @strncpy(%18, %19, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc58)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc63)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc63)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc65)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc66)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc65)
      %31 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc67)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc249)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
      cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc69)
      %33 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc70)
      %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc71)
      %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc71)
      cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc70)
    } loc(#loc245)
    cir.return loc(#loc13)
  } loc(#loc233)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc251)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc74)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc252)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc76)
    cir.return loc(#loc73)
  } loc(#loc250)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc253)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc254)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc83)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc84)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc85)
  cir.func @main(%arg0: !s32i loc(fused[#loc88, #loc89]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc90, #loc91])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc256)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc257)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc87)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc92)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc93)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc94)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc94)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc95)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc82)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc82)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc258)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15_good() : () -> () loc(#loc97)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc83)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc83)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc84)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc84)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc259)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15_bad() : () -> () loc(#loc101)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc85)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc85)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc103)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc104)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc260)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc260)
    cir.return %17 : !s32i loc(#loc260)
  } loc(#loc255)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc262)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc110)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc263)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc114)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc116)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc116)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc117)
          cir.break loc(#loc118)
        } loc(#loc115)
        cir.case(default, []) {
          %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc120)
          %4 = cir.const #cir.int<100> : !s32i loc(#loc121)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc121)
          %6 = cir.const #cir.int<1> : !u64i loc(#loc265)
          %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc266)
          %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc120)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc267)
          cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc268)
          cir.scope {
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc128)
            %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc129)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc129)
            %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc270)
            cir.if %18 {
              %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc131)
              %20 = cir.const #cir.int<1> : !s32i loc(#loc132)
              %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc133)
              cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc131)
            } loc(#loc271)
          } loc(#loc269)
          %10 = cir.const #cir.int<0> : !s32i loc(#loc134)
          %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc134)
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
          %13 = cir.const #cir.int<0> : !s32i loc(#loc136)
          %14 = cir.ptr_stride(%12 : !cir.ptr<!s8i>, %13 : !s32i), !cir.ptr<!s8i> loc(#loc137)
          cir.store %11, %14 : !s8i, !cir.ptr<!s8i> loc(#loc272)
          cir.break loc(#loc138)
        } loc(#loc119)
        cir.yield loc(#loc112)
      } loc(#loc112)
    } loc(#loc264)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc274)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc143)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc143)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc144)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc145)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc146)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc145)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc145)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc275)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc149)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc149)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc150)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc151)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc150)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc152)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc152)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc276)
      %17 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc153)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc154)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc155)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc156)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc157)
      %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc156)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc156)
      %24 = cir.call @strncpy(%18, %19, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc153)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc158)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc158)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc160)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc161)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc160)
      %31 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc162)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc277)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc163)
      cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc164)
      %33 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc165)
      %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc166)
      %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc166)
      cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc165)
    } loc(#loc273)
    cir.return loc(#loc107)
  } loc(#loc261)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc279)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc171)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc280)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc175)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc177)
          %4 = cir.const #cir.int<100> : !s32i loc(#loc178)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc178)
          %6 = cir.const #cir.int<1> : !u64i loc(#loc282)
          %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc283)
          %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc177)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc284)
          cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc285)
          cir.scope {
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc185)
            %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc186)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc186)
            %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc287)
            cir.if %18 {
              %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc188)
              %20 = cir.const #cir.int<1> : !s32i loc(#loc189)
              %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc190)
              cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc188)
            } loc(#loc288)
          } loc(#loc286)
          %10 = cir.const #cir.int<0> : !s32i loc(#loc191)
          %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc191)
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc192)
          %13 = cir.const #cir.int<0> : !s32i loc(#loc193)
          %14 = cir.ptr_stride(%12 : !cir.ptr<!s8i>, %13 : !s32i), !cir.ptr<!s8i> loc(#loc194)
          cir.store %11, %14 : !s8i, !cir.ptr<!s8i> loc(#loc289)
          cir.break loc(#loc195)
        } loc(#loc176)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc197)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc197)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc198)
          cir.break loc(#loc199)
        } loc(#loc196)
        cir.yield loc(#loc173)
      } loc(#loc173)
    } loc(#loc281)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc291)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc204)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc204)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc205)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc206)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc207)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc206)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc206)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc292)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc210)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc210)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc211)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc212)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc211)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc213)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc213)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc293)
      %17 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc214)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc215)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc216)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc217)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc218)
      %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc217)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc217)
      %24 = cir.call @strncpy(%18, %19, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc214)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc219)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc219)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc220)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc221)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc222)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc221)
      %31 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc223)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc294)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc224)
      cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc225)
      %33 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc226)
      %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc227)
      %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc227)
      cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc226)
    } loc(#loc290)
    cir.return loc(#loc168)
  } loc(#loc278)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":37:19)
#loc8 = loc("/usr/include/string.h":144:1)
#loc9 = loc("/usr/include/string.h":146:14)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":23:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":50:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":25:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":25:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":26:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":26:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":27:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":39:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":27:12)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":29:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":31:24)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":31:31)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":31:34)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":31:45)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":31:46)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":31:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":32:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":32:37)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":32:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":32:21)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":32:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":32:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":32:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":32:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":33:19)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":33:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":33:14)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":33:15)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":34:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":35:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":37:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":38:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":40:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":49:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":41:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":41:24)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":42:16)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":42:24)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":42:29)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":42:33)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":42:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":42:34)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":43:25)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":43:16)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":43:20)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":43:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":45:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":45:17)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":45:23)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":45:31)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":45:35)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":46:23)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":46:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":46:14)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":46:18)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":46:19)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":47:19)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":47:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":48:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":48:14)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":116:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":120:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":118:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":118:14)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":119:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":119:14)
#loc78 = loc("/usr/include/stdlib.h":575:1)
#loc79 = loc("/usr/include/stdlib.h":575:41)
#loc80 = loc("/usr/include/time.h":76:1)
#loc81 = loc("/usr/include/time.h":76:38)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":137:15)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":139:15)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":142:15)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":144:15)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":132:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":147:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":133:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":135:27)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":135:22)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":135:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":137:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":138:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":138:67)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":139:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":142:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":143:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":143:66)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":144:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":146:12)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":146:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":57:1)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":84:1)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":59:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":59:12)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":60:12)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":60:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":61:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":73:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":61:12)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":63:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":65:19)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":65:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":66:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":67:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":69:24)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":69:31)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":69:35)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":69:46)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":69:47)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":69:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":70:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":70:37)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":70:13)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":70:21)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":70:27)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":70:28)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":70:34)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":70:33)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":71:19)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":71:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":71:14)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":71:15)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":72:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":74:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":83:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":75:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":75:24)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":76:16)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":76:24)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":76:29)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":76:33)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":76:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":76:34)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":77:25)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":77:16)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":77:20)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":77:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":79:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":79:17)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":79:23)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":79:31)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":79:35)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":80:23)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":80:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":80:14)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":80:18)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":80:19)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":81:19)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":81:9)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":82:9)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":82:14)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":87:1)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":114:1)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":89:5)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":89:12)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":90:12)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":90:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":91:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":103:5)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":91:12)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":93:5)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":95:24)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":95:31)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":95:35)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":95:46)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":95:47)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":95:9)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":96:9)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":96:37)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":96:13)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":96:21)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":96:27)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":96:28)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":96:34)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":96:33)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":97:19)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":97:9)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":97:14)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":97:15)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":98:9)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":99:5)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":101:19)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":101:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":102:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":104:5)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":113:5)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":105:9)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":105:24)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":106:16)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":106:24)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":106:29)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":106:33)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":106:9)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":106:34)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":107:25)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":107:16)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":107:20)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":107:9)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":109:9)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":109:17)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":109:23)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":109:31)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":109:35)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":110:23)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":110:9)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":110:14)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":110:18)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":110:19)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":111:19)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":111:9)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":112:9)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c":112:14)
#loc228 = loc(fused[#loc1, #loc2])
#loc229 = loc(fused[#loc3, #loc4])
#loc230 = loc(fused[#loc5, #loc6])
#loc231 = loc(fused[#loc8, #loc9])
#loc232 = loc(fused[#loc10, #loc11])
#loc233 = loc(fused[#loc12, #loc13])
#loc234 = loc(fused[#loc14, #loc15])
#loc235 = loc(fused[#loc17, #loc16])
#loc236 = loc(fused[#loc18, #loc19])
#loc237 = loc(fused[#loc24, #loc25])
#loc238 = loc(fused[#loc23, #loc25])
#loc239 = loc(fused[#loc22, #loc26])
#loc240 = loc(fused[#loc27, #loc26])
#loc241 = loc(fused[#loc28, #loc29])
#loc242 = loc(fused[#loc30, #loc31])
#loc243 = loc(fused[#loc32, #loc29])
#loc244 = loc(fused[#loc37, #loc36])
#loc245 = loc(fused[#loc44, #loc45])
#loc246 = loc(fused[#loc46, #loc47])
#loc247 = loc(fused[#loc52, #loc53])
#loc248 = loc(fused[#loc57, #loc54])
#loc249 = loc(fused[#loc64, #loc63])
#loc250 = loc(fused[#loc72, #loc73])
#loc251 = loc(fused[#loc74, #loc75])
#loc252 = loc(fused[#loc76, #loc77])
#loc253 = loc(fused[#loc78, #loc79])
#loc254 = loc(fused[#loc80, #loc81])
#loc255 = loc(fused[#loc86, #loc87])
#loc258 = loc(fused[#loc97, #loc98])
#loc259 = loc(fused[#loc101, #loc102])
#loc260 = loc(fused[#loc105, #loc104])
#loc261 = loc(fused[#loc106, #loc107])
#loc262 = loc(fused[#loc108, #loc109])
#loc263 = loc(fused[#loc111, #loc110])
#loc264 = loc(fused[#loc112, #loc113])
#loc265 = loc(fused[#loc122, #loc123])
#loc266 = loc(fused[#loc121, #loc123])
#loc267 = loc(fused[#loc120, #loc124])
#loc268 = loc(fused[#loc125, #loc124])
#loc269 = loc(fused[#loc126, #loc127])
#loc270 = loc(fused[#loc128, #loc129])
#loc271 = loc(fused[#loc130, #loc127])
#loc272 = loc(fused[#loc135, #loc134])
#loc273 = loc(fused[#loc139, #loc140])
#loc274 = loc(fused[#loc141, #loc142])
#loc275 = loc(fused[#loc147, #loc148])
#loc276 = loc(fused[#loc152, #loc149])
#loc277 = loc(fused[#loc159, #loc158])
#loc278 = loc(fused[#loc167, #loc168])
#loc279 = loc(fused[#loc169, #loc170])
#loc280 = loc(fused[#loc172, #loc171])
#loc281 = loc(fused[#loc173, #loc174])
#loc282 = loc(fused[#loc179, #loc180])
#loc283 = loc(fused[#loc178, #loc180])
#loc284 = loc(fused[#loc177, #loc181])
#loc285 = loc(fused[#loc182, #loc181])
#loc286 = loc(fused[#loc183, #loc184])
#loc287 = loc(fused[#loc185, #loc186])
#loc288 = loc(fused[#loc187, #loc184])
#loc289 = loc(fused[#loc192, #loc191])
#loc290 = loc(fused[#loc200, #loc201])
#loc291 = loc(fused[#loc202, #loc203])
#loc292 = loc(fused[#loc208, #loc209])
#loc293 = loc(fused[#loc213, #loc210])
#loc294 = loc(fused[#loc220, #loc219])
