!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__char_calloc_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc174)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc175)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc176)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"A String\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc177)
  cir.func no_proto @CWE401_Memory_Leak__char_calloc_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc179)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc14)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc180)
    cir.br ^bb1 loc(#loc181)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc18)
    cir.brcond %3 ^bb2, ^bb7 loc(#loc182)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc20)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc21)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc21)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc183)
    %8 = cir.call @calloc(%6, %7) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc184)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc185)
    cir.br ^bb3 loc(#loc186)
  ^bb3:  // pred: ^bb2
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc29)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc29)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc187)
    cir.brcond %13 ^bb4, ^bb5 loc(#loc188)
  ^bb4:  // pred: ^bb3
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc31)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc33)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc31)
    cir.br ^bb5 loc(#loc27)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc27)
  ^bb6:  // pred: ^bb5
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
    %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc7)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc7)
    %20 = cir.call @strcpy(%17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc35)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc37)
    cir.br ^bb7 loc(#loc17)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc17)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc189)
  ^bb9:  // pred: ^bb8
    %22 = cir.const #cir.int<1> : !s32i loc(#loc40)
    %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc40)
    cir.brcond %23 ^bb10, ^bb11 loc(#loc190)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc39)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc39)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc11)
  } loc(#loc178)
  cir.func no_proto @CWE401_Memory_Leak__char_calloc_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc192)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc193)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc194)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc195)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    cir.return loc(#loc43)
  } loc(#loc191)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc52)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc196)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc198)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc59)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc199)
    cir.br ^bb1 loc(#loc200)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<1> : !s32i loc(#loc63)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc63)
    cir.brcond %3 ^bb2, ^bb7 loc(#loc201)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc65)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc66)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc66)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc202)
    %8 = cir.call @calloc(%6, %7) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc65)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc203)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc204)
    cir.br ^bb3 loc(#loc205)
  ^bb3:  // pred: ^bb2
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc73)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc74)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc74)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc206)
    cir.brcond %13 ^bb4, ^bb5 loc(#loc207)
  ^bb4:  // pred: ^bb3
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc76)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc78)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc76)
    cir.br ^bb5 loc(#loc72)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc72)
  ^bb6:  // pred: ^bb5
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
    %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc80)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc80)
    %20 = cir.call @strcpy(%17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc81)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc82)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    cir.br ^bb7 loc(#loc62)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc62)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc208)
  ^bb9:  // pred: ^bb8
    %22 = cir.const #cir.int<0> : !s32i loc(#loc86)
    %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc86)
    cir.brcond %23 ^bb10, ^bb11 loc(#loc209)
  ^bb10:  // pred: ^bb9
    %24 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc52)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    cir.br ^bb12 loc(#loc88)
  ^bb11:  // pred: ^bb9
    %26 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc91)
    %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc92)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc92)
    cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc91)
    cir.br ^bb12 loc(#loc85)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc85)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc56)
  } loc(#loc197)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc211)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc97)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc212)
    cir.br ^bb1 loc(#loc213)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<1> : !s32i loc(#loc101)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc101)
    cir.brcond %3 ^bb2, ^bb7 loc(#loc214)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc103)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc104)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc104)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc215)
    %8 = cir.call @calloc(%6, %7) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc103)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc216)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc217)
    cir.br ^bb3 loc(#loc218)
  ^bb3:  // pred: ^bb2
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc112)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc112)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc219)
    cir.brcond %13 ^bb4, ^bb5 loc(#loc220)
  ^bb4:  // pred: ^bb3
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc114)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc115)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc116)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc114)
    cir.br ^bb5 loc(#loc110)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc110)
  ^bb6:  // pred: ^bb5
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc117)
    %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc118)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc118)
    %20 = cir.call @strcpy(%17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc119)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc120)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    cir.br ^bb7 loc(#loc100)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc100)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc221)
  ^bb9:  // pred: ^bb8
    %22 = cir.const #cir.int<1> : !s32i loc(#loc124)
    %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc124)
    cir.brcond %23 ^bb10, ^bb11 loc(#loc222)
  ^bb10:  // pred: ^bb9
    %24 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc126)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc127)
    cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc126)
    cir.br ^bb11 loc(#loc123)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc123)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc94)
  } loc(#loc210)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc224)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc132)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc225)
    cir.br ^bb1 loc(#loc226)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<0> : !s32i loc(#loc136)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc136)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc227)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc140)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc140)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc141)
    cir.br ^bb4 loc(#loc138)
  ^bb3:  // pred: ^bb1
    %6 = cir.const #cir.int<100> : !s32i loc(#loc142)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc142)
    %8 = cir.const #cir.int<1> : !u64i loc(#loc142)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc142)
    %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc142)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc142)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc142)
    cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc228)
    %13 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc144)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc146)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc146)
    %17 = cir.call @strcpy(%14, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc144)
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc147)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc148)
    cir.br ^bb4 loc(#loc135)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc135)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc229)
  ^bb6:  // pred: ^bb5
    %19 = cir.const #cir.int<1> : !s32i loc(#loc151)
    %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc151)
    cir.brcond %20 ^bb7, ^bb8 loc(#loc230)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc150)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc150)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc129)
  } loc(#loc223)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc232)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc157)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc233)
    cir.br ^bb1 loc(#loc234)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<1> : !s32i loc(#loc161)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc161)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc235)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<100> : !s32i loc(#loc163)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc163)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc163)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc163)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc163)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc163)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc163)
    cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc236)
    %11 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc165)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc166)
    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc167)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc167)
    %15 = cir.call @strcpy(%12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc165)
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc168)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc169)
    cir.br ^bb3 loc(#loc160)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc160)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc237)
  ^bb5:  // pred: ^bb4
    %17 = cir.const #cir.int<1> : !s32i loc(#loc172)
    %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc172)
    cir.brcond %18 ^bb6, ^bb7 loc(#loc238)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc171)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc171)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc154)
  } loc(#loc231)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__char_calloc_04.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":675:1)
#loc2 = loc("/usr/include/stdlib.h":676:14)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":141:1)
#loc6 = loc("/usr/include/string.h":142:14)
#loc7 = loc("CWE401_Memory_Leak__char_calloc_04.c":40:22)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE401_Memory_Leak__char_calloc_04.c":30:1)
#loc11 = loc("CWE401_Memory_Leak__char_calloc_04.c":48:1)
#loc12 = loc("CWE401_Memory_Leak__char_calloc_04.c":32:5)
#loc13 = loc("CWE401_Memory_Leak__char_calloc_04.c":32:12)
#loc14 = loc("CWE401_Memory_Leak__char_calloc_04.c":33:12)
#loc15 = loc("CWE401_Memory_Leak__char_calloc_04.c":33:5)
#loc16 = loc("CWE401_Memory_Leak__char_calloc_04.c":34:5)
#loc17 = loc("CWE401_Memory_Leak__char_calloc_04.c":42:5)
#loc18 = loc("CWE401_Memory_Leak__char_calloc_04.c":34:8)
#loc19 = loc("CWE401_Memory_Leak__char_calloc_04.c":35:5)
#loc20 = loc("CWE401_Memory_Leak__char_calloc_04.c":37:24)
#loc21 = loc("CWE401_Memory_Leak__char_calloc_04.c":37:31)
#loc22 = loc("CWE401_Memory_Leak__char_calloc_04.c":37:36)
#loc23 = loc("CWE401_Memory_Leak__char_calloc_04.c":37:47)
#loc24 = loc("CWE401_Memory_Leak__char_calloc_04.c":37:48)
#loc25 = loc("CWE401_Memory_Leak__char_calloc_04.c":37:9)
#loc26 = loc("CWE401_Memory_Leak__char_calloc_04.c":38:9)
#loc27 = loc("CWE401_Memory_Leak__char_calloc_04.c":38:37)
#loc28 = loc("CWE401_Memory_Leak__char_calloc_04.c":38:13)
#loc29 = loc("CWE401_Memory_Leak__char_calloc_04.c":38:21)
#loc30 = loc("CWE401_Memory_Leak__char_calloc_04.c":38:27)
#loc31 = loc("CWE401_Memory_Leak__char_calloc_04.c":38:28)
#loc32 = loc("CWE401_Memory_Leak__char_calloc_04.c":38:34)
#loc33 = loc("CWE401_Memory_Leak__char_calloc_04.c":38:33)
#loc34 = loc("CWE401_Memory_Leak__char_calloc_04.c":40:16)
#loc35 = loc("CWE401_Memory_Leak__char_calloc_04.c":40:9)
#loc36 = loc("CWE401_Memory_Leak__char_calloc_04.c":41:19)
#loc37 = loc("CWE401_Memory_Leak__char_calloc_04.c":41:9)
#loc38 = loc("CWE401_Memory_Leak__char_calloc_04.c":43:5)
#loc39 = loc("CWE401_Memory_Leak__char_calloc_04.c":47:5)
#loc40 = loc("CWE401_Memory_Leak__char_calloc_04.c":43:8)
#loc41 = loc("CWE401_Memory_Leak__char_calloc_04.c":44:5)
#loc42 = loc("CWE401_Memory_Leak__char_calloc_04.c":146:1)
#loc43 = loc("CWE401_Memory_Leak__char_calloc_04.c":152:1)
#loc44 = loc("CWE401_Memory_Leak__char_calloc_04.c":148:5)
#loc45 = loc("CWE401_Memory_Leak__char_calloc_04.c":148:14)
#loc46 = loc("CWE401_Memory_Leak__char_calloc_04.c":149:5)
#loc47 = loc("CWE401_Memory_Leak__char_calloc_04.c":149:14)
#loc48 = loc("CWE401_Memory_Leak__char_calloc_04.c":150:5)
#loc49 = loc("CWE401_Memory_Leak__char_calloc_04.c":150:14)
#loc50 = loc("CWE401_Memory_Leak__char_calloc_04.c":151:5)
#loc51 = loc("CWE401_Memory_Leak__char_calloc_04.c":151:14)
#loc52 = loc("CWE401_Memory_Leak__char_calloc_04.c":71:19)
#loc53 = loc("/usr/include/stdlib.h":687:1)
#loc54 = loc("/usr/include/stdlib.h":687:32)
#loc55 = loc("CWE401_Memory_Leak__char_calloc_04.c":55:1)
#loc56 = loc("CWE401_Memory_Leak__char_calloc_04.c":78:1)
#loc57 = loc("CWE401_Memory_Leak__char_calloc_04.c":57:5)
#loc58 = loc("CWE401_Memory_Leak__char_calloc_04.c":57:12)
#loc59 = loc("CWE401_Memory_Leak__char_calloc_04.c":58:12)
#loc60 = loc("CWE401_Memory_Leak__char_calloc_04.c":58:5)
#loc61 = loc("CWE401_Memory_Leak__char_calloc_04.c":59:5)
#loc62 = loc("CWE401_Memory_Leak__char_calloc_04.c":67:5)
#loc63 = loc("CWE401_Memory_Leak__char_calloc_04.c":59:8)
#loc64 = loc("CWE401_Memory_Leak__char_calloc_04.c":60:5)
#loc65 = loc("CWE401_Memory_Leak__char_calloc_04.c":62:24)
#loc66 = loc("CWE401_Memory_Leak__char_calloc_04.c":62:31)
#loc67 = loc("CWE401_Memory_Leak__char_calloc_04.c":62:36)
#loc68 = loc("CWE401_Memory_Leak__char_calloc_04.c":62:47)
#loc69 = loc("CWE401_Memory_Leak__char_calloc_04.c":62:48)
#loc70 = loc("CWE401_Memory_Leak__char_calloc_04.c":62:9)
#loc71 = loc("CWE401_Memory_Leak__char_calloc_04.c":63:9)
#loc72 = loc("CWE401_Memory_Leak__char_calloc_04.c":63:37)
#loc73 = loc("CWE401_Memory_Leak__char_calloc_04.c":63:13)
#loc74 = loc("CWE401_Memory_Leak__char_calloc_04.c":63:21)
#loc75 = loc("CWE401_Memory_Leak__char_calloc_04.c":63:27)
#loc76 = loc("CWE401_Memory_Leak__char_calloc_04.c":63:28)
#loc77 = loc("CWE401_Memory_Leak__char_calloc_04.c":63:34)
#loc78 = loc("CWE401_Memory_Leak__char_calloc_04.c":63:33)
#loc79 = loc("CWE401_Memory_Leak__char_calloc_04.c":65:16)
#loc80 = loc("CWE401_Memory_Leak__char_calloc_04.c":65:22)
#loc81 = loc("CWE401_Memory_Leak__char_calloc_04.c":65:9)
#loc82 = loc("CWE401_Memory_Leak__char_calloc_04.c":66:19)
#loc83 = loc("CWE401_Memory_Leak__char_calloc_04.c":66:9)
#loc84 = loc("CWE401_Memory_Leak__char_calloc_04.c":68:5)
#loc85 = loc("CWE401_Memory_Leak__char_calloc_04.c":77:5)
#loc86 = loc("CWE401_Memory_Leak__char_calloc_04.c":68:8)
#loc87 = loc("CWE401_Memory_Leak__char_calloc_04.c":69:5)
#loc88 = loc("CWE401_Memory_Leak__char_calloc_04.c":72:5)
#loc89 = loc("CWE401_Memory_Leak__char_calloc_04.c":74:5)
#loc90 = loc("CWE401_Memory_Leak__char_calloc_04.c":71:9)
#loc91 = loc("CWE401_Memory_Leak__char_calloc_04.c":76:9)
#loc92 = loc("CWE401_Memory_Leak__char_calloc_04.c":76:14)
#loc93 = loc("CWE401_Memory_Leak__char_calloc_04.c":81:1)
#loc94 = loc("CWE401_Memory_Leak__char_calloc_04.c":99:1)
#loc95 = loc("CWE401_Memory_Leak__char_calloc_04.c":83:5)
#loc96 = loc("CWE401_Memory_Leak__char_calloc_04.c":83:12)
#loc97 = loc("CWE401_Memory_Leak__char_calloc_04.c":84:12)
#loc98 = loc("CWE401_Memory_Leak__char_calloc_04.c":84:5)
#loc99 = loc("CWE401_Memory_Leak__char_calloc_04.c":85:5)
#loc100 = loc("CWE401_Memory_Leak__char_calloc_04.c":93:5)
#loc101 = loc("CWE401_Memory_Leak__char_calloc_04.c":85:8)
#loc102 = loc("CWE401_Memory_Leak__char_calloc_04.c":86:5)
#loc103 = loc("CWE401_Memory_Leak__char_calloc_04.c":88:24)
#loc104 = loc("CWE401_Memory_Leak__char_calloc_04.c":88:31)
#loc105 = loc("CWE401_Memory_Leak__char_calloc_04.c":88:36)
#loc106 = loc("CWE401_Memory_Leak__char_calloc_04.c":88:47)
#loc107 = loc("CWE401_Memory_Leak__char_calloc_04.c":88:48)
#loc108 = loc("CWE401_Memory_Leak__char_calloc_04.c":88:9)
#loc109 = loc("CWE401_Memory_Leak__char_calloc_04.c":89:9)
#loc110 = loc("CWE401_Memory_Leak__char_calloc_04.c":89:37)
#loc111 = loc("CWE401_Memory_Leak__char_calloc_04.c":89:13)
#loc112 = loc("CWE401_Memory_Leak__char_calloc_04.c":89:21)
#loc113 = loc("CWE401_Memory_Leak__char_calloc_04.c":89:27)
#loc114 = loc("CWE401_Memory_Leak__char_calloc_04.c":89:28)
#loc115 = loc("CWE401_Memory_Leak__char_calloc_04.c":89:34)
#loc116 = loc("CWE401_Memory_Leak__char_calloc_04.c":89:33)
#loc117 = loc("CWE401_Memory_Leak__char_calloc_04.c":91:16)
#loc118 = loc("CWE401_Memory_Leak__char_calloc_04.c":91:22)
#loc119 = loc("CWE401_Memory_Leak__char_calloc_04.c":91:9)
#loc120 = loc("CWE401_Memory_Leak__char_calloc_04.c":92:19)
#loc121 = loc("CWE401_Memory_Leak__char_calloc_04.c":92:9)
#loc122 = loc("CWE401_Memory_Leak__char_calloc_04.c":94:5)
#loc123 = loc("CWE401_Memory_Leak__char_calloc_04.c":98:5)
#loc124 = loc("CWE401_Memory_Leak__char_calloc_04.c":94:8)
#loc125 = loc("CWE401_Memory_Leak__char_calloc_04.c":95:5)
#loc126 = loc("CWE401_Memory_Leak__char_calloc_04.c":97:9)
#loc127 = loc("CWE401_Memory_Leak__char_calloc_04.c":97:14)
#loc128 = loc("CWE401_Memory_Leak__char_calloc_04.c":102:1)
#loc129 = loc("CWE401_Memory_Leak__char_calloc_04.c":124:1)
#loc130 = loc("CWE401_Memory_Leak__char_calloc_04.c":104:5)
#loc131 = loc("CWE401_Memory_Leak__char_calloc_04.c":104:12)
#loc132 = loc("CWE401_Memory_Leak__char_calloc_04.c":105:12)
#loc133 = loc("CWE401_Memory_Leak__char_calloc_04.c":105:5)
#loc134 = loc("CWE401_Memory_Leak__char_calloc_04.c":106:5)
#loc135 = loc("CWE401_Memory_Leak__char_calloc_04.c":118:5)
#loc136 = loc("CWE401_Memory_Leak__char_calloc_04.c":106:8)
#loc137 = loc("CWE401_Memory_Leak__char_calloc_04.c":107:5)
#loc138 = loc("CWE401_Memory_Leak__char_calloc_04.c":110:5)
#loc139 = loc("CWE401_Memory_Leak__char_calloc_04.c":112:5)
#loc140 = loc("CWE401_Memory_Leak__char_calloc_04.c":109:19)
#loc141 = loc("CWE401_Memory_Leak__char_calloc_04.c":109:9)
#loc142 = loc("CWE401_Memory_Leak__char_calloc_04.c":114:24)
#loc143 = loc("CWE401_Memory_Leak__char_calloc_04.c":114:9)
#loc144 = loc("CWE401_Memory_Leak__char_calloc_04.c":116:9)
#loc145 = loc("CWE401_Memory_Leak__char_calloc_04.c":116:16)
#loc146 = loc("CWE401_Memory_Leak__char_calloc_04.c":116:22)
#loc147 = loc("CWE401_Memory_Leak__char_calloc_04.c":117:19)
#loc148 = loc("CWE401_Memory_Leak__char_calloc_04.c":117:9)
#loc149 = loc("CWE401_Memory_Leak__char_calloc_04.c":119:5)
#loc150 = loc("CWE401_Memory_Leak__char_calloc_04.c":123:5)
#loc151 = loc("CWE401_Memory_Leak__char_calloc_04.c":119:8)
#loc152 = loc("CWE401_Memory_Leak__char_calloc_04.c":120:5)
#loc153 = loc("CWE401_Memory_Leak__char_calloc_04.c":127:1)
#loc154 = loc("CWE401_Memory_Leak__char_calloc_04.c":144:1)
#loc155 = loc("CWE401_Memory_Leak__char_calloc_04.c":129:5)
#loc156 = loc("CWE401_Memory_Leak__char_calloc_04.c":129:12)
#loc157 = loc("CWE401_Memory_Leak__char_calloc_04.c":130:12)
#loc158 = loc("CWE401_Memory_Leak__char_calloc_04.c":130:5)
#loc159 = loc("CWE401_Memory_Leak__char_calloc_04.c":131:5)
#loc160 = loc("CWE401_Memory_Leak__char_calloc_04.c":138:5)
#loc161 = loc("CWE401_Memory_Leak__char_calloc_04.c":131:8)
#loc162 = loc("CWE401_Memory_Leak__char_calloc_04.c":132:5)
#loc163 = loc("CWE401_Memory_Leak__char_calloc_04.c":134:24)
#loc164 = loc("CWE401_Memory_Leak__char_calloc_04.c":134:9)
#loc165 = loc("CWE401_Memory_Leak__char_calloc_04.c":136:9)
#loc166 = loc("CWE401_Memory_Leak__char_calloc_04.c":136:16)
#loc167 = loc("CWE401_Memory_Leak__char_calloc_04.c":136:22)
#loc168 = loc("CWE401_Memory_Leak__char_calloc_04.c":137:19)
#loc169 = loc("CWE401_Memory_Leak__char_calloc_04.c":137:9)
#loc170 = loc("CWE401_Memory_Leak__char_calloc_04.c":139:5)
#loc171 = loc("CWE401_Memory_Leak__char_calloc_04.c":143:5)
#loc172 = loc("CWE401_Memory_Leak__char_calloc_04.c":139:8)
#loc173 = loc("CWE401_Memory_Leak__char_calloc_04.c":140:5)
#loc174 = loc(fused[#loc1, #loc2])
#loc175 = loc(fused[#loc3, #loc4])
#loc176 = loc(fused[#loc5, #loc6])
#loc177 = loc(fused[#loc8, #loc9])
#loc178 = loc(fused[#loc10, #loc11])
#loc179 = loc(fused[#loc12, #loc13])
#loc180 = loc(fused[#loc15, #loc14])
#loc181 = loc(fused[#loc16, #loc17])
#loc182 = loc(fused[#loc19, #loc17])
#loc183 = loc(fused[#loc22, #loc23])
#loc184 = loc(fused[#loc20, #loc24])
#loc185 = loc(fused[#loc25, #loc24])
#loc186 = loc(fused[#loc26, #loc27])
#loc187 = loc(fused[#loc28, #loc29])
#loc188 = loc(fused[#loc30, #loc27])
#loc189 = loc(fused[#loc38, #loc39])
#loc190 = loc(fused[#loc41, #loc39])
#loc191 = loc(fused[#loc42, #loc43])
#loc192 = loc(fused[#loc44, #loc45])
#loc193 = loc(fused[#loc46, #loc47])
#loc194 = loc(fused[#loc48, #loc49])
#loc195 = loc(fused[#loc50, #loc51])
#loc196 = loc(fused[#loc53, #loc54])
#loc197 = loc(fused[#loc55, #loc56])
#loc198 = loc(fused[#loc57, #loc58])
#loc199 = loc(fused[#loc60, #loc59])
#loc200 = loc(fused[#loc61, #loc62])
#loc201 = loc(fused[#loc64, #loc62])
#loc202 = loc(fused[#loc67, #loc68])
#loc203 = loc(fused[#loc65, #loc69])
#loc204 = loc(fused[#loc70, #loc69])
#loc205 = loc(fused[#loc71, #loc72])
#loc206 = loc(fused[#loc73, #loc74])
#loc207 = loc(fused[#loc75, #loc72])
#loc208 = loc(fused[#loc84, #loc85])
#loc209 = loc(fused[#loc87, #loc88, #loc89, #loc85])
#loc210 = loc(fused[#loc93, #loc94])
#loc211 = loc(fused[#loc95, #loc96])
#loc212 = loc(fused[#loc98, #loc97])
#loc213 = loc(fused[#loc99, #loc100])
#loc214 = loc(fused[#loc102, #loc100])
#loc215 = loc(fused[#loc105, #loc106])
#loc216 = loc(fused[#loc103, #loc107])
#loc217 = loc(fused[#loc108, #loc107])
#loc218 = loc(fused[#loc109, #loc110])
#loc219 = loc(fused[#loc111, #loc112])
#loc220 = loc(fused[#loc113, #loc110])
#loc221 = loc(fused[#loc122, #loc123])
#loc222 = loc(fused[#loc125, #loc123])
#loc223 = loc(fused[#loc128, #loc129])
#loc224 = loc(fused[#loc130, #loc131])
#loc225 = loc(fused[#loc133, #loc132])
#loc226 = loc(fused[#loc134, #loc135])
#loc227 = loc(fused[#loc137, #loc138, #loc139, #loc135])
#loc228 = loc(fused[#loc143, #loc142])
#loc229 = loc(fused[#loc149, #loc150])
#loc230 = loc(fused[#loc152, #loc150])
#loc231 = loc(fused[#loc153, #loc154])
#loc232 = loc(fused[#loc155, #loc156])
#loc233 = loc(fused[#loc158, #loc157])
#loc234 = loc(fused[#loc159, #loc160])
#loc235 = loc(fused[#loc162, #loc160])
#loc236 = loc(fused[#loc164, #loc163])
#loc237 = loc(fused[#loc170, #loc171])
#loc238 = loc(fused[#loc173, #loc171])
