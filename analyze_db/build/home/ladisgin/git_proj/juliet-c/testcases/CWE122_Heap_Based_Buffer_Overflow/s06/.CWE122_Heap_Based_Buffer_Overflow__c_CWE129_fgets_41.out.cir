!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":24:21)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":24:25)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":187:10)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":187:14)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":187:20)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":187:32)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":122:25)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":122:29)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":80:25)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":80:29)
#true = #cir.bool<true> : !cir.bool
#loc331 = loc(fused[#loc21, #loc22])
#loc371 = loc(fused[#loc128, #loc129])
#loc372 = loc(fused[#loc130, #loc131])
#loc377 = loc(fused[#loc149, #loc150])
#loc413 = loc(fused[#loc247, #loc248])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc322)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc323)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc324)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc325)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc326)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc327)
  cir.func private @printIntLine(!s32i) loc(#loc328)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc16)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc329)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc21, #loc22])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc331)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc23)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc333)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc334)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc30)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc31)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc31)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc335)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc336)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc30)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc337)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc334)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc36)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc37)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc37)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc339)
        cir.if %16 {
          %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc39)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc40)
          %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc41)
          cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc39)
        } loc(#loc340)
      } loc(#loc338)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc44)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc342)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc46)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc47)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc343)
          cir.condition(%16) loc(#loc48)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc50)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc51)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc52)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc53)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc345)
          } loc(#loc344)
          cir.yield loc(#loc43)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc54)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc55)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc346)
          cir.yield loc(#loc341)
        } loc(#loc341)
      } loc(#loc341)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc58)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc59)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !cir.bool loc(#loc348)
        cir.if %15 {
          %16 = cir.const #cir.int<1> : !s32i loc(#loc63)
          %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc64)
          %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
          %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc66)
          cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc350)
          cir.scope {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc69)
            cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc352)
            cir.for : cond {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc71)
              %22 = cir.const #cir.int<10> : !s32i loc(#loc72)
              %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc353)
              cir.condition(%23) loc(#loc73)
            } body {
              cir.scope {
                %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc75)
                %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc76)
                %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc77)
                %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc75)
                cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc78)
              } loc(#loc354)
              cir.yield loc(#loc68)
            } step {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc79)
              %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc80)
              cir.store %22, %1 : !s32i, !cir.ptr<!s32i> loc(#loc355)
              cir.yield loc(#loc351)
            } loc(#loc351)
          } loc(#loc351)
        } else {
          %16 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc16)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc16)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc81)
        } loc(#loc349)
      } loc(#loc347)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc82)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc83)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc83)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc82)
    } loc(#loc332)
    cir.return loc(#loc20)
  } loc(#loc330)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc357)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc89)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc358)
    cir.scope {
      %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc360)
      %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc360)
      cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc360)
      cir.scope {
        %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc97)
        %7 = cir.const #cir.int<3> : !s32i loc(#loc98)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc98)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc98)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc98)
        %11 = cir.const #cir.int<2> : !s32i loc(#loc98)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc98)
        %13 = cir.binop(add, %10, %12) : !u64i loc(#loc98)
        %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc98)
        %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc323)
        %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc99)
        %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc100)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc101)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc101)
        %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc362)
        cir.if %20 {
          %21 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc105)
          %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc106)
          cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc364)
        } else {
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc109)
        } loc(#loc363)
      } loc(#loc361)
    } loc(#loc359)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
    cir.call @badSink(%3) : (!s32i) -> () loc(#loc111)
    cir.return loc(#loc85)
  } loc(#loc356)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc366)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc114)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc367)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc116)
    cir.return loc(#loc113)
  } loc(#loc365)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc368)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc369)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc122)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc123)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc124)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc125)
  cir.func @main(%arg0: !s32i loc(fused[#loc128, #loc129]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc130, #loc131])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc371)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc372)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc127)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc132)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc132)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc133)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc134)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc134)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc135)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc122)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc122)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc136)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41_good : !cir.ptr<!cir.func<!void ()>> loc(#loc373)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41_good() : () -> () loc(#loc137)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc123)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc123)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc139)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc124)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc124)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc140)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc374)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41_bad() : () -> () loc(#loc141)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc125)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc125)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc143)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc144)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc375)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc375)
    cir.return %17 : !s32i loc(#loc375)
  } loc(#loc370)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc146)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc149, #loc150])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc377)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc379)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc380)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc158)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc159)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc159)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc381)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc382)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc158)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc383)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc380)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc164)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc165)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc165)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc385)
        cir.if %16 {
          %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc167)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc168)
          %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc169)
          cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc167)
        } loc(#loc386)
      } loc(#loc384)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc172)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc388)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc174)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc175)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc389)
          cir.condition(%16) loc(#loc176)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc178)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc179)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc180)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc181)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc391)
          } loc(#loc390)
          cir.yield loc(#loc171)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc182)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc183)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc392)
          cir.yield loc(#loc387)
        } loc(#loc387)
      } loc(#loc387)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc186)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc187)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !cir.bool loc(#loc394)
        %16 = cir.ternary(%15, true {
          %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc189)
          %18 = cir.const #cir.int<10> : !s32i loc(#loc190)
          %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc395)
          %20 = cir.ternary(%19, true {
            %21 = cir.const #true loc(#loc188)
            cir.yield %21 : !cir.bool loc(#loc188)
          }, false {
            %21 = cir.const #false loc(#loc188)
            cir.yield %21 : !cir.bool loc(#loc188)
          }) : (!cir.bool) -> !cir.bool loc(#loc188)
          cir.yield %20 : !cir.bool loc(#loc188)
        }, false {
          %17 = cir.const #false loc(#loc188)
          cir.yield %17 : !cir.bool loc(#loc188)
        }) : (!cir.bool) -> !cir.bool loc(#loc188)
        cir.if %16 {
          %17 = cir.const #cir.int<1> : !s32i loc(#loc195)
          %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc196)
          %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc197)
          %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc198)
          cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc397)
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc201)
            cir.store %21, %1 : !s32i, !cir.ptr<!s32i> loc(#loc399)
            cir.for : cond {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc203)
              %23 = cir.const #cir.int<10> : !s32i loc(#loc204)
              %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc400)
              cir.condition(%24) loc(#loc205)
            } body {
              cir.scope {
                %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc207)
                %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc208)
                %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc209)
                %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc207)
                cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc210)
              } loc(#loc401)
              cir.yield loc(#loc200)
            } step {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc211)
              %23 = cir.unary(inc, %22) : !s32i, !s32i loc(#loc212)
              cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc402)
              cir.yield loc(#loc398)
            } loc(#loc398)
          } loc(#loc398)
        } else {
          %17 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc146)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc146)
          cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc213)
        } loc(#loc396)
      } loc(#loc393)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc214)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc215)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc215)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc214)
    } loc(#loc378)
    cir.return loc(#loc148)
  } loc(#loc376)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc404)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc220)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc221)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc405)
    cir.scope {
      %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc407)
      %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc407)
      cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc407)
      cir.scope {
        %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc229)
        %7 = cir.const #cir.int<3> : !s32i loc(#loc230)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc230)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc230)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc230)
        %11 = cir.const #cir.int<2> : !s32i loc(#loc230)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc230)
        %13 = cir.binop(add, %10, %12) : !u64i loc(#loc230)
        %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc230)
        %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc323)
        %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc231)
        %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc232)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc233)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc233)
        %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc409)
        cir.if %20 {
          %21 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc237)
          %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc238)
          cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc411)
        } else {
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc241)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc241)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc242)
        } loc(#loc410)
      } loc(#loc408)
    } loc(#loc406)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc243)
    cir.call @goodB2GSink(%3) : (!s32i) -> () loc(#loc244)
    cir.return loc(#loc217)
  } loc(#loc403)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc247, #loc248])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc413)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc249)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc415)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc416)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc256)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc257)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc257)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc417)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc418)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc256)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc419)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc416)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc262)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc263)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc263)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc421)
        cir.if %16 {
          %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc265)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc266)
          %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc267)
          cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc265)
        } loc(#loc422)
      } loc(#loc420)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc270)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc424)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc272)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc273)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc425)
          cir.condition(%16) loc(#loc274)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc276)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc277)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc278)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc279)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc427)
          } loc(#loc426)
          cir.yield loc(#loc269)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc280)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc281)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc428)
          cir.yield loc(#loc423)
        } loc(#loc423)
      } loc(#loc423)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc284)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc285)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !cir.bool loc(#loc430)
        cir.if %15 {
          %16 = cir.const #cir.int<1> : !s32i loc(#loc289)
          %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc290)
          %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc291)
          %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc292)
          cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc432)
          cir.scope {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc295)
            cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc434)
            cir.for : cond {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc297)
              %22 = cir.const #cir.int<10> : !s32i loc(#loc298)
              %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc435)
              cir.condition(%23) loc(#loc299)
            } body {
              cir.scope {
                %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc301)
                %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc302)
                %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc303)
                %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc301)
                cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc304)
              } loc(#loc436)
              cir.yield loc(#loc294)
            } step {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc305)
              %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc306)
              cir.store %22, %1 : !s32i, !cir.ptr<!s32i> loc(#loc437)
              cir.yield loc(#loc433)
            } loc(#loc433)
          } loc(#loc433)
        } else {
          %16 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc307)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc307)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc308)
        } loc(#loc431)
      } loc(#loc429)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc309)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc310)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc310)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc309)
    } loc(#loc414)
    cir.return loc(#loc246)
  } loc(#loc412)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc439)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc315)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc316)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc440)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc318)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc441)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc320)
    cir.call @goodG2BSink(%4) : (!s32i) -> () loc(#loc321)
    cir.return loc(#loc312)
  } loc(#loc438)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":69:23)
#loc10 = loc("/usr/include/stdlib.h":672:1)
#loc11 = loc("/usr/include/stdlib.h":672:45)
#loc12 = loc("/usr/include/stdlib.h":756:1)
#loc13 = loc("/usr/include/stdlib.h":756:70)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":48:23)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":24:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":52:1)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":25:1)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":26:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":51:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":27:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":27:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":28:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":28:54)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":28:31)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":28:38)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":28:43)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":28:53)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":29:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":29:39)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":29:13)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":29:23)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":29:29)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":29:30)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":29:36)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":29:35)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":31:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":34:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":31:18)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":31:14)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":31:21)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":31:25)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":31:23)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":32:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":33:25)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":33:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":33:20)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":33:21)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":31:30)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":31:29)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":37:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":49:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":37:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":37:21)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":38:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":45:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":47:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":39:28)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":39:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":39:20)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":39:24)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":41:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":44:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":41:21)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":41:17)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":41:24)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":41:28)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":41:26)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":42:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":43:30)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":43:37)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":43:38)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":43:17)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":41:33)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":41:32)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":48:13)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":50:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":50:14)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":54:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":73:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":56:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":56:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":58:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":58:12)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":58:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":59:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":71:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":60:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":60:45)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":62:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":70:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":62:19)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":62:32)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":62:49)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":62:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":62:59)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":63:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":66:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":68:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":65:25)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":65:20)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":65:13)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":65:36)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":69:13)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":72:13)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":72:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":172:1)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":176:1)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":174:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":174:13)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":175:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":175:13)
#loc118 = loc("/usr/include/stdlib.h":575:1)
#loc119 = loc("/usr/include/stdlib.h":575:41)
#loc120 = loc("/usr/include/time.h":76:1)
#loc121 = loc("/usr/include/time.h":76:38)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":192:15)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":194:15)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":197:15)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":199:15)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":187:1)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":202:1)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":188:1)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":190:27)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":190:22)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":190:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":192:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":193:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":193:63)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":194:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":197:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":198:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":198:62)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":199:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":201:12)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":201:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":145:23)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":122:1)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":149:1)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":123:1)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":124:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":148:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":125:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":125:13)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":126:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":126:54)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":126:31)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":126:38)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":126:43)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":126:53)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":127:9)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":127:39)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":127:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":127:23)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":127:29)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":127:30)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":127:36)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":127:35)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":129:9)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":132:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":129:18)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":129:14)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":129:21)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":129:25)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":129:23)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":130:9)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":131:25)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":131:13)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":131:20)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":131:21)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":129:30)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":129:29)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":134:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":146:9)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":134:13)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":134:21)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":134:23)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":134:26)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":134:34)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":134:36)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":135:9)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":142:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":144:9)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":136:28)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":136:13)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":136:20)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":136:24)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":138:13)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":141:13)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":138:21)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":138:17)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":138:24)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":138:28)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":138:26)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":139:13)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":140:30)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":140:37)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":140:38)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":140:17)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":138:33)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":138:32)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":145:13)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":147:9)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":147:14)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":151:1)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":170:1)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":153:5)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":153:9)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":155:13)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":155:12)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":155:5)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":156:5)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":168:5)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":157:9)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":157:45)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":159:9)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":167:9)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":159:19)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":159:32)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":159:49)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":159:13)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":159:59)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":160:9)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":163:9)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":165:9)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":162:25)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":162:20)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":162:13)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":162:36)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":166:23)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":166:13)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":169:17)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":169:5)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":80:1)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":108:1)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":81:1)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":82:5)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":107:5)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":83:9)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":83:13)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":84:9)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":84:54)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":84:31)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":84:38)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":84:43)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":84:53)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":85:9)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":85:39)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":85:13)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":85:23)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":85:29)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":85:30)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":85:36)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":85:35)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":87:9)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":90:9)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":87:18)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":87:14)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":87:21)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":87:25)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":87:23)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":88:9)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":89:25)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":89:13)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":89:20)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":89:21)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":87:30)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":87:29)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":93:9)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":105:9)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":93:13)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":93:21)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":94:9)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":101:9)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":103:9)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":95:28)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":95:13)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":95:20)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":95:24)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":97:13)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":100:13)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":97:21)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":97:17)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":97:24)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":97:28)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":97:26)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":98:13)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":99:30)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":99:37)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":99:38)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":99:17)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":97:33)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":97:32)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":104:23)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":104:13)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":106:9)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":106:14)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":110:1)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":119:1)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":112:5)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":112:9)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":114:13)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":114:12)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":114:5)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":117:12)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":117:5)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":118:17)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":118:5)
#loc322 = loc(fused[#loc1, #loc2])
#loc323 = loc(fused[#loc3, #loc4])
#loc324 = loc(fused[#loc5, #loc6])
#loc325 = loc(fused[#loc7, #loc8])
#loc326 = loc(fused[#loc10, #loc11])
#loc327 = loc(fused[#loc12, #loc13])
#loc328 = loc(fused[#loc14, #loc15])
#loc329 = loc(fused[#loc17, #loc18])
#loc330 = loc(fused[#loc19, #loc20])
#loc332 = loc(fused[#loc24, #loc25])
#loc333 = loc(fused[#loc26, #loc27])
#loc334 = loc(fused[#loc28, #loc29])
#loc335 = loc(fused[#loc32, #loc33])
#loc336 = loc(fused[#loc31, #loc33])
#loc337 = loc(fused[#loc30, #loc29])
#loc338 = loc(fused[#loc34, #loc35])
#loc339 = loc(fused[#loc36, #loc37])
#loc340 = loc(fused[#loc38, #loc35])
#loc341 = loc(fused[#loc42, #loc43])
#loc342 = loc(fused[#loc45, #loc44])
#loc343 = loc(fused[#loc46, #loc47])
#loc344 = loc(fused[#loc49, #loc43])
#loc345 = loc(fused[#loc51, #loc50])
#loc346 = loc(fused[#loc55, #loc54])
#loc347 = loc(fused[#loc56, #loc57])
#loc348 = loc(fused[#loc58, #loc59])
#loc349 = loc(fused[#loc60, #loc61, #loc62, #loc57])
#loc350 = loc(fused[#loc64, #loc63])
#loc351 = loc(fused[#loc67, #loc68])
#loc352 = loc(fused[#loc70, #loc69])
#loc353 = loc(fused[#loc71, #loc72])
#loc354 = loc(fused[#loc74, #loc68])
#loc355 = loc(fused[#loc80, #loc79])
#loc356 = loc(fused[#loc84, #loc85])
#loc357 = loc(fused[#loc86, #loc87])
#loc358 = loc(fused[#loc90, #loc88])
#loc359 = loc(fused[#loc91, #loc92])
#loc360 = loc(fused[#loc93, #loc94])
#loc361 = loc(fused[#loc95, #loc96])
#loc362 = loc(fused[#loc100, #loc101])
#loc363 = loc(fused[#loc102, #loc103, #loc104, #loc96])
#loc364 = loc(fused[#loc107, #loc108])
#loc365 = loc(fused[#loc112, #loc113])
#loc366 = loc(fused[#loc114, #loc115])
#loc367 = loc(fused[#loc116, #loc117])
#loc368 = loc(fused[#loc118, #loc119])
#loc369 = loc(fused[#loc120, #loc121])
#loc370 = loc(fused[#loc126, #loc127])
#loc373 = loc(fused[#loc137, #loc138])
#loc374 = loc(fused[#loc141, #loc142])
#loc375 = loc(fused[#loc145, #loc144])
#loc376 = loc(fused[#loc147, #loc148])
#loc378 = loc(fused[#loc152, #loc153])
#loc379 = loc(fused[#loc154, #loc155])
#loc380 = loc(fused[#loc156, #loc157])
#loc381 = loc(fused[#loc160, #loc161])
#loc382 = loc(fused[#loc159, #loc161])
#loc383 = loc(fused[#loc158, #loc157])
#loc384 = loc(fused[#loc162, #loc163])
#loc385 = loc(fused[#loc164, #loc165])
#loc386 = loc(fused[#loc166, #loc163])
#loc387 = loc(fused[#loc170, #loc171])
#loc388 = loc(fused[#loc173, #loc172])
#loc389 = loc(fused[#loc174, #loc175])
#loc390 = loc(fused[#loc177, #loc171])
#loc391 = loc(fused[#loc179, #loc178])
#loc392 = loc(fused[#loc183, #loc182])
#loc393 = loc(fused[#loc184, #loc185])
#loc394 = loc(fused[#loc186, #loc187])
#loc395 = loc(fused[#loc189, #loc191])
#loc396 = loc(fused[#loc192, #loc193, #loc194, #loc185])
#loc397 = loc(fused[#loc196, #loc195])
#loc398 = loc(fused[#loc199, #loc200])
#loc399 = loc(fused[#loc202, #loc201])
#loc400 = loc(fused[#loc203, #loc204])
#loc401 = loc(fused[#loc206, #loc200])
#loc402 = loc(fused[#loc212, #loc211])
#loc403 = loc(fused[#loc216, #loc217])
#loc404 = loc(fused[#loc218, #loc219])
#loc405 = loc(fused[#loc222, #loc220])
#loc406 = loc(fused[#loc223, #loc224])
#loc407 = loc(fused[#loc225, #loc226])
#loc408 = loc(fused[#loc227, #loc228])
#loc409 = loc(fused[#loc232, #loc233])
#loc410 = loc(fused[#loc234, #loc235, #loc236, #loc228])
#loc411 = loc(fused[#loc239, #loc240])
#loc412 = loc(fused[#loc245, #loc246])
#loc414 = loc(fused[#loc250, #loc251])
#loc415 = loc(fused[#loc252, #loc253])
#loc416 = loc(fused[#loc254, #loc255])
#loc417 = loc(fused[#loc258, #loc259])
#loc418 = loc(fused[#loc257, #loc259])
#loc419 = loc(fused[#loc256, #loc255])
#loc420 = loc(fused[#loc260, #loc261])
#loc421 = loc(fused[#loc262, #loc263])
#loc422 = loc(fused[#loc264, #loc261])
#loc423 = loc(fused[#loc268, #loc269])
#loc424 = loc(fused[#loc271, #loc270])
#loc425 = loc(fused[#loc272, #loc273])
#loc426 = loc(fused[#loc275, #loc269])
#loc427 = loc(fused[#loc277, #loc276])
#loc428 = loc(fused[#loc281, #loc280])
#loc429 = loc(fused[#loc282, #loc283])
#loc430 = loc(fused[#loc284, #loc285])
#loc431 = loc(fused[#loc286, #loc287, #loc288, #loc283])
#loc432 = loc(fused[#loc290, #loc289])
#loc433 = loc(fused[#loc293, #loc294])
#loc434 = loc(fused[#loc296, #loc295])
#loc435 = loc(fused[#loc297, #loc298])
#loc436 = loc(fused[#loc300, #loc294])
#loc437 = loc(fused[#loc306, #loc305])
#loc438 = loc(fused[#loc311, #loc312])
#loc439 = loc(fused[#loc313, #loc314])
#loc440 = loc(fused[#loc317, #loc315])
#loc441 = loc(fused[#loc319, #loc318])
