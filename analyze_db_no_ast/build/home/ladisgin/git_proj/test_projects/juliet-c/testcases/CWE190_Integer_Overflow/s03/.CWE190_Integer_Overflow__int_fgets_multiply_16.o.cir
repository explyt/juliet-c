!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc148)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc149)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc150)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc151)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @printIntLine(!s32i) loc(#loc152)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_multiply_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc154)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc16)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc155)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc20)
        cir.condition(%3) loc(#loc20)
      } do {
        cir.scope {
          %2 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc158)
          %3 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc158)
          cir.store %3, %2 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc158)
          cir.scope {
            %4 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc27)
            %5 = cir.const #cir.int<3> : !s32i loc(#loc28)
            %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc28)
            %7 = cir.const #cir.int<4> : !u64i loc(#loc28)
            %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc28)
            %9 = cir.const #cir.int<2> : !s32i loc(#loc28)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc28)
            %11 = cir.binop(add, %8, %10) : !u64i loc(#loc28)
            %12 = cir.cast(integral, %11 : !u64i), !s32i loc(#loc28)
            %13 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc149)
            %14 = cir.load %13 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc29)
            %15 = cir.call @fgets(%4, %12, %14) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc30)
            %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc31)
            %18 = cir.cmp(ne, %15, %17) : !cir.ptr<!s8i>, !s32i loc(#loc160)
            %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc32)
            cir.if %19 {
              %20 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc36)
              %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc37)
              cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc162)
            } else {
              %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc40)
            } loc(#loc161)
          } loc(#loc159)
        } loc(#loc157)
        cir.break loc(#loc41)
      } loc(#loc156)
    } loc(#loc156)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc44)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc44)
        cir.condition(%3) loc(#loc44)
      } do {
        cir.scope {
          %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc47)
          %3 = cir.const #cir.int<0> : !s32i loc(#loc48)
          %4 = cir.cmp(gt, %2, %3) : !s32i, !s32i loc(#loc165)
          %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc49)
          cir.if %5 {
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc167)
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc53)
            %8 = cir.const #cir.int<2> : !s32i loc(#loc52)
            %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc53)
            cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc167)
            %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc54)
            cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc55)
          } loc(#loc166)
        } loc(#loc164)
        cir.break loc(#loc56)
      } loc(#loc163)
    } loc(#loc163)
    cir.return loc(#loc13)
  } loc(#loc153)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_multiply_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc169)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc170)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc61)
    cir.return loc(#loc58)
  } loc(#loc168)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc63)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc172)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc68)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc173)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc72)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc72)
        cir.condition(%3) loc(#loc72)
      } do {
        cir.scope {
          %2 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc176)
          %3 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc176)
          cir.store %3, %2 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc176)
          cir.scope {
            %4 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc79)
            %5 = cir.const #cir.int<3> : !s32i loc(#loc80)
            %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc80)
            %7 = cir.const #cir.int<4> : !u64i loc(#loc80)
            %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc80)
            %9 = cir.const #cir.int<2> : !s32i loc(#loc80)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc80)
            %11 = cir.binop(add, %8, %10) : !u64i loc(#loc80)
            %12 = cir.cast(integral, %11 : !u64i), !s32i loc(#loc80)
            %13 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc149)
            %14 = cir.load %13 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc81)
            %15 = cir.call @fgets(%4, %12, %14) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc82)
            %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc83)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc83)
            %18 = cir.cmp(ne, %15, %17) : !cir.ptr<!s8i>, !s32i loc(#loc178)
            %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc84)
            cir.if %19 {
              %20 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc88)
              %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc89)
              cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc180)
            } else {
              %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc92)
              %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc92)
              cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc93)
            } loc(#loc179)
          } loc(#loc177)
        } loc(#loc175)
        cir.break loc(#loc94)
      } loc(#loc174)
    } loc(#loc174)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc97)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc97)
        cir.condition(%3) loc(#loc97)
      } do {
        cir.scope {
          %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
          %3 = cir.const #cir.int<0> : !s32i loc(#loc101)
          %4 = cir.cmp(gt, %2, %3) : !s32i, !s32i loc(#loc183)
          %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc102)
          cir.if %5 {
            cir.scope {
              %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc106)
              %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc107)
              %8 = cir.const #cir.int<2> : !s32i loc(#loc108)
              %9 = cir.binop(div, %7, %8) : !s32i loc(#loc186)
              %10 = cir.cmp(lt, %6, %9) : !s32i, !s32i loc(#loc187)
              %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc110)
              cir.if %11 {
                %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc189)
                %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                %14 = cir.const #cir.int<2> : !s32i loc(#loc115)
                %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc116)
                cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc189)
                %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc117)
                cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc118)
              } else {
                %12 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc63)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc63)
                cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc119)
              } loc(#loc188)
            } loc(#loc185)
          } loc(#loc184)
        } loc(#loc182)
        cir.break loc(#loc120)
      } loc(#loc181)
    } loc(#loc181)
    cir.return loc(#loc65)
  } loc(#loc171)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc191)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc125)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc129)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc129)
        cir.condition(%3) loc(#loc129)
      } do {
        %2 = cir.const #cir.int<2> : !s32i loc(#loc130)
        cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc194)
        cir.break loc(#loc132)
      } loc(#loc193)
    } loc(#loc193)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc135)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc135)
        cir.condition(%3) loc(#loc135)
      } do {
        cir.scope {
          %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc138)
          %3 = cir.const #cir.int<0> : !s32i loc(#loc139)
          %4 = cir.cmp(gt, %2, %3) : !s32i, !s32i loc(#loc197)
          %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc140)
          cir.if %5 {
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc199)
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc144)
            %8 = cir.const #cir.int<2> : !s32i loc(#loc143)
            %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc144)
            cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc199)
            %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc145)
            cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc146)
          } loc(#loc198)
        } loc(#loc196)
        cir.break loc(#loc147)
      } loc(#loc195)
    } loc(#loc195)
    cir.return loc(#loc122)
  } loc(#loc190)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":41:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":24:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":56:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":26:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":28:12)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":28:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":29:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":45:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":29:11)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":31:9)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":43:9)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":32:13)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":32:49)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":34:13)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":42:13)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":34:23)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":34:36)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":34:53)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":34:17)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":34:63)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":34:60)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":35:13)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":38:13)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":40:13)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":37:29)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":37:24)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":37:17)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":37:40)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":41:17)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":44:9)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":46:5)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":55:5)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":46:11)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":48:9)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":53:9)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":48:12)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":48:19)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":48:17)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":49:9)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":51:13)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":51:33)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":51:26)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":52:26)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":52:13)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":54:9)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":128:1)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":132:1)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":130:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":130:13)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":131:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":131:13)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":97:27)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":63:1)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":102:1)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":65:5)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":65:9)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":67:12)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":67:5)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":68:5)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":84:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":68:11)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":70:9)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":82:9)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":71:13)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":71:49)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":73:13)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":81:13)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":73:23)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":73:36)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":73:53)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":73:17)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":73:63)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":73:60)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":74:13)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":77:13)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":79:13)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":76:29)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":76:24)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":76:17)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":76:40)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":80:27)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":80:17)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":83:9)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":85:5)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":101:5)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":85:11)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":87:9)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":99:9)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":87:12)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":87:19)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":87:17)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":88:9)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":90:13)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":98:13)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":90:17)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":90:25)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":90:33)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":90:34)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":90:22)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":91:13)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":94:13)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":96:13)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":92:17)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":92:37)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":92:30)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":93:30)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":93:17)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":97:17)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":100:9)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":105:1)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":126:1)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":107:5)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":107:9)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":109:12)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":109:5)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":110:5)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":115:5)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":110:11)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":113:16)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":113:9)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":114:9)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":116:5)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":125:5)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":116:11)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":118:9)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":123:9)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":118:12)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":118:19)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":118:17)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":119:9)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":121:13)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":121:33)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":121:26)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":122:26)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":122:13)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":124:9)
#loc148 = loc(fused[#loc1, #loc2])
#loc149 = loc(fused[#loc3, #loc4])
#loc150 = loc(fused[#loc5, #loc6])
#loc151 = loc(fused[#loc7, #loc8])
#loc152 = loc(fused[#loc10, #loc11])
#loc153 = loc(fused[#loc12, #loc13])
#loc154 = loc(fused[#loc14, #loc15])
#loc155 = loc(fused[#loc17, #loc16])
#loc156 = loc(fused[#loc18, #loc19])
#loc157 = loc(fused[#loc21, #loc22])
#loc158 = loc(fused[#loc23, #loc24])
#loc159 = loc(fused[#loc25, #loc26])
#loc160 = loc(fused[#loc30, #loc31])
#loc161 = loc(fused[#loc33, #loc34, #loc35, #loc26])
#loc162 = loc(fused[#loc38, #loc39])
#loc163 = loc(fused[#loc42, #loc43])
#loc164 = loc(fused[#loc45, #loc46])
#loc165 = loc(fused[#loc47, #loc48])
#loc166 = loc(fused[#loc50, #loc46])
#loc167 = loc(fused[#loc51, #loc52])
#loc168 = loc(fused[#loc57, #loc58])
#loc169 = loc(fused[#loc59, #loc60])
#loc170 = loc(fused[#loc61, #loc62])
#loc171 = loc(fused[#loc64, #loc65])
#loc172 = loc(fused[#loc66, #loc67])
#loc173 = loc(fused[#loc69, #loc68])
#loc174 = loc(fused[#loc70, #loc71])
#loc175 = loc(fused[#loc73, #loc74])
#loc176 = loc(fused[#loc75, #loc76])
#loc177 = loc(fused[#loc77, #loc78])
#loc178 = loc(fused[#loc82, #loc83])
#loc179 = loc(fused[#loc85, #loc86, #loc87, #loc78])
#loc180 = loc(fused[#loc90, #loc91])
#loc181 = loc(fused[#loc95, #loc96])
#loc182 = loc(fused[#loc98, #loc99])
#loc183 = loc(fused[#loc100, #loc101])
#loc184 = loc(fused[#loc103, #loc99])
#loc185 = loc(fused[#loc104, #loc105])
#loc186 = loc(fused[#loc107, #loc108])
#loc187 = loc(fused[#loc106, #loc109])
#loc188 = loc(fused[#loc111, #loc112, #loc113, #loc105])
#loc189 = loc(fused[#loc114, #loc115])
#loc190 = loc(fused[#loc121, #loc122])
#loc191 = loc(fused[#loc123, #loc124])
#loc192 = loc(fused[#loc126, #loc125])
#loc193 = loc(fused[#loc127, #loc128])
#loc194 = loc(fused[#loc131, #loc130])
#loc195 = loc(fused[#loc133, #loc134])
#loc196 = loc(fused[#loc136, #loc137])
#loc197 = loc(fused[#loc138, #loc139])
#loc198 = loc(fused[#loc141, #loc137])
#loc199 = loc(fused[#loc142, #loc143])
