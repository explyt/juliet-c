!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":22:21)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":22:34)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":66:25)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":66:38)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":46:25)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":46:38)
#loc107 = loc(fused[#loc10, #loc11])
#loc121 = loc(fused[#loc44, #loc45])
#loc135 = loc(fused[#loc80, #loc81])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc103)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%u\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printUnsignedLine(!u32i) loc(#loc105)
  cir.func internal private @badSink(%arg0: !u32i loc(fused[#loc10, #loc11])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc108)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc107)
    cir.store %arg0, %1 : !u32i, !cir.ptr<!u32i> loc(#loc14)
    cir.br ^bb1 loc(#loc109)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc17)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc18)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc18)
    %5 = cir.cmp(gt, %2, %4) : !u32i, !cir.bool loc(#loc110)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc111)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc20)
    %7 = cir.const #cir.int<2> : !s32i loc(#loc13)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc13)
    %9 = cir.binop(mul, %6, %8) : !u32i loc(#loc112)
    cir.store %9, %0 : !u32i, !cir.ptr<!u32i> loc(#loc108)
    %10 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc21)
    cir.call @printUnsignedLine(%10) : (!u32i) -> () loc(#loc22)
    cir.br ^bb3 loc(#loc16)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc16)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc9)
  } loc(#loc106)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc114)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc27)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc27)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc115)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc29)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc104)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc30)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc29)
    %9 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc31)
    cir.call @badSink(%9) : (!u32i) -> () loc(#loc32)
    cir.return loc(#loc24)
  } loc(#loc113)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc117)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc118)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc116)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc119)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc41)
  cir.func internal private @goodB2GSink(%arg0: !u32i loc(fused[#loc44, #loc45])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc122)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc121)
    cir.store %arg0, %1 : !u32i, !cir.ptr<!u32i> loc(#loc48)
    cir.br ^bb1 loc(#loc123)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc51)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc52)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc52)
    %5 = cir.cmp(gt, %2, %4) : !u32i, !cir.bool loc(#loc124)
    cir.brcond %5 ^bb2, ^bb8 loc(#loc125)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc126)
  ^bb3:  // pred: ^bb2
    %6 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc56)
    %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc57)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc57)
    %9 = cir.const #cir.int<2> : !u32i loc(#loc57)
    %10 = cir.binop(mul, %8, %9) : !u32i loc(#loc57)
    %11 = cir.const #cir.int<1> : !u32i loc(#loc57)
    %12 = cir.binop(add, %10, %11) : !u32i loc(#loc57)
    %13 = cir.const #cir.int<2> : !s32i loc(#loc58)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc58)
    %15 = cir.binop(div, %12, %14) : !u32i loc(#loc127)
    %16 = cir.cmp(lt, %6, %15) : !u32i, !cir.bool loc(#loc128)
    cir.brcond %16 ^bb4, ^bb5 loc(#loc129)
  ^bb4:  // pred: ^bb3
    %17 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc63)
    %18 = cir.const #cir.int<2> : !s32i loc(#loc47)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc47)
    %20 = cir.binop(mul, %17, %19) : !u32i loc(#loc130)
    cir.store %20, %0 : !u32i, !cir.ptr<!u32i> loc(#loc122)
    %21 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc64)
    cir.call @printUnsignedLine(%21) : (!u32i) -> () loc(#loc65)
    cir.br ^bb6 loc(#loc61)
  ^bb5:  // pred: ^bb3
    %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc41)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    cir.br ^bb6 loc(#loc55)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc55)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc50)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc50)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc43)
  } loc(#loc120)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc132)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc71)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc71)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc133)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc73)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc104)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc74)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc75)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc75)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc73)
    %9 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc76)
    cir.call @goodB2GSink(%9) : (!u32i) -> () loc(#loc77)
    cir.return loc(#loc68)
  } loc(#loc131)
  cir.func internal private @goodG2BSink(%arg0: !u32i loc(fused[#loc80, #loc81])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc136)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc135)
    cir.store %arg0, %1 : !u32i, !cir.ptr<!u32i> loc(#loc84)
    cir.br ^bb1 loc(#loc137)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc87)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc88)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc88)
    %5 = cir.cmp(gt, %2, %4) : !u32i, !cir.bool loc(#loc138)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc139)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc90)
    %7 = cir.const #cir.int<2> : !s32i loc(#loc83)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc83)
    %9 = cir.binop(mul, %6, %8) : !u32i loc(#loc140)
    cir.store %9, %0 : !u32i, !cir.ptr<!u32i> loc(#loc136)
    %10 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc91)
    cir.call @printUnsignedLine(%10) : (!u32i) -> () loc(#loc92)
    cir.br ^bb3 loc(#loc86)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc86)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc79)
  } loc(#loc134)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc142)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc97)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc97)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc143)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc99)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc99)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc144)
    %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc101)
    cir.call @goodG2BSink(%5) : (!u32i) -> () loc(#loc102)
    cir.return loc(#loc94)
  } loc(#loc141)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":37:20)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":22:1)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":30:1)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":27:9)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":27:38)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":23:1)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":24:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":29:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":24:8)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":24:15)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":25:5)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":27:31)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":28:27)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":28:9)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":32:1)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":39:1)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":34:5)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":34:18)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":35:12)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":35:5)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":37:5)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":37:13)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":38:13)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":38:5)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":92:1)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":96:1)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":94:5)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":94:13)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":95:5)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":95:13)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":78:23)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":66:1)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":81:1)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":73:13)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":73:42)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":67:1)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":68:5)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":80:5)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":68:8)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":68:15)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":69:5)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":71:9)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":79:9)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":71:13)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":71:21)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":71:30)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":71:31)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":72:9)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":75:9)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":77:9)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":73:35)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":74:31)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":74:13)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":78:13)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":83:1)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":90:1)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":85:5)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":85:18)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":86:12)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":86:5)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":88:5)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":88:13)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":88:20)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":89:17)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":89:5)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":46:1)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":54:1)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":51:9)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":51:38)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":47:1)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":48:5)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":53:5)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":48:8)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":48:15)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":49:5)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":51:31)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":52:27)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":52:9)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":56:1)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":63:1)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":58:5)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":58:18)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":59:12)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":59:5)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":61:12)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":61:5)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":62:17)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_41.c":62:5)
#loc103 = loc(fused[#loc1, #loc2])
#loc104 = loc(fused[#loc3, #loc4])
#loc105 = loc(fused[#loc6, #loc7])
#loc106 = loc(fused[#loc8, #loc9])
#loc108 = loc(fused[#loc12, #loc13])
#loc109 = loc(fused[#loc15, #loc16])
#loc110 = loc(fused[#loc17, #loc18])
#loc111 = loc(fused[#loc19, #loc16])
#loc112 = loc(fused[#loc20, #loc13])
#loc113 = loc(fused[#loc23, #loc24])
#loc114 = loc(fused[#loc25, #loc26])
#loc115 = loc(fused[#loc28, #loc27])
#loc116 = loc(fused[#loc33, #loc34])
#loc117 = loc(fused[#loc35, #loc36])
#loc118 = loc(fused[#loc37, #loc38])
#loc119 = loc(fused[#loc39, #loc40])
#loc120 = loc(fused[#loc42, #loc43])
#loc122 = loc(fused[#loc46, #loc47])
#loc123 = loc(fused[#loc49, #loc50])
#loc124 = loc(fused[#loc51, #loc52])
#loc125 = loc(fused[#loc53, #loc50])
#loc126 = loc(fused[#loc54, #loc55])
#loc127 = loc(fused[#loc57, #loc58])
#loc128 = loc(fused[#loc56, #loc59])
#loc129 = loc(fused[#loc60, #loc61, #loc62, #loc55])
#loc130 = loc(fused[#loc63, #loc47])
#loc131 = loc(fused[#loc67, #loc68])
#loc132 = loc(fused[#loc69, #loc70])
#loc133 = loc(fused[#loc72, #loc71])
#loc134 = loc(fused[#loc78, #loc79])
#loc136 = loc(fused[#loc82, #loc83])
#loc137 = loc(fused[#loc85, #loc86])
#loc138 = loc(fused[#loc87, #loc88])
#loc139 = loc(fused[#loc89, #loc86])
#loc140 = loc(fused[#loc90, #loc83])
#loc141 = loc(fused[#loc93, #loc94])
#loc142 = loc(fused[#loc95, #loc96])
#loc143 = loc(fused[#loc98, #loc97])
#loc144 = loc(fused[#loc100, #loc99])
