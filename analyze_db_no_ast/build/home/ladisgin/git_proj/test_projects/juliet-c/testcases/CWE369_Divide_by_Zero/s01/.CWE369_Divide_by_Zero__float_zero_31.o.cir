!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc86)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_zero_31_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc88)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc7)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc89)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc9)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc90)
    cir.scope {
      %3 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc92)
      %4 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc93)
      %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc14)
      cir.store %5, %3 : !cir.float, !cir.ptr<!cir.float> loc(#loc92)
      %6 = cir.load %3 : !cir.ptr<!cir.float>, !cir.float loc(#loc16)
      cir.store %6, %4 : !cir.float, !cir.ptr<!cir.float> loc(#loc93)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc95)
        %8 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc21)
        %9 = cir.load %4 : !cir.ptr<!cir.float>, !cir.float loc(#loc22)
        %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc22)
        %11 = cir.binop(div, %8, %10) : !cir.double loc(#loc96)
        %12 = cir.cast(float_to_int, %11 : !cir.double), !s32i loc(#loc96)
        cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc95)
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc23)
        cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc24)
      } loc(#loc94)
    } loc(#loc91)
    cir.return loc(#loc4)
  } loc(#loc87)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_zero_31_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc98)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc99)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    cir.return loc(#loc26)
  } loc(#loc97)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc101)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc35)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc102)
    %2 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc37)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc103)
    cir.scope {
      %3 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc105)
      %4 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc106)
      %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc42)
      cir.store %5, %3 : !cir.float, !cir.ptr<!cir.float> loc(#loc105)
      %6 = cir.load %3 : !cir.ptr<!cir.float>, !cir.float loc(#loc44)
      cir.store %6, %4 : !cir.float, !cir.ptr<!cir.float> loc(#loc106)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc108)
        %8 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc49)
        %9 = cir.load %4 : !cir.ptr<!cir.float>, !cir.float loc(#loc50)
        %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc50)
        %11 = cir.binop(div, %8, %10) : !cir.double loc(#loc109)
        %12 = cir.cast(float_to_int, %11 : !cir.double), !s32i loc(#loc109)
        cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc108)
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc51)
        cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc52)
      } loc(#loc107)
    } loc(#loc104)
    cir.return loc(#loc32)
  } loc(#loc100)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc110)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc55)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc112)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc60)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc113)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc62)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc114)
    cir.scope {
      %3 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc116)
      %4 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc117)
      %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc67)
      cir.store %5, %3 : !cir.float, !cir.ptr<!cir.float> loc(#loc116)
      %6 = cir.load %3 : !cir.ptr<!cir.float>, !cir.float loc(#loc69)
      cir.store %6, %4 : !cir.float, !cir.ptr<!cir.float> loc(#loc117)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!cir.float>, !cir.float loc(#loc72)
        %8 = cir.cast(floating, %7 : !cir.float), !cir.double loc(#loc72)
        %9 = cir.fabs %8 : !cir.double loc(#loc72)
        %10 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc73)
        %11 = cir.cmp(gt, %9, %10) : !cir.double, !s32i loc(#loc119)
        %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc75)
        cir.if %12 {
          %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc121)
          %14 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc81)
          %15 = cir.load %4 : !cir.ptr<!cir.float>, !cir.float loc(#loc82)
          %16 = cir.cast(floating, %15 : !cir.float), !cir.double loc(#loc82)
          %17 = cir.binop(div, %14, %16) : !cir.double loc(#loc122)
          %18 = cir.cast(float_to_int, %17 : !cir.double), !s32i loc(#loc122)
          cir.store %18, %13 : !s32i, !cir.ptr<!s32i> loc(#loc121)
          %19 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc83)
          cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc84)
        } else {
          %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc55)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc55)
          cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc85)
        } loc(#loc120)
      } loc(#loc118)
    } loc(#loc115)
    cir.return loc(#loc57)
  } loc(#loc111)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_31.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__float_zero_31.c":24:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_zero_31.c":40:1)
#loc5 = loc("CWE369_Divide_by_Zero__float_zero_31.c":26:5)
#loc6 = loc("CWE369_Divide_by_Zero__float_zero_31.c":26:11)
#loc7 = loc("CWE369_Divide_by_Zero__float_zero_31.c":28:12)
#loc8 = loc("CWE369_Divide_by_Zero__float_zero_31.c":28:5)
#loc9 = loc("CWE369_Divide_by_Zero__float_zero_31.c":30:12)
#loc10 = loc("CWE369_Divide_by_Zero__float_zero_31.c":30:5)
#loc11 = loc("CWE369_Divide_by_Zero__float_zero_31.c":31:5)
#loc12 = loc("CWE369_Divide_by_Zero__float_zero_31.c":39:5)
#loc13 = loc("CWE369_Divide_by_Zero__float_zero_31.c":32:9)
#loc14 = loc("CWE369_Divide_by_Zero__float_zero_31.c":32:26)
#loc15 = loc("CWE369_Divide_by_Zero__float_zero_31.c":33:9)
#loc16 = loc("CWE369_Divide_by_Zero__float_zero_31.c":33:22)
#loc17 = loc("CWE369_Divide_by_Zero__float_zero_31.c":34:9)
#loc18 = loc("CWE369_Divide_by_Zero__float_zero_31.c":38:9)
#loc19 = loc("CWE369_Divide_by_Zero__float_zero_31.c":36:13)
#loc20 = loc("CWE369_Divide_by_Zero__float_zero_31.c":36:44)
#loc21 = loc("CWE369_Divide_by_Zero__float_zero_31.c":36:32)
#loc22 = loc("CWE369_Divide_by_Zero__float_zero_31.c":36:40)
#loc23 = loc("CWE369_Divide_by_Zero__float_zero_31.c":37:26)
#loc24 = loc("CWE369_Divide_by_Zero__float_zero_31.c":37:13)
#loc25 = loc("CWE369_Divide_by_Zero__float_zero_31.c":89:1)
#loc26 = loc("CWE369_Divide_by_Zero__float_zero_31.c":93:1)
#loc27 = loc("CWE369_Divide_by_Zero__float_zero_31.c":91:5)
#loc28 = loc("CWE369_Divide_by_Zero__float_zero_31.c":91:13)
#loc29 = loc("CWE369_Divide_by_Zero__float_zero_31.c":92:5)
#loc30 = loc("CWE369_Divide_by_Zero__float_zero_31.c":92:13)
#loc31 = loc("CWE369_Divide_by_Zero__float_zero_31.c":47:1)
#loc32 = loc("CWE369_Divide_by_Zero__float_zero_31.c":63:1)
#loc33 = loc("CWE369_Divide_by_Zero__float_zero_31.c":49:5)
#loc34 = loc("CWE369_Divide_by_Zero__float_zero_31.c":49:11)
#loc35 = loc("CWE369_Divide_by_Zero__float_zero_31.c":51:12)
#loc36 = loc("CWE369_Divide_by_Zero__float_zero_31.c":51:5)
#loc37 = loc("CWE369_Divide_by_Zero__float_zero_31.c":53:12)
#loc38 = loc("CWE369_Divide_by_Zero__float_zero_31.c":53:5)
#loc39 = loc("CWE369_Divide_by_Zero__float_zero_31.c":54:5)
#loc40 = loc("CWE369_Divide_by_Zero__float_zero_31.c":62:5)
#loc41 = loc("CWE369_Divide_by_Zero__float_zero_31.c":55:9)
#loc42 = loc("CWE369_Divide_by_Zero__float_zero_31.c":55:26)
#loc43 = loc("CWE369_Divide_by_Zero__float_zero_31.c":56:9)
#loc44 = loc("CWE369_Divide_by_Zero__float_zero_31.c":56:22)
#loc45 = loc("CWE369_Divide_by_Zero__float_zero_31.c":57:9)
#loc46 = loc("CWE369_Divide_by_Zero__float_zero_31.c":61:9)
#loc47 = loc("CWE369_Divide_by_Zero__float_zero_31.c":59:13)
#loc48 = loc("CWE369_Divide_by_Zero__float_zero_31.c":59:44)
#loc49 = loc("CWE369_Divide_by_Zero__float_zero_31.c":59:32)
#loc50 = loc("CWE369_Divide_by_Zero__float_zero_31.c":59:40)
#loc51 = loc("CWE369_Divide_by_Zero__float_zero_31.c":60:26)
#loc52 = loc("CWE369_Divide_by_Zero__float_zero_31.c":60:13)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc55 = loc("CWE369_Divide_by_Zero__float_zero_31.c":84:23)
#loc56 = loc("CWE369_Divide_by_Zero__float_zero_31.c":66:1)
#loc57 = loc("CWE369_Divide_by_Zero__float_zero_31.c":87:1)
#loc58 = loc("CWE369_Divide_by_Zero__float_zero_31.c":68:5)
#loc59 = loc("CWE369_Divide_by_Zero__float_zero_31.c":68:11)
#loc60 = loc("CWE369_Divide_by_Zero__float_zero_31.c":70:12)
#loc61 = loc("CWE369_Divide_by_Zero__float_zero_31.c":70:5)
#loc62 = loc("CWE369_Divide_by_Zero__float_zero_31.c":72:12)
#loc63 = loc("CWE369_Divide_by_Zero__float_zero_31.c":72:5)
#loc64 = loc("CWE369_Divide_by_Zero__float_zero_31.c":73:5)
#loc65 = loc("CWE369_Divide_by_Zero__float_zero_31.c":86:5)
#loc66 = loc("CWE369_Divide_by_Zero__float_zero_31.c":74:9)
#loc67 = loc("CWE369_Divide_by_Zero__float_zero_31.c":74:26)
#loc68 = loc("CWE369_Divide_by_Zero__float_zero_31.c":75:9)
#loc69 = loc("CWE369_Divide_by_Zero__float_zero_31.c":75:22)
#loc70 = loc("CWE369_Divide_by_Zero__float_zero_31.c":77:9)
#loc71 = loc("CWE369_Divide_by_Zero__float_zero_31.c":85:9)
#loc72 = loc("CWE369_Divide_by_Zero__float_zero_31.c":77:17)
#loc73 = loc("CWE369_Divide_by_Zero__float_zero_31.c":77:25)
#loc74 = loc("CWE369_Divide_by_Zero__float_zero_31.c":77:12)
#loc75 = loc("CWE369_Divide_by_Zero__float_zero_31.c":77:23)
#loc76 = loc("CWE369_Divide_by_Zero__float_zero_31.c":78:9)
#loc77 = loc("CWE369_Divide_by_Zero__float_zero_31.c":81:9)
#loc78 = loc("CWE369_Divide_by_Zero__float_zero_31.c":83:9)
#loc79 = loc("CWE369_Divide_by_Zero__float_zero_31.c":79:13)
#loc80 = loc("CWE369_Divide_by_Zero__float_zero_31.c":79:44)
#loc81 = loc("CWE369_Divide_by_Zero__float_zero_31.c":79:32)
#loc82 = loc("CWE369_Divide_by_Zero__float_zero_31.c":79:40)
#loc83 = loc("CWE369_Divide_by_Zero__float_zero_31.c":80:26)
#loc84 = loc("CWE369_Divide_by_Zero__float_zero_31.c":80:13)
#loc85 = loc("CWE369_Divide_by_Zero__float_zero_31.c":84:13)
#loc86 = loc(fused[#loc1, #loc2])
#loc87 = loc(fused[#loc3, #loc4])
#loc88 = loc(fused[#loc5, #loc6])
#loc89 = loc(fused[#loc8, #loc7])
#loc90 = loc(fused[#loc10, #loc9])
#loc91 = loc(fused[#loc11, #loc12])
#loc92 = loc(fused[#loc13, #loc14])
#loc93 = loc(fused[#loc15, #loc16])
#loc94 = loc(fused[#loc17, #loc18])
#loc95 = loc(fused[#loc19, #loc20])
#loc96 = loc(fused[#loc21, #loc22])
#loc97 = loc(fused[#loc25, #loc26])
#loc98 = loc(fused[#loc27, #loc28])
#loc99 = loc(fused[#loc29, #loc30])
#loc100 = loc(fused[#loc31, #loc32])
#loc101 = loc(fused[#loc33, #loc34])
#loc102 = loc(fused[#loc36, #loc35])
#loc103 = loc(fused[#loc38, #loc37])
#loc104 = loc(fused[#loc39, #loc40])
#loc105 = loc(fused[#loc41, #loc42])
#loc106 = loc(fused[#loc43, #loc44])
#loc107 = loc(fused[#loc45, #loc46])
#loc108 = loc(fused[#loc47, #loc48])
#loc109 = loc(fused[#loc49, #loc50])
#loc110 = loc(fused[#loc53, #loc54])
#loc111 = loc(fused[#loc56, #loc57])
#loc112 = loc(fused[#loc58, #loc59])
#loc113 = loc(fused[#loc61, #loc60])
#loc114 = loc(fused[#loc63, #loc62])
#loc115 = loc(fused[#loc64, #loc65])
#loc116 = loc(fused[#loc66, #loc67])
#loc117 = loc(fused[#loc68, #loc69])
#loc118 = loc(fused[#loc70, #loc71])
#loc119 = loc(fused[#loc74, #loc73])
#loc120 = loc(fused[#loc76, #loc77, #loc78, #loc71])
#loc121 = loc(fused[#loc79, #loc80])
#loc122 = loc(fused[#loc81, #loc82])
