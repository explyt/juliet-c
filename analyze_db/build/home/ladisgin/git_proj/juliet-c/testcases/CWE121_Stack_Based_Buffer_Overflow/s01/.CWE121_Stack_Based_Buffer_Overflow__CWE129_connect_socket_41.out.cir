!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":44:21)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":44:25)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":272:10)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":272:14)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":272:20)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":272:32)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":171:25)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":171:29)
#loc321 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":136:25)
#loc322 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":136:29)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc375 = loc(fused[#loc21, #loc22])
#loc430 = loc(fused[#loc168, #loc169])
#loc431 = loc(fused[#loc170, #loc171])
#loc436 = loc(fused[#loc189, #loc190])
#loc486 = loc(fused[#loc321, #loc322])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc366)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc367)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc368)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc369)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc370)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc371)
  cir.func private @close(!s32i) -> !s32i loc(#loc372)
  cir.func private @printIntLine(!s32i) loc(#loc373)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc18)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc21, #loc22])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc375)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc23)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc377)
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc378)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc378)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc378)
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc33)
        %6 = cir.cmp(ge, %4, %5) : !s32i, !cir.bool loc(#loc380)
        cir.if %6 {
          %7 = cir.const #cir.int<1> : !s32i loc(#loc37)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
          %9 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc39)
          %10 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc39)
          cir.store %7, %10 : !s32i, !cir.ptr<!s32i> loc(#loc382)
          cir.scope {
            %11 = cir.const #cir.int<0> : !s32i loc(#loc42)
            cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc384)
            cir.for : cond {
              %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc44)
              %13 = cir.const #cir.int<10> : !s32i loc(#loc45)
              %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc385)
              cir.condition(%14) loc(#loc46)
            } body {
              cir.scope {
                %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc48)
                %13 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc49)
                %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc49)
                %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc49)
                cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc50)
              } loc(#loc386)
              cir.yield loc(#loc41)
            } step {
              %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc51)
              %13 = cir.unary(inc, %12) : !s32i, !s32i loc(#loc52)
              cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc387)
              cir.yield loc(#loc383)
            } loc(#loc383)
          } loc(#loc383)
        } else {
          %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc18)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc18)
          cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc53)
        } loc(#loc381)
      } loc(#loc379)
    } loc(#loc376)
    cir.return loc(#loc20)
  } loc(#loc374)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc389)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc59)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc390)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc392)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc393)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc394)
      %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc395)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc68)
      %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc68)
      cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc394)
      cir.scope {
        cir.do {
          %10 = cir.const #cir.int<2> : !s32i loc(#loc73)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc74)
          %12 = cir.const #cir.int<6> : !s32i loc(#loc75)
          %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc76)
          cir.store %13, %6 : !s32i, !cir.ptr<!s32i> loc(#loc397)
          cir.scope {
            %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc81)
            %53 = cir.const #cir.int<1> : !s32i loc(#loc82)
            %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc82)
            %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc399)
            cir.if %55 {
              cir.break loc(#loc84)
            } loc(#loc400)
          } loc(#loc398)
          %14 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc401)
          %15 = cir.const #cir.int<0> : !s32i loc(#loc87)
          %16 = cir.const #cir.int<16> : !u64i loc(#loc402)
          cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc403)
          %17 = cir.const #cir.int<2> : !s32i loc(#loc92)
          %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc92)
          %19 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc93)
          cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc404)
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
          %22 = cir.call @inet_addr(%21) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc95)
          %23 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc96)
          %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc97)
          cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc405)
          %25 = cir.const #cir.int<27015> : !s32i loc(#loc100)
          %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc100)
          %27 = cir.call @htons(%26) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc101)
          %28 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc102)
          cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc406)
          cir.scope {
            %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc107)
            %53 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc408)
            %54 = cir.const #cir.int<16> : !u64i loc(#loc409)
            %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc409)
            %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc112)
            %57 = cir.const #cir.int<1> : !s32i loc(#loc113)
            %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc113)
            %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc410)
            cir.if %59 {
              cir.break loc(#loc115)
            } loc(#loc411)
          } loc(#loc407)
          %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc116)
          %30 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc117)
          %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc117)
          %32 = cir.const #cir.int<3> : !s32i loc(#loc118)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc118)
          %34 = cir.const #cir.int<4> : !u64i loc(#loc118)
          %35 = cir.binop(mul, %33, %34) : !u64i loc(#loc118)
          %36 = cir.const #cir.int<2> : !s32i loc(#loc118)
          %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc118)
          %38 = cir.binop(add, %35, %37) : !u64i loc(#loc118)
          %39 = cir.const #cir.int<1> : !s32i loc(#loc119)
          %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc119)
          %41 = cir.binop(sub, %38, %40) : !u64i loc(#loc412)
          %42 = cir.const #cir.int<0> : !s32i loc(#loc120)
          %43 = cir.call @recv(%29, %31, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc121)
          %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc121)
          cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc413)
          cir.scope {
            %52 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc126)
            %53 = cir.const #cir.int<1> : !s32i loc(#loc127)
            %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc127)
            %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc415)
            %56 = cir.ternary(%55, true {
              %57 = cir.const #true loc(#loc128)
              cir.yield %57 : !cir.bool loc(#loc128)
            }, false {
              %57 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc129)
              %58 = cir.const #cir.int<0> : !s32i loc(#loc130)
              %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc416)
              %60 = cir.ternary(%59, true {
                %61 = cir.const #true loc(#loc128)
                cir.yield %61 : !cir.bool loc(#loc128)
              }, false {
                %61 = cir.const #false loc(#loc128)
                cir.yield %61 : !cir.bool loc(#loc128)
              }) : (!cir.bool) -> !cir.bool loc(#loc128)
              cir.yield %60 : !cir.bool loc(#loc128)
            }) : (!cir.bool) -> !cir.bool loc(#loc128)
            cir.if %56 {
              cir.break loc(#loc132)
            } loc(#loc417)
          } loc(#loc414)
          %45 = cir.const #cir.int<0> : !s32i loc(#loc133)
          %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc133)
          %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc134)
          %48 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc135)
          %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc135)
          cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc418)
          %50 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc136)
          %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc137)
          cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc419)
          cir.yield loc(#loc72)
        } while {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc140)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc140)
          cir.condition(%11) loc(#loc140)
        } loc(#loc396)
      } loc(#loc396)
      cir.scope {
        %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc143)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc144)
        %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc144)
        %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc421)
        cir.if %13 {
          %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc146)
          %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc147)
        } loc(#loc422)
      } loc(#loc420)
    } loc(#loc391)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc148)
    cir.call @badSink(%3) : (!s32i) -> () loc(#loc149)
    cir.return loc(#loc55)
  } loc(#loc388)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc424)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc152)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc425)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc154)
    cir.return loc(#loc151)
  } loc(#loc423)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc426)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc427)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc428)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc162)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc163)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc164)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc165)
  cir.func @main(%arg0: !s32i loc(fused[#loc168, #loc169]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc170, #loc171])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc430)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc431)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc167)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc172)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc173)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc174)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc174)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc175)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc162)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc162)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc176)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41_good : !cir.ptr<!cir.func<!void ()>> loc(#loc432)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41_good() : () -> () loc(#loc177)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc163)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc163)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc179)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc164)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc164)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc180)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc433)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41_bad() : () -> () loc(#loc181)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc165)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc165)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc183)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc184)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc434)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc434)
    cir.return %17 : !s32i loc(#loc434)
  } loc(#loc429)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc186)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc189, #loc190])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc436)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc438)
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc439)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc439)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc439)
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc200)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc201)
        %6 = cir.cmp(ge, %4, %5) : !s32i, !cir.bool loc(#loc441)
        %7 = cir.ternary(%6, true {
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc203)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc204)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc442)
          %11 = cir.ternary(%10, true {
            %12 = cir.const #true loc(#loc202)
            cir.yield %12 : !cir.bool loc(#loc202)
          }, false {
            %12 = cir.const #false loc(#loc202)
            cir.yield %12 : !cir.bool loc(#loc202)
          }) : (!cir.bool) -> !cir.bool loc(#loc202)
          cir.yield %11 : !cir.bool loc(#loc202)
        }, false {
          %8 = cir.const #false loc(#loc202)
          cir.yield %8 : !cir.bool loc(#loc202)
        }) : (!cir.bool) -> !cir.bool loc(#loc202)
        cir.if %7 {
          %8 = cir.const #cir.int<1> : !s32i loc(#loc209)
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc210)
          %10 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc211)
          %11 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %9 : !s32i), !cir.ptr<!s32i> loc(#loc211)
          cir.store %8, %11 : !s32i, !cir.ptr<!s32i> loc(#loc444)
          cir.scope {
            %12 = cir.const #cir.int<0> : !s32i loc(#loc214)
            cir.store %12, %1 : !s32i, !cir.ptr<!s32i> loc(#loc446)
            cir.for : cond {
              %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc216)
              %14 = cir.const #cir.int<10> : !s32i loc(#loc217)
              %15 = cir.cmp(lt, %13, %14) : !s32i, !cir.bool loc(#loc447)
              cir.condition(%15) loc(#loc218)
            } body {
              cir.scope {
                %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc220)
                %14 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc221)
                %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc221)
                %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc221)
                cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc222)
              } loc(#loc448)
              cir.yield loc(#loc213)
            } step {
              %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc223)
              %14 = cir.unary(inc, %13) : !s32i, !s32i loc(#loc224)
              cir.store %14, %1 : !s32i, !cir.ptr<!s32i> loc(#loc449)
              cir.yield loc(#loc445)
            } loc(#loc445)
          } loc(#loc445)
        } else {
          %8 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc186)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc186)
          cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc225)
        } loc(#loc443)
      } loc(#loc440)
    } loc(#loc437)
    cir.return loc(#loc188)
  } loc(#loc435)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc451)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc230)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc231)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc452)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc454)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc455)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc456)
      %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc457)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc240)
      %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc240)
      cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc456)
      cir.scope {
        cir.do {
          %10 = cir.const #cir.int<2> : !s32i loc(#loc245)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc246)
          %12 = cir.const #cir.int<6> : !s32i loc(#loc247)
          %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc248)
          cir.store %13, %6 : !s32i, !cir.ptr<!s32i> loc(#loc459)
          cir.scope {
            %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc253)
            %53 = cir.const #cir.int<1> : !s32i loc(#loc254)
            %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc254)
            %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc461)
            cir.if %55 {
              cir.break loc(#loc256)
            } loc(#loc462)
          } loc(#loc460)
          %14 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc463)
          %15 = cir.const #cir.int<0> : !s32i loc(#loc259)
          %16 = cir.const #cir.int<16> : !u64i loc(#loc464)
          cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc465)
          %17 = cir.const #cir.int<2> : !s32i loc(#loc264)
          %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc264)
          %19 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc93)
          cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc466)
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc266)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc266)
          %22 = cir.call @inet_addr(%21) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc267)
          %23 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc96)
          %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc97)
          cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc467)
          %25 = cir.const #cir.int<27015> : !s32i loc(#loc270)
          %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc270)
          %27 = cir.call @htons(%26) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc271)
          %28 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc102)
          cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc468)
          cir.scope {
            %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc276)
            %53 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc470)
            %54 = cir.const #cir.int<16> : !u64i loc(#loc471)
            %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc471)
            %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc281)
            %57 = cir.const #cir.int<1> : !s32i loc(#loc282)
            %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc282)
            %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc472)
            cir.if %59 {
              cir.break loc(#loc284)
            } loc(#loc473)
          } loc(#loc469)
          %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc285)
          %30 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc286)
          %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc286)
          %32 = cir.const #cir.int<3> : !s32i loc(#loc287)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc287)
          %34 = cir.const #cir.int<4> : !u64i loc(#loc287)
          %35 = cir.binop(mul, %33, %34) : !u64i loc(#loc287)
          %36 = cir.const #cir.int<2> : !s32i loc(#loc287)
          %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc287)
          %38 = cir.binop(add, %35, %37) : !u64i loc(#loc287)
          %39 = cir.const #cir.int<1> : !s32i loc(#loc288)
          %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc288)
          %41 = cir.binop(sub, %38, %40) : !u64i loc(#loc474)
          %42 = cir.const #cir.int<0> : !s32i loc(#loc289)
          %43 = cir.call @recv(%29, %31, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc290)
          %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc290)
          cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc475)
          cir.scope {
            %52 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc295)
            %53 = cir.const #cir.int<1> : !s32i loc(#loc296)
            %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc296)
            %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc477)
            %56 = cir.ternary(%55, true {
              %57 = cir.const #true loc(#loc297)
              cir.yield %57 : !cir.bool loc(#loc297)
            }, false {
              %57 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc298)
              %58 = cir.const #cir.int<0> : !s32i loc(#loc299)
              %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc478)
              %60 = cir.ternary(%59, true {
                %61 = cir.const #true loc(#loc297)
                cir.yield %61 : !cir.bool loc(#loc297)
              }, false {
                %61 = cir.const #false loc(#loc297)
                cir.yield %61 : !cir.bool loc(#loc297)
              }) : (!cir.bool) -> !cir.bool loc(#loc297)
              cir.yield %60 : !cir.bool loc(#loc297)
            }) : (!cir.bool) -> !cir.bool loc(#loc297)
            cir.if %56 {
              cir.break loc(#loc301)
            } loc(#loc479)
          } loc(#loc476)
          %45 = cir.const #cir.int<0> : !s32i loc(#loc302)
          %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc302)
          %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc303)
          %48 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc304)
          %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc304)
          cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc480)
          %50 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc305)
          %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc306)
          cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc481)
          cir.yield loc(#loc244)
        } while {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc309)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc309)
          cir.condition(%11) loc(#loc309)
        } loc(#loc458)
      } loc(#loc458)
      cir.scope {
        %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc312)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc313)
        %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc313)
        %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc483)
        cir.if %13 {
          %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc315)
          %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc316)
        } loc(#loc484)
      } loc(#loc482)
    } loc(#loc453)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc317)
    cir.call @goodB2GSink(%3) : (!s32i) -> () loc(#loc318)
    cir.return loc(#loc227)
  } loc(#loc450)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc321, #loc322])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc486)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc323)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc488)
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc489)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc489)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc489)
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc332)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc333)
        %6 = cir.cmp(ge, %4, %5) : !s32i, !cir.bool loc(#loc491)
        cir.if %6 {
          %7 = cir.const #cir.int<1> : !s32i loc(#loc337)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc338)
          %9 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc339)
          %10 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc339)
          cir.store %7, %10 : !s32i, !cir.ptr<!s32i> loc(#loc493)
          cir.scope {
            %11 = cir.const #cir.int<0> : !s32i loc(#loc342)
            cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc495)
            cir.for : cond {
              %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc344)
              %13 = cir.const #cir.int<10> : !s32i loc(#loc345)
              %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc496)
              cir.condition(%14) loc(#loc346)
            } body {
              cir.scope {
                %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc348)
                %13 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc349)
                %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc349)
                %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc349)
                cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc350)
              } loc(#loc497)
              cir.yield loc(#loc341)
            } step {
              %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc351)
              %13 = cir.unary(inc, %12) : !s32i, !s32i loc(#loc352)
              cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc498)
              cir.yield loc(#loc494)
            } loc(#loc494)
          } loc(#loc494)
        } else {
          %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc353)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc353)
          cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc354)
        } loc(#loc492)
      } loc(#loc490)
    } loc(#loc487)
    cir.return loc(#loc320)
  } loc(#loc485)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc500)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc359)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc360)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc501)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc362)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc502)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc364)
    cir.call @goodG2BSink(%4) : (!s32i) -> () loc(#loc365)
    cir.return loc(#loc356)
  } loc(#loc499)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":98:49)
#loc6 = loc("/usr/include/netinet/in.h":404:1)
#loc7 = loc("/usr/include/netinet/in.h":405:40)
#loc8 = loc("/usr/include/sys/socket.h":126:1)
#loc9 = loc("/usr/include/sys/socket.h":126:75)
#loc10 = loc("/usr/include/sys/socket.h":145:1)
#loc11 = loc("/usr/include/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":62:23)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":44:1)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":65:1)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":45:1)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":46:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":64:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":47:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":47:13)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":48:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":48:30)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":51:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":63:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":51:13)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":51:21)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":52:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":59:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":61:9)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":53:28)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":53:20)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":53:13)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":55:13)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":58:13)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":55:21)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":55:17)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":55:24)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":55:28)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":55:26)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":56:13)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":57:37)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":57:30)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":57:17)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":55:33)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":55:32)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":62:13)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":67:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":129:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":69:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":69:9)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":71:13)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":71:12)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":71:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":72:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":127:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":77:9)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":77:13)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":78:9)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":78:28)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":79:9)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":79:32)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":80:9)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":80:41)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":81:9)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":116:17)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":91:36)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":91:45)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":91:58)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":91:29)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":91:13)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":91:69)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":92:13)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":95:13)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":92:17)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":92:34)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":93:13)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":94:17)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":96:20)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":96:21)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":96:30)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":96:33)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":96:47)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":96:13)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":96:48)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":97:34)
#loc93 = loc("/usr/include/netinet/in.h":249:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":97:13)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":98:39)
#loc96 = loc("/usr/include/netinet/in.h":251:20)
#loc97 = loc("/usr/include/netinet/in.h":33:15)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":98:13)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":98:59)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":99:38)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":99:32)
#loc102 = loc("/usr/include/netinet/in.h":250:15)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":99:13)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":99:46)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":100:13)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":103:13)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":100:25)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":100:58)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":100:59)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":100:68)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":100:82)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":100:17)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":100:88)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":101:13)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":102:17)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":106:31)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":106:46)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":106:59)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":106:77)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":106:80)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":106:26)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":106:13)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":106:81)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":107:13)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":110:13)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":107:17)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":107:31)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":107:44)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":107:47)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":107:61)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":108:13)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":109:17)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":112:39)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":112:25)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":112:13)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":114:25)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":114:20)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":114:13)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":114:36)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":116:16)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":117:9)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":120:9)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":117:13)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":117:30)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":118:9)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":119:26)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":119:13)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":128:13)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":128:5)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":257:1)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":261:1)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":259:5)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":259:13)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":260:5)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":260:13)
#loc156 = loc("/usr/include/stdlib.h":575:1)
#loc157 = loc("/usr/include/stdlib.h":575:41)
#loc158 = loc("/usr/include/time.h":76:1)
#loc159 = loc("/usr/include/time.h":76:38)
#loc160 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc161 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":277:15)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":279:15)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":282:15)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":284:15)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":272:1)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":287:1)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":273:1)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":275:27)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":275:22)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":275:5)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":277:5)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":278:5)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":278:71)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":279:5)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":282:5)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":283:5)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":283:70)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":284:5)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":286:12)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":286:5)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":188:23)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":171:1)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":191:1)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":172:1)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":173:5)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":190:5)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":174:9)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":174:13)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":175:9)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":175:30)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":177:9)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":189:9)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":177:13)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":177:21)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":177:23)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":177:26)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":177:34)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":177:36)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":178:9)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":185:9)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":187:9)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":179:28)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":179:20)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":179:13)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":181:13)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":184:13)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":181:21)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":181:17)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":181:24)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":181:28)
#loc218 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":181:26)
#loc219 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":182:13)
#loc220 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":183:37)
#loc221 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":183:30)
#loc222 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":183:17)
#loc223 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":181:33)
#loc224 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":181:32)
#loc225 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":188:13)
#loc226 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":193:1)
#loc227 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":255:1)
#loc228 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":195:5)
#loc229 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":195:9)
#loc230 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":197:13)
#loc231 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":197:12)
#loc232 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":197:5)
#loc233 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":198:5)
#loc234 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":253:5)
#loc235 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":203:9)
#loc236 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":203:13)
#loc237 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":204:9)
#loc238 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":204:28)
#loc239 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":205:9)
#loc240 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":205:32)
#loc241 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":206:9)
#loc242 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":206:41)
#loc243 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":207:9)
#loc244 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":242:17)
#loc245 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":217:36)
#loc246 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":217:45)
#loc247 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":217:58)
#loc248 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":217:29)
#loc249 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":217:13)
#loc250 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":217:69)
#loc251 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":218:13)
#loc252 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":221:13)
#loc253 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":218:17)
#loc254 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":218:34)
#loc255 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":219:13)
#loc256 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":220:17)
#loc257 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":222:20)
#loc258 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":222:21)
#loc259 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":222:30)
#loc260 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":222:33)
#loc261 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":222:47)
#loc262 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":222:13)
#loc263 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":222:48)
#loc264 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":223:34)
#loc265 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":223:13)
#loc266 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":224:49)
#loc267 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":224:39)
#loc268 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":224:13)
#loc269 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":224:59)
#loc270 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":225:38)
#loc271 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":225:32)
#loc272 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":225:13)
#loc273 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":225:46)
#loc274 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":226:13)
#loc275 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":229:13)
#loc276 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":226:25)
#loc277 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":226:58)
#loc278 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":226:59)
#loc279 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":226:68)
#loc280 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":226:82)
#loc281 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":226:17)
#loc282 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":226:88)
#loc283 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":227:13)
#loc284 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":228:17)
#loc285 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":232:31)
#loc286 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":232:46)
#loc287 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":232:59)
#loc288 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":232:77)
#loc289 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":232:80)
#loc290 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":232:26)
#loc291 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":232:13)
#loc292 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":232:81)
#loc293 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":233:13)
#loc294 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":236:13)
#loc295 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":233:17)
#loc296 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":233:31)
#loc297 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":233:44)
#loc298 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":233:47)
#loc299 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":233:61)
#loc300 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":234:13)
#loc301 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":235:17)
#loc302 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":238:39)
#loc303 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":238:25)
#loc304 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":238:13)
#loc305 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":240:25)
#loc306 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":240:20)
#loc307 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":240:13)
#loc308 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":240:36)
#loc309 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":242:16)
#loc310 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":243:9)
#loc311 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":246:9)
#loc312 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":243:13)
#loc313 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":243:30)
#loc314 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":244:9)
#loc315 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":245:26)
#loc316 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":245:13)
#loc317 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":254:17)
#loc318 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":254:5)
#loc319 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":136:1)
#loc320 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":157:1)
#loc323 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":137:1)
#loc324 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":138:5)
#loc325 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":156:5)
#loc326 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":139:9)
#loc327 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":139:13)
#loc328 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":140:9)
#loc329 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":140:30)
#loc330 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":143:9)
#loc331 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":155:9)
#loc332 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":143:13)
#loc333 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":143:21)
#loc334 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":144:9)
#loc335 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":151:9)
#loc336 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":153:9)
#loc337 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":145:28)
#loc338 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":145:20)
#loc339 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":145:13)
#loc340 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":147:13)
#loc341 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":150:13)
#loc342 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":147:21)
#loc343 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":147:17)
#loc344 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":147:24)
#loc345 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":147:28)
#loc346 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":147:26)
#loc347 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":148:13)
#loc348 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":149:37)
#loc349 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":149:30)
#loc350 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":149:17)
#loc351 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":147:33)
#loc352 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":147:32)
#loc353 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":154:23)
#loc354 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":154:13)
#loc355 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":159:1)
#loc356 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":168:1)
#loc357 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":161:5)
#loc358 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":161:9)
#loc359 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":163:13)
#loc360 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":163:12)
#loc361 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":163:5)
#loc362 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":166:12)
#loc363 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":166:5)
#loc364 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":167:17)
#loc365 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c":167:5)
#loc366 = loc(fused[#loc1, #loc2])
#loc367 = loc(fused[#loc3, #loc4])
#loc368 = loc(fused[#loc6, #loc7])
#loc369 = loc(fused[#loc8, #loc9])
#loc370 = loc(fused[#loc10, #loc11])
#loc371 = loc(fused[#loc12, #loc13])
#loc372 = loc(fused[#loc14, #loc15])
#loc373 = loc(fused[#loc16, #loc17])
#loc374 = loc(fused[#loc19, #loc20])
#loc376 = loc(fused[#loc24, #loc25])
#loc377 = loc(fused[#loc26, #loc27])
#loc378 = loc(fused[#loc28, #loc29])
#loc379 = loc(fused[#loc30, #loc31])
#loc380 = loc(fused[#loc32, #loc33])
#loc381 = loc(fused[#loc34, #loc35, #loc36, #loc31])
#loc382 = loc(fused[#loc39, #loc37])
#loc383 = loc(fused[#loc40, #loc41])
#loc384 = loc(fused[#loc43, #loc42])
#loc385 = loc(fused[#loc44, #loc45])
#loc386 = loc(fused[#loc47, #loc41])
#loc387 = loc(fused[#loc52, #loc51])
#loc388 = loc(fused[#loc54, #loc55])
#loc389 = loc(fused[#loc56, #loc57])
#loc390 = loc(fused[#loc60, #loc58])
#loc391 = loc(fused[#loc61, #loc62])
#loc392 = loc(fused[#loc63, #loc64])
#loc393 = loc(fused[#loc65, #loc66])
#loc394 = loc(fused[#loc67, #loc68])
#loc395 = loc(fused[#loc69, #loc70])
#loc396 = loc(fused[#loc71, #loc72])
#loc397 = loc(fused[#loc77, #loc78])
#loc398 = loc(fused[#loc79, #loc80])
#loc399 = loc(fused[#loc81, #loc82])
#loc400 = loc(fused[#loc83, #loc80])
#loc401 = loc(fused[#loc85, #loc86])
#loc402 = loc(fused[#loc88, #loc89])
#loc403 = loc(fused[#loc90, #loc91])
#loc404 = loc(fused[#loc94, #loc92])
#loc405 = loc(fused[#loc98, #loc99])
#loc406 = loc(fused[#loc103, #loc104])
#loc407 = loc(fused[#loc105, #loc106])
#loc408 = loc(fused[#loc108, #loc109])
#loc409 = loc(fused[#loc110, #loc111])
#loc410 = loc(fused[#loc112, #loc113])
#loc411 = loc(fused[#loc114, #loc106])
#loc412 = loc(fused[#loc118, #loc119])
#loc413 = loc(fused[#loc122, #loc123])
#loc414 = loc(fused[#loc124, #loc125])
#loc415 = loc(fused[#loc126, #loc127])
#loc416 = loc(fused[#loc129, #loc130])
#loc417 = loc(fused[#loc131, #loc125])
#loc418 = loc(fused[#loc135, #loc133])
#loc419 = loc(fused[#loc138, #loc139])
#loc420 = loc(fused[#loc141, #loc142])
#loc421 = loc(fused[#loc143, #loc144])
#loc422 = loc(fused[#loc145, #loc142])
#loc423 = loc(fused[#loc150, #loc151])
#loc424 = loc(fused[#loc152, #loc153])
#loc425 = loc(fused[#loc154, #loc155])
#loc426 = loc(fused[#loc156, #loc157])
#loc427 = loc(fused[#loc158, #loc159])
#loc428 = loc(fused[#loc160, #loc161])
#loc429 = loc(fused[#loc166, #loc167])
#loc432 = loc(fused[#loc177, #loc178])
#loc433 = loc(fused[#loc181, #loc182])
#loc434 = loc(fused[#loc185, #loc184])
#loc435 = loc(fused[#loc187, #loc188])
#loc437 = loc(fused[#loc192, #loc193])
#loc438 = loc(fused[#loc194, #loc195])
#loc439 = loc(fused[#loc196, #loc197])
#loc440 = loc(fused[#loc198, #loc199])
#loc441 = loc(fused[#loc200, #loc201])
#loc442 = loc(fused[#loc203, #loc205])
#loc443 = loc(fused[#loc206, #loc207, #loc208, #loc199])
#loc444 = loc(fused[#loc211, #loc209])
#loc445 = loc(fused[#loc212, #loc213])
#loc446 = loc(fused[#loc215, #loc214])
#loc447 = loc(fused[#loc216, #loc217])
#loc448 = loc(fused[#loc219, #loc213])
#loc449 = loc(fused[#loc224, #loc223])
#loc450 = loc(fused[#loc226, #loc227])
#loc451 = loc(fused[#loc228, #loc229])
#loc452 = loc(fused[#loc232, #loc230])
#loc453 = loc(fused[#loc233, #loc234])
#loc454 = loc(fused[#loc235, #loc236])
#loc455 = loc(fused[#loc237, #loc238])
#loc456 = loc(fused[#loc239, #loc240])
#loc457 = loc(fused[#loc241, #loc242])
#loc458 = loc(fused[#loc243, #loc244])
#loc459 = loc(fused[#loc249, #loc250])
#loc460 = loc(fused[#loc251, #loc252])
#loc461 = loc(fused[#loc253, #loc254])
#loc462 = loc(fused[#loc255, #loc252])
#loc463 = loc(fused[#loc257, #loc258])
#loc464 = loc(fused[#loc260, #loc261])
#loc465 = loc(fused[#loc262, #loc263])
#loc466 = loc(fused[#loc265, #loc264])
#loc467 = loc(fused[#loc268, #loc269])
#loc468 = loc(fused[#loc272, #loc273])
#loc469 = loc(fused[#loc274, #loc275])
#loc470 = loc(fused[#loc277, #loc278])
#loc471 = loc(fused[#loc279, #loc280])
#loc472 = loc(fused[#loc281, #loc282])
#loc473 = loc(fused[#loc283, #loc275])
#loc474 = loc(fused[#loc287, #loc288])
#loc475 = loc(fused[#loc291, #loc292])
#loc476 = loc(fused[#loc293, #loc294])
#loc477 = loc(fused[#loc295, #loc296])
#loc478 = loc(fused[#loc298, #loc299])
#loc479 = loc(fused[#loc300, #loc294])
#loc480 = loc(fused[#loc304, #loc302])
#loc481 = loc(fused[#loc307, #loc308])
#loc482 = loc(fused[#loc310, #loc311])
#loc483 = loc(fused[#loc312, #loc313])
#loc484 = loc(fused[#loc314, #loc311])
#loc485 = loc(fused[#loc319, #loc320])
#loc487 = loc(fused[#loc324, #loc325])
#loc488 = loc(fused[#loc326, #loc327])
#loc489 = loc(fused[#loc328, #loc329])
#loc490 = loc(fused[#loc330, #loc331])
#loc491 = loc(fused[#loc332, #loc333])
#loc492 = loc(fused[#loc334, #loc335, #loc336, #loc331])
#loc493 = loc(fused[#loc339, #loc337])
#loc494 = loc(fused[#loc340, #loc341])
#loc495 = loc(fused[#loc343, #loc342])
#loc496 = loc(fused[#loc344, #loc345])
#loc497 = loc(fused[#loc347, #loc341])
#loc498 = loc(fused[#loc352, #loc351])
#loc499 = loc(fused[#loc355, #loc356])
#loc500 = loc(fused[#loc357, #loc358])
#loc501 = loc(fused[#loc361, #loc359])
#loc502 = loc(fused[#loc363, #loc362])
