!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @__isoc23_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc247)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc248)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc249)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc250)
  cir.func private @printIntLine(!s32i) loc(#loc251)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc252)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc14)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc253)
  cir.func @_ZN53CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc255)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc256)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc22)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc24)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc257)
    %4 = cir.get_global @__isoc23_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc26)
    %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc248)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc27)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %9 = cir.call @__isoc23_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc26)
    cir.scope {
      %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc259)
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc31)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc31)
      cir.store %12, %10 : !s32i, !cir.ptr<!s32i> loc(#loc259)
      cir.scope {
        %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc261)
        %14 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc262)
        %15 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc38)
        %16 = cir.const #cir.int<10> : !s32i loc(#loc39)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc39)
        %18 = cir.const #cir.int<4> : !u64i loc(#loc263)
        %19 = cir.binop(mul, %17, %18) : !u64i loc(#loc264)
        %20 = cir.call @malloc(%19) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc38)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc265)
        cir.store %21, %14 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc262)
        cir.scope {
          %25 = cir.load %14 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
          %26 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc45)
          %27 = cir.cmp(eq, %25, %26) : !cir.ptr<!s32i>, !cir.bool loc(#loc267)
          cir.if %27 {
            %28 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc47)
            %29 = cir.const #cir.int<1> : !s32i loc(#loc48)
            %30 = cir.unary(minus, %29) nsw : !s32i, !s32i loc(#loc49)
            cir.call @exit(%30) : (!s32i) -> () extra(#fn_attr) loc(#loc47)
          } loc(#loc268)
        } loc(#loc266)
        cir.scope {
          %25 = cir.const #cir.int<0> : !s32i loc(#loc52)
          cir.store %25, %13 : !s32i, !cir.ptr<!s32i> loc(#loc270)
          cir.for : cond {
            %26 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc54)
            %27 = cir.const #cir.int<10> : !s32i loc(#loc55)
            %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc271)
            cir.condition(%28) loc(#loc271)
          } body {
            cir.scope {
              %26 = cir.const #cir.int<0> : !s32i loc(#loc57)
              %27 = cir.load %14 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc58)
              %28 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc59)
              %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc60)
              cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc273)
            } loc(#loc272)
            cir.yield loc(#loc51)
          } step {
            %26 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc61)
            %27 = cir.unary(inc, %26) nsw : !s32i, !s32i loc(#loc62)
            cir.store %27, %13 : !s32i, !cir.ptr<!s32i> loc(#loc274)
            cir.yield loc(#loc269)
          } loc(#loc269)
        } loc(#loc269)
        cir.scope {
          %25 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc65)
          %26 = cir.const #cir.int<0> : !s32i loc(#loc66)
          %27 = cir.cmp(ge, %25, %26) : !s32i, !cir.bool loc(#loc276)
          cir.if %27 {
            %28 = cir.const #cir.int<1> : !s32i loc(#loc70)
            %29 = cir.load %14 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc71)
            %30 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc72)
            %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc73)
            cir.store %28, %31 : !s32i, !cir.ptr<!s32i> loc(#loc278)
            cir.scope {
              %32 = cir.const #cir.int<0> : !s32i loc(#loc76)
              cir.store %32, %13 : !s32i, !cir.ptr<!s32i> loc(#loc280)
              cir.for : cond {
                %33 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc78)
                %34 = cir.const #cir.int<10> : !s32i loc(#loc79)
                %35 = cir.cmp(lt, %33, %34) : !s32i, !cir.bool loc(#loc281)
                cir.condition(%35) loc(#loc281)
              } body {
                cir.scope {
                  %33 = cir.load %14 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc81)
                  %34 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc82)
                  %35 = cir.ptr_stride(%33 : !cir.ptr<!s32i>, %34 : !s32i), !cir.ptr<!s32i> loc(#loc83)
                  %36 = cir.load %35 : !cir.ptr<!s32i>, !s32i loc(#loc81)
                  cir.call @printIntLine(%36) : (!s32i) -> () loc(#loc84)
                } loc(#loc282)
                cir.yield loc(#loc75)
              } step {
                %33 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc85)
                %34 = cir.unary(inc, %33) nsw : !s32i, !s32i loc(#loc86)
                cir.store %34, %13 : !s32i, !cir.ptr<!s32i> loc(#loc283)
                cir.yield loc(#loc279)
              } loc(#loc279)
            } loc(#loc279)
          } else {
            %28 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc14)
            %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc14)
            cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc87)
          } loc(#loc277)
        } loc(#loc275)
        %22 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc88)
        %23 = cir.load %14 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc89)
        %24 = cir.cast(bitcast, %23 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc89)
        cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc88)
      } loc(#loc260)
    } loc(#loc258)
    cir.return loc(#loc18)
  } loc(#loc254)
  cir.func internal private @_ZN53CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc285)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc286)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc95)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc96)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc97)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc287)
    %4 = cir.const #cir.int<7> : !s32i loc(#loc99)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc288)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc290)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc104)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc104)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc290)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc292)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc293)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc111)
        %11 = cir.const #cir.int<10> : !s32i loc(#loc112)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc112)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc294)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc295)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc111)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc296)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc293)
        cir.scope {
          %20 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc118)
          %22 = cir.cmp(eq, %20, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc298)
          cir.if %22 {
            %23 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc120)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc121)
            %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc122)
            cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc120)
          } loc(#loc299)
        } loc(#loc297)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc125)
          cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc301)
          cir.for : cond {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc127)
            %22 = cir.const #cir.int<10> : !s32i loc(#loc128)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc302)
            cir.condition(%23) loc(#loc302)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc130)
              %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc131)
              %23 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc132)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc133)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc304)
            } loc(#loc303)
            cir.yield loc(#loc124)
          } step {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc134)
            %22 = cir.unary(inc, %21) nsw : !s32i, !s32i loc(#loc135)
            cir.store %22, %8 : !s32i, !cir.ptr<!s32i> loc(#loc305)
            cir.yield loc(#loc300)
          } loc(#loc300)
        } loc(#loc300)
        cir.scope {
          %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc138)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc139)
          %22 = cir.cmp(ge, %20, %21) : !s32i, !cir.bool loc(#loc307)
          cir.if %22 {
            %23 = cir.const #cir.int<1> : !s32i loc(#loc143)
            %24 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc144)
            %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc145)
            %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc146)
            cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc309)
            cir.scope {
              %27 = cir.const #cir.int<0> : !s32i loc(#loc149)
              cir.store %27, %8 : !s32i, !cir.ptr<!s32i> loc(#loc311)
              cir.for : cond {
                %28 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc151)
                %29 = cir.const #cir.int<10> : !s32i loc(#loc152)
                %30 = cir.cmp(lt, %28, %29) : !s32i, !cir.bool loc(#loc312)
                cir.condition(%30) loc(#loc312)
              } body {
                cir.scope {
                  %28 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc154)
                  %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc155)
                  %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc156)
                  %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc154)
                  cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc157)
                } loc(#loc313)
                cir.yield loc(#loc148)
              } step {
                %28 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc158)
                %29 = cir.unary(inc, %28) nsw : !s32i, !s32i loc(#loc159)
                cir.store %29, %8 : !s32i, !cir.ptr<!s32i> loc(#loc314)
                cir.yield loc(#loc310)
              } loc(#loc310)
            } loc(#loc310)
          } else {
            %23 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc160)
            %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc160)
            cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc161)
          } loc(#loc308)
        } loc(#loc306)
        %17 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc162)
        %18 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc163)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc163)
        cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc162)
      } loc(#loc291)
    } loc(#loc289)
    cir.return loc(#loc91)
  } loc(#loc284)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc164)
  cir.func internal private @_ZN53CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc316)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc317)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc170)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc171)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc172)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc318)
    %4 = cir.get_global @__isoc23_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc174)
    %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc248)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc175)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc176)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc176)
    %9 = cir.call @__isoc23_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc174)
    cir.scope {
      %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc320)
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc180)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc180)
      cir.store %12, %10 : !s32i, !cir.ptr<!s32i> loc(#loc320)
      cir.scope {
        %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc322)
        %14 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc323)
        %15 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc187)
        %16 = cir.const #cir.int<10> : !s32i loc(#loc188)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc188)
        %18 = cir.const #cir.int<4> : !u64i loc(#loc324)
        %19 = cir.binop(mul, %17, %18) : !u64i loc(#loc325)
        %20 = cir.call @malloc(%19) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc187)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc326)
        cir.store %21, %14 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc323)
        cir.scope {
          %25 = cir.load %14 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc193)
          %26 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc194)
          %27 = cir.cmp(eq, %25, %26) : !cir.ptr<!s32i>, !cir.bool loc(#loc328)
          cir.if %27 {
            %28 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc196)
            %29 = cir.const #cir.int<1> : !s32i loc(#loc197)
            %30 = cir.unary(minus, %29) nsw : !s32i, !s32i loc(#loc198)
            cir.call @exit(%30) : (!s32i) -> () extra(#fn_attr) loc(#loc196)
          } loc(#loc329)
        } loc(#loc327)
        cir.scope {
          %25 = cir.const #cir.int<0> : !s32i loc(#loc201)
          cir.store %25, %13 : !s32i, !cir.ptr<!s32i> loc(#loc331)
          cir.for : cond {
            %26 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc203)
            %27 = cir.const #cir.int<10> : !s32i loc(#loc204)
            %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc332)
            cir.condition(%28) loc(#loc332)
          } body {
            cir.scope {
              %26 = cir.const #cir.int<0> : !s32i loc(#loc206)
              %27 = cir.load %14 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc207)
              %28 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc208)
              %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc209)
              cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc334)
            } loc(#loc333)
            cir.yield loc(#loc200)
          } step {
            %26 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc210)
            %27 = cir.unary(inc, %26) nsw : !s32i, !s32i loc(#loc211)
            cir.store %27, %13 : !s32i, !cir.ptr<!s32i> loc(#loc335)
            cir.yield loc(#loc330)
          } loc(#loc330)
        } loc(#loc330)
        cir.scope {
          %25 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc214)
          %26 = cir.const #cir.int<0> : !s32i loc(#loc215)
          %27 = cir.cmp(ge, %25, %26) : !s32i, !cir.bool loc(#loc337)
          %28 = cir.ternary(%27, true {
            %29 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc217)
            %30 = cir.const #cir.int<10> : !s32i loc(#loc218)
            %31 = cir.cmp(lt, %29, %30) : !s32i, !cir.bool loc(#loc338)
            %32 = cir.ternary(%31, true {
              %33 = cir.const #true loc(#loc216)
              cir.yield %33 : !cir.bool loc(#loc216)
            }, false {
              %33 = cir.const #false loc(#loc216)
              cir.yield %33 : !cir.bool loc(#loc216)
            }) : (!cir.bool) -> !cir.bool loc(#loc216)
            cir.yield %32 : !cir.bool loc(#loc216)
          }, false {
            %29 = cir.const #false loc(#loc216)
            cir.yield %29 : !cir.bool loc(#loc216)
          }) : (!cir.bool) -> !cir.bool loc(#loc216)
          cir.if %28 {
            %29 = cir.const #cir.int<1> : !s32i loc(#loc223)
            %30 = cir.load %14 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc224)
            %31 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc225)
            %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !s32i), !cir.ptr<!s32i> loc(#loc226)
            cir.store %29, %32 : !s32i, !cir.ptr<!s32i> loc(#loc340)
            cir.scope {
              %33 = cir.const #cir.int<0> : !s32i loc(#loc229)
              cir.store %33, %13 : !s32i, !cir.ptr<!s32i> loc(#loc342)
              cir.for : cond {
                %34 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc231)
                %35 = cir.const #cir.int<10> : !s32i loc(#loc232)
                %36 = cir.cmp(lt, %34, %35) : !s32i, !cir.bool loc(#loc343)
                cir.condition(%36) loc(#loc343)
              } body {
                cir.scope {
                  %34 = cir.load %14 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc234)
                  %35 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc235)
                  %36 = cir.ptr_stride(%34 : !cir.ptr<!s32i>, %35 : !s32i), !cir.ptr<!s32i> loc(#loc236)
                  %37 = cir.load %36 : !cir.ptr<!s32i>, !s32i loc(#loc234)
                  cir.call @printIntLine(%37) : (!s32i) -> () loc(#loc237)
                } loc(#loc344)
                cir.yield loc(#loc228)
              } step {
                %34 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc238)
                %35 = cir.unary(inc, %34) nsw : !s32i, !s32i loc(#loc239)
                cir.store %35, %13 : !s32i, !cir.ptr<!s32i> loc(#loc345)
                cir.yield loc(#loc341)
              } loc(#loc341)
            } loc(#loc341)
          } else {
            %29 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc164)
            %30 = cir.cast(array_to_ptrdecay, %29 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc164)
            cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc240)
          } loc(#loc339)
        } loc(#loc336)
        %22 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc241)
        %23 = cir.load %14 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc242)
        %24 = cir.cast(bitcast, %23 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc242)
        cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc241)
      } loc(#loc321)
    } loc(#loc319)
    cir.return loc(#loc166)
  } loc(#loc315)
  cir.func @_ZN53CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN53CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33L7goodG2BEv() : () -> () loc(#loc245)
    cir.call @_ZN53CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33L7goodB2GEv() : () -> () loc(#loc246)
    cir.return loc(#loc244)
  } loc(#loc346)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":0:0)
#loc1 = loc("/usr/include/stdio.h":442:1)
#loc2 = loc("/usr/include/stdio.h":444:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":32:19)
#loc6 = loc("/usr/include/stdlib.h":672:1)
#loc7 = loc("/usr/include/stdlib.h":672:45)
#loc8 = loc("/usr/include/stdlib.h":756:1)
#loc9 = loc("/usr/include/stdlib.h":756:70)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":57:27)
#loc15 = loc("/usr/include/stdlib.h":687:1)
#loc16 = loc("/usr/include/stdlib.h":687:32)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":25:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":62:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":27:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":27:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":28:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":28:20)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":30:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":30:12)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":30:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":32:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":32:12)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":33:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":61:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":34:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":34:20)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":35:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":60:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":36:13)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":36:17)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":37:13)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":37:58)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":37:35)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":37:42)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":37:47)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":37:57)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":38:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":38:43)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":38:17)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":38:27)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":38:33)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":38:34)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":38:40)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":38:39)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":40:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":43:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":40:22)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":40:18)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":40:25)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":40:29)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":41:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":42:29)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":42:17)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":42:24)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":42:25)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":40:34)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":40:33)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":46:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":58:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":46:17)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":46:25)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":47:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":54:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":56:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":48:32)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":48:17)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":48:24)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":48:28)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":50:17)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":53:17)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":50:25)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":50:21)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":50:28)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":50:32)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":51:17)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":52:34)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":52:41)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":52:42)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":52:21)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":50:37)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":50:36)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":57:17)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":59:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":59:18)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":69:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":107:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":71:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":71:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":72:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":72:20)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":74:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":74:12)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":74:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":77:12)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":77:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":78:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":106:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":79:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":79:20)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":80:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":105:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":81:13)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":81:17)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":82:13)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":82:58)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":82:35)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":82:42)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":82:47)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":82:57)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":83:13)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":83:43)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":83:17)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":83:27)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":83:33)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":83:34)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":83:40)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":83:39)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":85:13)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":88:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":85:22)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":85:18)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":85:25)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":85:29)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":86:13)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":87:29)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":87:17)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":87:24)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":87:25)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":85:34)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":85:33)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":91:13)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":103:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":91:17)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":91:25)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":92:13)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":99:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":101:13)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":93:32)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":93:17)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":93:24)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":93:28)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":95:17)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":98:17)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":95:25)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":95:21)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":95:28)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":95:32)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":96:17)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":97:34)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":97:41)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":97:42)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":97:21)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":95:37)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":95:36)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":102:27)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":102:17)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":104:13)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":104:18)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":141:27)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":110:1)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":146:1)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":112:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":112:9)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":113:5)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":113:20)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":115:13)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":115:12)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":115:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":117:5)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":117:12)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":117:19)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":118:5)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":145:5)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":119:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":119:20)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":120:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":144:9)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":121:13)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":121:17)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":122:13)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":122:58)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":122:35)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":122:42)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":122:47)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":122:57)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":123:13)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":123:43)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":123:17)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":123:27)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":123:33)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":123:34)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":123:40)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":123:39)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":125:13)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":128:13)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":125:22)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":125:18)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":125:25)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":125:29)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":126:13)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":127:29)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":127:17)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":127:24)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":127:25)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":125:34)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":125:33)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":130:13)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":142:13)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":130:17)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":130:25)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":130:27)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":130:30)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":130:38)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":130:40)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":131:13)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":138:13)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":140:13)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":132:32)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":132:17)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":132:24)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":132:28)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":134:17)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":137:17)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":134:25)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":134:21)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":134:28)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":134:32)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":135:17)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":136:34)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":136:41)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":136:42)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":136:21)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":134:37)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":134:36)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":141:17)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":143:13)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":143:18)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":148:1)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":152:1)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":150:5)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_33.cpp":151:5)
#loc247 = loc(fused[#loc1, #loc2])
#loc248 = loc(fused[#loc3, #loc4])
#loc249 = loc(fused[#loc6, #loc7])
#loc250 = loc(fused[#loc8, #loc9])
#loc251 = loc(fused[#loc10, #loc11])
#loc252 = loc(fused[#loc12, #loc13])
#loc253 = loc(fused[#loc15, #loc16])
#loc254 = loc(fused[#loc17, #loc18])
#loc255 = loc(fused[#loc19, #loc20])
#loc256 = loc(fused[#loc21, #loc22])
#loc257 = loc(fused[#loc25, #loc23])
#loc258 = loc(fused[#loc28, #loc29])
#loc259 = loc(fused[#loc30, #loc31])
#loc260 = loc(fused[#loc32, #loc33])
#loc261 = loc(fused[#loc34, #loc35])
#loc262 = loc(fused[#loc36, #loc37])
#loc263 = loc(fused[#loc40, #loc41])
#loc264 = loc(fused[#loc39, #loc41])
#loc265 = loc(fused[#loc38, #loc37])
#loc266 = loc(fused[#loc42, #loc43])
#loc267 = loc(fused[#loc44, #loc45])
#loc268 = loc(fused[#loc46, #loc43])
#loc269 = loc(fused[#loc50, #loc51])
#loc270 = loc(fused[#loc53, #loc52])
#loc271 = loc(fused[#loc54, #loc55])
#loc272 = loc(fused[#loc56, #loc51])
#loc273 = loc(fused[#loc58, #loc57])
#loc274 = loc(fused[#loc62, #loc61])
#loc275 = loc(fused[#loc63, #loc64])
#loc276 = loc(fused[#loc65, #loc66])
#loc277 = loc(fused[#loc67, #loc68, #loc69, #loc64])
#loc278 = loc(fused[#loc71, #loc70])
#loc279 = loc(fused[#loc74, #loc75])
#loc280 = loc(fused[#loc77, #loc76])
#loc281 = loc(fused[#loc78, #loc79])
#loc282 = loc(fused[#loc80, #loc75])
#loc283 = loc(fused[#loc86, #loc85])
#loc284 = loc(fused[#loc90, #loc91])
#loc285 = loc(fused[#loc92, #loc93])
#loc286 = loc(fused[#loc94, #loc95])
#loc287 = loc(fused[#loc98, #loc96])
#loc288 = loc(fused[#loc100, #loc99])
#loc289 = loc(fused[#loc101, #loc102])
#loc290 = loc(fused[#loc103, #loc104])
#loc291 = loc(fused[#loc105, #loc106])
#loc292 = loc(fused[#loc107, #loc108])
#loc293 = loc(fused[#loc109, #loc110])
#loc294 = loc(fused[#loc113, #loc114])
#loc295 = loc(fused[#loc112, #loc114])
#loc296 = loc(fused[#loc111, #loc110])
#loc297 = loc(fused[#loc115, #loc116])
#loc298 = loc(fused[#loc117, #loc118])
#loc299 = loc(fused[#loc119, #loc116])
#loc300 = loc(fused[#loc123, #loc124])
#loc301 = loc(fused[#loc126, #loc125])
#loc302 = loc(fused[#loc127, #loc128])
#loc303 = loc(fused[#loc129, #loc124])
#loc304 = loc(fused[#loc131, #loc130])
#loc305 = loc(fused[#loc135, #loc134])
#loc306 = loc(fused[#loc136, #loc137])
#loc307 = loc(fused[#loc138, #loc139])
#loc308 = loc(fused[#loc140, #loc141, #loc142, #loc137])
#loc309 = loc(fused[#loc144, #loc143])
#loc310 = loc(fused[#loc147, #loc148])
#loc311 = loc(fused[#loc150, #loc149])
#loc312 = loc(fused[#loc151, #loc152])
#loc313 = loc(fused[#loc153, #loc148])
#loc314 = loc(fused[#loc159, #loc158])
#loc315 = loc(fused[#loc165, #loc166])
#loc316 = loc(fused[#loc167, #loc168])
#loc317 = loc(fused[#loc169, #loc170])
#loc318 = loc(fused[#loc173, #loc171])
#loc319 = loc(fused[#loc177, #loc178])
#loc320 = loc(fused[#loc179, #loc180])
#loc321 = loc(fused[#loc181, #loc182])
#loc322 = loc(fused[#loc183, #loc184])
#loc323 = loc(fused[#loc185, #loc186])
#loc324 = loc(fused[#loc189, #loc190])
#loc325 = loc(fused[#loc188, #loc190])
#loc326 = loc(fused[#loc187, #loc186])
#loc327 = loc(fused[#loc191, #loc192])
#loc328 = loc(fused[#loc193, #loc194])
#loc329 = loc(fused[#loc195, #loc192])
#loc330 = loc(fused[#loc199, #loc200])
#loc331 = loc(fused[#loc202, #loc201])
#loc332 = loc(fused[#loc203, #loc204])
#loc333 = loc(fused[#loc205, #loc200])
#loc334 = loc(fused[#loc207, #loc206])
#loc335 = loc(fused[#loc211, #loc210])
#loc336 = loc(fused[#loc212, #loc213])
#loc337 = loc(fused[#loc214, #loc215])
#loc338 = loc(fused[#loc217, #loc219])
#loc339 = loc(fused[#loc220, #loc221, #loc222, #loc213])
#loc340 = loc(fused[#loc224, #loc223])
#loc341 = loc(fused[#loc227, #loc228])
#loc342 = loc(fused[#loc230, #loc229])
#loc343 = loc(fused[#loc231, #loc232])
#loc344 = loc(fused[#loc233, #loc228])
#loc345 = loc(fused[#loc239, #loc238])
#loc346 = loc(fused[#loc243, #loc244])
