!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":104:10)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":104:14)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":104:20)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":104:32)
#loc143 = loc(fused[#loc47, #loc48])
#loc144 = loc(fused[#loc49, #loc50])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc124)
  cir.func private @printLongLongLine(!s64i) loc(#loc125)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_multiply_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc127)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc128)
    cir.goto "source" loc(#loc129)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc13)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc14)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc14)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc14)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc14)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc14)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc14)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc14)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc14)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc14)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc14)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc14)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc14)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc14)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc14)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc14)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc14)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc14)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc14)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc14)
      cir.yield %29 : !u64i loc(#loc14)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc14)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc14)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc14)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc14)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc14)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc14)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc14)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc14)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc14)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc14)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc14)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc14)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc14)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc14)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc14)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc14)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc14)
      %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc14)
      %31 = cir.const #cir.int<1> : !s32i loc(#loc14)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc14)
      %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc14)
      cir.yield %33 : !u64i loc(#loc14)
    }) : (!cir.bool) -> !u64i loc(#loc14)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc14)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc130)
    cir.goto "sink" loc(#loc131)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc18)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc21)
      %9 = cir.const #cir.int<0> : !s32i loc(#loc22)
      %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc22)
      %11 = cir.cmp(gt, %8, %10) : !s64i, !cir.bool loc(#loc133)
      cir.if %11 {
        %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc135)
        %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc26)
        %14 = cir.const #cir.int<2> : !s32i loc(#loc25)
        %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc25)
        %16 = cir.binop(mul, %13, %15) nsw : !s64i loc(#loc26)
        cir.store %16, %12 : !s64i, !cir.ptr<!s64i> loc(#loc135)
        %17 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc27)
        cir.call @printLongLongLine(%17) : (!s64i) -> () loc(#loc28)
      } loc(#loc134)
    } loc(#loc132)
    cir.return loc(#loc6)
  } loc(#loc126)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_multiply_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc138)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    cir.return loc(#loc30)
  } loc(#loc136)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc139)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc140)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc141)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc44)
  cir.func @main(%arg0: !s32i loc(fused[#loc47, #loc48]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc49, #loc50])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc143)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc144)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc46)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc51)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc51)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc52)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc53)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc53)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc54)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc41)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %8 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_18_good : !cir.ptr<!cir.func<!void ()>> loc(#loc145)
    cir.call @CWE190_Integer_Overflow__int64_t_rand_multiply_18_good() : () -> () loc(#loc56)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc42)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc43)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %13 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_18_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc146)
    cir.call @CWE190_Integer_Overflow__int64_t_rand_multiply_18_bad() : () -> () loc(#loc60)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc44)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc63)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc147)
    cir.return %17 : !s32i loc(#loc147)
  } loc(#loc142)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc65)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc149)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc70)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc150)
    cir.goto "source" loc(#loc151)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc74)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc75)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc75)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc75)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc75)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc75)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc75)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc75)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc75)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc75)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc75)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc75)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc75)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc75)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc75)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc75)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc75)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc75)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc75)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc75)
      cir.yield %29 : !u64i loc(#loc75)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc75)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc75)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc75)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc75)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc75)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc75)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc75)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc75)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc75)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc75)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc75)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc75)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc75)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc75)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc75)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc75)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc75)
      %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc75)
      %31 = cir.const #cir.int<1> : !s32i loc(#loc75)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc75)
      %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc75)
      cir.yield %33 : !u64i loc(#loc75)
    }) : (!cir.bool) -> !u64i loc(#loc75)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc75)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc152)
    cir.goto "sink" loc(#loc153)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc79)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc82)
      %9 = cir.const #cir.int<0> : !s32i loc(#loc83)
      %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc83)
      %11 = cir.cmp(gt, %8, %10) : !s64i, !cir.bool loc(#loc155)
      cir.if %11 {
        cir.scope {
          %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc87)
          %13 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc88)
          %14 = cir.const #cir.int<2> : !s32i loc(#loc89)
          %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc89)
          %16 = cir.binop(div, %13, %15) : !s64i loc(#loc158)
          %17 = cir.cmp(lt, %12, %16) : !s64i, !cir.bool loc(#loc159)
          cir.if %17 {
            %18 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc161)
            %19 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc96)
            %20 = cir.const #cir.int<2> : !s32i loc(#loc95)
            %21 = cir.cast(integral, %20 : !s32i), !s64i loc(#loc95)
            %22 = cir.binop(mul, %19, %21) nsw : !s64i loc(#loc96)
            cir.store %22, %18 : !s64i, !cir.ptr<!s64i> loc(#loc161)
            %23 = cir.load %18 : !cir.ptr<!s64i>, !s64i loc(#loc97)
            cir.call @printLongLongLine(%23) : (!s64i) -> () loc(#loc98)
          } else {
            %18 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc65)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc65)
            cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc99)
          } loc(#loc160)
        } loc(#loc157)
      } loc(#loc156)
    } loc(#loc154)
    cir.return loc(#loc67)
  } loc(#loc148)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc163)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc104)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc164)
    cir.goto "source" loc(#loc165)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc108)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc109)
    %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc109)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc166)
    cir.goto "sink" loc(#loc167)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc113)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc116)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc117)
      %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc117)
      %7 = cir.cmp(gt, %4, %6) : !s64i, !cir.bool loc(#loc169)
      cir.if %7 {
        %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc171)
        %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc121)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc120)
        %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc120)
        %12 = cir.binop(mul, %9, %11) nsw : !s64i loc(#loc121)
        cir.store %12, %8 : !s64i, !cir.ptr<!s64i> loc(#loc171)
        %13 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc122)
        cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc123)
      } loc(#loc170)
    } loc(#loc168)
    cir.return loc(#loc101)
  } loc(#loc162)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":38:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":24:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":24:13)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":25:12)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":25:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":26:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":26:10)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":27:1)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":29:21)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":29:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":30:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":30:10)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":31:1)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":32:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":37:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":32:8)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":32:15)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":33:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":35:9)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":35:33)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":35:26)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":36:27)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":36:9)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":89:1)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":93:1)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":91:5)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":91:13)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":92:5)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":92:13)
#loc35 = loc("/usr/include/stdlib.h":575:1)
#loc36 = loc("/usr/include/stdlib.h":575:41)
#loc37 = loc("/usr/include/time.h":76:1)
#loc38 = loc("/usr/include/time.h":76:38)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":109:15)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":111:15)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":114:15)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":116:15)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":104:1)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":119:1)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":105:1)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":107:27)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":107:22)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":107:5)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":109:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":110:5)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":110:60)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":111:5)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":114:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":115:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":115:59)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":116:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":118:12)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":118:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":65:23)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":45:1)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":68:1)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":47:5)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":47:13)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":48:12)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":48:5)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":49:5)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":49:10)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":50:1)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":52:21)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":52:5)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":53:5)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":53:10)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":54:1)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":55:5)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":67:5)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":55:8)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":55:15)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":56:5)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":58:9)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":66:9)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":58:13)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":58:21)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":58:31)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":58:32)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":59:9)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":62:9)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":64:9)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":60:13)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":60:37)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":60:30)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":61:31)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":61:13)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":65:13)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":71:1)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":87:1)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":73:5)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":73:13)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":74:12)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":74:5)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":75:5)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":75:10)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":76:1)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":78:12)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":78:5)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":79:5)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":79:10)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":80:1)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":81:5)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":86:5)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":81:8)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":81:15)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":82:5)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":84:9)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":84:33)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":84:26)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":85:27)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_18.c":85:9)
#loc124 = loc(fused[#loc1, #loc2])
#loc125 = loc(fused[#loc3, #loc4])
#loc126 = loc(fused[#loc5, #loc6])
#loc127 = loc(fused[#loc7, #loc8])
#loc128 = loc(fused[#loc10, #loc9])
#loc129 = loc(fused[#loc11, #loc12])
#loc130 = loc(fused[#loc15, #loc14])
#loc131 = loc(fused[#loc16, #loc17])
#loc132 = loc(fused[#loc19, #loc20])
#loc133 = loc(fused[#loc21, #loc22])
#loc134 = loc(fused[#loc23, #loc20])
#loc135 = loc(fused[#loc24, #loc25])
#loc136 = loc(fused[#loc29, #loc30])
#loc137 = loc(fused[#loc31, #loc32])
#loc138 = loc(fused[#loc33, #loc34])
#loc139 = loc(fused[#loc35, #loc36])
#loc140 = loc(fused[#loc37, #loc38])
#loc141 = loc(fused[#loc39, #loc40])
#loc142 = loc(fused[#loc45, #loc46])
#loc145 = loc(fused[#loc56, #loc57])
#loc146 = loc(fused[#loc60, #loc61])
#loc147 = loc(fused[#loc64, #loc63])
#loc148 = loc(fused[#loc66, #loc67])
#loc149 = loc(fused[#loc68, #loc69])
#loc150 = loc(fused[#loc71, #loc70])
#loc151 = loc(fused[#loc72, #loc73])
#loc152 = loc(fused[#loc76, #loc75])
#loc153 = loc(fused[#loc77, #loc78])
#loc154 = loc(fused[#loc80, #loc81])
#loc155 = loc(fused[#loc82, #loc83])
#loc156 = loc(fused[#loc84, #loc81])
#loc157 = loc(fused[#loc85, #loc86])
#loc158 = loc(fused[#loc88, #loc89])
#loc159 = loc(fused[#loc87, #loc90])
#loc160 = loc(fused[#loc91, #loc92, #loc93, #loc86])
#loc161 = loc(fused[#loc94, #loc95])
#loc162 = loc(fused[#loc100, #loc101])
#loc163 = loc(fused[#loc102, #loc103])
#loc164 = loc(fused[#loc105, #loc104])
#loc165 = loc(fused[#loc106, #loc107])
#loc166 = loc(fused[#loc110, #loc109])
#loc167 = loc(fused[#loc111, #loc112])
#loc168 = loc(fused[#loc114, #loc115])
#loc169 = loc(fused[#loc116, #loc117])
#loc170 = loc(fused[#loc118, #loc115])
#loc171 = loc(fused[#loc119, #loc120])
