!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc35)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__fixed_18.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__fixed_18_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc37)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc9)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc38)
    cir.goto "source" loc(#loc39)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc13)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc14)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc14)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc40)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc3)
    cir.scope {
      cir.scope {
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc3)
        %8 = cir.const #cir.int<5> : !s32i loc(#loc3)
        %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc3)
        cir.if %9 {
        } else {
          %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc3)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc3)
          %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc3)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc3)
          %14 = cir.const #cir.int<35> : !s32i loc(#loc3)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc3)
          %16 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc3)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc3)
          cir.call @__assert_fail(%11, %13, %15, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc3)
        } loc(#loc3)
      } loc(#loc3)
    } loc(#loc3)
    cir.return loc(#loc5)
  } loc(#loc36)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc42)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc19)
    cir.return loc(#loc18)
  } loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc21)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc44)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc27)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc45)
    cir.goto "source" loc(#loc46)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc31)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc32)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc32)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc47)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc21)
    cir.scope {
      cir.scope {
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
        %8 = cir.const #cir.int<5> : !s32i loc(#loc21)
        %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc21)
        cir.if %9 {
        } else {
          %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc21)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc21)
          %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc21)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc21)
          %14 = cir.const #cir.int<53> : !s32i loc(#loc21)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc21)
          %16 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc21)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc21)
          cir.call @__assert_fail(%11, %13, %15, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc21)
        } loc(#loc21)
      } loc(#loc21)
    } loc(#loc21)
    cir.return loc(#loc23)
  } loc(#loc43)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_18.c":0:0)
#loc1 = loc("/usr/include/assert.h":69:1)
#loc2 = loc("/usr/include/assert.h":71:43)
#loc3 = loc("CWE617_Reachable_Assertion__fixed_18.c":35:5)
#loc4 = loc("CWE617_Reachable_Assertion__fixed_18.c":25:1)
#loc5 = loc("CWE617_Reachable_Assertion__fixed_18.c":36:1)
#loc6 = loc("CWE617_Reachable_Assertion__fixed_18.c":27:5)
#loc7 = loc("CWE617_Reachable_Assertion__fixed_18.c":27:9)
#loc8 = loc("CWE617_Reachable_Assertion__fixed_18.c":29:13)
#loc9 = loc("CWE617_Reachable_Assertion__fixed_18.c":29:12)
#loc10 = loc("CWE617_Reachable_Assertion__fixed_18.c":29:5)
#loc11 = loc("CWE617_Reachable_Assertion__fixed_18.c":30:5)
#loc12 = loc("CWE617_Reachable_Assertion__fixed_18.c":30:10)
#loc13 = loc("CWE617_Reachable_Assertion__fixed_18.c":31:1)
#loc14 = loc("CWE617_Reachable_Assertion__fixed_18.c":33:12)
#loc15 = loc("CWE617_Reachable_Assertion__fixed_18.c":33:25)
#loc16 = loc("CWE617_Reachable_Assertion__fixed_18.c":33:5)
#loc17 = loc("CWE617_Reachable_Assertion__fixed_18.c":56:1)
#loc18 = loc("CWE617_Reachable_Assertion__fixed_18.c":59:1)
#loc19 = loc("CWE617_Reachable_Assertion__fixed_18.c":58:5)
#loc20 = loc("CWE617_Reachable_Assertion__fixed_18.c":58:13)
#loc21 = loc("CWE617_Reachable_Assertion__fixed_18.c":53:5)
#loc22 = loc("CWE617_Reachable_Assertion__fixed_18.c":43:1)
#loc23 = loc("CWE617_Reachable_Assertion__fixed_18.c":54:1)
#loc24 = loc("CWE617_Reachable_Assertion__fixed_18.c":45:5)
#loc25 = loc("CWE617_Reachable_Assertion__fixed_18.c":45:9)
#loc26 = loc("CWE617_Reachable_Assertion__fixed_18.c":47:13)
#loc27 = loc("CWE617_Reachable_Assertion__fixed_18.c":47:12)
#loc28 = loc("CWE617_Reachable_Assertion__fixed_18.c":47:5)
#loc29 = loc("CWE617_Reachable_Assertion__fixed_18.c":48:5)
#loc30 = loc("CWE617_Reachable_Assertion__fixed_18.c":48:10)
#loc31 = loc("CWE617_Reachable_Assertion__fixed_18.c":49:1)
#loc32 = loc("CWE617_Reachable_Assertion__fixed_18.c":51:12)
#loc33 = loc("CWE617_Reachable_Assertion__fixed_18.c":51:25)
#loc34 = loc("CWE617_Reachable_Assertion__fixed_18.c":51:5)
#loc35 = loc(fused[#loc1, #loc2])
#loc36 = loc(fused[#loc4, #loc5])
#loc37 = loc(fused[#loc6, #loc7])
#loc38 = loc(fused[#loc10, #loc8])
#loc39 = loc(fused[#loc11, #loc12])
#loc40 = loc(fused[#loc16, #loc15])
#loc41 = loc(fused[#loc17, #loc18])
#loc42 = loc(fused[#loc19, #loc20])
#loc43 = loc(fused[#loc22, #loc23])
#loc44 = loc(fused[#loc24, #loc25])
#loc45 = loc(fused[#loc28, #loc26])
#loc46 = loc(fused[#loc29, #loc30])
#loc47 = loc(fused[#loc34, #loc33])
