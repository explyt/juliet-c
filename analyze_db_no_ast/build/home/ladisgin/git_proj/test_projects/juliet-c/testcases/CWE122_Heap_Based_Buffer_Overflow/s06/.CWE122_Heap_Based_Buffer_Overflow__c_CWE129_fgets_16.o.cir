!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc306)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc307)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc308)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc309)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc310)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc311)
  cir.func private  @printIntLine(!s32i) loc(#loc312)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc16)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc313)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc315)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc24)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc316)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc28)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc28)
        cir.condition(%4) loc(#loc28)
      } do {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc319)
          %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc319)
          cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc319)
          cir.scope {
            %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc35)
            %6 = cir.const #cir.int<3> : !s32i loc(#loc36)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc36)
            %8 = cir.const #cir.int<4> : !u64i loc(#loc36)
            %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc36)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc36)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc36)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc36)
            %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc36)
            %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc307)
            %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc37)
            %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc38)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc39)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc39)
            %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !s32i loc(#loc321)
            %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc40)
            cir.if %20 {
              %21 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc44)
              %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc45)
              cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc323)
            } else {
              %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc48)
            } loc(#loc322)
          } loc(#loc320)
        } loc(#loc318)
        cir.break loc(#loc49)
      } loc(#loc317)
    } loc(#loc317)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc52)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc52)
        cir.condition(%4) loc(#loc52)
      } do {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc326)
          %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc327)
          %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc59)
          %6 = cir.const #cir.int<10> : !s32i loc(#loc60)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc60)
          %8 = cir.const #cir.int<4> : !u64i loc(#loc328)
          %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc329)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc59)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc330)
          cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc327)
          cir.scope {
            %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc65)
            %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc66)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc66)
            %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !s32i loc(#loc332)
            %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc67)
            cir.if %19 {
              %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc69)
              %21 = cir.const #cir.int<1> : !s32i loc(#loc70)
              %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc71)
              cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc69)
            } loc(#loc333)
          } loc(#loc331)
          cir.scope {
            %15 = cir.const #cir.int<0> : !s32i loc(#loc74)
            cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc335)
            cir.for : cond {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc76)
              %17 = cir.const #cir.int<10> : !s32i loc(#loc77)
              %18 = cir.cmp(lt, %16, %17) : !s32i, !s32i loc(#loc336)
              %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc78)
              cir.condition(%19) loc(#loc78)
            } body {
              cir.scope {
                %16 = cir.const #cir.int<0> : !s32i loc(#loc80)
                %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc81)
                %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc82)
                %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc83)
                cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc338)
              } loc(#loc337)
              cir.yield loc(#loc73)
            } step {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc84)
              %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc85)
              cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc339)
              cir.yield loc(#loc334)
            } loc(#loc334)
          } loc(#loc334)
          cir.scope {
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc88)
            %16 = cir.const #cir.int<0> : !s32i loc(#loc89)
            %17 = cir.cmp(ge, %15, %16) : !s32i, !s32i loc(#loc341)
            %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc90)
            cir.if %18 {
              %19 = cir.const #cir.int<1> : !s32i loc(#loc94)
              %20 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
              %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc96)
              %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc97)
              cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc343)
              cir.scope {
                %23 = cir.const #cir.int<0> : !s32i loc(#loc100)
                cir.store %23, %3 : !s32i, !cir.ptr<!s32i> loc(#loc345)
                cir.for : cond {
                  %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc102)
                  %25 = cir.const #cir.int<10> : !s32i loc(#loc103)
                  %26 = cir.cmp(lt, %24, %25) : !s32i, !s32i loc(#loc346)
                  %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc104)
                  cir.condition(%27) loc(#loc104)
                } body {
                  cir.scope {
                    %24 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc106)
                    %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc107)
                    %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc108)
                    %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc106)
                    cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc109)
                  } loc(#loc347)
                  cir.yield loc(#loc99)
                } step {
                  %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc110)
                  %25 = cir.unary(inc, %24) : !s32i, !s32i loc(#loc111)
                  cir.store %25, %3 : !s32i, !cir.ptr<!s32i> loc(#loc348)
                  cir.yield loc(#loc344)
                } loc(#loc344)
              } loc(#loc344)
            } else {
              %19 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc16)
              %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc16)
              cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc112)
            } loc(#loc342)
          } loc(#loc340)
          %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc113)
          %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc114)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc114)
          cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc113)
        } loc(#loc325)
        cir.break loc(#loc115)
      } loc(#loc324)
    } loc(#loc324)
    cir.return loc(#loc20)
  } loc(#loc314)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc350)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc118)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc351)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc120)
    cir.return loc(#loc117)
  } loc(#loc349)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc122)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc353)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc127)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc128)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc354)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc132)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc132)
        cir.condition(%4) loc(#loc132)
      } do {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc357)
          %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc357)
          cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc357)
          cir.scope {
            %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc139)
            %6 = cir.const #cir.int<3> : !s32i loc(#loc140)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc140)
            %8 = cir.const #cir.int<4> : !u64i loc(#loc140)
            %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc140)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc140)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc140)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc140)
            %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc140)
            %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc307)
            %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc141)
            %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc142)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc143)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc143)
            %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !s32i loc(#loc359)
            %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc144)
            cir.if %20 {
              %21 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc148)
              %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc149)
              cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc361)
            } else {
              %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc152)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc152)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc153)
            } loc(#loc360)
          } loc(#loc358)
        } loc(#loc356)
        cir.break loc(#loc154)
      } loc(#loc355)
    } loc(#loc355)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc157)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc157)
        cir.condition(%4) loc(#loc157)
      } do {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc364)
          %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc365)
          %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc164)
          %6 = cir.const #cir.int<10> : !s32i loc(#loc165)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc165)
          %8 = cir.const #cir.int<4> : !u64i loc(#loc366)
          %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc367)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc164)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc368)
          cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc365)
          cir.scope {
            %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc170)
            %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc171)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc171)
            %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !s32i loc(#loc370)
            %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc172)
            cir.if %19 {
              %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc174)
              %21 = cir.const #cir.int<1> : !s32i loc(#loc175)
              %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc176)
              cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc174)
            } loc(#loc371)
          } loc(#loc369)
          cir.scope {
            %15 = cir.const #cir.int<0> : !s32i loc(#loc179)
            cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc373)
            cir.for : cond {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc181)
              %17 = cir.const #cir.int<10> : !s32i loc(#loc182)
              %18 = cir.cmp(lt, %16, %17) : !s32i, !s32i loc(#loc374)
              %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc183)
              cir.condition(%19) loc(#loc183)
            } body {
              cir.scope {
                %16 = cir.const #cir.int<0> : !s32i loc(#loc185)
                %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc186)
                %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc187)
                %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc188)
                cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc376)
              } loc(#loc375)
              cir.yield loc(#loc178)
            } step {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc189)
              %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc190)
              cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc377)
              cir.yield loc(#loc372)
            } loc(#loc372)
          } loc(#loc372)
          cir.scope {
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc193)
            %16 = cir.const #cir.int<0> : !s32i loc(#loc194)
            %17 = cir.cmp(ge, %15, %16) : !s32i, !s32i loc(#loc379)
            %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc195)
            %19 = cir.ternary(%18, true {
              %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc197)
              %21 = cir.const #cir.int<10> : !s32i loc(#loc198)
              %22 = cir.cmp(lt, %20, %21) : !s32i, !s32i loc(#loc380)
              %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc200)
              %24 = cir.ternary(%23, true {
                %25 = cir.const #true loc(#loc196)
                cir.yield %25 : !cir.bool loc(#loc196)
              }, false {
                %25 = cir.const #false loc(#loc196)
                cir.yield %25 : !cir.bool loc(#loc196)
              }) : (!cir.bool) -> !cir.bool loc(#loc196)
              cir.yield %24 : !cir.bool loc(#loc196)
            }, false {
              %20 = cir.const #false loc(#loc196)
              cir.yield %20 : !cir.bool loc(#loc196)
            }) : (!cir.bool) -> !cir.bool loc(#loc196)
            cir.if %19 {
              %20 = cir.const #cir.int<1> : !s32i loc(#loc204)
              %21 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc205)
              %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc206)
              %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc207)
              cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc382)
              cir.scope {
                %24 = cir.const #cir.int<0> : !s32i loc(#loc210)
                cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc384)
                cir.for : cond {
                  %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc212)
                  %26 = cir.const #cir.int<10> : !s32i loc(#loc213)
                  %27 = cir.cmp(lt, %25, %26) : !s32i, !s32i loc(#loc385)
                  %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc214)
                  cir.condition(%28) loc(#loc214)
                } body {
                  cir.scope {
                    %25 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc216)
                    %26 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc217)
                    %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc218)
                    %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc216)
                    cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc219)
                  } loc(#loc386)
                  cir.yield loc(#loc209)
                } step {
                  %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc220)
                  %26 = cir.unary(inc, %25) : !s32i, !s32i loc(#loc221)
                  cir.store %26, %3 : !s32i, !cir.ptr<!s32i> loc(#loc387)
                  cir.yield loc(#loc383)
                } loc(#loc383)
              } loc(#loc383)
            } else {
              %20 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc122)
              %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc122)
              cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc222)
            } loc(#loc381)
          } loc(#loc378)
          %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc223)
          %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc224)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc224)
          cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc223)
        } loc(#loc363)
        cir.break loc(#loc225)
      } loc(#loc362)
    } loc(#loc362)
    cir.return loc(#loc124)
  } loc(#loc352)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc389)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc230)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc231)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc390)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc235)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc235)
        cir.condition(%4) loc(#loc235)
      } do {
        %3 = cir.const #cir.int<7> : !s32i loc(#loc236)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc392)
        cir.break loc(#loc238)
      } loc(#loc391)
    } loc(#loc391)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc241)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc241)
        cir.condition(%4) loc(#loc241)
      } do {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc395)
          %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc396)
          %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc248)
          %6 = cir.const #cir.int<10> : !s32i loc(#loc249)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc249)
          %8 = cir.const #cir.int<4> : !u64i loc(#loc397)
          %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc398)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc248)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc399)
          cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc396)
          cir.scope {
            %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc254)
            %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc255)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc255)
            %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !s32i loc(#loc401)
            %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc256)
            cir.if %19 {
              %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc258)
              %21 = cir.const #cir.int<1> : !s32i loc(#loc259)
              %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc260)
              cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc258)
            } loc(#loc402)
          } loc(#loc400)
          cir.scope {
            %15 = cir.const #cir.int<0> : !s32i loc(#loc263)
            cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc404)
            cir.for : cond {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc265)
              %17 = cir.const #cir.int<10> : !s32i loc(#loc266)
              %18 = cir.cmp(lt, %16, %17) : !s32i, !s32i loc(#loc405)
              %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc267)
              cir.condition(%19) loc(#loc267)
            } body {
              cir.scope {
                %16 = cir.const #cir.int<0> : !s32i loc(#loc269)
                %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc270)
                %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc271)
                %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc272)
                cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc407)
              } loc(#loc406)
              cir.yield loc(#loc262)
            } step {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc273)
              %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc274)
              cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc408)
              cir.yield loc(#loc403)
            } loc(#loc403)
          } loc(#loc403)
          cir.scope {
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc277)
            %16 = cir.const #cir.int<0> : !s32i loc(#loc278)
            %17 = cir.cmp(ge, %15, %16) : !s32i, !s32i loc(#loc410)
            %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc279)
            cir.if %18 {
              %19 = cir.const #cir.int<1> : !s32i loc(#loc283)
              %20 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc284)
              %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc285)
              %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc286)
              cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc412)
              cir.scope {
                %23 = cir.const #cir.int<0> : !s32i loc(#loc289)
                cir.store %23, %3 : !s32i, !cir.ptr<!s32i> loc(#loc414)
                cir.for : cond {
                  %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc291)
                  %25 = cir.const #cir.int<10> : !s32i loc(#loc292)
                  %26 = cir.cmp(lt, %24, %25) : !s32i, !s32i loc(#loc415)
                  %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc293)
                  cir.condition(%27) loc(#loc293)
                } body {
                  cir.scope {
                    %24 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc295)
                    %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc296)
                    %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc297)
                    %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc295)
                    cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc298)
                  } loc(#loc416)
                  cir.yield loc(#loc288)
                } step {
                  %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc299)
                  %25 = cir.unary(inc, %24) : !s32i, !s32i loc(#loc300)
                  cir.store %25, %3 : !s32i, !cir.ptr<!s32i> loc(#loc417)
                  cir.yield loc(#loc413)
                } loc(#loc413)
              } loc(#loc413)
            } else {
              %19 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc301)
              %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc301)
              cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc302)
            } loc(#loc411)
          } loc(#loc409)
          %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc303)
          %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc304)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc304)
          cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc303)
        } loc(#loc394)
        cir.break loc(#loc305)
      } loc(#loc393)
    } loc(#loc393)
    cir.return loc(#loc227)
  } loc(#loc388)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":41:27)
#loc10 = loc("/usr/include/stdlib.h":672:1)
#loc11 = loc("/usr/include/stdlib.h":672:45)
#loc12 = loc("/usr/include/stdlib.h":756:1)
#loc13 = loc("/usr/include/stdlib.h":756:70)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":70:27)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":24:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":76:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":26:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":26:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":28:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":28:12)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":28:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":29:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":45:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":29:11)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":31:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":43:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":32:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":32:49)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":34:13)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":42:13)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":34:23)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":34:36)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":34:53)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":34:17)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":34:63)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":34:60)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":35:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":38:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":40:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":37:29)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":37:24)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":37:17)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":37:40)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":41:17)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":44:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":46:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":75:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":46:11)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":48:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":73:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":49:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":49:17)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":50:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":50:58)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":50:35)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":50:42)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":50:47)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":50:57)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":51:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":51:43)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":51:17)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":51:27)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":51:24)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":51:33)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":51:34)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":51:40)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":51:39)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":53:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":56:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":53:22)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":53:18)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":53:25)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":53:29)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":53:27)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":54:13)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":55:29)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":55:17)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":55:24)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":55:25)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":53:34)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":53:33)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":59:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":71:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":59:17)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":59:25)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":59:22)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":60:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":67:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":69:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":61:32)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":61:17)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":61:24)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":61:28)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":63:17)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":66:17)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":63:25)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":63:21)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":63:28)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":63:32)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":63:30)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":64:17)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":65:34)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":65:41)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":65:42)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":65:21)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":63:37)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":63:36)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":70:17)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":72:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":72:18)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":74:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":181:1)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":185:1)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":183:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":183:13)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":184:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":184:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":128:27)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":83:1)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":134:1)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":85:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":85:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":87:13)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":87:12)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":87:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":88:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":104:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":88:11)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":90:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":102:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":91:13)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":91:49)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":93:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":101:13)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":93:23)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":93:36)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":93:53)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":93:17)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":93:63)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":93:60)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":94:13)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":97:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":99:13)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":96:29)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":96:24)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":96:17)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":96:40)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":100:27)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":100:17)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":103:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":105:5)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":133:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":105:11)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":107:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":131:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":108:13)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":108:17)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":109:13)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":109:58)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":109:35)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":109:42)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":109:47)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":109:57)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":110:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":110:43)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":110:17)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":110:27)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":110:24)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":110:33)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":110:34)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":110:40)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":110:39)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":112:13)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":115:13)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":112:22)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":112:18)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":112:25)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":112:29)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":112:27)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":113:13)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":114:29)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":114:17)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":114:24)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":114:25)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":112:34)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":112:33)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":117:13)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":129:13)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":117:17)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":117:25)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":117:22)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":117:27)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":117:30)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":117:38)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":117:40)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":117:35)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":118:13)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":125:13)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":127:13)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":119:32)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":119:17)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":119:24)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":119:28)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":121:17)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":124:17)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":121:25)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":121:21)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":121:28)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":121:32)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":121:30)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":122:17)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":123:34)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":123:41)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":123:42)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":123:21)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":121:37)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":121:36)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":128:17)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":130:13)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":130:18)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":132:9)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":137:1)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":179:1)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":139:5)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":139:9)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":141:13)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":141:12)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":141:5)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":142:5)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":148:5)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":142:11)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":146:16)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":146:9)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":147:9)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":149:5)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":178:5)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":149:11)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":151:9)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":176:9)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":152:13)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":152:17)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":153:13)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":153:58)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":153:35)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":153:42)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":153:47)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":153:57)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":154:13)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":154:43)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":154:17)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":154:27)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":154:24)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":154:33)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":154:34)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":154:40)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":154:39)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":156:13)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":159:13)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":156:22)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":156:18)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":156:25)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":156:29)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":156:27)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":157:13)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":158:29)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":158:17)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":158:24)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":158:25)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":156:34)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":156:33)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":162:13)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":174:13)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":162:17)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":162:25)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":162:22)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":163:13)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":170:13)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":172:13)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":164:32)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":164:17)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":164:24)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":164:28)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":166:17)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":169:17)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":166:25)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":166:21)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":166:28)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":166:32)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":166:30)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":167:17)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":168:34)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":168:41)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":168:42)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":168:21)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":166:37)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":166:36)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":173:27)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":173:17)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":175:13)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":175:18)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c":177:9)
#loc306 = loc(fused[#loc1, #loc2])
#loc307 = loc(fused[#loc3, #loc4])
#loc308 = loc(fused[#loc5, #loc6])
#loc309 = loc(fused[#loc7, #loc8])
#loc310 = loc(fused[#loc10, #loc11])
#loc311 = loc(fused[#loc12, #loc13])
#loc312 = loc(fused[#loc14, #loc15])
#loc313 = loc(fused[#loc17, #loc18])
#loc314 = loc(fused[#loc19, #loc20])
#loc315 = loc(fused[#loc21, #loc22])
#loc316 = loc(fused[#loc25, #loc23])
#loc317 = loc(fused[#loc26, #loc27])
#loc318 = loc(fused[#loc29, #loc30])
#loc319 = loc(fused[#loc31, #loc32])
#loc320 = loc(fused[#loc33, #loc34])
#loc321 = loc(fused[#loc38, #loc39])
#loc322 = loc(fused[#loc41, #loc42, #loc43, #loc34])
#loc323 = loc(fused[#loc46, #loc47])
#loc324 = loc(fused[#loc50, #loc51])
#loc325 = loc(fused[#loc53, #loc54])
#loc326 = loc(fused[#loc55, #loc56])
#loc327 = loc(fused[#loc57, #loc58])
#loc328 = loc(fused[#loc61, #loc62])
#loc329 = loc(fused[#loc60, #loc62])
#loc330 = loc(fused[#loc59, #loc58])
#loc331 = loc(fused[#loc63, #loc64])
#loc332 = loc(fused[#loc65, #loc66])
#loc333 = loc(fused[#loc68, #loc64])
#loc334 = loc(fused[#loc72, #loc73])
#loc335 = loc(fused[#loc75, #loc74])
#loc336 = loc(fused[#loc76, #loc77])
#loc337 = loc(fused[#loc79, #loc73])
#loc338 = loc(fused[#loc81, #loc80])
#loc339 = loc(fused[#loc85, #loc84])
#loc340 = loc(fused[#loc86, #loc87])
#loc341 = loc(fused[#loc88, #loc89])
#loc342 = loc(fused[#loc91, #loc92, #loc93, #loc87])
#loc343 = loc(fused[#loc95, #loc94])
#loc344 = loc(fused[#loc98, #loc99])
#loc345 = loc(fused[#loc101, #loc100])
#loc346 = loc(fused[#loc102, #loc103])
#loc347 = loc(fused[#loc105, #loc99])
#loc348 = loc(fused[#loc111, #loc110])
#loc349 = loc(fused[#loc116, #loc117])
#loc350 = loc(fused[#loc118, #loc119])
#loc351 = loc(fused[#loc120, #loc121])
#loc352 = loc(fused[#loc123, #loc124])
#loc353 = loc(fused[#loc125, #loc126])
#loc354 = loc(fused[#loc129, #loc127])
#loc355 = loc(fused[#loc130, #loc131])
#loc356 = loc(fused[#loc133, #loc134])
#loc357 = loc(fused[#loc135, #loc136])
#loc358 = loc(fused[#loc137, #loc138])
#loc359 = loc(fused[#loc142, #loc143])
#loc360 = loc(fused[#loc145, #loc146, #loc147, #loc138])
#loc361 = loc(fused[#loc150, #loc151])
#loc362 = loc(fused[#loc155, #loc156])
#loc363 = loc(fused[#loc158, #loc159])
#loc364 = loc(fused[#loc160, #loc161])
#loc365 = loc(fused[#loc162, #loc163])
#loc366 = loc(fused[#loc166, #loc167])
#loc367 = loc(fused[#loc165, #loc167])
#loc368 = loc(fused[#loc164, #loc163])
#loc369 = loc(fused[#loc168, #loc169])
#loc370 = loc(fused[#loc170, #loc171])
#loc371 = loc(fused[#loc173, #loc169])
#loc372 = loc(fused[#loc177, #loc178])
#loc373 = loc(fused[#loc180, #loc179])
#loc374 = loc(fused[#loc181, #loc182])
#loc375 = loc(fused[#loc184, #loc178])
#loc376 = loc(fused[#loc186, #loc185])
#loc377 = loc(fused[#loc190, #loc189])
#loc378 = loc(fused[#loc191, #loc192])
#loc379 = loc(fused[#loc193, #loc194])
#loc380 = loc(fused[#loc197, #loc199])
#loc381 = loc(fused[#loc201, #loc202, #loc203, #loc192])
#loc382 = loc(fused[#loc205, #loc204])
#loc383 = loc(fused[#loc208, #loc209])
#loc384 = loc(fused[#loc211, #loc210])
#loc385 = loc(fused[#loc212, #loc213])
#loc386 = loc(fused[#loc215, #loc209])
#loc387 = loc(fused[#loc221, #loc220])
#loc388 = loc(fused[#loc226, #loc227])
#loc389 = loc(fused[#loc228, #loc229])
#loc390 = loc(fused[#loc232, #loc230])
#loc391 = loc(fused[#loc233, #loc234])
#loc392 = loc(fused[#loc237, #loc236])
#loc393 = loc(fused[#loc239, #loc240])
#loc394 = loc(fused[#loc242, #loc243])
#loc395 = loc(fused[#loc244, #loc245])
#loc396 = loc(fused[#loc246, #loc247])
#loc397 = loc(fused[#loc250, #loc251])
#loc398 = loc(fused[#loc249, #loc251])
#loc399 = loc(fused[#loc248, #loc247])
#loc400 = loc(fused[#loc252, #loc253])
#loc401 = loc(fused[#loc254, #loc255])
#loc402 = loc(fused[#loc257, #loc253])
#loc403 = loc(fused[#loc261, #loc262])
#loc404 = loc(fused[#loc264, #loc263])
#loc405 = loc(fused[#loc265, #loc266])
#loc406 = loc(fused[#loc268, #loc262])
#loc407 = loc(fused[#loc270, #loc269])
#loc408 = loc(fused[#loc274, #loc273])
#loc409 = loc(fused[#loc275, #loc276])
#loc410 = loc(fused[#loc277, #loc278])
#loc411 = loc(fused[#loc280, #loc281, #loc282, #loc276])
#loc412 = loc(fused[#loc284, #loc283])
#loc413 = loc(fused[#loc287, #loc288])
#loc414 = loc(fused[#loc290, #loc289])
#loc415 = loc(fused[#loc291, #loc292])
#loc416 = loc(fused[#loc294, #loc288])
#loc417 = loc(fused[#loc300, #loc299])
