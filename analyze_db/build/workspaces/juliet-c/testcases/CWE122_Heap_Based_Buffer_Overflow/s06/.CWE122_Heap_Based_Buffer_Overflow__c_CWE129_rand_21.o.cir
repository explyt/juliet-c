!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":25:21)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":25:25)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":64:12)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":79:26)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":79:30)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":98:27)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":122:12)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":128:26)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":128:30)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":142:27)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":166:12)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":172:25)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":172:29)
#true = #cir.bool<true> : !cir.bool
#loc381 = loc(fused[#loc18, #loc19])
#loc419 = loc(fused[#loc112, #loc113])
#loc454 = loc(fused[#loc203, #loc204])
#loc489 = loc(fused[#loc292, #loc293])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc373)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc374)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc375)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc376)
  cir.func private @printIntLine(!s32i) loc(#loc377)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc378)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc13)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc379)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc18, #loc19])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc382)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc383)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc381)
    cir.store %arg0, %2 : !s32i, !cir.ptr<!s32i> loc(#loc24)
    cir.br ^bb1 loc(#loc384)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc374)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc27)
    cir.brcond %5 ^bb2, ^bb30 loc(#loc385)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc386)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc31)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc32)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc32)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc387)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc388)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc31)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc389)
    cir.store %12, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc383)
    cir.br ^bb4 loc(#loc390)
  ^bb4:  // pred: ^bb3
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc37)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc38)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc38)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc391)
    cir.brcond %16 ^bb5, ^bb6 loc(#loc392)
  ^bb5:  // pred: ^bb4
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc40)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc42)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc40)
    cir.br ^bb6 loc(#loc36)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc36)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc393)
  ^bb8:  // pred: ^bb7
    %20 = cir.const #cir.int<0> : !s32i loc(#loc45)
    cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc394)
    cir.br ^bb9 loc(#loc393)
  ^bb9:  // 2 preds: ^bb8, ^bb13
    %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    %22 = cir.const #cir.int<10> : !s32i loc(#loc48)
    %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc395)
    cir.brcond %23 ^bb10, ^bb14 loc(#loc49)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc396)
  ^bb11:  // pred: ^bb10
    %24 = cir.const #cir.int<0> : !s32i loc(#loc51)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc52)
    %26 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc54)
    cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc397)
    cir.br ^bb12 loc(#loc44)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc44)
  ^bb13:  // pred: ^bb12
    %28 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    %29 = cir.unary(inc, %28) nsw : !s32i, !s32i loc(#loc56)
    cir.store %29, %0 : !s32i, !cir.ptr<!s32i> loc(#loc398)
    cir.br ^bb9 loc(#loc393)
  ^bb14:  // pred: ^bb9
    cir.br ^bb15 loc(#loc44)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc399)
  ^bb16:  // pred: ^bb15
    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc60)
    %32 = cir.cmp(ge, %30, %31) : !s32i, !cir.bool loc(#loc400)
    cir.brcond %32 ^bb17, ^bb26 loc(#loc401)
  ^bb17:  // pred: ^bb16
    %33 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc65)
    %35 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    %36 = cir.ptr_stride(%34 : !cir.ptr<!s32i>, %35 : !s32i), !cir.ptr<!s32i> loc(#loc67)
    cir.store %33, %36 : !s32i, !cir.ptr<!s32i> loc(#loc402)
    cir.br ^bb18 loc(#loc403)
  ^bb18:  // pred: ^bb17
    %37 = cir.const #cir.int<0> : !s32i loc(#loc70)
    cir.store %37, %0 : !s32i, !cir.ptr<!s32i> loc(#loc404)
    cir.br ^bb19 loc(#loc403)
  ^bb19:  // 2 preds: ^bb18, ^bb23
    %38 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
    %39 = cir.const #cir.int<10> : !s32i loc(#loc73)
    %40 = cir.cmp(lt, %38, %39) : !s32i, !cir.bool loc(#loc405)
    cir.brcond %40 ^bb20, ^bb24 loc(#loc74)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc406)
  ^bb21:  // pred: ^bb20
    %41 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc76)
    %42 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc77)
    %43 = cir.ptr_stride(%41 : !cir.ptr<!s32i>, %42 : !s32i), !cir.ptr<!s32i> loc(#loc78)
    %44 = cir.load %43 : !cir.ptr<!s32i>, !s32i loc(#loc76)
    cir.call @printIntLine(%44) : (!s32i) -> () loc(#loc79)
    cir.br ^bb22 loc(#loc69)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc69)
  ^bb23:  // pred: ^bb22
    %45 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
    %46 = cir.unary(inc, %45) nsw : !s32i, !s32i loc(#loc81)
    cir.store %46, %0 : !s32i, !cir.ptr<!s32i> loc(#loc407)
    cir.br ^bb19 loc(#loc403)
  ^bb24:  // pred: ^bb19
    cir.br ^bb25 loc(#loc69)
  ^bb25:  // pred: ^bb24
    cir.br ^bb27 loc(#loc62)
  ^bb26:  // pred: ^bb16
    %47 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc13)
    %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc13)
    cir.call @printLine(%48) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    cir.br ^bb27 loc(#loc58)
  ^bb27:  // 2 preds: ^bb25, ^bb26
    cir.br ^bb28 loc(#loc58)
  ^bb28:  // pred: ^bb27
    %49 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc83)
    %50 = cir.cast(bitcast, %49 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc83)
    cir.call @free(%50) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc84)
    cir.br ^bb29 loc(#loc30)
  ^bb29:  // pred: ^bb28
    cir.br ^bb30 loc(#loc26)
  ^bb30:  // 2 preds: ^bb1, ^bb29
    cir.br ^bb31 loc(#loc26)
  ^bb31:  // pred: ^bb30
    cir.return loc(#loc17)
  } loc(#loc380)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc409)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc89)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc90)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc410)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc92)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc92)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc92)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc92)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc92)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc92)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc92)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc92)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc92)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc92)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc92)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc92)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc92)
    cir.br ^bb3(%18 : !u32i) loc(#loc92)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc92)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc92)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc92)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc92)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc92)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc92)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc92)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc92)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc92)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc92)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc92)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc92)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc92)
    cir.br ^bb3(%34 : !u32i) loc(#loc92)
  ^bb3(%35: !u32i loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":64:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc92)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc92)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc411)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc94)
    %38 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc374)
    cir.store %37, %38 : !s32i, !cir.ptr<!s32i> loc(#loc412)
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc96)
    cir.call @badSink(%39) : (!s32i) -> () loc(#loc97)
    cir.return loc(#loc86)
  } loc(#loc408)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc414)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc100)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc415)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc102)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc416)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc104)
    cir.return loc(#loc99)
  } loc(#loc413)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc417)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc108)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc109)
  cir.func internal private @goodB2G1Sink(%arg0: !s32i loc(fused[#loc112, #loc113])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc420)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc421)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc419)
    cir.store %arg0, %2 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    cir.br ^bb1 loc(#loc422)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc417)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc121)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc423)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc108)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc108)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc125)
    cir.br ^bb39 loc(#loc123)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc424)
  ^bb4:  // pred: ^bb3
    %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc128)
    %9 = cir.const #cir.int<10> : !s32i loc(#loc129)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc129)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc425)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc426)
    %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc128)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc427)
    cir.store %14, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc421)
    cir.br ^bb5 loc(#loc428)
  ^bb5:  // pred: ^bb4
    %15 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc134)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc135)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc135)
    %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc429)
    cir.brcond %18 ^bb6, ^bb7 loc(#loc430)
  ^bb6:  // pred: ^bb5
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc137)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc138)
    %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc139)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc137)
    cir.br ^bb7 loc(#loc133)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc133)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc431)
  ^bb9:  // pred: ^bb8
    %22 = cir.const #cir.int<0> : !s32i loc(#loc142)
    cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc432)
    cir.br ^bb10 loc(#loc431)
  ^bb10:  // 2 preds: ^bb9, ^bb14
    %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc144)
    %24 = cir.const #cir.int<10> : !s32i loc(#loc145)
    %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc433)
    cir.brcond %25 ^bb11, ^bb15 loc(#loc146)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc434)
  ^bb12:  // pred: ^bb11
    %26 = cir.const #cir.int<0> : !s32i loc(#loc148)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc149)
    %28 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc150)
    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc151)
    cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc435)
    cir.br ^bb13 loc(#loc141)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc141)
  ^bb14:  // pred: ^bb13
    %30 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc152)
    %31 = cir.unary(inc, %30) nsw : !s32i, !s32i loc(#loc153)
    cir.store %31, %0 : !s32i, !cir.ptr<!s32i> loc(#loc436)
    cir.br ^bb10 loc(#loc431)
  ^bb15:  // pred: ^bb10
    cir.br ^bb16 loc(#loc141)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc437)
  ^bb17:  // pred: ^bb16
    %32 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc156)
    %33 = cir.const #cir.int<0> : !s32i loc(#loc157)
    %34 = cir.cmp(ge, %32, %33) : !s32i, !cir.bool loc(#loc438)
    cir.brcond %34 ^bb18, ^bb23 loc(#loc158)
  ^bb18:  // pred: ^bb17
    %35 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc159)
    %36 = cir.const #cir.int<10> : !s32i loc(#loc160)
    %37 = cir.cmp(lt, %35, %36) : !s32i, !cir.bool loc(#loc439)
    cir.brcond %37 ^bb19, ^bb20 loc(#loc158)
  ^bb19:  // pred: ^bb18
    %38 = cir.const #true loc(#loc158)
    cir.br ^bb21(%38 : !cir.bool) loc(#loc158)
  ^bb20:  // pred: ^bb18
    %39 = cir.const #false loc(#loc158)
    cir.br ^bb21(%39 : !cir.bool) loc(#loc158)
  ^bb21(%40: !cir.bool loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":98:27)):  // 2 preds: ^bb19, ^bb20
    cir.br ^bb22 loc(#loc158)
  ^bb22:  // pred: ^bb21
    cir.br ^bb24(%40 : !cir.bool) loc(#loc158)
  ^bb23:  // pred: ^bb17
    %41 = cir.const #false loc(#loc158)
    cir.br ^bb24(%41 : !cir.bool) loc(#loc158)
  ^bb24(%42: !cir.bool loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":98:27)):  // 2 preds: ^bb22, ^bb23
    cir.br ^bb25 loc(#loc158)
  ^bb25:  // pred: ^bb24
    cir.brcond %42 ^bb26, ^bb35 loc(#loc440)
  ^bb26:  // pred: ^bb25
    %43 = cir.const #cir.int<1> : !s32i loc(#loc165)
    %44 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc166)
    %45 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc167)
    %46 = cir.ptr_stride(%44 : !cir.ptr<!s32i>, %45 : !s32i), !cir.ptr<!s32i> loc(#loc168)
    cir.store %43, %46 : !s32i, !cir.ptr<!s32i> loc(#loc441)
    cir.br ^bb27 loc(#loc442)
  ^bb27:  // pred: ^bb26
    %47 = cir.const #cir.int<0> : !s32i loc(#loc171)
    cir.store %47, %0 : !s32i, !cir.ptr<!s32i> loc(#loc443)
    cir.br ^bb28 loc(#loc442)
  ^bb28:  // 2 preds: ^bb27, ^bb32
    %48 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc173)
    %49 = cir.const #cir.int<10> : !s32i loc(#loc174)
    %50 = cir.cmp(lt, %48, %49) : !s32i, !cir.bool loc(#loc444)
    cir.brcond %50 ^bb29, ^bb33 loc(#loc175)
  ^bb29:  // pred: ^bb28
    cir.br ^bb30 loc(#loc445)
  ^bb30:  // pred: ^bb29
    %51 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc177)
    %52 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc178)
    %53 = cir.ptr_stride(%51 : !cir.ptr<!s32i>, %52 : !s32i), !cir.ptr<!s32i> loc(#loc179)
    %54 = cir.load %53 : !cir.ptr<!s32i>, !s32i loc(#loc177)
    cir.call @printIntLine(%54) : (!s32i) -> () loc(#loc180)
    cir.br ^bb31 loc(#loc170)
  ^bb31:  // pred: ^bb30
    cir.br ^bb32 loc(#loc170)
  ^bb32:  // pred: ^bb31
    %55 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc181)
    %56 = cir.unary(inc, %55) nsw : !s32i, !s32i loc(#loc182)
    cir.store %56, %0 : !s32i, !cir.ptr<!s32i> loc(#loc446)
    cir.br ^bb28 loc(#loc442)
  ^bb33:  // pred: ^bb28
    cir.br ^bb34 loc(#loc170)
  ^bb34:  // pred: ^bb33
    cir.br ^bb36 loc(#loc163)
  ^bb35:  // pred: ^bb25
    %57 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc109)
    %58 = cir.cast(array_to_ptrdecay, %57 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc109)
    cir.call @printLine(%58) : (!cir.ptr<!s8i>) -> () loc(#loc183)
    cir.br ^bb36 loc(#loc155)
  ^bb36:  // 2 preds: ^bb34, ^bb35
    cir.br ^bb37 loc(#loc155)
  ^bb37:  // pred: ^bb36
    %59 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc184)
    %60 = cir.cast(bitcast, %59 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc184)
    cir.call @free(%60) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc185)
    cir.br ^bb38 loc(#loc127)
  ^bb38:  // pred: ^bb37
    cir.br ^bb39 loc(#loc120)
  ^bb39:  // 2 preds: ^bb2, ^bb38
    cir.br ^bb40 loc(#loc120)
  ^bb40:  // pred: ^bb39
    cir.return loc(#loc111)
  } loc(#loc418)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc448)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc190)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc191)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc449)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc193)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc193)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc193)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc193)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc193)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc193)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc193)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc193)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc193)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc193)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc193)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc193)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc193)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc193)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc193)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc193)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc193)
    cir.br ^bb3(%18 : !u32i) loc(#loc193)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc193)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc193)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc193)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc193)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc193)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc193)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc193)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc193)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc193)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc193)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc193)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc193)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc193)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc193)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc193)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc193)
    cir.br ^bb3(%34 : !u32i) loc(#loc193)
  ^bb3(%35: !u32i loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":122:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc193)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc193)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc450)
    %37 = cir.const #cir.int<0> : !s32i loc(#loc195)
    %38 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc417)
    cir.store %37, %38 : !s32i, !cir.ptr<!s32i> loc(#loc451)
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc197)
    cir.call @goodB2G1Sink(%39) : (!s32i) -> () loc(#loc198)
    cir.return loc(#loc187)
  } loc(#loc447)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc452)
  cir.func internal private @goodB2G2Sink(%arg0: !s32i loc(fused[#loc203, #loc204])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc455)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc456)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc454)
    cir.store %arg0, %2 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    cir.br ^bb1 loc(#loc457)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc452)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc212)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc212)
    cir.brcond %5 ^bb2, ^bb38 loc(#loc458)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc459)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc216)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc217)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc217)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc460)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc461)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc216)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc462)
    cir.store %12, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc456)
    cir.br ^bb4 loc(#loc463)
  ^bb4:  // pred: ^bb3
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc222)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc223)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc223)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc464)
    cir.brcond %16 ^bb5, ^bb6 loc(#loc465)
  ^bb5:  // pred: ^bb4
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc225)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc226)
    %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc227)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc225)
    cir.br ^bb6 loc(#loc221)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc221)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc466)
  ^bb8:  // pred: ^bb7
    %20 = cir.const #cir.int<0> : !s32i loc(#loc230)
    cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc467)
    cir.br ^bb9 loc(#loc466)
  ^bb9:  // 2 preds: ^bb8, ^bb13
    %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc232)
    %22 = cir.const #cir.int<10> : !s32i loc(#loc233)
    %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc468)
    cir.brcond %23 ^bb10, ^bb14 loc(#loc234)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc469)
  ^bb11:  // pred: ^bb10
    %24 = cir.const #cir.int<0> : !s32i loc(#loc236)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc237)
    %26 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc238)
    %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc239)
    cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc470)
    cir.br ^bb12 loc(#loc229)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc229)
  ^bb13:  // pred: ^bb12
    %28 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc240)
    %29 = cir.unary(inc, %28) nsw : !s32i, !s32i loc(#loc241)
    cir.store %29, %0 : !s32i, !cir.ptr<!s32i> loc(#loc471)
    cir.br ^bb9 loc(#loc466)
  ^bb14:  // pred: ^bb9
    cir.br ^bb15 loc(#loc229)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc472)
  ^bb16:  // pred: ^bb15
    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc244)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc245)
    %32 = cir.cmp(ge, %30, %31) : !s32i, !cir.bool loc(#loc473)
    cir.brcond %32 ^bb17, ^bb22 loc(#loc246)
  ^bb17:  // pred: ^bb16
    %33 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc247)
    %34 = cir.const #cir.int<10> : !s32i loc(#loc248)
    %35 = cir.cmp(lt, %33, %34) : !s32i, !cir.bool loc(#loc474)
    cir.brcond %35 ^bb18, ^bb19 loc(#loc246)
  ^bb18:  // pred: ^bb17
    %36 = cir.const #true loc(#loc246)
    cir.br ^bb20(%36 : !cir.bool) loc(#loc246)
  ^bb19:  // pred: ^bb17
    %37 = cir.const #false loc(#loc246)
    cir.br ^bb20(%37 : !cir.bool) loc(#loc246)
  ^bb20(%38: !cir.bool loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":142:27)):  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc246)
  ^bb21:  // pred: ^bb20
    cir.br ^bb23(%38 : !cir.bool) loc(#loc246)
  ^bb22:  // pred: ^bb16
    %39 = cir.const #false loc(#loc246)
    cir.br ^bb23(%39 : !cir.bool) loc(#loc246)
  ^bb23(%40: !cir.bool loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":142:27)):  // 2 preds: ^bb21, ^bb22
    cir.br ^bb24 loc(#loc246)
  ^bb24:  // pred: ^bb23
    cir.brcond %40 ^bb25, ^bb34 loc(#loc475)
  ^bb25:  // pred: ^bb24
    %41 = cir.const #cir.int<1> : !s32i loc(#loc253)
    %42 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc254)
    %43 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc255)
    %44 = cir.ptr_stride(%42 : !cir.ptr<!s32i>, %43 : !s32i), !cir.ptr<!s32i> loc(#loc256)
    cir.store %41, %44 : !s32i, !cir.ptr<!s32i> loc(#loc476)
    cir.br ^bb26 loc(#loc477)
  ^bb26:  // pred: ^bb25
    %45 = cir.const #cir.int<0> : !s32i loc(#loc259)
    cir.store %45, %0 : !s32i, !cir.ptr<!s32i> loc(#loc478)
    cir.br ^bb27 loc(#loc477)
  ^bb27:  // 2 preds: ^bb26, ^bb31
    %46 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc261)
    %47 = cir.const #cir.int<10> : !s32i loc(#loc262)
    %48 = cir.cmp(lt, %46, %47) : !s32i, !cir.bool loc(#loc479)
    cir.brcond %48 ^bb28, ^bb32 loc(#loc263)
  ^bb28:  // pred: ^bb27
    cir.br ^bb29 loc(#loc480)
  ^bb29:  // pred: ^bb28
    %49 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc265)
    %50 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc266)
    %51 = cir.ptr_stride(%49 : !cir.ptr<!s32i>, %50 : !s32i), !cir.ptr<!s32i> loc(#loc267)
    %52 = cir.load %51 : !cir.ptr<!s32i>, !s32i loc(#loc265)
    cir.call @printIntLine(%52) : (!s32i) -> () loc(#loc268)
    cir.br ^bb30 loc(#loc258)
  ^bb30:  // pred: ^bb29
    cir.br ^bb31 loc(#loc258)
  ^bb31:  // pred: ^bb30
    %53 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc269)
    %54 = cir.unary(inc, %53) nsw : !s32i, !s32i loc(#loc270)
    cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc481)
    cir.br ^bb27 loc(#loc477)
  ^bb32:  // pred: ^bb27
    cir.br ^bb33 loc(#loc258)
  ^bb33:  // pred: ^bb32
    cir.br ^bb35 loc(#loc251)
  ^bb34:  // pred: ^bb24
    %55 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc271)
    %56 = cir.cast(array_to_ptrdecay, %55 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc271)
    cir.call @printLine(%56) : (!cir.ptr<!s8i>) -> () loc(#loc272)
    cir.br ^bb35 loc(#loc243)
  ^bb35:  // 2 preds: ^bb33, ^bb34
    cir.br ^bb36 loc(#loc243)
  ^bb36:  // pred: ^bb35
    %57 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc273)
    %58 = cir.cast(bitcast, %57 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc273)
    cir.call @free(%58) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc274)
    cir.br ^bb37 loc(#loc215)
  ^bb37:  // pred: ^bb36
    cir.br ^bb38 loc(#loc211)
  ^bb38:  // 2 preds: ^bb1, ^bb37
    cir.br ^bb39 loc(#loc211)
  ^bb39:  // pred: ^bb38
    cir.return loc(#loc202)
  } loc(#loc453)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc483)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc279)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc280)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc484)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc282)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc282)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc282)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc282)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc282)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc282)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc282)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc282)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc282)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc282)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc282)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc282)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc282)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc282)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc282)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc282)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc282)
    cir.br ^bb3(%18 : !u32i) loc(#loc282)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc282)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc282)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc282)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc282)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc282)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc282)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc282)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc282)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc282)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc282)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc282)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc282)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc282)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc282)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc282)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc282)
    cir.br ^bb3(%34 : !u32i) loc(#loc282)
  ^bb3(%35: !u32i loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":166:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc282)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc282)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc485)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc284)
    %38 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc452)
    cir.store %37, %38 : !s32i, !cir.ptr<!s32i> loc(#loc486)
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc286)
    cir.call @goodB2G2Sink(%39) : (!s32i) -> () loc(#loc287)
    cir.return loc(#loc276)
  } loc(#loc482)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc487)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc292, #loc293])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc490)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc491)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc489)
    cir.store %arg0, %2 : !s32i, !cir.ptr<!s32i> loc(#loc298)
    cir.br ^bb1 loc(#loc492)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc487)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc301)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc301)
    cir.brcond %5 ^bb2, ^bb30 loc(#loc493)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc494)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc305)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc306)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc306)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc495)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc496)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc305)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc497)
    cir.store %12, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc491)
    cir.br ^bb4 loc(#loc498)
  ^bb4:  // pred: ^bb3
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc311)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc312)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc312)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc499)
    cir.brcond %16 ^bb5, ^bb6 loc(#loc500)
  ^bb5:  // pred: ^bb4
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc314)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc315)
    %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc316)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc314)
    cir.br ^bb6 loc(#loc310)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc310)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc501)
  ^bb8:  // pred: ^bb7
    %20 = cir.const #cir.int<0> : !s32i loc(#loc319)
    cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc502)
    cir.br ^bb9 loc(#loc501)
  ^bb9:  // 2 preds: ^bb8, ^bb13
    %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc321)
    %22 = cir.const #cir.int<10> : !s32i loc(#loc322)
    %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc503)
    cir.brcond %23 ^bb10, ^bb14 loc(#loc323)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc504)
  ^bb11:  // pred: ^bb10
    %24 = cir.const #cir.int<0> : !s32i loc(#loc325)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc326)
    %26 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc327)
    %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc328)
    cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc505)
    cir.br ^bb12 loc(#loc318)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc318)
  ^bb13:  // pred: ^bb12
    %28 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc329)
    %29 = cir.unary(inc, %28) nsw : !s32i, !s32i loc(#loc330)
    cir.store %29, %0 : !s32i, !cir.ptr<!s32i> loc(#loc506)
    cir.br ^bb9 loc(#loc501)
  ^bb14:  // pred: ^bb9
    cir.br ^bb15 loc(#loc318)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc507)
  ^bb16:  // pred: ^bb15
    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc333)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc334)
    %32 = cir.cmp(ge, %30, %31) : !s32i, !cir.bool loc(#loc508)
    cir.brcond %32 ^bb17, ^bb26 loc(#loc509)
  ^bb17:  // pred: ^bb16
    %33 = cir.const #cir.int<1> : !s32i loc(#loc338)
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc339)
    %35 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc340)
    %36 = cir.ptr_stride(%34 : !cir.ptr<!s32i>, %35 : !s32i), !cir.ptr<!s32i> loc(#loc341)
    cir.store %33, %36 : !s32i, !cir.ptr<!s32i> loc(#loc510)
    cir.br ^bb18 loc(#loc511)
  ^bb18:  // pred: ^bb17
    %37 = cir.const #cir.int<0> : !s32i loc(#loc344)
    cir.store %37, %0 : !s32i, !cir.ptr<!s32i> loc(#loc512)
    cir.br ^bb19 loc(#loc511)
  ^bb19:  // 2 preds: ^bb18, ^bb23
    %38 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc346)
    %39 = cir.const #cir.int<10> : !s32i loc(#loc347)
    %40 = cir.cmp(lt, %38, %39) : !s32i, !cir.bool loc(#loc513)
    cir.brcond %40 ^bb20, ^bb24 loc(#loc348)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc514)
  ^bb21:  // pred: ^bb20
    %41 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc350)
    %42 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc351)
    %43 = cir.ptr_stride(%41 : !cir.ptr<!s32i>, %42 : !s32i), !cir.ptr<!s32i> loc(#loc352)
    %44 = cir.load %43 : !cir.ptr<!s32i>, !s32i loc(#loc350)
    cir.call @printIntLine(%44) : (!s32i) -> () loc(#loc353)
    cir.br ^bb22 loc(#loc343)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc343)
  ^bb23:  // pred: ^bb22
    %45 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc354)
    %46 = cir.unary(inc, %45) nsw : !s32i, !s32i loc(#loc355)
    cir.store %46, %0 : !s32i, !cir.ptr<!s32i> loc(#loc515)
    cir.br ^bb19 loc(#loc511)
  ^bb24:  // pred: ^bb19
    cir.br ^bb25 loc(#loc343)
  ^bb25:  // pred: ^bb24
    cir.br ^bb27 loc(#loc336)
  ^bb26:  // pred: ^bb16
    %47 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc356)
    %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc356)
    cir.call @printLine(%48) : (!cir.ptr<!s8i>) -> () loc(#loc357)
    cir.br ^bb27 loc(#loc332)
  ^bb27:  // 2 preds: ^bb25, ^bb26
    cir.br ^bb28 loc(#loc332)
  ^bb28:  // pred: ^bb27
    %49 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc358)
    %50 = cir.cast(bitcast, %49 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc358)
    cir.call @free(%50) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc359)
    cir.br ^bb29 loc(#loc304)
  ^bb29:  // pred: ^bb28
    cir.br ^bb30 loc(#loc300)
  ^bb30:  // 2 preds: ^bb1, ^bb29
    cir.br ^bb31 loc(#loc300)
  ^bb31:  // pred: ^bb30
    cir.return loc(#loc291)
  } loc(#loc488)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc517)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc364)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc365)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc518)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc367)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc519)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc369)
    %5 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc487)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc520)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc371)
    cir.call @goodG2BSink(%6) : (!s32i) -> () loc(#loc372)
    cir.return loc(#loc361)
  } loc(#loc516)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":23:1)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":23:24)
#loc5 = loc("/usr/include/stdlib.h":672:1)
#loc6 = loc("/usr/include/stdlib.h":672:45)
#loc7 = loc("/usr/include/stdlib.h":756:1)
#loc8 = loc("/usr/include/stdlib.h":756:70)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":51:27)
#loc14 = loc("/usr/include/stdlib.h":687:1)
#loc15 = loc("/usr/include/stdlib.h":687:32)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":25:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":56:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":30:13)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":30:17)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":31:13)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":31:58)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":26:1)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":27:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":55:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":27:8)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":28:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":29:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":54:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":31:35)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":31:42)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":31:47)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":31:57)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":32:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":32:43)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":32:17)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":32:27)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":32:33)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":32:34)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":32:40)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":32:39)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":34:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":37:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":34:22)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":34:18)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":34:25)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":34:29)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":34:27)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":35:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":36:29)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":36:17)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":36:24)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":36:25)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":34:34)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":34:33)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":40:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":52:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":40:17)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":40:25)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":41:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":48:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":50:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":42:32)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":42:17)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":42:24)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":42:28)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":44:17)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":47:17)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":44:25)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":44:21)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":44:28)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":44:32)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":44:30)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":45:17)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":46:34)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":46:41)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":46:42)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":46:21)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":44:37)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":44:36)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":51:17)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":53:18)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":53:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":58:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":67:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":60:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":60:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":62:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":62:12)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":62:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":64:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":65:17)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":65:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":66:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":66:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":217:1)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":222:1)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":219:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":219:14)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":220:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":220:14)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":221:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":221:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":74:1)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":74:29)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":84:19)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":109:27)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":79:1)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":114:1)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":89:13)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":89:17)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":90:13)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":90:58)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":80:1)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":81:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":113:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":81:8)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":82:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":85:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":87:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":84:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":88:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":112:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":90:35)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":90:42)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":90:47)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":90:57)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":91:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":91:43)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":91:17)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":91:27)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":91:33)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":91:34)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":91:40)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":91:39)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":93:13)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":96:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":93:22)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":93:18)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":93:25)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":93:29)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":93:27)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":94:13)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":95:29)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":95:17)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":95:24)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":95:25)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":93:34)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":93:33)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":98:13)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":110:13)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":98:17)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":98:25)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":98:30)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":98:38)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":98:40)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":99:13)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":106:13)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":108:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":100:32)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":100:17)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":100:24)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":100:28)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":102:17)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":105:17)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":102:25)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":102:21)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":102:28)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":102:32)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":102:30)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":103:17)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":104:34)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":104:41)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":104:42)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":104:21)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":102:37)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":102:36)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":109:17)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":111:18)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":111:13)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":116:1)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":125:1)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":118:5)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":118:9)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":120:13)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":120:12)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":120:5)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":122:5)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":123:22)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":123:5)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":124:18)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":124:5)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":75:1)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":75:29)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":128:1)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":158:1)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":133:13)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":133:17)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":134:13)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":134:58)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":129:1)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":130:5)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":157:5)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":130:8)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":131:5)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":132:9)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":156:9)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":134:35)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":134:42)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":134:47)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":134:57)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":135:13)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":135:43)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":135:17)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":135:27)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":135:33)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":135:34)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":135:40)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":135:39)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":137:13)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":140:13)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":137:22)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":137:18)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":137:25)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":137:29)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":137:27)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":138:13)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":139:29)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":139:17)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":139:24)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":139:25)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":137:34)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":137:33)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":142:13)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":154:13)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":142:17)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":142:25)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":142:30)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":142:38)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":142:40)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":143:13)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":150:13)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":152:13)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":144:32)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":144:17)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":144:24)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":144:28)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":146:17)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":149:17)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":146:25)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":146:21)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":146:28)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":146:32)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":146:30)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":147:17)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":148:34)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":148:41)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":148:42)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":148:21)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":146:37)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":146:36)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":153:27)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":153:17)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":155:18)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":155:13)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":160:1)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":169:1)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":162:5)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":162:9)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":164:13)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":164:12)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":164:5)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":166:5)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":167:22)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":167:5)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":168:18)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":168:5)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":76:1)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":76:28)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":172:1)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":203:1)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":177:13)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":177:17)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":178:13)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":178:58)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":173:1)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":174:5)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":202:5)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":174:8)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":175:5)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":176:9)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":201:9)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":178:35)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":178:42)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":178:47)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":178:57)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":179:13)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":179:43)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":179:17)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":179:27)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":179:33)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":179:34)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":179:40)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":179:39)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":181:13)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":184:13)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":181:22)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":181:18)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":181:25)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":181:29)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":181:27)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":182:13)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":183:29)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":183:17)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":183:24)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":183:25)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":181:34)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":181:33)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":187:13)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":199:13)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":187:17)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":187:25)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":188:13)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":195:13)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":197:13)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":189:32)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":189:17)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":189:24)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":189:28)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":191:17)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":194:17)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":191:25)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":191:21)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":191:28)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":191:32)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":191:30)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":192:17)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":193:34)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":193:41)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":193:42)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":193:21)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":191:37)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":191:36)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":198:27)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":198:17)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":200:18)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":200:13)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":205:1)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":215:1)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":207:5)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":207:9)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":209:13)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":209:12)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":209:5)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":212:12)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":212:5)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":213:21)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":213:5)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":214:17)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c":214:5)
#loc373 = loc(fused[#loc1, #loc2])
#loc374 = loc(fused[#loc3, #loc4])
#loc375 = loc(fused[#loc5, #loc6])
#loc376 = loc(fused[#loc7, #loc8])
#loc377 = loc(fused[#loc9, #loc10])
#loc378 = loc(fused[#loc11, #loc12])
#loc379 = loc(fused[#loc14, #loc15])
#loc380 = loc(fused[#loc16, #loc17])
#loc382 = loc(fused[#loc20, #loc21])
#loc383 = loc(fused[#loc22, #loc23])
#loc384 = loc(fused[#loc25, #loc26])
#loc385 = loc(fused[#loc28, #loc26])
#loc386 = loc(fused[#loc29, #loc30])
#loc387 = loc(fused[#loc33, #loc34])
#loc388 = loc(fused[#loc32, #loc34])
#loc389 = loc(fused[#loc31, #loc23])
#loc390 = loc(fused[#loc35, #loc36])
#loc391 = loc(fused[#loc37, #loc38])
#loc392 = loc(fused[#loc39, #loc36])
#loc393 = loc(fused[#loc43, #loc44])
#loc394 = loc(fused[#loc46, #loc45])
#loc395 = loc(fused[#loc47, #loc48])
#loc396 = loc(fused[#loc50, #loc44])
#loc397 = loc(fused[#loc52, #loc51])
#loc398 = loc(fused[#loc56, #loc55])
#loc399 = loc(fused[#loc57, #loc58])
#loc400 = loc(fused[#loc59, #loc60])
#loc401 = loc(fused[#loc61, #loc62, #loc63, #loc58])
#loc402 = loc(fused[#loc65, #loc64])
#loc403 = loc(fused[#loc68, #loc69])
#loc404 = loc(fused[#loc71, #loc70])
#loc405 = loc(fused[#loc72, #loc73])
#loc406 = loc(fused[#loc75, #loc69])
#loc407 = loc(fused[#loc81, #loc80])
#loc408 = loc(fused[#loc85, #loc86])
#loc409 = loc(fused[#loc87, #loc88])
#loc410 = loc(fused[#loc91, #loc89])
#loc411 = loc(fused[#loc93, #loc92])
#loc412 = loc(fused[#loc95, #loc94])
#loc413 = loc(fused[#loc98, #loc99])
#loc414 = loc(fused[#loc100, #loc101])
#loc415 = loc(fused[#loc102, #loc103])
#loc416 = loc(fused[#loc104, #loc105])
#loc417 = loc(fused[#loc106, #loc107])
#loc418 = loc(fused[#loc110, #loc111])
#loc420 = loc(fused[#loc114, #loc115])
#loc421 = loc(fused[#loc116, #loc117])
#loc422 = loc(fused[#loc119, #loc120])
#loc423 = loc(fused[#loc122, #loc123, #loc124, #loc120])
#loc424 = loc(fused[#loc126, #loc127])
#loc425 = loc(fused[#loc130, #loc131])
#loc426 = loc(fused[#loc129, #loc131])
#loc427 = loc(fused[#loc128, #loc117])
#loc428 = loc(fused[#loc132, #loc133])
#loc429 = loc(fused[#loc134, #loc135])
#loc430 = loc(fused[#loc136, #loc133])
#loc431 = loc(fused[#loc140, #loc141])
#loc432 = loc(fused[#loc143, #loc142])
#loc433 = loc(fused[#loc144, #loc145])
#loc434 = loc(fused[#loc147, #loc141])
#loc435 = loc(fused[#loc149, #loc148])
#loc436 = loc(fused[#loc153, #loc152])
#loc437 = loc(fused[#loc154, #loc155])
#loc438 = loc(fused[#loc156, #loc157])
#loc439 = loc(fused[#loc159, #loc161])
#loc440 = loc(fused[#loc162, #loc163, #loc164, #loc155])
#loc441 = loc(fused[#loc166, #loc165])
#loc442 = loc(fused[#loc169, #loc170])
#loc443 = loc(fused[#loc172, #loc171])
#loc444 = loc(fused[#loc173, #loc174])
#loc445 = loc(fused[#loc176, #loc170])
#loc446 = loc(fused[#loc182, #loc181])
#loc447 = loc(fused[#loc186, #loc187])
#loc448 = loc(fused[#loc188, #loc189])
#loc449 = loc(fused[#loc192, #loc190])
#loc450 = loc(fused[#loc194, #loc193])
#loc451 = loc(fused[#loc196, #loc195])
#loc452 = loc(fused[#loc199, #loc200])
#loc453 = loc(fused[#loc201, #loc202])
#loc455 = loc(fused[#loc205, #loc206])
#loc456 = loc(fused[#loc207, #loc208])
#loc457 = loc(fused[#loc210, #loc211])
#loc458 = loc(fused[#loc213, #loc211])
#loc459 = loc(fused[#loc214, #loc215])
#loc460 = loc(fused[#loc218, #loc219])
#loc461 = loc(fused[#loc217, #loc219])
#loc462 = loc(fused[#loc216, #loc208])
#loc463 = loc(fused[#loc220, #loc221])
#loc464 = loc(fused[#loc222, #loc223])
#loc465 = loc(fused[#loc224, #loc221])
#loc466 = loc(fused[#loc228, #loc229])
#loc467 = loc(fused[#loc231, #loc230])
#loc468 = loc(fused[#loc232, #loc233])
#loc469 = loc(fused[#loc235, #loc229])
#loc470 = loc(fused[#loc237, #loc236])
#loc471 = loc(fused[#loc241, #loc240])
#loc472 = loc(fused[#loc242, #loc243])
#loc473 = loc(fused[#loc244, #loc245])
#loc474 = loc(fused[#loc247, #loc249])
#loc475 = loc(fused[#loc250, #loc251, #loc252, #loc243])
#loc476 = loc(fused[#loc254, #loc253])
#loc477 = loc(fused[#loc257, #loc258])
#loc478 = loc(fused[#loc260, #loc259])
#loc479 = loc(fused[#loc261, #loc262])
#loc480 = loc(fused[#loc264, #loc258])
#loc481 = loc(fused[#loc270, #loc269])
#loc482 = loc(fused[#loc275, #loc276])
#loc483 = loc(fused[#loc277, #loc278])
#loc484 = loc(fused[#loc281, #loc279])
#loc485 = loc(fused[#loc283, #loc282])
#loc486 = loc(fused[#loc285, #loc284])
#loc487 = loc(fused[#loc288, #loc289])
#loc488 = loc(fused[#loc290, #loc291])
#loc490 = loc(fused[#loc294, #loc295])
#loc491 = loc(fused[#loc296, #loc297])
#loc492 = loc(fused[#loc299, #loc300])
#loc493 = loc(fused[#loc302, #loc300])
#loc494 = loc(fused[#loc303, #loc304])
#loc495 = loc(fused[#loc307, #loc308])
#loc496 = loc(fused[#loc306, #loc308])
#loc497 = loc(fused[#loc305, #loc297])
#loc498 = loc(fused[#loc309, #loc310])
#loc499 = loc(fused[#loc311, #loc312])
#loc500 = loc(fused[#loc313, #loc310])
#loc501 = loc(fused[#loc317, #loc318])
#loc502 = loc(fused[#loc320, #loc319])
#loc503 = loc(fused[#loc321, #loc322])
#loc504 = loc(fused[#loc324, #loc318])
#loc505 = loc(fused[#loc326, #loc325])
#loc506 = loc(fused[#loc330, #loc329])
#loc507 = loc(fused[#loc331, #loc332])
#loc508 = loc(fused[#loc333, #loc334])
#loc509 = loc(fused[#loc335, #loc336, #loc337, #loc332])
#loc510 = loc(fused[#loc339, #loc338])
#loc511 = loc(fused[#loc342, #loc343])
#loc512 = loc(fused[#loc345, #loc344])
#loc513 = loc(fused[#loc346, #loc347])
#loc514 = loc(fused[#loc349, #loc343])
#loc515 = loc(fused[#loc355, #loc354])
#loc516 = loc(fused[#loc360, #loc361])
#loc517 = loc(fused[#loc362, #loc363])
#loc518 = loc(fused[#loc366, #loc364])
#loc519 = loc(fused[#loc368, #loc367])
#loc520 = loc(fused[#loc370, #loc369])
