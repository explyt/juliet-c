!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc119)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc120)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc121)
  cir.func private @printIntLine(!s32i) loc(#loc122)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc123)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc125)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc16)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    cir.goto "source" loc(#loc127)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc20)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc21)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc21)
    %7 = cir.ternary(%6, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc21)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc21)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc21)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc21)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc21)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc21)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc21)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc21)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc21)
      cir.yield %20 : !u32i loc(#loc21)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc21)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc21)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc21)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc21)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc21)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc21)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc21)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc21)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc21)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc21)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc21)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc21)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc21)
      cir.yield %24 : !u32i loc(#loc21)
    }) : (!cir.bool) -> !u32i loc(#loc21)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc21)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc128)
    cir.scope {
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc130)
      %10 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc131)
      %11 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc29)
      %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc30)
      %14 = cir.const #cir.int<4> : !u64i loc(#loc132)
      %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc133)
      %16 = cir.call @malloc(%15) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc29)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc134)
      cir.store %17, %10 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc135)
      cir.scope {
        %25 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc37)
        %26 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc38)
        %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc38)
        %28 = cir.cmp(eq, %25, %27) : !cir.ptr<!s32i>, !cir.bool loc(#loc137)
        cir.if %28 {
          %29 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc40)
          %30 = cir.const #cir.int<1> : !s32i loc(#loc41)
          %31 = cir.unary(minus, %30) nsw : !s32i, !s32i loc(#loc42)
          cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc40)
        } loc(#loc138)
      } loc(#loc136)
      cir.scope {
        %25 = cir.const #cir.int<0> : !s32i loc(#loc45)
        %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc45)
        cir.store %26, %9 : !u64i, !cir.ptr<!u64i> loc(#loc140)
        cir.for : cond {
          %27 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc47)
          %28 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
          %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc48)
          %30 = cir.cmp(lt, %27, %29) : !u64i, !cir.bool loc(#loc141)
          cir.condition(%30) loc(#loc49)
        } body {
          cir.scope {
            %27 = cir.const #cir.int<0> : !s32i loc(#loc51)
            %28 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc52)
            %29 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc53)
            %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !u64i), !cir.ptr<!s32i> loc(#loc54)
            cir.store %27, %30 : !s32i, !cir.ptr<!s32i> loc(#loc143)
          } loc(#loc142)
          cir.yield loc(#loc44)
        } step {
          %27 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc55)
          %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc56)
          cir.store %28, %9 : !u64i, !cir.ptr<!u64i> loc(#loc144)
          cir.yield loc(#loc139)
        } loc(#loc139)
      } loc(#loc139)
      %18 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc57)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc58)
      %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc59)
      %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc57)
      cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc60)
      %22 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc61)
      %23 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc62)
      %24 = cir.cast(bitcast, %23 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc62)
      cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc61)
    } loc(#loc129)
    cir.return loc(#loc12)
  } loc(#loc124)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc146)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc65)
    cir.return loc(#loc64)
  } loc(#loc145)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc148)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc71)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc72)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    cir.goto "source" loc(#loc150)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc76)
    %3 = cir.const #cir.int<20> : !s32i loc(#loc77)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    cir.scope {
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc153)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc154)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc85)
      %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc86)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc155)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc156)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc85)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc157)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc158)
      cir.scope {
        %20 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc93)
        %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc94)
        %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc94)
        %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !cir.bool loc(#loc160)
        cir.if %23 {
          %24 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc96)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc97)
          %26 = cir.unary(minus, %25) nsw : !s32i, !s32i loc(#loc98)
          cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc96)
        } loc(#loc161)
      } loc(#loc159)
      cir.scope {
        %20 = cir.const #cir.int<0> : !s32i loc(#loc101)
        %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc101)
        cir.store %21, %4 : !u64i, !cir.ptr<!u64i> loc(#loc163)
        cir.for : cond {
          %22 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc103)
          %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc104)
          %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc104)
          %25 = cir.cmp(lt, %22, %24) : !u64i, !cir.bool loc(#loc164)
          cir.condition(%25) loc(#loc105)
        } body {
          cir.scope {
            %22 = cir.const #cir.int<0> : !s32i loc(#loc107)
            %23 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc108)
            %24 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc109)
            %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !u64i), !cir.ptr<!s32i> loc(#loc110)
            cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc166)
          } loc(#loc165)
          cir.yield loc(#loc100)
        } step {
          %22 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc111)
          %23 = cir.unary(inc, %22) : !u64i, !u64i loc(#loc112)
          cir.store %23, %4 : !u64i, !cir.ptr<!u64i> loc(#loc167)
          cir.yield loc(#loc162)
        } loc(#loc162)
      } loc(#loc162)
      %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc113)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc114)
      %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc115)
      %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc113)
      cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc116)
      %17 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc117)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc118)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc118)
      cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc117)
    } loc(#loc152)
    cir.return loc(#loc68)
  } loc(#loc147)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":21:1)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":44:1)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":23:5)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":23:9)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":25:13)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":25:12)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":25:5)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":26:5)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":26:10)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":27:1)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":29:12)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":29:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":30:5)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":43:5)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":31:9)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":31:16)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":32:9)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":32:14)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":35:28)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":35:35)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":35:42)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":35:52)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":35:53)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":35:9)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":36:9)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":36:43)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":36:13)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":36:27)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":36:33)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":36:34)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":36:40)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":36:39)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":37:9)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":40:9)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":37:18)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":37:14)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":37:21)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":37:33)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":37:23)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":38:9)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":39:29)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":39:13)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":39:24)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":39:25)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":37:40)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":37:39)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":41:22)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":41:33)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":41:34)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":41:9)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":42:9)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":42:14)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":76:1)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":79:1)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":78:5)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":78:13)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":51:1)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":74:1)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":53:5)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":53:9)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":55:13)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":55:12)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":55:5)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":56:5)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":56:10)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":57:1)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":59:12)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":59:5)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":60:5)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":73:5)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":61:9)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":61:16)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":62:9)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":62:14)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":65:28)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":65:35)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":65:42)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":65:52)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":65:53)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":65:9)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":66:9)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":66:43)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":66:13)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":66:27)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":66:33)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":66:34)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":66:40)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":66:39)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":67:9)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":70:9)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":67:18)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":67:14)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":67:21)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":67:33)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":67:23)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":68:9)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":69:29)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":69:13)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":69:24)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":69:25)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":67:40)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":67:39)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":71:22)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":71:33)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":71:34)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":71:9)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":72:9)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_18.c":72:14)
#loc119 = loc(fused[#loc1, #loc2])
#loc120 = loc(fused[#loc3, #loc4])
#loc121 = loc(fused[#loc5, #loc6])
#loc122 = loc(fused[#loc7, #loc8])
#loc123 = loc(fused[#loc9, #loc10])
#loc124 = loc(fused[#loc11, #loc12])
#loc125 = loc(fused[#loc13, #loc14])
#loc126 = loc(fused[#loc17, #loc15])
#loc127 = loc(fused[#loc18, #loc19])
#loc128 = loc(fused[#loc22, #loc21])
#loc129 = loc(fused[#loc23, #loc24])
#loc130 = loc(fused[#loc25, #loc26])
#loc131 = loc(fused[#loc27, #loc28])
#loc132 = loc(fused[#loc31, #loc32])
#loc133 = loc(fused[#loc30, #loc32])
#loc134 = loc(fused[#loc29, #loc33])
#loc135 = loc(fused[#loc34, #loc33])
#loc136 = loc(fused[#loc35, #loc36])
#loc137 = loc(fused[#loc37, #loc38])
#loc138 = loc(fused[#loc39, #loc36])
#loc139 = loc(fused[#loc43, #loc44])
#loc140 = loc(fused[#loc46, #loc45])
#loc141 = loc(fused[#loc47, #loc48])
#loc142 = loc(fused[#loc50, #loc44])
#loc143 = loc(fused[#loc52, #loc51])
#loc144 = loc(fused[#loc56, #loc55])
#loc145 = loc(fused[#loc63, #loc64])
#loc146 = loc(fused[#loc65, #loc66])
#loc147 = loc(fused[#loc67, #loc68])
#loc148 = loc(fused[#loc69, #loc70])
#loc149 = loc(fused[#loc73, #loc71])
#loc150 = loc(fused[#loc74, #loc75])
#loc151 = loc(fused[#loc78, #loc77])
#loc152 = loc(fused[#loc79, #loc80])
#loc153 = loc(fused[#loc81, #loc82])
#loc154 = loc(fused[#loc83, #loc84])
#loc155 = loc(fused[#loc87, #loc88])
#loc156 = loc(fused[#loc86, #loc88])
#loc157 = loc(fused[#loc85, #loc89])
#loc158 = loc(fused[#loc90, #loc89])
#loc159 = loc(fused[#loc91, #loc92])
#loc160 = loc(fused[#loc93, #loc94])
#loc161 = loc(fused[#loc95, #loc92])
#loc162 = loc(fused[#loc99, #loc100])
#loc163 = loc(fused[#loc102, #loc101])
#loc164 = loc(fused[#loc103, #loc104])
#loc165 = loc(fused[#loc106, #loc100])
#loc166 = loc(fused[#loc108, #loc107])
#loc167 = loc(fused[#loc112, #loc111])
