!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":21:21)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":21:25)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":57:25)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":57:29)
#loc139 = loc(fused[#loc11, #loc12])
#loc165 = loc(fused[#loc78, #loc79])
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc134)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc135)
  cir.func private @printIntLine(!s32i) loc(#loc136)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc137)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc11, #loc12])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc140)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc141)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc139)
    cir.store %arg0, %2 : !s32i, !cir.ptr<!s32i> loc(#loc17)
    cir.br ^bb1 loc(#loc142)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc20)
    %4 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc21)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc143)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc144)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc145)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc146)
    cir.br ^bb2 loc(#loc147)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc28)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc29)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc29)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc148)
    cir.brcond %13 ^bb3, ^bb4 loc(#loc149)
  ^bb3:  // pred: ^bb2
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc31)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc33)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc31)
    cir.br ^bb4 loc(#loc27)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc27)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc150)
  ^bb6:  // pred: ^bb5
    %17 = cir.const #cir.int<0> : !s32i loc(#loc36)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc36)
    cir.store %18, %0 : !u64i, !cir.ptr<!u64i> loc(#loc151)
    cir.br ^bb7 loc(#loc150)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %19 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc38)
    %20 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc39)
    %22 = cir.cmp(lt, %19, %21) : !u64i, !cir.bool loc(#loc152)
    cir.brcond %22 ^bb8, ^bb12 loc(#loc40)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc153)
  ^bb9:  // pred: ^bb8
    %23 = cir.const #cir.int<0> : !s32i loc(#loc42)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
    %25 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc44)
    %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !u64i), !cir.ptr<!s32i> loc(#loc45)
    cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc154)
    cir.br ^bb10 loc(#loc35)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc35)
  ^bb11:  // pred: ^bb10
    %27 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc46)
    %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc47)
    cir.store %28, %0 : !u64i, !cir.ptr<!u64i> loc(#loc155)
    cir.br ^bb7 loc(#loc150)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc35)
  ^bb13:  // pred: ^bb12
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc48)
    %30 = cir.const #cir.int<0> : !s32i loc(#loc49)
    %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc50)
    %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc48)
    cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc51)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc52)
    %34 = cir.cast(bitcast, %33 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc52)
    cir.call @free(%34) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc53)
    cir.br ^bb14 loc(#loc19)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc10)
  } loc(#loc138)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc156)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc157)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc58)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc159)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc160)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!s32i)>> loc(#loc64)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>> loc(#loc160)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc65)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc66)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc68)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc157)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc69)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc58)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc58)
    %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc68)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, !cir.ptr<!cir.func<(!s32i)>> loc(#loc70)
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
    cir.call %11(%12) : (!cir.ptr<!cir.func<(!s32i)>>, !s32i) -> () loc(#loc70)
    cir.return loc(#loc60)
  } loc(#loc158)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc163)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc74)
    cir.return loc(#loc73)
  } loc(#loc162)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc78, #loc79])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc166)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc167)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc165)
    cir.store %arg0, %2 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    cir.br ^bb1 loc(#loc168)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc87)
    %4 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc88)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc169)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc170)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc87)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc171)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc172)
    cir.br ^bb2 loc(#loc173)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc96)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc96)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc174)
    cir.brcond %13 ^bb3, ^bb4 loc(#loc175)
  ^bb3:  // pred: ^bb2
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc98)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc99)
    %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc100)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc98)
    cir.br ^bb4 loc(#loc94)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc94)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc176)
  ^bb6:  // pred: ^bb5
    %17 = cir.const #cir.int<0> : !s32i loc(#loc103)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc103)
    cir.store %18, %0 : !u64i, !cir.ptr<!u64i> loc(#loc177)
    cir.br ^bb7 loc(#loc176)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %19 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc105)
    %20 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc106)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc106)
    %22 = cir.cmp(lt, %19, %21) : !u64i, !cir.bool loc(#loc178)
    cir.brcond %22 ^bb8, ^bb12 loc(#loc107)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc179)
  ^bb9:  // pred: ^bb8
    %23 = cir.const #cir.int<0> : !s32i loc(#loc109)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc110)
    %25 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc111)
    %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !u64i), !cir.ptr<!s32i> loc(#loc112)
    cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    cir.br ^bb10 loc(#loc102)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc102)
  ^bb11:  // pred: ^bb10
    %27 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc113)
    %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc114)
    cir.store %28, %0 : !u64i, !cir.ptr<!u64i> loc(#loc181)
    cir.br ^bb7 loc(#loc176)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc102)
  ^bb13:  // pred: ^bb12
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc115)
    %30 = cir.const #cir.int<0> : !s32i loc(#loc116)
    %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc117)
    %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc115)
    cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc118)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc119)
    %34 = cir.cast(bitcast, %33 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc119)
    cir.call @free(%34) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc120)
    cir.br ^bb14 loc(#loc86)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc77)
  } loc(#loc164)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc183)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc184)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!s32i)>> loc(#loc126)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>> loc(#loc184)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc127)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc128)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc185)
    %5 = cir.const #cir.int<20> : !s32i loc(#loc130)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, !cir.ptr<!cir.func<(!s32i)>> loc(#loc132)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc133)
    cir.call %6(%7) : (!cir.ptr<!cir.func<(!s32i)>>, !s32i) -> () loc(#loc132)
    cir.return loc(#loc122)
  } loc(#loc182)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":21:1)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":37:1)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":24:9)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":24:16)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":25:9)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":25:14)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":22:1)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":23:5)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":36:5)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":28:28)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":28:35)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":28:42)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":28:52)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":28:53)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":28:9)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":29:9)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":29:43)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":29:13)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":29:27)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":29:33)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":29:34)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":29:40)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":29:39)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":30:9)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":33:9)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":30:18)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":30:14)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":30:21)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":30:33)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":30:23)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":31:9)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":32:29)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":32:13)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":32:24)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":32:25)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":30:40)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":30:39)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":34:22)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":34:33)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":34:34)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":34:9)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":35:14)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":35:9)
#loc54 = loc("/usr/include/stdio.h":463:1)
#loc55 = loc("/usr/include/stdio.h":465:33)
#loc56 = loc("/usr/include/stdio.h":149:1)
#loc57 = loc("/usr/include/stdio.h":149:14)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":47:19)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":39:1)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":50:1)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":41:5)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":41:9)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":43:5)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":43:29)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":45:13)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":45:12)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":45:5)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":47:5)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":47:12)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":49:5)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":49:13)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":86:1)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":89:1)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":88:5)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":88:13)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":57:1)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":73:1)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":60:9)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":60:16)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":61:9)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":61:14)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":58:1)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":59:5)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":72:5)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":64:28)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":64:35)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":64:42)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":64:52)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":64:53)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":64:9)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":65:9)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":65:43)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":65:13)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":65:27)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":65:33)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":65:34)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":65:40)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":65:39)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":66:9)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":69:9)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":66:18)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":66:14)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":66:21)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":66:33)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":66:23)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":67:9)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":68:29)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":68:13)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":68:24)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":68:25)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":66:40)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":66:39)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":70:22)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":70:33)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":70:34)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":70:9)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":71:14)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":71:9)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":75:1)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":84:1)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":77:5)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":77:9)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":78:5)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":78:29)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":80:13)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":80:12)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":80:5)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":82:12)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":82:5)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":83:5)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_44.c":83:13)
#loc134 = loc(fused[#loc1, #loc2])
#loc135 = loc(fused[#loc3, #loc4])
#loc136 = loc(fused[#loc5, #loc6])
#loc137 = loc(fused[#loc7, #loc8])
#loc138 = loc(fused[#loc9, #loc10])
#loc140 = loc(fused[#loc13, #loc14])
#loc141 = loc(fused[#loc15, #loc16])
#loc142 = loc(fused[#loc18, #loc19])
#loc143 = loc(fused[#loc22, #loc23])
#loc144 = loc(fused[#loc21, #loc23])
#loc145 = loc(fused[#loc20, #loc24])
#loc146 = loc(fused[#loc25, #loc24])
#loc147 = loc(fused[#loc26, #loc27])
#loc148 = loc(fused[#loc28, #loc29])
#loc149 = loc(fused[#loc30, #loc27])
#loc150 = loc(fused[#loc34, #loc35])
#loc151 = loc(fused[#loc37, #loc36])
#loc152 = loc(fused[#loc38, #loc39])
#loc153 = loc(fused[#loc41, #loc35])
#loc154 = loc(fused[#loc43, #loc42])
#loc155 = loc(fused[#loc47, #loc46])
#loc156 = loc(fused[#loc54, #loc55])
#loc157 = loc(fused[#loc56, #loc57])
#loc158 = loc(fused[#loc59, #loc60])
#loc159 = loc(fused[#loc61, #loc62])
#loc160 = loc(fused[#loc63, #loc64])
#loc161 = loc(fused[#loc67, #loc65])
#loc162 = loc(fused[#loc72, #loc73])
#loc163 = loc(fused[#loc74, #loc75])
#loc164 = loc(fused[#loc76, #loc77])
#loc166 = loc(fused[#loc80, #loc81])
#loc167 = loc(fused[#loc82, #loc83])
#loc168 = loc(fused[#loc85, #loc86])
#loc169 = loc(fused[#loc89, #loc90])
#loc170 = loc(fused[#loc88, #loc90])
#loc171 = loc(fused[#loc87, #loc91])
#loc172 = loc(fused[#loc92, #loc91])
#loc173 = loc(fused[#loc93, #loc94])
#loc174 = loc(fused[#loc95, #loc96])
#loc175 = loc(fused[#loc97, #loc94])
#loc176 = loc(fused[#loc101, #loc102])
#loc177 = loc(fused[#loc104, #loc103])
#loc178 = loc(fused[#loc105, #loc106])
#loc179 = loc(fused[#loc108, #loc102])
#loc180 = loc(fused[#loc110, #loc109])
#loc181 = loc(fused[#loc114, #loc113])
#loc182 = loc(fused[#loc121, #loc122])
#loc183 = loc(fused[#loc123, #loc124])
#loc184 = loc(fused[#loc125, #loc126])
#loc185 = loc(fused[#loc129, #loc127])
#loc186 = loc(fused[#loc131, #loc130])
