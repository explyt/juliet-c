!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":22:67)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":22:71)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":57:71)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":57:75)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":88:71)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":88:75)
#true = #cir.bool<true> : !cir.bool
#loc226 = loc(fused[#loc14, #loc15])
#loc252 = loc(fused[#loc81, #loc82])
#loc278 = loc(fused[#loc150, #loc151])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc220)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc221)
  cir.func private  @printIntLine(!s32i) loc(#loc222)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc223)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc224)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b_badSink(%arg0: !s32i loc(fused[#loc14, #loc15])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc226)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc16)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc228)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc229)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc23)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc24)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc24)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc230)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc231)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc23)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc232)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc229)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc29)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc30)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !s32i loc(#loc234)
        %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc31)
        cir.if %17 {
          %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc33)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc34)
          %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc35)
          cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
        } loc(#loc235)
      } loc(#loc233)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc38)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc237)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc40)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc41)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc238)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc42)
          cir.condition(%17) loc(#loc42)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc44)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc45)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc46)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc47)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc240)
          } loc(#loc239)
          cir.yield loc(#loc37)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc48)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc49)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc241)
          cir.yield loc(#loc236)
        } loc(#loc236)
      } loc(#loc236)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc52)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc53)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !s32i loc(#loc243)
        %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc54)
        cir.if %16 {
          %17 = cir.const #cir.int<1> : !s32i loc(#loc58)
          %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc59)
          %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc60)
          %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc61)
          cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc245)
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc64)
            cir.store %21, %1 : !s32i, !cir.ptr<!s32i> loc(#loc247)
            cir.for : cond {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc66)
              %23 = cir.const #cir.int<10> : !s32i loc(#loc67)
              %24 = cir.cmp(lt, %22, %23) : !s32i, !s32i loc(#loc248)
              %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc68)
              cir.condition(%25) loc(#loc68)
            } body {
              cir.scope {
                %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc70)
                %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc71)
                %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc72)
                %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc70)
                cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc73)
              } loc(#loc249)
              cir.yield loc(#loc63)
            } step {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc74)
              %23 = cir.unary(inc, %22) : !s32i, !s32i loc(#loc75)
              cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc250)
              cir.yield loc(#loc246)
            } loc(#loc246)
          } loc(#loc246)
        } else {
          %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc9)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc76)
        } loc(#loc244)
      } loc(#loc242)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc77)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc78)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc78)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc77)
    } loc(#loc227)
    cir.return loc(#loc13)
  } loc(#loc225)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b_goodG2BSink(%arg0: !s32i loc(fused[#loc81, #loc82])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc252)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc254)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc255)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc90)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc91)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc91)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc256)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc257)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc90)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc258)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc255)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc96)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc97)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc97)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !s32i loc(#loc260)
        %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc98)
        cir.if %17 {
          %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc100)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc101)
          %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc102)
          cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc100)
        } loc(#loc261)
      } loc(#loc259)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc105)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc263)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc107)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc108)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc264)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc109)
          cir.condition(%17) loc(#loc109)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc111)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc112)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc113)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc114)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc266)
          } loc(#loc265)
          cir.yield loc(#loc104)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc115)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc116)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc267)
          cir.yield loc(#loc262)
        } loc(#loc262)
      } loc(#loc262)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc119)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc120)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !s32i loc(#loc269)
        %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc121)
        cir.if %16 {
          %17 = cir.const #cir.int<1> : !s32i loc(#loc125)
          %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc126)
          %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc127)
          %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc128)
          cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc271)
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc131)
            cir.store %21, %1 : !s32i, !cir.ptr<!s32i> loc(#loc273)
            cir.for : cond {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc133)
              %23 = cir.const #cir.int<10> : !s32i loc(#loc134)
              %24 = cir.cmp(lt, %22, %23) : !s32i, !s32i loc(#loc274)
              %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc135)
              cir.condition(%25) loc(#loc135)
            } body {
              cir.scope {
                %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc137)
                %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc138)
                %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc139)
                %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc137)
                cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc140)
              } loc(#loc275)
              cir.yield loc(#loc130)
            } step {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc141)
              %23 = cir.unary(inc, %22) : !s32i, !s32i loc(#loc142)
              cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc276)
              cir.yield loc(#loc272)
            } loc(#loc272)
          } loc(#loc272)
        } else {
          %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc143)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc143)
          cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc144)
        } loc(#loc270)
      } loc(#loc268)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc145)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc146)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc146)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc145)
    } loc(#loc253)
    cir.return loc(#loc80)
  } loc(#loc251)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc147)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b_goodB2GSink(%arg0: !s32i loc(fused[#loc150, #loc151])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc278)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc280)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc281)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc159)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc160)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc160)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc282)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc283)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc159)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc284)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc281)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc165)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc166)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc166)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !s32i loc(#loc286)
        %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc167)
        cir.if %17 {
          %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc169)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc170)
          %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc171)
          cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc169)
        } loc(#loc287)
      } loc(#loc285)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc174)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc289)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc176)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc177)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc290)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc178)
          cir.condition(%17) loc(#loc178)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc180)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc181)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc182)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc183)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc292)
          } loc(#loc291)
          cir.yield loc(#loc173)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc184)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc185)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc293)
          cir.yield loc(#loc288)
        } loc(#loc288)
      } loc(#loc288)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc188)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc189)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !s32i loc(#loc295)
        %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc190)
        %17 = cir.ternary(%16, true {
          %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc192)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc193)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc296)
          %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc195)
          %22 = cir.ternary(%21, true {
            %23 = cir.const #true loc(#loc191)
            cir.yield %23 : !cir.bool loc(#loc191)
          }, false {
            %23 = cir.const #false loc(#loc191)
            cir.yield %23 : !cir.bool loc(#loc191)
          }) : (!cir.bool) -> !cir.bool loc(#loc191)
          cir.yield %22 : !cir.bool loc(#loc191)
        }, false {
          %18 = cir.const #false loc(#loc191)
          cir.yield %18 : !cir.bool loc(#loc191)
        }) : (!cir.bool) -> !cir.bool loc(#loc191)
        cir.if %17 {
          %18 = cir.const #cir.int<1> : !s32i loc(#loc199)
          %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc200)
          %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc201)
          %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc202)
          cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc298)
          cir.scope {
            %22 = cir.const #cir.int<0> : !s32i loc(#loc205)
            cir.store %22, %1 : !s32i, !cir.ptr<!s32i> loc(#loc300)
            cir.for : cond {
              %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc207)
              %24 = cir.const #cir.int<10> : !s32i loc(#loc208)
              %25 = cir.cmp(lt, %23, %24) : !s32i, !s32i loc(#loc301)
              %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc209)
              cir.condition(%26) loc(#loc209)
            } body {
              cir.scope {
                %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc211)
                %24 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc212)
                %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc213)
                %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc211)
                cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc214)
              } loc(#loc302)
              cir.yield loc(#loc204)
            } step {
              %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc215)
              %24 = cir.unary(inc, %23) : !s32i, !s32i loc(#loc216)
              cir.store %24, %1 : !s32i, !cir.ptr<!s32i> loc(#loc303)
              cir.yield loc(#loc299)
            } loc(#loc299)
          } loc(#loc299)
        } else {
          %18 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc147)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc147)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc217)
        } loc(#loc297)
      } loc(#loc294)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc218)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc219)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc219)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc218)
    } loc(#loc279)
    cir.return loc(#loc149)
  } loc(#loc277)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":46:23)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":22:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":50:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":23:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":24:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":49:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":25:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":25:13)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":26:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":26:54)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":26:31)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":26:38)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":26:43)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":26:53)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":27:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":27:39)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":27:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":27:23)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":27:20)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":27:29)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":27:30)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":27:36)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":27:35)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":29:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":32:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":29:18)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":29:14)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":29:21)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":29:25)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":29:23)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":30:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":31:25)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":31:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":31:20)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":31:21)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":29:30)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":29:29)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":35:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":47:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":35:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":35:21)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":35:18)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":36:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":43:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":45:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":37:28)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":37:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":37:20)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":37:24)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":39:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":42:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":39:21)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":39:17)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":39:24)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":39:28)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":39:26)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":40:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":41:30)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":41:37)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":41:38)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":41:17)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":39:33)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":39:32)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":46:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":48:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":48:14)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":57:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":85:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":58:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":59:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":84:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":60:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":60:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":61:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":61:54)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":61:31)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":61:38)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":61:43)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":61:53)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":62:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":62:39)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":62:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":62:23)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":62:20)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":62:29)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":62:30)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":62:36)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":62:35)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":64:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":67:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":64:18)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":64:14)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":64:21)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":64:25)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":64:23)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":65:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":66:25)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":66:13)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":66:20)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":66:21)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":64:30)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":64:29)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":70:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":82:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":70:13)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":70:21)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":70:18)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":71:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":78:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":80:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":72:28)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":72:13)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":72:20)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":72:24)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":74:13)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":77:13)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":74:21)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":74:17)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":74:24)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":74:28)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":74:26)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":75:13)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":76:30)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":76:37)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":76:38)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":76:17)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":74:33)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":74:32)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":81:23)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":81:13)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":83:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":83:14)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":111:23)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":88:1)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":115:1)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":89:1)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":90:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":114:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":91:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":91:13)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":92:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":92:54)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":92:31)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":92:38)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":92:43)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":92:53)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":93:9)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":93:39)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":93:13)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":93:23)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":93:20)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":93:29)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":93:30)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":93:36)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":93:35)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":95:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":98:9)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":95:18)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":95:14)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":95:21)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":95:25)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":95:23)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":96:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":97:25)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":97:13)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":97:20)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":97:21)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":95:30)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":95:29)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":100:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":112:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":100:13)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":100:21)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":100:18)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":100:23)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":100:26)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":100:34)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":100:36)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":100:31)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":101:9)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":108:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":110:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":102:28)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":102:13)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":102:20)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":102:24)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":104:13)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":107:13)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":104:21)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":104:17)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":104:24)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":104:28)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":104:26)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":105:13)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":106:30)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":106:37)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":106:38)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":106:17)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":104:33)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":104:32)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":111:13)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":113:9)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c":113:14)
#loc220 = loc(fused[#loc1, #loc2])
#loc221 = loc(fused[#loc3, #loc4])
#loc222 = loc(fused[#loc5, #loc6])
#loc223 = loc(fused[#loc7, #loc8])
#loc224 = loc(fused[#loc10, #loc11])
#loc225 = loc(fused[#loc12, #loc13])
#loc227 = loc(fused[#loc17, #loc18])
#loc228 = loc(fused[#loc19, #loc20])
#loc229 = loc(fused[#loc21, #loc22])
#loc230 = loc(fused[#loc25, #loc26])
#loc231 = loc(fused[#loc24, #loc26])
#loc232 = loc(fused[#loc23, #loc22])
#loc233 = loc(fused[#loc27, #loc28])
#loc234 = loc(fused[#loc29, #loc30])
#loc235 = loc(fused[#loc32, #loc28])
#loc236 = loc(fused[#loc36, #loc37])
#loc237 = loc(fused[#loc39, #loc38])
#loc238 = loc(fused[#loc40, #loc41])
#loc239 = loc(fused[#loc43, #loc37])
#loc240 = loc(fused[#loc45, #loc44])
#loc241 = loc(fused[#loc49, #loc48])
#loc242 = loc(fused[#loc50, #loc51])
#loc243 = loc(fused[#loc52, #loc53])
#loc244 = loc(fused[#loc55, #loc56, #loc57, #loc51])
#loc245 = loc(fused[#loc59, #loc58])
#loc246 = loc(fused[#loc62, #loc63])
#loc247 = loc(fused[#loc65, #loc64])
#loc248 = loc(fused[#loc66, #loc67])
#loc249 = loc(fused[#loc69, #loc63])
#loc250 = loc(fused[#loc75, #loc74])
#loc251 = loc(fused[#loc79, #loc80])
#loc253 = loc(fused[#loc84, #loc85])
#loc254 = loc(fused[#loc86, #loc87])
#loc255 = loc(fused[#loc88, #loc89])
#loc256 = loc(fused[#loc92, #loc93])
#loc257 = loc(fused[#loc91, #loc93])
#loc258 = loc(fused[#loc90, #loc89])
#loc259 = loc(fused[#loc94, #loc95])
#loc260 = loc(fused[#loc96, #loc97])
#loc261 = loc(fused[#loc99, #loc95])
#loc262 = loc(fused[#loc103, #loc104])
#loc263 = loc(fused[#loc106, #loc105])
#loc264 = loc(fused[#loc107, #loc108])
#loc265 = loc(fused[#loc110, #loc104])
#loc266 = loc(fused[#loc112, #loc111])
#loc267 = loc(fused[#loc116, #loc115])
#loc268 = loc(fused[#loc117, #loc118])
#loc269 = loc(fused[#loc119, #loc120])
#loc270 = loc(fused[#loc122, #loc123, #loc124, #loc118])
#loc271 = loc(fused[#loc126, #loc125])
#loc272 = loc(fused[#loc129, #loc130])
#loc273 = loc(fused[#loc132, #loc131])
#loc274 = loc(fused[#loc133, #loc134])
#loc275 = loc(fused[#loc136, #loc130])
#loc276 = loc(fused[#loc142, #loc141])
#loc277 = loc(fused[#loc148, #loc149])
#loc279 = loc(fused[#loc153, #loc154])
#loc280 = loc(fused[#loc155, #loc156])
#loc281 = loc(fused[#loc157, #loc158])
#loc282 = loc(fused[#loc161, #loc162])
#loc283 = loc(fused[#loc160, #loc162])
#loc284 = loc(fused[#loc159, #loc158])
#loc285 = loc(fused[#loc163, #loc164])
#loc286 = loc(fused[#loc165, #loc166])
#loc287 = loc(fused[#loc168, #loc164])
#loc288 = loc(fused[#loc172, #loc173])
#loc289 = loc(fused[#loc175, #loc174])
#loc290 = loc(fused[#loc176, #loc177])
#loc291 = loc(fused[#loc179, #loc173])
#loc292 = loc(fused[#loc181, #loc180])
#loc293 = loc(fused[#loc185, #loc184])
#loc294 = loc(fused[#loc186, #loc187])
#loc295 = loc(fused[#loc188, #loc189])
#loc296 = loc(fused[#loc192, #loc194])
#loc297 = loc(fused[#loc196, #loc197, #loc198, #loc187])
#loc298 = loc(fused[#loc200, #loc199])
#loc299 = loc(fused[#loc203, #loc204])
#loc300 = loc(fused[#loc206, #loc205])
#loc301 = loc(fused[#loc207, #loc208])
#loc302 = loc(fused[#loc210, #loc204])
#loc303 = loc(fused[#loc216, #loc215])
