!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc5 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc106 = loc("../../../testcasesupport/std_testcase.h":68:7)
!ty_OneIntClass = !cir.struct<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc157)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc158)
  cir.func linkonce_odr @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc5)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc5)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc5)
    cir.return loc(#loc5)
  } loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc159)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc160)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_013badEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc162)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc163)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc164)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc165)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc20)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc166)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc167)
    cir.store %7, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc164)
    cir.br ^bb1 loc(#loc168)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc26)
    %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s8i>, !cir.bool loc(#loc169)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc170)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc28)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc30)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
    cir.br ^bb3 loc(#loc24)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc24)
  ^bb4:  // pred: ^bb3
    %14 = cir.const #cir.int<8> : !u64i loc(#loc171)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc33)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc172)
    cir.store %16, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc165)
    cir.br ^bb5 loc(#loc173)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc37)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc174)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc175)
  ^bb6:  // pred: ^bb5
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc39)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc40)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc41)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc39)
    cir.br ^bb7 loc(#loc35)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc35)
  ^bb8:  // pred: ^bb7
    %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc42)
    cir.store %23, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc176)
    cir.br ^bb9 loc(#loc177)
  ^bb9:  // pred: ^bb8
    %24 = cir.const #cir.int<8> : !u64i loc(#loc178)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc47)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc178)
    cir.call @_ZN12TwoIntsClassC2Ev(%27) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc13)
    cir.store %27, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc162)
    %28 = cir.const #cir.int<5> : !s32i loc(#loc48)
    %29 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc49)
    %30 = cir.get_member %29[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc50)
    cir.store %28, %30 : !s32i, !cir.ptr<!s32i> loc(#loc179)
    %31 = cir.const #cir.int<10> : !s32i loc(#loc51)
    %32 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc52)
    %33 = cir.get_member %32[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc53)
    cir.store %31, %33 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    %34 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc54)
    %35 = cir.get_member %34[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc50)
    %36 = cir.load %35 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    cir.call @printIntLine(%36) : (!s32i) -> () loc(#loc56)
    %37 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc57)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc58)
    %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc58)
    cir.call @free(%39) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc57)
    cir.br ^bb10 loc(#loc45)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc11)
  } loc(#loc161)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_01L7goodG2BEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc182)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc183)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc184)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc185)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc69)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc186)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc69)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc187)
    cir.store %7, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc184)
    cir.br ^bb1 loc(#loc188)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc74)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc75)
    %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s8i>, !cir.bool loc(#loc189)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc190)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc77)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc79)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc77)
    cir.br ^bb3 loc(#loc73)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc73)
  ^bb4:  // pred: ^bb3
    %14 = cir.const #cir.int<8> : !u64i loc(#loc191)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc82)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc192)
    cir.store %16, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc185)
    cir.br ^bb5 loc(#loc193)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc85)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc86)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc194)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc195)
  ^bb6:  // pred: ^bb5
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc88)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc89)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc90)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc88)
    cir.br ^bb7 loc(#loc84)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc84)
  ^bb8:  // pred: ^bb7
    %23 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc91)
    cir.store %23, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc196)
    cir.br ^bb9 loc(#loc197)
  ^bb9:  // pred: ^bb8
    %24 = cir.const #cir.int<8> : !u64i loc(#loc198)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc96)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc96)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc198)
    cir.call @_ZN12TwoIntsClassC2Ev(%27) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc62)
    cir.store %27, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc182)
    %28 = cir.const #cir.int<5> : !s32i loc(#loc97)
    %29 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc98)
    %30 = cir.get_member %29[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc50)
    cir.store %28, %30 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    %31 = cir.const #cir.int<10> : !s32i loc(#loc99)
    %32 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc100)
    %33 = cir.get_member %32[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc53)
    cir.store %31, %33 : !s32i, !cir.ptr<!s32i> loc(#loc200)
    %34 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc101)
    %35 = cir.get_member %34[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc50)
    %36 = cir.load %35 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    cir.call @printIntLine(%36) : (!s32i) -> () loc(#loc103)
    %37 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc104)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc105)
    %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc105)
    cir.call @free(%39) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc104)
    cir.br ^bb10 loc(#loc94)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc60)
  } loc(#loc181)
  cir.func linkonce_odr @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc106)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc106)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc106)
    cir.return loc(#loc106)
  } loc(#loc106)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_01L7goodB2GEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc202)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc203)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc204)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc205)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc117)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc206)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc117)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc207)
    cir.store %7, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc204)
    cir.br ^bb1 loc(#loc208)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc122)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc123)
    %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s8i>, !cir.bool loc(#loc209)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc210)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc125)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc126)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc127)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc125)
    cir.br ^bb3 loc(#loc121)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc121)
  ^bb4:  // pred: ^bb3
    %14 = cir.const #cir.int<8> : !u64i loc(#loc211)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc130)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc212)
    cir.store %16, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc205)
    cir.br ^bb5 loc(#loc213)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc134)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc214)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc215)
  ^bb6:  // pred: ^bb5
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc136)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc137)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc138)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc136)
    cir.br ^bb7 loc(#loc132)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc132)
  ^bb8:  // pred: ^bb7
    %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
    cir.store %23, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc216)
    cir.br ^bb9 loc(#loc217)
  ^bb9:  // pred: ^bb8
    %24 = cir.const #cir.int<4> : !u64i loc(#loc218)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc144)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc144)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc218)
    cir.call @_ZN11OneIntClassC2Ev(%27) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc110)
    cir.store %27, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc202)
    %28 = cir.const #cir.int<5> : !s32i loc(#loc145)
    %29 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc146)
    %30 = cir.get_member %29[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc147)
    cir.store %28, %30 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    %31 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc148)
    %32 = cir.get_member %31[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc147)
    %33 = cir.load %32 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc150)
    %34 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc151)
    %35 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc152)
    %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc152)
    cir.call @free(%36) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc151)
    cir.br ^bb10 loc(#loc142)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc108)
  } loc(#loc201)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_014goodEv() extra(#fn_attr2) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_01L7goodG2BEv() : () -> () loc(#loc155)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_01L7goodB2GEv() : () -> () loc(#loc156)
    cir.return loc(#loc154)
  } loc(#loc220)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("/usr/include/stdlib.h":687:1)
#loc9 = loc("/usr/include/stdlib.h":687:32)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":25:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":48:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":40:9)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":40:45)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":27:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":27:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":28:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":28:62)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":30:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":30:64)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":28:36)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":28:43)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":28:61)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":29:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":29:42)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":29:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":29:26)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":29:32)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":29:33)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":29:39)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":29:38)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":30:44)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":30:63)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":30:37)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":31:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":31:43)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":31:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":31:27)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":31:33)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":31:34)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":31:40)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":31:39)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":33:12)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":33:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":34:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":47:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":40:35)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":40:39)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":42:28)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":42:9)
#loc50 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":43:28)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":43:9)
#loc53 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":44:22)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":44:32)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":44:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":46:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":46:14)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":55:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":78:1)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":70:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":70:45)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":57:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":57:12)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":58:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":58:62)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":60:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":60:64)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":58:36)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":58:43)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":58:61)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":59:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":59:42)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":59:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":59:26)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":59:32)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":59:33)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":59:39)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":59:38)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":60:44)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":60:63)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":60:37)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":61:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":61:43)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":61:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":61:27)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":61:33)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":61:34)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":61:40)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":61:39)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":63:12)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":63:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":64:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":77:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":70:35)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":70:39)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":72:28)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":72:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":73:28)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":73:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":74:22)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":74:32)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":74:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":76:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":76:14)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":81:1)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":102:1)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":96:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":96:44)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":83:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":83:12)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":84:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":84:62)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":86:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":86:64)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":84:36)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":84:43)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":84:61)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":85:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":85:42)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":85:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":85:26)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":85:32)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":85:33)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":85:39)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":85:38)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":86:44)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":86:63)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":86:37)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":87:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":87:43)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":87:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":87:27)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":87:33)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":87:34)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":87:40)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":87:39)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":89:12)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":89:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":90:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":101:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":96:34)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":96:38)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":98:28)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":98:9)
#loc147 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":99:22)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":99:32)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":99:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":100:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":100:14)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":104:1)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":108:1)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":106:5)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_01.cpp":107:5)
#loc157 = loc(fused[#loc1, #loc2])
#loc158 = loc(fused[#loc3, #loc4])
#loc159 = loc(fused[#loc6, #loc7])
#loc160 = loc(fused[#loc8, #loc9])
#loc161 = loc(fused[#loc10, #loc11])
#loc162 = loc(fused[#loc12, #loc13])
#loc163 = loc(fused[#loc14, #loc15])
#loc164 = loc(fused[#loc16, #loc17])
#loc165 = loc(fused[#loc18, #loc19])
#loc166 = loc(fused[#loc21, #loc22])
#loc167 = loc(fused[#loc20, #loc17])
#loc168 = loc(fused[#loc23, #loc24])
#loc169 = loc(fused[#loc25, #loc26])
#loc170 = loc(fused[#loc27, #loc24])
#loc171 = loc(fused[#loc31, #loc32])
#loc172 = loc(fused[#loc33, #loc19])
#loc173 = loc(fused[#loc34, #loc35])
#loc174 = loc(fused[#loc36, #loc37])
#loc175 = loc(fused[#loc38, #loc35])
#loc176 = loc(fused[#loc43, #loc42])
#loc177 = loc(fused[#loc44, #loc45])
#loc178 = loc(fused[#loc46, #loc13])
#loc179 = loc(fused[#loc49, #loc48])
#loc180 = loc(fused[#loc52, #loc51])
#loc181 = loc(fused[#loc59, #loc60])
#loc182 = loc(fused[#loc61, #loc62])
#loc183 = loc(fused[#loc63, #loc64])
#loc184 = loc(fused[#loc65, #loc66])
#loc185 = loc(fused[#loc67, #loc68])
#loc186 = loc(fused[#loc70, #loc71])
#loc187 = loc(fused[#loc69, #loc66])
#loc188 = loc(fused[#loc72, #loc73])
#loc189 = loc(fused[#loc74, #loc75])
#loc190 = loc(fused[#loc76, #loc73])
#loc191 = loc(fused[#loc80, #loc81])
#loc192 = loc(fused[#loc82, #loc68])
#loc193 = loc(fused[#loc83, #loc84])
#loc194 = loc(fused[#loc85, #loc86])
#loc195 = loc(fused[#loc87, #loc84])
#loc196 = loc(fused[#loc92, #loc91])
#loc197 = loc(fused[#loc93, #loc94])
#loc198 = loc(fused[#loc95, #loc62])
#loc199 = loc(fused[#loc98, #loc97])
#loc200 = loc(fused[#loc100, #loc99])
#loc201 = loc(fused[#loc107, #loc108])
#loc202 = loc(fused[#loc109, #loc110])
#loc203 = loc(fused[#loc111, #loc112])
#loc204 = loc(fused[#loc113, #loc114])
#loc205 = loc(fused[#loc115, #loc116])
#loc206 = loc(fused[#loc118, #loc119])
#loc207 = loc(fused[#loc117, #loc114])
#loc208 = loc(fused[#loc120, #loc121])
#loc209 = loc(fused[#loc122, #loc123])
#loc210 = loc(fused[#loc124, #loc121])
#loc211 = loc(fused[#loc128, #loc129])
#loc212 = loc(fused[#loc130, #loc116])
#loc213 = loc(fused[#loc131, #loc132])
#loc214 = loc(fused[#loc133, #loc134])
#loc215 = loc(fused[#loc135, #loc132])
#loc216 = loc(fused[#loc140, #loc139])
#loc217 = loc(fused[#loc141, #loc142])
#loc218 = loc(fused[#loc143, #loc110])
#loc219 = loc(fused[#loc146, #loc145])
#loc220 = loc(fused[#loc153, #loc154])
