!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc291)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc292)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc293)
  cir.func private  @printIntLine(!s32i) loc(#loc294)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc295)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc11)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc296)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc298)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc299)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc300)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc299)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc300)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc23)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc301)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc303)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc28)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc29)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc303)
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc30)
      %10 = cir.binop(and, %8, %9) : !s32i loc(#loc30)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc30)
      %12 = cir.ternary(%11, true {
        %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
        %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc30)
        %18 = cir.const #cir.int<30> : !s32i loc(#loc30)
        %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc30)
        %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc30)
        %22 = cir.const #cir.int<15> : !s32i loc(#loc30)
        %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc30)
        %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc30)
        %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
        %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc30)
        %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc30)
        cir.yield %27 : !u32i loc(#loc30)
      }, false {
        %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
        %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc30)
        %18 = cir.const #cir.int<30> : !s32i loc(#loc30)
        %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc30)
        %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc30)
        %22 = cir.const #cir.int<15> : !s32i loc(#loc30)
        %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc30)
        %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc30)
        %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
        %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc30)
        %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc30)
        %28 = cir.unary(minus, %27) : !u32i, !u32i loc(#loc30)
        %29 = cir.const #cir.int<1> : !s32i loc(#loc30)
        %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc30)
        %31 = cir.binop(sub, %28, %30) : !u32i loc(#loc30)
        cir.yield %31 : !u32i loc(#loc30)
      }) : (!cir.bool) -> !u32i loc(#loc30)
      %13 = cir.cast(integral, %12 : !u32i), !s32i loc(#loc30)
      cir.store %13, %5 : !s32i, !cir.ptr<!s32i> loc(#loc304)
      %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc32)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
      cir.store %14, %15 : !s32i, !cir.ptr<!s32i> loc(#loc305)
    } loc(#loc302)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc307)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc38)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc39)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc307)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc309)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc310)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc46)
        %11 = cir.const #cir.int<10> : !s32i loc(#loc47)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc47)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc311)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc312)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc46)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc313)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc310)
        cir.scope {
          %20 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc52)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc53)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc53)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !s32i loc(#loc315)
          %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc54)
          cir.if %24 {
            %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc56)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc57)
            %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc58)
            cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc56)
          } loc(#loc316)
        } loc(#loc314)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc61)
          cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc318)
          cir.for : cond {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc63)
            %22 = cir.const #cir.int<10> : !s32i loc(#loc64)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !s32i loc(#loc319)
            %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc65)
            cir.condition(%24) loc(#loc65)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc67)
              %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc68)
              %23 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc69)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc70)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc321)
            } loc(#loc320)
            cir.yield loc(#loc60)
          } step {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc71)
            %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc72)
            cir.store %22, %8 : !s32i, !cir.ptr<!s32i> loc(#loc322)
            cir.yield loc(#loc317)
          } loc(#loc317)
        } loc(#loc317)
        cir.scope {
          %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc75)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc76)
          %22 = cir.cmp(ge, %20, %21) : !s32i, !s32i loc(#loc324)
          %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc77)
          cir.if %23 {
            %24 = cir.const #cir.int<1> : !s32i loc(#loc81)
            %25 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc82)
            %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc83)
            %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc84)
            cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc326)
            cir.scope {
              %28 = cir.const #cir.int<0> : !s32i loc(#loc87)
              cir.store %28, %8 : !s32i, !cir.ptr<!s32i> loc(#loc328)
              cir.for : cond {
                %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc89)
                %30 = cir.const #cir.int<10> : !s32i loc(#loc90)
                %31 = cir.cmp(lt, %29, %30) : !s32i, !s32i loc(#loc329)
                %32 = cir.cast(int_to_bool, %31 : !s32i), !cir.bool loc(#loc91)
                cir.condition(%32) loc(#loc91)
              } body {
                cir.scope {
                  %29 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc93)
                  %30 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc94)
                  %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc95)
                  %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc93)
                  cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc96)
                } loc(#loc330)
                cir.yield loc(#loc86)
              } step {
                %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc97)
                %30 = cir.unary(inc, %29) : !s32i, !s32i loc(#loc98)
                cir.store %30, %8 : !s32i, !cir.ptr<!s32i> loc(#loc331)
                cir.yield loc(#loc327)
              } loc(#loc327)
            } loc(#loc327)
          } else {
            %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc11)
            %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc11)
            cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc99)
          } loc(#loc325)
        } loc(#loc323)
        %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc100)
        %18 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc101)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc101)
        cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc100)
      } loc(#loc308)
    } loc(#loc306)
    cir.return loc(#loc15)
  } loc(#loc297)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc333)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc104)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc334)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc106)
    cir.return loc(#loc103)
  } loc(#loc332)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc336)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc337)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc338)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc337)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc338)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc116)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc117)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc339)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc341)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc122)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc123)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc341)
      %8 = cir.const #cir.int<7> : !s32i loc(#loc124)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc342)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc126)
      %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc127)
      cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc343)
    } loc(#loc340)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc345)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc132)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc133)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc345)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc347)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc348)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc140)
        %11 = cir.const #cir.int<10> : !s32i loc(#loc141)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc141)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc349)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc350)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc140)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc351)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc348)
        cir.scope {
          %20 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc146)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc147)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc147)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !s32i loc(#loc353)
          %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc148)
          cir.if %24 {
            %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc150)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc151)
            %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc152)
            cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc150)
          } loc(#loc354)
        } loc(#loc352)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc155)
          cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc356)
          cir.for : cond {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc157)
            %22 = cir.const #cir.int<10> : !s32i loc(#loc158)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !s32i loc(#loc357)
            %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc159)
            cir.condition(%24) loc(#loc159)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc161)
              %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc162)
              %23 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc163)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc164)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc359)
            } loc(#loc358)
            cir.yield loc(#loc154)
          } step {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc165)
            %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc166)
            cir.store %22, %8 : !s32i, !cir.ptr<!s32i> loc(#loc360)
            cir.yield loc(#loc355)
          } loc(#loc355)
        } loc(#loc355)
        cir.scope {
          %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc169)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc170)
          %22 = cir.cmp(ge, %20, %21) : !s32i, !s32i loc(#loc362)
          %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc171)
          cir.if %23 {
            %24 = cir.const #cir.int<1> : !s32i loc(#loc175)
            %25 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc176)
            %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc177)
            %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc178)
            cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc364)
            cir.scope {
              %28 = cir.const #cir.int<0> : !s32i loc(#loc181)
              cir.store %28, %8 : !s32i, !cir.ptr<!s32i> loc(#loc366)
              cir.for : cond {
                %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc183)
                %30 = cir.const #cir.int<10> : !s32i loc(#loc184)
                %31 = cir.cmp(lt, %29, %30) : !s32i, !s32i loc(#loc367)
                %32 = cir.cast(int_to_bool, %31 : !s32i), !cir.bool loc(#loc185)
                cir.condition(%32) loc(#loc185)
              } body {
                cir.scope {
                  %29 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc187)
                  %30 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc188)
                  %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc189)
                  %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc187)
                  cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc190)
                } loc(#loc368)
                cir.yield loc(#loc180)
              } step {
                %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc191)
                %30 = cir.unary(inc, %29) : !s32i, !s32i loc(#loc192)
                cir.store %30, %8 : !s32i, !cir.ptr<!s32i> loc(#loc369)
                cir.yield loc(#loc365)
              } loc(#loc365)
            } loc(#loc365)
          } else {
            %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc193)
            %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc193)
            cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc194)
          } loc(#loc363)
        } loc(#loc361)
        %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc195)
        %18 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc196)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc196)
        cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc195)
      } loc(#loc346)
    } loc(#loc344)
    cir.return loc(#loc109)
  } loc(#loc335)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc197)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc371)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc372)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc373)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc372)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc373)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc206)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc207)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc374)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc376)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc212)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc213)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc376)
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc214)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc214)
      %10 = cir.binop(and, %8, %9) : !s32i loc(#loc214)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc214)
      %12 = cir.ternary(%11, true {
        %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc214)
        %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc214)
        %18 = cir.const #cir.int<30> : !s32i loc(#loc214)
        %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc214)
        %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc214)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc214)
        %22 = cir.const #cir.int<15> : !s32i loc(#loc214)
        %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc214)
        %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc214)
        %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc214)
        %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc214)
        %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc214)
        cir.yield %27 : !u32i loc(#loc214)
      }, false {
        %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc214)
        %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc214)
        %18 = cir.const #cir.int<30> : !s32i loc(#loc214)
        %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc214)
        %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc214)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc214)
        %22 = cir.const #cir.int<15> : !s32i loc(#loc214)
        %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc214)
        %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc214)
        %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc214)
        %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc214)
        %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc214)
        %28 = cir.unary(minus, %27) : !u32i, !u32i loc(#loc214)
        %29 = cir.const #cir.int<1> : !s32i loc(#loc214)
        %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc214)
        %31 = cir.binop(sub, %28, %30) : !u32i loc(#loc214)
        cir.yield %31 : !u32i loc(#loc214)
      }) : (!cir.bool) -> !u32i loc(#loc214)
      %13 = cir.cast(integral, %12 : !u32i), !s32i loc(#loc214)
      cir.store %13, %5 : !s32i, !cir.ptr<!s32i> loc(#loc377)
      %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc216)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc217)
      cir.store %14, %15 : !s32i, !cir.ptr<!s32i> loc(#loc378)
    } loc(#loc375)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc380)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc222)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc223)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc380)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc382)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc383)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc230)
        %11 = cir.const #cir.int<10> : !s32i loc(#loc231)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc231)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc384)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc385)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc230)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc386)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc383)
        cir.scope {
          %20 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc236)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc237)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc237)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !s32i loc(#loc388)
          %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc238)
          cir.if %24 {
            %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc240)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc241)
            %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc242)
            cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc240)
          } loc(#loc389)
        } loc(#loc387)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc245)
          cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc391)
          cir.for : cond {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc247)
            %22 = cir.const #cir.int<10> : !s32i loc(#loc248)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !s32i loc(#loc392)
            %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc249)
            cir.condition(%24) loc(#loc249)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc251)
              %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc252)
              %23 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc253)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc254)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc394)
            } loc(#loc393)
            cir.yield loc(#loc244)
          } step {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc255)
            %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc256)
            cir.store %22, %8 : !s32i, !cir.ptr<!s32i> loc(#loc395)
            cir.yield loc(#loc390)
          } loc(#loc390)
        } loc(#loc390)
        cir.scope {
          %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc259)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc260)
          %22 = cir.cmp(ge, %20, %21) : !s32i, !s32i loc(#loc397)
          %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc261)
          %24 = cir.ternary(%23, true {
            %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc263)
            %26 = cir.const #cir.int<10> : !s32i loc(#loc264)
            %27 = cir.cmp(lt, %25, %26) : !s32i, !s32i loc(#loc398)
            %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc266)
            %29 = cir.ternary(%28, true {
              %30 = cir.const #true loc(#loc262)
              cir.yield %30 : !cir.bool loc(#loc262)
            }, false {
              %30 = cir.const #false loc(#loc262)
              cir.yield %30 : !cir.bool loc(#loc262)
            }) : (!cir.bool) -> !cir.bool loc(#loc262)
            cir.yield %29 : !cir.bool loc(#loc262)
          }, false {
            %25 = cir.const #false loc(#loc262)
            cir.yield %25 : !cir.bool loc(#loc262)
          }) : (!cir.bool) -> !cir.bool loc(#loc262)
          cir.if %24 {
            %25 = cir.const #cir.int<1> : !s32i loc(#loc270)
            %26 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc271)
            %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc272)
            %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc273)
            cir.store %25, %28 : !s32i, !cir.ptr<!s32i> loc(#loc400)
            cir.scope {
              %29 = cir.const #cir.int<0> : !s32i loc(#loc276)
              cir.store %29, %8 : !s32i, !cir.ptr<!s32i> loc(#loc402)
              cir.for : cond {
                %30 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc278)
                %31 = cir.const #cir.int<10> : !s32i loc(#loc279)
                %32 = cir.cmp(lt, %30, %31) : !s32i, !s32i loc(#loc403)
                %33 = cir.cast(int_to_bool, %32 : !s32i), !cir.bool loc(#loc280)
                cir.condition(%33) loc(#loc280)
              } body {
                cir.scope {
                  %30 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc282)
                  %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc283)
                  %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !s32i), !cir.ptr<!s32i> loc(#loc284)
                  %33 = cir.load %32 : !cir.ptr<!s32i>, !s32i loc(#loc282)
                  cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc285)
                } loc(#loc404)
                cir.yield loc(#loc275)
              } step {
                %30 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc286)
                %31 = cir.unary(inc, %30) : !s32i, !s32i loc(#loc287)
                cir.store %31, %8 : !s32i, !cir.ptr<!s32i> loc(#loc405)
                cir.yield loc(#loc401)
              } loc(#loc401)
            } loc(#loc401)
          } else {
            %25 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc197)
            %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc197)
            cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc288)
          } loc(#loc399)
        } loc(#loc396)
        %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc289)
        %18 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc290)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc290)
        cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc289)
      } loc(#loc381)
    } loc(#loc379)
    cir.return loc(#loc199)
  } loc(#loc370)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":59:27)
#loc12 = loc("/usr/include/stdlib.h":687:1)
#loc13 = loc("/usr/include/stdlib.h":687:32)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":22:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":64:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":24:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":24:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":25:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":25:22)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":26:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":26:22)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":28:13)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":28:12)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":28:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":29:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":34:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":30:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":30:21)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":30:20)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":32:16)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":32:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":33:21)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":33:10)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":33:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":35:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":63:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":36:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":36:21)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":36:20)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":37:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":62:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":38:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":38:17)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":39:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":39:58)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":39:35)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":39:42)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":39:47)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":39:57)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":40:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":40:43)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":40:17)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":40:27)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":40:24)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":40:33)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":40:34)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":40:40)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":40:39)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":42:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":45:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":42:22)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":42:18)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":42:25)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":42:29)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":42:27)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":43:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":44:29)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":44:17)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":44:24)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":44:25)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":42:34)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":42:33)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":48:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":60:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":48:17)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":48:25)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":48:22)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":49:13)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":56:13)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":58:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":50:32)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":50:17)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":50:24)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":50:28)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":52:17)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":55:17)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":52:25)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":52:21)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":52:28)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":52:32)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":52:30)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":53:17)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":54:34)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":54:41)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":54:42)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":54:21)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":52:37)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":52:36)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":59:17)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":61:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":61:18)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":160:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":164:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":162:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":162:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":163:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":163:13)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":71:1)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":114:1)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":73:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":73:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":74:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":74:22)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":75:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":75:22)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":77:13)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":77:12)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":77:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":78:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":84:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":79:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":79:21)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":79:20)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":82:16)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":82:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":83:21)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":83:10)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":83:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":85:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":113:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":86:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":86:21)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":86:20)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":87:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":112:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":88:13)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":88:17)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":89:13)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":89:58)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":89:35)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":89:42)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":89:47)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":89:57)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":90:13)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":90:43)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":90:17)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":90:27)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":90:24)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":90:33)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":90:34)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":90:40)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":90:39)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":92:13)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":95:13)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":92:22)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":92:18)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":92:25)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":92:29)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":92:27)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":93:13)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":94:29)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":94:17)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":94:24)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":94:25)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":92:34)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":92:33)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":98:13)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":110:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":98:17)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":98:25)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":98:22)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":99:13)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":106:13)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":108:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":100:32)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":100:17)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":100:24)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":100:28)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":102:17)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":105:17)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":102:25)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":102:21)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":102:28)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":102:32)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":102:30)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":103:17)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":104:34)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":104:41)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":104:42)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":104:21)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":102:37)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":102:36)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":109:27)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":109:17)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":111:13)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":111:18)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":153:27)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":117:1)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":158:1)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":119:5)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":119:9)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":120:5)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":120:22)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":121:5)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":121:22)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":123:13)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":123:12)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":123:5)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":124:5)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":129:5)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":125:9)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":125:21)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":125:20)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":127:16)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":127:9)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":128:21)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":128:10)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":128:9)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":130:5)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":157:5)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":131:9)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":131:21)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":131:20)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":132:9)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":156:9)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":133:13)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":133:17)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":134:13)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":134:58)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":134:35)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":134:42)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":134:47)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":134:57)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":135:13)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":135:43)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":135:17)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":135:27)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":135:24)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":135:33)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":135:34)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":135:40)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":135:39)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":137:13)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":140:13)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":137:22)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":137:18)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":137:25)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":137:29)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":137:27)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":138:13)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":139:29)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":139:17)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":139:24)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":139:25)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":137:34)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":137:33)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":142:13)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":154:13)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":142:17)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":142:25)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":142:22)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":142:27)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":142:30)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":142:38)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":142:40)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":142:35)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":143:13)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":150:13)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":152:13)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":144:32)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":144:17)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":144:24)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":144:28)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":146:17)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":149:17)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":146:25)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":146:21)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":146:28)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":146:32)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":146:30)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":147:17)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":148:34)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":148:41)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":148:42)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":148:21)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":146:37)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":146:36)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":153:17)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":155:13)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":155:18)
#loc291 = loc(fused[#loc1, #loc2])
#loc292 = loc(fused[#loc3, #loc4])
#loc293 = loc(fused[#loc5, #loc6])
#loc294 = loc(fused[#loc7, #loc8])
#loc295 = loc(fused[#loc9, #loc10])
#loc296 = loc(fused[#loc12, #loc13])
#loc297 = loc(fused[#loc14, #loc15])
#loc298 = loc(fused[#loc16, #loc17])
#loc299 = loc(fused[#loc18, #loc19])
#loc300 = loc(fused[#loc20, #loc21])
#loc301 = loc(fused[#loc24, #loc22])
#loc302 = loc(fused[#loc25, #loc26])
#loc303 = loc(fused[#loc27, #loc28])
#loc304 = loc(fused[#loc31, #loc30])
#loc305 = loc(fused[#loc34, #loc32])
#loc306 = loc(fused[#loc35, #loc36])
#loc307 = loc(fused[#loc37, #loc38])
#loc308 = loc(fused[#loc40, #loc41])
#loc309 = loc(fused[#loc42, #loc43])
#loc310 = loc(fused[#loc44, #loc45])
#loc311 = loc(fused[#loc48, #loc49])
#loc312 = loc(fused[#loc47, #loc49])
#loc313 = loc(fused[#loc46, #loc45])
#loc314 = loc(fused[#loc50, #loc51])
#loc315 = loc(fused[#loc52, #loc53])
#loc316 = loc(fused[#loc55, #loc51])
#loc317 = loc(fused[#loc59, #loc60])
#loc318 = loc(fused[#loc62, #loc61])
#loc319 = loc(fused[#loc63, #loc64])
#loc320 = loc(fused[#loc66, #loc60])
#loc321 = loc(fused[#loc68, #loc67])
#loc322 = loc(fused[#loc72, #loc71])
#loc323 = loc(fused[#loc73, #loc74])
#loc324 = loc(fused[#loc75, #loc76])
#loc325 = loc(fused[#loc78, #loc79, #loc80, #loc74])
#loc326 = loc(fused[#loc82, #loc81])
#loc327 = loc(fused[#loc85, #loc86])
#loc328 = loc(fused[#loc88, #loc87])
#loc329 = loc(fused[#loc89, #loc90])
#loc330 = loc(fused[#loc92, #loc86])
#loc331 = loc(fused[#loc98, #loc97])
#loc332 = loc(fused[#loc102, #loc103])
#loc333 = loc(fused[#loc104, #loc105])
#loc334 = loc(fused[#loc106, #loc107])
#loc335 = loc(fused[#loc108, #loc109])
#loc336 = loc(fused[#loc110, #loc111])
#loc337 = loc(fused[#loc112, #loc113])
#loc338 = loc(fused[#loc114, #loc115])
#loc339 = loc(fused[#loc118, #loc116])
#loc340 = loc(fused[#loc119, #loc120])
#loc341 = loc(fused[#loc121, #loc122])
#loc342 = loc(fused[#loc125, #loc124])
#loc343 = loc(fused[#loc128, #loc126])
#loc344 = loc(fused[#loc129, #loc130])
#loc345 = loc(fused[#loc131, #loc132])
#loc346 = loc(fused[#loc134, #loc135])
#loc347 = loc(fused[#loc136, #loc137])
#loc348 = loc(fused[#loc138, #loc139])
#loc349 = loc(fused[#loc142, #loc143])
#loc350 = loc(fused[#loc141, #loc143])
#loc351 = loc(fused[#loc140, #loc139])
#loc352 = loc(fused[#loc144, #loc145])
#loc353 = loc(fused[#loc146, #loc147])
#loc354 = loc(fused[#loc149, #loc145])
#loc355 = loc(fused[#loc153, #loc154])
#loc356 = loc(fused[#loc156, #loc155])
#loc357 = loc(fused[#loc157, #loc158])
#loc358 = loc(fused[#loc160, #loc154])
#loc359 = loc(fused[#loc162, #loc161])
#loc360 = loc(fused[#loc166, #loc165])
#loc361 = loc(fused[#loc167, #loc168])
#loc362 = loc(fused[#loc169, #loc170])
#loc363 = loc(fused[#loc172, #loc173, #loc174, #loc168])
#loc364 = loc(fused[#loc176, #loc175])
#loc365 = loc(fused[#loc179, #loc180])
#loc366 = loc(fused[#loc182, #loc181])
#loc367 = loc(fused[#loc183, #loc184])
#loc368 = loc(fused[#loc186, #loc180])
#loc369 = loc(fused[#loc192, #loc191])
#loc370 = loc(fused[#loc198, #loc199])
#loc371 = loc(fused[#loc200, #loc201])
#loc372 = loc(fused[#loc202, #loc203])
#loc373 = loc(fused[#loc204, #loc205])
#loc374 = loc(fused[#loc208, #loc206])
#loc375 = loc(fused[#loc209, #loc210])
#loc376 = loc(fused[#loc211, #loc212])
#loc377 = loc(fused[#loc215, #loc214])
#loc378 = loc(fused[#loc218, #loc216])
#loc379 = loc(fused[#loc219, #loc220])
#loc380 = loc(fused[#loc221, #loc222])
#loc381 = loc(fused[#loc224, #loc225])
#loc382 = loc(fused[#loc226, #loc227])
#loc383 = loc(fused[#loc228, #loc229])
#loc384 = loc(fused[#loc232, #loc233])
#loc385 = loc(fused[#loc231, #loc233])
#loc386 = loc(fused[#loc230, #loc229])
#loc387 = loc(fused[#loc234, #loc235])
#loc388 = loc(fused[#loc236, #loc237])
#loc389 = loc(fused[#loc239, #loc235])
#loc390 = loc(fused[#loc243, #loc244])
#loc391 = loc(fused[#loc246, #loc245])
#loc392 = loc(fused[#loc247, #loc248])
#loc393 = loc(fused[#loc250, #loc244])
#loc394 = loc(fused[#loc252, #loc251])
#loc395 = loc(fused[#loc256, #loc255])
#loc396 = loc(fused[#loc257, #loc258])
#loc397 = loc(fused[#loc259, #loc260])
#loc398 = loc(fused[#loc263, #loc265])
#loc399 = loc(fused[#loc267, #loc268, #loc269, #loc258])
#loc400 = loc(fused[#loc271, #loc270])
#loc401 = loc(fused[#loc274, #loc275])
#loc402 = loc(fused[#loc277, #loc276])
#loc403 = loc(fused[#loc278, #loc279])
#loc404 = loc(fused[#loc281, #loc275])
#loc405 = loc(fused[#loc287, #loc286])
