!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc105)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc106)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc108)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc109)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc10)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc10)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc10)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc10)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc110)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc10)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc109)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc12)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc12)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc12)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc12)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc12)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc12)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc110)
    cir.scope {
      cir.while {
        %19 = cir.const #cir.int<1> : !s32i loc(#loc15)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc15)
        cir.condition(%20) loc(#loc15)
      } do {
        %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc16)
        cir.store %19, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc112)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc18)
        %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc18)
        %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc19)
        %23 = cir.const #cir.int<0> : !s32i loc(#loc20)
        %24 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc21)
        cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc113)
        cir.break loc(#loc22)
      } loc(#loc111)
    } loc(#loc111)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc115)
      %20 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc116)
      %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc117)
      %22 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc115)
      cir.store %22, %19 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc115)
      %23 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc30)
      %24 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc31)
      %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc30)
      cir.store %25, %21 : !u64i, !cir.ptr<!u64i> loc(#loc118)
      cir.scope {
        %27 = cir.const #cir.int<0> : !s32i loc(#loc36)
        %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc36)
        cir.store %28, %20 : !u64i, !cir.ptr<!u64i> loc(#loc120)
        cir.for : cond {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc38)
          %30 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc39)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc40)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc40)
          %33 = cir.binop(add, %30, %32) : !u64i loc(#loc121)
          %34 = cir.cmp(lt, %29, %33) : !u64i, !s32i loc(#loc122)
          %35 = cir.cast(int_to_bool, %34 : !s32i), !cir.bool loc(#loc41)
          cir.condition(%35) loc(#loc41)
        } body {
          cir.scope {
            %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc43)
            %30 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc44)
            %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc44)
            %32 = cir.load %31 : !cir.ptr<!s8i>, !s8i loc(#loc44)
            %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
            %34 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc46)
            %35 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc47)
            cir.store %32, %35 : !s8i, !cir.ptr<!s8i> loc(#loc124)
          } loc(#loc123)
          cir.yield loc(#loc35)
        } step {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc49)
          %30 = cir.unary(inc, %29) : !u64i, !u64i loc(#loc50)
          cir.store %30, %20 : !u64i, !cir.ptr<!u64i> loc(#loc125)
          cir.yield loc(#loc119)
        } loc(#loc119)
      } loc(#loc119)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    } loc(#loc114)
    cir.return loc(#loc6)
  } loc(#loc107)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc127)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc55)
    cir.return loc(#loc54)
  } loc(#loc126)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc129)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc130)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc62)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc62)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc62)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc62)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc62)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc131)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc62)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc62)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc130)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc64)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc64)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc64)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc64)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc64)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc64)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc64)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc64)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc131)
    cir.scope {
      cir.while {
        %19 = cir.const #cir.int<1> : !s32i loc(#loc67)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc67)
        cir.condition(%20) loc(#loc67)
      } do {
        %19 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
        cir.store %19, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc133)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc70)
        %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc70)
        %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc71)
        %23 = cir.const #cir.int<0> : !s32i loc(#loc72)
        %24 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc73)
        cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc134)
        cir.break loc(#loc74)
      } loc(#loc132)
    } loc(#loc132)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc136)
      %20 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc137)
      %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc138)
      %22 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc136)
      cir.store %22, %19 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc136)
      %23 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc82)
      %24 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc83)
      %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc82)
      cir.store %25, %21 : !u64i, !cir.ptr<!u64i> loc(#loc139)
      cir.scope {
        %27 = cir.const #cir.int<0> : !s32i loc(#loc88)
        %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc88)
        cir.store %28, %20 : !u64i, !cir.ptr<!u64i> loc(#loc141)
        cir.for : cond {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc90)
          %30 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc91)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc92)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc92)
          %33 = cir.binop(add, %30, %32) : !u64i loc(#loc142)
          %34 = cir.cmp(lt, %29, %33) : !u64i, !s32i loc(#loc143)
          %35 = cir.cast(int_to_bool, %34 : !s32i), !cir.bool loc(#loc93)
          cir.condition(%35) loc(#loc93)
        } body {
          cir.scope {
            %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc95)
            %30 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc96)
            %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc96)
            %32 = cir.load %31 : !cir.ptr<!s8i>, !s8i loc(#loc96)
            %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc97)
            %34 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc98)
            %35 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc99)
            cir.store %32, %35 : !s8i, !cir.ptr<!s8i> loc(#loc145)
          } loc(#loc144)
          cir.yield loc(#loc87)
        } step {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc101)
          %30 = cir.unary(inc, %29) : !u64i, !u64i loc(#loc102)
          cir.store %30, %20 : !u64i, !cir.ptr<!u64i> loc(#loc146)
          cir.yield loc(#loc140)
        } loc(#loc140)
      } loc(#loc140)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc103)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc104)
    } loc(#loc135)
    cir.return loc(#loc58)
  } loc(#loc128)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":28:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":53:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":30:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":30:12)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":31:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":31:36)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":32:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":32:37)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":33:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":40:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":33:11)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":37:16)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":37:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":38:19)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":38:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":38:14)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":38:15)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":39:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":41:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":52:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":42:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":42:29)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":43:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":43:16)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":43:19)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":44:21)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":44:28)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":44:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":44:34)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":47:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":50:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":47:18)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":47:14)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":47:21)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":47:25)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":47:37)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":47:23)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":48:9)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":49:30)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":49:23)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":49:13)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":49:18)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":49:19)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":49:31)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":47:41)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":47:40)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":51:19)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":51:9)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":87:1)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":90:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":89:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":89:13)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":60:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":85:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":62:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":62:12)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":63:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":63:36)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":64:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":64:37)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":65:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":72:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":65:11)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":69:16)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":69:9)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":70:19)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":70:9)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":70:14)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":70:15)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":71:9)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":73:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":84:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":74:9)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":74:29)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":75:9)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":75:16)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":75:19)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":76:21)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":76:28)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":76:9)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":76:34)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":79:9)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":82:9)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":79:18)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":79:14)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":79:21)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":79:25)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":79:37)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":79:23)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":80:9)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":81:30)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":81:23)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":81:13)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":81:18)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":81:19)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":81:31)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":79:41)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":79:40)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":83:19)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c":83:9)
#loc105 = loc(fused[#loc1, #loc2])
#loc106 = loc(fused[#loc3, #loc4])
#loc107 = loc(fused[#loc5, #loc6])
#loc108 = loc(fused[#loc7, #loc8])
#loc109 = loc(fused[#loc9, #loc10])
#loc110 = loc(fused[#loc11, #loc12])
#loc111 = loc(fused[#loc13, #loc14])
#loc112 = loc(fused[#loc17, #loc16])
#loc113 = loc(fused[#loc19, #loc18])
#loc114 = loc(fused[#loc23, #loc24])
#loc115 = loc(fused[#loc25, #loc26])
#loc116 = loc(fused[#loc27, #loc28])
#loc117 = loc(fused[#loc27, #loc29])
#loc118 = loc(fused[#loc32, #loc33])
#loc119 = loc(fused[#loc34, #loc35])
#loc120 = loc(fused[#loc37, #loc36])
#loc121 = loc(fused[#loc39, #loc40])
#loc122 = loc(fused[#loc38, #loc40])
#loc123 = loc(fused[#loc42, #loc35])
#loc124 = loc(fused[#loc45, #loc48])
#loc125 = loc(fused[#loc50, #loc49])
#loc126 = loc(fused[#loc53, #loc54])
#loc127 = loc(fused[#loc55, #loc56])
#loc128 = loc(fused[#loc57, #loc58])
#loc129 = loc(fused[#loc59, #loc60])
#loc130 = loc(fused[#loc61, #loc62])
#loc131 = loc(fused[#loc63, #loc64])
#loc132 = loc(fused[#loc65, #loc66])
#loc133 = loc(fused[#loc69, #loc68])
#loc134 = loc(fused[#loc71, #loc70])
#loc135 = loc(fused[#loc75, #loc76])
#loc136 = loc(fused[#loc77, #loc78])
#loc137 = loc(fused[#loc79, #loc80])
#loc138 = loc(fused[#loc79, #loc81])
#loc139 = loc(fused[#loc84, #loc85])
#loc140 = loc(fused[#loc86, #loc87])
#loc141 = loc(fused[#loc89, #loc88])
#loc142 = loc(fused[#loc91, #loc92])
#loc143 = loc(fused[#loc90, #loc92])
#loc144 = loc(fused[#loc94, #loc87])
#loc145 = loc(fused[#loc97, #loc100])
#loc146 = loc(fused[#loc102, #loc101])
