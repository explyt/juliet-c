!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc204)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc205)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc206)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc207)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc209)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc210)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc15)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc211)
    cir.br ^bb1 loc(#loc212)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc213)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc19)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc214)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc22)
    %7 = cir.const #cir.int<50> : !s32i loc(#loc23)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc23)
    %9 = cir.const #cir.int<1> : !u64i loc(#loc215)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc216)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc217)
    cir.store %12, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc218)
    cir.br ^bb3 loc(#loc219)
  ^bb3:  // pred: ^bb2
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc31)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc220)
    cir.brcond %16 ^bb4, ^bb5 loc(#loc221)
  ^bb4:  // pred: ^bb3
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc33)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc35)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
    cir.br ^bb5 loc(#loc29)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc29)
  ^bb6:  // pred: ^bb5
    %20 = cir.const #cir.int<0> : !s32i loc(#loc36)
    %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc36)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc38)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc39)
    cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc222)
    cir.br ^bb7 loc(#loc18)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc18)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc223)
  ^bb9:  // pred: ^bb8
    %25 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc42)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc42)
    %27 = cir.const #cir.int<67> : !s32i loc(#loc43)
    %28 = cir.const #cir.int<100> : !s32i loc(#loc44)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc44)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc44)
    cir.libc.memset %31 bytes from %26 set to %27 : !cir.ptr<!void>, !s32i, !u64i loc(#loc224)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc48)
    %33 = cir.cast(integral, %32 : !s32i), !s8i loc(#loc48)
    %34 = cir.const #cir.int<100> : !s32i loc(#loc49)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %36 = cir.binop(sub, %34, %35) nsw : !s32i loc(#loc49)
    %37 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc51)
    %38 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %36 : !s32i), !cir.ptr<!s8i> loc(#loc51)
    cir.store %33, %38 : !s8i, !cir.ptr<!s8i> loc(#loc225)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc52)
    %41 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc53)
    %42 = cir.cast(bitcast, %41 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc53)
    %43 = cir.const #cir.int<100> : !s32i loc(#loc54)
    %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc54)
    %45 = cir.const #cir.int<1> : !u64i loc(#loc226)
    %46 = cir.binop(mul, %44, %45) : !u64i loc(#loc227)
    cir.libc.memmove %46 bytes from %42 to %40 : !cir.ptr<!void>, !u64i loc(#loc228)
    %47 = cir.const #cir.int<0> : !s32i loc(#loc59)
    %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc59)
    %49 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
    %50 = cir.const #cir.int<100> : !s32i loc(#loc61)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %52 = cir.binop(sub, %50, %51) nsw : !s32i loc(#loc61)
    %53 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %52 : !s32i), !cir.ptr<!s8i> loc(#loc63)
    cir.store %48, %53 : !s8i, !cir.ptr<!s8i> loc(#loc229)
    %54 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%54) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %55 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc66)
    %56 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc67)
    %57 = cir.cast(bitcast, %56 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc67)
    cir.call @free(%57) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc66)
    cir.br ^bb10 loc(#loc41)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc10)
  } loc(#loc208)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc231)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc70)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc232)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc72)
    cir.return loc(#loc69)
  } loc(#loc230)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc75)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc76)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc234)
    cir.return %2 : !s32i loc(#loc234)
  } loc(#loc233)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc78)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc236)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc237)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc85)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc238)
    cir.br ^bb1 loc(#loc239)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc240)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc89)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc89)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc241)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc78)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    cir.br ^bb8 loc(#loc92)
  ^bb3:  // pred: ^bb1
    %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc95)
    %9 = cir.const #cir.int<100> : !s32i loc(#loc96)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc96)
    %11 = cir.const #cir.int<1> : !u64i loc(#loc242)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc243)
    %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc95)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc244)
    cir.store %14, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc245)
    cir.br ^bb4 loc(#loc246)
  ^bb4:  // pred: ^bb3
    %15 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc103)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc104)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc104)
    %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc247)
    cir.brcond %18 ^bb5, ^bb6 loc(#loc248)
  ^bb5:  // pred: ^bb4
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc106)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc107)
    %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc108)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc106)
    cir.br ^bb6 loc(#loc102)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc102)
  ^bb7:  // pred: ^bb6
    %22 = cir.const #cir.int<0> : !s32i loc(#loc109)
    %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc109)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc110)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc111)
    %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc112)
    cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc249)
    cir.br ^bb8 loc(#loc88)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc88)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc250)
  ^bb10:  // pred: ^bb9
    %27 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc115)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc115)
    %29 = cir.const #cir.int<67> : !s32i loc(#loc116)
    %30 = cir.const #cir.int<100> : !s32i loc(#loc117)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %32 = cir.binop(sub, %30, %31) nsw : !s32i loc(#loc117)
    %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc117)
    cir.libc.memset %33 bytes from %28 set to %29 : !cir.ptr<!void>, !s32i, !u64i loc(#loc251)
    %34 = cir.const #cir.int<0> : !s32i loc(#loc121)
    %35 = cir.cast(integral, %34 : !s32i), !s8i loc(#loc121)
    %36 = cir.const #cir.int<100> : !s32i loc(#loc122)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc123)
    %38 = cir.binop(sub, %36, %37) nsw : !s32i loc(#loc122)
    %39 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc124)
    %40 = cir.ptr_stride(%39 : !cir.ptr<!s8i>, %38 : !s32i), !cir.ptr<!s8i> loc(#loc124)
    cir.store %35, %40 : !s8i, !cir.ptr<!s8i> loc(#loc252)
    %41 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
    %42 = cir.cast(bitcast, %41 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc125)
    %43 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc126)
    %44 = cir.cast(bitcast, %43 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc126)
    %45 = cir.const #cir.int<100> : !s32i loc(#loc127)
    %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc127)
    %47 = cir.const #cir.int<1> : !u64i loc(#loc253)
    %48 = cir.binop(mul, %46, %47) : !u64i loc(#loc254)
    cir.libc.memmove %48 bytes from %44 to %42 : !cir.ptr<!void>, !u64i loc(#loc255)
    %49 = cir.const #cir.int<0> : !s32i loc(#loc132)
    %50 = cir.cast(integral, %49 : !s32i), !s8i loc(#loc132)
    %51 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
    %52 = cir.const #cir.int<100> : !s32i loc(#loc134)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc135)
    %54 = cir.binop(sub, %52, %53) nsw : !s32i loc(#loc134)
    %55 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc136)
    cir.store %50, %55 : !s8i, !cir.ptr<!s8i> loc(#loc256)
    %56 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc137)
    cir.call @printLine(%56) : (!cir.ptr<!s8i>) -> () loc(#loc138)
    %57 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc139)
    %58 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc140)
    %59 = cir.cast(bitcast, %58 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc140)
    cir.call @free(%59) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc139)
    cir.br ^bb11 loc(#loc114)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc80)
  } loc(#loc235)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc142)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc143)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc258)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc258)
    cir.return %2 : !s32i loc(#loc258)
  } loc(#loc257)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc260)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc261)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc151)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc262)
    cir.br ^bb1 loc(#loc263)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc264)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc155)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc155)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc265)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc158)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc159)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc159)
    %9 = cir.const #cir.int<1> : !u64i loc(#loc266)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc267)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc158)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc268)
    cir.store %12, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc269)
    cir.br ^bb3 loc(#loc270)
  ^bb3:  // pred: ^bb2
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc166)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc167)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc167)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc271)
    cir.brcond %16 ^bb4, ^bb5 loc(#loc272)
  ^bb4:  // pred: ^bb3
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc169)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc170)
    %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc171)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc169)
    cir.br ^bb5 loc(#loc165)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc165)
  ^bb6:  // pred: ^bb5
    %20 = cir.const #cir.int<0> : !s32i loc(#loc172)
    %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc172)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc173)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc174)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc175)
    cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc273)
    cir.br ^bb7 loc(#loc154)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc154)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc274)
  ^bb9:  // pred: ^bb8
    %25 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc178)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc178)
    %27 = cir.const #cir.int<67> : !s32i loc(#loc179)
    %28 = cir.const #cir.int<100> : !s32i loc(#loc180)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc181)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc180)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc180)
    cir.libc.memset %31 bytes from %26 set to %27 : !cir.ptr<!void>, !s32i, !u64i loc(#loc275)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc184)
    %33 = cir.cast(integral, %32 : !s32i), !s8i loc(#loc184)
    %34 = cir.const #cir.int<100> : !s32i loc(#loc185)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc186)
    %36 = cir.binop(sub, %34, %35) nsw : !s32i loc(#loc185)
    %37 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc187)
    %38 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %36 : !s32i), !cir.ptr<!s8i> loc(#loc187)
    cir.store %33, %38 : !s8i, !cir.ptr<!s8i> loc(#loc276)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc188)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc188)
    %41 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc189)
    %42 = cir.cast(bitcast, %41 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc189)
    %43 = cir.const #cir.int<100> : !s32i loc(#loc190)
    %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc190)
    %45 = cir.const #cir.int<1> : !u64i loc(#loc277)
    %46 = cir.binop(mul, %44, %45) : !u64i loc(#loc278)
    cir.libc.memmove %46 bytes from %42 to %40 : !cir.ptr<!void>, !u64i loc(#loc279)
    %47 = cir.const #cir.int<0> : !s32i loc(#loc195)
    %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc195)
    %49 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc196)
    %50 = cir.const #cir.int<100> : !s32i loc(#loc197)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc198)
    %52 = cir.binop(sub, %50, %51) nsw : !s32i loc(#loc197)
    %53 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %52 : !s32i), !cir.ptr<!s8i> loc(#loc199)
    cir.store %48, %53 : !s8i, !cir.ptr<!s8i> loc(#loc280)
    %54 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc200)
    cir.call @printLine(%54) : (!cir.ptr<!s8i>) -> () loc(#loc201)
    %55 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc202)
    %56 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc203)
    %57 = cir.cast(bitcast, %56 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc203)
    cir.call @free(%57) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc202)
    cir.br ^bb10 loc(#loc177)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc146)
  } loc(#loc259)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":37:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":58:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":49:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":49:24)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":39:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":39:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":40:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":40:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":41:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":47:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":41:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":41:26)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":42:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":44:24)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":44:31)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":44:34)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":44:45)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":44:46)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":44:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":45:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":45:37)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":45:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":45:21)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":45:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":45:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":45:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":45:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":46:19)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":46:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":46:14)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":46:15)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":48:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":57:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":50:16)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":50:24)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":50:29)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":50:33)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":50:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":50:34)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":51:25)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":51:16)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":51:20)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":51:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":53:17)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":53:23)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":53:31)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":53:35)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":53:46)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":53:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":53:47)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":54:23)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":54:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":54:14)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":54:18)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":54:19)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":55:19)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":55:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":56:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":56:14)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":117:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":121:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":119:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":119:14)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":120:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":120:14)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":25:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":28:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":27:12)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":27:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":72:19)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":65:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":91:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":82:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":82:24)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":67:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":67:12)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":68:12)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":68:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":69:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":80:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":69:8)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":69:27)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":70:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":73:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":75:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":72:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":77:24)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":77:31)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":77:35)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":77:46)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":77:47)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":77:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":78:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":78:37)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":78:13)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":78:21)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":78:27)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":78:28)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":78:34)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":78:33)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":79:19)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":79:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":79:14)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":79:15)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":81:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":90:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":83:16)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":83:24)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":83:29)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":83:33)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":83:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":83:34)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":84:25)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":84:16)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":84:20)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":84:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":86:17)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":86:23)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":86:31)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":86:35)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":86:46)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":86:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":86:47)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":87:23)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":87:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":87:14)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":87:18)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":87:19)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":88:19)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":88:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":89:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":89:14)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":30:1)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":33:1)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":32:12)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":32:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":94:1)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":115:1)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":106:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":106:24)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":96:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":96:12)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":97:12)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":97:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":98:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":104:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":98:8)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":98:26)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":99:5)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":101:24)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":101:31)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":101:35)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":101:46)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":101:47)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":101:9)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":102:9)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":102:37)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":102:13)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":102:21)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":102:27)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":102:28)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":102:34)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":102:33)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":103:19)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":103:9)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":103:14)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":103:15)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":105:5)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":114:5)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":107:16)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":107:24)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":107:29)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":107:33)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":107:9)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":107:34)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":108:25)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":108:16)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":108:20)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":108:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":110:17)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":110:23)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":110:31)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":110:35)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":110:46)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":110:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":110:47)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":111:23)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":111:9)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":111:14)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":111:18)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":111:19)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":112:19)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":112:9)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":113:9)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c":113:14)
#loc204 = loc(fused[#loc1, #loc2])
#loc205 = loc(fused[#loc3, #loc4])
#loc206 = loc(fused[#loc5, #loc6])
#loc207 = loc(fused[#loc7, #loc8])
#loc208 = loc(fused[#loc9, #loc10])
#loc209 = loc(fused[#loc11, #loc12])
#loc210 = loc(fused[#loc13, #loc14])
#loc211 = loc(fused[#loc16, #loc15])
#loc212 = loc(fused[#loc17, #loc18])
#loc213 = loc(fused[#loc19, #loc20])
#loc214 = loc(fused[#loc21, #loc18])
#loc215 = loc(fused[#loc24, #loc25])
#loc216 = loc(fused[#loc23, #loc25])
#loc217 = loc(fused[#loc22, #loc26])
#loc218 = loc(fused[#loc27, #loc26])
#loc219 = loc(fused[#loc28, #loc29])
#loc220 = loc(fused[#loc30, #loc31])
#loc221 = loc(fused[#loc32, #loc29])
#loc222 = loc(fused[#loc37, #loc36])
#loc223 = loc(fused[#loc40, #loc41])
#loc224 = loc(fused[#loc46, #loc47])
#loc225 = loc(fused[#loc51, #loc48])
#loc226 = loc(fused[#loc55, #loc56])
#loc227 = loc(fused[#loc54, #loc56])
#loc228 = loc(fused[#loc57, #loc58])
#loc229 = loc(fused[#loc60, #loc59])
#loc230 = loc(fused[#loc68, #loc69])
#loc231 = loc(fused[#loc70, #loc71])
#loc232 = loc(fused[#loc72, #loc73])
#loc233 = loc(fused[#loc74, #loc75])
#loc234 = loc(fused[#loc77, #loc76])
#loc235 = loc(fused[#loc79, #loc80])
#loc236 = loc(fused[#loc81, #loc82])
#loc237 = loc(fused[#loc83, #loc84])
#loc238 = loc(fused[#loc86, #loc85])
#loc239 = loc(fused[#loc87, #loc88])
#loc240 = loc(fused[#loc89, #loc90])
#loc241 = loc(fused[#loc91, #loc92, #loc93, #loc88])
#loc242 = loc(fused[#loc97, #loc98])
#loc243 = loc(fused[#loc96, #loc98])
#loc244 = loc(fused[#loc95, #loc99])
#loc245 = loc(fused[#loc100, #loc99])
#loc246 = loc(fused[#loc101, #loc102])
#loc247 = loc(fused[#loc103, #loc104])
#loc248 = loc(fused[#loc105, #loc102])
#loc249 = loc(fused[#loc110, #loc109])
#loc250 = loc(fused[#loc113, #loc114])
#loc251 = loc(fused[#loc119, #loc120])
#loc252 = loc(fused[#loc124, #loc121])
#loc253 = loc(fused[#loc128, #loc129])
#loc254 = loc(fused[#loc127, #loc129])
#loc255 = loc(fused[#loc130, #loc131])
#loc256 = loc(fused[#loc133, #loc132])
#loc257 = loc(fused[#loc141, #loc142])
#loc258 = loc(fused[#loc144, #loc143])
#loc259 = loc(fused[#loc145, #loc146])
#loc260 = loc(fused[#loc147, #loc148])
#loc261 = loc(fused[#loc149, #loc150])
#loc262 = loc(fused[#loc152, #loc151])
#loc263 = loc(fused[#loc153, #loc154])
#loc264 = loc(fused[#loc155, #loc156])
#loc265 = loc(fused[#loc157, #loc154])
#loc266 = loc(fused[#loc160, #loc161])
#loc267 = loc(fused[#loc159, #loc161])
#loc268 = loc(fused[#loc158, #loc162])
#loc269 = loc(fused[#loc163, #loc162])
#loc270 = loc(fused[#loc164, #loc165])
#loc271 = loc(fused[#loc166, #loc167])
#loc272 = loc(fused[#loc168, #loc165])
#loc273 = loc(fused[#loc173, #loc172])
#loc274 = loc(fused[#loc176, #loc177])
#loc275 = loc(fused[#loc182, #loc183])
#loc276 = loc(fused[#loc187, #loc184])
#loc277 = loc(fused[#loc191, #loc192])
#loc278 = loc(fused[#loc190, #loc192])
#loc279 = loc(fused[#loc193, #loc194])
#loc280 = loc(fused[#loc196, #loc195])
