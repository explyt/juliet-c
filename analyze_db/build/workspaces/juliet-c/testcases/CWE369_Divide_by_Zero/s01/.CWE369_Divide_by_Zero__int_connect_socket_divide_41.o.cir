!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc20 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":44:21)
#loc21 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":44:25)
#loc135 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":136:25)
#loc136 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":136:29)
#loc246 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":119:25)
#loc247 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":119:29)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc272 = loc(fused[#loc20, #loc21])
#loc315 = loc(fused[#loc135, #loc136])
#loc357 = loc(fused[#loc246, #loc247])
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_divide_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc263)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc264)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc265)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc266)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc267)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc268)
  cir.func private @close(!s32i) -> !s32i loc(#loc269)
  cir.func private @printIntLine(!s32i) loc(#loc270)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc20, #loc21])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc272)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc22)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc23)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %3 = cir.binop(div, %1, %2) : !s32i loc(#loc273)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc25)
    cir.return loc(#loc19)
  } loc(#loc271)
  cir.func no_proto @CWE369_Divide_by_Zero__int_connect_socket_divide_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc275)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc31)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc276)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc278)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc279)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc280)
      %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc281)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc40)
      %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc40)
      cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc280)
      cir.scope {
        cir.do {
          cir.scope {
            %10 = cir.const #cir.int<2> : !s32i loc(#loc47)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc48)
            %12 = cir.const #cir.int<6> : !s32i loc(#loc49)
            %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc50)
            cir.store %13, %6 : !s32i, !cir.ptr<!s32i> loc(#loc284)
            cir.scope {
              %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc55)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc56)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc56)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc286)
              cir.if %55 {
                cir.break loc(#loc58)
              } loc(#loc287)
            } loc(#loc285)
            %14 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc288)
            %15 = cir.const #cir.int<0> : !s32i loc(#loc61)
            %16 = cir.const #cir.int<16> : !u64i loc(#loc289)
            cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc290)
            %17 = cir.const #cir.int<2> : !s32i loc(#loc66)
            %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc66)
            %19 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
            cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc291)
            %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
            %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
            %22 = cir.call @inet_addr(%21) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc69)
            %23 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc70)
            %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc71)
            cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc292)
            %25 = cir.const #cir.int<27015> : !s32i loc(#loc74)
            %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc74)
            %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc75)
            %28 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc76)
            cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc293)
            cir.scope {
              %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc81)
              %53 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc295)
              %54 = cir.const #cir.int<16> : !u64i loc(#loc296)
              %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc296)
              %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc86)
              %57 = cir.const #cir.int<1> : !s32i loc(#loc87)
              %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc87)
              %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc297)
              cir.if %59 {
                cir.break loc(#loc89)
              } loc(#loc298)
            } loc(#loc294)
            %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc90)
            %30 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc91)
            %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc91)
            %32 = cir.const #cir.int<3> : !s32i loc(#loc92)
            %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc92)
            %34 = cir.const #cir.int<4> : !u64i loc(#loc92)
            %35 = cir.binop(mul, %33, %34) : !u64i loc(#loc92)
            %36 = cir.const #cir.int<2> : !s32i loc(#loc92)
            %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc92)
            %38 = cir.binop(add, %35, %37) : !u64i loc(#loc92)
            %39 = cir.const #cir.int<1> : !s32i loc(#loc93)
            %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc93)
            %41 = cir.binop(sub, %38, %40) : !u64i loc(#loc299)
            %42 = cir.const #cir.int<0> : !s32i loc(#loc94)
            %43 = cir.call @recv(%29, %31, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc95)
            %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc95)
            cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc300)
            cir.scope {
              %52 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc100)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc101)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc101)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc302)
              %56 = cir.ternary(%55, true {
                %57 = cir.const #true loc(#loc102)
                cir.yield %57 : !cir.bool loc(#loc102)
              }, false {
                %57 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc103)
                %58 = cir.const #cir.int<0> : !s32i loc(#loc104)
                %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc303)
                %60 = cir.ternary(%59, true {
                  %61 = cir.const #true loc(#loc102)
                  cir.yield %61 : !cir.bool loc(#loc102)
                }, false {
                  %61 = cir.const #false loc(#loc102)
                  cir.yield %61 : !cir.bool loc(#loc102)
                }) : (!cir.bool) -> !cir.bool loc(#loc102)
                cir.yield %60 : !cir.bool loc(#loc102)
              }) : (!cir.bool) -> !cir.bool loc(#loc102)
              cir.if %56 {
                cir.break loc(#loc106)
              } loc(#loc304)
            } loc(#loc301)
            %45 = cir.const #cir.int<0> : !s32i loc(#loc107)
            %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc107)
            %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc108)
            %48 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc109)
            %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc109)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc305)
            %50 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc110)
            %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc111)
            cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc306)
          } loc(#loc283)
          cir.yield loc(#loc44)
        } while {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc114)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc114)
          cir.condition(%11) loc(#loc114)
        } loc(#loc282)
      } loc(#loc282)
      cir.scope {
        %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc117)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc118)
        %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc118)
        %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc308)
        cir.if %13 {
          %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc120)
          %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc121)
        } loc(#loc309)
      } loc(#loc307)
    } loc(#loc277)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
    cir.call @badSink(%3) : (!s32i) -> () loc(#loc123)
    cir.return loc(#loc27)
  } loc(#loc274)
  cir.func no_proto @CWE369_Divide_by_Zero__int_connect_socket_divide_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc311)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc126)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc312)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc128)
    cir.return loc(#loc125)
  } loc(#loc310)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc313)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc132)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc135, #loc136])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc315)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc137)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc140)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc141)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc317)
      cir.if %3 {
        %4 = cir.const #cir.int<100> : !s32i loc(#loc145)
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc146)
        %6 = cir.binop(div, %4, %5) : !s32i loc(#loc319)
        cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc147)
      } else {
        %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc132)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc132)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc148)
      } loc(#loc318)
    } loc(#loc316)
    cir.return loc(#loc134)
  } loc(#loc314)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc321)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc153)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc154)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc322)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc324)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc325)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc326)
      %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc327)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc163)
      %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc163)
      cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc326)
      cir.scope {
        cir.do {
          cir.scope {
            %10 = cir.const #cir.int<2> : !s32i loc(#loc170)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc171)
            %12 = cir.const #cir.int<6> : !s32i loc(#loc172)
            %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc173)
            cir.store %13, %6 : !s32i, !cir.ptr<!s32i> loc(#loc330)
            cir.scope {
              %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc178)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc179)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc179)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc332)
              cir.if %55 {
                cir.break loc(#loc181)
              } loc(#loc333)
            } loc(#loc331)
            %14 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc334)
            %15 = cir.const #cir.int<0> : !s32i loc(#loc184)
            %16 = cir.const #cir.int<16> : !u64i loc(#loc335)
            cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc336)
            %17 = cir.const #cir.int<2> : !s32i loc(#loc189)
            %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc189)
            %19 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
            cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc337)
            %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc191)
            %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc191)
            %22 = cir.call @inet_addr(%21) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc192)
            %23 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc70)
            %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc71)
            cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc338)
            %25 = cir.const #cir.int<27015> : !s32i loc(#loc195)
            %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc195)
            %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc196)
            %28 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc76)
            cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc339)
            cir.scope {
              %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc201)
              %53 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc341)
              %54 = cir.const #cir.int<16> : !u64i loc(#loc342)
              %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc342)
              %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc206)
              %57 = cir.const #cir.int<1> : !s32i loc(#loc207)
              %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc207)
              %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc343)
              cir.if %59 {
                cir.break loc(#loc209)
              } loc(#loc344)
            } loc(#loc340)
            %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc210)
            %30 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc211)
            %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc211)
            %32 = cir.const #cir.int<3> : !s32i loc(#loc212)
            %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc212)
            %34 = cir.const #cir.int<4> : !u64i loc(#loc212)
            %35 = cir.binop(mul, %33, %34) : !u64i loc(#loc212)
            %36 = cir.const #cir.int<2> : !s32i loc(#loc212)
            %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc212)
            %38 = cir.binop(add, %35, %37) : !u64i loc(#loc212)
            %39 = cir.const #cir.int<1> : !s32i loc(#loc213)
            %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc213)
            %41 = cir.binop(sub, %38, %40) : !u64i loc(#loc345)
            %42 = cir.const #cir.int<0> : !s32i loc(#loc214)
            %43 = cir.call @recv(%29, %31, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc215)
            %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc215)
            cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc346)
            cir.scope {
              %52 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc220)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc221)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc221)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc348)
              %56 = cir.ternary(%55, true {
                %57 = cir.const #true loc(#loc222)
                cir.yield %57 : !cir.bool loc(#loc222)
              }, false {
                %57 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc223)
                %58 = cir.const #cir.int<0> : !s32i loc(#loc224)
                %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc349)
                %60 = cir.ternary(%59, true {
                  %61 = cir.const #true loc(#loc222)
                  cir.yield %61 : !cir.bool loc(#loc222)
                }, false {
                  %61 = cir.const #false loc(#loc222)
                  cir.yield %61 : !cir.bool loc(#loc222)
                }) : (!cir.bool) -> !cir.bool loc(#loc222)
                cir.yield %60 : !cir.bool loc(#loc222)
              }) : (!cir.bool) -> !cir.bool loc(#loc222)
              cir.if %56 {
                cir.break loc(#loc226)
              } loc(#loc350)
            } loc(#loc347)
            %45 = cir.const #cir.int<0> : !s32i loc(#loc227)
            %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc227)
            %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc228)
            %48 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc229)
            %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc229)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc351)
            %50 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc230)
            %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc231)
            cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc352)
          } loc(#loc329)
          cir.yield loc(#loc167)
        } while {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc234)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc234)
          cir.condition(%11) loc(#loc234)
        } loc(#loc328)
      } loc(#loc328)
      cir.scope {
        %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc237)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc238)
        %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc238)
        %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc354)
        cir.if %13 {
          %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc240)
          %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc241)
        } loc(#loc355)
      } loc(#loc353)
    } loc(#loc323)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc242)
    cir.call @goodB2GSink(%3) : (!s32i) -> () loc(#loc243)
    cir.return loc(#loc150)
  } loc(#loc320)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc246, #loc247])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc357)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc248)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc249)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc250)
    %3 = cir.binop(div, %1, %2) : !s32i loc(#loc358)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc251)
    cir.return loc(#loc245)
  } loc(#loc356)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc360)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc256)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc257)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc361)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc259)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc362)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc261)
    cir.call @goodG2BSink(%4) : (!s32i) -> () loc(#loc262)
    cir.return loc(#loc253)
  } loc(#loc359)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":81:49)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":44:1)
#loc19 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":48:1)
#loc22 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":45:1)
#loc23 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":47:18)
#loc24 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":47:24)
#loc25 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":47:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":50:1)
#loc27 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":112:1)
#loc28 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":52:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":52:9)
#loc30 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":54:13)
#loc31 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":54:12)
#loc32 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":54:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":55:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":110:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":60:9)
#loc36 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":60:13)
#loc37 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":61:9)
#loc38 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":61:28)
#loc39 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":62:9)
#loc40 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":62:32)
#loc41 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":63:9)
#loc42 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":63:41)
#loc43 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":64:9)
#loc44 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":99:17)
#loc45 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":65:9)
#loc46 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":98:9)
#loc47 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":74:36)
#loc48 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":74:45)
#loc49 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":74:58)
#loc50 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":74:29)
#loc51 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":74:13)
#loc52 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":74:69)
#loc53 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":75:13)
#loc54 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":78:13)
#loc55 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":75:17)
#loc56 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":75:34)
#loc57 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":76:13)
#loc58 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":77:17)
#loc59 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":79:20)
#loc60 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":79:21)
#loc61 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":79:30)
#loc62 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":79:33)
#loc63 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":79:47)
#loc64 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":79:13)
#loc65 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":79:48)
#loc66 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":80:34)
#loc67 = loc("/usr/include/netinet/in.h":249:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":80:13)
#loc69 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":81:39)
#loc70 = loc("/usr/include/netinet/in.h":251:20)
#loc71 = loc("/usr/include/netinet/in.h":33:15)
#loc72 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":81:13)
#loc73 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":81:59)
#loc74 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":82:38)
#loc75 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":82:32)
#loc76 = loc("/usr/include/netinet/in.h":250:15)
#loc77 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":82:13)
#loc78 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":82:46)
#loc79 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":83:13)
#loc80 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":86:13)
#loc81 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":83:25)
#loc82 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":83:58)
#loc83 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":83:59)
#loc84 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":83:68)
#loc85 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":83:82)
#loc86 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":83:17)
#loc87 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":83:88)
#loc88 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":84:13)
#loc89 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":85:17)
#loc90 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":89:31)
#loc91 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":89:46)
#loc92 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":89:59)
#loc93 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":89:77)
#loc94 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":89:80)
#loc95 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":89:26)
#loc96 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":89:13)
#loc97 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":89:81)
#loc98 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":90:13)
#loc99 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":93:13)
#loc100 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":90:17)
#loc101 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":90:31)
#loc102 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":90:44)
#loc103 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":90:47)
#loc104 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":90:61)
#loc105 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":91:13)
#loc106 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":92:17)
#loc107 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":95:39)
#loc108 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":95:25)
#loc109 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":95:13)
#loc110 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":97:25)
#loc111 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":97:20)
#loc112 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":97:13)
#loc113 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":97:36)
#loc114 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":99:16)
#loc115 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":100:9)
#loc116 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":103:9)
#loc117 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":100:13)
#loc118 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":100:30)
#loc119 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":101:9)
#loc120 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":102:26)
#loc121 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":102:13)
#loc122 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":111:13)
#loc123 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":111:5)
#loc124 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":213:1)
#loc125 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":217:1)
#loc126 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":215:5)
#loc127 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":215:13)
#loc128 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":216:5)
#loc129 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":216:13)
#loc130 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc131 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc132 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":145:19)
#loc133 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":136:1)
#loc134 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":147:1)
#loc137 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":137:1)
#loc138 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":139:5)
#loc139 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":146:5)
#loc140 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":139:9)
#loc141 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":139:17)
#loc142 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":140:5)
#loc143 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":142:5)
#loc144 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":144:5)
#loc145 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":141:22)
#loc146 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":141:28)
#loc147 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":141:9)
#loc148 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":145:9)
#loc149 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":149:1)
#loc150 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":211:1)
#loc151 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":151:5)
#loc152 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":151:9)
#loc153 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":153:13)
#loc154 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":153:12)
#loc155 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":153:5)
#loc156 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":154:5)
#loc157 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":209:5)
#loc158 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":159:9)
#loc159 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":159:13)
#loc160 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":160:9)
#loc161 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":160:28)
#loc162 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":161:9)
#loc163 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":161:32)
#loc164 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":162:9)
#loc165 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":162:41)
#loc166 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":163:9)
#loc167 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":198:17)
#loc168 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":164:9)
#loc169 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":197:9)
#loc170 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":173:36)
#loc171 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":173:45)
#loc172 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":173:58)
#loc173 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":173:29)
#loc174 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":173:13)
#loc175 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":173:69)
#loc176 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":174:13)
#loc177 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":177:13)
#loc178 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":174:17)
#loc179 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":174:34)
#loc180 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":175:13)
#loc181 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":176:17)
#loc182 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":178:20)
#loc183 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":178:21)
#loc184 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":178:30)
#loc185 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":178:33)
#loc186 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":178:47)
#loc187 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":178:13)
#loc188 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":178:48)
#loc189 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":179:34)
#loc190 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":179:13)
#loc191 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":180:49)
#loc192 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":180:39)
#loc193 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":180:13)
#loc194 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":180:59)
#loc195 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":181:38)
#loc196 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":181:32)
#loc197 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":181:13)
#loc198 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":181:46)
#loc199 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":182:13)
#loc200 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":185:13)
#loc201 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":182:25)
#loc202 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":182:58)
#loc203 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":182:59)
#loc204 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":182:68)
#loc205 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":182:82)
#loc206 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":182:17)
#loc207 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":182:88)
#loc208 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":183:13)
#loc209 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":184:17)
#loc210 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":188:31)
#loc211 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":188:46)
#loc212 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":188:59)
#loc213 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":188:77)
#loc214 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":188:80)
#loc215 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":188:26)
#loc216 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":188:13)
#loc217 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":188:81)
#loc218 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":189:13)
#loc219 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":192:13)
#loc220 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":189:17)
#loc221 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":189:31)
#loc222 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":189:44)
#loc223 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":189:47)
#loc224 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":189:61)
#loc225 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":190:13)
#loc226 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":191:17)
#loc227 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":194:39)
#loc228 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":194:25)
#loc229 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":194:13)
#loc230 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":196:25)
#loc231 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":196:20)
#loc232 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":196:13)
#loc233 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":196:36)
#loc234 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":198:16)
#loc235 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":199:9)
#loc236 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":202:9)
#loc237 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":199:13)
#loc238 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":199:30)
#loc239 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":200:9)
#loc240 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":201:26)
#loc241 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":201:13)
#loc242 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":210:17)
#loc243 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":210:5)
#loc244 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":119:1)
#loc245 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":123:1)
#loc248 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":120:1)
#loc249 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":122:18)
#loc250 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":122:24)
#loc251 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":122:5)
#loc252 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":125:1)
#loc253 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":133:1)
#loc254 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":127:5)
#loc255 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":127:9)
#loc256 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":129:13)
#loc257 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":129:12)
#loc258 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":129:5)
#loc259 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":131:12)
#loc260 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":131:5)
#loc261 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":132:17)
#loc262 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_41.c":132:5)
#loc263 = loc(fused[#loc1, #loc2])
#loc264 = loc(fused[#loc3, #loc4])
#loc265 = loc(fused[#loc6, #loc7])
#loc266 = loc(fused[#loc8, #loc9])
#loc267 = loc(fused[#loc10, #loc11])
#loc268 = loc(fused[#loc12, #loc13])
#loc269 = loc(fused[#loc14, #loc15])
#loc270 = loc(fused[#loc16, #loc17])
#loc271 = loc(fused[#loc18, #loc19])
#loc273 = loc(fused[#loc23, #loc24])
#loc274 = loc(fused[#loc26, #loc27])
#loc275 = loc(fused[#loc28, #loc29])
#loc276 = loc(fused[#loc32, #loc30])
#loc277 = loc(fused[#loc33, #loc34])
#loc278 = loc(fused[#loc35, #loc36])
#loc279 = loc(fused[#loc37, #loc38])
#loc280 = loc(fused[#loc39, #loc40])
#loc281 = loc(fused[#loc41, #loc42])
#loc282 = loc(fused[#loc43, #loc44])
#loc283 = loc(fused[#loc45, #loc46])
#loc284 = loc(fused[#loc51, #loc52])
#loc285 = loc(fused[#loc53, #loc54])
#loc286 = loc(fused[#loc55, #loc56])
#loc287 = loc(fused[#loc57, #loc54])
#loc288 = loc(fused[#loc59, #loc60])
#loc289 = loc(fused[#loc62, #loc63])
#loc290 = loc(fused[#loc64, #loc65])
#loc291 = loc(fused[#loc68, #loc66])
#loc292 = loc(fused[#loc72, #loc73])
#loc293 = loc(fused[#loc77, #loc78])
#loc294 = loc(fused[#loc79, #loc80])
#loc295 = loc(fused[#loc82, #loc83])
#loc296 = loc(fused[#loc84, #loc85])
#loc297 = loc(fused[#loc86, #loc87])
#loc298 = loc(fused[#loc88, #loc80])
#loc299 = loc(fused[#loc92, #loc93])
#loc300 = loc(fused[#loc96, #loc97])
#loc301 = loc(fused[#loc98, #loc99])
#loc302 = loc(fused[#loc100, #loc101])
#loc303 = loc(fused[#loc103, #loc104])
#loc304 = loc(fused[#loc105, #loc99])
#loc305 = loc(fused[#loc109, #loc107])
#loc306 = loc(fused[#loc112, #loc113])
#loc307 = loc(fused[#loc115, #loc116])
#loc308 = loc(fused[#loc117, #loc118])
#loc309 = loc(fused[#loc119, #loc116])
#loc310 = loc(fused[#loc124, #loc125])
#loc311 = loc(fused[#loc126, #loc127])
#loc312 = loc(fused[#loc128, #loc129])
#loc313 = loc(fused[#loc130, #loc131])
#loc314 = loc(fused[#loc133, #loc134])
#loc316 = loc(fused[#loc138, #loc139])
#loc317 = loc(fused[#loc140, #loc141])
#loc318 = loc(fused[#loc142, #loc143, #loc144, #loc139])
#loc319 = loc(fused[#loc145, #loc146])
#loc320 = loc(fused[#loc149, #loc150])
#loc321 = loc(fused[#loc151, #loc152])
#loc322 = loc(fused[#loc155, #loc153])
#loc323 = loc(fused[#loc156, #loc157])
#loc324 = loc(fused[#loc158, #loc159])
#loc325 = loc(fused[#loc160, #loc161])
#loc326 = loc(fused[#loc162, #loc163])
#loc327 = loc(fused[#loc164, #loc165])
#loc328 = loc(fused[#loc166, #loc167])
#loc329 = loc(fused[#loc168, #loc169])
#loc330 = loc(fused[#loc174, #loc175])
#loc331 = loc(fused[#loc176, #loc177])
#loc332 = loc(fused[#loc178, #loc179])
#loc333 = loc(fused[#loc180, #loc177])
#loc334 = loc(fused[#loc182, #loc183])
#loc335 = loc(fused[#loc185, #loc186])
#loc336 = loc(fused[#loc187, #loc188])
#loc337 = loc(fused[#loc190, #loc189])
#loc338 = loc(fused[#loc193, #loc194])
#loc339 = loc(fused[#loc197, #loc198])
#loc340 = loc(fused[#loc199, #loc200])
#loc341 = loc(fused[#loc202, #loc203])
#loc342 = loc(fused[#loc204, #loc205])
#loc343 = loc(fused[#loc206, #loc207])
#loc344 = loc(fused[#loc208, #loc200])
#loc345 = loc(fused[#loc212, #loc213])
#loc346 = loc(fused[#loc216, #loc217])
#loc347 = loc(fused[#loc218, #loc219])
#loc348 = loc(fused[#loc220, #loc221])
#loc349 = loc(fused[#loc223, #loc224])
#loc350 = loc(fused[#loc225, #loc219])
#loc351 = loc(fused[#loc229, #loc227])
#loc352 = loc(fused[#loc232, #loc233])
#loc353 = loc(fused[#loc235, #loc236])
#loc354 = loc(fused[#loc237, #loc238])
#loc355 = loc(fused[#loc239, #loc236])
#loc356 = loc(fused[#loc244, #loc245])
#loc358 = loc(fused[#loc249, #loc250])
#loc359 = loc(fused[#loc252, #loc253])
#loc360 = loc(fused[#loc254, #loc255])
#loc361 = loc(fused[#loc258, #loc256])
#loc362 = loc(fused[#loc260, #loc259])
