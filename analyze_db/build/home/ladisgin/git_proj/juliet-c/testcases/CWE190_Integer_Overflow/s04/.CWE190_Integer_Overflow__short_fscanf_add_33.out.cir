!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc95 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":105:10)
#loc96 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":105:14)
#loc97 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":105:20)
#loc98 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":105:32)
#loc146 = loc(fused[#loc95, #loc96])
#loc147 = loc(fused[#loc97, #loc98])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_add_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc23_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc111)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc112)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%hd\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc113)
  cir.func @_ZN44CWE190_Integer_Overflow__short_fscanf_add_333badEv() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc115)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc116)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc117)
    %3 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc118)
    cir.store %2, %3 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc17)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc18)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc18)
    cir.store %5, %2 : !s16i, !cir.ptr<!s16i> loc(#loc119)
    %6 = cir.get_global @__isoc23_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc20)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc112)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc21)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc5)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc5)
    %11 = cir.call @__isoc23_fscanf(%8, %10, %2) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc20)
    cir.br ^bb1 loc(#loc120)
  ^bb1:  // pred: ^bb0
    %12 = cir.load %3 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc11)
    %13 = cir.load %12 : !cir.ptr<!s16i>, !s16i loc(#loc11)
    cir.store %13, %0 : !s16i, !cir.ptr<!s16i> loc(#loc115)
    cir.br ^bb2 loc(#loc121)
  ^bb2:  // pred: ^bb1
    %14 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc26)
    %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc26)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %17 = cir.binop(add, %15, %16) nsw : !s32i loc(#loc26)
    %18 = cir.cast(integral, %17 : !s32i), !s16i loc(#loc26)
    cir.store %18, %1 : !s16i, !cir.ptr<!s16i> loc(#loc116)
    %19 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc27)
    %20 = cir.cast(integral, %19 : !s16i), !s32i loc(#loc27)
    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc28)
    cir.br ^bb3 loc(#loc25)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc23)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc9)
  } loc(#loc114)
  cir.func internal private @_ZN44CWE190_Integer_Overflow__short_fscanf_add_33L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc123)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc124)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc125)
    %3 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc126)
    cir.store %2, %3 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc38)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc39)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc39)
    cir.store %5, %2 : !s16i, !cir.ptr<!s16i> loc(#loc127)
    %6 = cir.const #cir.int<2> : !s32i loc(#loc41)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc41)
    cir.store %7, %2 : !s16i, !cir.ptr<!s16i> loc(#loc128)
    cir.br ^bb1 loc(#loc129)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %3 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc32)
    %9 = cir.load %8 : !cir.ptr<!s16i>, !s16i loc(#loc32)
    cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc123)
    cir.br ^bb2 loc(#loc130)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc47)
    %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc47)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc47)
    %14 = cir.cast(integral, %13 : !s32i), !s16i loc(#loc47)
    cir.store %14, %1 : !s16i, !cir.ptr<!s16i> loc(#loc124)
    %15 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc48)
    %16 = cir.cast(integral, %15 : !s16i), !s32i loc(#loc48)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc49)
    cir.br ^bb3 loc(#loc46)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc44)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc30)
  } loc(#loc122)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc50)
  cir.func internal private @_ZN44CWE190_Integer_Overflow__short_fscanf_add_33L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc132)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc133)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc134)
    %3 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc135)
    cir.store %2, %3 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc60)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc61)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc61)
    cir.store %5, %2 : !s16i, !cir.ptr<!s16i> loc(#loc136)
    %6 = cir.get_global @__isoc23_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc63)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc112)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc64)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc65)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc65)
    %11 = cir.call @__isoc23_fscanf(%8, %10, %2) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc63)
    cir.br ^bb1 loc(#loc137)
  ^bb1:  // pred: ^bb0
    %12 = cir.load %3 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc54)
    %13 = cir.load %12 : !cir.ptr<!s16i>, !s16i loc(#loc54)
    cir.store %13, %0 : !s16i, !cir.ptr<!s16i> loc(#loc132)
    cir.br ^bb2 loc(#loc138)
  ^bb2:  // pred: ^bb1
    %14 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc70)
    %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc70)
    %16 = cir.const #cir.int<32767> : !s32i loc(#loc71)
    %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc139)
    cir.brcond %17 ^bb3, ^bb4 loc(#loc140)
  ^bb3:  // pred: ^bb2
    %18 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc75)
    %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc75)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc56)
    %21 = cir.binop(add, %19, %20) nsw : !s32i loc(#loc75)
    %22 = cir.cast(integral, %21 : !s32i), !s16i loc(#loc75)
    cir.store %22, %1 : !s16i, !cir.ptr<!s16i> loc(#loc133)
    %23 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc76)
    %24 = cir.cast(integral, %23 : !s16i), !s32i loc(#loc76)
    cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc77)
    cir.br ^bb5 loc(#loc73)
  ^bb4:  // pred: ^bb2
    %25 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc50)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    cir.br ^bb5 loc(#loc69)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc69)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc67)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc52)
  } loc(#loc131)
  cir.func @_ZN44CWE190_Integer_Overflow__short_fscanf_add_334goodEv() extra(#fn_attr) {
    cir.call @_ZN44CWE190_Integer_Overflow__short_fscanf_add_33L7goodG2BEv() : () -> () loc(#loc81)
    cir.call @_ZN44CWE190_Integer_Overflow__short_fscanf_add_33L7goodB2GEv() : () -> () loc(#loc82)
    cir.return loc(#loc80)
  } loc(#loc141)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc142)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc143)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc144)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc89)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc90)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc91)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc92)
  cir.func @main(%arg0: !s32i loc(fused[#loc95, #loc96]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc97, #loc98])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc146)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc147)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc94)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc99)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc100)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc101)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc101)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc102)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc89)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc103)
    cir.call @_ZN44CWE190_Integer_Overflow__short_fscanf_add_334goodEv() : () -> () loc(#loc104)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc90)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc90)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc91)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc91)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc106)
    cir.call @_ZN44CWE190_Integer_Overflow__short_fscanf_add_333badEv() : () -> () loc(#loc107)
    %12 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc92)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc108)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc109)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc148)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc148)
    cir.return %15 : !s32i loc(#loc148)
  } loc(#loc145)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_add_33.cpp":0:0)
#loc1 = loc("/usr/include/stdio.h":442:1)
#loc2 = loc("/usr/include/stdio.h":444:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":31:20)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":25:1)
#loc9 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":40:1)
#loc10 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":33:9)
#loc11 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":33:22)
#loc12 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":36:13)
#loc13 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":36:35)
#loc14 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":27:5)
#loc15 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":27:11)
#loc16 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":28:5)
#loc17 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":28:22)
#loc18 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":29:12)
#loc19 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":29:5)
#loc20 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":31:5)
#loc21 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":31:13)
#loc22 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":32:5)
#loc23 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":39:5)
#loc24 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":34:9)
#loc25 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":38:9)
#loc26 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":36:28)
#loc27 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":37:26)
#loc28 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":37:13)
#loc29 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":47:1)
#loc30 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":62:1)
#loc31 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":55:9)
#loc32 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":55:22)
#loc33 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":58:13)
#loc34 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":58:35)
#loc35 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":49:5)
#loc36 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":49:11)
#loc37 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":50:5)
#loc38 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":50:22)
#loc39 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":51:12)
#loc40 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":51:5)
#loc41 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":53:12)
#loc42 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":53:5)
#loc43 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":54:5)
#loc44 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":61:5)
#loc45 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":56:9)
#loc46 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":60:9)
#loc47 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":58:28)
#loc48 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":59:26)
#loc49 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":59:13)
#loc50 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":82:23)
#loc51 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":65:1)
#loc52 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":85:1)
#loc53 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":73:9)
#loc54 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":73:22)
#loc55 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":77:13)
#loc56 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":77:35)
#loc57 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":67:5)
#loc58 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":67:11)
#loc59 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":68:5)
#loc60 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":68:22)
#loc61 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":69:12)
#loc62 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":69:5)
#loc63 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":71:5)
#loc64 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":71:13)
#loc65 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":71:20)
#loc66 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":72:5)
#loc67 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":84:5)
#loc68 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":75:9)
#loc69 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":83:9)
#loc70 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":75:13)
#loc71 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":75:20)
#loc72 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":76:9)
#loc73 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":79:9)
#loc74 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":81:9)
#loc75 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":77:28)
#loc76 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":78:26)
#loc77 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":78:13)
#loc78 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":82:13)
#loc79 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":87:1)
#loc80 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":91:1)
#loc81 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":89:5)
#loc82 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":90:5)
#loc83 = loc("/usr/include/stdlib.h":575:1)
#loc84 = loc("/usr/include/stdlib.h":575:41)
#loc85 = loc("/usr/include/time.h":76:1)
#loc86 = loc("/usr/include/time.h":76:38)
#loc87 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc88 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc89 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":110:15)
#loc90 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":112:15)
#loc91 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":115:15)
#loc92 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":117:15)
#loc93 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":105:1)
#loc94 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":120:1)
#loc99 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":106:1)
#loc100 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":108:27)
#loc101 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":108:22)
#loc102 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":108:5)
#loc103 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":110:5)
#loc104 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":111:5)
#loc105 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":112:5)
#loc106 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":115:5)
#loc107 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":116:5)
#loc108 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":117:5)
#loc109 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":119:12)
#loc110 = loc("CWE190_Integer_Overflow__short_fscanf_add_33.cpp":119:5)
#loc111 = loc(fused[#loc1, #loc2])
#loc112 = loc(fused[#loc3, #loc4])
#loc113 = loc(fused[#loc6, #loc7])
#loc114 = loc(fused[#loc8, #loc9])
#loc115 = loc(fused[#loc10, #loc11])
#loc116 = loc(fused[#loc12, #loc13])
#loc117 = loc(fused[#loc14, #loc15])
#loc118 = loc(fused[#loc16, #loc17])
#loc119 = loc(fused[#loc19, #loc18])
#loc120 = loc(fused[#loc22, #loc23])
#loc121 = loc(fused[#loc24, #loc25])
#loc122 = loc(fused[#loc29, #loc30])
#loc123 = loc(fused[#loc31, #loc32])
#loc124 = loc(fused[#loc33, #loc34])
#loc125 = loc(fused[#loc35, #loc36])
#loc126 = loc(fused[#loc37, #loc38])
#loc127 = loc(fused[#loc40, #loc39])
#loc128 = loc(fused[#loc42, #loc41])
#loc129 = loc(fused[#loc43, #loc44])
#loc130 = loc(fused[#loc45, #loc46])
#loc131 = loc(fused[#loc51, #loc52])
#loc132 = loc(fused[#loc53, #loc54])
#loc133 = loc(fused[#loc55, #loc56])
#loc134 = loc(fused[#loc57, #loc58])
#loc135 = loc(fused[#loc59, #loc60])
#loc136 = loc(fused[#loc62, #loc61])
#loc137 = loc(fused[#loc66, #loc67])
#loc138 = loc(fused[#loc68, #loc69])
#loc139 = loc(fused[#loc70, #loc71])
#loc140 = loc(fused[#loc72, #loc73, #loc74, #loc69])
#loc141 = loc(fused[#loc79, #loc80])
#loc142 = loc(fused[#loc83, #loc84])
#loc143 = loc(fused[#loc85, #loc86])
#loc144 = loc(fused[#loc87, #loc88])
#loc145 = loc(fused[#loc93, #loc94])
#loc148 = loc(fused[#loc110, #loc109])
