!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":126:10)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":126:14)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":126:20)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":126:32)
#loc248 = loc(fused[#loc85, #loc86])
#loc249 = loc(fused[#loc87, #loc88])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc219)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc220)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc221)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc222)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc223)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc225)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc16)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc17)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc17)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc226)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc227)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc16)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc228)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc229)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc24)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc25)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc25)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc231)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc27)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc28)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc29)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc27)
      } loc(#loc232)
    } loc(#loc230)
    cir.scope {
      %8 = cir.const #cir.int<6> : !s32i loc(#loc32)
      cir.switch (%8 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc34)
          %11 = cir.const #cir.int<65> : !s32i loc(#loc35)
          %12 = cir.const #cir.int<100> : !s32i loc(#loc36)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc37)
          %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc36)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc36)
          cir.libc.memset %15 bytes from %10 set to %11 : !cir.ptr<!void>, !s32i, !u64i loc(#loc234)
          %16 = cir.const #cir.int<0> : !s32i loc(#loc40)
          %17 = cir.cast(integral, %16 : !s32i), !s8i loc(#loc40)
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
          %19 = cir.const #cir.int<100> : !s32i loc(#loc42)
          %20 = cir.const #cir.int<1> : !s32i loc(#loc43)
          %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc42)
          %22 = cir.ptr_stride(%18 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc44)
          cir.store %17, %22 : !s8i, !cir.ptr<!s8i> loc(#loc235)
          cir.break loc(#loc45)
        } loc(#loc33)
        cir.case(default, []) {
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc47)
          cir.break loc(#loc48)
        } loc(#loc46)
        cir.yield loc(#loc30)
      } loc(#loc30)
    } loc(#loc233)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc237)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc237)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc237)
      %10 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc53)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc53)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc54)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc55)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc55)
      %17 = cir.const #cir.int<1> : !u64i loc(#loc238)
      %18 = cir.binop(mul, %16, %17) : !u64i loc(#loc239)
      cir.libc.memcpy %18 bytes from %13 to %11 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc240)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc61)
      %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc61)
      %21 = cir.const #cir.int<50> : !s32i loc(#loc62)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc63)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc62)
      %24 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc64)
      %25 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc64)
      cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc241)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc65)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc66)
      %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc67)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
      %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc68)
      cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc67)
    } loc(#loc236)
    cir.return loc(#loc13)
  } loc(#loc224)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc243)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc71)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc244)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc73)
    cir.return loc(#loc70)
  } loc(#loc242)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc245)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc246)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc79)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc81)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc82)
  cir.func @main(%arg0: !s32i loc(fused[#loc85, #loc86]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc87, #loc88])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc248)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc249)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc84)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc89)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc90)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc91)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc91)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc92)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc79)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc79)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc250)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15_good() : () -> () loc(#loc94)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc80)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc80)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc81)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc81)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc97)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc251)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15_bad() : () -> () loc(#loc98)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc82)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc82)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc101)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc252)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc252)
    cir.return %17 : !s32i loc(#loc252)
  } loc(#loc247)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc254)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc107)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc108)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc108)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc255)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc256)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc107)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc257)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc258)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc116)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc116)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc260)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc118)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc119)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc120)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc118)
      } loc(#loc261)
    } loc(#loc259)
    cir.scope {
      %8 = cir.const #cir.int<5> : !s32i loc(#loc123)
      cir.switch (%8 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc125)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc125)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc126)
          cir.break loc(#loc127)
        } loc(#loc124)
        cir.case(default, []) {
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc129)
          %11 = cir.const #cir.int<65> : !s32i loc(#loc130)
          %12 = cir.const #cir.int<50> : !s32i loc(#loc131)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc132)
          %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc131)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc131)
          cir.libc.memset %15 bytes from %10 set to %11 : !cir.ptr<!void>, !s32i, !u64i loc(#loc263)
          %16 = cir.const #cir.int<0> : !s32i loc(#loc135)
          %17 = cir.cast(integral, %16 : !s32i), !s8i loc(#loc135)
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc136)
          %19 = cir.const #cir.int<50> : !s32i loc(#loc137)
          %20 = cir.const #cir.int<1> : !s32i loc(#loc138)
          %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc137)
          %22 = cir.ptr_stride(%18 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc139)
          cir.store %17, %22 : !s8i, !cir.ptr<!s8i> loc(#loc264)
          cir.break loc(#loc140)
        } loc(#loc128)
        cir.yield loc(#loc121)
      } loc(#loc121)
    } loc(#loc262)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc266)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc266)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc266)
      %10 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc145)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc145)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc146)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc146)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc147)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc147)
      %17 = cir.const #cir.int<1> : !u64i loc(#loc267)
      %18 = cir.binop(mul, %16, %17) : !u64i loc(#loc268)
      cir.libc.memcpy %18 bytes from %13 to %11 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc269)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc153)
      %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc153)
      %21 = cir.const #cir.int<50> : !s32i loc(#loc154)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc155)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc154)
      %24 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc156)
      %25 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc156)
      cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc270)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc157)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc158)
      %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc159)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc160)
      %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc160)
      cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc159)
    } loc(#loc265)
    cir.return loc(#loc104)
  } loc(#loc253)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc272)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc165)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc166)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc166)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc273)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc274)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc165)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc275)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc276)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc173)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc174)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc174)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc278)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc176)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc177)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc178)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc176)
      } loc(#loc279)
    } loc(#loc277)
    cir.scope {
      %8 = cir.const #cir.int<6> : !s32i loc(#loc181)
      cir.switch (%8 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc183)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc183)
          %11 = cir.const #cir.int<65> : !s32i loc(#loc184)
          %12 = cir.const #cir.int<50> : !s32i loc(#loc185)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc186)
          %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc185)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc185)
          cir.libc.memset %15 bytes from %10 set to %11 : !cir.ptr<!void>, !s32i, !u64i loc(#loc281)
          %16 = cir.const #cir.int<0> : !s32i loc(#loc189)
          %17 = cir.cast(integral, %16 : !s32i), !s8i loc(#loc189)
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc190)
          %19 = cir.const #cir.int<50> : !s32i loc(#loc191)
          %20 = cir.const #cir.int<1> : !s32i loc(#loc192)
          %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc191)
          %22 = cir.ptr_stride(%18 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc193)
          cir.store %17, %22 : !s8i, !cir.ptr<!s8i> loc(#loc282)
          cir.break loc(#loc194)
        } loc(#loc182)
        cir.case(default, []) {
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc196)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc196)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc197)
          cir.break loc(#loc198)
        } loc(#loc195)
        cir.yield loc(#loc179)
      } loc(#loc179)
    } loc(#loc280)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc284)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc284)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc284)
      %10 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc203)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc203)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc204)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc204)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc205)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc206)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc205)
      %17 = cir.const #cir.int<1> : !u64i loc(#loc285)
      %18 = cir.binop(mul, %16, %17) : !u64i loc(#loc286)
      cir.libc.memcpy %18 bytes from %13 to %11 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc287)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc211)
      %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc211)
      %21 = cir.const #cir.int<50> : !s32i loc(#loc212)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc213)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc212)
      %24 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc214)
      %25 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc214)
      cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc288)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc215)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc216)
      %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc217)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc218)
      %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc218)
      cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc217)
    } loc(#loc283)
    cir.return loc(#loc162)
  } loc(#loc271)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":37:19)
#loc8 = loc("/usr/include/string.h":407:1)
#loc9 = loc("/usr/include/string.h":408:33)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":23:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":48:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":25:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":25:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":26:20)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":26:27)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":26:31)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":26:42)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":26:43)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":26:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":27:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":27:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":27:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":27:17)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":27:23)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":27:24)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":27:30)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":27:29)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":28:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":39:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":28:12)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":30:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":32:16)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":32:22)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":32:27)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":32:31)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":32:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":32:32)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":33:23)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":33:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":33:14)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":33:18)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":33:19)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":34:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":35:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":37:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":38:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":40:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":47:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":41:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":41:25)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":43:16)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":43:22)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":43:28)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":43:35)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":43:41)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":43:52)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":43:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":43:53)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":44:22)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":44:14)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":44:17)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":44:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":45:19)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":45:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":46:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":46:14)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":110:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":114:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":112:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":112:14)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":113:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":113:14)
#loc75 = loc("/usr/include/stdlib.h":575:1)
#loc76 = loc("/usr/include/stdlib.h":575:41)
#loc77 = loc("/usr/include/time.h":76:1)
#loc78 = loc("/usr/include/time.h":76:38)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":131:15)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":133:15)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":136:15)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":138:15)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":126:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":141:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":127:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":129:27)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":129:22)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":129:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":131:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":132:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":132:69)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":133:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":136:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":137:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":137:68)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":138:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":140:12)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":140:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":55:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":80:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":57:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":57:12)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":58:20)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":58:27)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":58:31)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":58:42)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":58:43)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":58:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":59:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":59:33)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":59:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":59:17)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":59:23)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":59:24)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":59:30)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":59:29)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":60:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":71:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":60:12)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":62:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":64:19)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":64:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":65:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":66:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":68:16)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":68:22)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":68:27)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":68:30)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":68:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":68:31)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":69:22)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":69:9)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":69:14)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":69:17)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":69:18)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":70:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":72:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":79:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":73:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":73:25)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":75:16)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":75:22)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":75:28)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":75:35)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":75:41)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":75:52)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":75:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":75:53)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":76:22)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":76:14)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":76:17)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":76:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":77:19)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":77:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":78:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":78:14)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":83:1)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":108:1)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":85:5)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":85:12)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":86:20)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":86:27)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":86:31)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":86:42)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":86:43)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":86:5)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":87:5)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":87:33)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":87:9)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":87:17)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":87:23)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":87:24)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":87:30)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":87:29)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":88:5)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":99:5)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":88:12)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":90:5)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":92:16)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":92:22)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":92:27)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":92:30)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":92:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":92:31)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":93:22)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":93:9)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":93:14)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":93:17)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":93:18)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":94:9)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":95:5)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":97:19)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":97:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":98:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":100:5)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":107:5)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":101:9)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":101:25)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":103:16)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":103:22)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":103:28)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":103:35)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":103:41)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":103:52)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":103:9)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":103:53)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":104:22)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":104:14)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":104:17)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":104:9)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":105:19)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":105:9)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":106:9)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c":106:14)
#loc219 = loc(fused[#loc1, #loc2])
#loc220 = loc(fused[#loc3, #loc4])
#loc221 = loc(fused[#loc5, #loc6])
#loc222 = loc(fused[#loc8, #loc9])
#loc223 = loc(fused[#loc10, #loc11])
#loc224 = loc(fused[#loc12, #loc13])
#loc225 = loc(fused[#loc14, #loc15])
#loc226 = loc(fused[#loc18, #loc19])
#loc227 = loc(fused[#loc17, #loc19])
#loc228 = loc(fused[#loc16, #loc20])
#loc229 = loc(fused[#loc21, #loc20])
#loc230 = loc(fused[#loc22, #loc23])
#loc231 = loc(fused[#loc24, #loc25])
#loc232 = loc(fused[#loc26, #loc23])
#loc233 = loc(fused[#loc30, #loc31])
#loc234 = loc(fused[#loc38, #loc39])
#loc235 = loc(fused[#loc41, #loc40])
#loc236 = loc(fused[#loc49, #loc50])
#loc237 = loc(fused[#loc51, #loc52])
#loc238 = loc(fused[#loc57, #loc58])
#loc239 = loc(fused[#loc55, #loc58])
#loc240 = loc(fused[#loc59, #loc60])
#loc241 = loc(fused[#loc64, #loc61])
#loc242 = loc(fused[#loc69, #loc70])
#loc243 = loc(fused[#loc71, #loc72])
#loc244 = loc(fused[#loc73, #loc74])
#loc245 = loc(fused[#loc75, #loc76])
#loc246 = loc(fused[#loc77, #loc78])
#loc247 = loc(fused[#loc83, #loc84])
#loc250 = loc(fused[#loc94, #loc95])
#loc251 = loc(fused[#loc98, #loc99])
#loc252 = loc(fused[#loc102, #loc101])
#loc253 = loc(fused[#loc103, #loc104])
#loc254 = loc(fused[#loc105, #loc106])
#loc255 = loc(fused[#loc109, #loc110])
#loc256 = loc(fused[#loc108, #loc110])
#loc257 = loc(fused[#loc107, #loc111])
#loc258 = loc(fused[#loc112, #loc111])
#loc259 = loc(fused[#loc113, #loc114])
#loc260 = loc(fused[#loc115, #loc116])
#loc261 = loc(fused[#loc117, #loc114])
#loc262 = loc(fused[#loc121, #loc122])
#loc263 = loc(fused[#loc133, #loc134])
#loc264 = loc(fused[#loc136, #loc135])
#loc265 = loc(fused[#loc141, #loc142])
#loc266 = loc(fused[#loc143, #loc144])
#loc267 = loc(fused[#loc149, #loc150])
#loc268 = loc(fused[#loc147, #loc150])
#loc269 = loc(fused[#loc151, #loc152])
#loc270 = loc(fused[#loc156, #loc153])
#loc271 = loc(fused[#loc161, #loc162])
#loc272 = loc(fused[#loc163, #loc164])
#loc273 = loc(fused[#loc167, #loc168])
#loc274 = loc(fused[#loc166, #loc168])
#loc275 = loc(fused[#loc165, #loc169])
#loc276 = loc(fused[#loc170, #loc169])
#loc277 = loc(fused[#loc171, #loc172])
#loc278 = loc(fused[#loc173, #loc174])
#loc279 = loc(fused[#loc175, #loc172])
#loc280 = loc(fused[#loc179, #loc180])
#loc281 = loc(fused[#loc187, #loc188])
#loc282 = loc(fused[#loc190, #loc189])
#loc283 = loc(fused[#loc199, #loc200])
#loc284 = loc(fused[#loc201, #loc202])
#loc285 = loc(fused[#loc207, #loc208])
#loc286 = loc(fused[#loc205, #loc208])
#loc287 = loc(fused[#loc209, #loc210])
#loc288 = loc(fused[#loc214, #loc211])
