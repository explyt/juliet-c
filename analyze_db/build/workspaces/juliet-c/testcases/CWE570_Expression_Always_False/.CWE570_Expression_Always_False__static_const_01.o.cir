!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE570_Expression_Always_False/CWE570_Expression_Always_False__static_const_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc27)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Never prints\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE570_Expression_Always_False__static_const_01_bad() extra(#fn_attr) {
    cir.br ^bb1 loc(#loc29)
  ^bb1:  // pred: ^bb0
    %0 = cir.const #cir.int<0> : !s32i loc(#loc8)
    %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc8)
    cir.brcond %1 ^bb2, ^bb3 loc(#loc30)
  ^bb2:  // pred: ^bb1
    %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc3)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc3)
    cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc10)
    cir.br ^bb3 loc(#loc7)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc7)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc5)
  } loc(#loc28)
  cir.func no_proto @CWE570_Expression_Always_False__static_const_01_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc32)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc13)
    cir.return loc(#loc12)
  } loc(#loc31)
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc33)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Sometimes prints\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc17)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.br ^bb1 loc(#loc35)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc36)
    %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc36)
    %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc22)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc24)
    %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc37)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc38)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc17)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc17)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc26)
    cir.br ^bb3 loc(#loc21)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc21)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc19)
  } loc(#loc34)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE570_Expression_Always_False/CWE570_Expression_Always_False__static_const_01.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE570_Expression_Always_False__static_const_01.c":17:19)
#loc4 = loc("CWE570_Expression_Always_False__static_const_01.c":12:1)
#loc5 = loc("CWE570_Expression_Always_False__static_const_01.c":19:1)
#loc6 = loc("CWE570_Expression_Always_False__static_const_01.c":15:5)
#loc7 = loc("CWE570_Expression_Always_False__static_const_01.c":18:5)
#loc8 = loc("CWE570_Expression_Always_False__static_const_01.c":15:9)
#loc9 = loc("CWE570_Expression_Always_False__static_const_01.c":16:5)
#loc10 = loc("CWE570_Expression_Always_False__static_const_01.c":17:9)
#loc11 = loc("CWE570_Expression_Always_False__static_const_01.c":35:1)
#loc12 = loc("CWE570_Expression_Always_False__static_const_01.c":38:1)
#loc13 = loc("CWE570_Expression_Always_False__static_const_01.c":37:5)
#loc14 = loc("CWE570_Expression_Always_False__static_const_01.c":37:11)
#loc15 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc16 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc17 = loc("CWE570_Expression_Always_False__static_const_01.c":31:19)
#loc18 = loc("CWE570_Expression_Always_False__static_const_01.c":26:1)
#loc19 = loc("CWE570_Expression_Always_False__static_const_01.c":33:1)
#loc20 = loc("CWE570_Expression_Always_False__static_const_01.c":29:5)
#loc21 = loc("CWE570_Expression_Always_False__static_const_01.c":32:5)
#loc22 = loc("CWE570_Expression_Always_False__static_const_01.c":29:9)
#loc23 = loc("CWE570_Expression_Always_False__static_const_01.c":29:34)
#loc24 = loc("CWE570_Expression_Always_False__static_const_01.c":29:39)
#loc25 = loc("CWE570_Expression_Always_False__static_const_01.c":30:5)
#loc26 = loc("CWE570_Expression_Always_False__static_const_01.c":31:9)
#loc27 = loc(fused[#loc1, #loc2])
#loc28 = loc(fused[#loc4, #loc5])
#loc29 = loc(fused[#loc6, #loc7])
#loc30 = loc(fused[#loc9, #loc7])
#loc31 = loc(fused[#loc11, #loc12])
#loc32 = loc(fused[#loc13, #loc14])
#loc33 = loc(fused[#loc15, #loc16])
#loc34 = loc(fused[#loc18, #loc19])
#loc35 = loc(fused[#loc20, #loc21])
#loc36 = loc(fused[#loc22, #loc23])
#loc37 = loc(fused[#loc22, #loc24])
#loc38 = loc(fused[#loc25, #loc21])
