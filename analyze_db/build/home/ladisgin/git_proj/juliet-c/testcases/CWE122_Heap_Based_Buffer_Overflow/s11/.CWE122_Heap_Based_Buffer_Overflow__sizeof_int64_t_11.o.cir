!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc121)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc122)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc123)
  cir.func private @printLongLongLine(!s64i) loc(#loc124)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc125)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc127)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc128)
    cir.br ^bb1 loc(#loc129)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc130)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc130)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc19)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc131)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc22)
    %7 = cir.const #cir.int<8> : !u64i loc(#loc132)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc133)
    cir.store %9, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc134)
    cir.br ^bb3 loc(#loc135)
  ^bb3:  // pred: ^bb2
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc29)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc30)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s64i>, !cir.bool loc(#loc136)
    cir.brcond %13 ^bb4, ^bb5 loc(#loc137)
  ^bb4:  // pred: ^bb3
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc32)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc34)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
    cir.br ^bb5 loc(#loc28)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc28)
  ^bb6:  // pred: ^bb5
    %17 = cir.const #cir.int<2147483643> : !s64i loc(#loc35)
    %18 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc36)
    cir.store %17, %18 : !s64i, !cir.ptr<!s64i> loc(#loc138)
    cir.br ^bb7 loc(#loc18)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc18)
  ^bb8:  // pred: ^bb7
    %19 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc38)
    %20 = cir.load %19 : !cir.ptr<!s64i>, !s64i loc(#loc39)
    cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc40)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc41)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc41)
    cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc42)
    cir.return loc(#loc12)
  } loc(#loc126)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc140)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc141)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    cir.return loc(#loc44)
  } loc(#loc139)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc142)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc143)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc53)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc145)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc58)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc146)
    cir.br ^bb1 loc(#loc147)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc148)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc148)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc62)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc62)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc149)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc53)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    cir.br ^bb8 loc(#loc65)
  ^bb3:  // pred: ^bb1
    %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc68)
    %9 = cir.const #cir.int<8> : !u64i loc(#loc150)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc68)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc151)
    cir.store %11, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc152)
    cir.br ^bb4 loc(#loc153)
  ^bb4:  // pred: ^bb3
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc75)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc76)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc76)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s64i>, !cir.bool loc(#loc154)
    cir.brcond %15 ^bb5, ^bb6 loc(#loc155)
  ^bb5:  // pred: ^bb4
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc78)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc80)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc78)
    cir.br ^bb6 loc(#loc74)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc74)
  ^bb7:  // pred: ^bb6
    %19 = cir.const #cir.int<2147483643> : !s64i loc(#loc81)
    %20 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc82)
    cir.store %19, %20 : !s64i, !cir.ptr<!s64i> loc(#loc156)
    cir.br ^bb8 loc(#loc61)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc61)
  ^bb9:  // pred: ^bb8
    %21 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc84)
    %22 = cir.load %21 : !cir.ptr<!s64i>, !s64i loc(#loc85)
    cir.call @printLongLongLine(%22) : (!s64i) -> () loc(#loc86)
    %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc87)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc87)
    cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc88)
    cir.return loc(#loc55)
  } loc(#loc144)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc158)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc93)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc159)
    cir.br ^bb1 loc(#loc160)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc161)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc161)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc97)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc97)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc162)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc100)
    %7 = cir.const #cir.int<8> : !u64i loc(#loc163)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc100)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc164)
    cir.store %9, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc165)
    cir.br ^bb3 loc(#loc166)
  ^bb3:  // pred: ^bb2
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc107)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc108)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc108)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s64i>, !cir.bool loc(#loc167)
    cir.brcond %13 ^bb4, ^bb5 loc(#loc168)
  ^bb4:  // pred: ^bb3
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc110)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc112)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc110)
    cir.br ^bb5 loc(#loc106)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc106)
  ^bb6:  // pred: ^bb5
    %17 = cir.const #cir.int<2147483643> : !s64i loc(#loc113)
    %18 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc114)
    cir.store %17, %18 : !s64i, !cir.ptr<!s64i> loc(#loc169)
    cir.br ^bb7 loc(#loc96)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc96)
  ^bb8:  // pred: ^bb7
    %19 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc116)
    %20 = cir.load %19 : !cir.ptr<!s64i>, !s64i loc(#loc117)
    cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc118)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc119)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc119)
    cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc120)
    cir.return loc(#loc90)
  } loc(#loc157)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":21:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":37:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":23:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":23:15)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":25:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":25:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":26:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":33:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":26:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":26:26)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":27:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":30:27)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":30:34)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":30:45)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":30:46)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":30:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":31:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":31:37)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":31:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":31:21)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":31:27)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":31:28)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":31:34)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":31:33)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":32:17)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":32:10)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":32:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":35:24)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":35:23)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":35:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":36:10)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":36:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":84:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":88:1)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":86:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":86:14)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":87:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":87:14)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":52:19)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":44:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":64:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":46:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":46:15)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":48:12)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":48:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":49:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":60:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":49:8)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":49:27)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":50:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":53:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":55:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":52:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":57:27)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":57:34)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":57:46)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":57:47)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":57:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":58:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":58:37)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":58:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":58:21)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":58:27)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":58:28)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":58:34)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":58:33)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":59:17)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":59:10)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":59:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":62:24)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":62:23)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":62:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":63:10)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":63:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":67:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":82:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":69:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":69:15)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":71:12)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":71:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":72:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":78:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":72:8)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":72:26)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":73:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":75:27)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":75:34)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":75:46)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":75:47)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":75:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":76:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":76:37)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":76:13)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":76:21)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":76:27)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":76:28)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":76:34)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":76:33)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":77:17)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":77:10)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":77:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":80:24)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":80:23)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":80:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":81:10)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c":81:5)
#loc121 = loc(fused[#loc1, #loc2])
#loc122 = loc(fused[#loc3, #loc4])
#loc123 = loc(fused[#loc5, #loc6])
#loc124 = loc(fused[#loc7, #loc8])
#loc125 = loc(fused[#loc9, #loc10])
#loc126 = loc(fused[#loc11, #loc12])
#loc127 = loc(fused[#loc13, #loc14])
#loc128 = loc(fused[#loc16, #loc15])
#loc129 = loc(fused[#loc17, #loc18])
#loc130 = loc(fused[#loc19, #loc20])
#loc131 = loc(fused[#loc21, #loc18])
#loc132 = loc(fused[#loc23, #loc24])
#loc133 = loc(fused[#loc22, #loc25])
#loc134 = loc(fused[#loc26, #loc25])
#loc135 = loc(fused[#loc27, #loc28])
#loc136 = loc(fused[#loc29, #loc30])
#loc137 = loc(fused[#loc31, #loc28])
#loc138 = loc(fused[#loc37, #loc35])
#loc139 = loc(fused[#loc43, #loc44])
#loc140 = loc(fused[#loc45, #loc46])
#loc141 = loc(fused[#loc47, #loc48])
#loc142 = loc(fused[#loc49, #loc50])
#loc143 = loc(fused[#loc51, #loc52])
#loc144 = loc(fused[#loc54, #loc55])
#loc145 = loc(fused[#loc56, #loc57])
#loc146 = loc(fused[#loc59, #loc58])
#loc147 = loc(fused[#loc60, #loc61])
#loc148 = loc(fused[#loc62, #loc63])
#loc149 = loc(fused[#loc64, #loc65, #loc66, #loc61])
#loc150 = loc(fused[#loc69, #loc70])
#loc151 = loc(fused[#loc68, #loc71])
#loc152 = loc(fused[#loc72, #loc71])
#loc153 = loc(fused[#loc73, #loc74])
#loc154 = loc(fused[#loc75, #loc76])
#loc155 = loc(fused[#loc77, #loc74])
#loc156 = loc(fused[#loc83, #loc81])
#loc157 = loc(fused[#loc89, #loc90])
#loc158 = loc(fused[#loc91, #loc92])
#loc159 = loc(fused[#loc94, #loc93])
#loc160 = loc(fused[#loc95, #loc96])
#loc161 = loc(fused[#loc97, #loc98])
#loc162 = loc(fused[#loc99, #loc96])
#loc163 = loc(fused[#loc101, #loc102])
#loc164 = loc(fused[#loc100, #loc103])
#loc165 = loc(fused[#loc104, #loc103])
#loc166 = loc(fused[#loc105, #loc106])
#loc167 = loc(fused[#loc107, #loc108])
#loc168 = loc(fused[#loc109, #loc106])
#loc169 = loc(fused[#loc115, #loc113])
