!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_divide_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc421)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc422)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc423)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc424)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc425)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc426)
  cir.func private @close(!s32i) -> !s32i loc(#loc427)
  cir.func private @printIntLine(!s32i) loc(#loc428)
  cir.func no_proto @CWE369_Divide_by_Zero__int_connect_socket_divide_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc430)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc23)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc431)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc27)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc28)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc433)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc436)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc437)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc438)
          %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc439)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc37)
          %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc37)
          cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc438)
          cir.scope {
            cir.do {
              cir.scope {
                %12 = cir.const #cir.int<2> : !s32i loc(#loc44)
                %13 = cir.const #cir.int<1> : !s32i loc(#loc45)
                %14 = cir.const #cir.int<6> : !s32i loc(#loc46)
                %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc47)
                cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc442)
                cir.scope {
                  %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc52)
                  %55 = cir.const #cir.int<1> : !s32i loc(#loc53)
                  %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc53)
                  %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc444)
                  cir.if %57 {
                    cir.break loc(#loc55)
                  } loc(#loc445)
                } loc(#loc443)
                %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc446)
                %17 = cir.const #cir.int<0> : !s32i loc(#loc58)
                %18 = cir.const #cir.int<16> : !u64i loc(#loc447)
                cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc448)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc63)
                %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc63)
                %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
                cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc449)
                %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
                %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
                %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc66)
                %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc67)
                %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc68)
                cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc450)
                %27 = cir.const #cir.int<27015> : !s32i loc(#loc71)
                %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc71)
                %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc72)
                %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
                cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc451)
                cir.scope {
                  %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc78)
                  %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc453)
                  %56 = cir.const #cir.int<16> : !u64i loc(#loc454)
                  %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc454)
                  %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc83)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc84)
                  %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc84)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc455)
                  cir.if %61 {
                    cir.break loc(#loc86)
                  } loc(#loc456)
                } loc(#loc452)
                %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc87)
                %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc88)
                %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc88)
                %34 = cir.const #cir.int<3> : !s32i loc(#loc89)
                %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc89)
                %36 = cir.const #cir.int<4> : !u64i loc(#loc89)
                %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc89)
                %38 = cir.const #cir.int<2> : !s32i loc(#loc89)
                %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc89)
                %40 = cir.binop(add, %37, %39) : !u64i loc(#loc89)
                %41 = cir.const #cir.int<1> : !s32i loc(#loc90)
                %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc90)
                %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc457)
                %44 = cir.const #cir.int<0> : !s32i loc(#loc91)
                %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc92)
                %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc92)
                cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc458)
                cir.scope {
                  %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc97)
                  %55 = cir.const #cir.int<1> : !s32i loc(#loc98)
                  %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc98)
                  %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc460)
                  %58 = cir.ternary(%57, true {
                    %59 = cir.const #true loc(#loc99)
                    cir.yield %59 : !cir.bool loc(#loc99)
                  }, false {
                    %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc100)
                    %60 = cir.const #cir.int<0> : !s32i loc(#loc101)
                    %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc461)
                    %62 = cir.ternary(%61, true {
                      %63 = cir.const #true loc(#loc99)
                      cir.yield %63 : !cir.bool loc(#loc99)
                    }, false {
                      %63 = cir.const #false loc(#loc99)
                      cir.yield %63 : !cir.bool loc(#loc99)
                    }) : (!cir.bool) -> !cir.bool loc(#loc99)
                    cir.yield %62 : !cir.bool loc(#loc99)
                  }) : (!cir.bool) -> !cir.bool loc(#loc99)
                  cir.if %58 {
                    cir.break loc(#loc103)
                  } loc(#loc462)
                } loc(#loc459)
                %47 = cir.const #cir.int<0> : !s32i loc(#loc104)
                %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc104)
                %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc106)
                %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc106)
                cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc463)
                %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc107)
                %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc108)
                cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc464)
              } loc(#loc441)
              cir.yield loc(#loc41)
            } while {
              %12 = cir.const #cir.int<0> : !s32i loc(#loc111)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc111)
              cir.condition(%13) loc(#loc111)
            } loc(#loc440)
          } loc(#loc440)
          cir.scope {
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc114)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc115)
            %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc115)
            %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc466)
            cir.if %15 {
              %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc117)
              %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc118)
            } loc(#loc467)
          } loc(#loc465)
        } loc(#loc435)
      } loc(#loc434)
    } loc(#loc432)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc121)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc122)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc469)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc124)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc125)
        %8 = cir.binop(div, %6, %7) : !s32i loc(#loc471)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc126)
      } loc(#loc470)
    } loc(#loc468)
    cir.return loc(#loc19)
  } loc(#loc429)
  cir.func no_proto @CWE369_Divide_by_Zero__int_connect_socket_divide_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc473)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc129)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc474)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc131)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc475)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc133)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc476)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc135)
    cir.return loc(#loc128)
  } loc(#loc472)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc477)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc139)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc140)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc479)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc145)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc146)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc480)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc150)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc151)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc482)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc485)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc486)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc487)
          %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc488)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc160)
          %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc160)
          cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc487)
          cir.scope {
            cir.do {
              cir.scope {
                %12 = cir.const #cir.int<2> : !s32i loc(#loc167)
                %13 = cir.const #cir.int<1> : !s32i loc(#loc168)
                %14 = cir.const #cir.int<6> : !s32i loc(#loc169)
                %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc170)
                cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc491)
                cir.scope {
                  %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc175)
                  %55 = cir.const #cir.int<1> : !s32i loc(#loc176)
                  %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc176)
                  %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc493)
                  cir.if %57 {
                    cir.break loc(#loc178)
                  } loc(#loc494)
                } loc(#loc492)
                %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc495)
                %17 = cir.const #cir.int<0> : !s32i loc(#loc181)
                %18 = cir.const #cir.int<16> : !u64i loc(#loc496)
                cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc497)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc186)
                %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc186)
                %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
                cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc498)
                %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc188)
                %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc188)
                %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc189)
                %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc67)
                %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc68)
                cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc499)
                %27 = cir.const #cir.int<27015> : !s32i loc(#loc192)
                %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc192)
                %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc193)
                %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
                cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc500)
                cir.scope {
                  %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc198)
                  %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc502)
                  %56 = cir.const #cir.int<16> : !u64i loc(#loc503)
                  %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc503)
                  %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc203)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc204)
                  %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc204)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc504)
                  cir.if %61 {
                    cir.break loc(#loc206)
                  } loc(#loc505)
                } loc(#loc501)
                %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc207)
                %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc208)
                %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc208)
                %34 = cir.const #cir.int<3> : !s32i loc(#loc209)
                %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc209)
                %36 = cir.const #cir.int<4> : !u64i loc(#loc209)
                %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc209)
                %38 = cir.const #cir.int<2> : !s32i loc(#loc209)
                %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc209)
                %40 = cir.binop(add, %37, %39) : !u64i loc(#loc209)
                %41 = cir.const #cir.int<1> : !s32i loc(#loc210)
                %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc210)
                %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc506)
                %44 = cir.const #cir.int<0> : !s32i loc(#loc211)
                %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc212)
                %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc212)
                cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc507)
                cir.scope {
                  %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc217)
                  %55 = cir.const #cir.int<1> : !s32i loc(#loc218)
                  %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc218)
                  %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc509)
                  %58 = cir.ternary(%57, true {
                    %59 = cir.const #true loc(#loc219)
                    cir.yield %59 : !cir.bool loc(#loc219)
                  }, false {
                    %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc220)
                    %60 = cir.const #cir.int<0> : !s32i loc(#loc221)
                    %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc510)
                    %62 = cir.ternary(%61, true {
                      %63 = cir.const #true loc(#loc219)
                      cir.yield %63 : !cir.bool loc(#loc219)
                    }, false {
                      %63 = cir.const #false loc(#loc219)
                      cir.yield %63 : !cir.bool loc(#loc219)
                    }) : (!cir.bool) -> !cir.bool loc(#loc219)
                    cir.yield %62 : !cir.bool loc(#loc219)
                  }) : (!cir.bool) -> !cir.bool loc(#loc219)
                  cir.if %58 {
                    cir.break loc(#loc223)
                  } loc(#loc511)
                } loc(#loc508)
                %47 = cir.const #cir.int<0> : !s32i loc(#loc224)
                %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc224)
                %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc225)
                %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc226)
                %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc226)
                cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc512)
                %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc227)
                %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc228)
                cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc513)
              } loc(#loc490)
              cir.yield loc(#loc164)
            } while {
              %12 = cir.const #cir.int<0> : !s32i loc(#loc231)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc231)
              cir.condition(%13) loc(#loc231)
            } loc(#loc489)
          } loc(#loc489)
          cir.scope {
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc234)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc235)
            %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc235)
            %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc515)
            cir.if %15 {
              %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc237)
              %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc238)
            } loc(#loc516)
          } loc(#loc514)
        } loc(#loc484)
      } loc(#loc483)
    } loc(#loc481)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc241)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc242)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc518)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc139)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc139)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc246)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc249)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc250)
          %8 = cir.cmp(ne, %6, %7) : !s32i, !cir.bool loc(#loc521)
          cir.if %8 {
            %9 = cir.const #cir.int<100> : !s32i loc(#loc254)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc255)
            %11 = cir.binop(div, %9, %10) : !s32i loc(#loc523)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc256)
          } else {
            %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc140)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc140)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc257)
          } loc(#loc522)
        } loc(#loc520)
      } loc(#loc519)
    } loc(#loc517)
    cir.return loc(#loc142)
  } loc(#loc478)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc525)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc262)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc263)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc526)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc267)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc268)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc528)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc531)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc532)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc533)
          %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc534)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc277)
          %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc277)
          cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc533)
          cir.scope {
            cir.do {
              cir.scope {
                %12 = cir.const #cir.int<2> : !s32i loc(#loc284)
                %13 = cir.const #cir.int<1> : !s32i loc(#loc285)
                %14 = cir.const #cir.int<6> : !s32i loc(#loc286)
                %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc287)
                cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc537)
                cir.scope {
                  %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc292)
                  %55 = cir.const #cir.int<1> : !s32i loc(#loc293)
                  %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc293)
                  %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc539)
                  cir.if %57 {
                    cir.break loc(#loc295)
                  } loc(#loc540)
                } loc(#loc538)
                %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc541)
                %17 = cir.const #cir.int<0> : !s32i loc(#loc298)
                %18 = cir.const #cir.int<16> : !u64i loc(#loc542)
                cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc543)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc303)
                %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc303)
                %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
                cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc544)
                %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc305)
                %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc305)
                %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc306)
                %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc67)
                %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc68)
                cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc545)
                %27 = cir.const #cir.int<27015> : !s32i loc(#loc309)
                %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc309)
                %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc310)
                %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
                cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc546)
                cir.scope {
                  %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc315)
                  %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc548)
                  %56 = cir.const #cir.int<16> : !u64i loc(#loc549)
                  %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc549)
                  %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc320)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc321)
                  %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc321)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc550)
                  cir.if %61 {
                    cir.break loc(#loc323)
                  } loc(#loc551)
                } loc(#loc547)
                %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc324)
                %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc325)
                %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc325)
                %34 = cir.const #cir.int<3> : !s32i loc(#loc326)
                %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc326)
                %36 = cir.const #cir.int<4> : !u64i loc(#loc326)
                %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc326)
                %38 = cir.const #cir.int<2> : !s32i loc(#loc326)
                %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc326)
                %40 = cir.binop(add, %37, %39) : !u64i loc(#loc326)
                %41 = cir.const #cir.int<1> : !s32i loc(#loc327)
                %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc327)
                %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc552)
                %44 = cir.const #cir.int<0> : !s32i loc(#loc328)
                %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc329)
                %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc329)
                cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc553)
                cir.scope {
                  %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc334)
                  %55 = cir.const #cir.int<1> : !s32i loc(#loc335)
                  %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc335)
                  %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc555)
                  %58 = cir.ternary(%57, true {
                    %59 = cir.const #true loc(#loc336)
                    cir.yield %59 : !cir.bool loc(#loc336)
                  }, false {
                    %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc337)
                    %60 = cir.const #cir.int<0> : !s32i loc(#loc338)
                    %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc556)
                    %62 = cir.ternary(%61, true {
                      %63 = cir.const #true loc(#loc336)
                      cir.yield %63 : !cir.bool loc(#loc336)
                    }, false {
                      %63 = cir.const #false loc(#loc336)
                      cir.yield %63 : !cir.bool loc(#loc336)
                    }) : (!cir.bool) -> !cir.bool loc(#loc336)
                    cir.yield %62 : !cir.bool loc(#loc336)
                  }) : (!cir.bool) -> !cir.bool loc(#loc336)
                  cir.if %58 {
                    cir.break loc(#loc340)
                  } loc(#loc557)
                } loc(#loc554)
                %47 = cir.const #cir.int<0> : !s32i loc(#loc341)
                %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc341)
                %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc342)
                %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc343)
                %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc343)
                cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc558)
                %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc344)
                %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc345)
                cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc559)
              } loc(#loc536)
              cir.yield loc(#loc281)
            } while {
              %12 = cir.const #cir.int<0> : !s32i loc(#loc348)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc348)
              cir.condition(%13) loc(#loc348)
            } loc(#loc535)
          } loc(#loc535)
          cir.scope {
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc351)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc352)
            %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc352)
            %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc561)
            cir.if %15 {
              %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc354)
              %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc355)
            } loc(#loc562)
          } loc(#loc560)
        } loc(#loc530)
      } loc(#loc529)
    } loc(#loc527)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc358)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc359)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc564)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc363)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc364)
          %8 = cir.cmp(ne, %6, %7) : !s32i, !cir.bool loc(#loc567)
          cir.if %8 {
            %9 = cir.const #cir.int<100> : !s32i loc(#loc368)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc369)
            %11 = cir.binop(div, %9, %10) : !s32i loc(#loc569)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc370)
          } else {
            %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc371)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc371)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc372)
          } loc(#loc568)
        } loc(#loc566)
      } loc(#loc565)
    } loc(#loc563)
    cir.return loc(#loc259)
  } loc(#loc524)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc571)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc377)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc378)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc572)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc382)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc383)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc574)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc387)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc387)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc388)
      } else {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc389)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc576)
      } loc(#loc575)
    } loc(#loc573)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc393)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc394)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc578)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc396)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc397)
        %8 = cir.binop(div, %6, %7) : !s32i loc(#loc580)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc398)
      } loc(#loc579)
    } loc(#loc577)
    cir.return loc(#loc374)
  } loc(#loc570)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc582)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc403)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc404)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc583)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc408)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc409)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc585)
      cir.if %5 {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc411)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc587)
      } loc(#loc586)
    } loc(#loc584)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc415)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc416)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc589)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc418)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc419)
        %8 = cir.binop(div, %6, %7) : !s32i loc(#loc591)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc420)
      } loc(#loc590)
    } loc(#loc588)
    cir.return loc(#loc400)
  } loc(#loc581)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":82:53)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":49:1)
#loc19 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":118:1)
#loc20 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":51:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":51:9)
#loc22 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":53:13)
#loc23 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":53:12)
#loc24 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":53:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":54:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":112:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":54:8)
#loc28 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":54:27)
#loc29 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":55:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":56:9)
#loc31 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":111:9)
#loc32 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":61:13)
#loc33 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":61:17)
#loc34 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":62:13)
#loc35 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":62:32)
#loc36 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":63:13)
#loc37 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":63:36)
#loc38 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":64:13)
#loc39 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":64:45)
#loc40 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":65:13)
#loc41 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":100:21)
#loc42 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":66:13)
#loc43 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":99:13)
#loc44 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":75:40)
#loc45 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":75:49)
#loc46 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":75:62)
#loc47 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":75:33)
#loc48 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":75:17)
#loc49 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":75:73)
#loc50 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":76:17)
#loc51 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":79:17)
#loc52 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":76:21)
#loc53 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":76:38)
#loc54 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":77:17)
#loc55 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":78:21)
#loc56 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":80:24)
#loc57 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":80:25)
#loc58 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":80:34)
#loc59 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":80:37)
#loc60 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":80:51)
#loc61 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":80:17)
#loc62 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":80:52)
#loc63 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":81:38)
#loc64 = loc("/usr/include/netinet/in.h":249:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":81:17)
#loc66 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":82:43)
#loc67 = loc("/usr/include/netinet/in.h":251:20)
#loc68 = loc("/usr/include/netinet/in.h":33:15)
#loc69 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":82:17)
#loc70 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":82:63)
#loc71 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":83:42)
#loc72 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":83:36)
#loc73 = loc("/usr/include/netinet/in.h":250:15)
#loc74 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":83:17)
#loc75 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":83:50)
#loc76 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":84:17)
#loc77 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":87:17)
#loc78 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":84:29)
#loc79 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":84:62)
#loc80 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":84:63)
#loc81 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":84:72)
#loc82 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":84:86)
#loc83 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":84:21)
#loc84 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":84:92)
#loc85 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":85:17)
#loc86 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":86:21)
#loc87 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":90:35)
#loc88 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":90:50)
#loc89 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":90:63)
#loc90 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":90:81)
#loc91 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":90:84)
#loc92 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":90:30)
#loc93 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":90:17)
#loc94 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":90:85)
#loc95 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":91:17)
#loc96 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":94:17)
#loc97 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":91:21)
#loc98 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":91:35)
#loc99 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":91:48)
#loc100 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":91:51)
#loc101 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":91:65)
#loc102 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":92:17)
#loc103 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":93:21)
#loc104 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":96:43)
#loc105 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":96:29)
#loc106 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":96:17)
#loc107 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":98:29)
#loc108 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":98:24)
#loc109 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":98:17)
#loc110 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":98:40)
#loc111 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":100:20)
#loc112 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":101:13)
#loc113 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":104:13)
#loc114 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":101:17)
#loc115 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":101:34)
#loc116 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":102:13)
#loc117 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":103:30)
#loc118 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":103:17)
#loc119 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":113:5)
#loc120 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":117:5)
#loc121 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":113:8)
#loc122 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":113:27)
#loc123 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":114:5)
#loc124 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":116:22)
#loc125 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":116:28)
#loc126 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":116:9)
#loc127 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":328:1)
#loc128 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":334:1)
#loc129 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":330:5)
#loc130 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":330:14)
#loc131 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":331:5)
#loc132 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":331:14)
#loc133 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":332:5)
#loc134 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":332:14)
#loc135 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":333:5)
#loc136 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":333:14)
#loc137 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc138 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc139 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":192:19)
#loc140 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":203:23)
#loc141 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":125:1)
#loc142 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":206:1)
#loc143 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":127:5)
#loc144 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":127:9)
#loc145 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":129:13)
#loc146 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":129:12)
#loc147 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":129:5)
#loc148 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":130:5)
#loc149 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":188:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":130:8)
#loc151 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":130:27)
#loc152 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":131:5)
#loc153 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":132:9)
#loc154 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":187:9)
#loc155 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":137:13)
#loc156 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":137:17)
#loc157 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":138:13)
#loc158 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":138:32)
#loc159 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":139:13)
#loc160 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":139:36)
#loc161 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":140:13)
#loc162 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":140:45)
#loc163 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":141:13)
#loc164 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":176:21)
#loc165 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":142:13)
#loc166 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":175:13)
#loc167 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":151:40)
#loc168 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":151:49)
#loc169 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":151:62)
#loc170 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":151:33)
#loc171 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":151:17)
#loc172 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":151:73)
#loc173 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":152:17)
#loc174 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":155:17)
#loc175 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":152:21)
#loc176 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":152:38)
#loc177 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":153:17)
#loc178 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":154:21)
#loc179 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":156:24)
#loc180 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":156:25)
#loc181 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":156:34)
#loc182 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":156:37)
#loc183 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":156:51)
#loc184 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":156:17)
#loc185 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":156:52)
#loc186 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":157:38)
#loc187 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":157:17)
#loc188 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":158:53)
#loc189 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":158:43)
#loc190 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":158:17)
#loc191 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":158:63)
#loc192 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":159:42)
#loc193 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":159:36)
#loc194 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":159:17)
#loc195 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":159:50)
#loc196 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":160:17)
#loc197 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":163:17)
#loc198 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":160:29)
#loc199 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":160:62)
#loc200 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":160:63)
#loc201 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":160:72)
#loc202 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":160:86)
#loc203 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":160:21)
#loc204 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":160:92)
#loc205 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":161:17)
#loc206 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":162:21)
#loc207 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":166:35)
#loc208 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":166:50)
#loc209 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":166:63)
#loc210 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":166:81)
#loc211 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":166:84)
#loc212 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":166:30)
#loc213 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":166:17)
#loc214 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":166:85)
#loc215 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":167:17)
#loc216 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":170:17)
#loc217 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":167:21)
#loc218 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":167:35)
#loc219 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":167:48)
#loc220 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":167:51)
#loc221 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":167:65)
#loc222 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":168:17)
#loc223 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":169:21)
#loc224 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":172:43)
#loc225 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":172:29)
#loc226 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":172:17)
#loc227 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":174:29)
#loc228 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":174:24)
#loc229 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":174:17)
#loc230 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":174:40)
#loc231 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":176:20)
#loc232 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":177:13)
#loc233 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":180:13)
#loc234 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":177:17)
#loc235 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":177:34)
#loc236 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":178:13)
#loc237 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":179:30)
#loc238 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":179:17)
#loc239 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":189:5)
#loc240 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":205:5)
#loc241 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":189:8)
#loc242 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":189:27)
#loc243 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":190:5)
#loc244 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":193:5)
#loc245 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":195:5)
#loc246 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":192:9)
#loc247 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":197:9)
#loc248 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":204:9)
#loc249 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":197:13)
#loc250 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":197:21)
#loc251 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":198:9)
#loc252 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":200:9)
#loc253 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":202:9)
#loc254 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":199:26)
#loc255 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":199:32)
#loc256 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":199:13)
#loc257 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":203:13)
#loc258 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":209:1)
#loc259 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":285:1)
#loc260 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":211:5)
#loc261 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":211:9)
#loc262 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":213:13)
#loc263 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":213:12)
#loc264 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":213:5)
#loc265 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":214:5)
#loc266 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":272:5)
#loc267 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":214:8)
#loc268 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":214:27)
#loc269 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":215:5)
#loc270 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":216:9)
#loc271 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":271:9)
#loc272 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":221:13)
#loc273 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":221:17)
#loc274 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":222:13)
#loc275 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":222:32)
#loc276 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":223:13)
#loc277 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":223:36)
#loc278 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":224:13)
#loc279 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":224:45)
#loc280 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":225:13)
#loc281 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":260:21)
#loc282 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":226:13)
#loc283 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":259:13)
#loc284 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":235:40)
#loc285 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":235:49)
#loc286 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":235:62)
#loc287 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":235:33)
#loc288 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":235:17)
#loc289 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":235:73)
#loc290 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":236:17)
#loc291 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":239:17)
#loc292 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":236:21)
#loc293 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":236:38)
#loc294 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":237:17)
#loc295 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":238:21)
#loc296 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":240:24)
#loc297 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":240:25)
#loc298 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":240:34)
#loc299 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":240:37)
#loc300 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":240:51)
#loc301 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":240:17)
#loc302 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":240:52)
#loc303 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":241:38)
#loc304 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":241:17)
#loc305 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":242:53)
#loc306 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":242:43)
#loc307 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":242:17)
#loc308 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":242:63)
#loc309 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":243:42)
#loc310 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":243:36)
#loc311 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":243:17)
#loc312 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":243:50)
#loc313 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":244:17)
#loc314 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":247:17)
#loc315 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":244:29)
#loc316 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":244:62)
#loc317 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":244:63)
#loc318 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":244:72)
#loc319 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":244:86)
#loc320 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":244:21)
#loc321 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":244:92)
#loc322 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":245:17)
#loc323 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":246:21)
#loc324 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":250:35)
#loc325 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":250:50)
#loc326 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":250:63)
#loc327 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":250:81)
#loc328 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":250:84)
#loc329 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":250:30)
#loc330 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":250:17)
#loc331 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":250:85)
#loc332 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":251:17)
#loc333 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":254:17)
#loc334 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":251:21)
#loc335 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":251:35)
#loc336 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":251:48)
#loc337 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":251:51)
#loc338 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":251:65)
#loc339 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":252:17)
#loc340 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":253:21)
#loc341 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":256:43)
#loc342 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":256:29)
#loc343 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":256:17)
#loc344 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":258:29)
#loc345 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":258:24)
#loc346 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":258:17)
#loc347 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":258:40)
#loc348 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":260:20)
#loc349 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":261:13)
#loc350 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":264:13)
#loc351 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":261:17)
#loc352 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":261:34)
#loc353 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":262:13)
#loc354 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":263:30)
#loc355 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":263:17)
#loc356 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":273:5)
#loc357 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":284:5)
#loc358 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":273:8)
#loc359 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":273:27)
#loc360 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":274:5)
#loc361 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":276:9)
#loc362 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":283:9)
#loc363 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":276:13)
#loc364 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":276:21)
#loc365 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":277:9)
#loc366 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":279:9)
#loc367 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":281:9)
#loc368 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":278:26)
#loc369 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":278:32)
#loc370 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":278:13)
#loc371 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":282:23)
#loc372 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":282:13)
#loc373 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":288:1)
#loc374 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":308:1)
#loc375 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":290:5)
#loc376 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":290:9)
#loc377 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":292:13)
#loc378 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":292:12)
#loc379 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":292:5)
#loc380 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":293:5)
#loc381 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":302:5)
#loc382 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":293:8)
#loc383 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":293:27)
#loc384 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":294:5)
#loc385 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":297:5)
#loc386 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":299:5)
#loc387 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":296:19)
#loc388 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":296:9)
#loc389 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":301:16)
#loc390 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":301:9)
#loc391 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":303:5)
#loc392 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":307:5)
#loc393 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":303:8)
#loc394 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":303:27)
#loc395 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":304:5)
#loc396 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":306:22)
#loc397 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":306:28)
#loc398 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":306:9)
#loc399 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":311:1)
#loc400 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":326:1)
#loc401 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":313:5)
#loc402 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":313:9)
#loc403 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":315:13)
#loc404 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":315:12)
#loc405 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":315:5)
#loc406 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":316:5)
#loc407 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":320:5)
#loc408 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":316:8)
#loc409 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":316:27)
#loc410 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":317:5)
#loc411 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":319:16)
#loc412 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":319:9)
#loc413 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":321:5)
#loc414 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":325:5)
#loc415 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":321:8)
#loc416 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":321:27)
#loc417 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":322:5)
#loc418 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":324:22)
#loc419 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":324:28)
#loc420 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_06.c":324:9)
#loc421 = loc(fused[#loc1, #loc2])
#loc422 = loc(fused[#loc3, #loc4])
#loc423 = loc(fused[#loc6, #loc7])
#loc424 = loc(fused[#loc8, #loc9])
#loc425 = loc(fused[#loc10, #loc11])
#loc426 = loc(fused[#loc12, #loc13])
#loc427 = loc(fused[#loc14, #loc15])
#loc428 = loc(fused[#loc16, #loc17])
#loc429 = loc(fused[#loc18, #loc19])
#loc430 = loc(fused[#loc20, #loc21])
#loc431 = loc(fused[#loc24, #loc22])
#loc432 = loc(fused[#loc25, #loc26])
#loc433 = loc(fused[#loc27, #loc28])
#loc434 = loc(fused[#loc29, #loc26])
#loc435 = loc(fused[#loc30, #loc31])
#loc436 = loc(fused[#loc32, #loc33])
#loc437 = loc(fused[#loc34, #loc35])
#loc438 = loc(fused[#loc36, #loc37])
#loc439 = loc(fused[#loc38, #loc39])
#loc440 = loc(fused[#loc40, #loc41])
#loc441 = loc(fused[#loc42, #loc43])
#loc442 = loc(fused[#loc48, #loc49])
#loc443 = loc(fused[#loc50, #loc51])
#loc444 = loc(fused[#loc52, #loc53])
#loc445 = loc(fused[#loc54, #loc51])
#loc446 = loc(fused[#loc56, #loc57])
#loc447 = loc(fused[#loc59, #loc60])
#loc448 = loc(fused[#loc61, #loc62])
#loc449 = loc(fused[#loc65, #loc63])
#loc450 = loc(fused[#loc69, #loc70])
#loc451 = loc(fused[#loc74, #loc75])
#loc452 = loc(fused[#loc76, #loc77])
#loc453 = loc(fused[#loc79, #loc80])
#loc454 = loc(fused[#loc81, #loc82])
#loc455 = loc(fused[#loc83, #loc84])
#loc456 = loc(fused[#loc85, #loc77])
#loc457 = loc(fused[#loc89, #loc90])
#loc458 = loc(fused[#loc93, #loc94])
#loc459 = loc(fused[#loc95, #loc96])
#loc460 = loc(fused[#loc97, #loc98])
#loc461 = loc(fused[#loc100, #loc101])
#loc462 = loc(fused[#loc102, #loc96])
#loc463 = loc(fused[#loc106, #loc104])
#loc464 = loc(fused[#loc109, #loc110])
#loc465 = loc(fused[#loc112, #loc113])
#loc466 = loc(fused[#loc114, #loc115])
#loc467 = loc(fused[#loc116, #loc113])
#loc468 = loc(fused[#loc119, #loc120])
#loc469 = loc(fused[#loc121, #loc122])
#loc470 = loc(fused[#loc123, #loc120])
#loc471 = loc(fused[#loc124, #loc125])
#loc472 = loc(fused[#loc127, #loc128])
#loc473 = loc(fused[#loc129, #loc130])
#loc474 = loc(fused[#loc131, #loc132])
#loc475 = loc(fused[#loc133, #loc134])
#loc476 = loc(fused[#loc135, #loc136])
#loc477 = loc(fused[#loc137, #loc138])
#loc478 = loc(fused[#loc141, #loc142])
#loc479 = loc(fused[#loc143, #loc144])
#loc480 = loc(fused[#loc147, #loc145])
#loc481 = loc(fused[#loc148, #loc149])
#loc482 = loc(fused[#loc150, #loc151])
#loc483 = loc(fused[#loc152, #loc149])
#loc484 = loc(fused[#loc153, #loc154])
#loc485 = loc(fused[#loc155, #loc156])
#loc486 = loc(fused[#loc157, #loc158])
#loc487 = loc(fused[#loc159, #loc160])
#loc488 = loc(fused[#loc161, #loc162])
#loc489 = loc(fused[#loc163, #loc164])
#loc490 = loc(fused[#loc165, #loc166])
#loc491 = loc(fused[#loc171, #loc172])
#loc492 = loc(fused[#loc173, #loc174])
#loc493 = loc(fused[#loc175, #loc176])
#loc494 = loc(fused[#loc177, #loc174])
#loc495 = loc(fused[#loc179, #loc180])
#loc496 = loc(fused[#loc182, #loc183])
#loc497 = loc(fused[#loc184, #loc185])
#loc498 = loc(fused[#loc187, #loc186])
#loc499 = loc(fused[#loc190, #loc191])
#loc500 = loc(fused[#loc194, #loc195])
#loc501 = loc(fused[#loc196, #loc197])
#loc502 = loc(fused[#loc199, #loc200])
#loc503 = loc(fused[#loc201, #loc202])
#loc504 = loc(fused[#loc203, #loc204])
#loc505 = loc(fused[#loc205, #loc197])
#loc506 = loc(fused[#loc209, #loc210])
#loc507 = loc(fused[#loc213, #loc214])
#loc508 = loc(fused[#loc215, #loc216])
#loc509 = loc(fused[#loc217, #loc218])
#loc510 = loc(fused[#loc220, #loc221])
#loc511 = loc(fused[#loc222, #loc216])
#loc512 = loc(fused[#loc226, #loc224])
#loc513 = loc(fused[#loc229, #loc230])
#loc514 = loc(fused[#loc232, #loc233])
#loc515 = loc(fused[#loc234, #loc235])
#loc516 = loc(fused[#loc236, #loc233])
#loc517 = loc(fused[#loc239, #loc240])
#loc518 = loc(fused[#loc241, #loc242])
#loc519 = loc(fused[#loc243, #loc244, #loc245, #loc240])
#loc520 = loc(fused[#loc247, #loc248])
#loc521 = loc(fused[#loc249, #loc250])
#loc522 = loc(fused[#loc251, #loc252, #loc253, #loc248])
#loc523 = loc(fused[#loc254, #loc255])
#loc524 = loc(fused[#loc258, #loc259])
#loc525 = loc(fused[#loc260, #loc261])
#loc526 = loc(fused[#loc264, #loc262])
#loc527 = loc(fused[#loc265, #loc266])
#loc528 = loc(fused[#loc267, #loc268])
#loc529 = loc(fused[#loc269, #loc266])
#loc530 = loc(fused[#loc270, #loc271])
#loc531 = loc(fused[#loc272, #loc273])
#loc532 = loc(fused[#loc274, #loc275])
#loc533 = loc(fused[#loc276, #loc277])
#loc534 = loc(fused[#loc278, #loc279])
#loc535 = loc(fused[#loc280, #loc281])
#loc536 = loc(fused[#loc282, #loc283])
#loc537 = loc(fused[#loc288, #loc289])
#loc538 = loc(fused[#loc290, #loc291])
#loc539 = loc(fused[#loc292, #loc293])
#loc540 = loc(fused[#loc294, #loc291])
#loc541 = loc(fused[#loc296, #loc297])
#loc542 = loc(fused[#loc299, #loc300])
#loc543 = loc(fused[#loc301, #loc302])
#loc544 = loc(fused[#loc304, #loc303])
#loc545 = loc(fused[#loc307, #loc308])
#loc546 = loc(fused[#loc311, #loc312])
#loc547 = loc(fused[#loc313, #loc314])
#loc548 = loc(fused[#loc316, #loc317])
#loc549 = loc(fused[#loc318, #loc319])
#loc550 = loc(fused[#loc320, #loc321])
#loc551 = loc(fused[#loc322, #loc314])
#loc552 = loc(fused[#loc326, #loc327])
#loc553 = loc(fused[#loc330, #loc331])
#loc554 = loc(fused[#loc332, #loc333])
#loc555 = loc(fused[#loc334, #loc335])
#loc556 = loc(fused[#loc337, #loc338])
#loc557 = loc(fused[#loc339, #loc333])
#loc558 = loc(fused[#loc343, #loc341])
#loc559 = loc(fused[#loc346, #loc347])
#loc560 = loc(fused[#loc349, #loc350])
#loc561 = loc(fused[#loc351, #loc352])
#loc562 = loc(fused[#loc353, #loc350])
#loc563 = loc(fused[#loc356, #loc357])
#loc564 = loc(fused[#loc358, #loc359])
#loc565 = loc(fused[#loc360, #loc357])
#loc566 = loc(fused[#loc361, #loc362])
#loc567 = loc(fused[#loc363, #loc364])
#loc568 = loc(fused[#loc365, #loc366, #loc367, #loc362])
#loc569 = loc(fused[#loc368, #loc369])
#loc570 = loc(fused[#loc373, #loc374])
#loc571 = loc(fused[#loc375, #loc376])
#loc572 = loc(fused[#loc379, #loc377])
#loc573 = loc(fused[#loc380, #loc381])
#loc574 = loc(fused[#loc382, #loc383])
#loc575 = loc(fused[#loc384, #loc385, #loc386, #loc381])
#loc576 = loc(fused[#loc390, #loc389])
#loc577 = loc(fused[#loc391, #loc392])
#loc578 = loc(fused[#loc393, #loc394])
#loc579 = loc(fused[#loc395, #loc392])
#loc580 = loc(fused[#loc396, #loc397])
#loc581 = loc(fused[#loc399, #loc400])
#loc582 = loc(fused[#loc401, #loc402])
#loc583 = loc(fused[#loc405, #loc403])
#loc584 = loc(fused[#loc406, #loc407])
#loc585 = loc(fused[#loc408, #loc409])
#loc586 = loc(fused[#loc410, #loc407])
#loc587 = loc(fused[#loc412, #loc411])
#loc588 = loc(fused[#loc413, #loc414])
#loc589 = loc(fused[#loc415, #loc416])
#loc590 = loc(fused[#loc417, #loc414])
#loc591 = loc(fused[#loc418, #loc419])
