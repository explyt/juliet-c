!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":30:16)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":149:10)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":149:14)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":149:20)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":149:32)
#loc97 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":71:16)
#loc99 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":76:16)
#loc189 = loc(fused[#loc65, #loc66])
#loc190 = loc(fused[#loc67, #loc68])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc163)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc164)
  cir.func private @printIntLine(!s32i) loc(#loc165)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc166)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_modulo_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc168)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc15)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc169)
    cir.br ^bb1 loc(#loc170)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc171)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc171)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc19)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc172)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc24)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc24)
  ^bb3:  // pred: ^bb2
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc24)
    %13 = cir.const #cir.int<30> : !s32i loc(#loc24)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc24)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc24)
    %17 = cir.const #cir.int<15> : !s32i loc(#loc24)
    %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc24)
    %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc24)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc24)
    %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc24)
    cir.br ^bb5(%22 : !u32i) loc(#loc24)
  ^bb4:  // pred: ^bb2
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc24)
    %25 = cir.const #cir.int<30> : !s32i loc(#loc24)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc24)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc24)
    %29 = cir.const #cir.int<15> : !s32i loc(#loc24)
    %30 = cir.shift(left, %28 : !u32i, %29 : !s32i) -> !u32i loc(#loc24)
    %31 = cir.binop(xor, %26, %30) : !u32i loc(#loc24)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc24)
    %34 = cir.binop(xor, %31, %33) : !u32i loc(#loc24)
    %35 = cir.unary(minus, %34) : !u32i, !u32i loc(#loc24)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc24)
    %38 = cir.binop(sub, %35, %37) : !u32i loc(#loc24)
    cir.br ^bb5(%38 : !u32i) loc(#loc24)
  ^bb5(%39: !u32i loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":30:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc24)
  ^bb6:  // pred: ^bb5
    %40 = cir.cast(integral, %39 : !u32i), !s32i loc(#loc24)
    cir.store %40, %0 : !s32i, !cir.ptr<!s32i> loc(#loc173)
    cir.br ^bb8 loc(#loc22)
  ^bb7:  // pred: ^bb1
    %41 = cir.const #cir.int<7> : !s32i loc(#loc26)
    cir.store %41, %0 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    cir.br ^bb8 loc(#loc18)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc18)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc175)
  ^bb10:  // pred: ^bb9
    %42 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc176)
    %43 = cir.cast(bitcast, %42 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc176)
    %44 = cir.call %43() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc30)
    %45 = cir.cast(int_to_bool, %44 : !s32i), !cir.bool loc(#loc30)
    cir.brcond %45 ^bb11, ^bb12 loc(#loc177)
  ^bb11:  // pred: ^bb10
    %46 = cir.const #cir.int<100> : !s32i loc(#loc35)
    %47 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc36)
    %48 = cir.binop(rem, %46, %47) : !s32i loc(#loc178)
    cir.call @printIntLine(%48) : (!s32i) -> () loc(#loc37)
    cir.br ^bb18 loc(#loc33)
  ^bb12:  // pred: ^bb10
    cir.br ^bb13 loc(#loc179)
  ^bb13:  // pred: ^bb12
    %49 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc40)
    %50 = cir.const #cir.int<0> : !s32i loc(#loc41)
    %51 = cir.cmp(ne, %49, %50) : !s32i, !cir.bool loc(#loc180)
    cir.brcond %51 ^bb14, ^bb15 loc(#loc181)
  ^bb14:  // pred: ^bb13
    %52 = cir.const #cir.int<100> : !s32i loc(#loc45)
    %53 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    %54 = cir.binop(rem, %52, %53) : !s32i loc(#loc182)
    cir.call @printIntLine(%54) : (!s32i) -> () loc(#loc47)
    cir.br ^bb16 loc(#loc43)
  ^bb15:  // pred: ^bb13
    %55 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc9)
    %56 = cir.cast(array_to_ptrdecay, %55 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%56) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    cir.br ^bb16 loc(#loc39)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc39)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc29)
  ^bb18:  // 2 preds: ^bb11, ^bb17
    cir.br ^bb19 loc(#loc29)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc11)
  } loc(#loc167)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_modulo_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc184)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc185)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc53)
    cir.return loc(#loc50)
  } loc(#loc183)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc186)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc187)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc62)
  cir.func @main(%arg0: !s32i loc(fused[#loc65, #loc66]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc67, #loc68])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc189)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc190)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc64)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc69)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc70)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc71)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc71)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc72)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc59)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_rand_modulo_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc191)
    cir.call @CWE369_Divide_by_Zero__int_rand_modulo_12_good() : () -> () loc(#loc74)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc60)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc61)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_rand_modulo_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc192)
    cir.call @CWE369_Divide_by_Zero__int_rand_modulo_12_bad() : () -> () loc(#loc78)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc62)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc81)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc193)
    cir.return %17 : !s32i loc(#loc193)
  } loc(#loc188)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc195)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc88)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    cir.br ^bb1 loc(#loc197)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc198)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc198)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc92)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc92)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc199)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc97)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc97)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc97)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc97)
  ^bb3:  // pred: ^bb2
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc97)
    %13 = cir.const #cir.int<30> : !s32i loc(#loc97)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc97)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc97)
    %17 = cir.const #cir.int<15> : !s32i loc(#loc97)
    %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc97)
    %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc97)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc97)
    %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc97)
    cir.br ^bb5(%22 : !u32i) loc(#loc97)
  ^bb4:  // pred: ^bb2
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc97)
    %25 = cir.const #cir.int<30> : !s32i loc(#loc97)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc97)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc97)
    %29 = cir.const #cir.int<15> : !s32i loc(#loc97)
    %30 = cir.shift(left, %28 : !u32i, %29 : !s32i) -> !u32i loc(#loc97)
    %31 = cir.binop(xor, %26, %30) : !u32i loc(#loc97)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc97)
    %34 = cir.binop(xor, %31, %33) : !u32i loc(#loc97)
    %35 = cir.unary(minus, %34) : !u32i, !u32i loc(#loc97)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc97)
    %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc97)
    %38 = cir.binop(sub, %35, %37) : !u32i loc(#loc97)
    cir.br ^bb5(%38 : !u32i) loc(#loc97)
  ^bb5(%39: !u32i loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":71:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc97)
  ^bb6:  // pred: ^bb5
    %40 = cir.cast(integral, %39 : !u32i), !s32i loc(#loc97)
    cir.store %40, %0 : !s32i, !cir.ptr<!s32i> loc(#loc200)
    cir.br ^bb12 loc(#loc95)
  ^bb7:  // pred: ^bb1
    %41 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
    %42 = cir.const #cir.int<1> : !s32i loc(#loc99)
    %43 = cir.binop(and, %41, %42) : !s32i loc(#loc99)
    %44 = cir.cast(int_to_bool, %43 : !s32i), !cir.bool loc(#loc99)
    cir.brcond %44 ^bb8, ^bb9 loc(#loc99)
  ^bb8:  // pred: ^bb7
    %45 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
    %46 = cir.cast(integral, %45 : !s32i), !u32i loc(#loc99)
    %47 = cir.const #cir.int<30> : !s32i loc(#loc99)
    %48 = cir.shift(left, %46 : !u32i, %47 : !s32i) -> !u32i loc(#loc99)
    %49 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
    %50 = cir.cast(integral, %49 : !s32i), !u32i loc(#loc99)
    %51 = cir.const #cir.int<15> : !s32i loc(#loc99)
    %52 = cir.shift(left, %50 : !u32i, %51 : !s32i) -> !u32i loc(#loc99)
    %53 = cir.binop(xor, %48, %52) : !u32i loc(#loc99)
    %54 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
    %55 = cir.cast(integral, %54 : !s32i), !u32i loc(#loc99)
    %56 = cir.binop(xor, %53, %55) : !u32i loc(#loc99)
    cir.br ^bb10(%56 : !u32i) loc(#loc99)
  ^bb9:  // pred: ^bb7
    %57 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
    %58 = cir.cast(integral, %57 : !s32i), !u32i loc(#loc99)
    %59 = cir.const #cir.int<30> : !s32i loc(#loc99)
    %60 = cir.shift(left, %58 : !u32i, %59 : !s32i) -> !u32i loc(#loc99)
    %61 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
    %62 = cir.cast(integral, %61 : !s32i), !u32i loc(#loc99)
    %63 = cir.const #cir.int<15> : !s32i loc(#loc99)
    %64 = cir.shift(left, %62 : !u32i, %63 : !s32i) -> !u32i loc(#loc99)
    %65 = cir.binop(xor, %60, %64) : !u32i loc(#loc99)
    %66 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
    %67 = cir.cast(integral, %66 : !s32i), !u32i loc(#loc99)
    %68 = cir.binop(xor, %65, %67) : !u32i loc(#loc99)
    %69 = cir.unary(minus, %68) : !u32i, !u32i loc(#loc99)
    %70 = cir.const #cir.int<1> : !s32i loc(#loc99)
    %71 = cir.cast(integral, %70 : !s32i), !u32i loc(#loc99)
    %72 = cir.binop(sub, %69, %71) : !u32i loc(#loc99)
    cir.br ^bb10(%72 : !u32i) loc(#loc99)
  ^bb10(%73: !u32i loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":76:16)):  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc99)
  ^bb11:  // pred: ^bb10
    %74 = cir.cast(integral, %73 : !u32i), !s32i loc(#loc99)
    cir.store %74, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    cir.br ^bb12 loc(#loc91)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc91)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc202)
  ^bb14:  // pred: ^bb13
    %75 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc203)
    %76 = cir.cast(bitcast, %75 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc203)
    %77 = cir.call %76() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc103)
    %78 = cir.cast(int_to_bool, %77 : !s32i), !cir.bool loc(#loc103)
    cir.brcond %78 ^bb15, ^bb21 loc(#loc204)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc205)
  ^bb16:  // pred: ^bb15
    %79 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
    %80 = cir.const #cir.int<0> : !s32i loc(#loc111)
    %81 = cir.cmp(ne, %79, %80) : !s32i, !cir.bool loc(#loc206)
    cir.brcond %81 ^bb17, ^bb18 loc(#loc207)
  ^bb17:  // pred: ^bb16
    %82 = cir.const #cir.int<100> : !s32i loc(#loc115)
    %83 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
    %84 = cir.binop(rem, %82, %83) : !s32i loc(#loc208)
    cir.call @printIntLine(%84) : (!s32i) -> () loc(#loc117)
    cir.br ^bb19 loc(#loc113)
  ^bb18:  // pred: ^bb16
    %85 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc118)
    %86 = cir.cast(array_to_ptrdecay, %85 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc118)
    cir.call @printLine(%86) : (!cir.ptr<!s8i>) -> () loc(#loc119)
    cir.br ^bb19 loc(#loc109)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc109)
  ^bb20:  // pred: ^bb19
    cir.br ^bb27 loc(#loc106)
  ^bb21:  // pred: ^bb14
    cir.br ^bb22 loc(#loc209)
  ^bb22:  // pred: ^bb21
    %87 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
    %88 = cir.const #cir.int<0> : !s32i loc(#loc123)
    %89 = cir.cmp(ne, %87, %88) : !s32i, !cir.bool loc(#loc210)
    cir.brcond %89 ^bb23, ^bb24 loc(#loc211)
  ^bb23:  // pred: ^bb22
    %90 = cir.const #cir.int<100> : !s32i loc(#loc127)
    %91 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    %92 = cir.binop(rem, %90, %91) : !s32i loc(#loc212)
    cir.call @printIntLine(%92) : (!s32i) -> () loc(#loc129)
    cir.br ^bb25 loc(#loc125)
  ^bb24:  // pred: ^bb22
    %93 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc130)
    %94 = cir.cast(array_to_ptrdecay, %93 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc130)
    cir.call @printLine(%94) : (!cir.ptr<!s8i>) -> () loc(#loc131)
    cir.br ^bb25 loc(#loc121)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    cir.br ^bb26 loc(#loc121)
  ^bb26:  // pred: ^bb25
    cir.br ^bb27 loc(#loc102)
  ^bb27:  // 2 preds: ^bb20, ^bb26
    cir.br ^bb28 loc(#loc102)
  ^bb28:  // pred: ^bb27
    cir.return loc(#loc84)
  } loc(#loc194)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc214)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc136)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc137)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc215)
    cir.br ^bb1 loc(#loc216)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc217)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc217)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc141)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc141)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc218)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<7> : !s32i loc(#loc146)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    cir.br ^bb4 loc(#loc144)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<7> : !s32i loc(#loc148)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc220)
    cir.br ^bb4 loc(#loc140)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc140)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc221)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc222)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc222)
    %11 = cir.call %10() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc152)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc152)
    cir.brcond %12 ^bb7, ^bb8 loc(#loc223)
  ^bb7:  // pred: ^bb6
    %13 = cir.const #cir.int<100> : !s32i loc(#loc157)
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    %15 = cir.binop(rem, %13, %14) : !s32i loc(#loc224)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc159)
    cir.br ^bb9 loc(#loc155)
  ^bb8:  // pred: ^bb6
    %16 = cir.const #cir.int<100> : !s32i loc(#loc160)
    %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc161)
    %18 = cir.binop(rem, %16, %17) : !s32i loc(#loc225)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc162)
    cir.br ^bb9 loc(#loc151)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc151)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc133)
  } loc(#loc213)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":51:23)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":22:1)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":54:1)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":24:5)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":24:9)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":26:13)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":26:12)
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":26:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":27:5)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":36:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":27:8)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":27:33)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":28:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":31:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":33:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":30:9)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":35:16)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":35:9)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":37:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":53:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":37:8)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":37:33)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":38:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":41:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":43:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":40:22)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":40:28)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":40:9)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":45:9)
#loc39 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":52:9)
#loc40 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":45:13)
#loc41 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":45:21)
#loc42 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":46:9)
#loc43 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":48:9)
#loc44 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":50:9)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":47:26)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":47:32)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":47:13)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":51:13)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":134:1)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":138:1)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":136:5)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":136:13)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":137:5)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":137:13)
#loc55 = loc("/usr/include/stdlib.h":575:1)
#loc56 = loc("/usr/include/stdlib.h":575:41)
#loc57 = loc("/usr/include/time.h":76:1)
#loc58 = loc("/usr/include/time.h":76:38)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":154:15)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":156:15)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":159:15)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":161:15)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":149:1)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":164:1)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":150:1)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":152:27)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":152:22)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":152:5)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":154:5)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":155:5)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":155:52)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":156:5)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":159:5)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":160:5)
#loc79 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":160:51)
#loc80 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":161:5)
#loc81 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":163:12)
#loc82 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":163:5)
#loc83 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":63:1)
#loc84 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":102:1)
#loc85 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":65:5)
#loc86 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":65:9)
#loc87 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":67:13)
#loc88 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":67:12)
#loc89 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":67:5)
#loc90 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":68:5)
#loc91 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":77:5)
#loc92 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":68:8)
#loc93 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":68:33)
#loc94 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":69:5)
#loc95 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":72:5)
#loc96 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":74:5)
#loc98 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":71:9)
#loc100 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":76:9)
#loc101 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":78:5)
#loc102 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":101:5)
#loc103 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":78:8)
#loc104 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":78:33)
#loc105 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":79:5)
#loc106 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":89:5)
#loc107 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":91:5)
#loc108 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":81:9)
#loc109 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":88:9)
#loc110 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":81:13)
#loc111 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":81:21)
#loc112 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":82:9)
#loc113 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":84:9)
#loc114 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":86:9)
#loc115 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":83:26)
#loc116 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":83:32)
#loc117 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":83:13)
#loc118 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":87:23)
#loc119 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":87:13)
#loc120 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":93:9)
#loc121 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":100:9)
#loc122 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":93:13)
#loc123 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":93:21)
#loc124 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":94:9)
#loc125 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":96:9)
#loc126 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":98:9)
#loc127 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":95:26)
#loc128 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":95:32)
#loc129 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":95:13)
#loc130 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":99:23)
#loc131 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":99:13)
#loc132 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":107:1)
#loc133 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":132:1)
#loc134 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":109:5)
#loc135 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":109:9)
#loc136 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":111:13)
#loc137 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":111:12)
#loc138 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":111:5)
#loc139 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":112:5)
#loc140 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":121:5)
#loc141 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":112:8)
#loc142 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":112:33)
#loc143 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":113:5)
#loc144 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":116:5)
#loc145 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":118:5)
#loc146 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":115:16)
#loc147 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":115:9)
#loc148 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":120:16)
#loc149 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":120:9)
#loc150 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":122:5)
#loc151 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":131:5)
#loc152 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":122:8)
#loc153 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":122:33)
#loc154 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":123:5)
#loc155 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":126:5)
#loc156 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":128:5)
#loc157 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":125:22)
#loc158 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":125:28)
#loc159 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":125:9)
#loc160 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":130:22)
#loc161 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":130:28)
#loc162 = loc("CWE369_Divide_by_Zero__int_rand_modulo_12.c":130:9)
#loc163 = loc(fused[#loc1, #loc2])
#loc164 = loc(fused[#loc3, #loc4])
#loc165 = loc(fused[#loc5, #loc6])
#loc166 = loc(fused[#loc7, #loc8])
#loc167 = loc(fused[#loc10, #loc11])
#loc168 = loc(fused[#loc12, #loc13])
#loc169 = loc(fused[#loc16, #loc14])
#loc170 = loc(fused[#loc17, #loc18])
#loc171 = loc(fused[#loc19, #loc20])
#loc172 = loc(fused[#loc21, #loc22, #loc23, #loc18])
#loc173 = loc(fused[#loc25, #loc24])
#loc174 = loc(fused[#loc27, #loc26])
#loc175 = loc(fused[#loc28, #loc29])
#loc176 = loc(fused[#loc30, #loc31])
#loc177 = loc(fused[#loc32, #loc33, #loc34, #loc29])
#loc178 = loc(fused[#loc35, #loc36])
#loc179 = loc(fused[#loc38, #loc39])
#loc180 = loc(fused[#loc40, #loc41])
#loc181 = loc(fused[#loc42, #loc43, #loc44, #loc39])
#loc182 = loc(fused[#loc45, #loc46])
#loc183 = loc(fused[#loc49, #loc50])
#loc184 = loc(fused[#loc51, #loc52])
#loc185 = loc(fused[#loc53, #loc54])
#loc186 = loc(fused[#loc55, #loc56])
#loc187 = loc(fused[#loc57, #loc58])
#loc188 = loc(fused[#loc63, #loc64])
#loc191 = loc(fused[#loc74, #loc75])
#loc192 = loc(fused[#loc78, #loc79])
#loc193 = loc(fused[#loc82, #loc81])
#loc194 = loc(fused[#loc83, #loc84])
#loc195 = loc(fused[#loc85, #loc86])
#loc196 = loc(fused[#loc89, #loc87])
#loc197 = loc(fused[#loc90, #loc91])
#loc198 = loc(fused[#loc92, #loc93])
#loc199 = loc(fused[#loc94, #loc95, #loc96, #loc91])
#loc200 = loc(fused[#loc98, #loc97])
#loc201 = loc(fused[#loc100, #loc99])
#loc202 = loc(fused[#loc101, #loc102])
#loc203 = loc(fused[#loc103, #loc104])
#loc204 = loc(fused[#loc105, #loc106, #loc107, #loc102])
#loc205 = loc(fused[#loc108, #loc109])
#loc206 = loc(fused[#loc110, #loc111])
#loc207 = loc(fused[#loc112, #loc113, #loc114, #loc109])
#loc208 = loc(fused[#loc115, #loc116])
#loc209 = loc(fused[#loc120, #loc121])
#loc210 = loc(fused[#loc122, #loc123])
#loc211 = loc(fused[#loc124, #loc125, #loc126, #loc121])
#loc212 = loc(fused[#loc127, #loc128])
#loc213 = loc(fused[#loc132, #loc133])
#loc214 = loc(fused[#loc134, #loc135])
#loc215 = loc(fused[#loc138, #loc136])
#loc216 = loc(fused[#loc139, #loc140])
#loc217 = loc(fused[#loc141, #loc142])
#loc218 = loc(fused[#loc143, #loc144, #loc145, #loc140])
#loc219 = loc(fused[#loc147, #loc146])
#loc220 = loc(fused[#loc149, #loc148])
#loc221 = loc(fused[#loc150, #loc151])
#loc222 = loc(fused[#loc152, #loc153])
#loc223 = loc(fused[#loc154, #loc155, #loc156, #loc151])
#loc224 = loc(fused[#loc157, #loc158])
#loc225 = loc(fused[#loc160, #loc161])
