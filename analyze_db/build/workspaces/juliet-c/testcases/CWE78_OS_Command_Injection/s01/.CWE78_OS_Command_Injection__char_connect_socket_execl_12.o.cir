!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execl_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.global "private" constant cir_private @__const.goodG2B.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc204)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_connect_socket_execl_12_bad.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc205)
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc206)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc207)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc208)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc209)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc13)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc210)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc211)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc212)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc213)
  cir.func private @close(!s32i) -> !s32i loc(#loc214)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc215)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc26)
  cir.func private @execl(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc216)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"/bin/sh\00" : !cir.array<!s8i x 8>> : !cir.array<!s8i x 8> {alignment = 1 : i64} loc(#loc29)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"-c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc30)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execl_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc218)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc205)
    %2 = cir.get_global @__const.CWE78_OS_Command_Injection__char_connect_socket_execl_12_bad.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc205)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc205)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc35)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc219)
    cir.scope {
      %13 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc221)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc221)
      %15 = cir.call %14() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc39)
      %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc39)
      cir.if %16 {
        cir.scope {
          %17 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc224)
          %18 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc225)
          %19 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc226)
          %20 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc227)
          %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc228)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc53)
          %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc53)
          cir.store %23, %20 : !s32i, !cir.ptr<!s32i> loc(#loc227)
          %24 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc56)
          %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
          %26 = cir.call @strlen(%25) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc56)
          cir.store %26, %21 : !u64i, !cir.ptr<!u64i> loc(#loc228)
          cir.scope {
            cir.do {
              cir.scope {
                %27 = cir.const #cir.int<2> : !s32i loc(#loc62)
                %28 = cir.const #cir.int<1> : !s32i loc(#loc63)
                %29 = cir.const #cir.int<6> : !s32i loc(#loc64)
                %30 = cir.call @socket(%27, %28, %29) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc65)
                cir.store %30, %20 : !s32i, !cir.ptr<!s32i> loc(#loc231)
                cir.scope {
                  %81 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc70)
                  %82 = cir.const #cir.int<1> : !s32i loc(#loc71)
                  %83 = cir.unary(minus, %82) nsw : !s32i, !s32i loc(#loc71)
                  %84 = cir.cmp(eq, %81, %83) : !s32i, !cir.bool loc(#loc233)
                  cir.if %84 {
                    cir.break loc(#loc73)
                  } loc(#loc234)
                } loc(#loc232)
                %31 = cir.cast(bitcast, %18 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc235)
                %32 = cir.const #cir.int<0> : !s32i loc(#loc76)
                %33 = cir.const #cir.int<16> : !u64i loc(#loc236)
                cir.libc.memset %33 bytes from %31 set to %32 : !cir.ptr<!void>, !s32i, !u64i loc(#loc237)
                %34 = cir.const #cir.int<2> : !s32i loc(#loc81)
                %35 = cir.cast(integral, %34 : !s32i), !u16i loc(#loc81)
                %36 = cir.get_member %18[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
                cir.store %35, %36 : !u16i, !cir.ptr<!u16i> loc(#loc238)
                %37 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc13)
                %38 = cir.cast(array_to_ptrdecay, %37 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc13)
                %39 = cir.call @inet_addr(%38) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc84)
                %40 = cir.get_member %18[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc85)
                %41 = cir.get_member %40[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc86)
                cir.store %39, %41 : !u32i, !cir.ptr<!u32i> loc(#loc239)
                %42 = cir.const #cir.int<27015> : !s32i loc(#loc89)
                %43 = cir.cast(integral, %42 : !s32i), !u16i loc(#loc89)
                %44 = cir.call @htons(%43) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc90)
                %45 = cir.get_member %18[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc91)
                cir.store %44, %45 : !u16i, !cir.ptr<!u16i> loc(#loc240)
                cir.scope {
                  %81 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc96)
                  %82 = cir.cast(bitcast, %18 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc242)
                  %83 = cir.const #cir.int<16> : !u64i loc(#loc243)
                  %84 = cir.cast(integral, %83 : !u64i), !u32i loc(#loc243)
                  %85 = cir.call @connect(%81, %82, %84) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc101)
                  %86 = cir.const #cir.int<1> : !s32i loc(#loc102)
                  %87 = cir.unary(minus, %86) nsw : !s32i, !s32i loc(#loc102)
                  %88 = cir.cmp(eq, %85, %87) : !s32i, !cir.bool loc(#loc244)
                  cir.if %88 {
                    cir.break loc(#loc104)
                  } loc(#loc245)
                } loc(#loc241)
                %46 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc106)
                %48 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc107)
                %49 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc108)
                %50 = cir.cast(bitcast, %49 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc246)
                %51 = cir.const #cir.int<1> : !u64i loc(#loc247)
                %52 = cir.const #cir.int<100> : !s32i loc(#loc113)
                %53 = cir.cast(integral, %52 : !s32i), !u64i loc(#loc113)
                %54 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc114)
                %55 = cir.binop(sub, %53, %54) : !u64i loc(#loc248)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc115)
                %57 = cir.cast(integral, %56 : !s32i), !u64i loc(#loc115)
                %58 = cir.binop(sub, %55, %57) : !u64i loc(#loc249)
                %59 = cir.binop(mul, %51, %58) : !u64i loc(#loc250)
                %60 = cir.const #cir.int<0> : !s32i loc(#loc117)
                %61 = cir.call @recv(%46, %50, %59, %60) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc118)
                %62 = cir.cast(integral, %61 : !s64i), !s32i loc(#loc118)
                cir.store %62, %17 : !s32i, !cir.ptr<!s32i> loc(#loc251)
                cir.scope {
                  %81 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc123)
                  %82 = cir.const #cir.int<1> : !s32i loc(#loc124)
                  %83 = cir.unary(minus, %82) nsw : !s32i, !s32i loc(#loc124)
                  %84 = cir.cmp(eq, %81, %83) : !s32i, !cir.bool loc(#loc253)
                  %85 = cir.ternary(%84, true {
                    %86 = cir.const #true loc(#loc125)
                    cir.yield %86 : !cir.bool loc(#loc125)
                  }, false {
                    %86 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc126)
                    %87 = cir.const #cir.int<0> : !s32i loc(#loc127)
                    %88 = cir.cmp(eq, %86, %87) : !s32i, !cir.bool loc(#loc254)
                    %89 = cir.ternary(%88, true {
                      %90 = cir.const #true loc(#loc125)
                      cir.yield %90 : !cir.bool loc(#loc125)
                    }, false {
                      %90 = cir.const #false loc(#loc125)
                      cir.yield %90 : !cir.bool loc(#loc125)
                    }) : (!cir.bool) -> !cir.bool loc(#loc125)
                    cir.yield %89 : !cir.bool loc(#loc125)
                  }) : (!cir.bool) -> !cir.bool loc(#loc125)
                  cir.if %85 {
                    cir.break loc(#loc129)
                  } loc(#loc255)
                } loc(#loc252)
                %63 = cir.const #cir.int<0> : !s32i loc(#loc130)
                %64 = cir.cast(integral, %63 : !s32i), !s8i loc(#loc130)
                %65 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
                %66 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc132)
                %67 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc133)
                %68 = cir.cast(integral, %67 : !s32i), !u64i loc(#loc133)
                %69 = cir.const #cir.int<1> : !u64i loc(#loc256)
                %70 = cir.binop(div, %68, %69) : !u64i loc(#loc257)
                %71 = cir.binop(add, %66, %70) : !u64i loc(#loc258)
                %72 = cir.ptr_stride(%65 : !cir.ptr<!s8i>, %71 : !u64i), !cir.ptr<!s8i> loc(#loc136)
                cir.store %64, %72 : !s8i, !cir.ptr<!s8i> loc(#loc259)
                %73 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc137)
                %74 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc138)
                %75 = cir.const #cir.int<13> : !s32i loc(#loc139)
                %76 = cir.call @strchr(%74, %75) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc137)
                cir.store %76, %19 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc260)
                cir.scope {
                  %81 = cir.load %19 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc144)
                  %82 = cir.cast(ptr_to_bool, %81 : !cir.ptr<!s8i>), !cir.bool loc(#loc144)
                  cir.if %82 {
                    %83 = cir.const #cir.int<0> : !s32i loc(#loc146)
                    %84 = cir.cast(integral, %83 : !s32i), !s8i loc(#loc146)
                    %85 = cir.load deref %19 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc147)
                    cir.store %84, %85 : !s8i, !cir.ptr<!s8i> loc(#loc263)
                  } loc(#loc262)
                } loc(#loc261)
                %77 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc149)
                %78 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc150)
                %79 = cir.const #cir.int<10> : !s32i loc(#loc151)
                %80 = cir.call @strchr(%78, %79) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc149)
                cir.store %80, %19 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc264)
                cir.scope {
                  %81 = cir.load %19 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc156)
                  %82 = cir.cast(ptr_to_bool, %81 : !cir.ptr<!s8i>), !cir.bool loc(#loc156)
                  cir.if %82 {
                    %83 = cir.const #cir.int<0> : !s32i loc(#loc158)
                    %84 = cir.cast(integral, %83 : !s32i), !s8i loc(#loc158)
                    %85 = cir.load deref %19 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
                    cir.store %84, %85 : !s8i, !cir.ptr<!s8i> loc(#loc267)
                  } loc(#loc266)
                } loc(#loc265)
              } loc(#loc230)
              cir.yield loc(#loc59)
            } while {
              %27 = cir.const #cir.int<0> : !s32i loc(#loc161)
              %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc161)
              cir.condition(%28) loc(#loc161)
            } loc(#loc229)
          } loc(#loc229)
          cir.scope {
            %27 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc164)
            %28 = cir.const #cir.int<1> : !s32i loc(#loc165)
            %29 = cir.unary(minus, %28) nsw : !s32i, !s32i loc(#loc165)
            %30 = cir.cmp(ne, %27, %29) : !s32i, !cir.bool loc(#loc269)
            cir.if %30 {
              %31 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc167)
              %32 = cir.call @close(%31) : (!s32i) -> !s32i loc(#loc168)
            } loc(#loc270)
          } loc(#loc268)
        } loc(#loc223)
      } else {
        %17 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc169)
        %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc170)
        %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc26)
        %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc26)
        %21 = cir.call @strcat(%18, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc169)
      } loc(#loc222)
    } loc(#loc220)
    %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc29)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc29)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc171)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc171)
    %8 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc30)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc30)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc172)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc173)
    %12 = cir.call @execl(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc174)
    cir.return loc(#loc32)
  } loc(#loc217)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execl_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc272)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc177)
    cir.return loc(#loc176)
  } loc(#loc271)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc274)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc204)
    %2 = cir.get_global @__const.goodG2B.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc204)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc204)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc183)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc275)
    cir.scope {
      %13 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc277)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc277)
      %15 = cir.call %14() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc187)
      %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc187)
      cir.if %16 {
        %17 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc192)
        %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc193)
        %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc194)
        %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc194)
        %21 = cir.call @strcat(%18, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc192)
      } else {
        %17 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc195)
        %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc196)
        %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc197)
        %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc197)
        %21 = cir.call @strcat(%18, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc195)
      } loc(#loc278)
    } loc(#loc276)
    %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc198)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc198)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc199)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc199)
    %8 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc200)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc200)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc201)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc202)
    %12 = cir.call @execl(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc203)
    cir.return loc(#loc180)
  } loc(#loc273)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":159:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":159:28)
#loc3 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":68:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":68:28)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc11 = loc("/usr/include/arpa/inet.h":34:1)
#loc12 = loc("/usr/include/arpa/inet.h":34:47)
#loc13 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":99:53)
#loc14 = loc("/usr/include/netinet/in.h":402:1)
#loc15 = loc("/usr/include/netinet/in.h":403:40)
#loc16 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc17 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc18 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc19 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc20 = loc("/usr/include/string.h":246:1)
#loc21 = loc("/usr/include/string.h":247:33)
#loc22 = loc("/usr/include/unistd.h":358:1)
#loc23 = loc("/usr/include/unistd.h":358:27)
#loc24 = loc("/usr/include/string.h":149:1)
#loc25 = loc("/usr/include/string.h":150:14)
#loc26 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":143:22)
#loc27 = loc("/usr/include/unistd.h":594:1)
#loc28 = loc("/usr/include/unistd.h":595:14)
#loc29 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":147:11)
#loc30 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":147:47)
#loc31 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":65:1)
#loc32 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":148:1)
#loc33 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":67:5)
#loc34 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":67:12)
#loc35 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":69:12)
#loc36 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":69:5)
#loc37 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":70:5)
#loc38 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":144:5)
#loc39 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":70:8)
#loc40 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":70:33)
#loc41 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":71:5)
#loc42 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":139:5)
#loc43 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":141:5)
#loc44 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":72:9)
#loc45 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":138:9)
#loc46 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":77:13)
#loc47 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":77:17)
#loc48 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":78:13)
#loc49 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":78:32)
#loc50 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":79:13)
#loc51 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":79:19)
#loc52 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":80:13)
#loc53 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":80:36)
#loc54 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":81:13)
#loc55 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":81:41)
#loc56 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":81:30)
#loc57 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":81:37)
#loc58 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":82:13)
#loc59 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":127:21)
#loc60 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":83:13)
#loc61 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":126:13)
#loc62 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":92:40)
#loc63 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":92:49)
#loc64 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":92:62)
#loc65 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":92:33)
#loc66 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":92:17)
#loc67 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":92:73)
#loc68 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":93:17)
#loc69 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":96:17)
#loc70 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":93:21)
#loc71 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":93:38)
#loc72 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":94:17)
#loc73 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":95:21)
#loc74 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":97:24)
#loc75 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":97:25)
#loc76 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":97:34)
#loc77 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":97:37)
#loc78 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":97:51)
#loc79 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":97:17)
#loc80 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":97:52)
#loc81 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":98:38)
#loc82 = loc("/usr/include/netinet/in.h":249:5)
#loc83 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":98:17)
#loc84 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":99:43)
#loc85 = loc("/usr/include/netinet/in.h":251:20)
#loc86 = loc("/usr/include/netinet/in.h":33:15)
#loc87 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":99:17)
#loc88 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":99:63)
#loc89 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":100:42)
#loc90 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":100:36)
#loc91 = loc("/usr/include/netinet/in.h":250:15)
#loc92 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":100:17)
#loc93 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":100:50)
#loc94 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":101:17)
#loc95 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":104:17)
#loc96 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":101:29)
#loc97 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":101:62)
#loc98 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":101:63)
#loc99 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":101:72)
#loc100 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":101:86)
#loc101 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":101:21)
#loc102 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":101:92)
#loc103 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":102:17)
#loc104 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":103:21)
#loc105 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":108:35)
#loc106 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":108:59)
#loc107 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":108:66)
#loc108 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":108:64)
#loc109 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":108:50)
#loc110 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":108:73)
#loc111 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":108:76)
#loc112 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":108:87)
#loc113 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":108:92)
#loc114 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":108:98)
#loc115 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":108:108)
#loc116 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":108:109)
#loc117 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":108:112)
#loc118 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":108:30)
#loc119 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":108:17)
#loc120 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":108:113)
#loc121 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":109:17)
#loc122 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":112:17)
#loc123 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":109:21)
#loc124 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":109:35)
#loc125 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":109:48)
#loc126 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":109:51)
#loc127 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":109:65)
#loc128 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":110:17)
#loc129 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":111:21)
#loc130 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":114:61)
#loc131 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":114:17)
#loc132 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":114:22)
#loc133 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":114:32)
#loc134 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":114:45)
#loc135 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":114:56)
#loc136 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":114:57)
#loc137 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":116:27)
#loc138 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":116:34)
#loc139 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":116:40)
#loc140 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":116:17)
#loc141 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":116:44)
#loc142 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":117:17)
#loc143 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":120:17)
#loc144 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":117:21)
#loc145 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":118:17)
#loc146 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":119:32)
#loc147 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":119:22)
#loc148 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":119:21)
#loc149 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":121:27)
#loc150 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":121:34)
#loc151 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":121:40)
#loc152 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":121:17)
#loc153 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":121:44)
#loc154 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":122:17)
#loc155 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":125:17)
#loc156 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":122:21)
#loc157 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":123:17)
#loc158 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":124:32)
#loc159 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":124:22)
#loc160 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":124:21)
#loc161 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":127:20)
#loc162 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":128:13)
#loc163 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":131:13)
#loc164 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":128:17)
#loc165 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":128:34)
#loc166 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":129:13)
#loc167 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":130:30)
#loc168 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":130:17)
#loc169 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":143:9)
#loc170 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":143:16)
#loc171 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":147:29)
#loc172 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":147:61)
#loc173 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":147:75)
#loc174 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":147:5)
#loc175 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":176:1)
#loc176 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":179:1)
#loc177 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":178:5)
#loc178 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":178:13)
#loc179 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":156:1)
#loc180 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":174:1)
#loc181 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":158:5)
#loc182 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":158:12)
#loc183 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":160:12)
#loc184 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":160:5)
#loc185 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":161:5)
#loc186 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":170:5)
#loc187 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":161:8)
#loc188 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":161:33)
#loc189 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":162:5)
#loc190 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":165:5)
#loc191 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":167:5)
#loc192 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":164:9)
#loc193 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":164:16)
#loc194 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":164:22)
#loc195 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":169:9)
#loc196 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":169:16)
#loc197 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":169:22)
#loc198 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":173:11)
#loc199 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":173:29)
#loc200 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":173:47)
#loc201 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":173:61)
#loc202 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":173:75)
#loc203 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_12.c":173:5)
#loc204 = loc(fused[#loc1, #loc2])
#loc205 = loc(fused[#loc3, #loc4])
#loc206 = loc(fused[#loc5, #loc6])
#loc207 = loc(fused[#loc7, #loc8])
#loc208 = loc(fused[#loc9, #loc10])
#loc209 = loc(fused[#loc11, #loc12])
#loc210 = loc(fused[#loc14, #loc15])
#loc211 = loc(fused[#loc16, #loc17])
#loc212 = loc(fused[#loc18, #loc19])
#loc213 = loc(fused[#loc20, #loc21])
#loc214 = loc(fused[#loc22, #loc23])
#loc215 = loc(fused[#loc24, #loc25])
#loc216 = loc(fused[#loc27, #loc28])
#loc217 = loc(fused[#loc31, #loc32])
#loc218 = loc(fused[#loc33, #loc34])
#loc219 = loc(fused[#loc36, #loc35])
#loc220 = loc(fused[#loc37, #loc38])
#loc221 = loc(fused[#loc39, #loc40])
#loc222 = loc(fused[#loc41, #loc42, #loc43, #loc38])
#loc223 = loc(fused[#loc44, #loc45])
#loc224 = loc(fused[#loc46, #loc47])
#loc225 = loc(fused[#loc48, #loc49])
#loc226 = loc(fused[#loc50, #loc51])
#loc227 = loc(fused[#loc52, #loc53])
#loc228 = loc(fused[#loc54, #loc55])
#loc229 = loc(fused[#loc58, #loc59])
#loc230 = loc(fused[#loc60, #loc61])
#loc231 = loc(fused[#loc66, #loc67])
#loc232 = loc(fused[#loc68, #loc69])
#loc233 = loc(fused[#loc70, #loc71])
#loc234 = loc(fused[#loc72, #loc69])
#loc235 = loc(fused[#loc74, #loc75])
#loc236 = loc(fused[#loc77, #loc78])
#loc237 = loc(fused[#loc79, #loc80])
#loc238 = loc(fused[#loc83, #loc81])
#loc239 = loc(fused[#loc87, #loc88])
#loc240 = loc(fused[#loc92, #loc93])
#loc241 = loc(fused[#loc94, #loc95])
#loc242 = loc(fused[#loc97, #loc98])
#loc243 = loc(fused[#loc99, #loc100])
#loc244 = loc(fused[#loc101, #loc102])
#loc245 = loc(fused[#loc103, #loc95])
#loc246 = loc(fused[#loc109, #loc110])
#loc247 = loc(fused[#loc111, #loc112])
#loc248 = loc(fused[#loc113, #loc114])
#loc249 = loc(fused[#loc113, #loc115])
#loc250 = loc(fused[#loc111, #loc116])
#loc251 = loc(fused[#loc119, #loc120])
#loc252 = loc(fused[#loc121, #loc122])
#loc253 = loc(fused[#loc123, #loc124])
#loc254 = loc(fused[#loc126, #loc127])
#loc255 = loc(fused[#loc128, #loc122])
#loc256 = loc(fused[#loc134, #loc135])
#loc257 = loc(fused[#loc133, #loc135])
#loc258 = loc(fused[#loc132, #loc135])
#loc259 = loc(fused[#loc131, #loc130])
#loc260 = loc(fused[#loc140, #loc141])
#loc261 = loc(fused[#loc142, #loc143])
#loc262 = loc(fused[#loc145, #loc143])
#loc263 = loc(fused[#loc148, #loc146])
#loc264 = loc(fused[#loc152, #loc153])
#loc265 = loc(fused[#loc154, #loc155])
#loc266 = loc(fused[#loc157, #loc155])
#loc267 = loc(fused[#loc160, #loc158])
#loc268 = loc(fused[#loc162, #loc163])
#loc269 = loc(fused[#loc164, #loc165])
#loc270 = loc(fused[#loc166, #loc163])
#loc271 = loc(fused[#loc175, #loc176])
#loc272 = loc(fused[#loc177, #loc178])
#loc273 = loc(fused[#loc179, #loc180])
#loc274 = loc(fused[#loc181, #loc182])
#loc275 = loc(fused[#loc184, #loc183])
#loc276 = loc(fused[#loc185, #loc186])
#loc277 = loc(fused[#loc187, #loc188])
#loc278 = loc(fused[#loc189, #loc190, #loc191, #loc186])
