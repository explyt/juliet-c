!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc50 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":162:10)
#loc51 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":162:14)
#loc52 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":162:20)
#loc53 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":162:32)
#loc196 = loc(fused[#loc50, #loc51])
#loc197 = loc(fused[#loc52, #loc53])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fscanf_divide_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc176)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc177)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc178)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fscanf_divide_04_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc180)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc17)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc17)
      cir.if %4 {
        %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc19)
        %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc177)
        %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc20)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
        %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc19)
      } loc(#loc183)
    } loc(#loc182)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc23)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc23)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc25)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
        %7 = cir.binop(div, %5, %6) : !s32i loc(#loc186)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc27)
      } loc(#loc185)
    } loc(#loc184)
    cir.return loc(#loc9)
  } loc(#loc179)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fscanf_divide_04_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc188)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc189)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc190)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc191)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc29)
  } loc(#loc187)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc192)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc193)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc194)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc47)
  cir.func @main(%arg0: !s32i loc(fused[#loc50, #loc51]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc52, #loc53])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc196)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc197)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc49)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc54)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc54)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc55)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc56)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc56)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc57)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc44)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_fscanf_divide_04_good : !cir.ptr<!cir.func<!void ()>> loc(#loc198)
    cir.call @CWE369_Divide_by_Zero__int_fscanf_divide_04_good() : () -> () loc(#loc59)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc45)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc46)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_fscanf_divide_04_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc199)
    cir.call @CWE369_Divide_by_Zero__int_fscanf_divide_04_bad() : () -> () loc(#loc63)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc47)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc66)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc200)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc200)
    cir.return %17 : !s32i loc(#loc200)
  } loc(#loc195)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc69)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc202)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc75)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc79)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc79)
      cir.if %4 {
        %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc81)
        %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc177)
        %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc82)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc83)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc83)
        %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc81)
      } loc(#loc205)
    } loc(#loc204)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc86)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc86)
      cir.if %4 {
        %5 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc68)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc68)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc90)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc94)
          %7 = cir.cmp(ne, %5, %6) : !s32i, !cir.bool loc(#loc209)
          cir.if %7 {
            %8 = cir.const #cir.int<100> : !s32i loc(#loc98)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc99)
            %10 = cir.binop(div, %8, %9) : !s32i loc(#loc211)
            cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc100)
          } else {
            %8 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc69)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc69)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc101)
          } loc(#loc210)
        } loc(#loc208)
      } loc(#loc207)
    } loc(#loc206)
    cir.return loc(#loc71)
  } loc(#loc201)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc213)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc106)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc107)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc111)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc111)
      cir.if %4 {
        %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc113)
        %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc177)
        %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc114)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc115)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc115)
        %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc113)
      } loc(#loc216)
    } loc(#loc215)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc118)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc118)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc123)
          %7 = cir.cmp(ne, %5, %6) : !s32i, !cir.bool loc(#loc220)
          cir.if %7 {
            %8 = cir.const #cir.int<100> : !s32i loc(#loc127)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc128)
            %10 = cir.binop(div, %8, %9) : !s32i loc(#loc222)
            cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc129)
          } else {
            %8 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc130)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc130)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc131)
          } loc(#loc221)
        } loc(#loc219)
      } loc(#loc218)
    } loc(#loc217)
    cir.return loc(#loc103)
  } loc(#loc212)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc224)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc136)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc137)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc141)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc141)
      cir.if %4 {
        %5 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc145)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc145)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc146)
      } else {
        %5 = cir.const #cir.int<7> : !s32i loc(#loc147)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc228)
      } loc(#loc227)
    } loc(#loc226)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc151)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc151)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc153)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc154)
        %7 = cir.binop(div, %5, %6) : !s32i loc(#loc231)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc155)
      } loc(#loc230)
    } loc(#loc229)
    cir.return loc(#loc133)
  } loc(#loc223)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc233)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc160)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc161)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc165)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc165)
      cir.if %4 {
        %5 = cir.const #cir.int<7> : !s32i loc(#loc167)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc237)
      } loc(#loc236)
    } loc(#loc235)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc171)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc171)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc173)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc174)
        %7 = cir.binop(div, %5, %6) : !s32i loc(#loc240)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc175)
      } loc(#loc239)
    } loc(#loc238)
    cir.return loc(#loc157)
  } loc(#loc232)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fscanf_divide_04.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":36:23)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":28:1)
#loc9 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":43:1)
#loc10 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":30:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":30:9)
#loc12 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":32:13)
#loc13 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":32:12)
#loc14 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":32:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":33:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":37:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":33:8)
#loc18 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":34:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":36:9)
#loc20 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":36:16)
#loc21 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":38:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":42:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":38:8)
#loc24 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":39:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":41:22)
#loc26 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":41:28)
#loc27 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":41:9)
#loc28 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":145:1)
#loc29 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":151:1)
#loc30 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":147:5)
#loc31 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":147:14)
#loc32 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":148:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":148:14)
#loc34 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":149:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":149:14)
#loc36 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":150:5)
#loc37 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":150:14)
#loc38 = loc("/usr/include/stdlib.h":575:1)
#loc39 = loc("/usr/include/stdlib.h":575:41)
#loc40 = loc("/usr/include/time.h":76:1)
#loc41 = loc("/usr/include/time.h":76:38)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":167:15)
#loc45 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":169:15)
#loc46 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":172:15)
#loc47 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":174:15)
#loc48 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":162:1)
#loc49 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":177:1)
#loc54 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":163:1)
#loc55 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":165:27)
#loc56 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":165:22)
#loc57 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":165:5)
#loc58 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":167:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":168:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":168:54)
#loc61 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":169:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":172:5)
#loc63 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":173:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":173:53)
#loc65 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":174:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":176:12)
#loc67 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":176:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":63:19)
#loc69 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":74:23)
#loc70 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":50:1)
#loc71 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":77:1)
#loc72 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":52:5)
#loc73 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":52:9)
#loc74 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":54:13)
#loc75 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":54:12)
#loc76 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":54:5)
#loc77 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":55:5)
#loc78 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":59:5)
#loc79 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":55:8)
#loc80 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":56:5)
#loc81 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":58:9)
#loc82 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":58:16)
#loc83 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":58:23)
#loc84 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":60:5)
#loc85 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":76:5)
#loc86 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":60:8)
#loc87 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":61:5)
#loc88 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":64:5)
#loc89 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":66:5)
#loc90 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":63:9)
#loc91 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":68:9)
#loc92 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":75:9)
#loc93 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":68:13)
#loc94 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":68:21)
#loc95 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":69:9)
#loc96 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":71:9)
#loc97 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":73:9)
#loc98 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":70:26)
#loc99 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":70:32)
#loc100 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":70:13)
#loc101 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":74:13)
#loc102 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":80:1)
#loc103 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":102:1)
#loc104 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":82:5)
#loc105 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":82:9)
#loc106 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":84:13)
#loc107 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":84:12)
#loc108 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":84:5)
#loc109 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":85:5)
#loc110 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":89:5)
#loc111 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":85:8)
#loc112 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":86:5)
#loc113 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":88:9)
#loc114 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":88:16)
#loc115 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":88:23)
#loc116 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":90:5)
#loc117 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":101:5)
#loc118 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":90:8)
#loc119 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":91:5)
#loc120 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":93:9)
#loc121 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":100:9)
#loc122 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":93:13)
#loc123 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":93:21)
#loc124 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":94:9)
#loc125 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":96:9)
#loc126 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":98:9)
#loc127 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":95:26)
#loc128 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":95:32)
#loc129 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":95:13)
#loc130 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":99:23)
#loc131 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":99:13)
#loc132 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":105:1)
#loc133 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":125:1)
#loc134 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":107:5)
#loc135 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":107:9)
#loc136 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":109:13)
#loc137 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":109:12)
#loc138 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":109:5)
#loc139 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":110:5)
#loc140 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":119:5)
#loc141 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":110:8)
#loc142 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":111:5)
#loc143 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":114:5)
#loc144 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":116:5)
#loc145 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":113:19)
#loc146 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":113:9)
#loc147 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":118:16)
#loc148 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":118:9)
#loc149 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":120:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":124:5)
#loc151 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":120:8)
#loc152 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":121:5)
#loc153 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":123:22)
#loc154 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":123:28)
#loc155 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":123:9)
#loc156 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":128:1)
#loc157 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":143:1)
#loc158 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":130:5)
#loc159 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":130:9)
#loc160 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":132:13)
#loc161 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":132:12)
#loc162 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":132:5)
#loc163 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":133:5)
#loc164 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":137:5)
#loc165 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":133:8)
#loc166 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":134:5)
#loc167 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":136:16)
#loc168 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":136:9)
#loc169 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":138:5)
#loc170 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":142:5)
#loc171 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":138:8)
#loc172 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":139:5)
#loc173 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":141:22)
#loc174 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":141:28)
#loc175 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_04.c":141:9)
#loc176 = loc(fused[#loc1, #loc2])
#loc177 = loc(fused[#loc3, #loc4])
#loc178 = loc(fused[#loc6, #loc7])
#loc179 = loc(fused[#loc8, #loc9])
#loc180 = loc(fused[#loc10, #loc11])
#loc181 = loc(fused[#loc14, #loc12])
#loc182 = loc(fused[#loc15, #loc16])
#loc183 = loc(fused[#loc18, #loc16])
#loc184 = loc(fused[#loc21, #loc22])
#loc185 = loc(fused[#loc24, #loc22])
#loc186 = loc(fused[#loc25, #loc26])
#loc187 = loc(fused[#loc28, #loc29])
#loc188 = loc(fused[#loc30, #loc31])
#loc189 = loc(fused[#loc32, #loc33])
#loc190 = loc(fused[#loc34, #loc35])
#loc191 = loc(fused[#loc36, #loc37])
#loc192 = loc(fused[#loc38, #loc39])
#loc193 = loc(fused[#loc40, #loc41])
#loc194 = loc(fused[#loc42, #loc43])
#loc195 = loc(fused[#loc48, #loc49])
#loc198 = loc(fused[#loc59, #loc60])
#loc199 = loc(fused[#loc63, #loc64])
#loc200 = loc(fused[#loc67, #loc66])
#loc201 = loc(fused[#loc70, #loc71])
#loc202 = loc(fused[#loc72, #loc73])
#loc203 = loc(fused[#loc76, #loc74])
#loc204 = loc(fused[#loc77, #loc78])
#loc205 = loc(fused[#loc80, #loc78])
#loc206 = loc(fused[#loc84, #loc85])
#loc207 = loc(fused[#loc87, #loc88, #loc89, #loc85])
#loc208 = loc(fused[#loc91, #loc92])
#loc209 = loc(fused[#loc93, #loc94])
#loc210 = loc(fused[#loc95, #loc96, #loc97, #loc92])
#loc211 = loc(fused[#loc98, #loc99])
#loc212 = loc(fused[#loc102, #loc103])
#loc213 = loc(fused[#loc104, #loc105])
#loc214 = loc(fused[#loc108, #loc106])
#loc215 = loc(fused[#loc109, #loc110])
#loc216 = loc(fused[#loc112, #loc110])
#loc217 = loc(fused[#loc116, #loc117])
#loc218 = loc(fused[#loc119, #loc117])
#loc219 = loc(fused[#loc120, #loc121])
#loc220 = loc(fused[#loc122, #loc123])
#loc221 = loc(fused[#loc124, #loc125, #loc126, #loc121])
#loc222 = loc(fused[#loc127, #loc128])
#loc223 = loc(fused[#loc132, #loc133])
#loc224 = loc(fused[#loc134, #loc135])
#loc225 = loc(fused[#loc138, #loc136])
#loc226 = loc(fused[#loc139, #loc140])
#loc227 = loc(fused[#loc142, #loc143, #loc144, #loc140])
#loc228 = loc(fused[#loc148, #loc147])
#loc229 = loc(fused[#loc149, #loc150])
#loc230 = loc(fused[#loc152, #loc150])
#loc231 = loc(fused[#loc153, #loc154])
#loc232 = loc(fused[#loc156, #loc157])
#loc233 = loc(fused[#loc158, #loc159])
#loc234 = loc(fused[#loc162, #loc160])
#loc235 = loc(fused[#loc163, #loc164])
#loc236 = loc(fused[#loc166, #loc164])
#loc237 = loc(fused[#loc168, #loc167])
#loc238 = loc(fused[#loc169, #loc170])
#loc239 = loc(fused[#loc172, #loc170])
#loc240 = loc(fused[#loc173, #loc174])
