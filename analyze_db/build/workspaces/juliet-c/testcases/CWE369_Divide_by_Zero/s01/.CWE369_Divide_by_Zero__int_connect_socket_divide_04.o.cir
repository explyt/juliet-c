!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_divide_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc411)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc412)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc413)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc414)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc415)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc416)
  cir.func private @close(!s32i) -> !s32i loc(#loc417)
  cir.func private @printIntLine(!s32i) loc(#loc418)
  cir.func no_proto @CWE369_Divide_by_Zero__int_connect_socket_divide_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc420)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc23)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc421)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc27)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc27)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc425)
          %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc426)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc427)
          %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc428)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc36)
          %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc36)
          cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc427)
          cir.scope {
            cir.do {
              cir.scope {
                %11 = cir.const #cir.int<2> : !s32i loc(#loc43)
                %12 = cir.const #cir.int<1> : !s32i loc(#loc44)
                %13 = cir.const #cir.int<6> : !s32i loc(#loc45)
                %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc46)
                cir.store %14, %7 : !s32i, !cir.ptr<!s32i> loc(#loc431)
                cir.scope {
                  %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc51)
                  %54 = cir.const #cir.int<1> : !s32i loc(#loc52)
                  %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc52)
                  %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc433)
                  cir.if %56 {
                    cir.break loc(#loc54)
                  } loc(#loc434)
                } loc(#loc432)
                %15 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc435)
                %16 = cir.const #cir.int<0> : !s32i loc(#loc57)
                %17 = cir.const #cir.int<16> : !u64i loc(#loc436)
                cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc437)
                %18 = cir.const #cir.int<2> : !s32i loc(#loc62)
                %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc62)
                %20 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc63)
                cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc438)
                %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
                %23 = cir.call @inet_addr(%22) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc65)
                %24 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc66)
                %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc67)
                cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc439)
                %26 = cir.const #cir.int<27015> : !s32i loc(#loc70)
                %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc70)
                %28 = cir.call @htons(%27) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc71)
                %29 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
                cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc440)
                cir.scope {
                  %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc77)
                  %54 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc442)
                  %55 = cir.const #cir.int<16> : !u64i loc(#loc443)
                  %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc443)
                  %57 = cir.call @connect(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc82)
                  %58 = cir.const #cir.int<1> : !s32i loc(#loc83)
                  %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc83)
                  %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc444)
                  cir.if %60 {
                    cir.break loc(#loc85)
                  } loc(#loc445)
                } loc(#loc441)
                %30 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc86)
                %31 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc87)
                %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc87)
                %33 = cir.const #cir.int<3> : !s32i loc(#loc88)
                %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc88)
                %35 = cir.const #cir.int<4> : !u64i loc(#loc88)
                %36 = cir.binop(mul, %34, %35) : !u64i loc(#loc88)
                %37 = cir.const #cir.int<2> : !s32i loc(#loc88)
                %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc88)
                %39 = cir.binop(add, %36, %38) : !u64i loc(#loc88)
                %40 = cir.const #cir.int<1> : !s32i loc(#loc89)
                %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc89)
                %42 = cir.binop(sub, %39, %41) : !u64i loc(#loc446)
                %43 = cir.const #cir.int<0> : !s32i loc(#loc90)
                %44 = cir.call @recv(%30, %32, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc91)
                %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc91)
                cir.store %45, %5 : !s32i, !cir.ptr<!s32i> loc(#loc447)
                cir.scope {
                  %53 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc96)
                  %54 = cir.const #cir.int<1> : !s32i loc(#loc97)
                  %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc97)
                  %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc449)
                  %57 = cir.ternary(%56, true {
                    %58 = cir.const #true loc(#loc98)
                    cir.yield %58 : !cir.bool loc(#loc98)
                  }, false {
                    %58 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc99)
                    %59 = cir.const #cir.int<0> : !s32i loc(#loc100)
                    %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc450)
                    %61 = cir.ternary(%60, true {
                      %62 = cir.const #true loc(#loc98)
                      cir.yield %62 : !cir.bool loc(#loc98)
                    }, false {
                      %62 = cir.const #false loc(#loc98)
                      cir.yield %62 : !cir.bool loc(#loc98)
                    }) : (!cir.bool) -> !cir.bool loc(#loc98)
                    cir.yield %61 : !cir.bool loc(#loc98)
                  }) : (!cir.bool) -> !cir.bool loc(#loc98)
                  cir.if %57 {
                    cir.break loc(#loc102)
                  } loc(#loc451)
                } loc(#loc448)
                %46 = cir.const #cir.int<0> : !s32i loc(#loc103)
                %47 = cir.cast(integral, %46 : !s32i), !s8i loc(#loc103)
                %48 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc104)
                %49 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc105)
                %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc105)
                cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc452)
                %51 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc106)
                %52 = cir.call @atoi(%51) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc107)
                cir.store %52, %0 : !s32i, !cir.ptr<!s32i> loc(#loc453)
              } loc(#loc430)
              cir.yield loc(#loc40)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc110)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc110)
              cir.condition(%12) loc(#loc110)
            } loc(#loc429)
          } loc(#loc429)
          cir.scope {
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc113)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc114)
            %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc114)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc455)
            cir.if %14 {
              %15 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc116)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc117)
            } loc(#loc456)
          } loc(#loc454)
        } loc(#loc424)
      } loc(#loc423)
    } loc(#loc422)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc120)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc120)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc122)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
        %7 = cir.binop(div, %5, %6) : !s32i loc(#loc459)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc124)
      } loc(#loc458)
    } loc(#loc457)
    cir.return loc(#loc19)
  } loc(#loc419)
  cir.func no_proto @CWE369_Divide_by_Zero__int_connect_socket_divide_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc461)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc127)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc462)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc129)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc463)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc131)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc464)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc133)
    cir.return loc(#loc126)
  } loc(#loc460)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc465)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc137)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc138)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc467)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc143)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc144)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc468)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc148)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc148)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc472)
          %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc473)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc474)
          %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc475)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc157)
          %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc157)
          cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc474)
          cir.scope {
            cir.do {
              cir.scope {
                %11 = cir.const #cir.int<2> : !s32i loc(#loc164)
                %12 = cir.const #cir.int<1> : !s32i loc(#loc165)
                %13 = cir.const #cir.int<6> : !s32i loc(#loc166)
                %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc167)
                cir.store %14, %7 : !s32i, !cir.ptr<!s32i> loc(#loc478)
                cir.scope {
                  %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc172)
                  %54 = cir.const #cir.int<1> : !s32i loc(#loc173)
                  %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc173)
                  %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc480)
                  cir.if %56 {
                    cir.break loc(#loc175)
                  } loc(#loc481)
                } loc(#loc479)
                %15 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc482)
                %16 = cir.const #cir.int<0> : !s32i loc(#loc178)
                %17 = cir.const #cir.int<16> : !u64i loc(#loc483)
                cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc484)
                %18 = cir.const #cir.int<2> : !s32i loc(#loc183)
                %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc183)
                %20 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc63)
                cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc485)
                %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc185)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc185)
                %23 = cir.call @inet_addr(%22) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc186)
                %24 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc66)
                %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc67)
                cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc486)
                %26 = cir.const #cir.int<27015> : !s32i loc(#loc189)
                %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc189)
                %28 = cir.call @htons(%27) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc190)
                %29 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
                cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc487)
                cir.scope {
                  %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc195)
                  %54 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc489)
                  %55 = cir.const #cir.int<16> : !u64i loc(#loc490)
                  %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc490)
                  %57 = cir.call @connect(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc200)
                  %58 = cir.const #cir.int<1> : !s32i loc(#loc201)
                  %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc201)
                  %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc491)
                  cir.if %60 {
                    cir.break loc(#loc203)
                  } loc(#loc492)
                } loc(#loc488)
                %30 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc204)
                %31 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc205)
                %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc205)
                %33 = cir.const #cir.int<3> : !s32i loc(#loc206)
                %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc206)
                %35 = cir.const #cir.int<4> : !u64i loc(#loc206)
                %36 = cir.binop(mul, %34, %35) : !u64i loc(#loc206)
                %37 = cir.const #cir.int<2> : !s32i loc(#loc206)
                %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc206)
                %39 = cir.binop(add, %36, %38) : !u64i loc(#loc206)
                %40 = cir.const #cir.int<1> : !s32i loc(#loc207)
                %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc207)
                %42 = cir.binop(sub, %39, %41) : !u64i loc(#loc493)
                %43 = cir.const #cir.int<0> : !s32i loc(#loc208)
                %44 = cir.call @recv(%30, %32, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc209)
                %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc209)
                cir.store %45, %5 : !s32i, !cir.ptr<!s32i> loc(#loc494)
                cir.scope {
                  %53 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc214)
                  %54 = cir.const #cir.int<1> : !s32i loc(#loc215)
                  %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc215)
                  %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc496)
                  %57 = cir.ternary(%56, true {
                    %58 = cir.const #true loc(#loc216)
                    cir.yield %58 : !cir.bool loc(#loc216)
                  }, false {
                    %58 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc217)
                    %59 = cir.const #cir.int<0> : !s32i loc(#loc218)
                    %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc497)
                    %61 = cir.ternary(%60, true {
                      %62 = cir.const #true loc(#loc216)
                      cir.yield %62 : !cir.bool loc(#loc216)
                    }, false {
                      %62 = cir.const #false loc(#loc216)
                      cir.yield %62 : !cir.bool loc(#loc216)
                    }) : (!cir.bool) -> !cir.bool loc(#loc216)
                    cir.yield %61 : !cir.bool loc(#loc216)
                  }) : (!cir.bool) -> !cir.bool loc(#loc216)
                  cir.if %57 {
                    cir.break loc(#loc220)
                  } loc(#loc498)
                } loc(#loc495)
                %46 = cir.const #cir.int<0> : !s32i loc(#loc221)
                %47 = cir.cast(integral, %46 : !s32i), !s8i loc(#loc221)
                %48 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc222)
                %49 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc223)
                %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc223)
                cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc499)
                %51 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc224)
                %52 = cir.call @atoi(%51) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc225)
                cir.store %52, %0 : !s32i, !cir.ptr<!s32i> loc(#loc500)
              } loc(#loc477)
              cir.yield loc(#loc161)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc228)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc228)
              cir.condition(%12) loc(#loc228)
            } loc(#loc476)
          } loc(#loc476)
          cir.scope {
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc231)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc232)
            %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc232)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc502)
            cir.if %14 {
              %15 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc234)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc235)
            } loc(#loc503)
          } loc(#loc501)
        } loc(#loc471)
      } loc(#loc470)
    } loc(#loc469)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc238)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc238)
      cir.if %4 {
        %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc137)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc137)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc242)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc245)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc246)
          %7 = cir.cmp(ne, %5, %6) : !s32i, !cir.bool loc(#loc507)
          cir.if %7 {
            %8 = cir.const #cir.int<100> : !s32i loc(#loc250)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc251)
            %10 = cir.binop(div, %8, %9) : !s32i loc(#loc509)
            cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc252)
          } else {
            %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc138)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc138)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc253)
          } loc(#loc508)
        } loc(#loc506)
      } loc(#loc505)
    } loc(#loc504)
    cir.return loc(#loc140)
  } loc(#loc466)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc511)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc258)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc259)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc512)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc263)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc263)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc516)
          %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc517)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc518)
          %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc519)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc272)
          %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc272)
          cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc518)
          cir.scope {
            cir.do {
              cir.scope {
                %11 = cir.const #cir.int<2> : !s32i loc(#loc279)
                %12 = cir.const #cir.int<1> : !s32i loc(#loc280)
                %13 = cir.const #cir.int<6> : !s32i loc(#loc281)
                %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc282)
                cir.store %14, %7 : !s32i, !cir.ptr<!s32i> loc(#loc522)
                cir.scope {
                  %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc287)
                  %54 = cir.const #cir.int<1> : !s32i loc(#loc288)
                  %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc288)
                  %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc524)
                  cir.if %56 {
                    cir.break loc(#loc290)
                  } loc(#loc525)
                } loc(#loc523)
                %15 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc526)
                %16 = cir.const #cir.int<0> : !s32i loc(#loc293)
                %17 = cir.const #cir.int<16> : !u64i loc(#loc527)
                cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc528)
                %18 = cir.const #cir.int<2> : !s32i loc(#loc298)
                %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc298)
                %20 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc63)
                cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc529)
                %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc300)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc300)
                %23 = cir.call @inet_addr(%22) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc301)
                %24 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc66)
                %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc67)
                cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc530)
                %26 = cir.const #cir.int<27015> : !s32i loc(#loc304)
                %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc304)
                %28 = cir.call @htons(%27) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc305)
                %29 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
                cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc531)
                cir.scope {
                  %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc310)
                  %54 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc533)
                  %55 = cir.const #cir.int<16> : !u64i loc(#loc534)
                  %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc534)
                  %57 = cir.call @connect(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc315)
                  %58 = cir.const #cir.int<1> : !s32i loc(#loc316)
                  %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc316)
                  %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc535)
                  cir.if %60 {
                    cir.break loc(#loc318)
                  } loc(#loc536)
                } loc(#loc532)
                %30 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc319)
                %31 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc320)
                %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc320)
                %33 = cir.const #cir.int<3> : !s32i loc(#loc321)
                %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc321)
                %35 = cir.const #cir.int<4> : !u64i loc(#loc321)
                %36 = cir.binop(mul, %34, %35) : !u64i loc(#loc321)
                %37 = cir.const #cir.int<2> : !s32i loc(#loc321)
                %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc321)
                %39 = cir.binop(add, %36, %38) : !u64i loc(#loc321)
                %40 = cir.const #cir.int<1> : !s32i loc(#loc322)
                %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc322)
                %42 = cir.binop(sub, %39, %41) : !u64i loc(#loc537)
                %43 = cir.const #cir.int<0> : !s32i loc(#loc323)
                %44 = cir.call @recv(%30, %32, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc324)
                %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc324)
                cir.store %45, %5 : !s32i, !cir.ptr<!s32i> loc(#loc538)
                cir.scope {
                  %53 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc329)
                  %54 = cir.const #cir.int<1> : !s32i loc(#loc330)
                  %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc330)
                  %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc540)
                  %57 = cir.ternary(%56, true {
                    %58 = cir.const #true loc(#loc331)
                    cir.yield %58 : !cir.bool loc(#loc331)
                  }, false {
                    %58 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc332)
                    %59 = cir.const #cir.int<0> : !s32i loc(#loc333)
                    %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc541)
                    %61 = cir.ternary(%60, true {
                      %62 = cir.const #true loc(#loc331)
                      cir.yield %62 : !cir.bool loc(#loc331)
                    }, false {
                      %62 = cir.const #false loc(#loc331)
                      cir.yield %62 : !cir.bool loc(#loc331)
                    }) : (!cir.bool) -> !cir.bool loc(#loc331)
                    cir.yield %61 : !cir.bool loc(#loc331)
                  }) : (!cir.bool) -> !cir.bool loc(#loc331)
                  cir.if %57 {
                    cir.break loc(#loc335)
                  } loc(#loc542)
                } loc(#loc539)
                %46 = cir.const #cir.int<0> : !s32i loc(#loc336)
                %47 = cir.cast(integral, %46 : !s32i), !s8i loc(#loc336)
                %48 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc337)
                %49 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc338)
                %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc338)
                cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc543)
                %51 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc339)
                %52 = cir.call @atoi(%51) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc340)
                cir.store %52, %0 : !s32i, !cir.ptr<!s32i> loc(#loc544)
              } loc(#loc521)
              cir.yield loc(#loc276)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc343)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc343)
              cir.condition(%12) loc(#loc343)
            } loc(#loc520)
          } loc(#loc520)
          cir.scope {
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc346)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc347)
            %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc347)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc546)
            cir.if %14 {
              %15 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc349)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc350)
            } loc(#loc547)
          } loc(#loc545)
        } loc(#loc515)
      } loc(#loc514)
    } loc(#loc513)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc353)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc353)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc357)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc358)
          %7 = cir.cmp(ne, %5, %6) : !s32i, !cir.bool loc(#loc551)
          cir.if %7 {
            %8 = cir.const #cir.int<100> : !s32i loc(#loc362)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc363)
            %10 = cir.binop(div, %8, %9) : !s32i loc(#loc553)
            cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc364)
          } else {
            %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc365)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc365)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc366)
          } loc(#loc552)
        } loc(#loc550)
      } loc(#loc549)
    } loc(#loc548)
    cir.return loc(#loc255)
  } loc(#loc510)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc555)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc371)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc372)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc556)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc376)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc376)
      cir.if %4 {
        %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc380)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc380)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc381)
      } else {
        %5 = cir.const #cir.int<7> : !s32i loc(#loc382)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc559)
      } loc(#loc558)
    } loc(#loc557)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc386)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc386)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc388)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc389)
        %7 = cir.binop(div, %5, %6) : !s32i loc(#loc562)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc390)
      } loc(#loc561)
    } loc(#loc560)
    cir.return loc(#loc368)
  } loc(#loc554)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc564)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc395)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc396)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc565)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc400)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc400)
      cir.if %4 {
        %5 = cir.const #cir.int<7> : !s32i loc(#loc402)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc568)
      } loc(#loc567)
    } loc(#loc566)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc406)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc406)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc408)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc409)
        %7 = cir.binop(div, %5, %6) : !s32i loc(#loc571)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc410)
      } loc(#loc570)
    } loc(#loc569)
    cir.return loc(#loc392)
  } loc(#loc563)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":83:53)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":50:1)
#loc19 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":119:1)
#loc20 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":52:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":52:9)
#loc22 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":54:13)
#loc23 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":54:12)
#loc24 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":54:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":55:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":113:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":55:8)
#loc28 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":56:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":57:9)
#loc30 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":112:9)
#loc31 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":62:13)
#loc32 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":62:17)
#loc33 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":63:13)
#loc34 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":63:32)
#loc35 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":64:13)
#loc36 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":64:36)
#loc37 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":65:13)
#loc38 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":65:45)
#loc39 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":66:13)
#loc40 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":101:21)
#loc41 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":67:13)
#loc42 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":100:13)
#loc43 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":76:40)
#loc44 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":76:49)
#loc45 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":76:62)
#loc46 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":76:33)
#loc47 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":76:17)
#loc48 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":76:73)
#loc49 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":77:17)
#loc50 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":80:17)
#loc51 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":77:21)
#loc52 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":77:38)
#loc53 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":78:17)
#loc54 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":79:21)
#loc55 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":81:24)
#loc56 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":81:25)
#loc57 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":81:34)
#loc58 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":81:37)
#loc59 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":81:51)
#loc60 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":81:17)
#loc61 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":81:52)
#loc62 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":82:38)
#loc63 = loc("/usr/include/netinet/in.h":249:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":82:17)
#loc65 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":83:43)
#loc66 = loc("/usr/include/netinet/in.h":251:20)
#loc67 = loc("/usr/include/netinet/in.h":33:15)
#loc68 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":83:17)
#loc69 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":83:63)
#loc70 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":84:42)
#loc71 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":84:36)
#loc72 = loc("/usr/include/netinet/in.h":250:15)
#loc73 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":84:17)
#loc74 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":84:50)
#loc75 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":85:17)
#loc76 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":88:17)
#loc77 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":85:29)
#loc78 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":85:62)
#loc79 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":85:63)
#loc80 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":85:72)
#loc81 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":85:86)
#loc82 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":85:21)
#loc83 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":85:92)
#loc84 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":86:17)
#loc85 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":87:21)
#loc86 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":91:35)
#loc87 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":91:50)
#loc88 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":91:63)
#loc89 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":91:81)
#loc90 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":91:84)
#loc91 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":91:30)
#loc92 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":91:17)
#loc93 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":91:85)
#loc94 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":92:17)
#loc95 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":95:17)
#loc96 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":92:21)
#loc97 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":92:35)
#loc98 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":92:48)
#loc99 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":92:51)
#loc100 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":92:65)
#loc101 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":93:17)
#loc102 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":94:21)
#loc103 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":97:43)
#loc104 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":97:29)
#loc105 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":97:17)
#loc106 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":99:29)
#loc107 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":99:24)
#loc108 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":99:17)
#loc109 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":99:40)
#loc110 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":101:20)
#loc111 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":102:13)
#loc112 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":105:13)
#loc113 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":102:17)
#loc114 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":102:34)
#loc115 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":103:13)
#loc116 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":104:30)
#loc117 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":104:17)
#loc118 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":114:5)
#loc119 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":118:5)
#loc120 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":114:8)
#loc121 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":115:5)
#loc122 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":117:22)
#loc123 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":117:28)
#loc124 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":117:9)
#loc125 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":329:1)
#loc126 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":335:1)
#loc127 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":331:5)
#loc128 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":331:14)
#loc129 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":332:5)
#loc130 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":332:14)
#loc131 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":333:5)
#loc132 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":333:14)
#loc133 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":334:5)
#loc134 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":334:14)
#loc135 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc136 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc137 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":193:19)
#loc138 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":204:23)
#loc139 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":126:1)
#loc140 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":207:1)
#loc141 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":128:5)
#loc142 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":128:9)
#loc143 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":130:13)
#loc144 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":130:12)
#loc145 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":130:5)
#loc146 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":131:5)
#loc147 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":189:5)
#loc148 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":131:8)
#loc149 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":132:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":133:9)
#loc151 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":188:9)
#loc152 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":138:13)
#loc153 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":138:17)
#loc154 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":139:13)
#loc155 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":139:32)
#loc156 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":140:13)
#loc157 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":140:36)
#loc158 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":141:13)
#loc159 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":141:45)
#loc160 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":142:13)
#loc161 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":177:21)
#loc162 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":143:13)
#loc163 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":176:13)
#loc164 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":152:40)
#loc165 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":152:49)
#loc166 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":152:62)
#loc167 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":152:33)
#loc168 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":152:17)
#loc169 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":152:73)
#loc170 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":153:17)
#loc171 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":156:17)
#loc172 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":153:21)
#loc173 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":153:38)
#loc174 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":154:17)
#loc175 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":155:21)
#loc176 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":157:24)
#loc177 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":157:25)
#loc178 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":157:34)
#loc179 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":157:37)
#loc180 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":157:51)
#loc181 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":157:17)
#loc182 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":157:52)
#loc183 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":158:38)
#loc184 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":158:17)
#loc185 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":159:53)
#loc186 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":159:43)
#loc187 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":159:17)
#loc188 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":159:63)
#loc189 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":160:42)
#loc190 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":160:36)
#loc191 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":160:17)
#loc192 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":160:50)
#loc193 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":161:17)
#loc194 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":164:17)
#loc195 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":161:29)
#loc196 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":161:62)
#loc197 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":161:63)
#loc198 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":161:72)
#loc199 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":161:86)
#loc200 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":161:21)
#loc201 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":161:92)
#loc202 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":162:17)
#loc203 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":163:21)
#loc204 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":167:35)
#loc205 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":167:50)
#loc206 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":167:63)
#loc207 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":167:81)
#loc208 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":167:84)
#loc209 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":167:30)
#loc210 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":167:17)
#loc211 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":167:85)
#loc212 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":168:17)
#loc213 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":171:17)
#loc214 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":168:21)
#loc215 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":168:35)
#loc216 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":168:48)
#loc217 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":168:51)
#loc218 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":168:65)
#loc219 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":169:17)
#loc220 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":170:21)
#loc221 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":173:43)
#loc222 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":173:29)
#loc223 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":173:17)
#loc224 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":175:29)
#loc225 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":175:24)
#loc226 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":175:17)
#loc227 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":175:40)
#loc228 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":177:20)
#loc229 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":178:13)
#loc230 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":181:13)
#loc231 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":178:17)
#loc232 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":178:34)
#loc233 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":179:13)
#loc234 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":180:30)
#loc235 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":180:17)
#loc236 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":190:5)
#loc237 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":206:5)
#loc238 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":190:8)
#loc239 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":191:5)
#loc240 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":194:5)
#loc241 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":196:5)
#loc242 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":193:9)
#loc243 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":198:9)
#loc244 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":205:9)
#loc245 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":198:13)
#loc246 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":198:21)
#loc247 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":199:9)
#loc248 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":201:9)
#loc249 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":203:9)
#loc250 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":200:26)
#loc251 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":200:32)
#loc252 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":200:13)
#loc253 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":204:13)
#loc254 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":210:1)
#loc255 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":286:1)
#loc256 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":212:5)
#loc257 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":212:9)
#loc258 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":214:13)
#loc259 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":214:12)
#loc260 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":214:5)
#loc261 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":215:5)
#loc262 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":273:5)
#loc263 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":215:8)
#loc264 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":216:5)
#loc265 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":217:9)
#loc266 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":272:9)
#loc267 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":222:13)
#loc268 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":222:17)
#loc269 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":223:13)
#loc270 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":223:32)
#loc271 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":224:13)
#loc272 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":224:36)
#loc273 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":225:13)
#loc274 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":225:45)
#loc275 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":226:13)
#loc276 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":261:21)
#loc277 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":227:13)
#loc278 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":260:13)
#loc279 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":236:40)
#loc280 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":236:49)
#loc281 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":236:62)
#loc282 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":236:33)
#loc283 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":236:17)
#loc284 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":236:73)
#loc285 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":237:17)
#loc286 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":240:17)
#loc287 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":237:21)
#loc288 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":237:38)
#loc289 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":238:17)
#loc290 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":239:21)
#loc291 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":241:24)
#loc292 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":241:25)
#loc293 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":241:34)
#loc294 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":241:37)
#loc295 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":241:51)
#loc296 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":241:17)
#loc297 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":241:52)
#loc298 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":242:38)
#loc299 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":242:17)
#loc300 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":243:53)
#loc301 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":243:43)
#loc302 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":243:17)
#loc303 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":243:63)
#loc304 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":244:42)
#loc305 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":244:36)
#loc306 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":244:17)
#loc307 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":244:50)
#loc308 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":245:17)
#loc309 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":248:17)
#loc310 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":245:29)
#loc311 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":245:62)
#loc312 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":245:63)
#loc313 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":245:72)
#loc314 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":245:86)
#loc315 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":245:21)
#loc316 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":245:92)
#loc317 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":246:17)
#loc318 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":247:21)
#loc319 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":251:35)
#loc320 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":251:50)
#loc321 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":251:63)
#loc322 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":251:81)
#loc323 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":251:84)
#loc324 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":251:30)
#loc325 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":251:17)
#loc326 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":251:85)
#loc327 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":252:17)
#loc328 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":255:17)
#loc329 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":252:21)
#loc330 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":252:35)
#loc331 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":252:48)
#loc332 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":252:51)
#loc333 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":252:65)
#loc334 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":253:17)
#loc335 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":254:21)
#loc336 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":257:43)
#loc337 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":257:29)
#loc338 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":257:17)
#loc339 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":259:29)
#loc340 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":259:24)
#loc341 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":259:17)
#loc342 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":259:40)
#loc343 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":261:20)
#loc344 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":262:13)
#loc345 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":265:13)
#loc346 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":262:17)
#loc347 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":262:34)
#loc348 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":263:13)
#loc349 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":264:30)
#loc350 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":264:17)
#loc351 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":274:5)
#loc352 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":285:5)
#loc353 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":274:8)
#loc354 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":275:5)
#loc355 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":277:9)
#loc356 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":284:9)
#loc357 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":277:13)
#loc358 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":277:21)
#loc359 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":278:9)
#loc360 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":280:9)
#loc361 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":282:9)
#loc362 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":279:26)
#loc363 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":279:32)
#loc364 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":279:13)
#loc365 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":283:23)
#loc366 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":283:13)
#loc367 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":289:1)
#loc368 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":309:1)
#loc369 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":291:5)
#loc370 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":291:9)
#loc371 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":293:13)
#loc372 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":293:12)
#loc373 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":293:5)
#loc374 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":294:5)
#loc375 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":303:5)
#loc376 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":294:8)
#loc377 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":295:5)
#loc378 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":298:5)
#loc379 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":300:5)
#loc380 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":297:19)
#loc381 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":297:9)
#loc382 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":302:16)
#loc383 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":302:9)
#loc384 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":304:5)
#loc385 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":308:5)
#loc386 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":304:8)
#loc387 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":305:5)
#loc388 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":307:22)
#loc389 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":307:28)
#loc390 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":307:9)
#loc391 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":312:1)
#loc392 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":327:1)
#loc393 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":314:5)
#loc394 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":314:9)
#loc395 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":316:13)
#loc396 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":316:12)
#loc397 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":316:5)
#loc398 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":317:5)
#loc399 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":321:5)
#loc400 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":317:8)
#loc401 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":318:5)
#loc402 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":320:16)
#loc403 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":320:9)
#loc404 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":322:5)
#loc405 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":326:5)
#loc406 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":322:8)
#loc407 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":323:5)
#loc408 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":325:22)
#loc409 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":325:28)
#loc410 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_04.c":325:9)
#loc411 = loc(fused[#loc1, #loc2])
#loc412 = loc(fused[#loc3, #loc4])
#loc413 = loc(fused[#loc6, #loc7])
#loc414 = loc(fused[#loc8, #loc9])
#loc415 = loc(fused[#loc10, #loc11])
#loc416 = loc(fused[#loc12, #loc13])
#loc417 = loc(fused[#loc14, #loc15])
#loc418 = loc(fused[#loc16, #loc17])
#loc419 = loc(fused[#loc18, #loc19])
#loc420 = loc(fused[#loc20, #loc21])
#loc421 = loc(fused[#loc24, #loc22])
#loc422 = loc(fused[#loc25, #loc26])
#loc423 = loc(fused[#loc28, #loc26])
#loc424 = loc(fused[#loc29, #loc30])
#loc425 = loc(fused[#loc31, #loc32])
#loc426 = loc(fused[#loc33, #loc34])
#loc427 = loc(fused[#loc35, #loc36])
#loc428 = loc(fused[#loc37, #loc38])
#loc429 = loc(fused[#loc39, #loc40])
#loc430 = loc(fused[#loc41, #loc42])
#loc431 = loc(fused[#loc47, #loc48])
#loc432 = loc(fused[#loc49, #loc50])
#loc433 = loc(fused[#loc51, #loc52])
#loc434 = loc(fused[#loc53, #loc50])
#loc435 = loc(fused[#loc55, #loc56])
#loc436 = loc(fused[#loc58, #loc59])
#loc437 = loc(fused[#loc60, #loc61])
#loc438 = loc(fused[#loc64, #loc62])
#loc439 = loc(fused[#loc68, #loc69])
#loc440 = loc(fused[#loc73, #loc74])
#loc441 = loc(fused[#loc75, #loc76])
#loc442 = loc(fused[#loc78, #loc79])
#loc443 = loc(fused[#loc80, #loc81])
#loc444 = loc(fused[#loc82, #loc83])
#loc445 = loc(fused[#loc84, #loc76])
#loc446 = loc(fused[#loc88, #loc89])
#loc447 = loc(fused[#loc92, #loc93])
#loc448 = loc(fused[#loc94, #loc95])
#loc449 = loc(fused[#loc96, #loc97])
#loc450 = loc(fused[#loc99, #loc100])
#loc451 = loc(fused[#loc101, #loc95])
#loc452 = loc(fused[#loc105, #loc103])
#loc453 = loc(fused[#loc108, #loc109])
#loc454 = loc(fused[#loc111, #loc112])
#loc455 = loc(fused[#loc113, #loc114])
#loc456 = loc(fused[#loc115, #loc112])
#loc457 = loc(fused[#loc118, #loc119])
#loc458 = loc(fused[#loc121, #loc119])
#loc459 = loc(fused[#loc122, #loc123])
#loc460 = loc(fused[#loc125, #loc126])
#loc461 = loc(fused[#loc127, #loc128])
#loc462 = loc(fused[#loc129, #loc130])
#loc463 = loc(fused[#loc131, #loc132])
#loc464 = loc(fused[#loc133, #loc134])
#loc465 = loc(fused[#loc135, #loc136])
#loc466 = loc(fused[#loc139, #loc140])
#loc467 = loc(fused[#loc141, #loc142])
#loc468 = loc(fused[#loc145, #loc143])
#loc469 = loc(fused[#loc146, #loc147])
#loc470 = loc(fused[#loc149, #loc147])
#loc471 = loc(fused[#loc150, #loc151])
#loc472 = loc(fused[#loc152, #loc153])
#loc473 = loc(fused[#loc154, #loc155])
#loc474 = loc(fused[#loc156, #loc157])
#loc475 = loc(fused[#loc158, #loc159])
#loc476 = loc(fused[#loc160, #loc161])
#loc477 = loc(fused[#loc162, #loc163])
#loc478 = loc(fused[#loc168, #loc169])
#loc479 = loc(fused[#loc170, #loc171])
#loc480 = loc(fused[#loc172, #loc173])
#loc481 = loc(fused[#loc174, #loc171])
#loc482 = loc(fused[#loc176, #loc177])
#loc483 = loc(fused[#loc179, #loc180])
#loc484 = loc(fused[#loc181, #loc182])
#loc485 = loc(fused[#loc184, #loc183])
#loc486 = loc(fused[#loc187, #loc188])
#loc487 = loc(fused[#loc191, #loc192])
#loc488 = loc(fused[#loc193, #loc194])
#loc489 = loc(fused[#loc196, #loc197])
#loc490 = loc(fused[#loc198, #loc199])
#loc491 = loc(fused[#loc200, #loc201])
#loc492 = loc(fused[#loc202, #loc194])
#loc493 = loc(fused[#loc206, #loc207])
#loc494 = loc(fused[#loc210, #loc211])
#loc495 = loc(fused[#loc212, #loc213])
#loc496 = loc(fused[#loc214, #loc215])
#loc497 = loc(fused[#loc217, #loc218])
#loc498 = loc(fused[#loc219, #loc213])
#loc499 = loc(fused[#loc223, #loc221])
#loc500 = loc(fused[#loc226, #loc227])
#loc501 = loc(fused[#loc229, #loc230])
#loc502 = loc(fused[#loc231, #loc232])
#loc503 = loc(fused[#loc233, #loc230])
#loc504 = loc(fused[#loc236, #loc237])
#loc505 = loc(fused[#loc239, #loc240, #loc241, #loc237])
#loc506 = loc(fused[#loc243, #loc244])
#loc507 = loc(fused[#loc245, #loc246])
#loc508 = loc(fused[#loc247, #loc248, #loc249, #loc244])
#loc509 = loc(fused[#loc250, #loc251])
#loc510 = loc(fused[#loc254, #loc255])
#loc511 = loc(fused[#loc256, #loc257])
#loc512 = loc(fused[#loc260, #loc258])
#loc513 = loc(fused[#loc261, #loc262])
#loc514 = loc(fused[#loc264, #loc262])
#loc515 = loc(fused[#loc265, #loc266])
#loc516 = loc(fused[#loc267, #loc268])
#loc517 = loc(fused[#loc269, #loc270])
#loc518 = loc(fused[#loc271, #loc272])
#loc519 = loc(fused[#loc273, #loc274])
#loc520 = loc(fused[#loc275, #loc276])
#loc521 = loc(fused[#loc277, #loc278])
#loc522 = loc(fused[#loc283, #loc284])
#loc523 = loc(fused[#loc285, #loc286])
#loc524 = loc(fused[#loc287, #loc288])
#loc525 = loc(fused[#loc289, #loc286])
#loc526 = loc(fused[#loc291, #loc292])
#loc527 = loc(fused[#loc294, #loc295])
#loc528 = loc(fused[#loc296, #loc297])
#loc529 = loc(fused[#loc299, #loc298])
#loc530 = loc(fused[#loc302, #loc303])
#loc531 = loc(fused[#loc306, #loc307])
#loc532 = loc(fused[#loc308, #loc309])
#loc533 = loc(fused[#loc311, #loc312])
#loc534 = loc(fused[#loc313, #loc314])
#loc535 = loc(fused[#loc315, #loc316])
#loc536 = loc(fused[#loc317, #loc309])
#loc537 = loc(fused[#loc321, #loc322])
#loc538 = loc(fused[#loc325, #loc326])
#loc539 = loc(fused[#loc327, #loc328])
#loc540 = loc(fused[#loc329, #loc330])
#loc541 = loc(fused[#loc332, #loc333])
#loc542 = loc(fused[#loc334, #loc328])
#loc543 = loc(fused[#loc338, #loc336])
#loc544 = loc(fused[#loc341, #loc342])
#loc545 = loc(fused[#loc344, #loc345])
#loc546 = loc(fused[#loc346, #loc347])
#loc547 = loc(fused[#loc348, #loc345])
#loc548 = loc(fused[#loc351, #loc352])
#loc549 = loc(fused[#loc354, #loc352])
#loc550 = loc(fused[#loc355, #loc356])
#loc551 = loc(fused[#loc357, #loc358])
#loc552 = loc(fused[#loc359, #loc360, #loc361, #loc356])
#loc553 = loc(fused[#loc362, #loc363])
#loc554 = loc(fused[#loc367, #loc368])
#loc555 = loc(fused[#loc369, #loc370])
#loc556 = loc(fused[#loc373, #loc371])
#loc557 = loc(fused[#loc374, #loc375])
#loc558 = loc(fused[#loc377, #loc378, #loc379, #loc375])
#loc559 = loc(fused[#loc383, #loc382])
#loc560 = loc(fused[#loc384, #loc385])
#loc561 = loc(fused[#loc387, #loc385])
#loc562 = loc(fused[#loc388, #loc389])
#loc563 = loc(fused[#loc391, #loc392])
#loc564 = loc(fused[#loc393, #loc394])
#loc565 = loc(fused[#loc397, #loc395])
#loc566 = loc(fused[#loc398, #loc399])
#loc567 = loc(fused[#loc401, #loc399])
#loc568 = loc(fused[#loc403, #loc402])
#loc569 = loc(fused[#loc404, #loc405])
#loc570 = loc(fused[#loc407, #loc405])
#loc571 = loc(fused[#loc408, #loc409])
