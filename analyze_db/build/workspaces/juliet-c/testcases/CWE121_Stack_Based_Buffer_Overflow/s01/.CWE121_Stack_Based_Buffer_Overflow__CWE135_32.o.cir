!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc133)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc134)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc135)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc137)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc138)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc139)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc140)
    %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc141)
    %5 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc142)
    %6 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc143)
    cir.store %4, %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc142)
    cir.store %4, %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc143)
    %7 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc24)
    cir.store %7, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc144)
    cir.br ^bb1 loc(#loc145)
  ^bb1:  // pred: ^bb0
    %8 = cir.load deref %5 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc11)
    %9 = cir.load %8 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc28)
    cir.store %9, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc137)
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
    cir.store %12, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc146)
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc30)
    %14 = cir.load deref %5 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc31)
    cir.store %13, %14 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc147)
    cir.br ^bb2 loc(#loc27)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc148)
  ^bb3:  // pred: ^bb2
    %15 = cir.load deref %6 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc13)
    %16 = cir.load %15 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc35)
    cir.store %16, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc138)
    cir.br ^bb4 loc(#loc149)
  ^bb4:  // pred: ^bb3
    %17 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc38)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc39)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc39)
    %20 = cir.call @strlen(%19) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc38)
    cir.store %20, %2 : !u64i, !cir.ptr<!u64i> loc(#loc139)
    %21 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc17)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc17)
    %24 = cir.binop(add, %21, %23) : !u64i loc(#loc17)
    %25 = cir.const #cir.int<4> : !u64i loc(#loc17)
    %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc17)
    %27 = cir.alloca !u8i, !cir.ptr<!u8i>, %26 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc17)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc17)
    cir.store %28, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc140)
    %29 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc40)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc40)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc41)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc41)
    %33 = cir.call @wcscpy(%30, %32) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc42)
    %34 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc43)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%35) : (!cir.ptr<!s8i>) -> () loc(#loc44)
    cir.br ^bb5 loc(#loc37)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc34)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc9)
  } loc(#loc136)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc151)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc47)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc152)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc49)
    cir.return loc(#loc46)
  } loc(#loc150)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc51)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc153)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc155)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc156)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc157)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc158)
    %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc159)
    %5 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc160)
    %6 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc161)
    cir.store %4, %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc160)
    cir.store %4, %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc161)
    %7 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc70)
    cir.store %7, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc162)
    cir.br ^bb1 loc(#loc163)
  ^bb1:  // pred: ^bb0
    %8 = cir.load deref %5 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc57)
    %9 = cir.load %8 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc74)
    cir.store %9, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc155)
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc51)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc51)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc51)
    cir.store %12, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc164)
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc76)
    %14 = cir.load deref %5 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc77)
    cir.store %13, %14 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc165)
    cir.br ^bb2 loc(#loc73)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc166)
  ^bb3:  // pred: ^bb2
    %15 = cir.load deref %6 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc59)
    %16 = cir.load %15 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc81)
    cir.store %16, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc156)
    cir.br ^bb4 loc(#loc167)
  ^bb4:  // pred: ^bb3
    %17 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc84)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc85)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc85)
    %20 = cir.call @strlen(%19) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc84)
    cir.store %20, %2 : !u64i, !cir.ptr<!u64i> loc(#loc157)
    %21 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc63)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc63)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc63)
    %24 = cir.binop(add, %21, %23) : !u64i loc(#loc63)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc63)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc63)
    %27 = cir.binop(mul, %24, %26) : !u64i loc(#loc63)
    %28 = cir.alloca !u8i, !cir.ptr<!u8i>, %27 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc63)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc63)
    cir.store %29, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc158)
    %30 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc86)
    %31 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc87)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc87)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc88)
    %34 = cir.cast(bitcast, %33 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc88)
    %35 = cir.call @strcpy(%32, %34) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc86)
    %36 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc89)
    %37 = cir.cast(bitcast, %36 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    cir.br ^bb5 loc(#loc83)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc80)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc55)
  } loc(#loc154)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc168)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc169)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc171)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc172)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc173)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc174)
    %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc175)
    %5 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc176)
    %6 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc177)
    cir.store %4, %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc176)
    cir.store %4, %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc177)
    %7 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc111)
    cir.store %7, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc178)
    cir.br ^bb1 loc(#loc179)
  ^bb1:  // pred: ^bb0
    %8 = cir.load deref %5 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc98)
    %9 = cir.load %8 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc115)
    cir.store %9, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc171)
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc116)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc116)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc116)
    cir.store %12, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc180)
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc118)
    %14 = cir.load deref %5 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc119)
    cir.store %13, %14 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc181)
    cir.br ^bb2 loc(#loc114)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc182)
  ^bb3:  // pred: ^bb2
    %15 = cir.load deref %6 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc100)
    %16 = cir.load %15 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc123)
    cir.store %16, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc172)
    cir.br ^bb4 loc(#loc183)
  ^bb4:  // pred: ^bb3
    %17 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc126)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc127)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc127)
    %20 = cir.call @wcslen(%19) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc126)
    cir.store %20, %2 : !u64i, !cir.ptr<!u64i> loc(#loc173)
    %21 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc104)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc104)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc104)
    %24 = cir.binop(add, %21, %23) : !u64i loc(#loc104)
    %25 = cir.const #cir.int<4> : !u64i loc(#loc104)
    %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc104)
    %27 = cir.alloca !u8i, !cir.ptr<!u8i>, %26 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc104)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc104)
    cir.store %28, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc174)
    %29 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc128)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc128)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc129)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc129)
    %33 = cir.call @wcscpy(%30, %32) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc130)
    %34 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc131)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc131)
    cir.call @printWLine(%35) : (!cir.ptr<!s32i>) -> () loc(#loc132)
    cir.br ^bb5 loc(#loc125)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc122)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc96)
  } loc(#loc170)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":36:24)
#loc2 = loc("/usr/include/string.h":407:1)
#loc3 = loc("/usr/include/string.h":408:33)
#loc4 = loc("/usr/include/wchar.h":98:1)
#loc5 = loc("/usr/include/wchar.h":100:14)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":27:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":49:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":34:9)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":34:24)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":40:9)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":40:24)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":43:13)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":43:49)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":44:13)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":44:35)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":29:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":29:12)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":30:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":30:25)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":31:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":31:25)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":32:12)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":32:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":33:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":38:5)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":34:23)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":36:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":37:21)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":37:10)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":37:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":39:5)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":48:5)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":40:23)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":41:9)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":47:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":43:30)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":43:45)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":45:26)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":45:32)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":45:19)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":46:31)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":46:13)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":105:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":109:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":107:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":107:13)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":108:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":108:13)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":65:24)
#loc52 = loc("/usr/include/string.h":141:1)
#loc53 = loc("/usr/include/string.h":142:14)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":56:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":78:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":63:9)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":63:24)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":69:9)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":69:24)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":72:13)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":72:49)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":73:13)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":73:35)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":58:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":58:12)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":59:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":59:25)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":60:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":60:25)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":61:12)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":61:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":62:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":67:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":63:23)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":65:9)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":66:21)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":66:10)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":66:9)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":68:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":77:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":69:23)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":70:9)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":76:9)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":72:30)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":72:45)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":74:19)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":74:26)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":74:32)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":75:31)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":75:13)
#loc91 = loc("/usr/include/wchar.h":247:1)
#loc92 = loc("/usr/include/wchar.h":247:51)
#loc93 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc94 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":81:1)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":103:1)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":88:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":88:24)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":94:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":94:24)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":97:13)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":97:52)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":98:13)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":98:35)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":83:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":83:12)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":84:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":84:25)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":85:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":85:25)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":86:12)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":86:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":87:5)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":92:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":88:23)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":90:24)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":90:9)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":91:21)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":91:10)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":91:9)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":93:5)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":102:5)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":94:23)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":95:9)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":101:9)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":97:30)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":97:48)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":99:26)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":99:32)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":99:19)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":100:35)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c":100:13)
#loc133 = loc(fused[#loc2, #loc3])
#loc134 = loc(fused[#loc4, #loc5])
#loc135 = loc(fused[#loc6, #loc7])
#loc136 = loc(fused[#loc8, #loc9])
#loc137 = loc(fused[#loc10, #loc11])
#loc138 = loc(fused[#loc12, #loc13])
#loc139 = loc(fused[#loc14, #loc15])
#loc140 = loc(fused[#loc16, #loc17])
#loc141 = loc(fused[#loc18, #loc19])
#loc142 = loc(fused[#loc20, #loc21])
#loc143 = loc(fused[#loc22, #loc23])
#loc144 = loc(fused[#loc25, #loc24])
#loc145 = loc(fused[#loc26, #loc27])
#loc146 = loc(fused[#loc29, #loc1])
#loc147 = loc(fused[#loc32, #loc30])
#loc148 = loc(fused[#loc33, #loc34])
#loc149 = loc(fused[#loc36, #loc37])
#loc150 = loc(fused[#loc45, #loc46])
#loc151 = loc(fused[#loc47, #loc48])
#loc152 = loc(fused[#loc49, #loc50])
#loc153 = loc(fused[#loc52, #loc53])
#loc154 = loc(fused[#loc54, #loc55])
#loc155 = loc(fused[#loc56, #loc57])
#loc156 = loc(fused[#loc58, #loc59])
#loc157 = loc(fused[#loc60, #loc61])
#loc158 = loc(fused[#loc62, #loc63])
#loc159 = loc(fused[#loc64, #loc65])
#loc160 = loc(fused[#loc66, #loc67])
#loc161 = loc(fused[#loc68, #loc69])
#loc162 = loc(fused[#loc71, #loc70])
#loc163 = loc(fused[#loc72, #loc73])
#loc164 = loc(fused[#loc75, #loc51])
#loc165 = loc(fused[#loc78, #loc76])
#loc166 = loc(fused[#loc79, #loc80])
#loc167 = loc(fused[#loc82, #loc83])
#loc168 = loc(fused[#loc91, #loc92])
#loc169 = loc(fused[#loc93, #loc94])
#loc170 = loc(fused[#loc95, #loc96])
#loc171 = loc(fused[#loc97, #loc98])
#loc172 = loc(fused[#loc99, #loc100])
#loc173 = loc(fused[#loc101, #loc102])
#loc174 = loc(fused[#loc103, #loc104])
#loc175 = loc(fused[#loc105, #loc106])
#loc176 = loc(fused[#loc107, #loc108])
#loc177 = loc(fused[#loc109, #loc110])
#loc178 = loc(fused[#loc112, #loc111])
#loc179 = loc(fused[#loc113, #loc114])
#loc180 = loc(fused[#loc117, #loc116])
#loc181 = loc(fused[#loc120, #loc118])
#loc182 = loc(fused[#loc121, #loc122])
#loc183 = loc(fused[#loc124, #loc125])
