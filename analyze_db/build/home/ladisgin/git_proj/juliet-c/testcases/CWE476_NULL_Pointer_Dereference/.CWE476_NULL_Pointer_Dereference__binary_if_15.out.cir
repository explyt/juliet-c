!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc48 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":107:10)
#loc49 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":107:14)
#loc50 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":107:20)
#loc51 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":107:32)
#true = #cir.bool<true> : !cir.bool
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc134 = loc(fused[#loc48, #loc49])
#loc135 = loc(fused[#loc50, #loc51])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE476_NULL_Pointer_Dereference/CWE476_NULL_Pointer_Dereference__binary_if_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc118)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"intOne == 5\00" : !cir.array<!s8i x 12>> : !cir.array<!s8i x 12> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc4)
  cir.func no_proto @CWE476_NULL_Pointer_Dereference__binary_if_15_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc9)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["twoIntsStructPointer", init] {alignment = 8 : i64} loc(#loc122)
            %2 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc14)
            cir.store %2, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc122)
            cir.scope {
              %3 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc17)
              %4 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc18)
              %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc18)
              %6 = cir.cmp(ne, %3, %5) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc124)
              %7 = cir.cast(bool_to_int, %6 : !cir.bool), !s32i loc(#loc124)
              %8 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc19)
              %9 = cir.get_member %8[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc20)
              %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc21)
              %11 = cir.const #cir.int<5> : !s32i loc(#loc22)
              %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc125)
              %13 = cir.cast(bool_to_int, %12 : !cir.bool), !s32i loc(#loc125)
              %14 = cir.binop(and, %7, %13) : !s32i loc(#loc126)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc25)
              cir.if %15 {
                %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 12>> loc(#loc3)
                %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 12>>), !cir.ptr<!s8i> loc(#loc3)
                cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc27)
              } loc(#loc127)
            } loc(#loc123)
          } loc(#loc121)
          cir.break loc(#loc28)
        } loc(#loc10)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc4)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc4)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc30)
          cir.break loc(#loc31)
        } loc(#loc29)
        cir.yield loc(#loc7)
      } loc(#loc7)
    } loc(#loc120)
    cir.return loc(#loc6)
  } loc(#loc119)
  cir.func no_proto @CWE476_NULL_Pointer_Dereference__binary_if_15_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc129)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc130)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc33)
  } loc(#loc128)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc131)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc132)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc45)
  cir.func @main(%arg0: !s32i loc(fused[#loc48, #loc49]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc50, #loc51])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc134)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc135)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc47)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc52)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc52)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc53)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc54)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc54)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc55)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc42)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %8 = cir.get_global @CWE476_NULL_Pointer_Dereference__binary_if_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc136)
    cir.call @CWE476_NULL_Pointer_Dereference__binary_if_15_good() : () -> () loc(#loc57)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc43)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc44)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %13 = cir.get_global @CWE476_NULL_Pointer_Dereference__binary_if_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call @CWE476_NULL_Pointer_Dereference__binary_if_15_bad() : () -> () loc(#loc61)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc45)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc64)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    cir.return %17 : !s32i loc(#loc138)
  } loc(#loc133)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc70)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc72)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc72)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc73)
          cir.break loc(#loc74)
        } loc(#loc71)
        cir.case(default, []) {
          cir.scope {
            %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["twoIntsStructPointer", init] {alignment = 8 : i64} loc(#loc142)
            %2 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc79)
            cir.store %2, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc142)
            cir.scope {
              %3 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc82)
              %4 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc83)
              %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc83)
              %6 = cir.cmp(ne, %3, %5) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc144)
              %7 = cir.ternary(%6, true {
                %8 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc85)
                %9 = cir.get_member %8[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc20)
                %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc86)
                %11 = cir.const #cir.int<5> : !s32i loc(#loc87)
                %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc145)
                %13 = cir.ternary(%12, true {
                  %14 = cir.const #true loc(#loc84)
                  cir.yield %14 : !cir.bool loc(#loc84)
                }, false {
                  %14 = cir.const #false loc(#loc84)
                  cir.yield %14 : !cir.bool loc(#loc84)
                }) : (!cir.bool) -> !cir.bool loc(#loc84)
                cir.yield %13 : !cir.bool loc(#loc84)
              }, false {
                %8 = cir.const #false loc(#loc84)
                cir.yield %8 : !cir.bool loc(#loc84)
              }) : (!cir.bool) -> !cir.bool loc(#loc84)
              cir.if %7 {
                %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 12>> loc(#loc89)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 12>>), !cir.ptr<!s8i> loc(#loc89)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc90)
              } loc(#loc146)
            } loc(#loc143)
          } loc(#loc141)
          cir.break loc(#loc91)
        } loc(#loc75)
        cir.yield loc(#loc68)
      } loc(#loc68)
    } loc(#loc140)
    cir.return loc(#loc67)
  } loc(#loc139)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc96)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["twoIntsStructPointer", init] {alignment = 8 : i64} loc(#loc150)
            %2 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc101)
            cir.store %2, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc150)
            cir.scope {
              %3 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc104)
              %4 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc105)
              %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc105)
              %6 = cir.cmp(ne, %3, %5) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc152)
              %7 = cir.ternary(%6, true {
                %8 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc107)
                %9 = cir.get_member %8[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc20)
                %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc108)
                %11 = cir.const #cir.int<5> : !s32i loc(#loc109)
                %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc153)
                %13 = cir.ternary(%12, true {
                  %14 = cir.const #true loc(#loc106)
                  cir.yield %14 : !cir.bool loc(#loc106)
                }, false {
                  %14 = cir.const #false loc(#loc106)
                  cir.yield %14 : !cir.bool loc(#loc106)
                }) : (!cir.bool) -> !cir.bool loc(#loc106)
                cir.yield %13 : !cir.bool loc(#loc106)
              }, false {
                %8 = cir.const #false loc(#loc106)
                cir.yield %8 : !cir.bool loc(#loc106)
              }) : (!cir.bool) -> !cir.bool loc(#loc106)
              cir.if %7 {
                %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 12>> loc(#loc111)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 12>>), !cir.ptr<!s8i> loc(#loc111)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc112)
              } loc(#loc154)
            } loc(#loc151)
          } loc(#loc149)
          cir.break loc(#loc113)
        } loc(#loc97)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc115)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc115)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc116)
          cir.break loc(#loc117)
        } loc(#loc114)
        cir.yield loc(#loc94)
      } loc(#loc94)
    } loc(#loc148)
    cir.return loc(#loc93)
  } loc(#loc147)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE476_NULL_Pointer_Dereference/CWE476_NULL_Pointer_Dereference__binary_if_15.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":31:23)
#loc4 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":37:19)
#loc5 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":20:1)
#loc6 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":40:1)
#loc7 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":22:5)
#loc8 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":39:5)
#loc9 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":22:12)
#loc10 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":24:5)
#loc11 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":25:5)
#loc12 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":33:5)
#loc13 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":26:9)
#loc14 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":26:47)
#loc15 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":29:9)
#loc16 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":32:9)
#loc17 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":29:14)
#loc18 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":29:38)
#loc19 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":29:47)
#loc20 = loc("../../testcasesupport/std_testcase.h":98:9)
#loc21 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":29:69)
#loc22 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":29:79)
#loc23 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":29:13)
#loc24 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":29:80)
#loc25 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":29:44)
#loc26 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":30:9)
#loc27 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":31:13)
#loc28 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":34:5)
#loc29 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":35:5)
#loc30 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":37:9)
#loc31 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":38:9)
#loc32 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":92:1)
#loc33 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":96:1)
#loc34 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":94:5)
#loc35 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":94:11)
#loc36 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":95:5)
#loc37 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":95:11)
#loc38 = loc("/usr/include/stdlib.h":575:1)
#loc39 = loc("/usr/include/stdlib.h":575:41)
#loc40 = loc("/usr/include/time.h":76:1)
#loc41 = loc("/usr/include/time.h":76:38)
#loc42 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":112:15)
#loc43 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":114:15)
#loc44 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":117:15)
#loc45 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":119:15)
#loc46 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":107:1)
#loc47 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":122:1)
#loc52 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":108:1)
#loc53 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":110:27)
#loc54 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":110:22)
#loc55 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":110:5)
#loc56 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":112:5)
#loc57 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":113:5)
#loc58 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":113:56)
#loc59 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":114:5)
#loc60 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":117:5)
#loc61 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":118:5)
#loc62 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":118:55)
#loc63 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":119:5)
#loc64 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":121:12)
#loc65 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":121:5)
#loc66 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":47:1)
#loc67 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":67:1)
#loc68 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":49:5)
#loc69 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":66:5)
#loc70 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":49:12)
#loc71 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":51:5)
#loc72 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":53:19)
#loc73 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":53:9)
#loc74 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":54:9)
#loc75 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":55:5)
#loc76 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":56:5)
#loc77 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":64:5)
#loc78 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":57:9)
#loc79 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":57:47)
#loc80 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":60:9)
#loc81 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":63:9)
#loc82 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":60:14)
#loc83 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":60:38)
#loc84 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":60:44)
#loc85 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":60:48)
#loc86 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":60:70)
#loc87 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":60:80)
#loc88 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":61:9)
#loc89 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":62:23)
#loc90 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":62:13)
#loc91 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":65:5)
#loc92 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":70:1)
#loc93 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":90:1)
#loc94 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":72:5)
#loc95 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":89:5)
#loc96 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":72:12)
#loc97 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":74:5)
#loc98 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":75:5)
#loc99 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":83:5)
#loc100 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":76:9)
#loc101 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":76:47)
#loc102 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":79:9)
#loc103 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":82:9)
#loc104 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":79:14)
#loc105 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":79:38)
#loc106 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":79:44)
#loc107 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":79:48)
#loc108 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":79:70)
#loc109 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":79:80)
#loc110 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":80:9)
#loc111 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":81:23)
#loc112 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":81:13)
#loc113 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":84:5)
#loc114 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":85:5)
#loc115 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":87:19)
#loc116 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":87:9)
#loc117 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":88:9)
#loc118 = loc(fused[#loc1, #loc2])
#loc119 = loc(fused[#loc5, #loc6])
#loc120 = loc(fused[#loc7, #loc8])
#loc121 = loc(fused[#loc11, #loc12])
#loc122 = loc(fused[#loc13, #loc14])
#loc123 = loc(fused[#loc15, #loc16])
#loc124 = loc(fused[#loc17, #loc18])
#loc125 = loc(fused[#loc19, #loc22])
#loc126 = loc(fused[#loc23, #loc24])
#loc127 = loc(fused[#loc26, #loc16])
#loc128 = loc(fused[#loc32, #loc33])
#loc129 = loc(fused[#loc34, #loc35])
#loc130 = loc(fused[#loc36, #loc37])
#loc131 = loc(fused[#loc38, #loc39])
#loc132 = loc(fused[#loc40, #loc41])
#loc133 = loc(fused[#loc46, #loc47])
#loc136 = loc(fused[#loc57, #loc58])
#loc137 = loc(fused[#loc61, #loc62])
#loc138 = loc(fused[#loc65, #loc64])
#loc139 = loc(fused[#loc66, #loc67])
#loc140 = loc(fused[#loc68, #loc69])
#loc141 = loc(fused[#loc76, #loc77])
#loc142 = loc(fused[#loc78, #loc79])
#loc143 = loc(fused[#loc80, #loc81])
#loc144 = loc(fused[#loc82, #loc83])
#loc145 = loc(fused[#loc85, #loc87])
#loc146 = loc(fused[#loc88, #loc81])
#loc147 = loc(fused[#loc92, #loc93])
#loc148 = loc(fused[#loc94, #loc95])
#loc149 = loc(fused[#loc98, #loc99])
#loc150 = loc(fused[#loc100, #loc101])
#loc151 = loc(fused[#loc102, #loc103])
#loc152 = loc(fused[#loc104, #loc105])
#loc153 = loc(fused[#loc107, #loc109])
#loc154 = loc(fused[#loc110, #loc103])
