!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc49 = loc("CWE369_Divide_by_Zero__float_zero_04.c":175:10)
#loc50 = loc("CWE369_Divide_by_Zero__float_zero_04.c":175:14)
#loc51 = loc("CWE369_Divide_by_Zero__float_zero_04.c":175:20)
#loc52 = loc("CWE369_Divide_by_Zero__float_zero_04.c":175:32)
#loc208 = loc(fused[#loc49, #loc50])
#loc209 = loc(fused[#loc51, #loc52])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc187)
  cir.func no_proto @CWE369_Divide_by_Zero__float_zero_04_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc189)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc7)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc190)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc11)
      cir.if %3 {
        %4 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc13)
        cir.store %4, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc193)
      } loc(#loc192)
    } loc(#loc191)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc17)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc197)
          %5 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc23)
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc24)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc24)
          %8 = cir.binop(div, %5, %7) : !cir.double loc(#loc198)
          %9 = cir.cast(float_to_int, %8 : !cir.double), !s32i loc(#loc198)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc197)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc25)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc26)
        } loc(#loc196)
      } loc(#loc195)
    } loc(#loc194)
    cir.return loc(#loc4)
  } loc(#loc188)
  cir.func no_proto @CWE369_Divide_by_Zero__float_zero_04_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc200)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc202)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc28)
  } loc(#loc199)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc204)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc205)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc206)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc46)
  cir.func @main(%arg0: !s32i loc(fused[#loc49, #loc50]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc51, #loc52])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc208)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc209)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc48)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc53)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc53)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc54)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc55)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc55)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc56)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc43)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %8 = cir.get_global @CWE369_Divide_by_Zero__float_zero_04_good : !cir.ptr<!cir.func<!void ()>> loc(#loc210)
    cir.call @CWE369_Divide_by_Zero__float_zero_04_good() : () -> () loc(#loc58)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc44)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc45)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %13 = cir.get_global @CWE369_Divide_by_Zero__float_zero_04_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc211)
    cir.call @CWE369_Divide_by_Zero__float_zero_04_bad() : () -> () loc(#loc62)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc46)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc65)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc212)
    cir.return %17 : !s32i loc(#loc212)
  } loc(#loc207)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc68)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc214)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc73)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc215)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc77)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc77)
      cir.if %3 {
        %4 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc79)
        cir.store %4, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc218)
      } loc(#loc217)
    } loc(#loc216)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc83)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc83)
      cir.if %3 {
        %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc67)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc67)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc87)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc90)
          %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc90)
          %6 = cir.fabs %5 : !cir.double loc(#loc90)
          %7 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc91)
          %8 = cir.cmp(gt, %6, %7) : !cir.double, !cir.bool loc(#loc222)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc224)
            %10 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc98)
            %11 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc99)
            %12 = cir.cast(floating, %11 : !cir.float), !cir.double loc(#loc99)
            %13 = cir.binop(div, %10, %12) : !cir.double loc(#loc225)
            %14 = cir.cast(float_to_int, %13 : !cir.double), !s32i loc(#loc225)
            cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc224)
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc100)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc101)
          } else {
            %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc68)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc68)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc102)
          } loc(#loc223)
        } loc(#loc221)
      } loc(#loc220)
    } loc(#loc219)
    cir.return loc(#loc70)
  } loc(#loc213)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc227)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc107)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc228)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc111)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc111)
      cir.if %3 {
        %4 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc113)
        cir.store %4, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc231)
      } loc(#loc230)
    } loc(#loc229)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc117)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc117)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc121)
          %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc121)
          %6 = cir.fabs %5 : !cir.double loc(#loc121)
          %7 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc122)
          %8 = cir.cmp(gt, %6, %7) : !cir.double, !cir.bool loc(#loc235)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc237)
            %10 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc129)
            %11 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc130)
            %12 = cir.cast(floating, %11 : !cir.float), !cir.double loc(#loc130)
            %13 = cir.binop(div, %10, %12) : !cir.double loc(#loc238)
            %14 = cir.cast(float_to_int, %13 : !cir.double), !s32i loc(#loc238)
            cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc237)
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc131)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc132)
          } else {
            %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc133)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc133)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc134)
          } loc(#loc236)
        } loc(#loc234)
      } loc(#loc233)
    } loc(#loc232)
    cir.return loc(#loc104)
  } loc(#loc226)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc240)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc139)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc241)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc143)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc143)
      cir.if %3 {
        %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc147)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc147)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc148)
      } else {
        %4 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc149)
        cir.store %4, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc244)
      } loc(#loc243)
    } loc(#loc242)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc153)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc153)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc248)
          %5 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc159)
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc160)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc160)
          %8 = cir.binop(div, %5, %7) : !cir.double loc(#loc249)
          %9 = cir.cast(float_to_int, %8 : !cir.double), !s32i loc(#loc249)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc248)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc161)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc162)
        } loc(#loc247)
      } loc(#loc246)
    } loc(#loc245)
    cir.return loc(#loc136)
  } loc(#loc239)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc251)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc167)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc252)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc171)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc171)
      cir.if %3 {
        %4 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc173)
        cir.store %4, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc255)
      } loc(#loc254)
    } loc(#loc253)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc177)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc177)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc259)
          %5 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc183)
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc184)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc184)
          %8 = cir.binop(div, %5, %7) : !cir.double loc(#loc260)
          %9 = cir.cast(float_to_int, %8 : !cir.double), !s32i loc(#loc260)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc259)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc185)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc186)
        } loc(#loc258)
      } loc(#loc257)
    } loc(#loc256)
    cir.return loc(#loc164)
  } loc(#loc250)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_04.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__float_zero_04.c":30:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_zero_04.c":48:1)
#loc5 = loc("CWE369_Divide_by_Zero__float_zero_04.c":32:5)
#loc6 = loc("CWE369_Divide_by_Zero__float_zero_04.c":32:11)
#loc7 = loc("CWE369_Divide_by_Zero__float_zero_04.c":34:12)
#loc8 = loc("CWE369_Divide_by_Zero__float_zero_04.c":34:5)
#loc9 = loc("CWE369_Divide_by_Zero__float_zero_04.c":35:5)
#loc10 = loc("CWE369_Divide_by_Zero__float_zero_04.c":39:5)
#loc11 = loc("CWE369_Divide_by_Zero__float_zero_04.c":35:8)
#loc12 = loc("CWE369_Divide_by_Zero__float_zero_04.c":36:5)
#loc13 = loc("CWE369_Divide_by_Zero__float_zero_04.c":38:16)
#loc14 = loc("CWE369_Divide_by_Zero__float_zero_04.c":38:9)
#loc15 = loc("CWE369_Divide_by_Zero__float_zero_04.c":40:5)
#loc16 = loc("CWE369_Divide_by_Zero__float_zero_04.c":47:5)
#loc17 = loc("CWE369_Divide_by_Zero__float_zero_04.c":40:8)
#loc18 = loc("CWE369_Divide_by_Zero__float_zero_04.c":41:5)
#loc19 = loc("CWE369_Divide_by_Zero__float_zero_04.c":42:9)
#loc20 = loc("CWE369_Divide_by_Zero__float_zero_04.c":46:9)
#loc21 = loc("CWE369_Divide_by_Zero__float_zero_04.c":44:13)
#loc22 = loc("CWE369_Divide_by_Zero__float_zero_04.c":44:44)
#loc23 = loc("CWE369_Divide_by_Zero__float_zero_04.c":44:32)
#loc24 = loc("CWE369_Divide_by_Zero__float_zero_04.c":44:40)
#loc25 = loc("CWE369_Divide_by_Zero__float_zero_04.c":45:26)
#loc26 = loc("CWE369_Divide_by_Zero__float_zero_04.c":45:13)
#loc27 = loc("CWE369_Divide_by_Zero__float_zero_04.c":158:1)
#loc28 = loc("CWE369_Divide_by_Zero__float_zero_04.c":164:1)
#loc29 = loc("CWE369_Divide_by_Zero__float_zero_04.c":160:5)
#loc30 = loc("CWE369_Divide_by_Zero__float_zero_04.c":160:14)
#loc31 = loc("CWE369_Divide_by_Zero__float_zero_04.c":161:5)
#loc32 = loc("CWE369_Divide_by_Zero__float_zero_04.c":161:14)
#loc33 = loc("CWE369_Divide_by_Zero__float_zero_04.c":162:5)
#loc34 = loc("CWE369_Divide_by_Zero__float_zero_04.c":162:14)
#loc35 = loc("CWE369_Divide_by_Zero__float_zero_04.c":163:5)
#loc36 = loc("CWE369_Divide_by_Zero__float_zero_04.c":163:14)
#loc37 = loc("/usr/include/stdlib.h":575:1)
#loc38 = loc("/usr/include/stdlib.h":575:41)
#loc39 = loc("/usr/include/time.h":76:1)
#loc40 = loc("/usr/include/time.h":76:38)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE369_Divide_by_Zero__float_zero_04.c":180:15)
#loc44 = loc("CWE369_Divide_by_Zero__float_zero_04.c":182:15)
#loc45 = loc("CWE369_Divide_by_Zero__float_zero_04.c":185:15)
#loc46 = loc("CWE369_Divide_by_Zero__float_zero_04.c":187:15)
#loc47 = loc("CWE369_Divide_by_Zero__float_zero_04.c":175:1)
#loc48 = loc("CWE369_Divide_by_Zero__float_zero_04.c":190:1)
#loc53 = loc("CWE369_Divide_by_Zero__float_zero_04.c":176:1)
#loc54 = loc("CWE369_Divide_by_Zero__float_zero_04.c":178:27)
#loc55 = loc("CWE369_Divide_by_Zero__float_zero_04.c":178:22)
#loc56 = loc("CWE369_Divide_by_Zero__float_zero_04.c":178:5)
#loc57 = loc("CWE369_Divide_by_Zero__float_zero_04.c":180:5)
#loc58 = loc("CWE369_Divide_by_Zero__float_zero_04.c":181:5)
#loc59 = loc("CWE369_Divide_by_Zero__float_zero_04.c":181:47)
#loc60 = loc("CWE369_Divide_by_Zero__float_zero_04.c":182:5)
#loc61 = loc("CWE369_Divide_by_Zero__float_zero_04.c":185:5)
#loc62 = loc("CWE369_Divide_by_Zero__float_zero_04.c":186:5)
#loc63 = loc("CWE369_Divide_by_Zero__float_zero_04.c":186:46)
#loc64 = loc("CWE369_Divide_by_Zero__float_zero_04.c":187:5)
#loc65 = loc("CWE369_Divide_by_Zero__float_zero_04.c":189:12)
#loc66 = loc("CWE369_Divide_by_Zero__float_zero_04.c":189:5)
#loc67 = loc("CWE369_Divide_by_Zero__float_zero_04.c":68:19)
#loc68 = loc("CWE369_Divide_by_Zero__float_zero_04.c":80:23)
#loc69 = loc("CWE369_Divide_by_Zero__float_zero_04.c":55:1)
#loc70 = loc("CWE369_Divide_by_Zero__float_zero_04.c":83:1)
#loc71 = loc("CWE369_Divide_by_Zero__float_zero_04.c":57:5)
#loc72 = loc("CWE369_Divide_by_Zero__float_zero_04.c":57:11)
#loc73 = loc("CWE369_Divide_by_Zero__float_zero_04.c":59:12)
#loc74 = loc("CWE369_Divide_by_Zero__float_zero_04.c":59:5)
#loc75 = loc("CWE369_Divide_by_Zero__float_zero_04.c":60:5)
#loc76 = loc("CWE369_Divide_by_Zero__float_zero_04.c":64:5)
#loc77 = loc("CWE369_Divide_by_Zero__float_zero_04.c":60:8)
#loc78 = loc("CWE369_Divide_by_Zero__float_zero_04.c":61:5)
#loc79 = loc("CWE369_Divide_by_Zero__float_zero_04.c":63:16)
#loc80 = loc("CWE369_Divide_by_Zero__float_zero_04.c":63:9)
#loc81 = loc("CWE369_Divide_by_Zero__float_zero_04.c":65:5)
#loc82 = loc("CWE369_Divide_by_Zero__float_zero_04.c":82:5)
#loc83 = loc("CWE369_Divide_by_Zero__float_zero_04.c":65:8)
#loc84 = loc("CWE369_Divide_by_Zero__float_zero_04.c":66:5)
#loc85 = loc("CWE369_Divide_by_Zero__float_zero_04.c":69:5)
#loc86 = loc("CWE369_Divide_by_Zero__float_zero_04.c":71:5)
#loc87 = loc("CWE369_Divide_by_Zero__float_zero_04.c":68:9)
#loc88 = loc("CWE369_Divide_by_Zero__float_zero_04.c":73:9)
#loc89 = loc("CWE369_Divide_by_Zero__float_zero_04.c":81:9)
#loc90 = loc("CWE369_Divide_by_Zero__float_zero_04.c":73:17)
#loc91 = loc("CWE369_Divide_by_Zero__float_zero_04.c":73:25)
#loc92 = loc("CWE369_Divide_by_Zero__float_zero_04.c":73:12)
#loc93 = loc("CWE369_Divide_by_Zero__float_zero_04.c":74:9)
#loc94 = loc("CWE369_Divide_by_Zero__float_zero_04.c":77:9)
#loc95 = loc("CWE369_Divide_by_Zero__float_zero_04.c":79:9)
#loc96 = loc("CWE369_Divide_by_Zero__float_zero_04.c":75:13)
#loc97 = loc("CWE369_Divide_by_Zero__float_zero_04.c":75:44)
#loc98 = loc("CWE369_Divide_by_Zero__float_zero_04.c":75:32)
#loc99 = loc("CWE369_Divide_by_Zero__float_zero_04.c":75:40)
#loc100 = loc("CWE369_Divide_by_Zero__float_zero_04.c":76:26)
#loc101 = loc("CWE369_Divide_by_Zero__float_zero_04.c":76:13)
#loc102 = loc("CWE369_Divide_by_Zero__float_zero_04.c":80:13)
#loc103 = loc("CWE369_Divide_by_Zero__float_zero_04.c":86:1)
#loc104 = loc("CWE369_Divide_by_Zero__float_zero_04.c":109:1)
#loc105 = loc("CWE369_Divide_by_Zero__float_zero_04.c":88:5)
#loc106 = loc("CWE369_Divide_by_Zero__float_zero_04.c":88:11)
#loc107 = loc("CWE369_Divide_by_Zero__float_zero_04.c":90:12)
#loc108 = loc("CWE369_Divide_by_Zero__float_zero_04.c":90:5)
#loc109 = loc("CWE369_Divide_by_Zero__float_zero_04.c":91:5)
#loc110 = loc("CWE369_Divide_by_Zero__float_zero_04.c":95:5)
#loc111 = loc("CWE369_Divide_by_Zero__float_zero_04.c":91:8)
#loc112 = loc("CWE369_Divide_by_Zero__float_zero_04.c":92:5)
#loc113 = loc("CWE369_Divide_by_Zero__float_zero_04.c":94:16)
#loc114 = loc("CWE369_Divide_by_Zero__float_zero_04.c":94:9)
#loc115 = loc("CWE369_Divide_by_Zero__float_zero_04.c":96:5)
#loc116 = loc("CWE369_Divide_by_Zero__float_zero_04.c":108:5)
#loc117 = loc("CWE369_Divide_by_Zero__float_zero_04.c":96:8)
#loc118 = loc("CWE369_Divide_by_Zero__float_zero_04.c":97:5)
#loc119 = loc("CWE369_Divide_by_Zero__float_zero_04.c":99:9)
#loc120 = loc("CWE369_Divide_by_Zero__float_zero_04.c":107:9)
#loc121 = loc("CWE369_Divide_by_Zero__float_zero_04.c":99:17)
#loc122 = loc("CWE369_Divide_by_Zero__float_zero_04.c":99:25)
#loc123 = loc("CWE369_Divide_by_Zero__float_zero_04.c":99:12)
#loc124 = loc("CWE369_Divide_by_Zero__float_zero_04.c":100:9)
#loc125 = loc("CWE369_Divide_by_Zero__float_zero_04.c":103:9)
#loc126 = loc("CWE369_Divide_by_Zero__float_zero_04.c":105:9)
#loc127 = loc("CWE369_Divide_by_Zero__float_zero_04.c":101:13)
#loc128 = loc("CWE369_Divide_by_Zero__float_zero_04.c":101:44)
#loc129 = loc("CWE369_Divide_by_Zero__float_zero_04.c":101:32)
#loc130 = loc("CWE369_Divide_by_Zero__float_zero_04.c":101:40)
#loc131 = loc("CWE369_Divide_by_Zero__float_zero_04.c":102:26)
#loc132 = loc("CWE369_Divide_by_Zero__float_zero_04.c":102:13)
#loc133 = loc("CWE369_Divide_by_Zero__float_zero_04.c":106:23)
#loc134 = loc("CWE369_Divide_by_Zero__float_zero_04.c":106:13)
#loc135 = loc("CWE369_Divide_by_Zero__float_zero_04.c":112:1)
#loc136 = loc("CWE369_Divide_by_Zero__float_zero_04.c":135:1)
#loc137 = loc("CWE369_Divide_by_Zero__float_zero_04.c":114:5)
#loc138 = loc("CWE369_Divide_by_Zero__float_zero_04.c":114:11)
#loc139 = loc("CWE369_Divide_by_Zero__float_zero_04.c":116:12)
#loc140 = loc("CWE369_Divide_by_Zero__float_zero_04.c":116:5)
#loc141 = loc("CWE369_Divide_by_Zero__float_zero_04.c":117:5)
#loc142 = loc("CWE369_Divide_by_Zero__float_zero_04.c":126:5)
#loc143 = loc("CWE369_Divide_by_Zero__float_zero_04.c":117:8)
#loc144 = loc("CWE369_Divide_by_Zero__float_zero_04.c":118:5)
#loc145 = loc("CWE369_Divide_by_Zero__float_zero_04.c":121:5)
#loc146 = loc("CWE369_Divide_by_Zero__float_zero_04.c":123:5)
#loc147 = loc("CWE369_Divide_by_Zero__float_zero_04.c":120:19)
#loc148 = loc("CWE369_Divide_by_Zero__float_zero_04.c":120:9)
#loc149 = loc("CWE369_Divide_by_Zero__float_zero_04.c":125:16)
#loc150 = loc("CWE369_Divide_by_Zero__float_zero_04.c":125:9)
#loc151 = loc("CWE369_Divide_by_Zero__float_zero_04.c":127:5)
#loc152 = loc("CWE369_Divide_by_Zero__float_zero_04.c":134:5)
#loc153 = loc("CWE369_Divide_by_Zero__float_zero_04.c":127:8)
#loc154 = loc("CWE369_Divide_by_Zero__float_zero_04.c":128:5)
#loc155 = loc("CWE369_Divide_by_Zero__float_zero_04.c":129:9)
#loc156 = loc("CWE369_Divide_by_Zero__float_zero_04.c":133:9)
#loc157 = loc("CWE369_Divide_by_Zero__float_zero_04.c":131:13)
#loc158 = loc("CWE369_Divide_by_Zero__float_zero_04.c":131:44)
#loc159 = loc("CWE369_Divide_by_Zero__float_zero_04.c":131:32)
#loc160 = loc("CWE369_Divide_by_Zero__float_zero_04.c":131:40)
#loc161 = loc("CWE369_Divide_by_Zero__float_zero_04.c":132:26)
#loc162 = loc("CWE369_Divide_by_Zero__float_zero_04.c":132:13)
#loc163 = loc("CWE369_Divide_by_Zero__float_zero_04.c":138:1)
#loc164 = loc("CWE369_Divide_by_Zero__float_zero_04.c":156:1)
#loc165 = loc("CWE369_Divide_by_Zero__float_zero_04.c":140:5)
#loc166 = loc("CWE369_Divide_by_Zero__float_zero_04.c":140:11)
#loc167 = loc("CWE369_Divide_by_Zero__float_zero_04.c":142:12)
#loc168 = loc("CWE369_Divide_by_Zero__float_zero_04.c":142:5)
#loc169 = loc("CWE369_Divide_by_Zero__float_zero_04.c":143:5)
#loc170 = loc("CWE369_Divide_by_Zero__float_zero_04.c":147:5)
#loc171 = loc("CWE369_Divide_by_Zero__float_zero_04.c":143:8)
#loc172 = loc("CWE369_Divide_by_Zero__float_zero_04.c":144:5)
#loc173 = loc("CWE369_Divide_by_Zero__float_zero_04.c":146:16)
#loc174 = loc("CWE369_Divide_by_Zero__float_zero_04.c":146:9)
#loc175 = loc("CWE369_Divide_by_Zero__float_zero_04.c":148:5)
#loc176 = loc("CWE369_Divide_by_Zero__float_zero_04.c":155:5)
#loc177 = loc("CWE369_Divide_by_Zero__float_zero_04.c":148:8)
#loc178 = loc("CWE369_Divide_by_Zero__float_zero_04.c":149:5)
#loc179 = loc("CWE369_Divide_by_Zero__float_zero_04.c":150:9)
#loc180 = loc("CWE369_Divide_by_Zero__float_zero_04.c":154:9)
#loc181 = loc("CWE369_Divide_by_Zero__float_zero_04.c":152:13)
#loc182 = loc("CWE369_Divide_by_Zero__float_zero_04.c":152:44)
#loc183 = loc("CWE369_Divide_by_Zero__float_zero_04.c":152:32)
#loc184 = loc("CWE369_Divide_by_Zero__float_zero_04.c":152:40)
#loc185 = loc("CWE369_Divide_by_Zero__float_zero_04.c":153:26)
#loc186 = loc("CWE369_Divide_by_Zero__float_zero_04.c":153:13)
#loc187 = loc(fused[#loc1, #loc2])
#loc188 = loc(fused[#loc3, #loc4])
#loc189 = loc(fused[#loc5, #loc6])
#loc190 = loc(fused[#loc8, #loc7])
#loc191 = loc(fused[#loc9, #loc10])
#loc192 = loc(fused[#loc12, #loc10])
#loc193 = loc(fused[#loc14, #loc13])
#loc194 = loc(fused[#loc15, #loc16])
#loc195 = loc(fused[#loc18, #loc16])
#loc196 = loc(fused[#loc19, #loc20])
#loc197 = loc(fused[#loc21, #loc22])
#loc198 = loc(fused[#loc23, #loc24])
#loc199 = loc(fused[#loc27, #loc28])
#loc200 = loc(fused[#loc29, #loc30])
#loc201 = loc(fused[#loc31, #loc32])
#loc202 = loc(fused[#loc33, #loc34])
#loc203 = loc(fused[#loc35, #loc36])
#loc204 = loc(fused[#loc37, #loc38])
#loc205 = loc(fused[#loc39, #loc40])
#loc206 = loc(fused[#loc41, #loc42])
#loc207 = loc(fused[#loc47, #loc48])
#loc210 = loc(fused[#loc58, #loc59])
#loc211 = loc(fused[#loc62, #loc63])
#loc212 = loc(fused[#loc66, #loc65])
#loc213 = loc(fused[#loc69, #loc70])
#loc214 = loc(fused[#loc71, #loc72])
#loc215 = loc(fused[#loc74, #loc73])
#loc216 = loc(fused[#loc75, #loc76])
#loc217 = loc(fused[#loc78, #loc76])
#loc218 = loc(fused[#loc80, #loc79])
#loc219 = loc(fused[#loc81, #loc82])
#loc220 = loc(fused[#loc84, #loc85, #loc86, #loc82])
#loc221 = loc(fused[#loc88, #loc89])
#loc222 = loc(fused[#loc92, #loc91])
#loc223 = loc(fused[#loc93, #loc94, #loc95, #loc89])
#loc224 = loc(fused[#loc96, #loc97])
#loc225 = loc(fused[#loc98, #loc99])
#loc226 = loc(fused[#loc103, #loc104])
#loc227 = loc(fused[#loc105, #loc106])
#loc228 = loc(fused[#loc108, #loc107])
#loc229 = loc(fused[#loc109, #loc110])
#loc230 = loc(fused[#loc112, #loc110])
#loc231 = loc(fused[#loc114, #loc113])
#loc232 = loc(fused[#loc115, #loc116])
#loc233 = loc(fused[#loc118, #loc116])
#loc234 = loc(fused[#loc119, #loc120])
#loc235 = loc(fused[#loc123, #loc122])
#loc236 = loc(fused[#loc124, #loc125, #loc126, #loc120])
#loc237 = loc(fused[#loc127, #loc128])
#loc238 = loc(fused[#loc129, #loc130])
#loc239 = loc(fused[#loc135, #loc136])
#loc240 = loc(fused[#loc137, #loc138])
#loc241 = loc(fused[#loc140, #loc139])
#loc242 = loc(fused[#loc141, #loc142])
#loc243 = loc(fused[#loc144, #loc145, #loc146, #loc142])
#loc244 = loc(fused[#loc150, #loc149])
#loc245 = loc(fused[#loc151, #loc152])
#loc246 = loc(fused[#loc154, #loc152])
#loc247 = loc(fused[#loc155, #loc156])
#loc248 = loc(fused[#loc157, #loc158])
#loc249 = loc(fused[#loc159, #loc160])
#loc250 = loc(fused[#loc163, #loc164])
#loc251 = loc(fused[#loc165, #loc166])
#loc252 = loc(fused[#loc168, #loc167])
#loc253 = loc(fused[#loc169, #loc170])
#loc254 = loc(fused[#loc172, #loc170])
#loc255 = loc(fused[#loc174, #loc173])
#loc256 = loc(fused[#loc175, #loc176])
#loc257 = loc(fused[#loc178, #loc176])
#loc258 = loc(fused[#loc179, #loc180])
#loc259 = loc(fused[#loc181, #loc182])
#loc260 = loc(fused[#loc183, #loc184])
