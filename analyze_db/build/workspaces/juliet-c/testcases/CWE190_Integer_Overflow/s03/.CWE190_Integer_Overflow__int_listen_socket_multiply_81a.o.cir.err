clang: warning: argument unused during compilation: '-c' [-Wunused-command-line-argument]
warning: unknown warning option '-Wno-terminate' [-Wunknown-warning-option]
loc(fused["CWE190_Integer_Overflow__int_listen_socket_multiply_81a.cpp":122:85, "CWE190_Integer_Overflow__int_listen_socket_multiply_81a.cpp":122:144]): error: operand #0 does not dominate this use
loc(fused["CWE190_Integer_Overflow__int_listen_socket_multiply_81a.cpp":138:85, "CWE190_Integer_Overflow__int_listen_socket_multiply_81a.cpp":138:148]): error: operand #0 does not dominate this use
fatal error: error in backend: CIR codegen: module verification error before running CIR passes
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /workspaces/clangir/install/bin/clang -S -Xclang -emit-cir -std=c++11 -Wno-terminate -std=c++11 -I ../../../testcasesupport -c CWE190_Integer_Overflow__int_listen_socket_multiply_81a.cpp -o /workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/.CWE190_Integer_Overflow__int_listen_socket_multiply_81a.o.cir
1.	<eof> parser at end of file
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang     0x0000559b9a90ab68 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 40
1  clang     0x0000559b9a90873e llvm::sys::RunSignalHandlers() + 238
2  clang     0x0000559b9a879757
3  clang     0x0000559b9a8796ef llvm::CrashRecoveryContext::HandleExit(int) + 47
4  clang     0x0000559b9a905487 llvm::sys::Process::Exit(int, bool) + 39
5  clang     0x0000559b996dcfd6
6  clang     0x0000559b9a87fbb9 llvm::report_fatal_error(llvm::Twine const&, bool) + 265
7  clang     0x0000559b9a87faa6
8  clang     0x0000559b9bbb417a
9  clang     0x0000559b9dcb5a09 clang::ParseAST(clang::Sema&, bool, bool) + 617
10 clang     0x0000559b9b3d0d36 clang::FrontendAction::Execute() + 38
11 clang     0x0000559b9b33c3ad clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 1149
12 clang     0x0000559b9b4b9edf clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 815
13 clang     0x0000559b996dca7a cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 6074
14 clang     0x0000559b996d906d
15 clang     0x0000559b9b183339
16 clang     0x0000559b9a879686 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 150
17 clang     0x0000559b9b182892 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const + 242
18 clang     0x0000559b9b13ec27 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 455
19 clang     0x0000559b9b13ef17 clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const + 135
20 clang     0x0000559b9b15e928 clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 904
21 clang     0x0000559b996d86ba clang_main(int, char**, llvm::ToolContext const&) + 6090
22 clang     0x0000559b996e8147 main + 87
23 libc.so.6 0x00007f348262a1ca
24 libc.so.6 0x00007f348262a28b __libc_start_main + 139
25 clang     0x0000559b996d6aa5 _start + 37
clang: error: clang frontend command failed with exit code 70 (use -v to see invocation)
clang version 21.0.0git (git@github.com:llvm/clangir.git 4e7a2236d38507e994cbe5b79c888cf86427e7db)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /workspaces/clangir/install/bin
Build config: +assertions
clang: note: diagnostic msg: Error generating preprocessed source(s).
