!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":100:10)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":100:14)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":100:20)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":100:32)
#loc219 = loc(fused[#loc94, #loc95])
#loc220 = loc(fused[#loc96, #loc97])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc181)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc182)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc183)
  cir.func private @printIntLine(!s32i) loc(#loc184)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc185)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc187)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc188)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc190)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc190)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc19)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc24)
        %7 = cir.const #cir.int<10> : !s32i loc(#loc25)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc25)
        %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc192)
        cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc193)
        cir.scope {
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc30)
          %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc31)
          %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !cir.bool loc(#loc195)
          cir.if %14 {
            %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc33)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc34)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc35)
            cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
          } loc(#loc196)
        } loc(#loc194)
      } else {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc36)
        %7 = cir.const #cir.int<10> : !s32i loc(#loc37)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc37)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc197)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc198)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc36)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc199)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc200)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc45)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc45)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc202)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc47)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc48)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc49)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc47)
          } loc(#loc203)
        } loc(#loc201)
      } loc(#loc191)
    } loc(#loc189)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc205)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc206)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc205)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc205)
      cir.scope {
        %12 = cir.const #cir.int<0> : !s32i loc(#loc58)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc58)
        cir.store %13, %3 : !u64i, !cir.ptr<!u64i> loc(#loc208)
        cir.for : cond {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc60)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc61)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc61)
          %17 = cir.cmp(lt, %14, %16) : !u64i, !cir.bool loc(#loc209)
          cir.condition(%17) loc(#loc62)
        } body {
          cir.scope {
            %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc64)
            %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc65)
            %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !u64i), !cir.ptr<!s32i> loc(#loc65)
            %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc65)
            %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc66)
            %19 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc67)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !u64i), !cir.ptr<!s32i> loc(#loc68)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc211)
          } loc(#loc210)
          cir.yield loc(#loc57)
        } step {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc70)
          %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc71)
          cir.store %15, %3 : !u64i, !cir.ptr<!u64i> loc(#loc212)
          cir.yield loc(#loc207)
        } loc(#loc207)
      } loc(#loc207)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc72)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc73)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc74)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc72)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc75)
      %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc76)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc77)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc77)
      cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc76)
    } loc(#loc204)
    cir.return loc(#loc12)
  } loc(#loc186)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc214)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc80)
    cir.return loc(#loc79)
  } loc(#loc213)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc215)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc216)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc217)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc88)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc89)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc90)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc91)
  cir.func @main(%arg0: !s32i loc(fused[#loc94, #loc95]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc96, #loc97])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc219)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc220)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc93)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc98)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc99)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc100)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc100)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc101)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc88)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc88)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc221)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12_good() : () -> () loc(#loc103)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc89)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc90)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc90)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc106)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc222)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12_bad() : () -> () loc(#loc107)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc91)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc91)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc109)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc110)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc223)
    cir.return %17 : !s32i loc(#loc223)
  } loc(#loc218)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc225)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc116)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc226)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc228)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc228)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc120)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc120)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc125)
        %7 = cir.const #cir.int<10> : !s32i loc(#loc126)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc126)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc230)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc231)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc125)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc232)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc233)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc133)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc134)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc134)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc235)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc136)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc137)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc138)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc136)
          } loc(#loc236)
        } loc(#loc234)
      } else {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc139)
        %7 = cir.const #cir.int<10> : !s32i loc(#loc140)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc140)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc237)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc238)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc139)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc239)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc240)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc147)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc148)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc148)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc242)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc150)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc151)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc152)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc150)
          } loc(#loc243)
        } loc(#loc241)
      } loc(#loc229)
    } loc(#loc227)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc245)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc246)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc245)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc245)
      cir.scope {
        %12 = cir.const #cir.int<0> : !s32i loc(#loc161)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc161)
        cir.store %13, %3 : !u64i, !cir.ptr<!u64i> loc(#loc248)
        cir.for : cond {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc163)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc164)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc164)
          %17 = cir.cmp(lt, %14, %16) : !u64i, !cir.bool loc(#loc249)
          cir.condition(%17) loc(#loc165)
        } body {
          cir.scope {
            %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc167)
            %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc168)
            %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !u64i), !cir.ptr<!s32i> loc(#loc168)
            %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc168)
            %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc169)
            %19 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc170)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !u64i), !cir.ptr<!s32i> loc(#loc171)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc251)
          } loc(#loc250)
          cir.yield loc(#loc160)
        } step {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc173)
          %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc174)
          cir.store %15, %3 : !u64i, !cir.ptr<!u64i> loc(#loc252)
          cir.yield loc(#loc247)
        } loc(#loc247)
      } loc(#loc247)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc175)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc176)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc177)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc175)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc178)
      %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc179)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc180)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc180)
      cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc179)
    } loc(#loc244)
    cir.return loc(#loc113)
  } loc(#loc224)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":21:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":48:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":23:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":23:11)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":24:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":24:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":25:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":36:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":25:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":25:33)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":26:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":30:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":32:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":28:23)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":28:30)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":28:32)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":28:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":29:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":29:37)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":29:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":29:21)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":29:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":29:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":29:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":29:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":34:23)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":34:30)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":34:33)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":34:43)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":34:44)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":34:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":35:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":35:37)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":35:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":35:21)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":35:27)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":35:28)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":35:34)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":35:33)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":37:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":47:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":38:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":38:28)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":39:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":39:16)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":41:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":44:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":41:18)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":41:14)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":41:21)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":41:25)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":41:23)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":42:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":43:30)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":43:23)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":43:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":43:18)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":43:19)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":43:31)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":41:30)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":41:29)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":45:22)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":45:27)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":45:28)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":45:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":46:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":46:14)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":85:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":88:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":87:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":87:13)
#loc82 = loc("/usr/include/stdlib.h":575:1)
#loc83 = loc("/usr/include/stdlib.h":575:41)
#loc84 = loc("/usr/include/time.h":76:1)
#loc85 = loc("/usr/include/time.h":76:38)
#loc86 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc87 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":105:15)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":107:15)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":110:15)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":112:15)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":100:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":115:1)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":101:1)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":103:27)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":103:22)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":103:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":105:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":106:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":106:60)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":107:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":110:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":111:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":111:59)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":112:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":114:12)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":114:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":56:1)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":83:1)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":58:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":58:11)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":59:12)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":59:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":60:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":71:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":60:8)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":60:33)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":61:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":65:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":67:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":63:23)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":63:30)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":63:33)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":63:43)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":63:44)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":63:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":64:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":64:37)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":64:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":64:21)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":64:27)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":64:28)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":64:34)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":64:33)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":69:23)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":69:30)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":69:33)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":69:43)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":69:44)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":69:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":70:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":70:37)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":70:13)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":70:21)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":70:27)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":70:28)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":70:34)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":70:33)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":72:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":82:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":73:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":73:28)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":74:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":74:16)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":76:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":79:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":76:18)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":76:14)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":76:21)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":76:25)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":76:23)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":77:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":78:30)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":78:23)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":78:13)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":78:18)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":78:19)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":78:31)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":76:30)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":76:29)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":80:22)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":80:27)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":80:28)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":80:9)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":81:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c":81:14)
#loc181 = loc(fused[#loc1, #loc2])
#loc182 = loc(fused[#loc3, #loc4])
#loc183 = loc(fused[#loc5, #loc6])
#loc184 = loc(fused[#loc7, #loc8])
#loc185 = loc(fused[#loc9, #loc10])
#loc186 = loc(fused[#loc11, #loc12])
#loc187 = loc(fused[#loc13, #loc14])
#loc188 = loc(fused[#loc16, #loc15])
#loc189 = loc(fused[#loc17, #loc18])
#loc190 = loc(fused[#loc19, #loc20])
#loc191 = loc(fused[#loc21, #loc22, #loc23, #loc18])
#loc192 = loc(fused[#loc24, #loc26])
#loc193 = loc(fused[#loc27, #loc26])
#loc194 = loc(fused[#loc28, #loc29])
#loc195 = loc(fused[#loc30, #loc31])
#loc196 = loc(fused[#loc32, #loc29])
#loc197 = loc(fused[#loc38, #loc39])
#loc198 = loc(fused[#loc37, #loc39])
#loc199 = loc(fused[#loc36, #loc40])
#loc200 = loc(fused[#loc41, #loc40])
#loc201 = loc(fused[#loc42, #loc43])
#loc202 = loc(fused[#loc44, #loc45])
#loc203 = loc(fused[#loc46, #loc43])
#loc204 = loc(fused[#loc50, #loc51])
#loc205 = loc(fused[#loc52, #loc53])
#loc206 = loc(fused[#loc54, #loc55])
#loc207 = loc(fused[#loc56, #loc57])
#loc208 = loc(fused[#loc59, #loc58])
#loc209 = loc(fused[#loc60, #loc61])
#loc210 = loc(fused[#loc63, #loc57])
#loc211 = loc(fused[#loc66, #loc69])
#loc212 = loc(fused[#loc71, #loc70])
#loc213 = loc(fused[#loc78, #loc79])
#loc214 = loc(fused[#loc80, #loc81])
#loc215 = loc(fused[#loc82, #loc83])
#loc216 = loc(fused[#loc84, #loc85])
#loc217 = loc(fused[#loc86, #loc87])
#loc218 = loc(fused[#loc92, #loc93])
#loc221 = loc(fused[#loc103, #loc104])
#loc222 = loc(fused[#loc107, #loc108])
#loc223 = loc(fused[#loc111, #loc110])
#loc224 = loc(fused[#loc112, #loc113])
#loc225 = loc(fused[#loc114, #loc115])
#loc226 = loc(fused[#loc117, #loc116])
#loc227 = loc(fused[#loc118, #loc119])
#loc228 = loc(fused[#loc120, #loc121])
#loc229 = loc(fused[#loc122, #loc123, #loc124, #loc119])
#loc230 = loc(fused[#loc127, #loc128])
#loc231 = loc(fused[#loc126, #loc128])
#loc232 = loc(fused[#loc125, #loc129])
#loc233 = loc(fused[#loc130, #loc129])
#loc234 = loc(fused[#loc131, #loc132])
#loc235 = loc(fused[#loc133, #loc134])
#loc236 = loc(fused[#loc135, #loc132])
#loc237 = loc(fused[#loc141, #loc142])
#loc238 = loc(fused[#loc140, #loc142])
#loc239 = loc(fused[#loc139, #loc143])
#loc240 = loc(fused[#loc144, #loc143])
#loc241 = loc(fused[#loc145, #loc146])
#loc242 = loc(fused[#loc147, #loc148])
#loc243 = loc(fused[#loc149, #loc146])
#loc244 = loc(fused[#loc153, #loc154])
#loc245 = loc(fused[#loc155, #loc156])
#loc246 = loc(fused[#loc157, #loc158])
#loc247 = loc(fused[#loc159, #loc160])
#loc248 = loc(fused[#loc162, #loc161])
#loc249 = loc(fused[#loc163, #loc164])
#loc250 = loc(fused[#loc166, #loc160])
#loc251 = loc(fused[#loc169, #loc172])
#loc252 = loc(fused[#loc174, #loc173])
