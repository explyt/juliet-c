!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__semicolon_14.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" external @globalFive : !s32i {alignment = 4 : i64} loc(#loc42)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE398_Poor_Code_Quality__semicolon_14_bad() extra(#fn_attr) {
    cir.br ^bb1 loc(#loc45)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc42)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    %2 = cir.const #cir.int<5> : !s32i loc(#loc11)
    %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc46)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc47)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc5)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc13)
    cir.br ^bb3 loc(#loc9)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc9)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc7)
  } loc(#loc44)
  cir.func no_proto @CWE398_Poor_Code_Quality__semicolon_14_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc49)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc16)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc50)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc18)
    cir.return loc(#loc15)
  } loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc20)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc21)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.br ^bb1 loc(#loc52)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc42)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    %2 = cir.const #cir.int<5> : !s32i loc(#loc27)
    %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc53)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc54)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc20)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc20)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc31)
    cir.br ^bb4 loc(#loc29)
  ^bb3:  // pred: ^bb1
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc21)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc21)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc32)
    cir.br ^bb4 loc(#loc25)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc25)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc23)
  } loc(#loc51)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.br ^bb1 loc(#loc56)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc42)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
    %2 = cir.const #cir.int<5> : !s32i loc(#loc38)
    %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc57)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc58)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc40)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc41)
    cir.br ^bb3 loc(#loc36)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc36)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc34)
  } loc(#loc55)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__semicolon_14.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":118:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":118:12)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":26:19)
#loc6 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":20:1)
#loc7 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":28:1)
#loc8 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":22:5)
#loc9 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":27:5)
#loc10 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":22:8)
#loc11 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":22:20)
#loc12 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":23:5)
#loc13 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":26:9)
#loc14 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":59:1)
#loc15 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":63:1)
#loc16 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":61:5)
#loc17 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":61:11)
#loc18 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":62:5)
#loc19 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":62:11)
#loc20 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":40:19)
#loc21 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":45:19)
#loc22 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":35:1)
#loc23 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":47:1)
#loc24 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":37:5)
#loc25 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":46:5)
#loc26 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":37:8)
#loc27 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":37:20)
#loc28 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":38:5)
#loc29 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":41:5)
#loc30 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":43:5)
#loc31 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":40:9)
#loc32 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":45:9)
#loc33 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":50:1)
#loc34 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":57:1)
#loc35 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":52:5)
#loc36 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":56:5)
#loc37 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":52:8)
#loc38 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":52:20)
#loc39 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":53:5)
#loc40 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":55:19)
#loc41 = loc("CWE398_Poor_Code_Quality__semicolon_14.c":55:9)
#loc42 = loc(fused[#loc1, #loc2])
#loc43 = loc(fused[#loc3, #loc4])
#loc44 = loc(fused[#loc6, #loc7])
#loc45 = loc(fused[#loc8, #loc9])
#loc46 = loc(fused[#loc10, #loc11])
#loc47 = loc(fused[#loc12, #loc9])
#loc48 = loc(fused[#loc14, #loc15])
#loc49 = loc(fused[#loc16, #loc17])
#loc50 = loc(fused[#loc18, #loc19])
#loc51 = loc(fused[#loc22, #loc23])
#loc52 = loc(fused[#loc24, #loc25])
#loc53 = loc(fused[#loc26, #loc27])
#loc54 = loc(fused[#loc28, #loc29, #loc30, #loc25])
#loc55 = loc(fused[#loc33, #loc34])
#loc56 = loc(fused[#loc35, #loc36])
#loc57 = loc(fused[#loc37, #loc38])
#loc58 = loc(fused[#loc39, #loc36])
