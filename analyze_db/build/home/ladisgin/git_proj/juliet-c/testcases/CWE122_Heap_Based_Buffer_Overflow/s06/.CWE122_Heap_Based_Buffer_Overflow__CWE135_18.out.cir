!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":126:10)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":126:14)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":126:20)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":126:32)
#loc284 = loc(fused[#loc97, #loc98])
#loc285 = loc(fused[#loc99, #loc100])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc249)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc250)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc251)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc252)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc253)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc254)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc255)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc256)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc258)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc259)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc260)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc261)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc27)
    cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc262)
    cir.goto "source" loc(#loc263)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc31)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc32)
    %6 = cir.const #cir.int<50> : !s32i loc(#loc33)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc33)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc264)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc265)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc32)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc266)
    cir.store %11, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc259)
    cir.scope {
      %47 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc38)
      %48 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc39)
      %49 = cir.cast(bitcast, %48 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc39)
      %50 = cir.cmp(eq, %47, %49) : !cir.ptr<!s32i>, !cir.bool loc(#loc268)
      cir.if %50 {
        %51 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc41)
        %52 = cir.const #cir.int<1> : !s32i loc(#loc42)
        %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc43)
        cir.call @exit(%53) : (!s32i) -> () extra(#fn_attr) loc(#loc41)
      } loc(#loc269)
    } loc(#loc267)
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
    %13 = cir.const #cir.int<65> : !s32i loc(#loc45)
    %14 = cir.const #cir.int<50> : !s32i loc(#loc46)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc46)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc46)
    %18 = cir.call @wmemset(%12, %13, %17) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc48)
    %19 = cir.const #cir.int<0> : !s32i loc(#loc49)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
    %21 = cir.const #cir.int<50> : !s32i loc(#loc51)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc51)
    %24 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc53)
    cir.store %19, %24 : !s32i, !cir.ptr<!s32i> loc(#loc270)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc54)
    cir.store %26, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc271)
    cir.goto "sink" loc(#loc272)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc58)
    %27 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc59)
    %28 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc60)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc60)
    %30 = cir.call @strlen(%29) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc59)
    cir.store %30, %2 : !u64i, !cir.ptr<!u64i> loc(#loc260)
    %31 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc61)
    %32 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc62)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc63)
    %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc63)
    %35 = cir.binop(add, %32, %34) : !u64i loc(#loc273)
    %36 = cir.const #cir.int<4> : !u64i loc(#loc274)
    %37 = cir.call @calloc(%35, %36) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc61)
    cir.store %37, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc261)
    cir.scope {
      %47 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc68)
      %48 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc69)
      %49 = cir.cmp(eq, %47, %48) : !cir.ptr<!void>, !cir.bool loc(#loc276)
      cir.if %49 {
        %50 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc71)
        %51 = cir.const #cir.int<1> : !s32i loc(#loc72)
        %52 = cir.unary(minus, %51) : !s32i, !s32i loc(#loc73)
        cir.call @exit(%52) : (!s32i) -> () extra(#fn_attr) loc(#loc71)
      } loc(#loc277)
    } loc(#loc275)
    %38 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc74)
    %39 = cir.cast(bitcast, %38 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc74)
    %40 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc75)
    %41 = cir.cast(bitcast, %40 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc75)
    %42 = cir.call @wcscpy(%39, %41) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc76)
    %43 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc77)
    %44 = cir.cast(bitcast, %43 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %45 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc79)
    %46 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc80)
    cir.call @free(%46) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc79)
    cir.return loc(#loc18)
  } loc(#loc257)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc279)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc83)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc280)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc85)
    cir.return loc(#loc82)
  } loc(#loc278)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc281)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc282)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc91)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc92)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc93)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc94)
  cir.func @main(%arg0: !s32i loc(fused[#loc97, #loc98]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc99, #loc100])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc284)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc285)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc96)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc101)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc102)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc103)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc103)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc104)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc91)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc91)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_18_good : !cir.ptr<!cir.func<!void ()>> loc(#loc286)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_18_good() : () -> () loc(#loc106)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc92)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc108)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc93)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc93)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc109)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_18_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc287)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_18_bad() : () -> () loc(#loc110)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc94)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc94)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc112)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc113)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc288)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc288)
    cir.return %17 : !s32i loc(#loc288)
  } loc(#loc283)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc289)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc290)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc292)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc293)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc294)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc295)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc129)
    cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc296)
    cir.goto "source" loc(#loc297)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc133)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc134)
    %6 = cir.const #cir.int<50> : !s32i loc(#loc135)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc135)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc298)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc299)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc134)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc300)
    cir.store %11, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc293)
    cir.scope {
      %47 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc140)
      %48 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc141)
      %49 = cir.cast(bitcast, %48 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc141)
      %50 = cir.cmp(eq, %47, %49) : !cir.ptr<!s32i>, !cir.bool loc(#loc302)
      cir.if %50 {
        %51 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc143)
        %52 = cir.const #cir.int<1> : !s32i loc(#loc144)
        %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc145)
        cir.call @exit(%53) : (!s32i) -> () extra(#fn_attr) loc(#loc143)
      } loc(#loc303)
    } loc(#loc301)
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc146)
    %13 = cir.const #cir.int<65> : !s32i loc(#loc147)
    %14 = cir.const #cir.int<50> : !s32i loc(#loc148)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc149)
    %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc148)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc148)
    %18 = cir.call @wmemset(%12, %13, %17) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc150)
    %19 = cir.const #cir.int<0> : !s32i loc(#loc151)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc152)
    %21 = cir.const #cir.int<50> : !s32i loc(#loc153)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc154)
    %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc153)
    %24 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc155)
    cir.store %19, %24 : !s32i, !cir.ptr<!s32i> loc(#loc304)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc156)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc156)
    cir.store %26, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc305)
    cir.goto "sink" loc(#loc306)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc160)
    %27 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc161)
    %28 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc162)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc162)
    %30 = cir.call @wcslen(%29) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc161)
    cir.store %30, %2 : !u64i, !cir.ptr<!u64i> loc(#loc294)
    %31 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc163)
    %32 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc164)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc165)
    %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc165)
    %35 = cir.binop(add, %32, %34) : !u64i loc(#loc307)
    %36 = cir.const #cir.int<4> : !u64i loc(#loc308)
    %37 = cir.call @calloc(%35, %36) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc163)
    cir.store %37, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc295)
    cir.scope {
      %47 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc170)
      %48 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc171)
      %49 = cir.cmp(eq, %47, %48) : !cir.ptr<!void>, !cir.bool loc(#loc310)
      cir.if %49 {
        %50 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc173)
        %51 = cir.const #cir.int<1> : !s32i loc(#loc174)
        %52 = cir.unary(minus, %51) : !s32i, !s32i loc(#loc175)
        cir.call @exit(%52) : (!s32i) -> () extra(#fn_attr) loc(#loc173)
      } loc(#loc311)
    } loc(#loc309)
    %38 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc176)
    %39 = cir.cast(bitcast, %38 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc176)
    %40 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc177)
    %41 = cir.cast(bitcast, %40 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc177)
    %42 = cir.call @wcscpy(%39, %41) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc178)
    %43 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc179)
    %44 = cir.cast(bitcast, %43 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc179)
    cir.call @printWLine(%44) : (!cir.ptr<!s32i>) -> () loc(#loc180)
    %45 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc181)
    %46 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc182)
    cir.call @free(%46) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc181)
    cir.return loc(#loc120)
  } loc(#loc291)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc312)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc314)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc315)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc316)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc317)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc195)
    cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc318)
    cir.goto "source" loc(#loc319)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc199)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc200)
    %6 = cir.const #cir.int<50> : !s32i loc(#loc201)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc201)
    %8 = cir.const #cir.int<1> : !u64i loc(#loc320)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc321)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc200)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc322)
    cir.store %11, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc315)
    cir.scope {
      %50 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc206)
      %51 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc207)
      %52 = cir.cast(bitcast, %51 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc207)
      %53 = cir.cmp(eq, %50, %52) : !cir.ptr<!s8i>, !cir.bool loc(#loc324)
      cir.if %53 {
        %54 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc209)
        %55 = cir.const #cir.int<1> : !s32i loc(#loc210)
        %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc211)
        cir.call @exit(%56) : (!s32i) -> () extra(#fn_attr) loc(#loc209)
      } loc(#loc325)
    } loc(#loc323)
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc212)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc212)
    %14 = cir.const #cir.int<65> : !s32i loc(#loc213)
    %15 = cir.const #cir.int<50> : !s32i loc(#loc214)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc215)
    %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc214)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc214)
    cir.libc.memset %18 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc326)
    %19 = cir.const #cir.int<0> : !s32i loc(#loc218)
    %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc218)
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc219)
    %22 = cir.const #cir.int<50> : !s32i loc(#loc220)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc221)
    %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc220)
    %25 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc222)
    cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc327)
    %26 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc223)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc223)
    cir.store %27, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc328)
    cir.goto "sink" loc(#loc329)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc227)
    %28 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc228)
    %29 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc229)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc229)
    %31 = cir.call @strlen(%30) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc228)
    cir.store %31, %2 : !u64i, !cir.ptr<!u64i> loc(#loc316)
    %32 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc230)
    %33 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc231)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc232)
    %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc232)
    %36 = cir.binop(add, %33, %35) : !u64i loc(#loc330)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc233)
    %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc233)
    %39 = cir.call @calloc(%36, %38) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc230)
    cir.store %39, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc317)
    cir.scope {
      %50 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc236)
      %51 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc237)
      %52 = cir.cmp(eq, %50, %51) : !cir.ptr<!void>, !cir.bool loc(#loc332)
      cir.if %52 {
        %53 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc239)
        %54 = cir.const #cir.int<1> : !s32i loc(#loc240)
        %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc241)
        cir.call @exit(%55) : (!s32i) -> () extra(#fn_attr) loc(#loc239)
      } loc(#loc333)
    } loc(#loc331)
    %40 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc242)
    %41 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc243)
    %42 = cir.cast(bitcast, %41 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc243)
    %43 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc244)
    %44 = cir.cast(bitcast, %43 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc244)
    %45 = cir.call @strcpy(%42, %44) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc242)
    %46 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc245)
    %47 = cir.cast(bitcast, %46 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc245)
    cir.call @printLine(%47) : (!cir.ptr<!s8i>) -> () loc(#loc246)
    %48 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc247)
    %49 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc248)
    cir.call @free(%49) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc247)
    cir.return loc(#loc186)
  } loc(#loc313)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/stdlib.h":675:1)
#loc10 = loc("/usr/include/stdlib.h":676:14)
#loc11 = loc("/usr/include/wchar.h":98:1)
#loc12 = loc("/usr/include/wchar.h":100:14)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc15 = loc("/usr/include/stdlib.h":687:1)
#loc16 = loc("/usr/include/stdlib.h":687:32)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":24:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":49:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":26:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":26:12)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":31:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":31:71)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":42:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":42:45)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":43:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":43:64)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":27:12)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":27:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":28:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":28:10)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":29:1)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":31:46)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":31:53)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":31:56)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":31:70)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":32:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":32:46)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":32:13)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":32:30)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":32:36)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":32:37)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":32:43)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":32:42)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":33:17)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":33:32)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":33:38)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":33:41)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":33:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":34:31)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":34:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":34:23)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":34:26)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":34:27)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":36:24)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":36:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":38:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":38:10)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":39:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":42:26)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":42:41)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":43:31)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":43:38)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":43:46)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":43:49)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":43:63)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":44:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":44:37)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":44:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":44:21)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":44:27)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":44:28)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":44:34)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":44:33)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":45:22)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":45:28)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":45:15)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":46:27)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":46:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":47:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":47:14)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":111:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":115:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":113:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":113:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":114:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":114:13)
#loc87 = loc("/usr/include/stdlib.h":575:1)
#loc88 = loc("/usr/include/stdlib.h":575:41)
#loc89 = loc("/usr/include/time.h":76:1)
#loc90 = loc("/usr/include/time.h":76:38)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":131:15)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":133:15)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":136:15)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":138:15)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":126:1)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":141:1)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":127:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":129:27)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":129:22)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":129:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":131:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":132:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":132:55)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":133:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":136:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":137:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":137:54)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":138:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":140:12)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":140:5)
#loc115 = loc("/usr/include/wchar.h":247:1)
#loc116 = loc("/usr/include/wchar.h":247:51)
#loc117 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc118 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":56:1)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":81:1)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":58:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":58:12)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":63:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":63:71)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":74:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":74:48)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":75:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":75:64)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":59:12)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":59:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":60:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":60:10)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":61:1)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":63:46)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":63:53)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":63:56)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":63:70)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":64:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":64:46)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":64:13)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":64:30)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":64:36)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":64:37)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":64:43)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":64:42)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":65:17)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":65:32)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":65:38)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":65:41)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":65:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":66:31)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":66:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":66:23)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":66:26)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":66:27)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":68:24)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":68:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":70:5)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":70:10)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":71:1)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":74:26)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":74:44)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":75:31)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":75:38)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":75:46)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":75:49)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":75:63)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":76:9)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":76:37)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":76:13)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":76:21)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":76:27)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":76:28)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":76:34)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":76:33)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":77:22)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":77:28)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":77:15)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":78:31)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":78:9)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":79:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":79:14)
#loc183 = loc("/usr/include/string.h":141:1)
#loc184 = loc("/usr/include/string.h":142:14)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":84:1)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":109:1)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":86:5)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":86:12)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":91:9)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":91:63)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":102:9)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":102:45)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":103:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":103:50)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":87:12)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":87:5)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":88:5)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":88:10)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":89:1)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":91:41)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":91:48)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":91:51)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":91:62)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":92:9)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":92:47)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":92:13)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":92:31)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":92:37)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":92:38)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":92:44)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":92:43)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":93:16)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":93:32)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":93:37)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":93:40)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":93:9)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":93:41)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":94:32)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":94:9)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":94:24)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":94:27)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":94:28)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":96:24)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":96:9)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":98:5)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":98:10)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":99:1)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":102:26)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":102:41)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":103:31)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":103:38)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":103:46)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":103:49)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":104:9)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":104:37)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":104:13)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":104:21)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":104:27)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":104:28)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":104:34)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":104:33)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":105:15)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":105:22)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":105:28)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":106:27)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":106:9)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":107:9)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":107:14)
#loc249 = loc(fused[#loc1, #loc2])
#loc250 = loc(fused[#loc3, #loc4])
#loc251 = loc(fused[#loc5, #loc6])
#loc252 = loc(fused[#loc7, #loc8])
#loc253 = loc(fused[#loc9, #loc10])
#loc254 = loc(fused[#loc11, #loc12])
#loc255 = loc(fused[#loc13, #loc14])
#loc256 = loc(fused[#loc15, #loc16])
#loc257 = loc(fused[#loc17, #loc18])
#loc258 = loc(fused[#loc19, #loc20])
#loc259 = loc(fused[#loc21, #loc22])
#loc260 = loc(fused[#loc23, #loc24])
#loc261 = loc(fused[#loc25, #loc26])
#loc262 = loc(fused[#loc28, #loc27])
#loc263 = loc(fused[#loc29, #loc30])
#loc264 = loc(fused[#loc34, #loc35])
#loc265 = loc(fused[#loc33, #loc35])
#loc266 = loc(fused[#loc32, #loc22])
#loc267 = loc(fused[#loc36, #loc37])
#loc268 = loc(fused[#loc38, #loc39])
#loc269 = loc(fused[#loc40, #loc37])
#loc270 = loc(fused[#loc50, #loc49])
#loc271 = loc(fused[#loc55, #loc54])
#loc272 = loc(fused[#loc56, #loc57])
#loc273 = loc(fused[#loc62, #loc63])
#loc274 = loc(fused[#loc64, #loc65])
#loc275 = loc(fused[#loc66, #loc67])
#loc276 = loc(fused[#loc68, #loc69])
#loc277 = loc(fused[#loc70, #loc67])
#loc278 = loc(fused[#loc81, #loc82])
#loc279 = loc(fused[#loc83, #loc84])
#loc280 = loc(fused[#loc85, #loc86])
#loc281 = loc(fused[#loc87, #loc88])
#loc282 = loc(fused[#loc89, #loc90])
#loc283 = loc(fused[#loc95, #loc96])
#loc286 = loc(fused[#loc106, #loc107])
#loc287 = loc(fused[#loc110, #loc111])
#loc288 = loc(fused[#loc114, #loc113])
#loc289 = loc(fused[#loc115, #loc116])
#loc290 = loc(fused[#loc117, #loc118])
#loc291 = loc(fused[#loc119, #loc120])
#loc292 = loc(fused[#loc121, #loc122])
#loc293 = loc(fused[#loc123, #loc124])
#loc294 = loc(fused[#loc125, #loc126])
#loc295 = loc(fused[#loc127, #loc128])
#loc296 = loc(fused[#loc130, #loc129])
#loc297 = loc(fused[#loc131, #loc132])
#loc298 = loc(fused[#loc136, #loc137])
#loc299 = loc(fused[#loc135, #loc137])
#loc300 = loc(fused[#loc134, #loc124])
#loc301 = loc(fused[#loc138, #loc139])
#loc302 = loc(fused[#loc140, #loc141])
#loc303 = loc(fused[#loc142, #loc139])
#loc304 = loc(fused[#loc152, #loc151])
#loc305 = loc(fused[#loc157, #loc156])
#loc306 = loc(fused[#loc158, #loc159])
#loc307 = loc(fused[#loc164, #loc165])
#loc308 = loc(fused[#loc166, #loc167])
#loc309 = loc(fused[#loc168, #loc169])
#loc310 = loc(fused[#loc170, #loc171])
#loc311 = loc(fused[#loc172, #loc169])
#loc312 = loc(fused[#loc183, #loc184])
#loc313 = loc(fused[#loc185, #loc186])
#loc314 = loc(fused[#loc187, #loc188])
#loc315 = loc(fused[#loc189, #loc190])
#loc316 = loc(fused[#loc191, #loc192])
#loc317 = loc(fused[#loc193, #loc194])
#loc318 = loc(fused[#loc196, #loc195])
#loc319 = loc(fused[#loc197, #loc198])
#loc320 = loc(fused[#loc202, #loc203])
#loc321 = loc(fused[#loc201, #loc203])
#loc322 = loc(fused[#loc200, #loc190])
#loc323 = loc(fused[#loc204, #loc205])
#loc324 = loc(fused[#loc206, #loc207])
#loc325 = loc(fused[#loc208, #loc205])
#loc326 = loc(fused[#loc216, #loc217])
#loc327 = loc(fused[#loc219, #loc218])
#loc328 = loc(fused[#loc224, #loc223])
#loc329 = loc(fused[#loc225, #loc226])
#loc330 = loc(fused[#loc231, #loc232])
#loc331 = loc(fused[#loc234, #loc235])
#loc332 = loc(fused[#loc236, #loc237])
#loc333 = loc(fused[#loc238, #loc235])
