!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_max_preinc_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrue(...) -> !s32i loc(#loc173)
  cir.func private  @printIntLine(!s32i) loc(#loc174)
  cir.func no_proto  @CWE190_Integer_Overflow__int_max_preinc_11_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc176)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc179)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc179)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc13)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc16)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc181)
      } loc(#loc180)
    } loc(#loc178)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc183)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc183)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc20)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc20)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc186)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
          %8 = cir.unary(inc, %7) : !s32i, !s32i loc(#loc27)
          cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc186)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc29)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc30)
        } loc(#loc185)
      } loc(#loc184)
    } loc(#loc182)
    cir.return loc(#loc6)
  } loc(#loc175)
  cir.func no_proto  @CWE190_Integer_Overflow__int_max_preinc_11_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc189)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc190)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc191)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc192)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc32)
  } loc(#loc188)
  cir.func no_proto private  @globalReturnsFalse(...) -> !s32i loc(#loc193)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc194)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc45)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc46)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc196)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc51)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc199)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc199)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc55)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc55)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc58)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
      } loc(#loc200)
    } loc(#loc198)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc203)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc203)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc62)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc62)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc45)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc45)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc67)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc71)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc206)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc72)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc208)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
            %12 = cir.unary(inc, %11) : !s32i, !s32i loc(#loc78)
            cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc77)
            cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc208)
            %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc80)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc81)
          } else {
            %10 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc46)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc46)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc82)
          } loc(#loc207)
        } loc(#loc205)
      } loc(#loc204)
    } loc(#loc202)
    cir.return loc(#loc48)
  } loc(#loc195)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc211)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc87)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc214)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc214)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc91)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc91)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc94)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc216)
      } loc(#loc215)
    } loc(#loc213)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc218)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc218)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc98)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc98)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc104)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc221)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc105)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc223)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
            %12 = cir.unary(inc, %11) : !s32i, !s32i loc(#loc111)
            cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc224)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
            cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc223)
            %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc113)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc114)
          } else {
            %10 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc115)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc115)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc116)
          } loc(#loc222)
        } loc(#loc220)
      } loc(#loc219)
    } loc(#loc217)
    cir.return loc(#loc84)
  } loc(#loc210)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc226)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc121)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc227)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc229)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc229)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc125)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc125)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc130)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc130)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc131)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc132)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc231)
      } loc(#loc230)
    } loc(#loc228)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc233)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc233)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc136)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc136)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc236)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc143)
          %8 = cir.unary(inc, %7) : !s32i, !s32i loc(#loc143)
          cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc237)
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc142)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc236)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc145)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc146)
        } loc(#loc235)
      } loc(#loc234)
    } loc(#loc232)
    cir.return loc(#loc118)
  } loc(#loc225)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc239)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc151)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc240)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc242)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc242)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc155)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc155)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc158)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc244)
      } loc(#loc243)
    } loc(#loc241)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc246)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc246)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc162)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc162)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc249)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc169)
          %8 = cir.unary(inc, %7) : !s32i, !s32i loc(#loc169)
          cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc250)
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc168)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc249)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc171)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc172)
        } loc(#loc248)
      } loc(#loc247)
    } loc(#loc245)
    cir.return loc(#loc148)
  } loc(#loc238)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_max_preinc_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":41:1)
#loc7 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":24:5)
#loc8 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":24:9)
#loc9 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":26:12)
#loc10 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":26:5)
#loc11 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":27:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":31:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":27:8)
#loc14 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":27:26)
#loc15 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":28:5)
#loc16 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":30:16)
#loc17 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":30:9)
#loc18 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":32:5)
#loc19 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":40:5)
#loc20 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":32:8)
#loc21 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":32:26)
#loc22 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":33:5)
#loc23 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":34:9)
#loc24 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":39:9)
#loc25 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":37:13)
#loc26 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":37:26)
#loc27 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":36:13)
#loc28 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":36:15)
#loc29 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":38:26)
#loc30 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":38:13)
#loc31 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":155:1)
#loc32 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":161:1)
#loc33 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":157:5)
#loc34 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":157:14)
#loc35 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":158:5)
#loc36 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":158:14)
#loc37 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":159:5)
#loc38 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":159:14)
#loc39 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":160:5)
#loc40 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":160:14)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":61:19)
#loc46 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":74:23)
#loc47 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":48:1)
#loc48 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":77:1)
#loc49 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":50:5)
#loc50 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":50:9)
#loc51 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":52:12)
#loc52 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":52:5)
#loc53 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":53:5)
#loc54 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":57:5)
#loc55 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":53:8)
#loc56 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":53:26)
#loc57 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":54:5)
#loc58 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":56:16)
#loc59 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":56:9)
#loc60 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":58:5)
#loc61 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":76:5)
#loc62 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":58:8)
#loc63 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":58:27)
#loc64 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":59:5)
#loc65 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":62:5)
#loc66 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":64:5)
#loc67 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":61:9)
#loc68 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":66:9)
#loc69 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":75:9)
#loc70 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":66:13)
#loc71 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":66:20)
#loc72 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":66:18)
#loc73 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":67:9)
#loc74 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":71:9)
#loc75 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":73:9)
#loc76 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":69:13)
#loc77 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":69:26)
#loc78 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":68:13)
#loc79 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":68:15)
#loc80 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":70:26)
#loc81 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":70:13)
#loc82 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":74:13)
#loc83 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":80:1)
#loc84 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":104:1)
#loc85 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":82:5)
#loc86 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":82:9)
#loc87 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":84:12)
#loc88 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":84:5)
#loc89 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":85:5)
#loc90 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":89:5)
#loc91 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":85:8)
#loc92 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":85:26)
#loc93 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":86:5)
#loc94 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":88:16)
#loc95 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":88:9)
#loc96 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":90:5)
#loc97 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":103:5)
#loc98 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":90:8)
#loc99 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":90:26)
#loc100 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":91:5)
#loc101 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":93:9)
#loc102 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":102:9)
#loc103 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":93:13)
#loc104 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":93:20)
#loc105 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":93:18)
#loc106 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":94:9)
#loc107 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":98:9)
#loc108 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":100:9)
#loc109 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":96:13)
#loc110 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":96:26)
#loc111 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":95:13)
#loc112 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":95:15)
#loc113 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":97:26)
#loc114 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":97:13)
#loc115 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":101:23)
#loc116 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":101:13)
#loc117 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":107:1)
#loc118 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":131:1)
#loc119 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":109:5)
#loc120 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":109:9)
#loc121 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":111:12)
#loc122 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":111:5)
#loc123 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":112:5)
#loc124 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":121:5)
#loc125 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":112:8)
#loc126 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":112:27)
#loc127 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":113:5)
#loc128 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":116:5)
#loc129 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":118:5)
#loc130 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":115:19)
#loc131 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":115:9)
#loc132 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":120:16)
#loc133 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":120:9)
#loc134 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":122:5)
#loc135 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":130:5)
#loc136 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":122:8)
#loc137 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":122:26)
#loc138 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":123:5)
#loc139 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":124:9)
#loc140 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":129:9)
#loc141 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":127:13)
#loc142 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":127:26)
#loc143 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":126:13)
#loc144 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":126:15)
#loc145 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":128:26)
#loc146 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":128:13)
#loc147 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":134:1)
#loc148 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":153:1)
#loc149 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":136:5)
#loc150 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":136:9)
#loc151 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":138:12)
#loc152 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":138:5)
#loc153 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":139:5)
#loc154 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":143:5)
#loc155 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":139:8)
#loc156 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":139:26)
#loc157 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":140:5)
#loc158 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":142:16)
#loc159 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":142:9)
#loc160 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":144:5)
#loc161 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":152:5)
#loc162 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":144:8)
#loc163 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":144:26)
#loc164 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":145:5)
#loc165 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":146:9)
#loc166 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":151:9)
#loc167 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":149:13)
#loc168 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":149:26)
#loc169 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":148:13)
#loc170 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":148:15)
#loc171 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":150:26)
#loc172 = loc("CWE190_Integer_Overflow__int_max_preinc_11.c":150:13)
#loc173 = loc(fused[#loc1, #loc2])
#loc174 = loc(fused[#loc3, #loc4])
#loc175 = loc(fused[#loc5, #loc6])
#loc176 = loc(fused[#loc7, #loc8])
#loc177 = loc(fused[#loc10, #loc9])
#loc178 = loc(fused[#loc11, #loc12])
#loc179 = loc(fused[#loc13, #loc14])
#loc180 = loc(fused[#loc15, #loc12])
#loc181 = loc(fused[#loc17, #loc16])
#loc182 = loc(fused[#loc18, #loc19])
#loc183 = loc(fused[#loc20, #loc21])
#loc184 = loc(fused[#loc22, #loc19])
#loc185 = loc(fused[#loc23, #loc24])
#loc186 = loc(fused[#loc25, #loc26])
#loc187 = loc(fused[#loc27, #loc28])
#loc188 = loc(fused[#loc31, #loc32])
#loc189 = loc(fused[#loc33, #loc34])
#loc190 = loc(fused[#loc35, #loc36])
#loc191 = loc(fused[#loc37, #loc38])
#loc192 = loc(fused[#loc39, #loc40])
#loc193 = loc(fused[#loc41, #loc42])
#loc194 = loc(fused[#loc43, #loc44])
#loc195 = loc(fused[#loc47, #loc48])
#loc196 = loc(fused[#loc49, #loc50])
#loc197 = loc(fused[#loc52, #loc51])
#loc198 = loc(fused[#loc53, #loc54])
#loc199 = loc(fused[#loc55, #loc56])
#loc200 = loc(fused[#loc57, #loc54])
#loc201 = loc(fused[#loc59, #loc58])
#loc202 = loc(fused[#loc60, #loc61])
#loc203 = loc(fused[#loc62, #loc63])
#loc204 = loc(fused[#loc64, #loc65, #loc66, #loc61])
#loc205 = loc(fused[#loc68, #loc69])
#loc206 = loc(fused[#loc70, #loc71])
#loc207 = loc(fused[#loc73, #loc74, #loc75, #loc69])
#loc208 = loc(fused[#loc76, #loc77])
#loc209 = loc(fused[#loc78, #loc79])
#loc210 = loc(fused[#loc83, #loc84])
#loc211 = loc(fused[#loc85, #loc86])
#loc212 = loc(fused[#loc88, #loc87])
#loc213 = loc(fused[#loc89, #loc90])
#loc214 = loc(fused[#loc91, #loc92])
#loc215 = loc(fused[#loc93, #loc90])
#loc216 = loc(fused[#loc95, #loc94])
#loc217 = loc(fused[#loc96, #loc97])
#loc218 = loc(fused[#loc98, #loc99])
#loc219 = loc(fused[#loc100, #loc97])
#loc220 = loc(fused[#loc101, #loc102])
#loc221 = loc(fused[#loc103, #loc104])
#loc222 = loc(fused[#loc106, #loc107, #loc108, #loc102])
#loc223 = loc(fused[#loc109, #loc110])
#loc224 = loc(fused[#loc111, #loc112])
#loc225 = loc(fused[#loc117, #loc118])
#loc226 = loc(fused[#loc119, #loc120])
#loc227 = loc(fused[#loc122, #loc121])
#loc228 = loc(fused[#loc123, #loc124])
#loc229 = loc(fused[#loc125, #loc126])
#loc230 = loc(fused[#loc127, #loc128, #loc129, #loc124])
#loc231 = loc(fused[#loc133, #loc132])
#loc232 = loc(fused[#loc134, #loc135])
#loc233 = loc(fused[#loc136, #loc137])
#loc234 = loc(fused[#loc138, #loc135])
#loc235 = loc(fused[#loc139, #loc140])
#loc236 = loc(fused[#loc141, #loc142])
#loc237 = loc(fused[#loc143, #loc144])
#loc238 = loc(fused[#loc147, #loc148])
#loc239 = loc(fused[#loc149, #loc150])
#loc240 = loc(fused[#loc152, #loc151])
#loc241 = loc(fused[#loc153, #loc154])
#loc242 = loc(fused[#loc155, #loc156])
#loc243 = loc(fused[#loc157, #loc154])
#loc244 = loc(fused[#loc159, #loc158])
#loc245 = loc(fused[#loc160, #loc161])
#loc246 = loc(fused[#loc162, #loc163])
#loc247 = loc(fused[#loc164, #loc161])
#loc248 = loc(fused[#loc165, #loc166])
#loc249 = loc(fused[#loc167, #loc168])
#loc250 = loc(fused[#loc169, #loc170])
