!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc103)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc104)
  cir.func private  @printDoubleLine(!cir.double) loc(#loc105)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc106)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc108)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc109)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc110)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>> loc(#loc109)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>> loc(#loc110)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc17)
    cir.store %3, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc111)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data", init] {alignment = 8 : i64} loc(#loc113)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc22)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc23)
      cir.store %6, %4 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc113)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc24)
      %8 = cir.const #cir.int<8> : !u64i loc(#loc114)
      %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc115)
      cir.store %10, %4 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc116)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc31)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc32)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc32)
        %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!cir.double>, !s32i loc(#loc118)
        %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc33)
        cir.if %19 {
          %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc35)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc36)
          %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc37)
          cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc35)
        } loc(#loc119)
      } loc(#loc117)
      %11 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc38)
      %12 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc39)
      cir.store %11, %12 : !cir.double, !cir.ptr<!cir.double> loc(#loc120)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc41)
      %14 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc42)
      cir.store %13, %14 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc121)
    } loc(#loc112)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data", init] {alignment = 8 : i64} loc(#loc123)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc47)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc48)
      cir.store %6, %4 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc123)
      %7 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc49)
      %8 = cir.load %7 : !cir.ptr<!cir.double>, !cir.double loc(#loc50)
      cir.call @printDoubleLine(%8) : (!cir.double) -> () loc(#loc51)
      %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc52)
      %10 = cir.load %4 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc53)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc53)
      cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc52)
    } loc(#loc122)
    cir.return loc(#loc10)
  } loc(#loc107)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc125)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    cir.return loc(#loc55)
  } loc(#loc124)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc127)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc128)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc129)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>> loc(#loc128)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>> loc(#loc129)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc66)
    cir.store %3, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc130)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data", init] {alignment = 8 : i64} loc(#loc132)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc71)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc72)
      cir.store %6, %4 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc132)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc73)
      %8 = cir.const #cir.int<8> : !u64i loc(#loc133)
      %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc73)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc134)
      cir.store %10, %4 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc135)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc80)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc81)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc81)
        %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!cir.double>, !s32i loc(#loc137)
        %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc82)
        cir.if %19 {
          %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc84)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc85)
          %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc86)
          cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc84)
        } loc(#loc138)
      } loc(#loc136)
      %11 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc87)
      %12 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc88)
      cir.store %11, %12 : !cir.double, !cir.ptr<!cir.double> loc(#loc139)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc90)
      %14 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc91)
      cir.store %13, %14 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc140)
    } loc(#loc131)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data", init] {alignment = 8 : i64} loc(#loc142)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc96)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc97)
      cir.store %6, %4 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc142)
      %7 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc98)
      %8 = cir.load %7 : !cir.ptr<!cir.double>, !cir.double loc(#loc99)
      cir.call @printDoubleLine(%8) : (!cir.double) -> () loc(#loc100)
      %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc101)
      %10 = cir.load %4 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc102)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc102)
      cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc101)
    } loc(#loc141)
    cir.return loc(#loc59)
  } loc(#loc126)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":38:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":38:41)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":43:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":23:14)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":24:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":24:27)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":25:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":25:27)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":27:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":27:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":28:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":36:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":29:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":29:26)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":29:25)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":32:26)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":32:33)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":32:44)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":32:45)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":32:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":33:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":33:37)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":33:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":33:21)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":33:18)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":33:27)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":33:28)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":33:34)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":33:33)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":34:17)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":34:10)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":34:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":35:21)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":35:10)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":35:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":37:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":42:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":38:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":38:26)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":38:25)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":40:26)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":40:25)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":40:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":41:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":41:14)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":73:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":76:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":75:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":75:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":50:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":71:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":52:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":52:14)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":53:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":53:27)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":54:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":54:27)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":56:12)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":56:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":57:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":64:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":58:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":58:26)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":58:25)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":60:26)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":60:33)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":60:45)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":60:46)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":60:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":61:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":61:37)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":61:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":61:21)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":61:18)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":61:27)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":61:28)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":61:34)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":61:33)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":62:17)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":62:10)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":62:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":63:21)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":63:10)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":63:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":65:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":70:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":66:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":66:26)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":66:25)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":68:26)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":68:25)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":68:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":69:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c":69:14)
#loc103 = loc(fused[#loc1, #loc2])
#loc104 = loc(fused[#loc3, #loc4])
#loc105 = loc(fused[#loc5, #loc6])
#loc106 = loc(fused[#loc7, #loc8])
#loc107 = loc(fused[#loc9, #loc10])
#loc108 = loc(fused[#loc11, #loc12])
#loc109 = loc(fused[#loc13, #loc14])
#loc110 = loc(fused[#loc15, #loc16])
#loc111 = loc(fused[#loc18, #loc17])
#loc112 = loc(fused[#loc19, #loc20])
#loc113 = loc(fused[#loc21, #loc22])
#loc114 = loc(fused[#loc25, #loc26])
#loc115 = loc(fused[#loc24, #loc27])
#loc116 = loc(fused[#loc28, #loc27])
#loc117 = loc(fused[#loc29, #loc30])
#loc118 = loc(fused[#loc31, #loc32])
#loc119 = loc(fused[#loc34, #loc30])
#loc120 = loc(fused[#loc40, #loc38])
#loc121 = loc(fused[#loc43, #loc41])
#loc122 = loc(fused[#loc44, #loc45])
#loc123 = loc(fused[#loc46, #loc47])
#loc124 = loc(fused[#loc54, #loc55])
#loc125 = loc(fused[#loc56, #loc57])
#loc126 = loc(fused[#loc58, #loc59])
#loc127 = loc(fused[#loc60, #loc61])
#loc128 = loc(fused[#loc62, #loc63])
#loc129 = loc(fused[#loc64, #loc65])
#loc130 = loc(fused[#loc67, #loc66])
#loc131 = loc(fused[#loc68, #loc69])
#loc132 = loc(fused[#loc70, #loc71])
#loc133 = loc(fused[#loc74, #loc75])
#loc134 = loc(fused[#loc73, #loc76])
#loc135 = loc(fused[#loc77, #loc76])
#loc136 = loc(fused[#loc78, #loc79])
#loc137 = loc(fused[#loc80, #loc81])
#loc138 = loc(fused[#loc83, #loc79])
#loc139 = loc(fused[#loc89, #loc87])
#loc140 = loc(fused[#loc92, #loc90])
#loc141 = loc(fused[#loc93, #loc94])
#loc142 = loc(fused[#loc95, #loc96])
