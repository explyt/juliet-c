!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":22:21)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":22:25)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":68:25)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":68:29)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":47:25)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":47:29)
#loc106 = loc(fused[#loc7, #loc8])
#loc120 = loc(fused[#loc42, #loc43])
#loc134 = loc(fused[#loc79, #loc80])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc103)
  cir.func private  @printIntLine(!s32i) loc(#loc104)
  cir.func internal private  @badSink(%arg0: !s32i loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc106)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc9)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc12)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc13)
      %3 = cir.cmp(gt, %1, %2) : !s32i, !s32i loc(#loc108)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc14)
      cir.if %4 {
        %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc110)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
        %7 = cir.const #cir.int<2> : !s32i loc(#loc17)
        %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc18)
        cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc110)
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc19)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc20)
      } loc(#loc109)
    } loc(#loc107)
    cir.return loc(#loc6)
  } loc(#loc105)
  cir.func no_proto  @CWE190_Integer_Overflow__int_rand_multiply_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc112)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc25)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc27)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc27)
    %6 = cir.ternary(%5, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc27)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc27)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc27)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc27)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc27)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc27)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc27)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc27)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc27)
      cir.yield %20 : !u32i loc(#loc27)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc27)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc27)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc27)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc27)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc27)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc27)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc27)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc27)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc27)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc27)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc27)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc27)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc27)
      cir.yield %24 : !u32i loc(#loc27)
    }) : (!cir.bool) -> !u32i loc(#loc27)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc27)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    cir.call @badSink(%8) : (!s32i) -> () loc(#loc30)
    cir.return loc(#loc22)
  } loc(#loc111)
  cir.func no_proto  @CWE190_Integer_Overflow__int_rand_multiply_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc116)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc117)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc32)
  } loc(#loc115)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc118)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc39)
  cir.func internal private  @goodB2GSink(%arg0: !s32i loc(fused[#loc42, #loc43])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc120)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc44)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc47)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc48)
      %3 = cir.cmp(gt, %1, %2) : !s32i, !s32i loc(#loc122)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc49)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc53)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc54)
          %7 = cir.const #cir.int<2> : !s32i loc(#loc55)
          %8 = cir.binop(div, %6, %7) : !s32i loc(#loc125)
          %9 = cir.cmp(lt, %5, %8) : !s32i, !s32i loc(#loc126)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc57)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc128)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc63)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc62)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc63)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc128)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc64)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc65)
          } else {
            %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc39)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc39)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc66)
          } loc(#loc127)
        } loc(#loc124)
      } loc(#loc123)
    } loc(#loc121)
    cir.return loc(#loc41)
  } loc(#loc119)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc130)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc71)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc73)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc73)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc73)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc73)
    %6 = cir.ternary(%5, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc73)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc73)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc73)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc73)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc73)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc73)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc73)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc73)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc73)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc73)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc73)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc73)
      cir.yield %20 : !u32i loc(#loc73)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc73)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc73)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc73)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc73)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc73)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc73)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc73)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc73)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc73)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc73)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc73)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc73)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc73)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc73)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc73)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc73)
      cir.yield %24 : !u32i loc(#loc73)
    }) : (!cir.bool) -> !u32i loc(#loc73)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc73)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc132)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    cir.call @goodB2GSink(%8) : (!s32i) -> () loc(#loc76)
    cir.return loc(#loc68)
  } loc(#loc129)
  cir.func internal private  @goodG2BSink(%arg0: !s32i loc(fused[#loc79, #loc80])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc134)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc84)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc85)
      %3 = cir.cmp(gt, %1, %2) : !s32i, !s32i loc(#loc136)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc86)
      cir.if %4 {
        %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc138)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc90)
        %7 = cir.const #cir.int<2> : !s32i loc(#loc89)
        %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc90)
        cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc138)
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc91)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc92)
      } loc(#loc137)
    } loc(#loc135)
    cir.return loc(#loc78)
  } loc(#loc133)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc140)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc97)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc99)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc142)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    cir.call @goodG2BSink(%3) : (!s32i) -> () loc(#loc102)
    cir.return loc(#loc94)
  } loc(#loc139)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_41.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":30:1)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":23:1)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":24:5)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":29:5)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":24:8)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":24:15)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":24:13)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":25:5)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":27:9)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":27:29)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":27:22)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":28:22)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":28:9)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":32:1)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":40:1)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":34:5)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":34:9)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":36:12)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":36:5)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":38:12)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":38:5)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":39:13)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":39:5)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":95:1)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":99:1)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":97:5)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":97:13)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":98:5)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":98:13)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":80:23)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":68:1)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":83:1)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":69:1)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":70:5)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":82:5)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":70:8)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":70:15)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":70:13)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":71:5)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":73:9)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":81:9)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":73:13)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":73:21)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":73:29)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":73:30)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":73:18)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":74:9)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":77:9)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":79:9)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":75:13)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":75:33)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":75:26)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":76:26)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":76:13)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":80:13)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":85:1)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":93:1)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":87:5)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":87:9)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":89:12)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":89:5)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":91:12)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":91:5)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":92:17)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":92:5)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":47:1)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":55:1)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":48:1)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":49:5)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":54:5)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":49:8)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":49:15)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":49:13)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":50:5)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":52:9)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":52:29)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":52:22)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":53:22)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":53:9)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":57:1)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":65:1)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":59:5)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":59:9)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":61:12)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":61:5)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":63:12)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":63:5)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":64:17)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_multiply_41.c":64:5)
#loc103 = loc(fused[#loc1, #loc2])
#loc104 = loc(fused[#loc3, #loc4])
#loc105 = loc(fused[#loc5, #loc6])
#loc107 = loc(fused[#loc10, #loc11])
#loc108 = loc(fused[#loc12, #loc13])
#loc109 = loc(fused[#loc15, #loc11])
#loc110 = loc(fused[#loc16, #loc17])
#loc111 = loc(fused[#loc21, #loc22])
#loc112 = loc(fused[#loc23, #loc24])
#loc113 = loc(fused[#loc26, #loc25])
#loc114 = loc(fused[#loc28, #loc27])
#loc115 = loc(fused[#loc31, #loc32])
#loc116 = loc(fused[#loc33, #loc34])
#loc117 = loc(fused[#loc35, #loc36])
#loc118 = loc(fused[#loc37, #loc38])
#loc119 = loc(fused[#loc40, #loc41])
#loc121 = loc(fused[#loc45, #loc46])
#loc122 = loc(fused[#loc47, #loc48])
#loc123 = loc(fused[#loc50, #loc46])
#loc124 = loc(fused[#loc51, #loc52])
#loc125 = loc(fused[#loc54, #loc55])
#loc126 = loc(fused[#loc53, #loc56])
#loc127 = loc(fused[#loc58, #loc59, #loc60, #loc52])
#loc128 = loc(fused[#loc61, #loc62])
#loc129 = loc(fused[#loc67, #loc68])
#loc130 = loc(fused[#loc69, #loc70])
#loc131 = loc(fused[#loc72, #loc71])
#loc132 = loc(fused[#loc74, #loc73])
#loc133 = loc(fused[#loc77, #loc78])
#loc135 = loc(fused[#loc82, #loc83])
#loc136 = loc(fused[#loc84, #loc85])
#loc137 = loc(fused[#loc87, #loc83])
#loc138 = loc(fused[#loc88, #loc89])
#loc139 = loc(fused[#loc93, #loc94])
#loc140 = loc(fused[#loc95, #loc96])
#loc141 = loc(fused[#loc98, #loc97])
#loc142 = loc(fused[#loc100, #loc99])
