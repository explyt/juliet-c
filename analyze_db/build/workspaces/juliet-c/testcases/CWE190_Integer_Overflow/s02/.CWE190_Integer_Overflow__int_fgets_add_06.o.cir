!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc222)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc223)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc224)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc225)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc226)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_add_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc228)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc16)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc229)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc20)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc21)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc231)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc234)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc234)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc234)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc29)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc30)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc30)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc30)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc30)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc30)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc30)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc30)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc30)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc223)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc31)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc32)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc33)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc236)
            cir.if %21 {
              %22 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc37)
              %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc38)
              cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc238)
            } else {
              %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc41)
            } loc(#loc237)
          } loc(#loc235)
        } loc(#loc233)
      } loc(#loc232)
    } loc(#loc230)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc44)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc45)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc240)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc243)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc50)
          %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc51)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc243)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc52)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc53)
        } loc(#loc242)
      } loc(#loc241)
    } loc(#loc239)
    cir.return loc(#loc13)
  } loc(#loc227)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_add_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc245)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc56)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc246)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc58)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc247)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc60)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc248)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc62)
    cir.return loc(#loc55)
  } loc(#loc244)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc64)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc65)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc250)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc70)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc251)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc74)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc75)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc253)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc256)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc256)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc256)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc83)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc84)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc84)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc84)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc84)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc84)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc84)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc84)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc84)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc223)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc85)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc86)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc87)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc87)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc258)
            cir.if %21 {
              %22 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc91)
              %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc92)
              cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc260)
            } else {
              %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc95)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc95)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc96)
            } loc(#loc259)
          } loc(#loc257)
        } loc(#loc255)
      } loc(#loc254)
    } loc(#loc252)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc99)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc100)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !cir.bool loc(#loc262)
      cir.if %4 {
        %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc64)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc64)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc104)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc107)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc108)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc265)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc267)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc114)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc113)
            %11 = cir.binop(add, %9, %10) nsw : !s32i loc(#loc114)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc267)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc115)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc116)
          } else {
            %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc65)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc65)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc117)
          } loc(#loc266)
        } loc(#loc264)
      } loc(#loc263)
    } loc(#loc261)
    cir.return loc(#loc67)
  } loc(#loc249)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc269)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc122)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc270)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc126)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc127)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc272)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc275)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc275)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc275)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc135)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc136)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc136)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc136)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc136)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc136)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc136)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc136)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc136)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc223)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc137)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc138)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc139)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc139)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc277)
            cir.if %21 {
              %22 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc143)
              %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc144)
              cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc279)
            } else {
              %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc147)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc147)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc148)
            } loc(#loc278)
          } loc(#loc276)
        } loc(#loc274)
      } loc(#loc273)
    } loc(#loc271)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc151)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc152)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc281)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc156)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc157)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc284)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc286)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc163)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc162)
            %11 = cir.binop(add, %9, %10) nsw : !s32i loc(#loc163)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc286)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc164)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc165)
          } else {
            %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc166)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc166)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc167)
          } loc(#loc285)
        } loc(#loc283)
      } loc(#loc282)
    } loc(#loc280)
    cir.return loc(#loc119)
  } loc(#loc268)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc288)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc172)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc289)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc176)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc177)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !cir.bool loc(#loc291)
      cir.if %4 {
        %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc181)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc181)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc182)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc183)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc293)
      } loc(#loc292)
    } loc(#loc290)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc187)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc188)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc295)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc298)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc194)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc193)
          %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc194)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc298)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc195)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc196)
        } loc(#loc297)
      } loc(#loc296)
    } loc(#loc294)
    cir.return loc(#loc169)
  } loc(#loc287)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc300)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc201)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc301)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc205)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc206)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc303)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc208)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc305)
      } loc(#loc304)
    } loc(#loc302)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc212)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc213)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc307)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc310)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc219)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc218)
          %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc219)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc310)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc220)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc221)
        } loc(#loc309)
      } loc(#loc308)
    } loc(#loc306)
    cir.return loc(#loc198)
  } loc(#loc299)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_06.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":46:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":29:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":58:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":31:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":31:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":33:12)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":33:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":34:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":49:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":34:8)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":34:27)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":35:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":36:9)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":48:9)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":37:13)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":37:49)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":39:13)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":47:13)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":39:23)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":39:36)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":39:53)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":39:17)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":39:63)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":40:13)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":43:13)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":45:13)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":42:29)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":42:24)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":42:17)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":42:40)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":46:17)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":50:5)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":57:5)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":50:8)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":50:27)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":51:5)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":52:9)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":56:9)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":54:13)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":54:33)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":54:26)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":55:26)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":55:13)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":190:1)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":196:1)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":192:5)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":192:14)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":193:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":193:14)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":194:5)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":194:14)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":195:5)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":195:14)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":89:19)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":101:23)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":65:1)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":104:1)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":67:5)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":67:9)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":69:12)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":69:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":70:5)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":85:5)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":70:8)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":70:27)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":71:5)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":72:9)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":84:9)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":73:13)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":73:49)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":75:13)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":83:13)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":75:23)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":75:36)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":75:53)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":75:17)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":75:63)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":76:13)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":79:13)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":81:13)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":78:29)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":78:24)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":78:17)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":78:40)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":82:27)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":82:17)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":86:5)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":103:5)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":86:8)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":86:27)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":87:5)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":90:5)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":92:5)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":89:9)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":94:9)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":102:9)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":94:13)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":94:20)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":95:9)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":98:9)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":100:9)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":96:13)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":96:33)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":96:26)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":97:26)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":97:13)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":101:13)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":107:1)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":141:1)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":109:5)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":109:9)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":111:12)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":111:5)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":112:5)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":127:5)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":112:8)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":112:27)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":113:5)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":114:9)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":126:9)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":115:13)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":115:49)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":117:13)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":125:13)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":117:23)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":117:36)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":117:53)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":117:17)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":117:63)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":118:13)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":121:13)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":123:13)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":120:29)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":120:24)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":120:17)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":120:40)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":124:27)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":124:17)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":128:5)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":140:5)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":128:8)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":128:27)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":129:5)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":131:9)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":139:9)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":131:13)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":131:20)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":132:9)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":135:9)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":137:9)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":133:13)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":133:33)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":133:26)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":134:26)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":134:13)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":138:23)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":138:13)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":144:1)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":167:1)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":146:5)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":146:9)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":148:12)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":148:5)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":149:5)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":158:5)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":149:8)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":149:27)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":150:5)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":153:5)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":155:5)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":152:19)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":152:9)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":157:16)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":157:9)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":159:5)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":166:5)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":159:8)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":159:27)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":160:5)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":161:9)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":165:9)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":163:13)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":163:33)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":163:26)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":164:26)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":164:13)
#loc197 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":170:1)
#loc198 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":188:1)
#loc199 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":172:5)
#loc200 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":172:9)
#loc201 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":174:12)
#loc202 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":174:5)
#loc203 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":175:5)
#loc204 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":179:5)
#loc205 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":175:8)
#loc206 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":175:27)
#loc207 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":176:5)
#loc208 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":178:16)
#loc209 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":178:9)
#loc210 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":180:5)
#loc211 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":187:5)
#loc212 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":180:8)
#loc213 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":180:27)
#loc214 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":181:5)
#loc215 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":182:9)
#loc216 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":186:9)
#loc217 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":184:13)
#loc218 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":184:33)
#loc219 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":184:26)
#loc220 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":185:26)
#loc221 = loc("CWE190_Integer_Overflow__int_fgets_add_06.c":185:13)
#loc222 = loc(fused[#loc1, #loc2])
#loc223 = loc(fused[#loc3, #loc4])
#loc224 = loc(fused[#loc5, #loc6])
#loc225 = loc(fused[#loc7, #loc8])
#loc226 = loc(fused[#loc10, #loc11])
#loc227 = loc(fused[#loc12, #loc13])
#loc228 = loc(fused[#loc14, #loc15])
#loc229 = loc(fused[#loc17, #loc16])
#loc230 = loc(fused[#loc18, #loc19])
#loc231 = loc(fused[#loc20, #loc21])
#loc232 = loc(fused[#loc22, #loc19])
#loc233 = loc(fused[#loc23, #loc24])
#loc234 = loc(fused[#loc25, #loc26])
#loc235 = loc(fused[#loc27, #loc28])
#loc236 = loc(fused[#loc32, #loc33])
#loc237 = loc(fused[#loc34, #loc35, #loc36, #loc28])
#loc238 = loc(fused[#loc39, #loc40])
#loc239 = loc(fused[#loc42, #loc43])
#loc240 = loc(fused[#loc44, #loc45])
#loc241 = loc(fused[#loc46, #loc43])
#loc242 = loc(fused[#loc47, #loc48])
#loc243 = loc(fused[#loc49, #loc50])
#loc244 = loc(fused[#loc54, #loc55])
#loc245 = loc(fused[#loc56, #loc57])
#loc246 = loc(fused[#loc58, #loc59])
#loc247 = loc(fused[#loc60, #loc61])
#loc248 = loc(fused[#loc62, #loc63])
#loc249 = loc(fused[#loc66, #loc67])
#loc250 = loc(fused[#loc68, #loc69])
#loc251 = loc(fused[#loc71, #loc70])
#loc252 = loc(fused[#loc72, #loc73])
#loc253 = loc(fused[#loc74, #loc75])
#loc254 = loc(fused[#loc76, #loc73])
#loc255 = loc(fused[#loc77, #loc78])
#loc256 = loc(fused[#loc79, #loc80])
#loc257 = loc(fused[#loc81, #loc82])
#loc258 = loc(fused[#loc86, #loc87])
#loc259 = loc(fused[#loc88, #loc89, #loc90, #loc82])
#loc260 = loc(fused[#loc93, #loc94])
#loc261 = loc(fused[#loc97, #loc98])
#loc262 = loc(fused[#loc99, #loc100])
#loc263 = loc(fused[#loc101, #loc102, #loc103, #loc98])
#loc264 = loc(fused[#loc105, #loc106])
#loc265 = loc(fused[#loc107, #loc108])
#loc266 = loc(fused[#loc109, #loc110, #loc111, #loc106])
#loc267 = loc(fused[#loc112, #loc113])
#loc268 = loc(fused[#loc118, #loc119])
#loc269 = loc(fused[#loc120, #loc121])
#loc270 = loc(fused[#loc123, #loc122])
#loc271 = loc(fused[#loc124, #loc125])
#loc272 = loc(fused[#loc126, #loc127])
#loc273 = loc(fused[#loc128, #loc125])
#loc274 = loc(fused[#loc129, #loc130])
#loc275 = loc(fused[#loc131, #loc132])
#loc276 = loc(fused[#loc133, #loc134])
#loc277 = loc(fused[#loc138, #loc139])
#loc278 = loc(fused[#loc140, #loc141, #loc142, #loc134])
#loc279 = loc(fused[#loc145, #loc146])
#loc280 = loc(fused[#loc149, #loc150])
#loc281 = loc(fused[#loc151, #loc152])
#loc282 = loc(fused[#loc153, #loc150])
#loc283 = loc(fused[#loc154, #loc155])
#loc284 = loc(fused[#loc156, #loc157])
#loc285 = loc(fused[#loc158, #loc159, #loc160, #loc155])
#loc286 = loc(fused[#loc161, #loc162])
#loc287 = loc(fused[#loc168, #loc169])
#loc288 = loc(fused[#loc170, #loc171])
#loc289 = loc(fused[#loc173, #loc172])
#loc290 = loc(fused[#loc174, #loc175])
#loc291 = loc(fused[#loc176, #loc177])
#loc292 = loc(fused[#loc178, #loc179, #loc180, #loc175])
#loc293 = loc(fused[#loc184, #loc183])
#loc294 = loc(fused[#loc185, #loc186])
#loc295 = loc(fused[#loc187, #loc188])
#loc296 = loc(fused[#loc189, #loc186])
#loc297 = loc(fused[#loc190, #loc191])
#loc298 = loc(fused[#loc192, #loc193])
#loc299 = loc(fused[#loc197, #loc198])
#loc300 = loc(fused[#loc199, #loc200])
#loc301 = loc(fused[#loc202, #loc201])
#loc302 = loc(fused[#loc203, #loc204])
#loc303 = loc(fused[#loc205, #loc206])
#loc304 = loc(fused[#loc207, #loc204])
#loc305 = loc(fused[#loc209, #loc208])
#loc306 = loc(fused[#loc210, #loc211])
#loc307 = loc(fused[#loc212, #loc213])
#loc308 = loc(fused[#loc214, #loc211])
#loc309 = loc(fused[#loc215, #loc216])
#loc310 = loc(fused[#loc217, #loc218])
