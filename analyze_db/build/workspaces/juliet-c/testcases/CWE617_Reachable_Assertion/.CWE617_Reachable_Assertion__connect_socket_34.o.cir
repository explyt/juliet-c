!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_CWE617_Reachable_Assertion__connect_socket_34_unionType = !cir.record<union "CWE617_Reachable_Assertion__connect_socket_34_unionType" {!s32i, !s32i}>
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__connect_socket_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc148)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc149)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc150)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc151)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc152)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc153)
  cir.func private @close(!s32i) -> !s32i loc(#loc154)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc155)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc18)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"CWE617_Reachable_Assertion__connect_socket_34.c\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc18)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void CWE617_Reachable_Assertion__connect_socket_34_bad()\00" : !cir.array<!s8i x 57>> : !cir.array<!s8i x 57> {alignment = 1 : i64} loc(#loc18)
  cir.func no_proto @CWE617_Reachable_Assertion__connect_socket_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc157)
    %1 = cir.alloca !ty_CWE617_Reachable_Assertion__connect_socket_34_unionType, !cir.ptr<!ty_CWE617_Reachable_Assertion__connect_socket_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc158)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc26)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc161)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc162)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc163)
      %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc164)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc35)
      %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc35)
      cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc163)
      cir.scope {
        cir.do {
          cir.scope {
            %12 = cir.const #cir.int<2> : !s32i loc(#loc42)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc43)
            %14 = cir.const #cir.int<6> : !s32i loc(#loc44)
            %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc45)
            cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc167)
            cir.scope {
              %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc50)
              %55 = cir.const #cir.int<1> : !s32i loc(#loc51)
              %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc51)
              %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc169)
              cir.if %57 {
                cir.break loc(#loc53)
              } loc(#loc170)
            } loc(#loc168)
            %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc171)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc56)
            %18 = cir.const #cir.int<16> : !u64i loc(#loc172)
            cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc173)
            %19 = cir.const #cir.int<2> : !s32i loc(#loc61)
            %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc61)
            %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc62)
            cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc174)
            %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
            %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
            %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc64)
            %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc65)
            %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc66)
            cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc175)
            %27 = cir.const #cir.int<27015> : !s32i loc(#loc69)
            %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc69)
            %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc70)
            %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
            cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc176)
            cir.scope {
              %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc76)
              %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc178)
              %56 = cir.const #cir.int<16> : !u64i loc(#loc179)
              %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc179)
              %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc81)
              %59 = cir.const #cir.int<1> : !s32i loc(#loc82)
              %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc82)
              %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc180)
              cir.if %61 {
                cir.break loc(#loc84)
              } loc(#loc181)
            } loc(#loc177)
            %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc85)
            %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc86)
            %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc86)
            %34 = cir.const #cir.int<3> : !s32i loc(#loc87)
            %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc87)
            %36 = cir.const #cir.int<4> : !u64i loc(#loc87)
            %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc87)
            %38 = cir.const #cir.int<2> : !s32i loc(#loc87)
            %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc87)
            %40 = cir.binop(add, %37, %39) : !u64i loc(#loc87)
            %41 = cir.const #cir.int<1> : !s32i loc(#loc88)
            %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc88)
            %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc182)
            %44 = cir.const #cir.int<0> : !s32i loc(#loc89)
            %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc90)
            %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc90)
            cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc183)
            cir.scope {
              %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc95)
              %55 = cir.const #cir.int<1> : !s32i loc(#loc96)
              %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc96)
              %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc185)
              %58 = cir.ternary(%57, true {
                %59 = cir.const #true loc(#loc97)
                cir.yield %59 : !cir.bool loc(#loc97)
              }, false {
                %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc98)
                %60 = cir.const #cir.int<0> : !s32i loc(#loc99)
                %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc186)
                %62 = cir.ternary(%61, true {
                  %63 = cir.const #true loc(#loc97)
                  cir.yield %63 : !cir.bool loc(#loc97)
                }, false {
                  %63 = cir.const #false loc(#loc97)
                  cir.yield %63 : !cir.bool loc(#loc97)
                }) : (!cir.bool) -> !cir.bool loc(#loc97)
                cir.yield %62 : !cir.bool loc(#loc97)
              }) : (!cir.bool) -> !cir.bool loc(#loc97)
              cir.if %58 {
                cir.break loc(#loc101)
              } loc(#loc187)
            } loc(#loc184)
            %47 = cir.const #cir.int<0> : !s32i loc(#loc102)
            %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc102)
            %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc103)
            %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc104)
            %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc104)
            cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc188)
            %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc105)
            %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc106)
            cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc189)
          } loc(#loc166)
          cir.yield loc(#loc39)
        } while {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc109)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc109)
          cir.condition(%13) loc(#loc109)
        } loc(#loc165)
      } loc(#loc165)
      cir.scope {
        %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc112)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc113)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc113)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc191)
        cir.if %15 {
          %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc115)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc116)
        } loc(#loc192)
      } loc(#loc190)
    } loc(#loc160)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    %5 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE617_Reachable_Assertion__connect_socket_34_unionType> -> !cir.ptr<!s32i> loc(#loc118)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc195)
      %7 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE617_Reachable_Assertion__connect_socket_34_unionType> -> !cir.ptr<!s32i> loc(#loc124)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc123)
      cir.store %8, %6 : !s32i, !cir.ptr<!s32i> loc(#loc195)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc18)
      cir.scope {
        cir.scope {
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc18)
          %11 = cir.const #cir.int<5> : !s32i loc(#loc18)
          %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc18)
          cir.if %12 {
          } else {
            %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc18)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc18)
            %15 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc18)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc18)
            %17 = cir.const #cir.int<119> : !s32i loc(#loc18)
            %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc18)
            %19 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 57>> loc(#loc18)
            %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 57>>), !cir.ptr<!s8i> loc(#loc18)
            cir.call @__assert_fail(%14, %16, %18, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc18)
          } loc(#loc18)
        } loc(#loc18)
      } loc(#loc18)
    } loc(#loc194)
    cir.return loc(#loc20)
  } loc(#loc156)
  cir.func no_proto @CWE617_Reachable_Assertion__connect_socket_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc197)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc127)
    cir.return loc(#loc126)
  } loc(#loc196)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc129)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc199)
    %1 = cir.alloca !ty_CWE617_Reachable_Assertion__connect_socket_34_unionType, !cir.ptr<!ty_CWE617_Reachable_Assertion__connect_socket_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc200)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc136)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc137)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc139)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc140)
    %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc139)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc142)
    %8 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE617_Reachable_Assertion__connect_socket_34_unionType> -> !cir.ptr<!s32i> loc(#loc118)
    cir.store %7, %8 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    cir.scope {
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc205)
      %10 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE617_Reachable_Assertion__connect_socket_34_unionType> -> !cir.ptr<!s32i> loc(#loc124)
      %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc147)
      cir.store %11, %9 : !s32i, !cir.ptr<!s32i> loc(#loc205)
      %12 = cir.const #cir.int<4> : !u64i loc(#loc129)
      cir.scope {
        cir.scope {
          %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc129)
          %14 = cir.const #cir.int<5> : !s32i loc(#loc129)
          %15 = cir.cmp(gt, %13, %14) : !s32i, !cir.bool loc(#loc129)
          cir.if %15 {
          } else {
            %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc129)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc129)
            %18 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc129)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc129)
            %20 = cir.const #cir.int<140> : !s32i loc(#loc129)
            %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc129)
            %22 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc129)
            %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc129)
            cir.call @__assert_fail(%17, %19, %21, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc129)
          } loc(#loc129)
        } loc(#loc129)
      } loc(#loc129)
    } loc(#loc204)
    cir.return loc(#loc131)
  } loc(#loc198)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__connect_socket_34.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":85:49)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("/usr/include/assert.h":69:1)
#loc17 = loc("/usr/include/assert.h":71:43)
#loc18 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":119:9)
#loc19 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":53:1)
#loc20 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":121:1)
#loc21 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":55:5)
#loc22 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":55:9)
#loc23 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":56:5)
#loc24 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":56:61)
#loc25 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":58:13)
#loc26 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":58:12)
#loc27 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":58:5)
#loc28 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":59:5)
#loc29 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":114:5)
#loc30 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":64:9)
#loc31 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":64:13)
#loc32 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":65:9)
#loc33 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":65:28)
#loc34 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":66:9)
#loc35 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":66:32)
#loc36 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":67:9)
#loc37 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":67:41)
#loc38 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":68:9)
#loc39 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":103:17)
#loc40 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":69:9)
#loc41 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":102:9)
#loc42 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":78:36)
#loc43 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":78:45)
#loc44 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":78:58)
#loc45 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":78:29)
#loc46 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":78:13)
#loc47 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":78:69)
#loc48 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":79:13)
#loc49 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":82:13)
#loc50 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":79:17)
#loc51 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":79:34)
#loc52 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":80:13)
#loc53 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":81:17)
#loc54 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":83:20)
#loc55 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":83:21)
#loc56 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":83:30)
#loc57 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":83:33)
#loc58 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":83:47)
#loc59 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":83:13)
#loc60 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":83:48)
#loc61 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":84:34)
#loc62 = loc("/usr/include/netinet/in.h":249:5)
#loc63 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":84:13)
#loc64 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":85:39)
#loc65 = loc("/usr/include/netinet/in.h":251:20)
#loc66 = loc("/usr/include/netinet/in.h":33:15)
#loc67 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":85:13)
#loc68 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":85:59)
#loc69 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":86:38)
#loc70 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":86:32)
#loc71 = loc("/usr/include/netinet/in.h":250:15)
#loc72 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":86:13)
#loc73 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":86:46)
#loc74 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":87:13)
#loc75 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":90:13)
#loc76 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":87:25)
#loc77 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":87:58)
#loc78 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":87:59)
#loc79 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":87:68)
#loc80 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":87:82)
#loc81 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":87:17)
#loc82 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":87:88)
#loc83 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":88:13)
#loc84 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":89:17)
#loc85 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":93:31)
#loc86 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":93:46)
#loc87 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":93:59)
#loc88 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":93:77)
#loc89 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":93:80)
#loc90 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":93:26)
#loc91 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":93:13)
#loc92 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":93:81)
#loc93 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":94:13)
#loc94 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":97:13)
#loc95 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":94:17)
#loc96 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":94:31)
#loc97 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":94:44)
#loc98 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":94:47)
#loc99 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":94:61)
#loc100 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":95:13)
#loc101 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":96:17)
#loc102 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":99:39)
#loc103 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":99:25)
#loc104 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":99:13)
#loc105 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":101:25)
#loc106 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":101:20)
#loc107 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":101:13)
#loc108 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":101:36)
#loc109 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":103:16)
#loc110 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":104:9)
#loc111 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":107:9)
#loc112 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":104:13)
#loc113 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":104:30)
#loc114 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":105:9)
#loc115 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":106:26)
#loc116 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":106:13)
#loc117 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":115:26)
#loc118 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":47:9)
#loc119 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":115:5)
#loc120 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":116:5)
#loc121 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":120:5)
#loc122 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":117:9)
#loc123 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":117:28)
#loc124 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":48:9)
#loc125 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":144:1)
#loc126 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":147:1)
#loc127 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":146:5)
#loc128 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":146:13)
#loc129 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":140:9)
#loc130 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":128:1)
#loc131 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":142:1)
#loc132 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":130:5)
#loc133 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":130:9)
#loc134 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":131:5)
#loc135 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":131:61)
#loc136 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":133:13)
#loc137 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":133:12)
#loc138 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":133:5)
#loc139 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":135:12)
#loc140 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":135:25)
#loc141 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":135:5)
#loc142 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":136:26)
#loc143 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":136:5)
#loc144 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":137:5)
#loc145 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":141:5)
#loc146 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":138:9)
#loc147 = loc("CWE617_Reachable_Assertion__connect_socket_34.c":138:28)
#loc148 = loc(fused[#loc1, #loc2])
#loc149 = loc(fused[#loc3, #loc4])
#loc150 = loc(fused[#loc6, #loc7])
#loc151 = loc(fused[#loc8, #loc9])
#loc152 = loc(fused[#loc10, #loc11])
#loc153 = loc(fused[#loc12, #loc13])
#loc154 = loc(fused[#loc14, #loc15])
#loc155 = loc(fused[#loc16, #loc17])
#loc156 = loc(fused[#loc19, #loc20])
#loc157 = loc(fused[#loc21, #loc22])
#loc158 = loc(fused[#loc23, #loc24])
#loc159 = loc(fused[#loc27, #loc25])
#loc160 = loc(fused[#loc28, #loc29])
#loc161 = loc(fused[#loc30, #loc31])
#loc162 = loc(fused[#loc32, #loc33])
#loc163 = loc(fused[#loc34, #loc35])
#loc164 = loc(fused[#loc36, #loc37])
#loc165 = loc(fused[#loc38, #loc39])
#loc166 = loc(fused[#loc40, #loc41])
#loc167 = loc(fused[#loc46, #loc47])
#loc168 = loc(fused[#loc48, #loc49])
#loc169 = loc(fused[#loc50, #loc51])
#loc170 = loc(fused[#loc52, #loc49])
#loc171 = loc(fused[#loc54, #loc55])
#loc172 = loc(fused[#loc57, #loc58])
#loc173 = loc(fused[#loc59, #loc60])
#loc174 = loc(fused[#loc63, #loc61])
#loc175 = loc(fused[#loc67, #loc68])
#loc176 = loc(fused[#loc72, #loc73])
#loc177 = loc(fused[#loc74, #loc75])
#loc178 = loc(fused[#loc77, #loc78])
#loc179 = loc(fused[#loc79, #loc80])
#loc180 = loc(fused[#loc81, #loc82])
#loc181 = loc(fused[#loc83, #loc75])
#loc182 = loc(fused[#loc87, #loc88])
#loc183 = loc(fused[#loc91, #loc92])
#loc184 = loc(fused[#loc93, #loc94])
#loc185 = loc(fused[#loc95, #loc96])
#loc186 = loc(fused[#loc98, #loc99])
#loc187 = loc(fused[#loc100, #loc94])
#loc188 = loc(fused[#loc104, #loc102])
#loc189 = loc(fused[#loc107, #loc108])
#loc190 = loc(fused[#loc110, #loc111])
#loc191 = loc(fused[#loc112, #loc113])
#loc192 = loc(fused[#loc114, #loc111])
#loc193 = loc(fused[#loc119, #loc117])
#loc194 = loc(fused[#loc120, #loc121])
#loc195 = loc(fused[#loc122, #loc123])
#loc196 = loc(fused[#loc125, #loc126])
#loc197 = loc(fused[#loc127, #loc128])
#loc198 = loc(fused[#loc130, #loc131])
#loc199 = loc(fused[#loc132, #loc133])
#loc200 = loc(fused[#loc134, #loc135])
#loc201 = loc(fused[#loc138, #loc136])
#loc202 = loc(fused[#loc141, #loc140])
#loc203 = loc(fused[#loc143, #loc142])
#loc204 = loc(fused[#loc144, #loc145])
#loc205 = loc(fused[#loc146, #loc147])
