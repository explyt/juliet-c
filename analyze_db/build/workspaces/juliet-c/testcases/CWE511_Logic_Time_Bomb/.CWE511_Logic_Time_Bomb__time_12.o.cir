!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__time_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc79)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc80)
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc81)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc10)
  cir.func no_proto @CWE511_Logic_Time_Bomb__time_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["currentTime"] {alignment = 8 : i64} loc(#loc84)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["currentTime"] {alignment = 8 : i64} loc(#loc85)
    cir.br ^bb1 loc(#loc86)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc87)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc87)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc19)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %5 ^bb2, ^bb9 loc(#loc88)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc89)
  ^bb3:  // pred: ^bb2
    %6 = cir.call @time(%0) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc26)
    cir.br ^bb4 loc(#loc90)
  ^bb4:  // pred: ^bb3
    %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc29)
    %8 = cir.const #cir.int<1199163600> : !s32i loc(#loc30)
    %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc30)
    %10 = cir.cmp(gt, %7, %9) : !s64i, !cir.bool loc(#loc91)
    cir.brcond %10 ^bb5, ^bb6 loc(#loc92)
  ^bb5:  // pred: ^bb4
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc7)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc7)
    %13 = cir.call @unlink(%12) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc32)
    cir.br ^bb6 loc(#loc28)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc28)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc25)
  ^bb8:  // pred: ^bb7
    cir.br ^bb16 loc(#loc22)
  ^bb9:  // pred: ^bb1
    cir.br ^bb10 loc(#loc93)
  ^bb10:  // pred: ^bb9
    %14 = cir.call @time(%1) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc35)
    cir.br ^bb11 loc(#loc94)
  ^bb11:  // pred: ^bb10
    %15 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc38)
    %16 = cir.const #cir.int<1199163600> : !s32i loc(#loc39)
    %17 = cir.cast(integral, %16 : !s32i), !s64i loc(#loc39)
    %18 = cir.cmp(gt, %15, %17) : !s64i, !cir.bool loc(#loc95)
    cir.brcond %18 ^bb12, ^bb13 loc(#loc96)
  ^bb12:  // pred: ^bb11
    %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc10)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc10)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc41)
    cir.br ^bb13 loc(#loc37)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc37)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc34)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc18)
  ^bb16:  // 2 preds: ^bb8, ^bb15
    cir.br ^bb17 loc(#loc18)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc12)
  } loc(#loc83)
  cir.func no_proto @CWE511_Logic_Time_Bomb__time_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc98)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    cir.return loc(#loc43)
  } loc(#loc97)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["currentTime"] {alignment = 8 : i64} loc(#loc100)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["currentTime"] {alignment = 8 : i64} loc(#loc101)
    cir.br ^bb1 loc(#loc102)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc103)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc103)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc54)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc54)
    cir.brcond %5 ^bb2, ^bb9 loc(#loc104)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc105)
  ^bb3:  // pred: ^bb2
    %6 = cir.call @time(%0) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc61)
    cir.br ^bb4 loc(#loc106)
  ^bb4:  // pred: ^bb3
    %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc64)
    %8 = cir.const #cir.int<1199163600> : !s32i loc(#loc65)
    %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc65)
    %10 = cir.cmp(gt, %7, %9) : !s64i, !cir.bool loc(#loc107)
    cir.brcond %10 ^bb5, ^bb6 loc(#loc108)
  ^bb5:  // pred: ^bb4
    %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc67)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    cir.br ^bb6 loc(#loc63)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc63)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc60)
  ^bb8:  // pred: ^bb7
    cir.br ^bb16 loc(#loc57)
  ^bb9:  // pred: ^bb1
    cir.br ^bb10 loc(#loc109)
  ^bb10:  // pred: ^bb9
    %13 = cir.call @time(%1) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc71)
    cir.br ^bb11 loc(#loc110)
  ^bb11:  // pred: ^bb10
    %14 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc74)
    %15 = cir.const #cir.int<1199163600> : !s32i loc(#loc75)
    %16 = cir.cast(integral, %15 : !s32i), !s64i loc(#loc75)
    %17 = cir.cmp(gt, %14, %16) : !s64i, !cir.bool loc(#loc111)
    cir.brcond %17 ^bb12, ^bb13 loc(#loc112)
  ^bb12:  // pred: ^bb11
    %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc77)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    cir.br ^bb13 loc(#loc73)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc73)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc70)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc53)
  ^bb16:  // 2 preds: ^bb8, ^bb15
    cir.br ^bb17 loc(#loc53)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc47)
  } loc(#loc99)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__time_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/time.h":76:1)
#loc4 = loc("/usr/include/time.h":76:38)
#loc5 = loc("/usr/include/unistd.h":858:1)
#loc6 = loc("/usr/include/unistd.h":858:48)
#loc7 = loc("CWE511_Logic_Time_Bomb__time_12.c":41:24)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE511_Logic_Time_Bomb__time_12.c":53:27)
#loc11 = loc("CWE511_Logic_Time_Bomb__time_12.c":31:1)
#loc12 = loc("CWE511_Logic_Time_Bomb__time_12.c":57:1)
#loc13 = loc("CWE511_Logic_Time_Bomb__time_12.c":36:13)
#loc14 = loc("CWE511_Logic_Time_Bomb__time_12.c":36:20)
#loc15 = loc("CWE511_Logic_Time_Bomb__time_12.c":48:13)
#loc16 = loc("CWE511_Logic_Time_Bomb__time_12.c":48:20)
#loc17 = loc("CWE511_Logic_Time_Bomb__time_12.c":33:5)
#loc18 = loc("CWE511_Logic_Time_Bomb__time_12.c":56:5)
#loc19 = loc("CWE511_Logic_Time_Bomb__time_12.c":33:8)
#loc20 = loc("CWE511_Logic_Time_Bomb__time_12.c":33:33)
#loc21 = loc("CWE511_Logic_Time_Bomb__time_12.c":34:5)
#loc22 = loc("CWE511_Logic_Time_Bomb__time_12.c":44:5)
#loc23 = loc("CWE511_Logic_Time_Bomb__time_12.c":46:5)
#loc24 = loc("CWE511_Logic_Time_Bomb__time_12.c":35:9)
#loc25 = loc("CWE511_Logic_Time_Bomb__time_12.c":43:9)
#loc26 = loc("CWE511_Logic_Time_Bomb__time_12.c":38:13)
#loc27 = loc("CWE511_Logic_Time_Bomb__time_12.c":39:13)
#loc28 = loc("CWE511_Logic_Time_Bomb__time_12.c":42:13)
#loc29 = loc("CWE511_Logic_Time_Bomb__time_12.c":39:17)
#loc30 = loc("CWE511_Logic_Time_Bomb__time_12.c":39:31)
#loc31 = loc("CWE511_Logic_Time_Bomb__time_12.c":40:13)
#loc32 = loc("CWE511_Logic_Time_Bomb__time_12.c":41:17)
#loc33 = loc("CWE511_Logic_Time_Bomb__time_12.c":47:9)
#loc34 = loc("CWE511_Logic_Time_Bomb__time_12.c":55:9)
#loc35 = loc("CWE511_Logic_Time_Bomb__time_12.c":50:13)
#loc36 = loc("CWE511_Logic_Time_Bomb__time_12.c":51:13)
#loc37 = loc("CWE511_Logic_Time_Bomb__time_12.c":54:13)
#loc38 = loc("CWE511_Logic_Time_Bomb__time_12.c":51:17)
#loc39 = loc("CWE511_Logic_Time_Bomb__time_12.c":51:31)
#loc40 = loc("CWE511_Logic_Time_Bomb__time_12.c":52:13)
#loc41 = loc("CWE511_Logic_Time_Bomb__time_12.c":53:17)
#loc42 = loc("CWE511_Logic_Time_Bomb__time_12.c":92:1)
#loc43 = loc("CWE511_Logic_Time_Bomb__time_12.c":95:1)
#loc44 = loc("CWE511_Logic_Time_Bomb__time_12.c":94:5)
#loc45 = loc("CWE511_Logic_Time_Bomb__time_12.c":94:11)
#loc46 = loc("CWE511_Logic_Time_Bomb__time_12.c":64:1)
#loc47 = loc("CWE511_Logic_Time_Bomb__time_12.c":90:1)
#loc48 = loc("CWE511_Logic_Time_Bomb__time_12.c":69:13)
#loc49 = loc("CWE511_Logic_Time_Bomb__time_12.c":69:20)
#loc50 = loc("CWE511_Logic_Time_Bomb__time_12.c":81:13)
#loc51 = loc("CWE511_Logic_Time_Bomb__time_12.c":81:20)
#loc52 = loc("CWE511_Logic_Time_Bomb__time_12.c":66:5)
#loc53 = loc("CWE511_Logic_Time_Bomb__time_12.c":89:5)
#loc54 = loc("CWE511_Logic_Time_Bomb__time_12.c":66:8)
#loc55 = loc("CWE511_Logic_Time_Bomb__time_12.c":66:33)
#loc56 = loc("CWE511_Logic_Time_Bomb__time_12.c":67:5)
#loc57 = loc("CWE511_Logic_Time_Bomb__time_12.c":77:5)
#loc58 = loc("CWE511_Logic_Time_Bomb__time_12.c":79:5)
#loc59 = loc("CWE511_Logic_Time_Bomb__time_12.c":68:9)
#loc60 = loc("CWE511_Logic_Time_Bomb__time_12.c":76:9)
#loc61 = loc("CWE511_Logic_Time_Bomb__time_12.c":71:13)
#loc62 = loc("CWE511_Logic_Time_Bomb__time_12.c":72:13)
#loc63 = loc("CWE511_Logic_Time_Bomb__time_12.c":75:13)
#loc64 = loc("CWE511_Logic_Time_Bomb__time_12.c":72:17)
#loc65 = loc("CWE511_Logic_Time_Bomb__time_12.c":72:31)
#loc66 = loc("CWE511_Logic_Time_Bomb__time_12.c":73:13)
#loc67 = loc("CWE511_Logic_Time_Bomb__time_12.c":74:27)
#loc68 = loc("CWE511_Logic_Time_Bomb__time_12.c":74:17)
#loc69 = loc("CWE511_Logic_Time_Bomb__time_12.c":80:9)
#loc70 = loc("CWE511_Logic_Time_Bomb__time_12.c":88:9)
#loc71 = loc("CWE511_Logic_Time_Bomb__time_12.c":83:13)
#loc72 = loc("CWE511_Logic_Time_Bomb__time_12.c":84:13)
#loc73 = loc("CWE511_Logic_Time_Bomb__time_12.c":87:13)
#loc74 = loc("CWE511_Logic_Time_Bomb__time_12.c":84:17)
#loc75 = loc("CWE511_Logic_Time_Bomb__time_12.c":84:31)
#loc76 = loc("CWE511_Logic_Time_Bomb__time_12.c":85:13)
#loc77 = loc("CWE511_Logic_Time_Bomb__time_12.c":86:27)
#loc78 = loc("CWE511_Logic_Time_Bomb__time_12.c":86:17)
#loc79 = loc(fused[#loc1, #loc2])
#loc80 = loc(fused[#loc3, #loc4])
#loc81 = loc(fused[#loc5, #loc6])
#loc82 = loc(fused[#loc8, #loc9])
#loc83 = loc(fused[#loc11, #loc12])
#loc84 = loc(fused[#loc13, #loc14])
#loc85 = loc(fused[#loc15, #loc16])
#loc86 = loc(fused[#loc17, #loc18])
#loc87 = loc(fused[#loc19, #loc20])
#loc88 = loc(fused[#loc21, #loc22, #loc23, #loc18])
#loc89 = loc(fused[#loc24, #loc25])
#loc90 = loc(fused[#loc27, #loc28])
#loc91 = loc(fused[#loc29, #loc30])
#loc92 = loc(fused[#loc31, #loc28])
#loc93 = loc(fused[#loc33, #loc34])
#loc94 = loc(fused[#loc36, #loc37])
#loc95 = loc(fused[#loc38, #loc39])
#loc96 = loc(fused[#loc40, #loc37])
#loc97 = loc(fused[#loc42, #loc43])
#loc98 = loc(fused[#loc44, #loc45])
#loc99 = loc(fused[#loc46, #loc47])
#loc100 = loc(fused[#loc48, #loc49])
#loc101 = loc(fused[#loc50, #loc51])
#loc102 = loc(fused[#loc52, #loc53])
#loc103 = loc(fused[#loc54, #loc55])
#loc104 = loc(fused[#loc56, #loc57, #loc58, #loc53])
#loc105 = loc(fused[#loc59, #loc60])
#loc106 = loc(fused[#loc62, #loc63])
#loc107 = loc(fused[#loc64, #loc65])
#loc108 = loc(fused[#loc66, #loc63])
#loc109 = loc(fused[#loc69, #loc70])
#loc110 = loc(fused[#loc72, #loc73])
#loc111 = loc(fused[#loc74, #loc75])
#loc112 = loc(fused[#loc76, #loc73])
