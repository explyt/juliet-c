!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc18 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":35:16)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":61:16)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":95:16)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc187)
  cir.func private @printIntLine(!s32i) loc(#loc188)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_multiply_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc190)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc191)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    cir.br ^bb1 loc(#loc193)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc15)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc16)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc194)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc195)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc18)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc18)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc18)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc18)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc18)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc18)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc18)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc18)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc18)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc18)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc18)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc18)
    cir.br ^bb5(%21 : !u32i) loc(#loc18)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc18)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc18)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc18)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc18)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc18)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc18)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc18)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc18)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc18)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc18)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc18)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc18)
    cir.br ^bb5(%37 : !u32i) loc(#loc18)
  ^bb5(%38: !u32i loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":35:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc18)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc18)
    cir.store %39, %1 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    cir.br ^bb7 loc(#loc14)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc14)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc197)
  ^bb9:  // pred: ^bb8
    %40 = cir.const #cir.int<5> : !s32i loc(#loc22)
    %41 = cir.const #cir.int<5> : !s32i loc(#loc23)
    %42 = cir.cmp(eq, %40, %41) : !s32i, !cir.bool loc(#loc198)
    cir.brcond %42 ^bb10, ^bb15 loc(#loc199)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc200)
  ^bb11:  // pred: ^bb10
    %43 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %44 = cir.const #cir.int<0> : !s32i loc(#loc28)
    %45 = cir.cmp(gt, %43, %44) : !s32i, !cir.bool loc(#loc201)
    cir.brcond %45 ^bb12, ^bb13 loc(#loc202)
  ^bb12:  // pred: ^bb11
    %46 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    %47 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %48 = cir.binop(mul, %46, %47) nsw : !s32i loc(#loc30)
    cir.store %48, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    %49 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    cir.call @printIntLine(%49) : (!s32i) -> () loc(#loc32)
    cir.br ^bb13 loc(#loc26)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc26)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc21)
  ^bb15:  // 2 preds: ^bb9, ^bb14
    cir.br ^bb16 loc(#loc21)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc6)
  } loc(#loc189)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_multiply_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc204)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc205)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc206)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc34)
  } loc(#loc203)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc208)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc46)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc210)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc211)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc53)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    cir.br ^bb1 loc(#loc213)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc57)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc58)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc214)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc215)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc60)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc60)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc60)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc60)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc60)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc60)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc60)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc60)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc60)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc60)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc60)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc60)
    cir.br ^bb5(%21 : !u32i) loc(#loc60)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc60)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc60)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc60)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc60)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc60)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc60)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc60)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc60)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc60)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc60)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc60)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc60)
    cir.br ^bb5(%37 : !u32i) loc(#loc60)
  ^bb5(%38: !u32i loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":61:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc60)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc60)
    cir.store %39, %1 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    cir.br ^bb7 loc(#loc56)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc56)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc217)
  ^bb9:  // pred: ^bb8
    %40 = cir.const #cir.int<5> : !s32i loc(#loc64)
    %41 = cir.const #cir.int<5> : !s32i loc(#loc65)
    %42 = cir.cmp(ne, %40, %41) : !s32i, !cir.bool loc(#loc218)
    cir.brcond %42 ^bb10, ^bb11 loc(#loc219)
  ^bb10:  // pred: ^bb9
    %43 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc45)
    %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    cir.br ^bb21 loc(#loc67)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc220)
  ^bb12:  // pred: ^bb11
    %45 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc72)
    %46 = cir.const #cir.int<0> : !s32i loc(#loc73)
    %47 = cir.cmp(gt, %45, %46) : !s32i, !cir.bool loc(#loc221)
    cir.brcond %47 ^bb13, ^bb19 loc(#loc222)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc223)
  ^bb14:  // pred: ^bb13
    %48 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc77)
    %49 = cir.const #cir.int<2147483647> : !s32i loc(#loc78)
    %50 = cir.const #cir.int<2> : !s32i loc(#loc79)
    %51 = cir.binop(div, %49, %50) : !s32i loc(#loc224)
    %52 = cir.cmp(lt, %48, %51) : !s32i, !cir.bool loc(#loc225)
    cir.brcond %52 ^bb15, ^bb16 loc(#loc226)
  ^bb15:  // pred: ^bb14
    %53 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc84)
    %54 = cir.const #cir.int<2> : !s32i loc(#loc50)
    %55 = cir.binop(mul, %53, %54) nsw : !s32i loc(#loc84)
    cir.store %55, %0 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    %56 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    cir.call @printIntLine(%56) : (!s32i) -> () loc(#loc86)
    cir.br ^bb17 loc(#loc82)
  ^bb16:  // pred: ^bb14
    %57 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc46)
    %58 = cir.cast(array_to_ptrdecay, %57 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%58) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    cir.br ^bb17 loc(#loc76)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc76)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc71)
  ^bb19:  // 2 preds: ^bb12, ^bb18
    cir.br ^bb20 loc(#loc71)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc63)
  ^bb21:  // 2 preds: ^bb10, ^bb20
    cir.br ^bb22 loc(#loc63)
  ^bb22:  // pred: ^bb21
    cir.return loc(#loc48)
  } loc(#loc209)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc228)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc229)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc94)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc230)
    cir.br ^bb1 loc(#loc231)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc98)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc99)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc232)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc233)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc101)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc101)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc101)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc101)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc101)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc101)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc101)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc101)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc101)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc101)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc101)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc101)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc101)
    cir.br ^bb5(%21 : !u32i) loc(#loc101)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc101)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc101)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc101)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc101)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc101)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc101)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc101)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc101)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc101)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc101)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc101)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc101)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc101)
    cir.br ^bb5(%37 : !u32i) loc(#loc101)
  ^bb5(%38: !u32i loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":95:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc101)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc101)
    cir.store %39, %1 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    cir.br ^bb7 loc(#loc97)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc97)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc235)
  ^bb9:  // pred: ^bb8
    %40 = cir.const #cir.int<5> : !s32i loc(#loc105)
    %41 = cir.const #cir.int<5> : !s32i loc(#loc106)
    %42 = cir.cmp(eq, %40, %41) : !s32i, !cir.bool loc(#loc236)
    cir.brcond %42 ^bb10, ^bb20 loc(#loc237)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc238)
  ^bb11:  // pred: ^bb10
    %43 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc110)
    %44 = cir.const #cir.int<0> : !s32i loc(#loc111)
    %45 = cir.cmp(gt, %43, %44) : !s32i, !cir.bool loc(#loc239)
    cir.brcond %45 ^bb12, ^bb18 loc(#loc240)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc241)
  ^bb13:  // pred: ^bb12
    %46 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc115)
    %47 = cir.const #cir.int<2147483647> : !s32i loc(#loc116)
    %48 = cir.const #cir.int<2> : !s32i loc(#loc117)
    %49 = cir.binop(div, %47, %48) : !s32i loc(#loc242)
    %50 = cir.cmp(lt, %46, %49) : !s32i, !cir.bool loc(#loc243)
    cir.brcond %50 ^bb14, ^bb15 loc(#loc244)
  ^bb14:  // pred: ^bb13
    %51 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc122)
    %52 = cir.const #cir.int<2> : !s32i loc(#loc91)
    %53 = cir.binop(mul, %51, %52) nsw : !s32i loc(#loc122)
    cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    %54 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
    cir.call @printIntLine(%54) : (!s32i) -> () loc(#loc124)
    cir.br ^bb16 loc(#loc120)
  ^bb15:  // pred: ^bb13
    %55 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc125)
    %56 = cir.cast(array_to_ptrdecay, %55 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc125)
    cir.call @printLine(%56) : (!cir.ptr<!s8i>) -> () loc(#loc126)
    cir.br ^bb16 loc(#loc114)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc114)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc109)
  ^bb18:  // 2 preds: ^bb11, ^bb17
    cir.br ^bb19 loc(#loc109)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc104)
  ^bb20:  // 2 preds: ^bb9, ^bb19
    cir.br ^bb21 loc(#loc104)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc89)
  } loc(#loc227)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc246)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc247)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc133)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc248)
    cir.br ^bb1 loc(#loc249)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc137)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc138)
    %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc250)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc251)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc142)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc142)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc143)
    cir.br ^bb4 loc(#loc140)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc144)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc252)
    cir.br ^bb4 loc(#loc136)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc136)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc253)
  ^bb6:  // pred: ^bb5
    %9 = cir.const #cir.int<5> : !s32i loc(#loc148)
    %10 = cir.const #cir.int<5> : !s32i loc(#loc149)
    %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc254)
    cir.brcond %11 ^bb7, ^bb12 loc(#loc255)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc256)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc153)
    %13 = cir.const #cir.int<0> : !s32i loc(#loc154)
    %14 = cir.cmp(gt, %12, %13) : !s32i, !cir.bool loc(#loc257)
    cir.brcond %14 ^bb9, ^bb10 loc(#loc258)
  ^bb9:  // pred: ^bb8
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc156)
    %16 = cir.const #cir.int<2> : !s32i loc(#loc130)
    %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc156)
    cir.store %17, %0 : !s32i, !cir.ptr<!s32i> loc(#loc246)
    %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc158)
    cir.br ^bb10 loc(#loc152)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc152)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc147)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc147)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc128)
  } loc(#loc245)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc260)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc261)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc165)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc262)
    cir.br ^bb1 loc(#loc263)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc169)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc170)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc264)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc265)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2> : !s32i loc(#loc172)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc266)
    cir.br ^bb3 loc(#loc168)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc168)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc267)
  ^bb5:  // pred: ^bb4
    %7 = cir.const #cir.int<5> : !s32i loc(#loc176)
    %8 = cir.const #cir.int<5> : !s32i loc(#loc177)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc268)
    cir.brcond %9 ^bb6, ^bb11 loc(#loc269)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc270)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc181)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc182)
    %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc271)
    cir.brcond %12 ^bb8, ^bb9 loc(#loc272)
  ^bb8:  // pred: ^bb7
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc184)
    %14 = cir.const #cir.int<2> : !s32i loc(#loc162)
    %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc184)
    cir.store %15, %0 : !s32i, !cir.ptr<!s32i> loc(#loc260)
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc185)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc186)
    cir.br ^bb9 loc(#loc180)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc180)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc175)
  ^bb11:  // 2 preds: ^bb5, ^bb10
    cir.br ^bb12 loc(#loc175)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc160)
  } loc(#loc259)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_06.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":27:1)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":46:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":42:13)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":42:33)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":29:5)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":29:9)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":31:12)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":31:5)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":32:5)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":36:5)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":32:8)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":32:27)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":33:5)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":35:9)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":37:5)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":45:5)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":37:8)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":37:27)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":38:5)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":39:9)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":44:9)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":39:12)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":39:19)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":40:9)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":42:26)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":43:26)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":43:13)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":164:1)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":170:1)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":166:5)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":166:14)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":167:5)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":167:14)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":168:5)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":168:14)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":169:5)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":169:14)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":66:19)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":80:27)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":53:1)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":84:1)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":75:17)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":75:37)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":55:5)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":55:9)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":57:12)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":57:5)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":58:5)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":62:5)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":58:8)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":58:27)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":59:5)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":61:9)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":63:5)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":83:5)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":63:8)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":63:27)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":64:5)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":67:5)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":69:5)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":66:9)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":70:9)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":82:9)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":70:12)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":70:19)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":71:9)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":73:13)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":81:13)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":73:17)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":73:25)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":73:33)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":73:34)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":74:13)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":77:13)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":79:13)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":75:30)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":76:30)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":76:17)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":80:17)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":87:1)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":113:1)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":104:17)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":104:37)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":89:5)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":89:9)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":91:12)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":91:5)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":92:5)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":96:5)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":92:8)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":92:27)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":93:5)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":95:9)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":97:5)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":112:5)
#loc105 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":97:8)
#loc106 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":97:27)
#loc107 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":98:5)
#loc108 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":99:9)
#loc109 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":111:9)
#loc110 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":99:12)
#loc111 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":99:19)
#loc112 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":100:9)
#loc113 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":102:13)
#loc114 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":110:13)
#loc115 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":102:17)
#loc116 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":102:25)
#loc117 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":102:33)
#loc118 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":102:34)
#loc119 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":103:13)
#loc120 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":106:13)
#loc121 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":108:13)
#loc122 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":104:30)
#loc123 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":105:30)
#loc124 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":105:17)
#loc125 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":109:27)
#loc126 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":109:17)
#loc127 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":116:1)
#loc128 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":140:1)
#loc129 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":136:13)
#loc130 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":136:33)
#loc131 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":118:5)
#loc132 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":118:9)
#loc133 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":120:12)
#loc134 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":120:5)
#loc135 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":121:5)
#loc136 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":130:5)
#loc137 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":121:8)
#loc138 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":121:27)
#loc139 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":122:5)
#loc140 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":125:5)
#loc141 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":127:5)
#loc142 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":124:19)
#loc143 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":124:9)
#loc144 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":129:16)
#loc145 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":129:9)
#loc146 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":131:5)
#loc147 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":139:5)
#loc148 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":131:8)
#loc149 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":131:27)
#loc150 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":132:5)
#loc151 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":133:9)
#loc152 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":138:9)
#loc153 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":133:12)
#loc154 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":133:19)
#loc155 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":134:9)
#loc156 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":136:26)
#loc157 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":137:26)
#loc158 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":137:13)
#loc159 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":143:1)
#loc160 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":162:1)
#loc161 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":158:13)
#loc162 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":158:33)
#loc163 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":145:5)
#loc164 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":145:9)
#loc165 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":147:12)
#loc166 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":147:5)
#loc167 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":148:5)
#loc168 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":152:5)
#loc169 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":148:8)
#loc170 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":148:27)
#loc171 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":149:5)
#loc172 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":151:16)
#loc173 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":151:9)
#loc174 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":153:5)
#loc175 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":161:5)
#loc176 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":153:8)
#loc177 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":153:27)
#loc178 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":154:5)
#loc179 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":155:9)
#loc180 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":160:9)
#loc181 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":155:12)
#loc182 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":155:19)
#loc183 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":156:9)
#loc184 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":158:26)
#loc185 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":159:26)
#loc186 = loc("CWE190_Integer_Overflow__int_rand_multiply_06.c":159:13)
#loc187 = loc(fused[#loc1, #loc2])
#loc188 = loc(fused[#loc3, #loc4])
#loc189 = loc(fused[#loc5, #loc6])
#loc190 = loc(fused[#loc7, #loc8])
#loc191 = loc(fused[#loc9, #loc10])
#loc192 = loc(fused[#loc12, #loc11])
#loc193 = loc(fused[#loc13, #loc14])
#loc194 = loc(fused[#loc15, #loc16])
#loc195 = loc(fused[#loc17, #loc14])
#loc196 = loc(fused[#loc19, #loc18])
#loc197 = loc(fused[#loc20, #loc21])
#loc198 = loc(fused[#loc22, #loc23])
#loc199 = loc(fused[#loc24, #loc21])
#loc200 = loc(fused[#loc25, #loc26])
#loc201 = loc(fused[#loc27, #loc28])
#loc202 = loc(fused[#loc29, #loc26])
#loc203 = loc(fused[#loc33, #loc34])
#loc204 = loc(fused[#loc35, #loc36])
#loc205 = loc(fused[#loc37, #loc38])
#loc206 = loc(fused[#loc39, #loc40])
#loc207 = loc(fused[#loc41, #loc42])
#loc208 = loc(fused[#loc43, #loc44])
#loc209 = loc(fused[#loc47, #loc48])
#loc210 = loc(fused[#loc49, #loc50])
#loc211 = loc(fused[#loc51, #loc52])
#loc212 = loc(fused[#loc54, #loc53])
#loc213 = loc(fused[#loc55, #loc56])
#loc214 = loc(fused[#loc57, #loc58])
#loc215 = loc(fused[#loc59, #loc56])
#loc216 = loc(fused[#loc61, #loc60])
#loc217 = loc(fused[#loc62, #loc63])
#loc218 = loc(fused[#loc64, #loc65])
#loc219 = loc(fused[#loc66, #loc67, #loc68, #loc63])
#loc220 = loc(fused[#loc70, #loc71])
#loc221 = loc(fused[#loc72, #loc73])
#loc222 = loc(fused[#loc74, #loc71])
#loc223 = loc(fused[#loc75, #loc76])
#loc224 = loc(fused[#loc78, #loc79])
#loc225 = loc(fused[#loc77, #loc80])
#loc226 = loc(fused[#loc81, #loc82, #loc83, #loc76])
#loc227 = loc(fused[#loc88, #loc89])
#loc228 = loc(fused[#loc90, #loc91])
#loc229 = loc(fused[#loc92, #loc93])
#loc230 = loc(fused[#loc95, #loc94])
#loc231 = loc(fused[#loc96, #loc97])
#loc232 = loc(fused[#loc98, #loc99])
#loc233 = loc(fused[#loc100, #loc97])
#loc234 = loc(fused[#loc102, #loc101])
#loc235 = loc(fused[#loc103, #loc104])
#loc236 = loc(fused[#loc105, #loc106])
#loc237 = loc(fused[#loc107, #loc104])
#loc238 = loc(fused[#loc108, #loc109])
#loc239 = loc(fused[#loc110, #loc111])
#loc240 = loc(fused[#loc112, #loc109])
#loc241 = loc(fused[#loc113, #loc114])
#loc242 = loc(fused[#loc116, #loc117])
#loc243 = loc(fused[#loc115, #loc118])
#loc244 = loc(fused[#loc119, #loc120, #loc121, #loc114])
#loc245 = loc(fused[#loc127, #loc128])
#loc246 = loc(fused[#loc129, #loc130])
#loc247 = loc(fused[#loc131, #loc132])
#loc248 = loc(fused[#loc134, #loc133])
#loc249 = loc(fused[#loc135, #loc136])
#loc250 = loc(fused[#loc137, #loc138])
#loc251 = loc(fused[#loc139, #loc140, #loc141, #loc136])
#loc252 = loc(fused[#loc145, #loc144])
#loc253 = loc(fused[#loc146, #loc147])
#loc254 = loc(fused[#loc148, #loc149])
#loc255 = loc(fused[#loc150, #loc147])
#loc256 = loc(fused[#loc151, #loc152])
#loc257 = loc(fused[#loc153, #loc154])
#loc258 = loc(fused[#loc155, #loc152])
#loc259 = loc(fused[#loc159, #loc160])
#loc260 = loc(fused[#loc161, #loc162])
#loc261 = loc(fused[#loc163, #loc164])
#loc262 = loc(fused[#loc166, #loc165])
#loc263 = loc(fused[#loc167, #loc168])
#loc264 = loc(fused[#loc169, #loc170])
#loc265 = loc(fused[#loc171, #loc168])
#loc266 = loc(fused[#loc173, #loc172])
#loc267 = loc(fused[#loc174, #loc175])
#loc268 = loc(fused[#loc176, #loc177])
#loc269 = loc(fused[#loc178, #loc175])
#loc270 = loc(fused[#loc179, #loc180])
#loc271 = loc(fused[#loc181, #loc182])
#loc272 = loc(fused[#loc183, #loc180])
