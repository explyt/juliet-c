!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":21:21)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":21:27)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":56:25)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":56:31)
#loc134 = loc(fused[#loc7, #loc8])
#loc161 = loc(fused[#loc74, #loc75])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc131)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc132)
  cir.func internal private @badSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc135)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc136)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc134)
    cir.store %arg0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc13)
    cir.br ^bb1 loc(#loc137)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc135)
    cir.store %3, %0 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc135)
    cir.br ^bb2 loc(#loc138)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc139)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<0> : !s32i loc(#loc20)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc20)
    cir.store %5, %1 : !u64i, !cir.ptr<!u64i> loc(#loc140)
    cir.br ^bb4 loc(#loc139)
  ^bb4:  // 2 preds: ^bb3, ^bb8
    %6 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc22)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc23)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc23)
    %9 = cir.cmp(lt, %6, %8) : !u64i, !cir.bool loc(#loc141)
    cir.brcond %9 ^bb5, ^bb9 loc(#loc24)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc142)
  ^bb6:  // pred: ^bb5
    %10 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc26)
    %11 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc27)
    %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !u64i), !cir.ptr<!s32i> loc(#loc27)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %14 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc28)
    %15 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc29)
    %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !u64i), !cir.ptr<!s32i> loc(#loc30)
    cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc143)
    cir.br ^bb7 loc(#loc19)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc19)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc32)
    %18 = cir.unary(inc, %17) : !u64i, !u64i loc(#loc33)
    cir.store %18, %1 : !u64i, !cir.ptr<!u64i> loc(#loc144)
    cir.br ^bb4 loc(#loc139)
  ^bb9:  // pred: ^bb4
    cir.br ^bb10 loc(#loc19)
  ^bb10:  // pred: ^bb9
    %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc34)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc35)
    %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc36)
    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc37)
    %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc38)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc38)
    cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc39)
    cir.br ^bb11 loc(#loc17)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc15)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc6)
  } loc(#loc133)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc145)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc146)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc148)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc149)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>> loc(#loc49)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>> loc(#loc149)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc50)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc150)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc52)
    %5 = cir.const #cir.int<50> : !s32i loc(#loc53)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc53)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc151)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc152)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc52)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc153)
    cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc154)
    cir.br ^bb1 loc(#loc155)
  ^bb1:  // pred: ^bb0
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc61)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc61)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !cir.bool loc(#loc156)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc157)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc63)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc65)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc63)
    cir.br ^bb3 loc(#loc59)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc59)
  ^bb4:  // pred: ^bb3
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>> loc(#loc66)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc67)
    cir.call %18(%19) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!s32i>) -> () loc(#loc66)
    cir.return loc(#loc45)
  } loc(#loc147)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc159)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc70)
    cir.return loc(#loc69)
  } loc(#loc158)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc74, #loc75])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc162)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc163)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc161)
    cir.store %arg0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc80)
    cir.br ^bb1 loc(#loc164)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc162)
    cir.store %3, %0 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc162)
    cir.br ^bb2 loc(#loc165)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc166)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<0> : !s32i loc(#loc87)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc87)
    cir.store %5, %1 : !u64i, !cir.ptr<!u64i> loc(#loc167)
    cir.br ^bb4 loc(#loc166)
  ^bb4:  // 2 preds: ^bb3, ^bb8
    %6 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc89)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc90)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc90)
    %9 = cir.cmp(lt, %6, %8) : !u64i, !cir.bool loc(#loc168)
    cir.brcond %9 ^bb5, ^bb9 loc(#loc91)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc169)
  ^bb6:  // pred: ^bb5
    %10 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc93)
    %11 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc94)
    %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !u64i), !cir.ptr<!s32i> loc(#loc94)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    %14 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
    %15 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc96)
    %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !u64i), !cir.ptr<!s32i> loc(#loc97)
    cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc170)
    cir.br ^bb7 loc(#loc86)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc86)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc99)
    %18 = cir.unary(inc, %17) : !u64i, !u64i loc(#loc100)
    cir.store %18, %1 : !u64i, !cir.ptr<!u64i> loc(#loc171)
    cir.br ^bb4 loc(#loc166)
  ^bb9:  // pred: ^bb4
    cir.br ^bb10 loc(#loc86)
  ^bb10:  // pred: ^bb9
    %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc101)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc102)
    %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc103)
    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc104)
    %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc105)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc105)
    cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc106)
    cir.br ^bb11 loc(#loc84)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc82)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc73)
  } loc(#loc160)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc173)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc174)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>> loc(#loc112)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>> loc(#loc174)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc113)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc175)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc115)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc116)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc116)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc176)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc177)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc115)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc178)
    cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc179)
    cir.br ^bb1 loc(#loc180)
  ^bb1:  // pred: ^bb0
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc123)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc124)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc124)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !cir.bool loc(#loc181)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc182)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc126)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc127)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc128)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc126)
    cir.br ^bb3 loc(#loc122)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc122)
  ^bb4:  // pred: ^bb3
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>> loc(#loc129)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc130)
    cir.call %18(%19) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!s32i>) -> () loc(#loc129)
    cir.return loc(#loc108)
  } loc(#loc172)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":36:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":24:9)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":24:29)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":26:13)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":26:20)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":22:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":23:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":35:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":25:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":34:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":28:13)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":31:13)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":28:22)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":28:18)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":28:25)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":28:29)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":28:27)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":29:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":30:34)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":30:27)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":30:17)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":30:22)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":30:23)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":30:35)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":28:35)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":28:34)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":32:26)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":32:31)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":32:32)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":32:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":33:18)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":33:13)
#loc40 = loc("/usr/include/stdlib.h":672:1)
#loc41 = loc("/usr/include/stdlib.h":672:45)
#loc42 = loc("/usr/include/stdlib.h":756:1)
#loc43 = loc("/usr/include/stdlib.h":756:70)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":38:1)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":49:1)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":40:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":40:11)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":42:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":42:31)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":43:12)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":43:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":45:19)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":45:26)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":45:29)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":45:39)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":45:40)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":45:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":46:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":46:33)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":46:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":46:17)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":46:23)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":46:24)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":46:30)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":46:29)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":48:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":48:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":84:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":87:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":86:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":86:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":56:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":71:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":59:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":59:29)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":61:13)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":61:20)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":57:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":58:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":70:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":60:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":69:9)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":63:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":66:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":63:22)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":63:18)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":63:25)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":63:29)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":63:27)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":64:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":65:34)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":65:27)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":65:17)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":65:22)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":65:23)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":65:35)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":63:35)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":63:34)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":67:26)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":67:31)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":67:32)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":67:13)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":68:18)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":68:13)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":73:1)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":82:1)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":75:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":75:11)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":76:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":76:31)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":77:12)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":77:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":79:19)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":79:26)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":79:30)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":79:40)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":79:41)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":79:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":80:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":80:33)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":80:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":80:17)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":80:23)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":80:24)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":80:30)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":80:29)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":81:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c":81:13)
#loc131 = loc(fused[#loc1, #loc2])
#loc132 = loc(fused[#loc3, #loc4])
#loc133 = loc(fused[#loc5, #loc6])
#loc135 = loc(fused[#loc9, #loc10])
#loc136 = loc(fused[#loc11, #loc12])
#loc137 = loc(fused[#loc14, #loc15])
#loc138 = loc(fused[#loc16, #loc17])
#loc139 = loc(fused[#loc18, #loc19])
#loc140 = loc(fused[#loc21, #loc20])
#loc141 = loc(fused[#loc22, #loc23])
#loc142 = loc(fused[#loc25, #loc19])
#loc143 = loc(fused[#loc28, #loc31])
#loc144 = loc(fused[#loc33, #loc32])
#loc145 = loc(fused[#loc40, #loc41])
#loc146 = loc(fused[#loc42, #loc43])
#loc147 = loc(fused[#loc44, #loc45])
#loc148 = loc(fused[#loc46, #loc47])
#loc149 = loc(fused[#loc48, #loc49])
#loc150 = loc(fused[#loc51, #loc50])
#loc151 = loc(fused[#loc54, #loc55])
#loc152 = loc(fused[#loc53, #loc55])
#loc153 = loc(fused[#loc52, #loc56])
#loc154 = loc(fused[#loc57, #loc56])
#loc155 = loc(fused[#loc58, #loc59])
#loc156 = loc(fused[#loc60, #loc61])
#loc157 = loc(fused[#loc62, #loc59])
#loc158 = loc(fused[#loc68, #loc69])
#loc159 = loc(fused[#loc70, #loc71])
#loc160 = loc(fused[#loc72, #loc73])
#loc162 = loc(fused[#loc76, #loc77])
#loc163 = loc(fused[#loc78, #loc79])
#loc164 = loc(fused[#loc81, #loc82])
#loc165 = loc(fused[#loc83, #loc84])
#loc166 = loc(fused[#loc85, #loc86])
#loc167 = loc(fused[#loc88, #loc87])
#loc168 = loc(fused[#loc89, #loc90])
#loc169 = loc(fused[#loc92, #loc86])
#loc170 = loc(fused[#loc95, #loc98])
#loc171 = loc(fused[#loc100, #loc99])
#loc172 = loc(fused[#loc107, #loc108])
#loc173 = loc(fused[#loc109, #loc110])
#loc174 = loc(fused[#loc111, #loc112])
#loc175 = loc(fused[#loc114, #loc113])
#loc176 = loc(fused[#loc117, #loc118])
#loc177 = loc(fused[#loc116, #loc118])
#loc178 = loc(fused[#loc115, #loc119])
#loc179 = loc(fused[#loc120, #loc119])
#loc180 = loc(fused[#loc121, #loc122])
#loc181 = loc(fused[#loc123, #loc124])
#loc182 = loc(fused[#loc125, #loc122])
