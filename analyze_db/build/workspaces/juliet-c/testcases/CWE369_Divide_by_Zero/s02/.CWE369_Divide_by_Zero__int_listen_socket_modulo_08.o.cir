!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc512)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc513)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc514)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc515)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc516)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc517)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc518)
  cir.func private @close(!s32i) -> !s32i loc(#loc519)
  cir.func private @printIntLine(!s32i) loc(#loc520)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_modulo_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc522)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc24)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc523)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc525)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc28)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc28)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc528)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc529)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc530)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc531)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc532)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc38)
          %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc38)
          cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc530)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc40)
          %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc40)
          cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc531)
          cir.scope {
            cir.do {
              cir.scope {
                %15 = cir.const #cir.int<2> : !s32i loc(#loc47)
                %16 = cir.const #cir.int<1> : !s32i loc(#loc48)
                %17 = cir.const #cir.int<6> : !s32i loc(#loc49)
                %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc50)
                cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc535)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc55)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc56)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc56)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc537)
                  cir.if %63 {
                    cir.break loc(#loc58)
                  } loc(#loc538)
                } loc(#loc536)
                %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc539)
                %20 = cir.const #cir.int<0> : !s32i loc(#loc61)
                %21 = cir.const #cir.int<16> : !u64i loc(#loc540)
                cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc541)
                %22 = cir.const #cir.int<2> : !s32i loc(#loc66)
                %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc66)
                %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
                cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc542)
                %25 = cir.const #cir.int<0> : !s32i loc(#loc69)
                %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc69)
                %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc70)
                %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc71)
                cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc543)
                %29 = cir.const #cir.int<27015> : !s32i loc(#loc73)
                %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc73)
                %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc74)
                %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc544)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc80)
                  %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc546)
                  %62 = cir.const #cir.int<16> : !u64i loc(#loc547)
                  %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc547)
                  %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc85)
                  %65 = cir.const #cir.int<1> : !s32i loc(#loc86)
                  %66 = cir.unary(minus, %65) nsw : !s32i, !s32i loc(#loc86)
                  %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc548)
                  cir.if %67 {
                    cir.break loc(#loc88)
                  } loc(#loc549)
                } loc(#loc545)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc91)
                  %61 = cir.const #cir.int<5> : !s32i loc(#loc92)
                  %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc93)
                  %63 = cir.const #cir.int<1> : !s32i loc(#loc94)
                  %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc94)
                  %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc551)
                  cir.if %65 {
                    cir.break loc(#loc96)
                  } loc(#loc552)
                } loc(#loc550)
                %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc97)
                %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc98)
                %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc99)
                %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc100)
                cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc553)
                cir.scope {
                  %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc106)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc106)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc555)
                  cir.if %63 {
                    cir.break loc(#loc108)
                  } loc(#loc556)
                } loc(#loc554)
                %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc109)
                %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc110)
                %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc110)
                %40 = cir.const #cir.int<3> : !s32i loc(#loc111)
                %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc111)
                %42 = cir.const #cir.int<4> : !u64i loc(#loc111)
                %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc111)
                %44 = cir.const #cir.int<2> : !s32i loc(#loc111)
                %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc111)
                %46 = cir.binop(add, %43, %45) : !u64i loc(#loc111)
                %47 = cir.const #cir.int<1> : !s32i loc(#loc112)
                %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc112)
                %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc557)
                %50 = cir.const #cir.int<0> : !s32i loc(#loc113)
                %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc114)
                %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc114)
                cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc558)
                cir.scope {
                  %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc119)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc120)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc120)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc560)
                  %64 = cir.ternary(%63, true {
                    %65 = cir.const #true loc(#loc121)
                    cir.yield %65 : !cir.bool loc(#loc121)
                  }, false {
                    %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc122)
                    %66 = cir.const #cir.int<0> : !s32i loc(#loc123)
                    %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc561)
                    %68 = cir.ternary(%67, true {
                      %69 = cir.const #true loc(#loc121)
                      cir.yield %69 : !cir.bool loc(#loc121)
                    }, false {
                      %69 = cir.const #false loc(#loc121)
                      cir.yield %69 : !cir.bool loc(#loc121)
                    }) : (!cir.bool) -> !cir.bool loc(#loc121)
                    cir.yield %68 : !cir.bool loc(#loc121)
                  }) : (!cir.bool) -> !cir.bool loc(#loc121)
                  cir.if %64 {
                    cir.break loc(#loc125)
                  } loc(#loc562)
                } loc(#loc559)
                %53 = cir.const #cir.int<0> : !s32i loc(#loc126)
                %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc126)
                %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc127)
                %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc128)
                %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc128)
                cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc563)
                %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc129)
                %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc130)
                cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc564)
              } loc(#loc534)
              cir.yield loc(#loc44)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc133)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc133)
              cir.condition(%16) loc(#loc133)
            } loc(#loc533)
          } loc(#loc533)
          cir.scope {
            %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc136)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc137)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc137)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc566)
            cir.if %18 {
              %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc139)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc140)
            } loc(#loc567)
          } loc(#loc565)
          cir.scope {
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc143)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc144)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc144)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc569)
            cir.if %18 {
              %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc146)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc147)
            } loc(#loc570)
          } loc(#loc568)
        } loc(#loc527)
      } loc(#loc526)
    } loc(#loc524)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc572)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc150)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc150)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc153)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc154)
        %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc574)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc155)
      } loc(#loc573)
    } loc(#loc571)
    cir.return loc(#loc20)
  } loc(#loc521)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_modulo_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc576)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc158)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc577)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc160)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc578)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc162)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc579)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc164)
    cir.return loc(#loc157)
  } loc(#loc575)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc167)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc168)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc581)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc581)
    cir.return %2 : !s32i loc(#loc581)
  } loc(#loc580)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc582)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc172)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc173)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc584)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc178)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc179)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc585)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc587)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc183)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc183)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc590)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc591)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc592)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc593)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc594)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc193)
          %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc193)
          cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc592)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc195)
          %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc195)
          cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc593)
          cir.scope {
            cir.do {
              cir.scope {
                %15 = cir.const #cir.int<2> : !s32i loc(#loc202)
                %16 = cir.const #cir.int<1> : !s32i loc(#loc203)
                %17 = cir.const #cir.int<6> : !s32i loc(#loc204)
                %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc205)
                cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc597)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc210)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc211)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc211)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc599)
                  cir.if %63 {
                    cir.break loc(#loc213)
                  } loc(#loc600)
                } loc(#loc598)
                %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc601)
                %20 = cir.const #cir.int<0> : !s32i loc(#loc216)
                %21 = cir.const #cir.int<16> : !u64i loc(#loc602)
                cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc603)
                %22 = cir.const #cir.int<2> : !s32i loc(#loc221)
                %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc221)
                %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
                cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc604)
                %25 = cir.const #cir.int<0> : !s32i loc(#loc223)
                %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc223)
                %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc70)
                %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc71)
                cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc605)
                %29 = cir.const #cir.int<27015> : !s32i loc(#loc225)
                %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc225)
                %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc226)
                %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc606)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc231)
                  %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc608)
                  %62 = cir.const #cir.int<16> : !u64i loc(#loc609)
                  %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc609)
                  %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc236)
                  %65 = cir.const #cir.int<1> : !s32i loc(#loc237)
                  %66 = cir.unary(minus, %65) nsw : !s32i, !s32i loc(#loc237)
                  %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc610)
                  cir.if %67 {
                    cir.break loc(#loc239)
                  } loc(#loc611)
                } loc(#loc607)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc242)
                  %61 = cir.const #cir.int<5> : !s32i loc(#loc243)
                  %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc244)
                  %63 = cir.const #cir.int<1> : !s32i loc(#loc245)
                  %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc245)
                  %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc613)
                  cir.if %65 {
                    cir.break loc(#loc247)
                  } loc(#loc614)
                } loc(#loc612)
                %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc248)
                %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc249)
                %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc250)
                %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc251)
                cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc615)
                cir.scope {
                  %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc256)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc257)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc257)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc617)
                  cir.if %63 {
                    cir.break loc(#loc259)
                  } loc(#loc618)
                } loc(#loc616)
                %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc260)
                %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc261)
                %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc261)
                %40 = cir.const #cir.int<3> : !s32i loc(#loc262)
                %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc262)
                %42 = cir.const #cir.int<4> : !u64i loc(#loc262)
                %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc262)
                %44 = cir.const #cir.int<2> : !s32i loc(#loc262)
                %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc262)
                %46 = cir.binop(add, %43, %45) : !u64i loc(#loc262)
                %47 = cir.const #cir.int<1> : !s32i loc(#loc263)
                %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc263)
                %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc619)
                %50 = cir.const #cir.int<0> : !s32i loc(#loc264)
                %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc265)
                %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc265)
                cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc620)
                cir.scope {
                  %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc270)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc271)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc271)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc622)
                  %64 = cir.ternary(%63, true {
                    %65 = cir.const #true loc(#loc272)
                    cir.yield %65 : !cir.bool loc(#loc272)
                  }, false {
                    %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc273)
                    %66 = cir.const #cir.int<0> : !s32i loc(#loc274)
                    %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc623)
                    %68 = cir.ternary(%67, true {
                      %69 = cir.const #true loc(#loc272)
                      cir.yield %69 : !cir.bool loc(#loc272)
                    }, false {
                      %69 = cir.const #false loc(#loc272)
                      cir.yield %69 : !cir.bool loc(#loc272)
                    }) : (!cir.bool) -> !cir.bool loc(#loc272)
                    cir.yield %68 : !cir.bool loc(#loc272)
                  }) : (!cir.bool) -> !cir.bool loc(#loc272)
                  cir.if %64 {
                    cir.break loc(#loc276)
                  } loc(#loc624)
                } loc(#loc621)
                %53 = cir.const #cir.int<0> : !s32i loc(#loc277)
                %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc277)
                %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc278)
                %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc279)
                %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc279)
                cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc625)
                %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc280)
                %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc281)
                cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc626)
              } loc(#loc596)
              cir.yield loc(#loc199)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc284)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc284)
              cir.condition(%16) loc(#loc284)
            } loc(#loc595)
          } loc(#loc595)
          cir.scope {
            %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc287)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc288)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc288)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc628)
            cir.if %18 {
              %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc290)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc291)
            } loc(#loc629)
          } loc(#loc627)
          cir.scope {
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc294)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc295)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc295)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc631)
            cir.if %18 {
              %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc297)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc298)
            } loc(#loc632)
          } loc(#loc630)
        } loc(#loc589)
      } loc(#loc588)
    } loc(#loc586)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc634)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc301)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc301)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc172)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc172)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc306)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc309)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc310)
          %8 = cir.cmp(ne, %6, %7) : !s32i, !cir.bool loc(#loc637)
          cir.if %8 {
            %9 = cir.const #cir.int<100> : !s32i loc(#loc314)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc315)
            %11 = cir.binop(rem, %9, %10) : !s32i loc(#loc639)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc316)
          } else {
            %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc173)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc173)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc317)
          } loc(#loc638)
        } loc(#loc636)
      } loc(#loc635)
    } loc(#loc633)
    cir.return loc(#loc175)
  } loc(#loc583)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc319)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc320)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc641)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc641)
    cir.return %2 : !s32i loc(#loc641)
  } loc(#loc640)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc643)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc326)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc327)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc644)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc646)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc331)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc331)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc649)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc650)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc651)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc652)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc653)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc341)
          %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc341)
          cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc651)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc343)
          %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc343)
          cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc652)
          cir.scope {
            cir.do {
              cir.scope {
                %15 = cir.const #cir.int<2> : !s32i loc(#loc350)
                %16 = cir.const #cir.int<1> : !s32i loc(#loc351)
                %17 = cir.const #cir.int<6> : !s32i loc(#loc352)
                %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc353)
                cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc656)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc358)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc359)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc359)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc658)
                  cir.if %63 {
                    cir.break loc(#loc361)
                  } loc(#loc659)
                } loc(#loc657)
                %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc660)
                %20 = cir.const #cir.int<0> : !s32i loc(#loc364)
                %21 = cir.const #cir.int<16> : !u64i loc(#loc661)
                cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc662)
                %22 = cir.const #cir.int<2> : !s32i loc(#loc369)
                %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc369)
                %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
                cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc663)
                %25 = cir.const #cir.int<0> : !s32i loc(#loc371)
                %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc371)
                %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc70)
                %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc71)
                cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc664)
                %29 = cir.const #cir.int<27015> : !s32i loc(#loc373)
                %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc373)
                %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc374)
                %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc665)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc379)
                  %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc667)
                  %62 = cir.const #cir.int<16> : !u64i loc(#loc668)
                  %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc668)
                  %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc384)
                  %65 = cir.const #cir.int<1> : !s32i loc(#loc385)
                  %66 = cir.unary(minus, %65) nsw : !s32i, !s32i loc(#loc385)
                  %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc669)
                  cir.if %67 {
                    cir.break loc(#loc387)
                  } loc(#loc670)
                } loc(#loc666)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc390)
                  %61 = cir.const #cir.int<5> : !s32i loc(#loc391)
                  %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc392)
                  %63 = cir.const #cir.int<1> : !s32i loc(#loc393)
                  %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc393)
                  %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc672)
                  cir.if %65 {
                    cir.break loc(#loc395)
                  } loc(#loc673)
                } loc(#loc671)
                %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc396)
                %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc397)
                %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc398)
                %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc399)
                cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc674)
                cir.scope {
                  %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc404)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc405)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc405)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc676)
                  cir.if %63 {
                    cir.break loc(#loc407)
                  } loc(#loc677)
                } loc(#loc675)
                %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc408)
                %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc409)
                %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc409)
                %40 = cir.const #cir.int<3> : !s32i loc(#loc410)
                %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc410)
                %42 = cir.const #cir.int<4> : !u64i loc(#loc410)
                %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc410)
                %44 = cir.const #cir.int<2> : !s32i loc(#loc410)
                %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc410)
                %46 = cir.binop(add, %43, %45) : !u64i loc(#loc410)
                %47 = cir.const #cir.int<1> : !s32i loc(#loc411)
                %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc411)
                %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc678)
                %50 = cir.const #cir.int<0> : !s32i loc(#loc412)
                %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc413)
                %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc413)
                cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc679)
                cir.scope {
                  %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc418)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc419)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc419)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc681)
                  %64 = cir.ternary(%63, true {
                    %65 = cir.const #true loc(#loc420)
                    cir.yield %65 : !cir.bool loc(#loc420)
                  }, false {
                    %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc421)
                    %66 = cir.const #cir.int<0> : !s32i loc(#loc422)
                    %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc682)
                    %68 = cir.ternary(%67, true {
                      %69 = cir.const #true loc(#loc420)
                      cir.yield %69 : !cir.bool loc(#loc420)
                    }, false {
                      %69 = cir.const #false loc(#loc420)
                      cir.yield %69 : !cir.bool loc(#loc420)
                    }) : (!cir.bool) -> !cir.bool loc(#loc420)
                    cir.yield %68 : !cir.bool loc(#loc420)
                  }) : (!cir.bool) -> !cir.bool loc(#loc420)
                  cir.if %64 {
                    cir.break loc(#loc424)
                  } loc(#loc683)
                } loc(#loc680)
                %53 = cir.const #cir.int<0> : !s32i loc(#loc425)
                %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc425)
                %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc426)
                %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc427)
                %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc427)
                cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc684)
                %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc428)
                %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc429)
                cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc685)
              } loc(#loc655)
              cir.yield loc(#loc347)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc432)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc432)
              cir.condition(%16) loc(#loc432)
            } loc(#loc654)
          } loc(#loc654)
          cir.scope {
            %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc435)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc436)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc436)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc687)
            cir.if %18 {
              %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc438)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc439)
            } loc(#loc688)
          } loc(#loc686)
          cir.scope {
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc442)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc443)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc443)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc690)
            cir.if %18 {
              %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc445)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc446)
            } loc(#loc691)
          } loc(#loc689)
        } loc(#loc648)
      } loc(#loc647)
    } loc(#loc645)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc693)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc449)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc449)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc454)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc455)
          %8 = cir.cmp(ne, %6, %7) : !s32i, !cir.bool loc(#loc696)
          cir.if %8 {
            %9 = cir.const #cir.int<100> : !s32i loc(#loc459)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc460)
            %11 = cir.binop(rem, %9, %10) : !s32i loc(#loc698)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc461)
          } else {
            %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc462)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc462)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc463)
          } loc(#loc697)
        } loc(#loc695)
      } loc(#loc694)
    } loc(#loc692)
    cir.return loc(#loc323)
  } loc(#loc642)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc700)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc468)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc469)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc701)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc703)
      %4 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc473)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc473)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc478)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc478)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc479)
      } else {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc480)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc705)
      } loc(#loc704)
    } loc(#loc702)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc707)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc484)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc484)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc487)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc488)
        %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc709)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc489)
      } loc(#loc708)
    } loc(#loc706)
    cir.return loc(#loc465)
  } loc(#loc699)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc711)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc494)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc495)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc712)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc714)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc499)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc499)
      cir.if %5 {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc502)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc716)
      } loc(#loc715)
    } loc(#loc713)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc718)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc506)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc506)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc509)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc510)
        %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc720)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc511)
      } loc(#loc719)
    } loc(#loc717)
    cir.return loc(#loc491)
  } loc(#loc710)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc19 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":57:1)
#loc20 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":139:1)
#loc21 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":59:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":59:9)
#loc23 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":61:13)
#loc24 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":61:12)
#loc25 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":61:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":62:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":133:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":62:8)
#loc29 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":62:26)
#loc30 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":63:5)
#loc31 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":64:9)
#loc32 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":132:9)
#loc33 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":69:13)
#loc34 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":69:17)
#loc35 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":70:13)
#loc36 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":70:32)
#loc37 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":71:13)
#loc38 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":71:35)
#loc39 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":72:13)
#loc40 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":72:35)
#loc41 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":73:13)
#loc42 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":73:45)
#loc43 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":74:13)
#loc44 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":117:21)
#loc45 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":75:13)
#loc46 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":116:13)
#loc47 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":84:39)
#loc48 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":84:48)
#loc49 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":84:61)
#loc50 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":84:32)
#loc51 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":84:17)
#loc52 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":84:72)
#loc53 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":85:17)
#loc54 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":88:17)
#loc55 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":85:21)
#loc56 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":85:37)
#loc57 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":86:17)
#loc58 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":87:21)
#loc59 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":89:24)
#loc60 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":89:25)
#loc61 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":89:34)
#loc62 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":89:37)
#loc63 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":89:51)
#loc64 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":89:17)
#loc65 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":89:52)
#loc66 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":90:38)
#loc67 = loc("/usr/include/netinet/in.h":249:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":90:17)
#loc69 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":91:43)
#loc70 = loc("/usr/include/netinet/in.h":251:20)
#loc71 = loc("/usr/include/netinet/in.h":33:15)
#loc72 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":91:17)
#loc73 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":92:42)
#loc74 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":92:36)
#loc75 = loc("/usr/include/netinet/in.h":250:15)
#loc76 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":92:17)
#loc77 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":92:50)
#loc78 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":93:17)
#loc79 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":96:17)
#loc80 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":93:26)
#loc81 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":93:58)
#loc82 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":93:59)
#loc83 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":93:68)
#loc84 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":93:82)
#loc85 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":93:21)
#loc86 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":93:88)
#loc87 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":94:17)
#loc88 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":95:21)
#loc89 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":97:17)
#loc90 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":100:17)
#loc91 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":97:28)
#loc92 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":97:42)
#loc93 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":97:21)
#loc94 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":97:61)
#loc95 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":98:17)
#loc96 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":99:21)
#loc97 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":101:39)
#loc98 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":101:53)
#loc99 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":101:59)
#loc100 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":101:32)
#loc101 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":101:17)
#loc102 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":101:63)
#loc103 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":102:17)
#loc104 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":105:17)
#loc105 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":102:21)
#loc106 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":102:37)
#loc107 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":103:17)
#loc108 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":104:21)
#loc109 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":107:35)
#loc110 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":107:49)
#loc111 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":107:62)
#loc112 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":107:80)
#loc113 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":107:83)
#loc114 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":107:30)
#loc115 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":107:17)
#loc116 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":107:84)
#loc117 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":108:17)
#loc118 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":111:17)
#loc119 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":108:21)
#loc120 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":108:35)
#loc121 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":108:48)
#loc122 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":108:51)
#loc123 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":108:65)
#loc124 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":109:17)
#loc125 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":110:21)
#loc126 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":113:43)
#loc127 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":113:29)
#loc128 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":113:17)
#loc129 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":115:29)
#loc130 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":115:24)
#loc131 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":115:17)
#loc132 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":115:40)
#loc133 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":117:20)
#loc134 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":118:13)
#loc135 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":121:13)
#loc136 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":118:17)
#loc137 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":118:33)
#loc138 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":119:13)
#loc139 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":120:30)
#loc140 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":120:17)
#loc141 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":122:13)
#loc142 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":125:13)
#loc143 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":122:17)
#loc144 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":122:33)
#loc145 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":123:13)
#loc146 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":124:30)
#loc147 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":124:17)
#loc148 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":134:5)
#loc149 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":138:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":134:8)
#loc151 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":134:26)
#loc152 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":135:5)
#loc153 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":137:22)
#loc154 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":137:28)
#loc155 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":137:9)
#loc156 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":375:1)
#loc157 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":381:1)
#loc158 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":377:5)
#loc159 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":377:14)
#loc160 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":378:5)
#loc161 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":378:14)
#loc162 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":379:5)
#loc163 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":379:14)
#loc164 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":380:5)
#loc165 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":380:14)
#loc166 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":45:1)
#loc167 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":48:1)
#loc168 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":47:12)
#loc169 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":47:5)
#loc170 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc171 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc172 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":226:19)
#loc173 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":237:23)
#loc174 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":146:1)
#loc175 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":240:1)
#loc176 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":148:5)
#loc177 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":148:9)
#loc178 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":150:13)
#loc179 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":150:12)
#loc180 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":150:5)
#loc181 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":151:5)
#loc182 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":222:5)
#loc183 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":151:8)
#loc184 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":151:26)
#loc185 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":152:5)
#loc186 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":153:9)
#loc187 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":221:9)
#loc188 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":158:13)
#loc189 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":158:17)
#loc190 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":159:13)
#loc191 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":159:32)
#loc192 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":160:13)
#loc193 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":160:35)
#loc194 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":161:13)
#loc195 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":161:35)
#loc196 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":162:13)
#loc197 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":162:45)
#loc198 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":163:13)
#loc199 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":206:21)
#loc200 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":164:13)
#loc201 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":205:13)
#loc202 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":173:39)
#loc203 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":173:48)
#loc204 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":173:61)
#loc205 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":173:32)
#loc206 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":173:17)
#loc207 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":173:72)
#loc208 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":174:17)
#loc209 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":177:17)
#loc210 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":174:21)
#loc211 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":174:37)
#loc212 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":175:17)
#loc213 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":176:21)
#loc214 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":178:24)
#loc215 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":178:25)
#loc216 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":178:34)
#loc217 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":178:37)
#loc218 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":178:51)
#loc219 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":178:17)
#loc220 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":178:52)
#loc221 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":179:38)
#loc222 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":179:17)
#loc223 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":180:43)
#loc224 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":180:17)
#loc225 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":181:42)
#loc226 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":181:36)
#loc227 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":181:17)
#loc228 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":181:50)
#loc229 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":182:17)
#loc230 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":185:17)
#loc231 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":182:26)
#loc232 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":182:58)
#loc233 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":182:59)
#loc234 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":182:68)
#loc235 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":182:82)
#loc236 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":182:21)
#loc237 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":182:88)
#loc238 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":183:17)
#loc239 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":184:21)
#loc240 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":186:17)
#loc241 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":189:17)
#loc242 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":186:28)
#loc243 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":186:42)
#loc244 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":186:21)
#loc245 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":186:61)
#loc246 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":187:17)
#loc247 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":188:21)
#loc248 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":190:39)
#loc249 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":190:53)
#loc250 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":190:59)
#loc251 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":190:32)
#loc252 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":190:17)
#loc253 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":190:63)
#loc254 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":191:17)
#loc255 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":194:17)
#loc256 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":191:21)
#loc257 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":191:37)
#loc258 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":192:17)
#loc259 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":193:21)
#loc260 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":196:35)
#loc261 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":196:49)
#loc262 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":196:62)
#loc263 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":196:80)
#loc264 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":196:83)
#loc265 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":196:30)
#loc266 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":196:17)
#loc267 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":196:84)
#loc268 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":197:17)
#loc269 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":200:17)
#loc270 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":197:21)
#loc271 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":197:35)
#loc272 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":197:48)
#loc273 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":197:51)
#loc274 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":197:65)
#loc275 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":198:17)
#loc276 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":199:21)
#loc277 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":202:43)
#loc278 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":202:29)
#loc279 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":202:17)
#loc280 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":204:29)
#loc281 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":204:24)
#loc282 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":204:17)
#loc283 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":204:40)
#loc284 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":206:20)
#loc285 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":207:13)
#loc286 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":210:13)
#loc287 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":207:17)
#loc288 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":207:33)
#loc289 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":208:13)
#loc290 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":209:30)
#loc291 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":209:17)
#loc292 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":211:13)
#loc293 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":214:13)
#loc294 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":211:17)
#loc295 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":211:33)
#loc296 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":212:13)
#loc297 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":213:30)
#loc298 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":213:17)
#loc299 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":223:5)
#loc300 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":239:5)
#loc301 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":223:8)
#loc302 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":223:27)
#loc303 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":224:5)
#loc304 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":227:5)
#loc305 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":229:5)
#loc306 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":226:9)
#loc307 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":231:9)
#loc308 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":238:9)
#loc309 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":231:13)
#loc310 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":231:21)
#loc311 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":232:9)
#loc312 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":234:9)
#loc313 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":236:9)
#loc314 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":233:26)
#loc315 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":233:32)
#loc316 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":233:13)
#loc317 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":237:13)
#loc318 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":50:1)
#loc319 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":53:1)
#loc320 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":52:12)
#loc321 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":52:5)
#loc322 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":243:1)
#loc323 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":332:1)
#loc324 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":245:5)
#loc325 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":245:9)
#loc326 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":247:13)
#loc327 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":247:12)
#loc328 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":247:5)
#loc329 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":248:5)
#loc330 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":319:5)
#loc331 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":248:8)
#loc332 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":248:26)
#loc333 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":249:5)
#loc334 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":250:9)
#loc335 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":318:9)
#loc336 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":255:13)
#loc337 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":255:17)
#loc338 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":256:13)
#loc339 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":256:32)
#loc340 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":257:13)
#loc341 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":257:35)
#loc342 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":258:13)
#loc343 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":258:35)
#loc344 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":259:13)
#loc345 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":259:45)
#loc346 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":260:13)
#loc347 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":303:21)
#loc348 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":261:13)
#loc349 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":302:13)
#loc350 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":270:39)
#loc351 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":270:48)
#loc352 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":270:61)
#loc353 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":270:32)
#loc354 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":270:17)
#loc355 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":270:72)
#loc356 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":271:17)
#loc357 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":274:17)
#loc358 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":271:21)
#loc359 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":271:37)
#loc360 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":272:17)
#loc361 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":273:21)
#loc362 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":275:24)
#loc363 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":275:25)
#loc364 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":275:34)
#loc365 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":275:37)
#loc366 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":275:51)
#loc367 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":275:17)
#loc368 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":275:52)
#loc369 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":276:38)
#loc370 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":276:17)
#loc371 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":277:43)
#loc372 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":277:17)
#loc373 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":278:42)
#loc374 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":278:36)
#loc375 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":278:17)
#loc376 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":278:50)
#loc377 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":279:17)
#loc378 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":282:17)
#loc379 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":279:26)
#loc380 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":279:58)
#loc381 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":279:59)
#loc382 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":279:68)
#loc383 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":279:82)
#loc384 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":279:21)
#loc385 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":279:88)
#loc386 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":280:17)
#loc387 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":281:21)
#loc388 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":283:17)
#loc389 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":286:17)
#loc390 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":283:28)
#loc391 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":283:42)
#loc392 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":283:21)
#loc393 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":283:61)
#loc394 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":284:17)
#loc395 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":285:21)
#loc396 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":287:39)
#loc397 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":287:53)
#loc398 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":287:59)
#loc399 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":287:32)
#loc400 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":287:17)
#loc401 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":287:63)
#loc402 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":288:17)
#loc403 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":291:17)
#loc404 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":288:21)
#loc405 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":288:37)
#loc406 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":289:17)
#loc407 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":290:21)
#loc408 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":293:35)
#loc409 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":293:49)
#loc410 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":293:62)
#loc411 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":293:80)
#loc412 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":293:83)
#loc413 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":293:30)
#loc414 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":293:17)
#loc415 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":293:84)
#loc416 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":294:17)
#loc417 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":297:17)
#loc418 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":294:21)
#loc419 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":294:35)
#loc420 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":294:48)
#loc421 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":294:51)
#loc422 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":294:65)
#loc423 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":295:17)
#loc424 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":296:21)
#loc425 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":299:43)
#loc426 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":299:29)
#loc427 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":299:17)
#loc428 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":301:29)
#loc429 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":301:24)
#loc430 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":301:17)
#loc431 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":301:40)
#loc432 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":303:20)
#loc433 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":304:13)
#loc434 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":307:13)
#loc435 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":304:17)
#loc436 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":304:33)
#loc437 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":305:13)
#loc438 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":306:30)
#loc439 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":306:17)
#loc440 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":308:13)
#loc441 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":311:13)
#loc442 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":308:17)
#loc443 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":308:33)
#loc444 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":309:13)
#loc445 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":310:30)
#loc446 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":310:17)
#loc447 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":320:5)
#loc448 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":331:5)
#loc449 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":320:8)
#loc450 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":320:26)
#loc451 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":321:5)
#loc452 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":323:9)
#loc453 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":330:9)
#loc454 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":323:13)
#loc455 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":323:21)
#loc456 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":324:9)
#loc457 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":326:9)
#loc458 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":328:9)
#loc459 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":325:26)
#loc460 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":325:32)
#loc461 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":325:13)
#loc462 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":329:23)
#loc463 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":329:13)
#loc464 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":335:1)
#loc465 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":355:1)
#loc466 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":337:5)
#loc467 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":337:9)
#loc468 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":339:13)
#loc469 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":339:12)
#loc470 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":339:5)
#loc471 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":340:5)
#loc472 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":349:5)
#loc473 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":340:8)
#loc474 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":340:27)
#loc475 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":341:5)
#loc476 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":344:5)
#loc477 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":346:5)
#loc478 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":343:19)
#loc479 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":343:9)
#loc480 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":348:16)
#loc481 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":348:9)
#loc482 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":350:5)
#loc483 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":354:5)
#loc484 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":350:8)
#loc485 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":350:26)
#loc486 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":351:5)
#loc487 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":353:22)
#loc488 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":353:28)
#loc489 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":353:9)
#loc490 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":358:1)
#loc491 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":373:1)
#loc492 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":360:5)
#loc493 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":360:9)
#loc494 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":362:13)
#loc495 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":362:12)
#loc496 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":362:5)
#loc497 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":363:5)
#loc498 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":367:5)
#loc499 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":363:8)
#loc500 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":363:26)
#loc501 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":364:5)
#loc502 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":366:16)
#loc503 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":366:9)
#loc504 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":368:5)
#loc505 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":372:5)
#loc506 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":368:8)
#loc507 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":368:26)
#loc508 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":369:5)
#loc509 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":371:22)
#loc510 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":371:28)
#loc511 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_08.c":371:9)
#loc512 = loc(fused[#loc1, #loc2])
#loc513 = loc(fused[#loc3, #loc4])
#loc514 = loc(fused[#loc5, #loc6])
#loc515 = loc(fused[#loc7, #loc8])
#loc516 = loc(fused[#loc9, #loc10])
#loc517 = loc(fused[#loc11, #loc12])
#loc518 = loc(fused[#loc13, #loc14])
#loc519 = loc(fused[#loc15, #loc16])
#loc520 = loc(fused[#loc17, #loc18])
#loc521 = loc(fused[#loc19, #loc20])
#loc522 = loc(fused[#loc21, #loc22])
#loc523 = loc(fused[#loc25, #loc23])
#loc524 = loc(fused[#loc26, #loc27])
#loc525 = loc(fused[#loc28, #loc29])
#loc526 = loc(fused[#loc30, #loc27])
#loc527 = loc(fused[#loc31, #loc32])
#loc528 = loc(fused[#loc33, #loc34])
#loc529 = loc(fused[#loc35, #loc36])
#loc530 = loc(fused[#loc37, #loc38])
#loc531 = loc(fused[#loc39, #loc40])
#loc532 = loc(fused[#loc41, #loc42])
#loc533 = loc(fused[#loc43, #loc44])
#loc534 = loc(fused[#loc45, #loc46])
#loc535 = loc(fused[#loc51, #loc52])
#loc536 = loc(fused[#loc53, #loc54])
#loc537 = loc(fused[#loc55, #loc56])
#loc538 = loc(fused[#loc57, #loc54])
#loc539 = loc(fused[#loc59, #loc60])
#loc540 = loc(fused[#loc62, #loc63])
#loc541 = loc(fused[#loc64, #loc65])
#loc542 = loc(fused[#loc68, #loc66])
#loc543 = loc(fused[#loc72, #loc69])
#loc544 = loc(fused[#loc76, #loc77])
#loc545 = loc(fused[#loc78, #loc79])
#loc546 = loc(fused[#loc81, #loc82])
#loc547 = loc(fused[#loc83, #loc84])
#loc548 = loc(fused[#loc85, #loc86])
#loc549 = loc(fused[#loc87, #loc79])
#loc550 = loc(fused[#loc89, #loc90])
#loc551 = loc(fused[#loc93, #loc94])
#loc552 = loc(fused[#loc95, #loc90])
#loc553 = loc(fused[#loc101, #loc102])
#loc554 = loc(fused[#loc103, #loc104])
#loc555 = loc(fused[#loc105, #loc106])
#loc556 = loc(fused[#loc107, #loc104])
#loc557 = loc(fused[#loc111, #loc112])
#loc558 = loc(fused[#loc115, #loc116])
#loc559 = loc(fused[#loc117, #loc118])
#loc560 = loc(fused[#loc119, #loc120])
#loc561 = loc(fused[#loc122, #loc123])
#loc562 = loc(fused[#loc124, #loc118])
#loc563 = loc(fused[#loc128, #loc126])
#loc564 = loc(fused[#loc131, #loc132])
#loc565 = loc(fused[#loc134, #loc135])
#loc566 = loc(fused[#loc136, #loc137])
#loc567 = loc(fused[#loc138, #loc135])
#loc568 = loc(fused[#loc141, #loc142])
#loc569 = loc(fused[#loc143, #loc144])
#loc570 = loc(fused[#loc145, #loc142])
#loc571 = loc(fused[#loc148, #loc149])
#loc572 = loc(fused[#loc150, #loc151])
#loc573 = loc(fused[#loc152, #loc149])
#loc574 = loc(fused[#loc153, #loc154])
#loc575 = loc(fused[#loc156, #loc157])
#loc576 = loc(fused[#loc158, #loc159])
#loc577 = loc(fused[#loc160, #loc161])
#loc578 = loc(fused[#loc162, #loc163])
#loc579 = loc(fused[#loc164, #loc165])
#loc580 = loc(fused[#loc166, #loc167])
#loc581 = loc(fused[#loc169, #loc168])
#loc582 = loc(fused[#loc170, #loc171])
#loc583 = loc(fused[#loc174, #loc175])
#loc584 = loc(fused[#loc176, #loc177])
#loc585 = loc(fused[#loc180, #loc178])
#loc586 = loc(fused[#loc181, #loc182])
#loc587 = loc(fused[#loc183, #loc184])
#loc588 = loc(fused[#loc185, #loc182])
#loc589 = loc(fused[#loc186, #loc187])
#loc590 = loc(fused[#loc188, #loc189])
#loc591 = loc(fused[#loc190, #loc191])
#loc592 = loc(fused[#loc192, #loc193])
#loc593 = loc(fused[#loc194, #loc195])
#loc594 = loc(fused[#loc196, #loc197])
#loc595 = loc(fused[#loc198, #loc199])
#loc596 = loc(fused[#loc200, #loc201])
#loc597 = loc(fused[#loc206, #loc207])
#loc598 = loc(fused[#loc208, #loc209])
#loc599 = loc(fused[#loc210, #loc211])
#loc600 = loc(fused[#loc212, #loc209])
#loc601 = loc(fused[#loc214, #loc215])
#loc602 = loc(fused[#loc217, #loc218])
#loc603 = loc(fused[#loc219, #loc220])
#loc604 = loc(fused[#loc222, #loc221])
#loc605 = loc(fused[#loc224, #loc223])
#loc606 = loc(fused[#loc227, #loc228])
#loc607 = loc(fused[#loc229, #loc230])
#loc608 = loc(fused[#loc232, #loc233])
#loc609 = loc(fused[#loc234, #loc235])
#loc610 = loc(fused[#loc236, #loc237])
#loc611 = loc(fused[#loc238, #loc230])
#loc612 = loc(fused[#loc240, #loc241])
#loc613 = loc(fused[#loc244, #loc245])
#loc614 = loc(fused[#loc246, #loc241])
#loc615 = loc(fused[#loc252, #loc253])
#loc616 = loc(fused[#loc254, #loc255])
#loc617 = loc(fused[#loc256, #loc257])
#loc618 = loc(fused[#loc258, #loc255])
#loc619 = loc(fused[#loc262, #loc263])
#loc620 = loc(fused[#loc266, #loc267])
#loc621 = loc(fused[#loc268, #loc269])
#loc622 = loc(fused[#loc270, #loc271])
#loc623 = loc(fused[#loc273, #loc274])
#loc624 = loc(fused[#loc275, #loc269])
#loc625 = loc(fused[#loc279, #loc277])
#loc626 = loc(fused[#loc282, #loc283])
#loc627 = loc(fused[#loc285, #loc286])
#loc628 = loc(fused[#loc287, #loc288])
#loc629 = loc(fused[#loc289, #loc286])
#loc630 = loc(fused[#loc292, #loc293])
#loc631 = loc(fused[#loc294, #loc295])
#loc632 = loc(fused[#loc296, #loc293])
#loc633 = loc(fused[#loc299, #loc300])
#loc634 = loc(fused[#loc301, #loc302])
#loc635 = loc(fused[#loc303, #loc304, #loc305, #loc300])
#loc636 = loc(fused[#loc307, #loc308])
#loc637 = loc(fused[#loc309, #loc310])
#loc638 = loc(fused[#loc311, #loc312, #loc313, #loc308])
#loc639 = loc(fused[#loc314, #loc315])
#loc640 = loc(fused[#loc318, #loc319])
#loc641 = loc(fused[#loc321, #loc320])
#loc642 = loc(fused[#loc322, #loc323])
#loc643 = loc(fused[#loc324, #loc325])
#loc644 = loc(fused[#loc328, #loc326])
#loc645 = loc(fused[#loc329, #loc330])
#loc646 = loc(fused[#loc331, #loc332])
#loc647 = loc(fused[#loc333, #loc330])
#loc648 = loc(fused[#loc334, #loc335])
#loc649 = loc(fused[#loc336, #loc337])
#loc650 = loc(fused[#loc338, #loc339])
#loc651 = loc(fused[#loc340, #loc341])
#loc652 = loc(fused[#loc342, #loc343])
#loc653 = loc(fused[#loc344, #loc345])
#loc654 = loc(fused[#loc346, #loc347])
#loc655 = loc(fused[#loc348, #loc349])
#loc656 = loc(fused[#loc354, #loc355])
#loc657 = loc(fused[#loc356, #loc357])
#loc658 = loc(fused[#loc358, #loc359])
#loc659 = loc(fused[#loc360, #loc357])
#loc660 = loc(fused[#loc362, #loc363])
#loc661 = loc(fused[#loc365, #loc366])
#loc662 = loc(fused[#loc367, #loc368])
#loc663 = loc(fused[#loc370, #loc369])
#loc664 = loc(fused[#loc372, #loc371])
#loc665 = loc(fused[#loc375, #loc376])
#loc666 = loc(fused[#loc377, #loc378])
#loc667 = loc(fused[#loc380, #loc381])
#loc668 = loc(fused[#loc382, #loc383])
#loc669 = loc(fused[#loc384, #loc385])
#loc670 = loc(fused[#loc386, #loc378])
#loc671 = loc(fused[#loc388, #loc389])
#loc672 = loc(fused[#loc392, #loc393])
#loc673 = loc(fused[#loc394, #loc389])
#loc674 = loc(fused[#loc400, #loc401])
#loc675 = loc(fused[#loc402, #loc403])
#loc676 = loc(fused[#loc404, #loc405])
#loc677 = loc(fused[#loc406, #loc403])
#loc678 = loc(fused[#loc410, #loc411])
#loc679 = loc(fused[#loc414, #loc415])
#loc680 = loc(fused[#loc416, #loc417])
#loc681 = loc(fused[#loc418, #loc419])
#loc682 = loc(fused[#loc421, #loc422])
#loc683 = loc(fused[#loc423, #loc417])
#loc684 = loc(fused[#loc427, #loc425])
#loc685 = loc(fused[#loc430, #loc431])
#loc686 = loc(fused[#loc433, #loc434])
#loc687 = loc(fused[#loc435, #loc436])
#loc688 = loc(fused[#loc437, #loc434])
#loc689 = loc(fused[#loc440, #loc441])
#loc690 = loc(fused[#loc442, #loc443])
#loc691 = loc(fused[#loc444, #loc441])
#loc692 = loc(fused[#loc447, #loc448])
#loc693 = loc(fused[#loc449, #loc450])
#loc694 = loc(fused[#loc451, #loc448])
#loc695 = loc(fused[#loc452, #loc453])
#loc696 = loc(fused[#loc454, #loc455])
#loc697 = loc(fused[#loc456, #loc457, #loc458, #loc453])
#loc698 = loc(fused[#loc459, #loc460])
#loc699 = loc(fused[#loc464, #loc465])
#loc700 = loc(fused[#loc466, #loc467])
#loc701 = loc(fused[#loc470, #loc468])
#loc702 = loc(fused[#loc471, #loc472])
#loc703 = loc(fused[#loc473, #loc474])
#loc704 = loc(fused[#loc475, #loc476, #loc477, #loc472])
#loc705 = loc(fused[#loc481, #loc480])
#loc706 = loc(fused[#loc482, #loc483])
#loc707 = loc(fused[#loc484, #loc485])
#loc708 = loc(fused[#loc486, #loc483])
#loc709 = loc(fused[#loc487, #loc488])
#loc710 = loc(fused[#loc490, #loc491])
#loc711 = loc(fused[#loc492, #loc493])
#loc712 = loc(fused[#loc496, #loc494])
#loc713 = loc(fused[#loc497, #loc498])
#loc714 = loc(fused[#loc499, #loc500])
#loc715 = loc(fused[#loc501, #loc498])
#loc716 = loc(fused[#loc503, #loc502])
#loc717 = loc(fused[#loc504, #loc505])
#loc718 = loc(fused[#loc506, #loc507])
#loc719 = loc(fused[#loc508, #loc505])
#loc720 = loc(fused[#loc509, #loc510])
