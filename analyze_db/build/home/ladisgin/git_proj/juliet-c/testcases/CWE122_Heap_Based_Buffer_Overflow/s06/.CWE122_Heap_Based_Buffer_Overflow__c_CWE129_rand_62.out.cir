!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":158:10)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":158:14)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":158:20)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":158:32)
#true = #cir.bool<true> : !cir.bool
#loc334 = loc(fused[#loc230, #loc231])
#loc335 = loc(fused[#loc232, #loc233])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_629badSourceERi(!cir.ptr<!s32i>) loc(#loc246)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc247)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc248)
  cir.func private @printIntLine(!s32i) loc(#loc249)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc250)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc11)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc251)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_623badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc253)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc19)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc254)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_629badSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc21)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc256)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc257)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc28)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc29)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc29)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc258)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc259)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc28)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc260)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc257)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc34)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc35)
        %17 = cir.cmp(eq, %15, %16) : !cir.ptr<!s32i>, !cir.bool loc(#loc262)
        cir.if %17 {
          %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc37)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc38)
          %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc39)
          cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc37)
        } loc(#loc263)
      } loc(#loc261)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc42)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc265)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc44)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc45)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc266)
          cir.condition(%18) loc(#loc266)
        } body {
          %16 = cir.const #cir.int<0> : !s32i loc(#loc46)
          %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
          %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc48)
          %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc49)
          cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc267)
          cir.yield loc(#loc41)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc50)
          %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc51)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc268)
          cir.yield loc(#loc264)
        } loc(#loc264)
      } loc(#loc264)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc55)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc270)
        cir.if %17 {
          %18 = cir.const #cir.int<1> : !s32i loc(#loc59)
          %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
          %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
          %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc62)
          cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc272)
          cir.scope {
            %22 = cir.const #cir.int<0> : !s32i loc(#loc65)
            cir.store %22, %3 : !s32i, !cir.ptr<!s32i> loc(#loc274)
            cir.for : cond {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc67)
              %24 = cir.const #cir.int<10> : !s32i loc(#loc68)
              %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc275)
              cir.condition(%25) loc(#loc275)
            } body {
              %23 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc69)
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc70)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc71)
              %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc69)
              cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc72)
              cir.yield loc(#loc64)
            } step {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc73)
              %24 = cir.unary(inc, %23) : !s32i, !s32i loc(#loc74)
              cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc276)
              cir.yield loc(#loc273)
            } loc(#loc273)
          } loc(#loc273)
        } else {
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc11)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc11)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc75)
        } loc(#loc271)
      } loc(#loc269)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc76)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc77)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc77)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc76)
    } loc(#loc255)
    cir.return loc(#loc15)
  } loc(#loc252)
  cir.func private @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_6213goodG2BSourceERi(!cir.ptr<!s32i>) loc(#loc277)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc279)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc85)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc280)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_6213goodG2BSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc87)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc282)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc283)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc94)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc95)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc95)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc284)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc285)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc94)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc286)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc283)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc100)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc101)
        %17 = cir.cmp(eq, %15, %16) : !cir.ptr<!s32i>, !cir.bool loc(#loc288)
        cir.if %17 {
          %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc103)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc104)
          %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc105)
          cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc103)
        } loc(#loc289)
      } loc(#loc287)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc108)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc291)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc110)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc111)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc292)
          cir.condition(%18) loc(#loc292)
        } body {
          %16 = cir.const #cir.int<0> : !s32i loc(#loc112)
          %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc113)
          %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc114)
          %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc115)
          cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc293)
          cir.yield loc(#loc107)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc116)
          %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc117)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc294)
          cir.yield loc(#loc290)
        } loc(#loc290)
      } loc(#loc290)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc120)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc121)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc296)
        cir.if %17 {
          %18 = cir.const #cir.int<1> : !s32i loc(#loc125)
          %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc126)
          %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc127)
          %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc128)
          cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc298)
          cir.scope {
            %22 = cir.const #cir.int<0> : !s32i loc(#loc131)
            cir.store %22, %3 : !s32i, !cir.ptr<!s32i> loc(#loc300)
            cir.for : cond {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc133)
              %24 = cir.const #cir.int<10> : !s32i loc(#loc134)
              %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc301)
              cir.condition(%25) loc(#loc301)
            } body {
              %23 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc135)
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc136)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc137)
              %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc135)
              cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc138)
              cir.yield loc(#loc130)
            } step {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc139)
              %24 = cir.unary(inc, %23) : !s32i, !s32i loc(#loc140)
              cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc302)
              cir.yield loc(#loc299)
            } loc(#loc299)
          } loc(#loc299)
        } else {
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc141)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc141)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc142)
        } loc(#loc297)
      } loc(#loc295)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc143)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc144)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc144)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc143)
    } loc(#loc281)
    cir.return loc(#loc81)
  } loc(#loc278)
  cir.func private @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_6213goodB2GSourceERi(!cir.ptr<!s32i>) loc(#loc303)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc147)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc305)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc152)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc153)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc306)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_6213goodB2GSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc155)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc308)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc309)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc162)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc163)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc163)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc310)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc311)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc162)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc312)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc309)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc168)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc169)
        %17 = cir.cmp(eq, %15, %16) : !cir.ptr<!s32i>, !cir.bool loc(#loc314)
        cir.if %17 {
          %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc171)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc172)
          %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc173)
          cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc171)
        } loc(#loc315)
      } loc(#loc313)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc176)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc317)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc178)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc179)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc318)
          cir.condition(%18) loc(#loc318)
        } body {
          %16 = cir.const #cir.int<0> : !s32i loc(#loc180)
          %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc181)
          %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc182)
          %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc183)
          cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc319)
          cir.yield loc(#loc175)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc184)
          %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc185)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc320)
          cir.yield loc(#loc316)
        } loc(#loc316)
      } loc(#loc316)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc188)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc189)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc322)
        %18 = cir.ternary(%17, true {
          %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc191)
          %20 = cir.const #cir.int<10> : !s32i loc(#loc192)
          %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc323)
          %22 = cir.ternary(%21, true {
            %23 = cir.const #true loc(#loc190)
            cir.yield %23 : !cir.bool loc(#loc190)
          }, false {
            %23 = cir.const #false loc(#loc190)
            cir.yield %23 : !cir.bool loc(#loc190)
          }) : (!cir.bool) -> !cir.bool loc(#loc190)
          cir.yield %22 : !cir.bool loc(#loc190)
        }, false {
          %19 = cir.const #false loc(#loc190)
          cir.yield %19 : !cir.bool loc(#loc190)
        }) : (!cir.bool) -> !cir.bool loc(#loc190)
        cir.if %18 {
          %19 = cir.const #cir.int<1> : !s32i loc(#loc197)
          %20 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc198)
          %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc199)
          %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc200)
          cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc325)
          cir.scope {
            %23 = cir.const #cir.int<0> : !s32i loc(#loc203)
            cir.store %23, %3 : !s32i, !cir.ptr<!s32i> loc(#loc327)
            cir.for : cond {
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc205)
              %25 = cir.const #cir.int<10> : !s32i loc(#loc206)
              %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc328)
              cir.condition(%26) loc(#loc328)
            } body {
              %24 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc207)
              %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc208)
              %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc209)
              %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc207)
              cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc210)
              cir.yield loc(#loc202)
            } step {
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc211)
              %25 = cir.unary(inc, %24) : !s32i, !s32i loc(#loc212)
              cir.store %25, %3 : !s32i, !cir.ptr<!s32i> loc(#loc329)
              cir.yield loc(#loc326)
            } loc(#loc326)
          } loc(#loc326)
        } else {
          %19 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc147)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc147)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc213)
        } loc(#loc324)
      } loc(#loc321)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc214)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc215)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc215)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc214)
    } loc(#loc307)
    cir.return loc(#loc149)
  } loc(#loc304)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_624goodEv() extra(#fn_attr1) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62L7goodG2BEv() : () -> () loc(#loc218)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62L7goodB2GEv() : () -> () loc(#loc219)
    cir.return loc(#loc217)
  } loc(#loc330)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc331)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc332)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc224)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc225)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc226)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc227)
  cir.func @main(%arg0: !s32i loc(fused[#loc230, #loc231]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc232, #loc233])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc334)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc335)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc229)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc234)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc235)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc236)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc236)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc237)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc224)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc224)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc238)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_624goodEv() : () -> () loc(#loc239)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc225)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc225)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc240)
    %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc226)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc226)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc241)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_623badEv() : () -> () loc(#loc242)
    %12 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc227)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc227)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc243)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc244)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc336)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc336)
    cir.return %15 : !s32i loc(#loc336)
  } loc(#loc333)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":26:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":26:25)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":56:23)
#loc12 = loc("/usr/include/stdlib.h":687:1)
#loc13 = loc("/usr/include/stdlib.h":687:32)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":28:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":60:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":30:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":30:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":32:13)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":32:12)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":32:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":33:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":34:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":59:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":35:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":35:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":36:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":36:54)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":36:31)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":36:38)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":36:43)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":36:53)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":37:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":37:39)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":37:13)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":37:23)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":37:29)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":37:30)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":37:36)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":37:35)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":39:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":42:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":39:18)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":39:14)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":39:21)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":39:25)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":41:25)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":41:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":41:20)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":41:21)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":39:30)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":39:29)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":45:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":57:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":45:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":45:21)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":46:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":53:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":55:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":47:28)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":47:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":47:20)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":47:24)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":49:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":52:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":49:21)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":49:17)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":49:24)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":49:28)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":51:30)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":51:37)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":51:38)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":51:17)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":49:33)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":49:32)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":56:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":58:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":58:14)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":67:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":67:29)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":69:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":101:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":71:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":71:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":73:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":73:12)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":73:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":74:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":75:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":100:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":76:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":76:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":77:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":77:54)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":77:31)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":77:38)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":77:43)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":77:53)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":78:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":78:39)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":78:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":78:23)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":78:29)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":78:30)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":78:36)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":78:35)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":80:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":83:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":80:18)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":80:14)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":80:21)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":80:25)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":82:25)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":82:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":82:20)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":82:21)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":80:30)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":80:29)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":86:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":98:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":86:13)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":86:21)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":87:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":94:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":96:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":88:28)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":88:13)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":88:20)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":88:24)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":90:13)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":93:13)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":90:21)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":90:17)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":90:24)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":90:28)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":92:30)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":92:37)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":92:38)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":92:17)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":90:33)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":90:32)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":97:23)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":97:13)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":99:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":99:14)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":104:1)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":104:29)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":133:23)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":106:1)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":137:1)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":108:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":108:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":110:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":110:12)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":110:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":111:5)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":112:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":136:5)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":113:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":113:13)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":114:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":114:54)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":114:31)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":114:38)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":114:43)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":114:53)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":115:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":115:39)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":115:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":115:23)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":115:29)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":115:30)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":115:36)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":115:35)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":117:9)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":120:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":117:18)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":117:14)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":117:21)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":117:25)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":119:25)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":119:13)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":119:20)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":119:21)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":117:30)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":117:29)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":122:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":134:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":122:13)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":122:21)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":122:23)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":122:26)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":122:34)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":122:36)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":123:9)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":130:9)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":132:9)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":124:28)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":124:13)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":124:20)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":124:24)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":126:13)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":129:13)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":126:21)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":126:17)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":126:24)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":126:28)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":128:30)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":128:37)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":128:38)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":128:17)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":126:33)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":126:32)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":133:13)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":135:9)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":135:14)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":139:1)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":143:1)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":141:5)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":142:5)
#loc220 = loc("/usr/include/stdlib.h":575:1)
#loc221 = loc("/usr/include/stdlib.h":575:41)
#loc222 = loc("/usr/include/time.h":76:1)
#loc223 = loc("/usr/include/time.h":76:38)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":163:15)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":165:15)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":168:15)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":170:15)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":158:1)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":173:1)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":159:1)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":161:27)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":161:22)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":161:5)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":163:5)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":164:5)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":165:5)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":168:5)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":169:5)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":170:5)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":172:12)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_62a.cpp":172:5)
#loc246 = loc(fused[#loc1, #loc2])
#loc247 = loc(fused[#loc3, #loc4])
#loc248 = loc(fused[#loc5, #loc6])
#loc249 = loc(fused[#loc7, #loc8])
#loc250 = loc(fused[#loc9, #loc10])
#loc251 = loc(fused[#loc12, #loc13])
#loc252 = loc(fused[#loc14, #loc15])
#loc253 = loc(fused[#loc16, #loc17])
#loc254 = loc(fused[#loc20, #loc18])
#loc255 = loc(fused[#loc22, #loc23])
#loc256 = loc(fused[#loc24, #loc25])
#loc257 = loc(fused[#loc26, #loc27])
#loc258 = loc(fused[#loc30, #loc31])
#loc259 = loc(fused[#loc29, #loc31])
#loc260 = loc(fused[#loc28, #loc27])
#loc261 = loc(fused[#loc32, #loc33])
#loc262 = loc(fused[#loc34, #loc35])
#loc263 = loc(fused[#loc36, #loc33])
#loc264 = loc(fused[#loc40, #loc41])
#loc265 = loc(fused[#loc43, #loc42])
#loc266 = loc(fused[#loc44, #loc45])
#loc267 = loc(fused[#loc47, #loc46])
#loc268 = loc(fused[#loc51, #loc50])
#loc269 = loc(fused[#loc52, #loc53])
#loc270 = loc(fused[#loc54, #loc55])
#loc271 = loc(fused[#loc56, #loc57, #loc58, #loc53])
#loc272 = loc(fused[#loc60, #loc59])
#loc273 = loc(fused[#loc63, #loc64])
#loc274 = loc(fused[#loc66, #loc65])
#loc275 = loc(fused[#loc67, #loc68])
#loc276 = loc(fused[#loc74, #loc73])
#loc277 = loc(fused[#loc78, #loc79])
#loc278 = loc(fused[#loc80, #loc81])
#loc279 = loc(fused[#loc82, #loc83])
#loc280 = loc(fused[#loc86, #loc84])
#loc281 = loc(fused[#loc88, #loc89])
#loc282 = loc(fused[#loc90, #loc91])
#loc283 = loc(fused[#loc92, #loc93])
#loc284 = loc(fused[#loc96, #loc97])
#loc285 = loc(fused[#loc95, #loc97])
#loc286 = loc(fused[#loc94, #loc93])
#loc287 = loc(fused[#loc98, #loc99])
#loc288 = loc(fused[#loc100, #loc101])
#loc289 = loc(fused[#loc102, #loc99])
#loc290 = loc(fused[#loc106, #loc107])
#loc291 = loc(fused[#loc109, #loc108])
#loc292 = loc(fused[#loc110, #loc111])
#loc293 = loc(fused[#loc113, #loc112])
#loc294 = loc(fused[#loc117, #loc116])
#loc295 = loc(fused[#loc118, #loc119])
#loc296 = loc(fused[#loc120, #loc121])
#loc297 = loc(fused[#loc122, #loc123, #loc124, #loc119])
#loc298 = loc(fused[#loc126, #loc125])
#loc299 = loc(fused[#loc129, #loc130])
#loc300 = loc(fused[#loc132, #loc131])
#loc301 = loc(fused[#loc133, #loc134])
#loc302 = loc(fused[#loc140, #loc139])
#loc303 = loc(fused[#loc145, #loc146])
#loc304 = loc(fused[#loc148, #loc149])
#loc305 = loc(fused[#loc150, #loc151])
#loc306 = loc(fused[#loc154, #loc152])
#loc307 = loc(fused[#loc156, #loc157])
#loc308 = loc(fused[#loc158, #loc159])
#loc309 = loc(fused[#loc160, #loc161])
#loc310 = loc(fused[#loc164, #loc165])
#loc311 = loc(fused[#loc163, #loc165])
#loc312 = loc(fused[#loc162, #loc161])
#loc313 = loc(fused[#loc166, #loc167])
#loc314 = loc(fused[#loc168, #loc169])
#loc315 = loc(fused[#loc170, #loc167])
#loc316 = loc(fused[#loc174, #loc175])
#loc317 = loc(fused[#loc177, #loc176])
#loc318 = loc(fused[#loc178, #loc179])
#loc319 = loc(fused[#loc181, #loc180])
#loc320 = loc(fused[#loc185, #loc184])
#loc321 = loc(fused[#loc186, #loc187])
#loc322 = loc(fused[#loc188, #loc189])
#loc323 = loc(fused[#loc191, #loc193])
#loc324 = loc(fused[#loc194, #loc195, #loc196, #loc187])
#loc325 = loc(fused[#loc198, #loc197])
#loc326 = loc(fused[#loc201, #loc202])
#loc327 = loc(fused[#loc204, #loc203])
#loc328 = loc(fused[#loc205, #loc206])
#loc329 = loc(fused[#loc212, #loc211])
#loc330 = loc(fused[#loc216, #loc217])
#loc331 = loc(fused[#loc220, #loc221])
#loc332 = loc(fused[#loc222, #loc223])
#loc333 = loc(fused[#loc228, #loc229])
#loc336 = loc(fused[#loc245, #loc244])
