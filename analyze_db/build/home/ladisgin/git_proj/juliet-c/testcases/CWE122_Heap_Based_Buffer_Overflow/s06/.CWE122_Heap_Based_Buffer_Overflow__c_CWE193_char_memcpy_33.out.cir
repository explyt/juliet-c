!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":96:10)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":96:14)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":96:20)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":96:32)
#loc177 = loc(fused[#loc114, #loc115])
#loc178 = loc(fused[#loc116, #loc117])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const._ZN58CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33L7goodG2BEv.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc130)
  cir.global "private" constant cir_private @__const._ZN58CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_333badEv.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc131)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc132)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc133)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc134)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc135)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc136)
  cir.func @_ZN58CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc138)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc139)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc20)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc21)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc140)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc23)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc24)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc24)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc141)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc142)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc23)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc143)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc144)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc32)
      %12 = cir.cmp(eq, %10, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc146)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc34)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc35)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc36)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc34)
      } loc(#loc147)
    } loc(#loc145)
    cir.scope {
      %10 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc149)
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc40)
      %12 = cir.load %11 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
      cir.store %12, %10 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc149)
      cir.scope {
        %13 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc131)
        %14 = cir.get_global @__const._ZN58CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_333badEv.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc131)
        cir.copy %14 to %13 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc131)
        %15 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc43)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc43)
        %17 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc44)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc44)
        %19 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc45)
        %20 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc46)
        %21 = cir.call @strlen(%20) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc45)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc47)
        %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc47)
        %24 = cir.binop(add, %21, %23) : !u64i loc(#loc151)
        %25 = cir.const #cir.int<1> : !u64i loc(#loc152)
        %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc153)
        cir.libc.memcpy %26 bytes from %18 to %16 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc154)
        %27 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
        cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc54)
        %28 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc55)
        %29 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
        %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc56)
        cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc55)
      } loc(#loc150)
    } loc(#loc148)
    cir.return loc(#loc16)
  } loc(#loc137)
  cir.func internal private @_ZN58CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc156)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc157)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc62)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc63)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc158)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc65)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc66)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc67)
    %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc66)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc66)
    %8 = cir.const #cir.int<1> : !u64i loc(#loc159)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc160)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc65)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc161)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc162)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc76)
      %14 = cir.cmp(eq, %12, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc164)
      cir.if %14 {
        %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc78)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc79)
        %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc80)
        cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc78)
      } loc(#loc165)
    } loc(#loc163)
    cir.scope {
      %12 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc167)
      %13 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc84)
      %14 = cir.load %13 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc84)
      cir.store %14, %12 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc167)
      cir.scope {
        %15 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc130)
        %16 = cir.get_global @__const._ZN58CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33L7goodG2BEv.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc130)
        cir.copy %16 to %15 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc130)
        %17 = cir.load %12 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc87)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc87)
        %19 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc88)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc88)
        %21 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc89)
        %22 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc90)
        %23 = cir.call @strlen(%22) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc89)
        %24 = cir.const #cir.int<1> : !s32i loc(#loc91)
        %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc91)
        %26 = cir.binop(add, %23, %25) : !u64i loc(#loc169)
        %27 = cir.const #cir.int<1> : !u64i loc(#loc170)
        %28 = cir.binop(mul, %26, %27) : !u64i loc(#loc171)
        cir.libc.memcpy %28 bytes from %20 to %18 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc172)
        %29 = cir.load %12 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc97)
        cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc98)
        %30 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc99)
        %31 = cir.load %12 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
        %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc100)
        cir.call @free(%32) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc99)
      } loc(#loc168)
    } loc(#loc166)
    cir.return loc(#loc58)
  } loc(#loc155)
  cir.func @_ZN58CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN58CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33L7goodG2BEv() : () -> () loc(#loc103)
    cir.return loc(#loc102)
  } loc(#loc173)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc174)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc175)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc108)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc109)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc110)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc111)
  cir.func @main(%arg0: !s32i loc(fused[#loc114, #loc115]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc116, #loc117])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc177)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc178)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc113)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc118)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc119)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc120)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc120)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc121)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc108)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc108)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc122)
    cir.call @_ZN58CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_334goodEv() : () -> () loc(#loc123)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc109)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc109)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc124)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc110)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc110)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc125)
    cir.call @_ZN58CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_333badEv() : () -> () loc(#loc126)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc111)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc111)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc127)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc128)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc179)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc179)
    cir.return %15 : !s32i loc(#loc179)
  } loc(#loc176)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":68:13)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":68:33)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":42:13)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":42:33)
#loc5 = loc("/usr/include/stdlib.h":672:1)
#loc6 = loc("/usr/include/stdlib.h":672:45)
#loc7 = loc("/usr/include/stdlib.h":756:1)
#loc8 = loc("/usr/include/stdlib.h":756:70)
#loc9 = loc("/usr/include/string.h":407:1)
#loc10 = loc("/usr/include/string.h":408:33)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc13 = loc("/usr/include/stdlib.h":687:1)
#loc14 = loc("/usr/include/stdlib.h":687:32)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":31:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":50:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":33:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":33:12)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":34:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":34:23)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":35:12)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":35:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":37:20)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":37:27)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":37:30)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":37:41)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":37:42)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":37:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":38:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":38:33)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":38:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":38:17)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":38:23)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":38:24)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":38:30)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":38:29)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":39:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":49:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":40:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":40:23)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":41:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":48:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":45:20)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":45:26)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":45:35)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":45:42)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":45:52)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":45:57)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":45:68)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":45:34)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":45:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":45:69)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":46:23)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":46:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":47:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":47:18)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":57:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":76:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":59:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":59:12)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":60:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":60:23)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":61:12)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":61:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":63:20)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":63:28)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":63:31)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":63:34)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":63:45)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":63:27)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":63:46)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":63:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":64:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":64:33)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":64:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":64:17)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":64:23)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":64:24)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":64:30)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":64:29)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":65:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":75:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":66:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":66:23)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":67:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":74:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":71:20)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":71:26)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":71:35)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":71:42)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":71:52)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":71:57)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":71:68)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":71:34)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":71:13)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":71:69)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":72:23)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":72:13)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":73:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":73:18)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":78:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":81:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":80:5)
#loc104 = loc("/usr/include/stdlib.h":575:1)
#loc105 = loc("/usr/include/stdlib.h":575:41)
#loc106 = loc("/usr/include/time.h":76:1)
#loc107 = loc("/usr/include/time.h":76:38)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":101:15)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":103:15)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":106:15)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":108:15)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":96:1)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":111:1)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":97:1)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":99:27)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":99:22)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":99:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":101:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":102:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":103:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":106:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":107:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":108:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":110:12)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":110:5)
#loc130 = loc(fused[#loc1, #loc2])
#loc131 = loc(fused[#loc3, #loc4])
#loc132 = loc(fused[#loc5, #loc6])
#loc133 = loc(fused[#loc7, #loc8])
#loc134 = loc(fused[#loc9, #loc10])
#loc135 = loc(fused[#loc11, #loc12])
#loc136 = loc(fused[#loc13, #loc14])
#loc137 = loc(fused[#loc15, #loc16])
#loc138 = loc(fused[#loc17, #loc18])
#loc139 = loc(fused[#loc19, #loc20])
#loc140 = loc(fused[#loc22, #loc21])
#loc141 = loc(fused[#loc25, #loc26])
#loc142 = loc(fused[#loc24, #loc26])
#loc143 = loc(fused[#loc23, #loc27])
#loc144 = loc(fused[#loc28, #loc27])
#loc145 = loc(fused[#loc29, #loc30])
#loc146 = loc(fused[#loc31, #loc32])
#loc147 = loc(fused[#loc33, #loc30])
#loc148 = loc(fused[#loc37, #loc38])
#loc149 = loc(fused[#loc39, #loc40])
#loc150 = loc(fused[#loc41, #loc42])
#loc151 = loc(fused[#loc45, #loc47])
#loc152 = loc(fused[#loc48, #loc49])
#loc153 = loc(fused[#loc50, #loc49])
#loc154 = loc(fused[#loc51, #loc52])
#loc155 = loc(fused[#loc57, #loc58])
#loc156 = loc(fused[#loc59, #loc60])
#loc157 = loc(fused[#loc61, #loc62])
#loc158 = loc(fused[#loc64, #loc63])
#loc159 = loc(fused[#loc68, #loc69])
#loc160 = loc(fused[#loc70, #loc69])
#loc161 = loc(fused[#loc65, #loc71])
#loc162 = loc(fused[#loc72, #loc71])
#loc163 = loc(fused[#loc73, #loc74])
#loc164 = loc(fused[#loc75, #loc76])
#loc165 = loc(fused[#loc77, #loc74])
#loc166 = loc(fused[#loc81, #loc82])
#loc167 = loc(fused[#loc83, #loc84])
#loc168 = loc(fused[#loc85, #loc86])
#loc169 = loc(fused[#loc89, #loc91])
#loc170 = loc(fused[#loc92, #loc93])
#loc171 = loc(fused[#loc94, #loc93])
#loc172 = loc(fused[#loc95, #loc96])
#loc173 = loc(fused[#loc101, #loc102])
#loc174 = loc(fused[#loc104, #loc105])
#loc175 = loc(fused[#loc106, #loc107])
#loc176 = loc(fused[#loc112, #loc113])
#loc179 = loc(fused[#loc129, #loc128])
