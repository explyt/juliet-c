!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc18 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":45:16)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":70:16)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":80:28)
#loc106 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":101:16)
#loc117 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":106:28)
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_square_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc185)
  cir.func private @printIntLine(!s32i) loc(#loc186)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_square_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc188)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc189)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    cir.br ^bb1 loc(#loc191)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc192)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc15)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc193)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc18)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc18)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc18)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc18)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc18)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc18)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc18)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc18)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc18)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc18)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc18)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc18)
    cir.br ^bb5(%21 : !u32i) loc(#loc18)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc18)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc18)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc18)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc18)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc18)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc18)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc18)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc18)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc18)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc18)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc18)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc18)
    cir.br ^bb5(%37 : !u32i) loc(#loc18)
  ^bb5(%38: !u32i loc("CWE190_Integer_Overflow__int_rand_square_08.c":45:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc18)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc18)
    cir.store %39, %1 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    cir.br ^bb7 loc(#loc14)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc14)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc195)
  ^bb9:  // pred: ^bb8
    %40 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc196)
    %41 = cir.call %40() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc22)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc22)
    cir.brcond %42 ^bb10, ^bb13 loc(#loc197)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc198)
  ^bb11:  // pred: ^bb10
    %43 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %44 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc8)
    %45 = cir.binop(mul, %43, %44) nsw : !s32i loc(#loc27)
    cir.store %45, %0 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    %46 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    cir.call @printIntLine(%46) : (!s32i) -> () loc(#loc29)
    cir.br ^bb12 loc(#loc26)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc21)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc21)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc6)
  } loc(#loc187)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_square_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc200)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc202)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc199)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc41)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc42)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc205)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc205)
    cir.return %2 : !s32i loc(#loc205)
  } loc(#loc204)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc206)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc46)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc48)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc208)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc209)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc55)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    cir.br ^bb1 loc(#loc211)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc212)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc59)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc59)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc213)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc62)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc62)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc62)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc62)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc62)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc62)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc62)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc62)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc62)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc62)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc62)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc62)
    cir.br ^bb5(%21 : !u32i) loc(#loc62)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc62)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc62)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc62)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc62)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc62)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc62)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc62)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc62)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc62)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc62)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc62)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc62)
    cir.br ^bb5(%37 : !u32i) loc(#loc62)
  ^bb5(%38: !u32i loc("CWE190_Integer_Overflow__int_rand_square_08.c":70:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc62)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc62)
    cir.store %39, %1 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    cir.br ^bb7 loc(#loc58)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc58)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc215)
  ^bb9:  // pred: ^bb8
    %40 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc216)
    %41 = cir.call %40() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc66)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc66)
    cir.brcond %42 ^bb10, ^bb11 loc(#loc217)
  ^bb10:  // pred: ^bb9
    %43 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc46)
    %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    cir.br ^bb25 loc(#loc69)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc218)
  ^bb12:  // pred: ^bb11
    %45 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    %46 = cir.const #cir.int<2147483647> : !s32i loc(#loc75)
    %47 = cir.unary(minus, %46) : !s32i, !s32i loc(#loc75)
    %48 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %49 = cir.binop(sub, %47, %48) nsw : !s32i loc(#loc75)
    %50 = cir.cmp(gt, %45, %49) : !s32i, !cir.bool loc(#loc219)
    cir.brcond %50 ^bb13, ^bb18 loc(#loc76)
  ^bb13:  // pred: ^bb12
    %51 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc77)
    %52 = cir.abs %51 poison : !s32i loc(#loc78)
    %53 = cir.cast(integral, %52 : !s32i), !s64i loc(#loc78)
    %54 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc79)
    %55 = cir.const #cir.int<2147483647> : !s32i loc(#loc80)
    %56 = cir.cast(int_to_float, %55 : !s32i), !cir.double loc(#loc80)
    %57 = cir.call @sqrt(%56) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc79)
    %58 = cir.cast(float_to_int, %57 : !cir.double), !s64i loc(#loc79)
    %59 = cir.cmp(lt, %53, %58) : !s64i, !cir.bool loc(#loc220)
    cir.brcond %59 ^bb14, ^bb15 loc(#loc76)
  ^bb14:  // pred: ^bb13
    %60 = cir.const #true loc(#loc76)
    cir.br ^bb16(%60 : !cir.bool) loc(#loc76)
  ^bb15:  // pred: ^bb13
    %61 = cir.const #false loc(#loc76)
    cir.br ^bb16(%61 : !cir.bool) loc(#loc76)
  ^bb16(%62: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_08.c":80:28)):  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc76)
  ^bb17:  // pred: ^bb16
    cir.br ^bb19(%62 : !cir.bool) loc(#loc76)
  ^bb18:  // pred: ^bb12
    %63 = cir.const #false loc(#loc76)
    cir.br ^bb19(%63 : !cir.bool) loc(#loc76)
  ^bb19(%64: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_08.c":80:28)):  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc76)
  ^bb20:  // pred: ^bb19
    cir.brcond %64 ^bb21, ^bb22 loc(#loc221)
  ^bb21:  // pred: ^bb20
    %65 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    %66 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    %67 = cir.binop(mul, %65, %66) nsw : !s32i loc(#loc85)
    cir.store %67, %0 : !s32i, !cir.ptr<!s32i> loc(#loc208)
    %68 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    cir.call @printIntLine(%68) : (!s32i) -> () loc(#loc87)
    cir.br ^bb23 loc(#loc83)
  ^bb22:  // pred: ^bb20
    %69 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc48)
    %70 = cir.cast(array_to_ptrdecay, %69 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%70) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    cir.br ^bb23 loc(#loc73)
  ^bb23:  // 2 preds: ^bb21, ^bb22
    cir.br ^bb24 loc(#loc73)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc65)
  ^bb25:  // 2 preds: ^bb10, ^bb24
    cir.br ^bb26 loc(#loc65)
  ^bb26:  // pred: ^bb25
    cir.return loc(#loc50)
  } loc(#loc207)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc90)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc91)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc223)
    cir.return %2 : !s32i loc(#loc223)
  } loc(#loc222)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc225)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc226)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc99)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc227)
    cir.br ^bb1 loc(#loc228)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc229)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc103)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc103)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc230)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc106)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc106)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc106)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc106)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc106)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc106)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc106)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc106)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc106)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc106)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc106)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc106)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc106)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc106)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc106)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc106)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc106)
    cir.br ^bb5(%21 : !u32i) loc(#loc106)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc106)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc106)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc106)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc106)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc106)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc106)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc106)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc106)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc106)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc106)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc106)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc106)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc106)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc106)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc106)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc106)
    cir.br ^bb5(%37 : !u32i) loc(#loc106)
  ^bb5(%38: !u32i loc("CWE190_Integer_Overflow__int_rand_square_08.c":101:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc106)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc106)
    cir.store %39, %1 : !s32i, !cir.ptr<!s32i> loc(#loc231)
    cir.br ^bb7 loc(#loc102)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc102)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc232)
  ^bb9:  // pred: ^bb8
    %40 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc233)
    %41 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc110)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc110)
    cir.brcond %42 ^bb10, ^bb24 loc(#loc234)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc235)
  ^bb11:  // pred: ^bb10
    %43 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc115)
    %44 = cir.const #cir.int<2147483647> : !s32i loc(#loc116)
    %45 = cir.unary(minus, %44) : !s32i, !s32i loc(#loc116)
    %46 = cir.const #cir.int<1> : !s32i loc(#loc116)
    %47 = cir.binop(sub, %45, %46) nsw : !s32i loc(#loc116)
    %48 = cir.cmp(gt, %43, %47) : !s32i, !cir.bool loc(#loc236)
    cir.brcond %48 ^bb12, ^bb17 loc(#loc117)
  ^bb12:  // pred: ^bb11
    %49 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    %50 = cir.abs %49 poison : !s32i loc(#loc119)
    %51 = cir.cast(integral, %50 : !s32i), !s64i loc(#loc119)
    %52 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc120)
    %53 = cir.const #cir.int<2147483647> : !s32i loc(#loc121)
    %54 = cir.cast(int_to_float, %53 : !s32i), !cir.double loc(#loc121)
    %55 = cir.call @sqrt(%54) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc120)
    %56 = cir.cast(float_to_int, %55 : !cir.double), !s64i loc(#loc120)
    %57 = cir.cmp(lt, %51, %56) : !s64i, !cir.bool loc(#loc237)
    cir.brcond %57 ^bb13, ^bb14 loc(#loc117)
  ^bb13:  // pred: ^bb12
    %58 = cir.const #true loc(#loc117)
    cir.br ^bb15(%58 : !cir.bool) loc(#loc117)
  ^bb14:  // pred: ^bb12
    %59 = cir.const #false loc(#loc117)
    cir.br ^bb15(%59 : !cir.bool) loc(#loc117)
  ^bb15(%60: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_08.c":106:28)):  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc117)
  ^bb16:  // pred: ^bb15
    cir.br ^bb18(%60 : !cir.bool) loc(#loc117)
  ^bb17:  // pred: ^bb11
    %61 = cir.const #false loc(#loc117)
    cir.br ^bb18(%61 : !cir.bool) loc(#loc117)
  ^bb18(%62: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_08.c":106:28)):  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc117)
  ^bb19:  // pred: ^bb18
    cir.brcond %62 ^bb20, ^bb21 loc(#loc238)
  ^bb20:  // pred: ^bb19
    %63 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc126)
    %64 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc96)
    %65 = cir.binop(mul, %63, %64) nsw : !s32i loc(#loc126)
    cir.store %65, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    %66 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc127)
    cir.call @printIntLine(%66) : (!s32i) -> () loc(#loc128)
    cir.br ^bb22 loc(#loc124)
  ^bb21:  // pred: ^bb19
    %67 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc129)
    %68 = cir.cast(array_to_ptrdecay, %67 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc129)
    cir.call @printLine(%68) : (!cir.ptr<!s8i>) -> () loc(#loc130)
    cir.br ^bb22 loc(#loc114)
  ^bb22:  // 2 preds: ^bb20, ^bb21
    cir.br ^bb23 loc(#loc114)
  ^bb23:  // pred: ^bb22
    cir.br ^bb24 loc(#loc109)
  ^bb24:  // 2 preds: ^bb9, ^bb23
    cir.br ^bb25 loc(#loc109)
  ^bb25:  // pred: ^bb24
    cir.return loc(#loc94)
  } loc(#loc224)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc240)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc241)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc137)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc242)
    cir.br ^bb1 loc(#loc243)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc244)
    %4 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc141)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc141)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc245)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc146)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc146)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc147)
    cir.br ^bb4 loc(#loc144)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc148)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc246)
    cir.br ^bb4 loc(#loc140)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc140)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc247)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc248)
    %10 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc152)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc152)
    cir.brcond %11 ^bb7, ^bb10 loc(#loc249)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc250)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc134)
    %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc157)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc240)
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc159)
    cir.br ^bb9 loc(#loc156)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc151)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc151)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc132)
  } loc(#loc239)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc252)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc253)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc166)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc254)
    cir.br ^bb1 loc(#loc255)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc256)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc170)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc170)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc257)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2> : !s32i loc(#loc173)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc258)
    cir.br ^bb3 loc(#loc169)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc169)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc259)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc260)
    %8 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc177)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc177)
    cir.brcond %9 ^bb6, ^bb9 loc(#loc261)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc262)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc182)
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc163)
    %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc182)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc252)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc183)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc184)
    cir.br ^bb8 loc(#loc181)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc176)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc176)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc161)
  } loc(#loc251)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_square_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":37:1)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":55:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":51:13)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":51:33)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":39:5)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":39:9)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":41:12)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":41:5)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":42:5)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":46:5)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":42:8)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":42:26)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":43:5)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":45:9)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":47:5)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":54:5)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":47:8)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":47:26)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":48:5)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":49:9)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":53:9)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":51:26)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":52:26)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":52:13)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":165:1)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":171:1)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":167:5)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":167:14)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":168:5)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":168:14)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":169:5)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":169:14)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":170:5)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":170:14)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":25:1)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":28:1)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":27:12)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":27:5)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":75:19)
#loc47 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":87:23)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":62:1)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":90:1)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":82:13)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":82:33)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":64:5)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":64:9)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":66:12)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":66:5)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":67:5)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":71:5)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":67:8)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":67:26)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":68:5)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":70:9)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":72:5)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":89:5)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":72:8)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":72:27)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":73:5)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":76:5)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":78:5)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":75:9)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":80:9)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":88:9)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":80:13)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":80:20)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":80:35)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":80:31)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":80:49)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":80:62)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":80:69)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":81:9)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":84:9)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":86:9)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":82:26)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":83:26)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":83:13)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":87:13)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":30:1)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":33:1)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":32:12)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":32:5)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":93:1)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":116:1)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":108:13)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":108:33)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":95:5)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":95:9)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":97:12)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":97:5)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":98:5)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":102:5)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":98:8)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":98:26)
#loc105 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":99:5)
#loc107 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":101:9)
#loc108 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":103:5)
#loc109 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":115:5)
#loc110 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":103:8)
#loc111 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":103:26)
#loc112 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":104:5)
#loc113 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":106:9)
#loc114 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":114:9)
#loc115 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":106:13)
#loc116 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":106:20)
#loc118 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":106:35)
#loc119 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":106:31)
#loc120 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":106:49)
#loc121 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":106:62)
#loc122 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":106:69)
#loc123 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":107:9)
#loc124 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":110:9)
#loc125 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":112:9)
#loc126 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":108:26)
#loc127 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":109:26)
#loc128 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":109:13)
#loc129 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":113:23)
#loc130 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":113:13)
#loc131 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":119:1)
#loc132 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":142:1)
#loc133 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":138:13)
#loc134 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":138:33)
#loc135 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":121:5)
#loc136 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":121:9)
#loc137 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":123:12)
#loc138 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":123:5)
#loc139 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":124:5)
#loc140 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":133:5)
#loc141 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":124:8)
#loc142 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":124:27)
#loc143 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":125:5)
#loc144 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":128:5)
#loc145 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":130:5)
#loc146 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":127:19)
#loc147 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":127:9)
#loc148 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":132:16)
#loc149 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":132:9)
#loc150 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":134:5)
#loc151 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":141:5)
#loc152 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":134:8)
#loc153 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":134:26)
#loc154 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":135:5)
#loc155 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":136:9)
#loc156 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":140:9)
#loc157 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":138:26)
#loc158 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":139:26)
#loc159 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":139:13)
#loc160 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":145:1)
#loc161 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":163:1)
#loc162 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":159:13)
#loc163 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":159:33)
#loc164 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":147:5)
#loc165 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":147:9)
#loc166 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":149:12)
#loc167 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":149:5)
#loc168 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":150:5)
#loc169 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":154:5)
#loc170 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":150:8)
#loc171 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":150:26)
#loc172 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":151:5)
#loc173 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":153:16)
#loc174 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":153:9)
#loc175 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":155:5)
#loc176 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":162:5)
#loc177 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":155:8)
#loc178 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":155:26)
#loc179 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":156:5)
#loc180 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":157:9)
#loc181 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":161:9)
#loc182 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":159:26)
#loc183 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":160:26)
#loc184 = loc("CWE190_Integer_Overflow__int_rand_square_08.c":160:13)
#loc185 = loc(fused[#loc1, #loc2])
#loc186 = loc(fused[#loc3, #loc4])
#loc187 = loc(fused[#loc5, #loc6])
#loc188 = loc(fused[#loc7, #loc8])
#loc189 = loc(fused[#loc9, #loc10])
#loc190 = loc(fused[#loc12, #loc11])
#loc191 = loc(fused[#loc13, #loc14])
#loc192 = loc(fused[#loc15, #loc16])
#loc193 = loc(fused[#loc17, #loc14])
#loc194 = loc(fused[#loc19, #loc18])
#loc195 = loc(fused[#loc20, #loc21])
#loc196 = loc(fused[#loc22, #loc23])
#loc197 = loc(fused[#loc24, #loc21])
#loc198 = loc(fused[#loc25, #loc26])
#loc199 = loc(fused[#loc30, #loc31])
#loc200 = loc(fused[#loc32, #loc33])
#loc201 = loc(fused[#loc34, #loc35])
#loc202 = loc(fused[#loc36, #loc37])
#loc203 = loc(fused[#loc38, #loc39])
#loc204 = loc(fused[#loc40, #loc41])
#loc205 = loc(fused[#loc43, #loc42])
#loc206 = loc(fused[#loc44, #loc45])
#loc207 = loc(fused[#loc49, #loc50])
#loc208 = loc(fused[#loc51, #loc52])
#loc209 = loc(fused[#loc53, #loc54])
#loc210 = loc(fused[#loc56, #loc55])
#loc211 = loc(fused[#loc57, #loc58])
#loc212 = loc(fused[#loc59, #loc60])
#loc213 = loc(fused[#loc61, #loc58])
#loc214 = loc(fused[#loc63, #loc62])
#loc215 = loc(fused[#loc64, #loc65])
#loc216 = loc(fused[#loc66, #loc67])
#loc217 = loc(fused[#loc68, #loc69, #loc70, #loc65])
#loc218 = loc(fused[#loc72, #loc73])
#loc219 = loc(fused[#loc74, #loc75])
#loc220 = loc(fused[#loc78, #loc81])
#loc221 = loc(fused[#loc82, #loc83, #loc84, #loc73])
#loc222 = loc(fused[#loc89, #loc90])
#loc223 = loc(fused[#loc92, #loc91])
#loc224 = loc(fused[#loc93, #loc94])
#loc225 = loc(fused[#loc95, #loc96])
#loc226 = loc(fused[#loc97, #loc98])
#loc227 = loc(fused[#loc100, #loc99])
#loc228 = loc(fused[#loc101, #loc102])
#loc229 = loc(fused[#loc103, #loc104])
#loc230 = loc(fused[#loc105, #loc102])
#loc231 = loc(fused[#loc107, #loc106])
#loc232 = loc(fused[#loc108, #loc109])
#loc233 = loc(fused[#loc110, #loc111])
#loc234 = loc(fused[#loc112, #loc109])
#loc235 = loc(fused[#loc113, #loc114])
#loc236 = loc(fused[#loc115, #loc116])
#loc237 = loc(fused[#loc119, #loc122])
#loc238 = loc(fused[#loc123, #loc124, #loc125, #loc114])
#loc239 = loc(fused[#loc131, #loc132])
#loc240 = loc(fused[#loc133, #loc134])
#loc241 = loc(fused[#loc135, #loc136])
#loc242 = loc(fused[#loc138, #loc137])
#loc243 = loc(fused[#loc139, #loc140])
#loc244 = loc(fused[#loc141, #loc142])
#loc245 = loc(fused[#loc143, #loc144, #loc145, #loc140])
#loc246 = loc(fused[#loc149, #loc148])
#loc247 = loc(fused[#loc150, #loc151])
#loc248 = loc(fused[#loc152, #loc153])
#loc249 = loc(fused[#loc154, #loc151])
#loc250 = loc(fused[#loc155, #loc156])
#loc251 = loc(fused[#loc160, #loc161])
#loc252 = loc(fused[#loc162, #loc163])
#loc253 = loc(fused[#loc164, #loc165])
#loc254 = loc(fused[#loc167, #loc166])
#loc255 = loc(fused[#loc168, #loc169])
#loc256 = loc(fused[#loc170, #loc171])
#loc257 = loc(fused[#loc172, #loc169])
#loc258 = loc(fused[#loc174, #loc173])
#loc259 = loc(fused[#loc175, #loc176])
#loc260 = loc(fused[#loc177, #loc178])
#loc261 = loc(fused[#loc179, #loc176])
#loc262 = loc(fused[#loc180, #loc181])
