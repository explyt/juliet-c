!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":65:28)
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc100)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc101)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc102)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc104)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc105)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc14)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    cir.br ^bb1 loc(#loc107)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc107)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc18)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc18)
  ^bb3:  // pred: ^bb2
    %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc19)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc101)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc20)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %10 = cir.call @__isoc99_fscanf(%7, %9, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc19)
    cir.br ^bb4 loc(#loc21)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc17)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc108)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc108)
  ^bb7:  // pred: ^bb6
    %11 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %12 ^bb8, ^bb11 loc(#loc24)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc109)
  ^bb9:  // pred: ^bb8
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc11)
    %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc27)
    cir.store %15, %0 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc29)
    cir.br ^bb10 loc(#loc26)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc30)
  ^bb11:  // 2 preds: ^bb7, ^bb10
    cir.br ^bb12 loc(#loc23)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc9)
  } loc(#loc103)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc111)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc112)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc32)
  } loc(#loc110)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc37)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc113)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc40)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc115)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc116)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc47)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    cir.br ^bb1 loc(#loc118)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc118)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc51)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc51)
  ^bb3:  // pred: ^bb2
    %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc52)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc101)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc53)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc54)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc54)
    %10 = cir.call @__isoc99_fscanf(%7, %9, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc52)
    cir.br ^bb4 loc(#loc55)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc50)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc119)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc119)
  ^bb7:  // pred: ^bb6
    %11 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc58)
    cir.brcond %12 ^bb8, ^bb22 loc(#loc58)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc120)
  ^bb9:  // pred: ^bb8
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    %14 = cir.const #cir.int<2147483647> : !s32i loc(#loc62)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc62)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc62)
    %18 = cir.cmp(gt, %13, %17) : !s32i, !cir.bool loc(#loc121)
    cir.brcond %18 ^bb10, ^bb15 loc(#loc63)
  ^bb10:  // pred: ^bb9
    %19 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    %20 = cir.abs %19 poison : !s32i loc(#loc65)
    %21 = cir.cast(integral, %20 : !s32i), !s64i loc(#loc65)
    %22 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc66)
    %23 = cir.const #cir.int<2147483647> : !s32i loc(#loc67)
    %24 = cir.cast(int_to_float, %23 : !s32i), !cir.double loc(#loc67)
    %25 = cir.call @sqrt(%24) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc66)
    %26 = cir.cast(float_to_int, %25 : !cir.double), !s64i loc(#loc66)
    %27 = cir.cmp(lt, %21, %26) : !s64i, !cir.bool loc(#loc122)
    cir.brcond %27 ^bb11, ^bb12 loc(#loc63)
  ^bb11:  // pred: ^bb10
    %28 = cir.const #true loc(#loc63)
    cir.br ^bb13(%28 : !cir.bool) loc(#loc63)
  ^bb12:  // pred: ^bb10
    %29 = cir.const #false loc(#loc63)
    cir.br ^bb13(%29 : !cir.bool) loc(#loc63)
  ^bb13(%30: !cir.bool loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":65:28)):  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc63)
  ^bb14:  // pred: ^bb13
    cir.br ^bb16(%30 : !cir.bool) loc(#loc63)
  ^bb15:  // pred: ^bb9
    %31 = cir.const #false loc(#loc63)
    cir.br ^bb16(%31 : !cir.bool) loc(#loc63)
  ^bb16(%32: !cir.bool loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":65:28)):  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc63)
  ^bb17:  // pred: ^bb16
    cir.brcond %32 ^bb18, ^bb19 loc(#loc123)
  ^bb18:  // pred: ^bb17
    %33 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc72)
    %34 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    %35 = cir.binop(mul, %33, %34) nsw : !s32i loc(#loc72)
    cir.store %35, %0 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    %36 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
    cir.call @printIntLine(%36) : (!s32i) -> () loc(#loc74)
    cir.br ^bb20 loc(#loc70)
  ^bb19:  // pred: ^bb17
    %37 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc40)
    %38 = cir.cast(array_to_ptrdecay, %37 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%38) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    cir.br ^bb20 loc(#loc60)
  ^bb20:  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc60)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc76)
  ^bb22:  // 2 preds: ^bb7, ^bb21
    cir.br ^bb23 loc(#loc57)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc42)
  } loc(#loc114)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc125)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc126)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc83)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    cir.br ^bb1 loc(#loc128)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc128)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc87)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc87)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<2> : !s32i loc(#loc88)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    cir.br ^bb4 loc(#loc90)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc86)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc130)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc130)
  ^bb7:  // pred: ^bb6
    %6 = cir.const #cir.int<1> : !s32i loc(#loc93)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc93)
    cir.brcond %7 ^bb8, ^bb11 loc(#loc93)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc131)
  ^bb9:  // pred: ^bb8
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc96)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc80)
    %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc96)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc97)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc98)
    cir.br ^bb10 loc(#loc95)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc99)
  ^bb11:  // 2 preds: ^bb7, ^bb10
    cir.br ^bb12 loc(#loc92)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc78)
  } loc(#loc124)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":32:23)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":24:1)
#loc9 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":44:1)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":39:13)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":39:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":26:5)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":26:9)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":28:12)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":28:5)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":29:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":34:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":29:11)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":32:9)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":32:16)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":33:9)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":35:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":43:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":35:11)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":37:9)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":41:9)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":39:26)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":40:26)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":40:13)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":42:9)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":101:1)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":105:1)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":103:5)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":103:13)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":104:5)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":104:13)
#loc37 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":72:23)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":51:1)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":76:1)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":67:13)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":67:33)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":53:5)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":53:9)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":55:12)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":55:5)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":56:5)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":61:5)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":56:11)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":59:9)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":59:16)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":59:23)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":60:9)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":62:5)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":75:5)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":62:11)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":65:9)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":73:9)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":65:13)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":65:20)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":65:35)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":65:31)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":65:49)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":65:62)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":65:69)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":66:9)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":69:9)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":71:9)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":67:26)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":68:26)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":68:13)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":72:13)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":74:9)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":79:1)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":99:1)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":94:13)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":94:33)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":81:5)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":81:9)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":83:12)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":83:5)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":84:5)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":89:5)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":84:11)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":87:16)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":87:9)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":88:9)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":90:5)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":98:5)
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":90:11)
#loc94 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":92:9)
#loc95 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":96:9)
#loc96 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":94:26)
#loc97 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":95:26)
#loc98 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":95:13)
#loc99 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":97:9)
#loc100 = loc(fused[#loc1, #loc2])
#loc101 = loc(fused[#loc3, #loc4])
#loc102 = loc(fused[#loc6, #loc7])
#loc103 = loc(fused[#loc8, #loc9])
#loc104 = loc(fused[#loc10, #loc11])
#loc105 = loc(fused[#loc12, #loc13])
#loc106 = loc(fused[#loc15, #loc14])
#loc107 = loc(fused[#loc16, #loc17])
#loc108 = loc(fused[#loc22, #loc23])
#loc109 = loc(fused[#loc25, #loc26])
#loc110 = loc(fused[#loc31, #loc32])
#loc111 = loc(fused[#loc33, #loc34])
#loc112 = loc(fused[#loc35, #loc36])
#loc113 = loc(fused[#loc38, #loc39])
#loc114 = loc(fused[#loc41, #loc42])
#loc115 = loc(fused[#loc43, #loc44])
#loc116 = loc(fused[#loc45, #loc46])
#loc117 = loc(fused[#loc48, #loc47])
#loc118 = loc(fused[#loc49, #loc50])
#loc119 = loc(fused[#loc56, #loc57])
#loc120 = loc(fused[#loc59, #loc60])
#loc121 = loc(fused[#loc61, #loc62])
#loc122 = loc(fused[#loc65, #loc68])
#loc123 = loc(fused[#loc69, #loc70, #loc71, #loc60])
#loc124 = loc(fused[#loc77, #loc78])
#loc125 = loc(fused[#loc79, #loc80])
#loc126 = loc(fused[#loc81, #loc82])
#loc127 = loc(fused[#loc84, #loc83])
#loc128 = loc(fused[#loc85, #loc86])
#loc129 = loc(fused[#loc89, #loc88])
#loc130 = loc(fused[#loc91, #loc92])
#loc131 = loc(fused[#loc94, #loc95])
