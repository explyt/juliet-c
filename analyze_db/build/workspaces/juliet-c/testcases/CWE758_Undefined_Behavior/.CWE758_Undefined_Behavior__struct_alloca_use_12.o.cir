!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__twoIntsStruct = !cir.record<struct "_twoIntsStruct" {!s32i, !s32i}>
module @"/workspaces/juliet-c/testcases/CWE758_Undefined_Behavior/CWE758_Undefined_Behavior__struct_alloca_use_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc96)
  cir.func private @printIntLine(!s32i) loc(#loc97)
  cir.func no_proto @CWE758_Undefined_Behavior__struct_alloca_use_12_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc100)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc100)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc9)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc9)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["pointer", init] {alignment = 8 : i64} loc(#loc103)
          %5 = cir.const #cir.int<8> : !u64i loc(#loc17)
          %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc17)
          %7 = cir.alloca !ty__twoIntsStruct, !cir.ptr<!ty__twoIntsStruct>, ["data", init] {alignment = 4 : i64} loc(#loc104)
          %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc17)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc17)
          cir.store %9, %4 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc103)
          %10 = cir.load deref %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc19)
          cir.copy %10 to %7 : !cir.ptr<!ty__twoIntsStruct> loc(#loc104)
          %11 = cir.get_member %7[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc20)
          %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc21)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc22)
          %13 = cir.get_member %7[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc23)
          %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc24)
          cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc25)
        } loc(#loc102)
      } else {
        cir.scope {
          %4 = cir.alloca !ty__twoIntsStruct, !cir.ptr<!ty__twoIntsStruct>, ["data"] {alignment = 4 : i64} loc(#loc106)
          %5 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["pointer", init] {alignment = 8 : i64} loc(#loc107)
          %6 = cir.const #cir.int<8> : !u64i loc(#loc31)
          %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc31)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc31)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc31)
          cir.store %9, %5 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc107)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc32)
          %11 = cir.get_member %4[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc20)
          cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc108)
          %12 = cir.const #cir.int<2> : !s32i loc(#loc34)
          %13 = cir.get_member %4[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc23)
          cir.store %12, %13 : !s32i, !cir.ptr<!s32i> loc(#loc109)
          %14 = cir.load deref %5 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc36)
          cir.copy %4 to %14 : !cir.ptr<!ty__twoIntsStruct> loc(#loc36)
          cir.scope {
            %15 = cir.alloca !ty__twoIntsStruct, !cir.ptr<!ty__twoIntsStruct>, ["data", init] {alignment = 4 : i64} loc(#loc111)
            %16 = cir.load deref %5 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc40)
            cir.copy %16 to %15 : !cir.ptr<!ty__twoIntsStruct> loc(#loc111)
            %17 = cir.get_member %15[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc20)
            %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc41)
            cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc42)
            %19 = cir.get_member %15[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc23)
            %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc43)
            cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc44)
          } loc(#loc110)
        } loc(#loc105)
      } loc(#loc101)
    } loc(#loc99)
    cir.return loc(#loc6)
  } loc(#loc98)
  cir.func no_proto @CWE758_Undefined_Behavior__struct_alloca_use_12_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc113)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc47)
    cir.return loc(#loc46)
  } loc(#loc112)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc116)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc116)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc53)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc53)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !ty__twoIntsStruct, !cir.ptr<!ty__twoIntsStruct>, ["data"] {alignment = 4 : i64} loc(#loc119)
          %5 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["pointer", init] {alignment = 8 : i64} loc(#loc120)
          %6 = cir.const #cir.int<8> : !u64i loc(#loc63)
          %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc63)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc63)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc63)
          cir.store %9, %5 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc120)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc64)
          %11 = cir.get_member %4[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc20)
          cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc121)
          %12 = cir.const #cir.int<2> : !s32i loc(#loc66)
          %13 = cir.get_member %4[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc23)
          cir.store %12, %13 : !s32i, !cir.ptr<!s32i> loc(#loc122)
          %14 = cir.load deref %5 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc68)
          cir.copy %4 to %14 : !cir.ptr<!ty__twoIntsStruct> loc(#loc68)
          cir.scope {
            %15 = cir.alloca !ty__twoIntsStruct, !cir.ptr<!ty__twoIntsStruct>, ["data", init] {alignment = 4 : i64} loc(#loc124)
            %16 = cir.load deref %5 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc72)
            cir.copy %16 to %15 : !cir.ptr<!ty__twoIntsStruct> loc(#loc124)
            %17 = cir.get_member %15[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc20)
            %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc73)
            cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc74)
            %19 = cir.get_member %15[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc23)
            %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc75)
            cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc76)
          } loc(#loc123)
        } loc(#loc118)
      } else {
        cir.scope {
          %4 = cir.alloca !ty__twoIntsStruct, !cir.ptr<!ty__twoIntsStruct>, ["data"] {alignment = 4 : i64} loc(#loc126)
          %5 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["pointer", init] {alignment = 8 : i64} loc(#loc127)
          %6 = cir.const #cir.int<8> : !u64i loc(#loc82)
          %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc82)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc82)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc82)
          cir.store %9, %5 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc127)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc83)
          %11 = cir.get_member %4[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc20)
          cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc128)
          %12 = cir.const #cir.int<2> : !s32i loc(#loc85)
          %13 = cir.get_member %4[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc23)
          cir.store %12, %13 : !s32i, !cir.ptr<!s32i> loc(#loc129)
          %14 = cir.load deref %5 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc87)
          cir.copy %4 to %14 : !cir.ptr<!ty__twoIntsStruct> loc(#loc87)
          cir.scope {
            %15 = cir.alloca !ty__twoIntsStruct, !cir.ptr<!ty__twoIntsStruct>, ["data", init] {alignment = 4 : i64} loc(#loc131)
            %16 = cir.load deref %5 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc91)
            cir.copy %16 to %15 : !cir.ptr<!ty__twoIntsStruct> loc(#loc131)
            %17 = cir.get_member %15[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc20)
            %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc92)
            cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc93)
            %19 = cir.get_member %15[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc23)
            %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc94)
            cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc95)
          } loc(#loc130)
        } loc(#loc125)
      } loc(#loc117)
    } loc(#loc115)
    cir.return loc(#loc50)
  } loc(#loc114)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE758_Undefined_Behavior/CWE758_Undefined_Behavior__struct_alloca_use_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":20:1)
#loc6 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":46:1)
#loc7 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":22:5)
#loc8 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":45:5)
#loc9 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":22:8)
#loc10 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":22:33)
#loc11 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":23:5)
#loc12 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":30:5)
#loc13 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":32:5)
#loc14 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":24:9)
#loc15 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":29:9)
#loc16 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":25:13)
#loc17 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":25:56)
#loc18 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":26:13)
#loc19 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":26:35)
#loc20 = loc("../../testcasesupport/std_testcase.h":98:9)
#loc21 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":27:31)
#loc22 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":27:13)
#loc23 = loc("../../testcasesupport/std_testcase.h":99:9)
#loc24 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":28:31)
#loc25 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":28:13)
#loc26 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":33:9)
#loc27 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":44:9)
#loc28 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":34:13)
#loc29 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":34:27)
#loc30 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":35:13)
#loc31 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":35:56)
#loc32 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":36:27)
#loc33 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":36:13)
#loc34 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":37:27)
#loc35 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":37:13)
#loc36 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":38:14)
#loc37 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":39:13)
#loc38 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":43:13)
#loc39 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":40:17)
#loc40 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":40:39)
#loc41 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":41:35)
#loc42 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":41:17)
#loc43 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":42:35)
#loc44 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":42:17)
#loc45 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":87:1)
#loc46 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":90:1)
#loc47 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":89:5)
#loc48 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":89:11)
#loc49 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":53:1)
#loc50 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":85:1)
#loc51 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":55:5)
#loc52 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":84:5)
#loc53 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":55:8)
#loc54 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":55:33)
#loc55 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":56:5)
#loc56 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":69:5)
#loc57 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":71:5)
#loc58 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":57:9)
#loc59 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":68:9)
#loc60 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":58:13)
#loc61 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":58:27)
#loc62 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":59:13)
#loc63 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":59:56)
#loc64 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":60:27)
#loc65 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":60:13)
#loc66 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":61:27)
#loc67 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":61:13)
#loc68 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":62:14)
#loc69 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":63:13)
#loc70 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":67:13)
#loc71 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":64:17)
#loc72 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":64:39)
#loc73 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":65:35)
#loc74 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":65:17)
#loc75 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":66:35)
#loc76 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":66:17)
#loc77 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":72:9)
#loc78 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":83:9)
#loc79 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":73:13)
#loc80 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":73:27)
#loc81 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":74:13)
#loc82 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":74:56)
#loc83 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":75:27)
#loc84 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":75:13)
#loc85 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":76:27)
#loc86 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":76:13)
#loc87 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":77:14)
#loc88 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":78:13)
#loc89 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":82:13)
#loc90 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":79:17)
#loc91 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":79:39)
#loc92 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":80:35)
#loc93 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":80:17)
#loc94 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":81:35)
#loc95 = loc("CWE758_Undefined_Behavior__struct_alloca_use_12.c":81:17)
#loc96 = loc(fused[#loc1, #loc2])
#loc97 = loc(fused[#loc3, #loc4])
#loc98 = loc(fused[#loc5, #loc6])
#loc99 = loc(fused[#loc7, #loc8])
#loc100 = loc(fused[#loc9, #loc10])
#loc101 = loc(fused[#loc11, #loc12, #loc13, #loc8])
#loc102 = loc(fused[#loc14, #loc15])
#loc103 = loc(fused[#loc16, #loc17])
#loc104 = loc(fused[#loc18, #loc19])
#loc105 = loc(fused[#loc26, #loc27])
#loc106 = loc(fused[#loc28, #loc29])
#loc107 = loc(fused[#loc30, #loc31])
#loc108 = loc(fused[#loc33, #loc32])
#loc109 = loc(fused[#loc35, #loc34])
#loc110 = loc(fused[#loc37, #loc38])
#loc111 = loc(fused[#loc39, #loc40])
#loc112 = loc(fused[#loc45, #loc46])
#loc113 = loc(fused[#loc47, #loc48])
#loc114 = loc(fused[#loc49, #loc50])
#loc115 = loc(fused[#loc51, #loc52])
#loc116 = loc(fused[#loc53, #loc54])
#loc117 = loc(fused[#loc55, #loc56, #loc57, #loc52])
#loc118 = loc(fused[#loc58, #loc59])
#loc119 = loc(fused[#loc60, #loc61])
#loc120 = loc(fused[#loc62, #loc63])
#loc121 = loc(fused[#loc65, #loc64])
#loc122 = loc(fused[#loc67, #loc66])
#loc123 = loc(fused[#loc69, #loc70])
#loc124 = loc(fused[#loc71, #loc72])
#loc125 = loc(fused[#loc77, #loc78])
#loc126 = loc(fused[#loc79, #loc80])
#loc127 = loc(fused[#loc81, #loc82])
#loc128 = loc(fused[#loc84, #loc83])
#loc129 = loc(fused[#loc86, #loc85])
#loc130 = loc(fused[#loc88, #loc89])
#loc131 = loc(fused[#loc90, #loc91])
