!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc208 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":396:10)
#loc209 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":396:14)
#loc210 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":396:20)
#loc211 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":396:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc638 = loc(fused[#loc208, #loc209])
#loc639 = loc(fused[#loc210, #loc211])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_listen_socket_multiply_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc556)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc557)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc558)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc559)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc560)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc561)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc562)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc563)
  cir.func private @close(!s32i) -> !s32i loc(#loc564)
  cir.func private @printIntLine(!s32i) loc(#loc565)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc566)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc23)
  cir.func no_proto @CWE191_Integer_Underflow__int_listen_socket_multiply_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc568)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc28)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc569)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc571)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc571)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc32)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc32)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc574)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc575)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc576)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc577)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc578)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc44)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc44)
          cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc576)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc46)
          %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc46)
          cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc577)
          cir.scope {
            cir.do {
              %15 = cir.const #cir.int<2> : !s32i loc(#loc51)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc52)
              %17 = cir.const #cir.int<6> : !s32i loc(#loc53)
              %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc54)
              cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc580)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc59)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc60)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc60)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc582)
                cir.if %63 {
                  cir.break loc(#loc62)
                } loc(#loc583)
              } loc(#loc581)
              %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc584)
              %20 = cir.const #cir.int<0> : !s32i loc(#loc65)
              %21 = cir.const #cir.int<16> : !u64i loc(#loc585)
              cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc586)
              %22 = cir.const #cir.int<2> : !s32i loc(#loc70)
              %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc70)
              %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
              cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc587)
              %25 = cir.const #cir.int<0> : !s32i loc(#loc73)
              %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc73)
              %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
              %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
              cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc588)
              %29 = cir.const #cir.int<27015> : !s32i loc(#loc77)
              %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc77)
              %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc78)
              %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
              cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc589)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc84)
                %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc591)
                %62 = cir.const #cir.int<16> : !u64i loc(#loc592)
                %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc592)
                %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc89)
                %65 = cir.const #cir.int<1> : !s32i loc(#loc90)
                %66 = cir.unary(minus, %65) : !s32i, !s32i loc(#loc90)
                %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc593)
                cir.if %67 {
                  cir.break loc(#loc92)
                } loc(#loc594)
              } loc(#loc590)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc95)
                %61 = cir.const #cir.int<5> : !s32i loc(#loc96)
                %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc97)
                %63 = cir.const #cir.int<1> : !s32i loc(#loc98)
                %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc98)
                %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc596)
                cir.if %65 {
                  cir.break loc(#loc100)
                } loc(#loc597)
              } loc(#loc595)
              %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc101)
              %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc102)
              %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc103)
              %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc104)
              cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc598)
              cir.scope {
                %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc109)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc110)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc110)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc600)
                cir.if %63 {
                  cir.break loc(#loc112)
                } loc(#loc601)
              } loc(#loc599)
              %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc113)
              %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc114)
              %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc114)
              %40 = cir.const #cir.int<3> : !s32i loc(#loc115)
              %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc115)
              %42 = cir.const #cir.int<4> : !u64i loc(#loc115)
              %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc115)
              %44 = cir.const #cir.int<2> : !s32i loc(#loc115)
              %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc115)
              %46 = cir.binop(add, %43, %45) : !u64i loc(#loc115)
              %47 = cir.const #cir.int<1> : !s32i loc(#loc116)
              %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc116)
              %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc602)
              %50 = cir.const #cir.int<0> : !s32i loc(#loc117)
              %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc118)
              %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc118)
              cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc603)
              cir.scope {
                %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc123)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc124)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc124)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc605)
                %64 = cir.ternary(%63, true {
                  %65 = cir.const #true loc(#loc125)
                  cir.yield %65 : !cir.bool loc(#loc125)
                }, false {
                  %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc126)
                  %66 = cir.const #cir.int<0> : !s32i loc(#loc127)
                  %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc606)
                  %68 = cir.ternary(%67, true {
                    %69 = cir.const #true loc(#loc125)
                    cir.yield %69 : !cir.bool loc(#loc125)
                  }, false {
                    %69 = cir.const #false loc(#loc125)
                    cir.yield %69 : !cir.bool loc(#loc125)
                  }) : (!cir.bool) -> !cir.bool loc(#loc125)
                  cir.yield %68 : !cir.bool loc(#loc125)
                }) : (!cir.bool) -> !cir.bool loc(#loc125)
                cir.if %64 {
                  cir.break loc(#loc129)
                } loc(#loc607)
              } loc(#loc604)
              %53 = cir.const #cir.int<0> : !s32i loc(#loc130)
              %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc130)
              %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc131)
              %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc132)
              %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc132)
              cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc608)
              %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc133)
              %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc134)
              cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc609)
              cir.yield loc(#loc50)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc137)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc137)
              cir.condition(%16) loc(#loc137)
            } loc(#loc579)
          } loc(#loc579)
          cir.scope {
            %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc140)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc141)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc141)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc611)
            cir.if %18 {
              %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc143)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc144)
            } loc(#loc612)
          } loc(#loc610)
          cir.scope {
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc147)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc148)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc148)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc614)
            cir.if %18 {
              %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc150)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc151)
            } loc(#loc615)
          } loc(#loc613)
        } loc(#loc573)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc152)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc153)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc616)
      } loc(#loc572)
    } loc(#loc570)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc618)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc618)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc157)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc157)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc164)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc165)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc621)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc623)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc169)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc168)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc169)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc623)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc170)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc171)
          } loc(#loc622)
        } loc(#loc620)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc174)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc175)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc625)
          cir.if %8 {
            cir.scope {
              %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc179)
              %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc180)
              %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc180)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc180)
              %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc180)
              %14 = cir.const #cir.int<2> : !s32i loc(#loc181)
              %15 = cir.binop(div, %13, %14) : !s32i loc(#loc628)
              %16 = cir.cmp(gt, %9, %15) : !s32i, !cir.bool loc(#loc629)
              cir.if %16 {
                %17 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc631)
                %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc188)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc187)
                %20 = cir.binop(mul, %18, %19) nsw : !s32i loc(#loc188)
                cir.store %20, %17 : !s32i, !cir.ptr<!s32i> loc(#loc631)
                %21 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc189)
                cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc190)
              } else {
                %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc23)
                %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc23)
                cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc191)
              } loc(#loc630)
            } loc(#loc627)
          } loc(#loc626)
        } loc(#loc624)
      } loc(#loc619)
    } loc(#loc617)
    cir.return loc(#loc25)
  } loc(#loc567)
  cir.func no_proto @CWE191_Integer_Underflow__int_listen_socket_multiply_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc633)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc194)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc634)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc196)
    cir.return loc(#loc193)
  } loc(#loc632)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc635)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc636)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc202)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc203)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc204)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc205)
  cir.func @main(%arg0: !s32i loc(fused[#loc208, #loc209]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc210, #loc211])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc638)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc639)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc207)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc212)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc213)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc214)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc214)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc215)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc202)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc202)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc216)
    %8 = cir.get_global @CWE191_Integer_Underflow__int_listen_socket_multiply_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc640)
    cir.call @CWE191_Integer_Underflow__int_listen_socket_multiply_12_good() : () -> () loc(#loc217)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc203)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc203)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc219)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc204)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc204)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc220)
    %13 = cir.get_global @CWE191_Integer_Underflow__int_listen_socket_multiply_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc641)
    cir.call @CWE191_Integer_Underflow__int_listen_socket_multiply_12_bad() : () -> () loc(#loc221)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc205)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc205)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc223)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc224)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc642)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc642)
    cir.return %17 : !s32i loc(#loc642)
  } loc(#loc637)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc644)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc230)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc645)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc647)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc647)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc234)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc234)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc650)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc651)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc652)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc653)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc654)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc246)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc246)
          cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc652)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc248)
          %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc248)
          cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc653)
          cir.scope {
            cir.do {
              %15 = cir.const #cir.int<2> : !s32i loc(#loc253)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc254)
              %17 = cir.const #cir.int<6> : !s32i loc(#loc255)
              %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc256)
              cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc656)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc261)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc262)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc262)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc658)
                cir.if %63 {
                  cir.break loc(#loc264)
                } loc(#loc659)
              } loc(#loc657)
              %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc660)
              %20 = cir.const #cir.int<0> : !s32i loc(#loc267)
              %21 = cir.const #cir.int<16> : !u64i loc(#loc661)
              cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc662)
              %22 = cir.const #cir.int<2> : !s32i loc(#loc272)
              %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc272)
              %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
              cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc663)
              %25 = cir.const #cir.int<0> : !s32i loc(#loc274)
              %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc274)
              %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
              %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
              cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc664)
              %29 = cir.const #cir.int<27015> : !s32i loc(#loc276)
              %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc276)
              %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc277)
              %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
              cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc665)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc282)
                %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc667)
                %62 = cir.const #cir.int<16> : !u64i loc(#loc668)
                %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc668)
                %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc287)
                %65 = cir.const #cir.int<1> : !s32i loc(#loc288)
                %66 = cir.unary(minus, %65) : !s32i, !s32i loc(#loc288)
                %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc669)
                cir.if %67 {
                  cir.break loc(#loc290)
                } loc(#loc670)
              } loc(#loc666)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc293)
                %61 = cir.const #cir.int<5> : !s32i loc(#loc294)
                %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc295)
                %63 = cir.const #cir.int<1> : !s32i loc(#loc296)
                %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc296)
                %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc672)
                cir.if %65 {
                  cir.break loc(#loc298)
                } loc(#loc673)
              } loc(#loc671)
              %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc299)
              %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc300)
              %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc301)
              %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc302)
              cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc674)
              cir.scope {
                %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc307)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc308)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc308)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc676)
                cir.if %63 {
                  cir.break loc(#loc310)
                } loc(#loc677)
              } loc(#loc675)
              %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc311)
              %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc312)
              %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc312)
              %40 = cir.const #cir.int<3> : !s32i loc(#loc313)
              %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc313)
              %42 = cir.const #cir.int<4> : !u64i loc(#loc313)
              %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc313)
              %44 = cir.const #cir.int<2> : !s32i loc(#loc313)
              %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc313)
              %46 = cir.binop(add, %43, %45) : !u64i loc(#loc313)
              %47 = cir.const #cir.int<1> : !s32i loc(#loc314)
              %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc314)
              %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc678)
              %50 = cir.const #cir.int<0> : !s32i loc(#loc315)
              %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc316)
              %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc316)
              cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc679)
              cir.scope {
                %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc321)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc322)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc322)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc681)
                %64 = cir.ternary(%63, true {
                  %65 = cir.const #true loc(#loc323)
                  cir.yield %65 : !cir.bool loc(#loc323)
                }, false {
                  %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc324)
                  %66 = cir.const #cir.int<0> : !s32i loc(#loc325)
                  %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc682)
                  %68 = cir.ternary(%67, true {
                    %69 = cir.const #true loc(#loc323)
                    cir.yield %69 : !cir.bool loc(#loc323)
                  }, false {
                    %69 = cir.const #false loc(#loc323)
                    cir.yield %69 : !cir.bool loc(#loc323)
                  }) : (!cir.bool) -> !cir.bool loc(#loc323)
                  cir.yield %68 : !cir.bool loc(#loc323)
                }) : (!cir.bool) -> !cir.bool loc(#loc323)
                cir.if %64 {
                  cir.break loc(#loc327)
                } loc(#loc683)
              } loc(#loc680)
              %53 = cir.const #cir.int<0> : !s32i loc(#loc328)
              %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc328)
              %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc329)
              %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc330)
              %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc330)
              cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc684)
              %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc331)
              %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc332)
              cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc685)
              cir.yield loc(#loc252)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc335)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc335)
              cir.condition(%16) loc(#loc335)
            } loc(#loc655)
          } loc(#loc655)
          cir.scope {
            %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc338)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc339)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc339)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc687)
            cir.if %18 {
              %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc341)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc342)
            } loc(#loc688)
          } loc(#loc686)
          cir.scope {
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc345)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc346)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc346)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc690)
            cir.if %18 {
              %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc348)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc349)
            } loc(#loc691)
          } loc(#loc689)
        } loc(#loc649)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc693)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc694)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc695)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc696)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc697)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc357)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc357)
          cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc695)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc359)
          %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc359)
          cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc696)
          cir.scope {
            cir.do {
              %15 = cir.const #cir.int<2> : !s32i loc(#loc364)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc365)
              %17 = cir.const #cir.int<6> : !s32i loc(#loc366)
              %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc367)
              cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc699)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc372)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc373)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc373)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc701)
                cir.if %63 {
                  cir.break loc(#loc375)
                } loc(#loc702)
              } loc(#loc700)
              %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc703)
              %20 = cir.const #cir.int<0> : !s32i loc(#loc378)
              %21 = cir.const #cir.int<16> : !u64i loc(#loc704)
              cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc705)
              %22 = cir.const #cir.int<2> : !s32i loc(#loc383)
              %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc383)
              %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
              cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc706)
              %25 = cir.const #cir.int<0> : !s32i loc(#loc385)
              %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc385)
              %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
              %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
              cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc707)
              %29 = cir.const #cir.int<27015> : !s32i loc(#loc387)
              %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc387)
              %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc388)
              %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
              cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc708)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc393)
                %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc710)
                %62 = cir.const #cir.int<16> : !u64i loc(#loc711)
                %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc711)
                %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc398)
                %65 = cir.const #cir.int<1> : !s32i loc(#loc399)
                %66 = cir.unary(minus, %65) : !s32i, !s32i loc(#loc399)
                %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc712)
                cir.if %67 {
                  cir.break loc(#loc401)
                } loc(#loc713)
              } loc(#loc709)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc404)
                %61 = cir.const #cir.int<5> : !s32i loc(#loc405)
                %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc406)
                %63 = cir.const #cir.int<1> : !s32i loc(#loc407)
                %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc407)
                %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc715)
                cir.if %65 {
                  cir.break loc(#loc409)
                } loc(#loc716)
              } loc(#loc714)
              %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc410)
              %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc411)
              %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc412)
              %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc413)
              cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc717)
              cir.scope {
                %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc418)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc419)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc419)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc719)
                cir.if %63 {
                  cir.break loc(#loc421)
                } loc(#loc720)
              } loc(#loc718)
              %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc422)
              %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc423)
              %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc423)
              %40 = cir.const #cir.int<3> : !s32i loc(#loc424)
              %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc424)
              %42 = cir.const #cir.int<4> : !u64i loc(#loc424)
              %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc424)
              %44 = cir.const #cir.int<2> : !s32i loc(#loc424)
              %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc424)
              %46 = cir.binop(add, %43, %45) : !u64i loc(#loc424)
              %47 = cir.const #cir.int<1> : !s32i loc(#loc425)
              %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc425)
              %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc721)
              %50 = cir.const #cir.int<0> : !s32i loc(#loc426)
              %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc427)
              %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc427)
              cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc722)
              cir.scope {
                %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc432)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc433)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc433)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc724)
                %64 = cir.ternary(%63, true {
                  %65 = cir.const #true loc(#loc434)
                  cir.yield %65 : !cir.bool loc(#loc434)
                }, false {
                  %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc435)
                  %66 = cir.const #cir.int<0> : !s32i loc(#loc436)
                  %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc725)
                  %68 = cir.ternary(%67, true {
                    %69 = cir.const #true loc(#loc434)
                    cir.yield %69 : !cir.bool loc(#loc434)
                  }, false {
                    %69 = cir.const #false loc(#loc434)
                    cir.yield %69 : !cir.bool loc(#loc434)
                  }) : (!cir.bool) -> !cir.bool loc(#loc434)
                  cir.yield %68 : !cir.bool loc(#loc434)
                }) : (!cir.bool) -> !cir.bool loc(#loc434)
                cir.if %64 {
                  cir.break loc(#loc438)
                } loc(#loc726)
              } loc(#loc723)
              %53 = cir.const #cir.int<0> : !s32i loc(#loc439)
              %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc439)
              %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc440)
              %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc441)
              %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc441)
              cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc727)
              %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc442)
              %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc443)
              cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc728)
              cir.yield loc(#loc363)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc446)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc446)
              cir.condition(%16) loc(#loc446)
            } loc(#loc698)
          } loc(#loc698)
          cir.scope {
            %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc449)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc450)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc450)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc730)
            cir.if %18 {
              %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc452)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc453)
            } loc(#loc731)
          } loc(#loc729)
          cir.scope {
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc456)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc457)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc457)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc733)
            cir.if %18 {
              %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc459)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc460)
            } loc(#loc734)
          } loc(#loc732)
        } loc(#loc692)
      } loc(#loc648)
    } loc(#loc646)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc736)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc736)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc463)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc463)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc470)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc471)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc739)
          cir.if %8 {
            cir.scope {
              %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc475)
              %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc476)
              %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc476)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc476)
              %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc476)
              %14 = cir.const #cir.int<2> : !s32i loc(#loc477)
              %15 = cir.binop(div, %13, %14) : !s32i loc(#loc742)
              %16 = cir.cmp(gt, %9, %15) : !s32i, !cir.bool loc(#loc743)
              cir.if %16 {
                %17 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc745)
                %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc484)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc483)
                %20 = cir.binop(mul, %18, %19) nsw : !s32i loc(#loc484)
                cir.store %20, %17 : !s32i, !cir.ptr<!s32i> loc(#loc745)
                %21 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc485)
                cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc486)
              } else {
                %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc487)
                %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc487)
                cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc488)
              } loc(#loc744)
            } loc(#loc741)
          } loc(#loc740)
        } loc(#loc738)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc491)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc492)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc747)
          cir.if %8 {
            cir.scope {
              %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc496)
              %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc497)
              %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc497)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc497)
              %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc497)
              %14 = cir.const #cir.int<2> : !s32i loc(#loc498)
              %15 = cir.binop(div, %13, %14) : !s32i loc(#loc750)
              %16 = cir.cmp(gt, %9, %15) : !s32i, !cir.bool loc(#loc751)
              cir.if %16 {
                %17 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc753)
                %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc505)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc504)
                %20 = cir.binop(mul, %18, %19) nsw : !s32i loc(#loc505)
                cir.store %20, %17 : !s32i, !cir.ptr<!s32i> loc(#loc753)
                %21 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc506)
                cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc507)
              } else {
                %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc508)
                %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc508)
                cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc509)
              } loc(#loc752)
            } loc(#loc749)
          } loc(#loc748)
        } loc(#loc746)
      } loc(#loc737)
    } loc(#loc735)
    cir.return loc(#loc227)
  } loc(#loc643)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc755)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc514)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc756)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc758)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc758)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc518)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc518)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc523)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc524)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc760)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc526)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc527)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc761)
      } loc(#loc759)
    } loc(#loc757)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc763)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc763)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc531)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc531)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc538)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc539)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc766)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc768)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc543)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc542)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc543)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc768)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc544)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc545)
          } loc(#loc767)
        } loc(#loc765)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc548)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc549)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc770)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc772)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc553)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc552)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc553)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc772)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc554)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc555)
          } loc(#loc771)
        } loc(#loc769)
      } loc(#loc764)
    } loc(#loc762)
    cir.return loc(#loc511)
  } loc(#loc754)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/sys/socket.h":102:1)
#loc4 = loc("/usr/include/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":404:1)
#loc6 = loc("/usr/include/netinet/in.h":405:40)
#loc7 = loc("/usr/include/sys/socket.h":112:1)
#loc8 = loc("/usr/include/sys/socket.h":113:6)
#loc9 = loc("/usr/include/sys/socket.h":296:1)
#loc10 = loc("/usr/include/sys/socket.h":296:39)
#loc11 = loc("/usr/include/sys/socket.h":306:1)
#loc12 = loc("/usr/include/sys/socket.h":307:38)
#loc13 = loc("/usr/include/sys/socket.h":145:1)
#loc14 = loc("/usr/include/sys/socket.h":145:68)
#loc15 = loc("/usr/include/stdlib.h":105:1)
#loc16 = loc("/usr/include/stdlib.h":106:33)
#loc17 = loc("/usr/include/unistd.h":358:1)
#loc18 = loc("/usr/include/unistd.h":358:27)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc23 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":147:27)
#loc24 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":44:1)
#loc25 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":151:1)
#loc26 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":46:5)
#loc27 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":46:9)
#loc28 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":48:12)
#loc29 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":48:5)
#loc30 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":49:5)
#loc31 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":125:5)
#loc32 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":49:8)
#loc33 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":49:33)
#loc34 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":50:5)
#loc35 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":120:5)
#loc36 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":122:5)
#loc37 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":51:9)
#loc38 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":119:9)
#loc39 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":56:13)
#loc40 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":56:17)
#loc41 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":57:13)
#loc42 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":57:32)
#loc43 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":58:13)
#loc44 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":58:35)
#loc45 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":59:13)
#loc46 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":59:35)
#loc47 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":60:13)
#loc48 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":60:45)
#loc49 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":61:13)
#loc50 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":104:21)
#loc51 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":71:39)
#loc52 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":71:48)
#loc53 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":71:61)
#loc54 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":71:32)
#loc55 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":71:17)
#loc56 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":71:72)
#loc57 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":72:17)
#loc58 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":75:17)
#loc59 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":72:21)
#loc60 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":72:37)
#loc61 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":73:17)
#loc62 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":74:21)
#loc63 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":76:24)
#loc64 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":76:25)
#loc65 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":76:34)
#loc66 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":76:37)
#loc67 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":76:51)
#loc68 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":76:17)
#loc69 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":76:52)
#loc70 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":77:38)
#loc71 = loc("/usr/include/netinet/in.h":249:5)
#loc72 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":77:17)
#loc73 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":78:43)
#loc74 = loc("/usr/include/netinet/in.h":251:20)
#loc75 = loc("/usr/include/netinet/in.h":33:15)
#loc76 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":78:17)
#loc77 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":79:42)
#loc78 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":79:36)
#loc79 = loc("/usr/include/netinet/in.h":250:15)
#loc80 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":79:17)
#loc81 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":79:50)
#loc82 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":80:17)
#loc83 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":83:17)
#loc84 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":80:26)
#loc85 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":80:58)
#loc86 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":80:59)
#loc87 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":80:68)
#loc88 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":80:82)
#loc89 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":80:21)
#loc90 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":80:88)
#loc91 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":81:17)
#loc92 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":82:21)
#loc93 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":84:17)
#loc94 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":87:17)
#loc95 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":84:28)
#loc96 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":84:42)
#loc97 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":84:21)
#loc98 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":84:61)
#loc99 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":85:17)
#loc100 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":86:21)
#loc101 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":88:39)
#loc102 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":88:53)
#loc103 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":88:59)
#loc104 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":88:32)
#loc105 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":88:17)
#loc106 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":88:63)
#loc107 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":89:17)
#loc108 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":92:17)
#loc109 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":89:21)
#loc110 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":89:37)
#loc111 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":90:17)
#loc112 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":91:21)
#loc113 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":94:35)
#loc114 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":94:49)
#loc115 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":94:62)
#loc116 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":94:80)
#loc117 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":94:83)
#loc118 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":94:30)
#loc119 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":94:17)
#loc120 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":94:84)
#loc121 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":95:17)
#loc122 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":98:17)
#loc123 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":95:21)
#loc124 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":95:35)
#loc125 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":95:48)
#loc126 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":95:51)
#loc127 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":95:65)
#loc128 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":96:17)
#loc129 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":97:21)
#loc130 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":100:43)
#loc131 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":100:29)
#loc132 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":100:17)
#loc133 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":102:29)
#loc134 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":102:24)
#loc135 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":102:17)
#loc136 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":102:40)
#loc137 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":104:20)
#loc138 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":105:13)
#loc139 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":108:13)
#loc140 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":105:17)
#loc141 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":105:33)
#loc142 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":106:13)
#loc143 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":107:30)
#loc144 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":107:17)
#loc145 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":109:13)
#loc146 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":112:13)
#loc147 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":109:17)
#loc148 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":109:33)
#loc149 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":110:13)
#loc150 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":111:30)
#loc151 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":111:17)
#loc152 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":124:17)
#loc153 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":124:16)
#loc154 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":124:9)
#loc155 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":126:5)
#loc156 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":150:5)
#loc157 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":126:8)
#loc158 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":126:33)
#loc159 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":127:5)
#loc160 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":134:5)
#loc161 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":136:5)
#loc162 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":128:9)
#loc163 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":133:9)
#loc164 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":128:12)
#loc165 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":128:19)
#loc166 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":129:9)
#loc167 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":131:13)
#loc168 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":131:33)
#loc169 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":131:26)
#loc170 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":132:26)
#loc171 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":132:13)
#loc172 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":137:9)
#loc173 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":149:9)
#loc174 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":137:12)
#loc175 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":137:19)
#loc176 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":138:9)
#loc177 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":140:13)
#loc178 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":148:13)
#loc179 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":140:17)
#loc180 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":140:25)
#loc181 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":140:33)
#loc182 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":140:34)
#loc183 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":141:13)
#loc184 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":144:13)
#loc185 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":146:13)
#loc186 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":142:17)
#loc187 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":142:37)
#loc188 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":142:30)
#loc189 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":143:30)
#loc190 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":143:17)
#loc191 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":147:17)
#loc192 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":381:1)
#loc193 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":385:1)
#loc194 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":383:5)
#loc195 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":383:13)
#loc196 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":384:5)
#loc197 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":384:13)
#loc198 = loc("/usr/include/stdlib.h":575:1)
#loc199 = loc("/usr/include/stdlib.h":575:41)
#loc200 = loc("/usr/include/time.h":76:1)
#loc201 = loc("/usr/include/time.h":76:38)
#loc202 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":401:15)
#loc203 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":403:15)
#loc204 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":406:15)
#loc205 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":408:15)
#loc206 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":396:1)
#loc207 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":411:1)
#loc212 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":397:1)
#loc213 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":399:27)
#loc214 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":399:22)
#loc215 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":399:5)
#loc216 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":401:5)
#loc217 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":402:5)
#loc218 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":402:66)
#loc219 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":403:5)
#loc220 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":406:5)
#loc221 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":407:5)
#loc222 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":407:65)
#loc223 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":408:5)
#loc224 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":410:12)
#loc225 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":410:5)
#loc226 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":160:1)
#loc227 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":341:1)
#loc228 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":162:5)
#loc229 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":162:9)
#loc230 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":164:12)
#loc231 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":164:5)
#loc232 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":165:5)
#loc233 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":308:5)
#loc234 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":165:8)
#loc235 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":165:33)
#loc236 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":166:5)
#loc237 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":236:5)
#loc238 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":238:5)
#loc239 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":167:9)
#loc240 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":235:9)
#loc241 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":172:13)
#loc242 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":172:17)
#loc243 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":173:13)
#loc244 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":173:32)
#loc245 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":174:13)
#loc246 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":174:35)
#loc247 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":175:13)
#loc248 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":175:35)
#loc249 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":176:13)
#loc250 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":176:45)
#loc251 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":177:13)
#loc252 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":220:21)
#loc253 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":187:39)
#loc254 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":187:48)
#loc255 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":187:61)
#loc256 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":187:32)
#loc257 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":187:17)
#loc258 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":187:72)
#loc259 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":188:17)
#loc260 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":191:17)
#loc261 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":188:21)
#loc262 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":188:37)
#loc263 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":189:17)
#loc264 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":190:21)
#loc265 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":192:24)
#loc266 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":192:25)
#loc267 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":192:34)
#loc268 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":192:37)
#loc269 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":192:51)
#loc270 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":192:17)
#loc271 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":192:52)
#loc272 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":193:38)
#loc273 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":193:17)
#loc274 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":194:43)
#loc275 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":194:17)
#loc276 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":195:42)
#loc277 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":195:36)
#loc278 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":195:17)
#loc279 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":195:50)
#loc280 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":196:17)
#loc281 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":199:17)
#loc282 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":196:26)
#loc283 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":196:58)
#loc284 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":196:59)
#loc285 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":196:68)
#loc286 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":196:82)
#loc287 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":196:21)
#loc288 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":196:88)
#loc289 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":197:17)
#loc290 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":198:21)
#loc291 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":200:17)
#loc292 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":203:17)
#loc293 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":200:28)
#loc294 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":200:42)
#loc295 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":200:21)
#loc296 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":200:61)
#loc297 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":201:17)
#loc298 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":202:21)
#loc299 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":204:39)
#loc300 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":204:53)
#loc301 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":204:59)
#loc302 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":204:32)
#loc303 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":204:17)
#loc304 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":204:63)
#loc305 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":205:17)
#loc306 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":208:17)
#loc307 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":205:21)
#loc308 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":205:37)
#loc309 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":206:17)
#loc310 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":207:21)
#loc311 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":210:35)
#loc312 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":210:49)
#loc313 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":210:62)
#loc314 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":210:80)
#loc315 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":210:83)
#loc316 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":210:30)
#loc317 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":210:17)
#loc318 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":210:84)
#loc319 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":211:17)
#loc320 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":214:17)
#loc321 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":211:21)
#loc322 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":211:35)
#loc323 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":211:48)
#loc324 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":211:51)
#loc325 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":211:65)
#loc326 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":212:17)
#loc327 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":213:21)
#loc328 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":216:43)
#loc329 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":216:29)
#loc330 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":216:17)
#loc331 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":218:29)
#loc332 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":218:24)
#loc333 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":218:17)
#loc334 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":218:40)
#loc335 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":220:20)
#loc336 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":221:13)
#loc337 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":224:13)
#loc338 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":221:17)
#loc339 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":221:33)
#loc340 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":222:13)
#loc341 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":223:30)
#loc342 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":223:17)
#loc343 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":225:13)
#loc344 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":228:13)
#loc345 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":225:17)
#loc346 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":225:33)
#loc347 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":226:13)
#loc348 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":227:30)
#loc349 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":227:17)
#loc350 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":239:9)
#loc351 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":307:9)
#loc352 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":244:13)
#loc353 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":244:17)
#loc354 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":245:13)
#loc355 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":245:32)
#loc356 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":246:13)
#loc357 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":246:35)
#loc358 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":247:13)
#loc359 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":247:35)
#loc360 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":248:13)
#loc361 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":248:45)
#loc362 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":249:13)
#loc363 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":292:21)
#loc364 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":259:39)
#loc365 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":259:48)
#loc366 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":259:61)
#loc367 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":259:32)
#loc368 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":259:17)
#loc369 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":259:72)
#loc370 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":260:17)
#loc371 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":263:17)
#loc372 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":260:21)
#loc373 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":260:37)
#loc374 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":261:17)
#loc375 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":262:21)
#loc376 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":264:24)
#loc377 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":264:25)
#loc378 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":264:34)
#loc379 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":264:37)
#loc380 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":264:51)
#loc381 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":264:17)
#loc382 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":264:52)
#loc383 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":265:38)
#loc384 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":265:17)
#loc385 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":266:43)
#loc386 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":266:17)
#loc387 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":267:42)
#loc388 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":267:36)
#loc389 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":267:17)
#loc390 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":267:50)
#loc391 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":268:17)
#loc392 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":271:17)
#loc393 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":268:26)
#loc394 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":268:58)
#loc395 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":268:59)
#loc396 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":268:68)
#loc397 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":268:82)
#loc398 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":268:21)
#loc399 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":268:88)
#loc400 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":269:17)
#loc401 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":270:21)
#loc402 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":272:17)
#loc403 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":275:17)
#loc404 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":272:28)
#loc405 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":272:42)
#loc406 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":272:21)
#loc407 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":272:61)
#loc408 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":273:17)
#loc409 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":274:21)
#loc410 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":276:39)
#loc411 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":276:53)
#loc412 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":276:59)
#loc413 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":276:32)
#loc414 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":276:17)
#loc415 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":276:63)
#loc416 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":277:17)
#loc417 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":280:17)
#loc418 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":277:21)
#loc419 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":277:37)
#loc420 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":278:17)
#loc421 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":279:21)
#loc422 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":282:35)
#loc423 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":282:49)
#loc424 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":282:62)
#loc425 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":282:80)
#loc426 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":282:83)
#loc427 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":282:30)
#loc428 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":282:17)
#loc429 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":282:84)
#loc430 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":283:17)
#loc431 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":286:17)
#loc432 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":283:21)
#loc433 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":283:35)
#loc434 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":283:48)
#loc435 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":283:51)
#loc436 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":283:65)
#loc437 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":284:17)
#loc438 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":285:21)
#loc439 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":288:43)
#loc440 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":288:29)
#loc441 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":288:17)
#loc442 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":290:29)
#loc443 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":290:24)
#loc444 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":290:17)
#loc445 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":290:40)
#loc446 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":292:20)
#loc447 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":293:13)
#loc448 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":296:13)
#loc449 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":293:17)
#loc450 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":293:33)
#loc451 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":294:13)
#loc452 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":295:30)
#loc453 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":295:17)
#loc454 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":297:13)
#loc455 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":300:13)
#loc456 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":297:17)
#loc457 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":297:33)
#loc458 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":298:13)
#loc459 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":299:30)
#loc460 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":299:17)
#loc461 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":309:5)
#loc462 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":340:5)
#loc463 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":309:8)
#loc464 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":309:33)
#loc465 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":310:5)
#loc466 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":324:5)
#loc467 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":326:5)
#loc468 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":311:9)
#loc469 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":323:9)
#loc470 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":311:12)
#loc471 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":311:19)
#loc472 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":312:9)
#loc473 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":314:13)
#loc474 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":322:13)
#loc475 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":314:17)
#loc476 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":314:25)
#loc477 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":314:33)
#loc478 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":314:34)
#loc479 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":315:13)
#loc480 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":318:13)
#loc481 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":320:13)
#loc482 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":316:17)
#loc483 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":316:37)
#loc484 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":316:30)
#loc485 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":317:30)
#loc486 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":317:17)
#loc487 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":321:27)
#loc488 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":321:17)
#loc489 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":327:9)
#loc490 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":339:9)
#loc491 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":327:12)
#loc492 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":327:19)
#loc493 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":328:9)
#loc494 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":330:13)
#loc495 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":338:13)
#loc496 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":330:17)
#loc497 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":330:25)
#loc498 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":330:33)
#loc499 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":330:34)
#loc500 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":331:13)
#loc501 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":334:13)
#loc502 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":336:13)
#loc503 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":332:17)
#loc504 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":332:37)
#loc505 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":332:30)
#loc506 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":333:30)
#loc507 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":333:17)
#loc508 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":337:27)
#loc509 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":337:17)
#loc510 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":346:1)
#loc511 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":379:1)
#loc512 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":348:5)
#loc513 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":348:9)
#loc514 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":350:12)
#loc515 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":350:5)
#loc516 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":351:5)
#loc517 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":360:5)
#loc518 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":351:8)
#loc519 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":351:33)
#loc520 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":352:5)
#loc521 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":355:5)
#loc522 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":357:5)
#loc523 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":354:17)
#loc524 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":354:16)
#loc525 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":354:9)
#loc526 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":359:17)
#loc527 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":359:16)
#loc528 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":359:9)
#loc529 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":361:5)
#loc530 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":378:5)
#loc531 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":361:8)
#loc532 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":361:33)
#loc533 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":362:5)
#loc534 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":369:5)
#loc535 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":371:5)
#loc536 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":363:9)
#loc537 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":368:9)
#loc538 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":363:12)
#loc539 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":363:19)
#loc540 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":364:9)
#loc541 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":366:13)
#loc542 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":366:33)
#loc543 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":366:26)
#loc544 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":367:26)
#loc545 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":367:13)
#loc546 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":372:9)
#loc547 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":377:9)
#loc548 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":372:12)
#loc549 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":372:19)
#loc550 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":373:9)
#loc551 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":375:13)
#loc552 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":375:33)
#loc553 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":375:26)
#loc554 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":376:26)
#loc555 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_12.c":376:13)
#loc556 = loc(fused[#loc1, #loc2])
#loc557 = loc(fused[#loc3, #loc4])
#loc558 = loc(fused[#loc5, #loc6])
#loc559 = loc(fused[#loc7, #loc8])
#loc560 = loc(fused[#loc9, #loc10])
#loc561 = loc(fused[#loc11, #loc12])
#loc562 = loc(fused[#loc13, #loc14])
#loc563 = loc(fused[#loc15, #loc16])
#loc564 = loc(fused[#loc17, #loc18])
#loc565 = loc(fused[#loc19, #loc20])
#loc566 = loc(fused[#loc21, #loc22])
#loc567 = loc(fused[#loc24, #loc25])
#loc568 = loc(fused[#loc26, #loc27])
#loc569 = loc(fused[#loc29, #loc28])
#loc570 = loc(fused[#loc30, #loc31])
#loc571 = loc(fused[#loc32, #loc33])
#loc572 = loc(fused[#loc34, #loc35, #loc36, #loc31])
#loc573 = loc(fused[#loc37, #loc38])
#loc574 = loc(fused[#loc39, #loc40])
#loc575 = loc(fused[#loc41, #loc42])
#loc576 = loc(fused[#loc43, #loc44])
#loc577 = loc(fused[#loc45, #loc46])
#loc578 = loc(fused[#loc47, #loc48])
#loc579 = loc(fused[#loc49, #loc50])
#loc580 = loc(fused[#loc55, #loc56])
#loc581 = loc(fused[#loc57, #loc58])
#loc582 = loc(fused[#loc59, #loc60])
#loc583 = loc(fused[#loc61, #loc58])
#loc584 = loc(fused[#loc63, #loc64])
#loc585 = loc(fused[#loc66, #loc67])
#loc586 = loc(fused[#loc68, #loc69])
#loc587 = loc(fused[#loc72, #loc70])
#loc588 = loc(fused[#loc76, #loc73])
#loc589 = loc(fused[#loc80, #loc81])
#loc590 = loc(fused[#loc82, #loc83])
#loc591 = loc(fused[#loc85, #loc86])
#loc592 = loc(fused[#loc87, #loc88])
#loc593 = loc(fused[#loc89, #loc90])
#loc594 = loc(fused[#loc91, #loc83])
#loc595 = loc(fused[#loc93, #loc94])
#loc596 = loc(fused[#loc97, #loc98])
#loc597 = loc(fused[#loc99, #loc94])
#loc598 = loc(fused[#loc105, #loc106])
#loc599 = loc(fused[#loc107, #loc108])
#loc600 = loc(fused[#loc109, #loc110])
#loc601 = loc(fused[#loc111, #loc108])
#loc602 = loc(fused[#loc115, #loc116])
#loc603 = loc(fused[#loc119, #loc120])
#loc604 = loc(fused[#loc121, #loc122])
#loc605 = loc(fused[#loc123, #loc124])
#loc606 = loc(fused[#loc126, #loc127])
#loc607 = loc(fused[#loc128, #loc122])
#loc608 = loc(fused[#loc132, #loc130])
#loc609 = loc(fused[#loc135, #loc136])
#loc610 = loc(fused[#loc138, #loc139])
#loc611 = loc(fused[#loc140, #loc141])
#loc612 = loc(fused[#loc142, #loc139])
#loc613 = loc(fused[#loc145, #loc146])
#loc614 = loc(fused[#loc147, #loc148])
#loc615 = loc(fused[#loc149, #loc146])
#loc616 = loc(fused[#loc154, #loc152])
#loc617 = loc(fused[#loc155, #loc156])
#loc618 = loc(fused[#loc157, #loc158])
#loc619 = loc(fused[#loc159, #loc160, #loc161, #loc156])
#loc620 = loc(fused[#loc162, #loc163])
#loc621 = loc(fused[#loc164, #loc165])
#loc622 = loc(fused[#loc166, #loc163])
#loc623 = loc(fused[#loc167, #loc168])
#loc624 = loc(fused[#loc172, #loc173])
#loc625 = loc(fused[#loc174, #loc175])
#loc626 = loc(fused[#loc176, #loc173])
#loc627 = loc(fused[#loc177, #loc178])
#loc628 = loc(fused[#loc180, #loc181])
#loc629 = loc(fused[#loc179, #loc182])
#loc630 = loc(fused[#loc183, #loc184, #loc185, #loc178])
#loc631 = loc(fused[#loc186, #loc187])
#loc632 = loc(fused[#loc192, #loc193])
#loc633 = loc(fused[#loc194, #loc195])
#loc634 = loc(fused[#loc196, #loc197])
#loc635 = loc(fused[#loc198, #loc199])
#loc636 = loc(fused[#loc200, #loc201])
#loc637 = loc(fused[#loc206, #loc207])
#loc640 = loc(fused[#loc217, #loc218])
#loc641 = loc(fused[#loc221, #loc222])
#loc642 = loc(fused[#loc225, #loc224])
#loc643 = loc(fused[#loc226, #loc227])
#loc644 = loc(fused[#loc228, #loc229])
#loc645 = loc(fused[#loc231, #loc230])
#loc646 = loc(fused[#loc232, #loc233])
#loc647 = loc(fused[#loc234, #loc235])
#loc648 = loc(fused[#loc236, #loc237, #loc238, #loc233])
#loc649 = loc(fused[#loc239, #loc240])
#loc650 = loc(fused[#loc241, #loc242])
#loc651 = loc(fused[#loc243, #loc244])
#loc652 = loc(fused[#loc245, #loc246])
#loc653 = loc(fused[#loc247, #loc248])
#loc654 = loc(fused[#loc249, #loc250])
#loc655 = loc(fused[#loc251, #loc252])
#loc656 = loc(fused[#loc257, #loc258])
#loc657 = loc(fused[#loc259, #loc260])
#loc658 = loc(fused[#loc261, #loc262])
#loc659 = loc(fused[#loc263, #loc260])
#loc660 = loc(fused[#loc265, #loc266])
#loc661 = loc(fused[#loc268, #loc269])
#loc662 = loc(fused[#loc270, #loc271])
#loc663 = loc(fused[#loc273, #loc272])
#loc664 = loc(fused[#loc275, #loc274])
#loc665 = loc(fused[#loc278, #loc279])
#loc666 = loc(fused[#loc280, #loc281])
#loc667 = loc(fused[#loc283, #loc284])
#loc668 = loc(fused[#loc285, #loc286])
#loc669 = loc(fused[#loc287, #loc288])
#loc670 = loc(fused[#loc289, #loc281])
#loc671 = loc(fused[#loc291, #loc292])
#loc672 = loc(fused[#loc295, #loc296])
#loc673 = loc(fused[#loc297, #loc292])
#loc674 = loc(fused[#loc303, #loc304])
#loc675 = loc(fused[#loc305, #loc306])
#loc676 = loc(fused[#loc307, #loc308])
#loc677 = loc(fused[#loc309, #loc306])
#loc678 = loc(fused[#loc313, #loc314])
#loc679 = loc(fused[#loc317, #loc318])
#loc680 = loc(fused[#loc319, #loc320])
#loc681 = loc(fused[#loc321, #loc322])
#loc682 = loc(fused[#loc324, #loc325])
#loc683 = loc(fused[#loc326, #loc320])
#loc684 = loc(fused[#loc330, #loc328])
#loc685 = loc(fused[#loc333, #loc334])
#loc686 = loc(fused[#loc336, #loc337])
#loc687 = loc(fused[#loc338, #loc339])
#loc688 = loc(fused[#loc340, #loc337])
#loc689 = loc(fused[#loc343, #loc344])
#loc690 = loc(fused[#loc345, #loc346])
#loc691 = loc(fused[#loc347, #loc344])
#loc692 = loc(fused[#loc350, #loc351])
#loc693 = loc(fused[#loc352, #loc353])
#loc694 = loc(fused[#loc354, #loc355])
#loc695 = loc(fused[#loc356, #loc357])
#loc696 = loc(fused[#loc358, #loc359])
#loc697 = loc(fused[#loc360, #loc361])
#loc698 = loc(fused[#loc362, #loc363])
#loc699 = loc(fused[#loc368, #loc369])
#loc700 = loc(fused[#loc370, #loc371])
#loc701 = loc(fused[#loc372, #loc373])
#loc702 = loc(fused[#loc374, #loc371])
#loc703 = loc(fused[#loc376, #loc377])
#loc704 = loc(fused[#loc379, #loc380])
#loc705 = loc(fused[#loc381, #loc382])
#loc706 = loc(fused[#loc384, #loc383])
#loc707 = loc(fused[#loc386, #loc385])
#loc708 = loc(fused[#loc389, #loc390])
#loc709 = loc(fused[#loc391, #loc392])
#loc710 = loc(fused[#loc394, #loc395])
#loc711 = loc(fused[#loc396, #loc397])
#loc712 = loc(fused[#loc398, #loc399])
#loc713 = loc(fused[#loc400, #loc392])
#loc714 = loc(fused[#loc402, #loc403])
#loc715 = loc(fused[#loc406, #loc407])
#loc716 = loc(fused[#loc408, #loc403])
#loc717 = loc(fused[#loc414, #loc415])
#loc718 = loc(fused[#loc416, #loc417])
#loc719 = loc(fused[#loc418, #loc419])
#loc720 = loc(fused[#loc420, #loc417])
#loc721 = loc(fused[#loc424, #loc425])
#loc722 = loc(fused[#loc428, #loc429])
#loc723 = loc(fused[#loc430, #loc431])
#loc724 = loc(fused[#loc432, #loc433])
#loc725 = loc(fused[#loc435, #loc436])
#loc726 = loc(fused[#loc437, #loc431])
#loc727 = loc(fused[#loc441, #loc439])
#loc728 = loc(fused[#loc444, #loc445])
#loc729 = loc(fused[#loc447, #loc448])
#loc730 = loc(fused[#loc449, #loc450])
#loc731 = loc(fused[#loc451, #loc448])
#loc732 = loc(fused[#loc454, #loc455])
#loc733 = loc(fused[#loc456, #loc457])
#loc734 = loc(fused[#loc458, #loc455])
#loc735 = loc(fused[#loc461, #loc462])
#loc736 = loc(fused[#loc463, #loc464])
#loc737 = loc(fused[#loc465, #loc466, #loc467, #loc462])
#loc738 = loc(fused[#loc468, #loc469])
#loc739 = loc(fused[#loc470, #loc471])
#loc740 = loc(fused[#loc472, #loc469])
#loc741 = loc(fused[#loc473, #loc474])
#loc742 = loc(fused[#loc476, #loc477])
#loc743 = loc(fused[#loc475, #loc478])
#loc744 = loc(fused[#loc479, #loc480, #loc481, #loc474])
#loc745 = loc(fused[#loc482, #loc483])
#loc746 = loc(fused[#loc489, #loc490])
#loc747 = loc(fused[#loc491, #loc492])
#loc748 = loc(fused[#loc493, #loc490])
#loc749 = loc(fused[#loc494, #loc495])
#loc750 = loc(fused[#loc497, #loc498])
#loc751 = loc(fused[#loc496, #loc499])
#loc752 = loc(fused[#loc500, #loc501, #loc502, #loc495])
#loc753 = loc(fused[#loc503, #loc504])
#loc754 = loc(fused[#loc510, #loc511])
#loc755 = loc(fused[#loc512, #loc513])
#loc756 = loc(fused[#loc515, #loc514])
#loc757 = loc(fused[#loc516, #loc517])
#loc758 = loc(fused[#loc518, #loc519])
#loc759 = loc(fused[#loc520, #loc521, #loc522, #loc517])
#loc760 = loc(fused[#loc525, #loc523])
#loc761 = loc(fused[#loc528, #loc526])
#loc762 = loc(fused[#loc529, #loc530])
#loc763 = loc(fused[#loc531, #loc532])
#loc764 = loc(fused[#loc533, #loc534, #loc535, #loc530])
#loc765 = loc(fused[#loc536, #loc537])
#loc766 = loc(fused[#loc538, #loc539])
#loc767 = loc(fused[#loc540, #loc537])
#loc768 = loc(fused[#loc541, #loc542])
#loc769 = loc(fused[#loc546, #loc547])
#loc770 = loc(fused[#loc548, #loc549])
#loc771 = loc(fused[#loc550, #loc547])
#loc772 = loc(fused[#loc551, #loc552])
