!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc20 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":30:25)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":67:25)
#loc100 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":105:25)
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__int64_t_rand_postdec_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc193)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc194)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLongLongLine(!s64i) loc(#loc195)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_postdec_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc197)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc198)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc14)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc199)
    cir.br ^bb1 loc(#loc200)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc18)
    cir.br ^bb2 loc(#loc16)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc16)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc20)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %7 ^bb5, ^bb6 loc(#loc20)
  ^bb5:  // pred: ^bb4
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc20)
    %10 = cir.const #cir.int<60> : !s32i loc(#loc20)
    %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc20)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc20)
    %14 = cir.const #cir.int<45> : !s32i loc(#loc20)
    %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc20)
    %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc20)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc20)
    %19 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc20)
    %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc20)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc20)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc20)
    %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc20)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc20)
    %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc20)
    cir.br ^bb7(%29 : !u64i) loc(#loc20)
  ^bb6:  // pred: ^bb4
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc20)
    %32 = cir.const #cir.int<60> : !s32i loc(#loc20)
    %33 = cir.shift(left, %31 : !u64i, %32 : !s32i) -> !u64i loc(#loc20)
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc20)
    %36 = cir.const #cir.int<45> : !s32i loc(#loc20)
    %37 = cir.shift(left, %35 : !u64i, %36 : !s32i) -> !u64i loc(#loc20)
    %38 = cir.binop(xor, %33, %37) : !u64i loc(#loc20)
    %39 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc20)
    %41 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %42 = cir.shift(left, %40 : !u64i, %41 : !s32i) -> !u64i loc(#loc20)
    %43 = cir.binop(xor, %38, %42) : !u64i loc(#loc20)
    %44 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc20)
    %46 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %47 = cir.shift(left, %45 : !u64i, %46 : !s32i) -> !u64i loc(#loc20)
    %48 = cir.binop(xor, %43, %47) : !u64i loc(#loc20)
    %49 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %50 = cir.cast(integral, %49 : !s32i), !u64i loc(#loc20)
    %51 = cir.binop(xor, %48, %50) : !u64i loc(#loc20)
    %52 = cir.unary(minus, %51) : !u64i, !u64i loc(#loc20)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %54 = cir.cast(integral, %53 : !s32i), !u64i loc(#loc20)
    %55 = cir.binop(sub, %52, %54) : !u64i loc(#loc20)
    cir.br ^bb7(%55 : !u64i) loc(#loc20)
  ^bb7(%56: !u64i loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":30:25)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc20)
  ^bb8:  // pred: ^bb7
    %57 = cir.cast(integral, %56 : !u64i), !s64i loc(#loc20)
    cir.store %57, %1 : !s64i, !cir.ptr<!s64i> loc(#loc201)
    cir.br ^bb10 loc(#loc22)
  ^bb9:  // pred: ^bb2
    %58 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
    %59 = cir.cast(array_to_ptrdecay, %58 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%59) : (!cir.ptr<!s8i>) -> () loc(#loc23)
    cir.br ^bb10 loc(#loc24)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc17)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc202)
  ^bb12:  // pred: ^bb11
    %60 = cir.const #cir.int<7> : !s32i loc(#loc27)
    cir.br ^bb13 loc(#loc25)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %60 : !s32i, ^bb18 [
      7: ^bb15
    ] loc(#loc25)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc28)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc203)
  ^bb16:  // pred: ^bb15
    %61 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc31)
    %62 = cir.unary(dec, %61) nsw : !s64i, !s64i loc(#loc32)
    cir.store %62, %1 : !s64i, !cir.ptr<!s64i> loc(#loc204)
    %63 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc11)
    cir.store %63, %0 : !s64i, !cir.ptr<!s64i> loc(#loc197)
    %64 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc33)
    cir.call @printLongLongLine(%64) : (!s64i) -> () loc(#loc34)
    cir.br ^bb17 loc(#loc30)
  ^bb17:  // pred: ^bb16
    cir.br ^bb19 loc(#loc35)
  ^bb18:  // pred: ^bb13
    %65 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc36)
    %66 = cir.cast(array_to_ptrdecay, %65 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%66) : (!cir.ptr<!s8i>) -> () loc(#loc37)
    cir.br ^bb19 loc(#loc38)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc26)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc9)
  } loc(#loc196)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_postdec_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc206)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc207)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc43)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc208)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc45)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc209)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc47)
    cir.return loc(#loc40)
  } loc(#loc205)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc49)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc211)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc212)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc56)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc213)
    cir.br ^bb1 loc(#loc214)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc60)
    cir.br ^bb2 loc(#loc58)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc58)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc61)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc62)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc62)
    cir.brcond %7 ^bb5, ^bb6 loc(#loc62)
  ^bb5:  // pred: ^bb4
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc62)
    %10 = cir.const #cir.int<60> : !s32i loc(#loc62)
    %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc62)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc62)
    %14 = cir.const #cir.int<45> : !s32i loc(#loc62)
    %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc62)
    %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc62)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc62)
    %19 = cir.const #cir.int<30> : !s32i loc(#loc62)
    %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc62)
    %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc62)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc62)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc62)
    %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc62)
    %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc62)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc62)
    %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc62)
    cir.br ^bb7(%29 : !u64i) loc(#loc62)
  ^bb6:  // pred: ^bb4
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc62)
    %32 = cir.const #cir.int<60> : !s32i loc(#loc62)
    %33 = cir.shift(left, %31 : !u64i, %32 : !s32i) -> !u64i loc(#loc62)
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc62)
    %36 = cir.const #cir.int<45> : !s32i loc(#loc62)
    %37 = cir.shift(left, %35 : !u64i, %36 : !s32i) -> !u64i loc(#loc62)
    %38 = cir.binop(xor, %33, %37) : !u64i loc(#loc62)
    %39 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc62)
    %41 = cir.const #cir.int<30> : !s32i loc(#loc62)
    %42 = cir.shift(left, %40 : !u64i, %41 : !s32i) -> !u64i loc(#loc62)
    %43 = cir.binop(xor, %38, %42) : !u64i loc(#loc62)
    %44 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc62)
    %46 = cir.const #cir.int<15> : !s32i loc(#loc62)
    %47 = cir.shift(left, %45 : !u64i, %46 : !s32i) -> !u64i loc(#loc62)
    %48 = cir.binop(xor, %43, %47) : !u64i loc(#loc62)
    %49 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %50 = cir.cast(integral, %49 : !s32i), !u64i loc(#loc62)
    %51 = cir.binop(xor, %48, %50) : !u64i loc(#loc62)
    %52 = cir.unary(minus, %51) : !u64i, !u64i loc(#loc62)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %54 = cir.cast(integral, %53 : !s32i), !u64i loc(#loc62)
    %55 = cir.binop(sub, %52, %54) : !u64i loc(#loc62)
    cir.br ^bb7(%55 : !u64i) loc(#loc62)
  ^bb7(%56: !u64i loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":67:25)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc62)
  ^bb8:  // pred: ^bb7
    %57 = cir.cast(integral, %56 : !u64i), !s64i loc(#loc62)
    cir.store %57, %1 : !s64i, !cir.ptr<!s64i> loc(#loc215)
    cir.br ^bb10 loc(#loc64)
  ^bb9:  // pred: ^bb2
    %58 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc65)
    %59 = cir.cast(array_to_ptrdecay, %58 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%59) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    cir.br ^bb10 loc(#loc67)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc59)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc216)
  ^bb12:  // pred: ^bb11
    %60 = cir.const #cir.int<8> : !s32i loc(#loc70)
    cir.br ^bb13 loc(#loc68)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %60 : !s32i, ^bb16 [
      7: ^bb15
    ] loc(#loc68)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc71)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    %61 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc72)
    %62 = cir.cast(array_to_ptrdecay, %61 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%62) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    cir.br ^bb22 loc(#loc74)
  ^bb16:  // pred: ^bb13
    cir.br ^bb17 loc(#loc217)
  ^bb17:  // pred: ^bb16
    %63 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc77)
    %64 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc78)
    %65 = cir.unary(minus, %64) nsw : !s64i, !s64i loc(#loc78)
    %66 = cir.const #cir.int<1> : !s64i loc(#loc78)
    %67 = cir.binop(sub, %65, %66) nsw : !s64i loc(#loc78)
    %68 = cir.cmp(gt, %63, %67) : !s64i, !cir.bool loc(#loc218)
    cir.brcond %68 ^bb18, ^bb19 loc(#loc219)
  ^bb18:  // pred: ^bb17
    %69 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc82)
    %70 = cir.unary(dec, %69) nsw : !s64i, !s64i loc(#loc83)
    cir.store %70, %1 : !s64i, !cir.ptr<!s64i> loc(#loc220)
    %71 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc53)
    cir.store %71, %0 : !s64i, !cir.ptr<!s64i> loc(#loc211)
    %72 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc84)
    cir.call @printLongLongLine(%72) : (!s64i) -> () loc(#loc85)
    cir.br ^bb20 loc(#loc80)
  ^bb19:  // pred: ^bb17
    %73 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc49)
    %74 = cir.cast(array_to_ptrdecay, %73 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%74) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    cir.br ^bb20 loc(#loc76)
  ^bb20:  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc76)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc87)
  ^bb22:  // 2 preds: ^bb15, ^bb21
    cir.br ^bb23 loc(#loc69)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc51)
  } loc(#loc210)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc222)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc223)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc94)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc224)
    cir.br ^bb1 loc(#loc225)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc98)
    cir.br ^bb2 loc(#loc96)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc96)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc99)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc100)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc100)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc100)
    cir.brcond %7 ^bb5, ^bb6 loc(#loc100)
  ^bb5:  // pred: ^bb4
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc100)
    %10 = cir.const #cir.int<60> : !s32i loc(#loc100)
    %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc100)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc100)
    %14 = cir.const #cir.int<45> : !s32i loc(#loc100)
    %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc100)
    %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc100)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc100)
    %19 = cir.const #cir.int<30> : !s32i loc(#loc100)
    %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc100)
    %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc100)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc100)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc100)
    %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc100)
    %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc100)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc100)
    %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc100)
    cir.br ^bb7(%29 : !u64i) loc(#loc100)
  ^bb6:  // pred: ^bb4
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc100)
    %32 = cir.const #cir.int<60> : !s32i loc(#loc100)
    %33 = cir.shift(left, %31 : !u64i, %32 : !s32i) -> !u64i loc(#loc100)
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
    %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc100)
    %36 = cir.const #cir.int<45> : !s32i loc(#loc100)
    %37 = cir.shift(left, %35 : !u64i, %36 : !s32i) -> !u64i loc(#loc100)
    %38 = cir.binop(xor, %33, %37) : !u64i loc(#loc100)
    %39 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
    %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc100)
    %41 = cir.const #cir.int<30> : !s32i loc(#loc100)
    %42 = cir.shift(left, %40 : !u64i, %41 : !s32i) -> !u64i loc(#loc100)
    %43 = cir.binop(xor, %38, %42) : !u64i loc(#loc100)
    %44 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
    %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc100)
    %46 = cir.const #cir.int<15> : !s32i loc(#loc100)
    %47 = cir.shift(left, %45 : !u64i, %46 : !s32i) -> !u64i loc(#loc100)
    %48 = cir.binop(xor, %43, %47) : !u64i loc(#loc100)
    %49 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
    %50 = cir.cast(integral, %49 : !s32i), !u64i loc(#loc100)
    %51 = cir.binop(xor, %48, %50) : !u64i loc(#loc100)
    %52 = cir.unary(minus, %51) : !u64i, !u64i loc(#loc100)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc100)
    %54 = cir.cast(integral, %53 : !s32i), !u64i loc(#loc100)
    %55 = cir.binop(sub, %52, %54) : !u64i loc(#loc100)
    cir.br ^bb7(%55 : !u64i) loc(#loc100)
  ^bb7(%56: !u64i loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":105:25)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc100)
  ^bb8:  // pred: ^bb7
    %57 = cir.cast(integral, %56 : !u64i), !s64i loc(#loc100)
    cir.store %57, %1 : !s64i, !cir.ptr<!s64i> loc(#loc226)
    cir.br ^bb10 loc(#loc102)
  ^bb9:  // pred: ^bb2
    %58 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc103)
    %59 = cir.cast(array_to_ptrdecay, %58 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc103)
    cir.call @printLine(%59) : (!cir.ptr<!s8i>) -> () loc(#loc104)
    cir.br ^bb10 loc(#loc105)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc97)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc227)
  ^bb12:  // pred: ^bb11
    %60 = cir.const #cir.int<7> : !s32i loc(#loc108)
    cir.br ^bb13 loc(#loc106)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %60 : !s32i, ^bb21 [
      7: ^bb15
    ] loc(#loc106)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc109)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc228)
  ^bb16:  // pred: ^bb15
    %61 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc112)
    %62 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc113)
    %63 = cir.unary(minus, %62) nsw : !s64i, !s64i loc(#loc113)
    %64 = cir.const #cir.int<1> : !s64i loc(#loc113)
    %65 = cir.binop(sub, %63, %64) nsw : !s64i loc(#loc113)
    %66 = cir.cmp(gt, %61, %65) : !s64i, !cir.bool loc(#loc229)
    cir.brcond %66 ^bb17, ^bb18 loc(#loc230)
  ^bb17:  // pred: ^bb16
    %67 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc117)
    %68 = cir.unary(dec, %67) nsw : !s64i, !s64i loc(#loc118)
    cir.store %68, %1 : !s64i, !cir.ptr<!s64i> loc(#loc231)
    %69 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc91)
    cir.store %69, %0 : !s64i, !cir.ptr<!s64i> loc(#loc222)
    %70 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc119)
    cir.call @printLongLongLine(%70) : (!s64i) -> () loc(#loc120)
    cir.br ^bb19 loc(#loc115)
  ^bb18:  // pred: ^bb16
    %71 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc121)
    %72 = cir.cast(array_to_ptrdecay, %71 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc121)
    cir.call @printLine(%72) : (!cir.ptr<!s8i>) -> () loc(#loc122)
    cir.br ^bb19 loc(#loc111)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc111)
  ^bb20:  // pred: ^bb19
    cir.br ^bb22 loc(#loc123)
  ^bb21:  // pred: ^bb13
    %73 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc124)
    %74 = cir.cast(array_to_ptrdecay, %73 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc124)
    cir.call @printLine(%74) : (!cir.ptr<!s8i>) -> () loc(#loc125)
    cir.br ^bb22 loc(#loc126)
  ^bb22:  // 2 preds: ^bb20, ^bb21
    cir.br ^bb23 loc(#loc107)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc89)
  } loc(#loc221)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc233)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc234)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc133)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc235)
    cir.br ^bb1 loc(#loc236)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc137)
    cir.br ^bb2 loc(#loc135)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc135)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc138)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc139)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc139)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc140)
    cir.br ^bb6 loc(#loc141)
  ^bb5:  // pred: ^bb2
    %6 = cir.const #cir.int<2> : !s32i loc(#loc142)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc143)
    %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc143)
    cir.store %8, %1 : !s64i, !cir.ptr<!s64i> loc(#loc237)
    cir.br ^bb6 loc(#loc145)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc136)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc238)
  ^bb8:  // pred: ^bb7
    %9 = cir.const #cir.int<7> : !s32i loc(#loc148)
    cir.br ^bb9 loc(#loc146)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %9 : !s32i, ^bb14 [
      7: ^bb11
    ] loc(#loc146)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc149)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc239)
  ^bb12:  // pred: ^bb11
    %10 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc152)
    %11 = cir.unary(dec, %10) nsw : !s64i, !s64i loc(#loc153)
    cir.store %11, %1 : !s64i, !cir.ptr<!s64i> loc(#loc240)
    %12 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc130)
    cir.store %12, %0 : !s64i, !cir.ptr<!s64i> loc(#loc233)
    %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc154)
    cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc155)
    cir.br ^bb13 loc(#loc151)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc156)
  ^bb14:  // pred: ^bb9
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc157)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc157)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc158)
    cir.br ^bb15 loc(#loc159)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc147)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc128)
  } loc(#loc232)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc242)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc243)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc166)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc244)
    cir.br ^bb1 loc(#loc245)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc170)
    cir.br ^bb2 loc(#loc168)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc168)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc171)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.const #cir.int<2> : !s32i loc(#loc172)
    %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc173)
    %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc173)
    cir.store %6, %1 : !s64i, !cir.ptr<!s64i> loc(#loc246)
    cir.br ^bb6 loc(#loc175)
  ^bb5:  // pred: ^bb2
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc176)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc176)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc177)
    cir.br ^bb6 loc(#loc178)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc169)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc247)
  ^bb8:  // pred: ^bb7
    %9 = cir.const #cir.int<7> : !s32i loc(#loc181)
    cir.br ^bb9 loc(#loc179)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %9 : !s32i, ^bb14 [
      7: ^bb11
    ] loc(#loc179)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc182)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc248)
  ^bb12:  // pred: ^bb11
    %10 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc185)
    %11 = cir.unary(dec, %10) nsw : !s64i, !s64i loc(#loc186)
    cir.store %11, %1 : !s64i, !cir.ptr<!s64i> loc(#loc249)
    %12 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc163)
    cir.store %12, %0 : !s64i, !cir.ptr<!s64i> loc(#loc242)
    %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc187)
    cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc188)
    cir.br ^bb13 loc(#loc184)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc189)
  ^bb14:  // pred: ^bb9
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc190)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc190)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc191)
    cir.br ^bb15 loc(#loc192)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc180)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc161)
  } loc(#loc241)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":34:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":22:1)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":52:1)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":43:9)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":43:26)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":24:5)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":24:13)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":25:12)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":25:5)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":26:5)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":36:5)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":26:12)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":28:5)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":30:9)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":31:9)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":34:9)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":35:9)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":37:5)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":51:5)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":37:12)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":39:5)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":40:5)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":45:5)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":42:13)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":42:9)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":44:27)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":44:9)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":46:5)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":49:19)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":49:9)
#loc38 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":50:9)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":200:1)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":206:1)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":202:5)
#loc42 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":202:14)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":203:5)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":203:14)
#loc45 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":204:5)
#loc46 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":204:14)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":205:5)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":205:14)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":90:23)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":59:1)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":94:1)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":85:13)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":85:30)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":61:5)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":61:13)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":62:12)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":62:5)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":63:5)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":73:5)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":63:12)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":65:5)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":67:9)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":68:9)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":71:19)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":71:9)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":72:9)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":74:5)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":93:5)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":74:12)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":76:5)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":78:19)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":78:9)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":79:9)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":82:9)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":91:9)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":82:13)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":82:20)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":83:9)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":87:9)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":89:9)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":84:17)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":84:13)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":86:31)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":86:13)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":90:13)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":92:9)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":97:1)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":132:1)
#loc90 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":119:13)
#loc91 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":119:30)
#loc92 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":99:5)
#loc93 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":99:13)
#loc94 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":100:12)
#loc95 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":100:5)
#loc96 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":101:5)
#loc97 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":111:5)
#loc98 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":101:12)
#loc99 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":103:5)
#loc101 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":105:9)
#loc102 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":106:9)
#loc103 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":109:19)
#loc104 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":109:9)
#loc105 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":110:9)
#loc106 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":112:5)
#loc107 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":131:5)
#loc108 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":112:12)
#loc109 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":114:5)
#loc110 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":116:9)
#loc111 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":125:9)
#loc112 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":116:13)
#loc113 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":116:20)
#loc114 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":117:9)
#loc115 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":121:9)
#loc116 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":123:9)
#loc117 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":118:17)
#loc118 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":118:13)
#loc119 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":120:31)
#loc120 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":120:13)
#loc121 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":124:23)
#loc122 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":124:13)
#loc123 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":126:9)
#loc124 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":129:19)
#loc125 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":129:9)
#loc126 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":130:9)
#loc127 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":135:1)
#loc128 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":165:1)
#loc129 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":156:9)
#loc130 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":156:26)
#loc131 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":137:5)
#loc132 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":137:13)
#loc133 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":138:12)
#loc134 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":138:5)
#loc135 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":139:5)
#loc136 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":149:5)
#loc137 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":139:12)
#loc138 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":141:5)
#loc139 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":143:19)
#loc140 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":143:9)
#loc141 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":144:9)
#loc142 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":147:17)
#loc143 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":147:16)
#loc144 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":147:9)
#loc145 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":148:9)
#loc146 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":150:5)
#loc147 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":164:5)
#loc148 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":150:12)
#loc149 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":152:5)
#loc150 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":153:5)
#loc151 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":158:5)
#loc152 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":155:13)
#loc153 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":155:9)
#loc154 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":157:27)
#loc155 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":157:9)
#loc156 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":159:5)
#loc157 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":162:19)
#loc158 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":162:9)
#loc159 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":163:9)
#loc160 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":168:1)
#loc161 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":198:1)
#loc162 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":189:9)
#loc163 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":189:26)
#loc164 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":170:5)
#loc165 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":170:13)
#loc166 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":171:12)
#loc167 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":171:5)
#loc168 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":172:5)
#loc169 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":182:5)
#loc170 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":172:12)
#loc171 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":174:5)
#loc172 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":176:17)
#loc173 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":176:16)
#loc174 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":176:9)
#loc175 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":177:9)
#loc176 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":180:19)
#loc177 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":180:9)
#loc178 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":181:9)
#loc179 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":183:5)
#loc180 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":197:5)
#loc181 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":183:12)
#loc182 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":185:5)
#loc183 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":186:5)
#loc184 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":191:5)
#loc185 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":188:13)
#loc186 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":188:9)
#loc187 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":190:27)
#loc188 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":190:9)
#loc189 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":192:5)
#loc190 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":195:19)
#loc191 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":195:9)
#loc192 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_15.c":196:9)
#loc193 = loc(fused[#loc1, #loc2])
#loc194 = loc(fused[#loc3, #loc4])
#loc195 = loc(fused[#loc6, #loc7])
#loc196 = loc(fused[#loc8, #loc9])
#loc197 = loc(fused[#loc10, #loc11])
#loc198 = loc(fused[#loc12, #loc13])
#loc199 = loc(fused[#loc15, #loc14])
#loc200 = loc(fused[#loc16, #loc17])
#loc201 = loc(fused[#loc21, #loc20])
#loc202 = loc(fused[#loc25, #loc26])
#loc203 = loc(fused[#loc29, #loc30])
#loc204 = loc(fused[#loc32, #loc31])
#loc205 = loc(fused[#loc39, #loc40])
#loc206 = loc(fused[#loc41, #loc42])
#loc207 = loc(fused[#loc43, #loc44])
#loc208 = loc(fused[#loc45, #loc46])
#loc209 = loc(fused[#loc47, #loc48])
#loc210 = loc(fused[#loc50, #loc51])
#loc211 = loc(fused[#loc52, #loc53])
#loc212 = loc(fused[#loc54, #loc55])
#loc213 = loc(fused[#loc57, #loc56])
#loc214 = loc(fused[#loc58, #loc59])
#loc215 = loc(fused[#loc63, #loc62])
#loc216 = loc(fused[#loc68, #loc69])
#loc217 = loc(fused[#loc75, #loc76])
#loc218 = loc(fused[#loc77, #loc78])
#loc219 = loc(fused[#loc79, #loc80, #loc81, #loc76])
#loc220 = loc(fused[#loc83, #loc82])
#loc221 = loc(fused[#loc88, #loc89])
#loc222 = loc(fused[#loc90, #loc91])
#loc223 = loc(fused[#loc92, #loc93])
#loc224 = loc(fused[#loc95, #loc94])
#loc225 = loc(fused[#loc96, #loc97])
#loc226 = loc(fused[#loc101, #loc100])
#loc227 = loc(fused[#loc106, #loc107])
#loc228 = loc(fused[#loc110, #loc111])
#loc229 = loc(fused[#loc112, #loc113])
#loc230 = loc(fused[#loc114, #loc115, #loc116, #loc111])
#loc231 = loc(fused[#loc118, #loc117])
#loc232 = loc(fused[#loc127, #loc128])
#loc233 = loc(fused[#loc129, #loc130])
#loc234 = loc(fused[#loc131, #loc132])
#loc235 = loc(fused[#loc134, #loc133])
#loc236 = loc(fused[#loc135, #loc136])
#loc237 = loc(fused[#loc144, #loc142])
#loc238 = loc(fused[#loc146, #loc147])
#loc239 = loc(fused[#loc150, #loc151])
#loc240 = loc(fused[#loc153, #loc152])
#loc241 = loc(fused[#loc160, #loc161])
#loc242 = loc(fused[#loc162, #loc163])
#loc243 = loc(fused[#loc164, #loc165])
#loc244 = loc(fused[#loc167, #loc166])
#loc245 = loc(fused[#loc168, #loc169])
#loc246 = loc(fused[#loc174, #loc172])
#loc247 = loc(fused[#loc179, #loc180])
#loc248 = loc(fused[#loc183, #loc184])
#loc249 = loc(fused[#loc186, #loc185])
