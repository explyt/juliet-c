!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE481_Assigning_Instead_of_Comparing/CWE481_Assigning_Instead_of_Comparing__basic_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc73)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"i was 5\00" : !cir.array<!s8i x 8>> : !cir.array<!s8i x 8> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE481_Assigning_Instead_of_Comparing__basic_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intRand", init] {alignment = 4 : i64} loc(#loc76)
    cir.br ^bb1 loc(#loc77)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<5> : !s32i loc(#loc12)
    %2 = cir.const #cir.int<5> : !s32i loc(#loc13)
    %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc78)
    cir.brcond %3 ^bb2, ^bb9 loc(#loc79)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc80)
  ^bb3:  // pred: ^bb2
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc76)
    cir.br ^bb4 loc(#loc81)
  ^bb4:  // pred: ^bb3
    %5 = cir.const #cir.int<5> : !s32i loc(#loc20)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc22)
    cir.brcond %6 ^bb5, ^bb6 loc(#loc83)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc5)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc24)
    cir.br ^bb6 loc(#loc19)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc19)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc16)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc11)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc11)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc7)
  } loc(#loc75)
  cir.func no_proto @CWE481_Assigning_Instead_of_Comparing__basic_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc85)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc86)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    cir.return loc(#loc26)
  } loc(#loc84)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc31)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intRand", init] {alignment = 4 : i64} loc(#loc88)
    cir.br ^bb1 loc(#loc89)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<5> : !s32i loc(#loc38)
    %2 = cir.const #cir.int<5> : !s32i loc(#loc39)
    %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc90)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc91)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc31)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc31)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc43)
    cir.br ^bb10 loc(#loc41)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc92)
  ^bb4:  // pred: ^bb3
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc46)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    cir.br ^bb5 loc(#loc93)
  ^bb5:  // pred: ^bb4
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    %8 = cir.const #cir.int<5> : !s32i loc(#loc50)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc94)
    cir.brcond %9 ^bb6, ^bb7 loc(#loc95)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc52)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    cir.br ^bb7 loc(#loc48)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc48)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc45)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc37)
  ^bb10:  // 2 preds: ^bb2, ^bb9
    cir.br ^bb11 loc(#loc37)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc33)
  } loc(#loc87)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intRand", init] {alignment = 4 : i64} loc(#loc97)
    cir.br ^bb1 loc(#loc98)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<5> : !s32i loc(#loc60)
    %2 = cir.const #cir.int<5> : !s32i loc(#loc61)
    %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc99)
    cir.brcond %3 ^bb2, ^bb9 loc(#loc100)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc101)
  ^bb3:  // pred: ^bb2
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc65)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    cir.br ^bb4 loc(#loc102)
  ^bb4:  // pred: ^bb3
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc68)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc69)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc103)
    cir.brcond %7 ^bb5, ^bb6 loc(#loc104)
  ^bb5:  // pred: ^bb4
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc71)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    cir.br ^bb6 loc(#loc67)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc67)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc64)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc59)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc59)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc55)
  } loc(#loc96)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE481_Assigning_Instead_of_Comparing/CWE481_Assigning_Instead_of_Comparing__basic_06.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":34:27)
#loc6 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":25:1)
#loc7 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":38:1)
#loc8 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":30:13)
#loc9 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":30:32)
#loc10 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":27:5)
#loc11 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":37:5)
#loc12 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":27:8)
#loc13 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":27:27)
#loc14 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":28:5)
#loc15 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":29:9)
#loc16 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":36:9)
#loc17 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":30:27)
#loc18 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":32:13)
#loc19 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":35:13)
#loc20 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":32:26)
#loc21 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":32:16)
#loc22 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":32:24)
#loc23 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":33:13)
#loc24 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":34:17)
#loc25 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":81:1)
#loc26 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":85:1)
#loc27 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":83:5)
#loc28 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":83:11)
#loc29 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":84:5)
#loc30 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":84:11)
#loc31 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":50:19)
#loc32 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":45:1)
#loc33 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":63:1)
#loc34 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":55:13)
#loc35 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":55:32)
#loc36 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":47:5)
#loc37 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":62:5)
#loc38 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":47:8)
#loc39 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":47:27)
#loc40 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":48:5)
#loc41 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":51:5)
#loc42 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":53:5)
#loc43 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":50:9)
#loc44 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":54:9)
#loc45 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":61:9)
#loc46 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":55:27)
#loc47 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":57:13)
#loc48 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":60:13)
#loc49 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":57:16)
#loc50 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":57:27)
#loc51 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":58:13)
#loc52 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":59:27)
#loc53 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":59:17)
#loc54 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":66:1)
#loc55 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":79:1)
#loc56 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":71:13)
#loc57 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":71:32)
#loc58 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":68:5)
#loc59 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":78:5)
#loc60 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":68:8)
#loc61 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":68:27)
#loc62 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":69:5)
#loc63 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":70:9)
#loc64 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":77:9)
#loc65 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":71:27)
#loc66 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":73:13)
#loc67 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":76:13)
#loc68 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":73:16)
#loc69 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":73:27)
#loc70 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":74:13)
#loc71 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":75:27)
#loc72 = loc("CWE481_Assigning_Instead_of_Comparing__basic_06.c":75:17)
#loc73 = loc(fused[#loc1, #loc2])
#loc74 = loc(fused[#loc3, #loc4])
#loc75 = loc(fused[#loc6, #loc7])
#loc76 = loc(fused[#loc8, #loc9])
#loc77 = loc(fused[#loc10, #loc11])
#loc78 = loc(fused[#loc12, #loc13])
#loc79 = loc(fused[#loc14, #loc11])
#loc80 = loc(fused[#loc15, #loc16])
#loc81 = loc(fused[#loc18, #loc19])
#loc82 = loc(fused[#loc21, #loc20])
#loc83 = loc(fused[#loc23, #loc19])
#loc84 = loc(fused[#loc25, #loc26])
#loc85 = loc(fused[#loc27, #loc28])
#loc86 = loc(fused[#loc29, #loc30])
#loc87 = loc(fused[#loc32, #loc33])
#loc88 = loc(fused[#loc34, #loc35])
#loc89 = loc(fused[#loc36, #loc37])
#loc90 = loc(fused[#loc38, #loc39])
#loc91 = loc(fused[#loc40, #loc41, #loc42, #loc37])
#loc92 = loc(fused[#loc44, #loc45])
#loc93 = loc(fused[#loc47, #loc48])
#loc94 = loc(fused[#loc49, #loc50])
#loc95 = loc(fused[#loc51, #loc48])
#loc96 = loc(fused[#loc54, #loc55])
#loc97 = loc(fused[#loc56, #loc57])
#loc98 = loc(fused[#loc58, #loc59])
#loc99 = loc(fused[#loc60, #loc61])
#loc100 = loc(fused[#loc62, #loc59])
#loc101 = loc(fused[#loc63, #loc64])
#loc102 = loc(fused[#loc66, #loc67])
#loc103 = loc(fused[#loc68, #loc69])
#loc104 = loc(fused[#loc70, #loc67])
