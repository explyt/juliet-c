!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":25:15)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":25:19)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":37:19)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":37:23)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":46:19)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":46:23)
#loc32 = loc(fused[#loc5, #loc6])
#loc36 = loc(fused[#loc14, #loc15])
#loc40 = loc(fused[#loc23, #loc24])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc30)
  cir.func @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_619badSourceEi(%arg0: !s32i loc(fused[#loc5, #loc6])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc32)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc4)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc8)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc8)
    %6 = cir.ternary(%5, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc8)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc8)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc8)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc8)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc8)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc8)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc8)
      cir.yield %21 : !u32i loc(#loc8)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc8)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc8)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc8)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc8)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc8)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc8)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc8)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc8)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc8)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc8)
      cir.yield %25 : !u32i loc(#loc8)
    }) : (!cir.bool) -> !u32i loc(#loc8)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc8)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc33)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc34)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    cir.return %9 : !s32i loc(#loc34)
  } loc(#loc31)
  cir.func @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_6113goodG2BSourceEi(%arg0: !s32i loc(fused[#loc14, #loc15])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc36)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc13)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc16)
    %2 = cir.const #cir.int<7> : !s32i loc(#loc17)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc37)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc38)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc38)
    cir.return %4 : !s32i loc(#loc38)
  } loc(#loc35)
  cir.func @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_6113goodB2GSourceEi(%arg0: !s32i loc(fused[#loc23, #loc24])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc40)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc22)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc25)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc26)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc26)
    %6 = cir.ternary(%5, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc26)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc26)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc26)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc26)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc26)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc26)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc26)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc26)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc26)
      cir.yield %21 : !u32i loc(#loc26)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc26)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc26)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc26)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc26)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc26)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc26)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc26)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc26)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc26)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc26)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc26)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc26)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc26)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc26)
      cir.yield %25 : !u32i loc(#loc26)
    }) : (!cir.bool) -> !u32i loc(#loc26)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc26)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc41)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc42)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc42)
    cir.return %9 : !s32i loc(#loc42)
  } loc(#loc39)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":25:1)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":30:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":26:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":28:12)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":28:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":29:12)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":29:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":37:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":43:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":38:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":41:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":41:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":42:12)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":42:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":46:1)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":51:1)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":47:1)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":49:12)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":49:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":50:12)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_61b.cpp":50:5)
#loc30 = loc(fused[#loc1, #loc2])
#loc31 = loc(fused[#loc3, #loc4])
#loc33 = loc(fused[#loc9, #loc8])
#loc34 = loc(fused[#loc11, #loc10])
#loc35 = loc(fused[#loc12, #loc13])
#loc37 = loc(fused[#loc18, #loc17])
#loc38 = loc(fused[#loc20, #loc19])
#loc39 = loc(fused[#loc21, #loc22])
#loc41 = loc(fused[#loc27, #loc26])
#loc42 = loc(fused[#loc29, #loc28])
