!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":22:21)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":22:29)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":66:25)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":66:33)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":46:25)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":46:33)
#loc93 = loc(fused[#loc7, #loc8])
#loc106 = loc(fused[#loc39, #loc40])
#loc117 = loc(fused[#loc68, #loc69])
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__int64_t_rand_predec_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc90)
  cir.func private @printLongLongLine(!s64i) loc(#loc91)
  cir.func internal private @badSink(%arg0: !s64i loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc93)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc9)
    cir.scope {
      %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc95)
      %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc14)
      %3 = cir.unary(dec, %2) nsw : !s64i, !s64i loc(#loc14)
      cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc96)
      %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc13)
      cir.store %4, %1 : !s64i, !cir.ptr<!s64i> loc(#loc95)
      %5 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc16)
      cir.call @printLongLongLine(%5) : (!s64i) -> () loc(#loc17)
    } loc(#loc94)
    cir.return loc(#loc6)
  } loc(#loc92)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_predec_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc98)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc22)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc99)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc24)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc24)
    %6 = cir.ternary(%5, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc24)
      %11 = cir.const #cir.int<60> : !s32i loc(#loc24)
      %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc24)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc24)
      %15 = cir.const #cir.int<45> : !s32i loc(#loc24)
      %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc24)
      %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc24)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc24)
      %20 = cir.const #cir.int<30> : !s32i loc(#loc24)
      %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc24)
      %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc24)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc24)
      %25 = cir.const #cir.int<15> : !s32i loc(#loc24)
      %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc24)
      %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc24)
      %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
      %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc24)
      %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc24)
      cir.yield %30 : !u64i loc(#loc24)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc24)
      %11 = cir.const #cir.int<60> : !s32i loc(#loc24)
      %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc24)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc24)
      %15 = cir.const #cir.int<45> : !s32i loc(#loc24)
      %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc24)
      %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc24)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc24)
      %20 = cir.const #cir.int<30> : !s32i loc(#loc24)
      %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc24)
      %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc24)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc24)
      %25 = cir.const #cir.int<15> : !s32i loc(#loc24)
      %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc24)
      %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc24)
      %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
      %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc24)
      %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc24)
      %31 = cir.unary(minus, %30) : !u64i, !u64i loc(#loc24)
      %32 = cir.const #cir.int<1> : !s32i loc(#loc24)
      %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc24)
      %34 = cir.binop(sub, %31, %33) : !u64i loc(#loc24)
      cir.yield %34 : !u64i loc(#loc24)
    }) : (!cir.bool) -> !u64i loc(#loc24)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc24)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc100)
    %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc26)
    cir.call @badSink(%8) : (!s64i) -> () loc(#loc27)
    cir.return loc(#loc19)
  } loc(#loc97)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_predec_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc102)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc103)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc101)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc36)
  cir.func internal private @goodB2GSink(%arg0: !s64i loc(fused[#loc39, #loc40])) extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc106)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc41)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc44)
      %2 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc45)
      %3 = cir.unary(minus, %2) nsw : !s64i, !s64i loc(#loc45)
      %4 = cir.const #cir.int<1> : !s64i loc(#loc45)
      %5 = cir.binop(sub, %3, %4) nsw : !s64i loc(#loc45)
      %6 = cir.cmp(gt, %1, %5) : !s64i, !cir.bool loc(#loc108)
      cir.if %6 {
        %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc110)
        %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc51)
        %9 = cir.unary(dec, %8) nsw : !s64i, !s64i loc(#loc51)
        cir.store %9, %0 : !s64i, !cir.ptr<!s64i> loc(#loc111)
        %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc50)
        cir.store %10, %7 : !s64i, !cir.ptr<!s64i> loc(#loc110)
        %11 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc53)
        cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc54)
      } else {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc36)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc36)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc55)
      } loc(#loc109)
    } loc(#loc107)
    cir.return loc(#loc38)
  } loc(#loc105)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc113)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc60)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc114)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc62)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc62)
    %6 = cir.ternary(%5, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc62)
      %11 = cir.const #cir.int<60> : !s32i loc(#loc62)
      %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc62)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc62)
      %15 = cir.const #cir.int<45> : !s32i loc(#loc62)
      %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc62)
      %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc62)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc62)
      %20 = cir.const #cir.int<30> : !s32i loc(#loc62)
      %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc62)
      %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc62)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc62)
      %25 = cir.const #cir.int<15> : !s32i loc(#loc62)
      %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc62)
      %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc62)
      %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
      %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc62)
      %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc62)
      cir.yield %30 : !u64i loc(#loc62)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc62)
      %11 = cir.const #cir.int<60> : !s32i loc(#loc62)
      %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc62)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc62)
      %15 = cir.const #cir.int<45> : !s32i loc(#loc62)
      %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc62)
      %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc62)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc62)
      %20 = cir.const #cir.int<30> : !s32i loc(#loc62)
      %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc62)
      %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc62)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc62)
      %25 = cir.const #cir.int<15> : !s32i loc(#loc62)
      %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc62)
      %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc62)
      %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
      %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc62)
      %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc62)
      %31 = cir.unary(minus, %30) : !u64i, !u64i loc(#loc62)
      %32 = cir.const #cir.int<1> : !s32i loc(#loc62)
      %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc62)
      %34 = cir.binop(sub, %31, %33) : !u64i loc(#loc62)
      cir.yield %34 : !u64i loc(#loc62)
    }) : (!cir.bool) -> !u64i loc(#loc62)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc62)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc115)
    %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc64)
    cir.call @goodB2GSink(%8) : (!s64i) -> () loc(#loc65)
    cir.return loc(#loc57)
  } loc(#loc112)
  cir.func internal private @goodG2BSink(%arg0: !s64i loc(fused[#loc68, #loc69])) extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc117)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc70)
    cir.scope {
      %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc119)
      %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc75)
      %3 = cir.unary(dec, %2) nsw : !s64i, !s64i loc(#loc75)
      cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc120)
      %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc74)
      cir.store %4, %1 : !s64i, !cir.ptr<!s64i> loc(#loc119)
      %5 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc77)
      cir.call @printLongLongLine(%5) : (!s64i) -> () loc(#loc78)
    } loc(#loc118)
    cir.return loc(#loc67)
  } loc(#loc116)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc122)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc83)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc123)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc85)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc86)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc86)
    cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc124)
    %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc88)
    cir.call @goodG2BSink(%5) : (!s64i) -> () loc(#loc89)
    cir.return loc(#loc80)
  } loc(#loc121)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__int64_t_rand_predec_41.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":30:1)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":23:1)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":24:5)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":29:5)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":27:9)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":27:26)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":26:9)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":26:11)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":28:27)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":28:9)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":32:1)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":39:1)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":34:5)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":34:13)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":35:12)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":35:5)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":37:21)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":37:5)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":38:13)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":38:5)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":90:1)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":94:1)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":92:5)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":92:13)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":93:5)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":93:13)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":77:19)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":66:1)
#loc38 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":79:1)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":67:1)
#loc42 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":69:5)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":78:5)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":69:9)
#loc45 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":69:16)
#loc46 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":70:5)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":74:5)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":76:5)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":72:9)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":72:26)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":71:9)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":71:11)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":73:27)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":73:9)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":77:9)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":81:1)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":88:1)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":83:5)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":83:13)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":84:12)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":84:5)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":86:21)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":86:5)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":87:17)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":87:5)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":46:1)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":54:1)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":47:1)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":48:5)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":53:5)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":51:9)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":51:26)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":50:9)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":50:11)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":52:27)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":52:9)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":56:1)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":63:1)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":58:5)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":58:13)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":59:12)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":59:5)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":61:13)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":61:12)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":61:5)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":62:17)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_41.c":62:5)
#loc90 = loc(fused[#loc1, #loc2])
#loc91 = loc(fused[#loc3, #loc4])
#loc92 = loc(fused[#loc5, #loc6])
#loc94 = loc(fused[#loc10, #loc11])
#loc95 = loc(fused[#loc12, #loc13])
#loc96 = loc(fused[#loc14, #loc15])
#loc97 = loc(fused[#loc18, #loc19])
#loc98 = loc(fused[#loc20, #loc21])
#loc99 = loc(fused[#loc23, #loc22])
#loc100 = loc(fused[#loc25, #loc24])
#loc101 = loc(fused[#loc28, #loc29])
#loc102 = loc(fused[#loc30, #loc31])
#loc103 = loc(fused[#loc32, #loc33])
#loc104 = loc(fused[#loc34, #loc35])
#loc105 = loc(fused[#loc37, #loc38])
#loc107 = loc(fused[#loc42, #loc43])
#loc108 = loc(fused[#loc44, #loc45])
#loc109 = loc(fused[#loc46, #loc47, #loc48, #loc43])
#loc110 = loc(fused[#loc49, #loc50])
#loc111 = loc(fused[#loc51, #loc52])
#loc112 = loc(fused[#loc56, #loc57])
#loc113 = loc(fused[#loc58, #loc59])
#loc114 = loc(fused[#loc61, #loc60])
#loc115 = loc(fused[#loc63, #loc62])
#loc116 = loc(fused[#loc66, #loc67])
#loc118 = loc(fused[#loc71, #loc72])
#loc119 = loc(fused[#loc73, #loc74])
#loc120 = loc(fused[#loc75, #loc76])
#loc121 = loc(fused[#loc79, #loc80])
#loc122 = loc(fused[#loc81, #loc82])
#loc123 = loc(fused[#loc84, #loc83])
#loc124 = loc(fused[#loc87, #loc85])
