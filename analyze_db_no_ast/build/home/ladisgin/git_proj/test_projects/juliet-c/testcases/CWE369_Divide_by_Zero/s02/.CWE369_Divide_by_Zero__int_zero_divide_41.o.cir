!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":22:21)
#loc6 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":22:25)
#loc33 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":60:25)
#loc34 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":60:29)
#loc61 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":43:25)
#loc62 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":43:29)
#loc80 = loc(fused[#loc5, #loc6])
#loc91 = loc(fused[#loc33, #loc34])
#loc101 = loc(fused[#loc61, #loc62])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_divide_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc78)
  cir.func internal private  @badSink(%arg0: !s32i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc80)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc8)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc9)
    %3 = cir.binop(div, %1, %2) : !s32i loc(#loc81)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc10)
    cir.return loc(#loc4)
  } loc(#loc79)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_zero_divide_41_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc83)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc16)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc18)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    cir.call @badSink(%4) : (!s32i) -> () loc(#loc21)
    cir.return loc(#loc12)
  } loc(#loc82)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_zero_divide_41_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc87)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc24)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc88)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc26)
    cir.return loc(#loc23)
  } loc(#loc86)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc89)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc30)
  cir.func internal private  @goodB2GSink(%arg0: !s32i loc(fused[#loc33, #loc34])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc91)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc35)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc39)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !s32i loc(#loc93)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc40)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc44)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
        %7 = cir.binop(div, %5, %6) : !s32i loc(#loc95)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc46)
      } else {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc30)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc30)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc47)
      } loc(#loc94)
    } loc(#loc92)
    cir.return loc(#loc32)
  } loc(#loc90)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc97)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc53)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc55)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    cir.call @goodB2GSink(%4) : (!s32i) -> () loc(#loc58)
    cir.return loc(#loc49)
  } loc(#loc96)
  cir.func internal private  @goodG2BSink(%arg0: !s32i loc(fused[#loc61, #loc62])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc101)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc63)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc64)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
    %3 = cir.binop(div, %1, %2) : !s32i loc(#loc102)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc66)
    cir.return loc(#loc60)
  } loc(#loc100)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc104)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc71)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc72)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc74)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc76)
    cir.call @goodG2BSink(%4) : (!s32i) -> () loc(#loc77)
    cir.return loc(#loc68)
  } loc(#loc103)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_divide_41.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":22:1)
#loc4 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":26:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":23:1)
#loc8 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":25:18)
#loc9 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":25:24)
#loc10 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":25:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":28:1)
#loc12 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":36:1)
#loc13 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":30:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":30:9)
#loc15 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":32:13)
#loc16 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":32:12)
#loc17 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":32:5)
#loc18 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":34:12)
#loc19 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":34:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":35:13)
#loc21 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":35:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":83:1)
#loc23 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":87:1)
#loc24 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":85:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":85:13)
#loc26 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":86:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":86:13)
#loc28 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc29 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc30 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":69:19)
#loc31 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":60:1)
#loc32 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":71:1)
#loc35 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":61:1)
#loc36 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":63:5)
#loc37 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":70:5)
#loc38 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":63:9)
#loc39 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":63:17)
#loc40 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":63:14)
#loc41 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":64:5)
#loc42 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":66:5)
#loc43 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":68:5)
#loc44 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":65:22)
#loc45 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":65:28)
#loc46 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":65:9)
#loc47 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":69:9)
#loc48 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":73:1)
#loc49 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":81:1)
#loc50 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":75:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":75:9)
#loc52 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":77:13)
#loc53 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":77:12)
#loc54 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":77:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":79:12)
#loc56 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":79:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":80:17)
#loc58 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":80:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":43:1)
#loc60 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":47:1)
#loc63 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":44:1)
#loc64 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":46:18)
#loc65 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":46:24)
#loc66 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":46:5)
#loc67 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":49:1)
#loc68 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":57:1)
#loc69 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":51:5)
#loc70 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":51:9)
#loc71 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":53:13)
#loc72 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":53:12)
#loc73 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":53:5)
#loc74 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":55:12)
#loc75 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":55:5)
#loc76 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":56:17)
#loc77 = loc("CWE369_Divide_by_Zero__int_zero_divide_41.c":56:5)
#loc78 = loc(fused[#loc1, #loc2])
#loc79 = loc(fused[#loc3, #loc4])
#loc81 = loc(fused[#loc8, #loc9])
#loc82 = loc(fused[#loc11, #loc12])
#loc83 = loc(fused[#loc13, #loc14])
#loc84 = loc(fused[#loc17, #loc15])
#loc85 = loc(fused[#loc19, #loc18])
#loc86 = loc(fused[#loc22, #loc23])
#loc87 = loc(fused[#loc24, #loc25])
#loc88 = loc(fused[#loc26, #loc27])
#loc89 = loc(fused[#loc28, #loc29])
#loc90 = loc(fused[#loc31, #loc32])
#loc92 = loc(fused[#loc36, #loc37])
#loc93 = loc(fused[#loc38, #loc39])
#loc94 = loc(fused[#loc41, #loc42, #loc43, #loc37])
#loc95 = loc(fused[#loc44, #loc45])
#loc96 = loc(fused[#loc48, #loc49])
#loc97 = loc(fused[#loc50, #loc51])
#loc98 = loc(fused[#loc54, #loc52])
#loc99 = loc(fused[#loc56, #loc55])
#loc100 = loc(fused[#loc59, #loc60])
#loc102 = loc(fused[#loc64, #loc65])
#loc103 = loc(fused[#loc67, #loc68])
#loc104 = loc(fused[#loc69, #loc70])
#loc105 = loc(fused[#loc73, #loc71])
#loc106 = loc(fused[#loc75, #loc74])
