!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":28:21)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":28:28)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":95:10)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":95:14)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":95:20)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":95:32)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":58:25)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":58:32)
#loc105 = loc(fused[#loc9, #loc10])
#loc120 = loc(fused[#loc53, #loc54])
#loc121 = loc(fused[#loc55, #loc56])
#loc126 = loc(fused[#loc73, #loc74])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2BSink.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc101)
  cir.global "private" constant cir_private @__const.badSink.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc102)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc103)
  cir.func internal private @badSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc9, #loc10])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc102)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc105)
    cir.store %arg0, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc11)
    cir.br ^bb1 loc(#loc106)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @__const.badSink.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc102)
    cir.copy %2 to %0 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc102)
    %3 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc14)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc15)
    %5 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc16)
    %6 = cir.call @strcpy(%4, %5) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc14)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc17)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc18)
    cir.br ^bb2 loc(#loc13)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc8)
  } loc(#loc104)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc108)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc109)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc110)
    %3 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc24)
    cir.store %3, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>> loc(#loc109)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc26)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc26)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc26)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc26)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc26)
    %9 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc111)
    %10 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc26)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc26)
    cir.store %11, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc110)
    %12 = cir.const #cir.int<10> : !s32i loc(#loc28)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %14 = cir.binop(add, %12, %13) nsw : !s32i loc(#loc28)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc28)
    %16 = cir.const #cir.int<1> : !u64i loc(#loc28)
    %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc28)
    %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc28)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc28)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc28)
    cir.store %20, %9 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc111)
    %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
    cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc112)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc31)
    %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc31)
    %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc33)
    %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc34)
    cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc113)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc35)
    %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
    cir.call %27(%28) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc35)
    cir.return loc(#loc20)
  } loc(#loc107)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc115)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc38)
  } loc(#loc114)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc116)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc117)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc118)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc50)
  cir.func @main(%arg0: !s32i loc(fused[#loc53, #loc54]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc55, #loc56])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc120)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc121)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc52)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc57)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc58)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc59)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc59)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc60)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc47)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44_good : !cir.ptr<!cir.func<!void ()>> loc(#loc122)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44_good() : () -> () loc(#loc62)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc48)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc49)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc123)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44_bad() : () -> () loc(#loc66)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc50)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc69)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc124)
    cir.return %17 : !s32i loc(#loc124)
  } loc(#loc119)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc73, #loc74])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc101)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc126)
    cir.store %arg0, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc75)
    cir.br ^bb1 loc(#loc127)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @__const.goodG2BSink.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc101)
    cir.copy %2 to %0 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc101)
    %3 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc78)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
    %5 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc80)
    %6 = cir.call @strcpy(%4, %5) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc78)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc81)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    cir.br ^bb2 loc(#loc77)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc72)
  } loc(#loc125)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc129)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc130)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc131)
    %3 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc88)
    cir.store %3, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>> loc(#loc130)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc90)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc90)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc90)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc90)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc90)
    %9 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc132)
    %10 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc90)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc90)
    cir.store %11, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc131)
    %12 = cir.const #cir.int<10> : !s32i loc(#loc92)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc92)
    %14 = cir.binop(add, %12, %13) nsw : !s32i loc(#loc92)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc92)
    %16 = cir.const #cir.int<1> : !u64i loc(#loc92)
    %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc92)
    %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc92)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc92)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc92)
    cir.store %20, %9 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc132)
    %21 = cir.load %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc93)
    cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc133)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc95)
    %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc95)
    %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc96)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc97)
    %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc98)
    cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc134)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc99)
    %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
    cir.call %27(%28) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc99)
    cir.return loc(#loc84)
  } loc(#loc128)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":61:9)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":61:29)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":31:9)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":31:29)
#loc5 = loc("/usr/include/string.h":141:1)
#loc6 = loc("/usr/include/string.h":142:14)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":28:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":36:1)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":29:1)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":30:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":35:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":33:9)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":33:16)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":33:22)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":34:19)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":34:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":38:1)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":51:1)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":40:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":40:12)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":42:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":42:32)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":43:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":43:36)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":44:5)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":44:37)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":47:12)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":47:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":48:15)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":48:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":48:10)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":48:11)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":50:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":50:13)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":81:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":84:1)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":83:5)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":83:13)
#loc41 = loc("/usr/include/stdlib.h":575:1)
#loc42 = loc("/usr/include/stdlib.h":575:41)
#loc43 = loc("/usr/include/time.h":76:1)
#loc44 = loc("/usr/include/time.h":76:38)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":100:15)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":102:15)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":105:15)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":107:15)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":95:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":110:1)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":96:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":98:27)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":98:22)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":98:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":100:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":101:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":101:72)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":102:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":105:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":106:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":106:71)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":107:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":109:12)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":109:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":58:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":66:1)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":59:1)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":60:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":65:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":63:9)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":63:16)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":63:22)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":64:19)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":64:9)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":68:1)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":79:1)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":70:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":70:12)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":71:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":71:32)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":72:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":72:36)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":73:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":73:37)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":76:12)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":76:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":77:15)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":77:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":77:10)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":77:11)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":78:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c":78:13)
#loc101 = loc(fused[#loc1, #loc2])
#loc102 = loc(fused[#loc3, #loc4])
#loc103 = loc(fused[#loc5, #loc6])
#loc104 = loc(fused[#loc7, #loc8])
#loc106 = loc(fused[#loc12, #loc13])
#loc107 = loc(fused[#loc19, #loc20])
#loc108 = loc(fused[#loc21, #loc22])
#loc109 = loc(fused[#loc23, #loc24])
#loc110 = loc(fused[#loc25, #loc26])
#loc111 = loc(fused[#loc27, #loc28])
#loc112 = loc(fused[#loc30, #loc29])
#loc113 = loc(fused[#loc32, #loc31])
#loc114 = loc(fused[#loc37, #loc38])
#loc115 = loc(fused[#loc39, #loc40])
#loc116 = loc(fused[#loc41, #loc42])
#loc117 = loc(fused[#loc43, #loc44])
#loc118 = loc(fused[#loc45, #loc46])
#loc119 = loc(fused[#loc51, #loc52])
#loc122 = loc(fused[#loc62, #loc63])
#loc123 = loc(fused[#loc66, #loc67])
#loc124 = loc(fused[#loc70, #loc69])
#loc125 = loc(fused[#loc71, #loc72])
#loc127 = loc(fused[#loc76, #loc77])
#loc128 = loc(fused[#loc83, #loc84])
#loc129 = loc(fused[#loc85, #loc86])
#loc130 = loc(fused[#loc87, #loc88])
#loc131 = loc(fused[#loc89, #loc90])
#loc132 = loc(fused[#loc91, #loc92])
#loc133 = loc(fused[#loc94, #loc93])
#loc134 = loc(fused[#loc96, #loc95])
