!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc129)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc131)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc7)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc132)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc11)
      cir.if %3 {
        %4 = cir.const #cir.int<10> : !s32i loc(#loc13)
        %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc13)
        %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc13)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc13)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc13)
        cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc135)
      } loc(#loc134)
    } loc(#loc133)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc137)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc138)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc137)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc137)
      cir.scope {
        %9 = cir.const #cir.int<0> : !s32i loc(#loc23)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc23)
        cir.store %10, %3 : !u64i, !cir.ptr<!u64i> loc(#loc140)
        cir.for : cond {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc25)
          %12 = cir.const #cir.int<10> : !s32i loc(#loc26)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc26)
          %14 = cir.cmp(lt, %11, %13) : !u64i, !s32i loc(#loc141)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc27)
          cir.condition(%15) loc(#loc27)
        } body {
          cir.scope {
            %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc29)
            %12 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc30)
            %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !u64i), !cir.ptr<!s32i> loc(#loc30)
            %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc30)
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc31)
            %16 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc32)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !u64i), !cir.ptr<!s32i> loc(#loc33)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc143)
          } loc(#loc142)
          cir.yield loc(#loc22)
        } step {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc35)
          %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc36)
          cir.store %12, %3 : !u64i, !cir.ptr<!u64i> loc(#loc144)
          cir.yield loc(#loc139)
        } loc(#loc139)
      } loc(#loc139)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc37)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc38)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc39)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc37)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc40)
    } loc(#loc136)
    cir.return loc(#loc4)
  } loc(#loc130)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc146)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc147)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    cir.return loc(#loc42)
  } loc(#loc145)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc148)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc49)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc150)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc54)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc151)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc58)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc58)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc49)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc49)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc62)
      } else {
        %4 = cir.const #cir.int<10> : !s32i loc(#loc63)
        %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc63)
        %6 = cir.const #cir.int<4> : !u64i loc(#loc63)
        %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc63)
        %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc63)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc63)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc63)
        cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc154)
      } loc(#loc153)
    } loc(#loc152)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc156)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc157)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc156)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc156)
      cir.scope {
        %9 = cir.const #cir.int<0> : !s32i loc(#loc73)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc73)
        cir.store %10, %3 : !u64i, !cir.ptr<!u64i> loc(#loc159)
        cir.for : cond {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc75)
          %12 = cir.const #cir.int<10> : !s32i loc(#loc76)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc76)
          %14 = cir.cmp(lt, %11, %13) : !u64i, !s32i loc(#loc160)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc77)
          cir.condition(%15) loc(#loc77)
        } body {
          cir.scope {
            %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc79)
            %12 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc80)
            %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !u64i), !cir.ptr<!s32i> loc(#loc80)
            %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc80)
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc81)
            %16 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc82)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !u64i), !cir.ptr<!s32i> loc(#loc83)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc162)
          } loc(#loc161)
          cir.yield loc(#loc72)
        } step {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc85)
          %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc86)
          cir.store %12, %3 : !u64i, !cir.ptr<!u64i> loc(#loc163)
          cir.yield loc(#loc158)
        } loc(#loc158)
      } loc(#loc158)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc87)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc88)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc89)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc87)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc90)
    } loc(#loc155)
    cir.return loc(#loc51)
  } loc(#loc149)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc165)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc95)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc166)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc99)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc99)
      cir.if %3 {
        %4 = cir.const #cir.int<10> : !s32i loc(#loc101)
        %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc101)
        %6 = cir.const #cir.int<4> : !u64i loc(#loc101)
        %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc101)
        %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc101)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc101)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc101)
        cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc169)
      } loc(#loc168)
    } loc(#loc167)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc171)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc172)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc171)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc171)
      cir.scope {
        %9 = cir.const #cir.int<0> : !s32i loc(#loc111)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc111)
        cir.store %10, %3 : !u64i, !cir.ptr<!u64i> loc(#loc174)
        cir.for : cond {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc113)
          %12 = cir.const #cir.int<10> : !s32i loc(#loc114)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc114)
          %14 = cir.cmp(lt, %11, %13) : !u64i, !s32i loc(#loc175)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc115)
          cir.condition(%15) loc(#loc115)
        } body {
          cir.scope {
            %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc117)
            %12 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc118)
            %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !u64i), !cir.ptr<!s32i> loc(#loc118)
            %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc118)
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc119)
            %16 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc120)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !u64i), !cir.ptr<!s32i> loc(#loc121)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc177)
          } loc(#loc176)
          cir.yield loc(#loc110)
        } step {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc123)
          %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc124)
          cir.store %12, %3 : !u64i, !cir.ptr<!u64i> loc(#loc178)
          cir.yield loc(#loc173)
        } loc(#loc173)
      } loc(#loc173)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc125)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc126)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc127)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc125)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc128)
    } loc(#loc170)
    cir.return loc(#loc92)
  } loc(#loc164)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":28:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":47:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":30:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":30:11)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":31:12)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":31:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":32:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":36:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":32:8)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":33:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":35:23)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":35:9)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":37:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":46:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":38:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":38:28)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":39:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":39:16)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":41:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":44:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":41:18)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":41:14)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":41:21)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":41:25)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":41:23)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":42:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":43:30)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":43:23)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":43:13)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":43:18)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":43:19)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":43:31)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":41:30)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":41:29)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":45:22)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":45:27)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":45:28)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":45:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":102:1)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":106:1)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":104:5)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":104:14)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":105:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":105:14)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":61:19)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":54:1)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":78:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":56:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":56:11)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":57:12)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":57:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":58:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":67:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":58:8)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":59:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":62:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":64:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":61:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":66:23)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":66:9)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":68:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":77:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":69:9)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":69:28)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":70:9)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":70:16)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":72:9)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":75:9)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":72:18)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":72:14)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":72:21)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":72:25)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":72:23)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":73:9)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":74:30)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":74:23)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":74:13)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":74:18)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":74:19)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":74:31)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":72:30)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":72:29)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":76:22)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":76:27)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":76:28)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":76:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":81:1)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":100:1)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":83:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":83:11)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":84:12)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":84:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":85:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":89:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":85:8)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":86:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":88:23)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":88:9)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":90:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":99:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":91:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":91:28)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":92:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":92:16)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":94:9)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":97:9)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":94:18)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":94:14)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":94:21)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":94:25)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":94:23)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":95:9)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":96:30)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":96:23)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":96:13)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":96:18)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":96:19)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":96:31)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":94:30)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":94:29)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":98:22)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":98:27)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":98:28)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c":98:9)
#loc129 = loc(fused[#loc1, #loc2])
#loc130 = loc(fused[#loc3, #loc4])
#loc131 = loc(fused[#loc5, #loc6])
#loc132 = loc(fused[#loc8, #loc7])
#loc133 = loc(fused[#loc9, #loc10])
#loc134 = loc(fused[#loc12, #loc10])
#loc135 = loc(fused[#loc14, #loc13])
#loc136 = loc(fused[#loc15, #loc16])
#loc137 = loc(fused[#loc17, #loc18])
#loc138 = loc(fused[#loc19, #loc20])
#loc139 = loc(fused[#loc21, #loc22])
#loc140 = loc(fused[#loc24, #loc23])
#loc141 = loc(fused[#loc25, #loc26])
#loc142 = loc(fused[#loc28, #loc22])
#loc143 = loc(fused[#loc31, #loc34])
#loc144 = loc(fused[#loc36, #loc35])
#loc145 = loc(fused[#loc41, #loc42])
#loc146 = loc(fused[#loc43, #loc44])
#loc147 = loc(fused[#loc45, #loc46])
#loc148 = loc(fused[#loc47, #loc48])
#loc149 = loc(fused[#loc50, #loc51])
#loc150 = loc(fused[#loc52, #loc53])
#loc151 = loc(fused[#loc55, #loc54])
#loc152 = loc(fused[#loc56, #loc57])
#loc153 = loc(fused[#loc59, #loc60, #loc61, #loc57])
#loc154 = loc(fused[#loc64, #loc63])
#loc155 = loc(fused[#loc65, #loc66])
#loc156 = loc(fused[#loc67, #loc68])
#loc157 = loc(fused[#loc69, #loc70])
#loc158 = loc(fused[#loc71, #loc72])
#loc159 = loc(fused[#loc74, #loc73])
#loc160 = loc(fused[#loc75, #loc76])
#loc161 = loc(fused[#loc78, #loc72])
#loc162 = loc(fused[#loc81, #loc84])
#loc163 = loc(fused[#loc86, #loc85])
#loc164 = loc(fused[#loc91, #loc92])
#loc165 = loc(fused[#loc93, #loc94])
#loc166 = loc(fused[#loc96, #loc95])
#loc167 = loc(fused[#loc97, #loc98])
#loc168 = loc(fused[#loc100, #loc98])
#loc169 = loc(fused[#loc102, #loc101])
#loc170 = loc(fused[#loc103, #loc104])
#loc171 = loc(fused[#loc105, #loc106])
#loc172 = loc(fused[#loc107, #loc108])
#loc173 = loc(fused[#loc109, #loc110])
#loc174 = loc(fused[#loc112, #loc111])
#loc175 = loc(fused[#loc113, #loc114])
#loc176 = loc(fused[#loc116, #loc110])
#loc177 = loc(fused[#loc119, #loc122])
#loc178 = loc(fused[#loc124, #loc123])
