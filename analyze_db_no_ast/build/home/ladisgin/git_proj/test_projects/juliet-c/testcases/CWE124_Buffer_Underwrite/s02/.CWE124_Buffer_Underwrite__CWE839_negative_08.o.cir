!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_negative_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc299)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc300)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto  @CWE124_Buffer_Underwrite__CWE839_negative_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc302)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc303)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc305)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc15)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
      cir.if %5 {
        %6 = cir.const #cir.int<5> : !s32i loc(#loc18)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc19)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc307)
      } loc(#loc306)
    } loc(#loc304)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc309)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc23)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc23)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc312)
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc313)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc313)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc313)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc34)
            %10 = cir.const #cir.int<10> : !s32i loc(#loc35)
            %11 = cir.cmp(lt, %9, %10) : !s32i, !s32i loc(#loc315)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc36)
            cir.if %12 {
              %13 = cir.const #cir.int<1> : !s32i loc(#loc40)
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc41)
              %15 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc42)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc42)
              cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc317)
              cir.scope {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc45)
                cir.store %17, %6 : !s32i, !cir.ptr<!s32i> loc(#loc319)
                cir.for : cond {
                  %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc47)
                  %19 = cir.const #cir.int<10> : !s32i loc(#loc48)
                  %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc320)
                  %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc49)
                  cir.condition(%21) loc(#loc49)
                } body {
                  cir.scope {
                    %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc51)
                    %19 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc52)
                    %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc52)
                    %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc52)
                    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc53)
                  } loc(#loc321)
                  cir.yield loc(#loc44)
                } step {
                  %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc54)
                  %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc55)
                  cir.store %19, %6 : !s32i, !cir.ptr<!s32i> loc(#loc322)
                  cir.yield loc(#loc318)
                } loc(#loc318)
              } loc(#loc318)
            } else {
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc56)
            } loc(#loc316)
          } loc(#loc314)
        } loc(#loc311)
      } loc(#loc310)
    } loc(#loc308)
    cir.return loc(#loc7)
  } loc(#loc301)
  cir.func no_proto  @CWE124_Buffer_Underwrite__CWE839_negative_08_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc324)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc325)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc61)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc326)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc327)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    cir.return loc(#loc58)
  } loc(#loc323)
  cir.func no_proto internal private  @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc68)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc69)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc329)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc329)
    cir.return %2 : !s32i loc(#loc329)
  } loc(#loc328)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc71)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc72)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc331)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc78)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc332)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc334)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc82)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc82)
      cir.if %5 {
        %6 = cir.const #cir.int<5> : !s32i loc(#loc85)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc86)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc336)
      } loc(#loc335)
    } loc(#loc333)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc338)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc90)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc90)
      cir.if %5 {
        %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc71)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc71)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc95)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc341)
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc342)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc342)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc342)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc104)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc105)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !s32i loc(#loc344)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc106)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc108)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc109)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc345)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc111)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc107)
                cir.yield %19 : !cir.bool loc(#loc107)
              }, false {
                %19 = cir.const #false loc(#loc107)
                cir.yield %19 : !cir.bool loc(#loc107)
              }) : (!cir.bool) -> !cir.bool loc(#loc107)
              cir.yield %18 : !cir.bool loc(#loc107)
            }, false {
              %14 = cir.const #false loc(#loc107)
              cir.yield %14 : !cir.bool loc(#loc107)
            }) : (!cir.bool) -> !cir.bool loc(#loc107)
            cir.if %13 {
              %14 = cir.const #cir.int<1> : !s32i loc(#loc115)
              %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
              %16 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc117)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc117)
              cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc347)
              cir.scope {
                %18 = cir.const #cir.int<0> : !s32i loc(#loc120)
                cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc349)
                cir.for : cond {
                  %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc122)
                  %20 = cir.const #cir.int<10> : !s32i loc(#loc123)
                  %21 = cir.cmp(lt, %19, %20) : !s32i, !s32i loc(#loc350)
                  %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc124)
                  cir.condition(%22) loc(#loc124)
                } body {
                  cir.scope {
                    %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc126)
                    %20 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc127)
                    %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc127)
                    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc127)
                    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc128)
                  } loc(#loc351)
                  cir.yield loc(#loc119)
                } step {
                  %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc129)
                  %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc130)
                  cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc352)
                  cir.yield loc(#loc348)
                } loc(#loc348)
              } loc(#loc348)
            } else {
              %14 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc72)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc72)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc131)
            } loc(#loc346)
          } loc(#loc343)
        } loc(#loc340)
      } loc(#loc339)
    } loc(#loc337)
    cir.return loc(#loc74)
  } loc(#loc330)
  cir.func no_proto internal private  @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc133)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc134)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc354)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc354)
    cir.return %2 : !s32i loc(#loc354)
  } loc(#loc353)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc356)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc140)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc141)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc357)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc359)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc145)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc145)
      cir.if %5 {
        %6 = cir.const #cir.int<5> : !s32i loc(#loc148)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc149)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc361)
      } loc(#loc360)
    } loc(#loc358)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc363)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc153)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc153)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc366)
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc367)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc367)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc367)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc164)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc165)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !s32i loc(#loc369)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc166)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc168)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc169)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc370)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc171)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc167)
                cir.yield %19 : !cir.bool loc(#loc167)
              }, false {
                %19 = cir.const #false loc(#loc167)
                cir.yield %19 : !cir.bool loc(#loc167)
              }) : (!cir.bool) -> !cir.bool loc(#loc167)
              cir.yield %18 : !cir.bool loc(#loc167)
            }, false {
              %14 = cir.const #false loc(#loc167)
              cir.yield %14 : !cir.bool loc(#loc167)
            }) : (!cir.bool) -> !cir.bool loc(#loc167)
            cir.if %13 {
              %14 = cir.const #cir.int<1> : !s32i loc(#loc175)
              %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc176)
              %16 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc177)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc177)
              cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc372)
              cir.scope {
                %18 = cir.const #cir.int<0> : !s32i loc(#loc180)
                cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc374)
                cir.for : cond {
                  %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc182)
                  %20 = cir.const #cir.int<10> : !s32i loc(#loc183)
                  %21 = cir.cmp(lt, %19, %20) : !s32i, !s32i loc(#loc375)
                  %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc184)
                  cir.condition(%22) loc(#loc184)
                } body {
                  cir.scope {
                    %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc186)
                    %20 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc187)
                    %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc187)
                    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc187)
                    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc188)
                  } loc(#loc376)
                  cir.yield loc(#loc179)
                } step {
                  %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc189)
                  %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc190)
                  cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc377)
                  cir.yield loc(#loc373)
                } loc(#loc373)
              } loc(#loc373)
            } else {
              %14 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc191)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc191)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc192)
            } loc(#loc371)
          } loc(#loc368)
        } loc(#loc365)
      } loc(#loc364)
    } loc(#loc362)
    cir.return loc(#loc137)
  } loc(#loc355)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc379)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc197)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc198)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc380)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc382)
      %4 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc202)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc202)
      cir.if %5 {
        %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc207)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc207)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc208)
      } else {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc209)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc384)
      } loc(#loc383)
    } loc(#loc381)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc386)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc213)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc213)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc389)
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc390)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc390)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc390)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc224)
            %10 = cir.const #cir.int<10> : !s32i loc(#loc225)
            %11 = cir.cmp(lt, %9, %10) : !s32i, !s32i loc(#loc392)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc226)
            cir.if %12 {
              %13 = cir.const #cir.int<1> : !s32i loc(#loc230)
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc231)
              %15 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc232)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc232)
              cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc394)
              cir.scope {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc235)
                cir.store %17, %6 : !s32i, !cir.ptr<!s32i> loc(#loc396)
                cir.for : cond {
                  %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc237)
                  %19 = cir.const #cir.int<10> : !s32i loc(#loc238)
                  %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc397)
                  %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc239)
                  cir.condition(%21) loc(#loc239)
                } body {
                  cir.scope {
                    %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc241)
                    %19 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc242)
                    %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc242)
                    %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc242)
                    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc243)
                  } loc(#loc398)
                  cir.yield loc(#loc234)
                } step {
                  %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc244)
                  %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc245)
                  cir.store %19, %6 : !s32i, !cir.ptr<!s32i> loc(#loc399)
                  cir.yield loc(#loc395)
                } loc(#loc395)
              } loc(#loc395)
            } else {
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc246)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc246)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc247)
            } loc(#loc393)
          } loc(#loc391)
        } loc(#loc388)
      } loc(#loc387)
    } loc(#loc385)
    cir.return loc(#loc194)
  } loc(#loc378)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc401)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc252)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc253)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc402)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc404)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc257)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc257)
      cir.if %5 {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc260)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc406)
      } loc(#loc405)
    } loc(#loc403)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc408)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc264)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc264)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc411)
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc412)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc412)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc412)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc275)
            %10 = cir.const #cir.int<10> : !s32i loc(#loc276)
            %11 = cir.cmp(lt, %9, %10) : !s32i, !s32i loc(#loc414)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc277)
            cir.if %12 {
              %13 = cir.const #cir.int<1> : !s32i loc(#loc281)
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc282)
              %15 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc283)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc283)
              cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc416)
              cir.scope {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc286)
                cir.store %17, %6 : !s32i, !cir.ptr<!s32i> loc(#loc418)
                cir.for : cond {
                  %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc288)
                  %19 = cir.const #cir.int<10> : !s32i loc(#loc289)
                  %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc419)
                  %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc290)
                  cir.condition(%21) loc(#loc290)
                } body {
                  cir.scope {
                    %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc292)
                    %19 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc293)
                    %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc293)
                    %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc293)
                    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc294)
                  } loc(#loc420)
                  cir.yield loc(#loc285)
                } step {
                  %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc295)
                  %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc296)
                  cir.store %19, %6 : !s32i, !cir.ptr<!s32i> loc(#loc421)
                  cir.yield loc(#loc417)
                } loc(#loc417)
              } loc(#loc417)
            } else {
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc297)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc297)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc298)
            } loc(#loc415)
          } loc(#loc413)
        } loc(#loc410)
      } loc(#loc409)
    } loc(#loc407)
    cir.return loc(#loc249)
  } loc(#loc400)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_negative_08.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":63:27)
#loc6 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":35:1)
#loc7 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":67:1)
#loc8 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":37:5)
#loc9 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":37:9)
#loc10 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":39:13)
#loc11 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":39:12)
#loc12 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":39:5)
#loc13 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":40:5)
#loc14 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":44:5)
#loc15 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":40:8)
#loc16 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":40:26)
#loc17 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":41:5)
#loc18 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":43:17)
#loc19 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":43:16)
#loc20 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":43:9)
#loc21 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":45:5)
#loc22 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":66:5)
#loc23 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":45:8)
#loc24 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":45:26)
#loc25 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":46:5)
#loc26 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":47:9)
#loc27 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":65:9)
#loc28 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":48:13)
#loc29 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":48:17)
#loc30 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":49:13)
#loc31 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":49:34)
#loc32 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":52:13)
#loc33 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":64:13)
#loc34 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":52:17)
#loc35 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":52:24)
#loc36 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":52:22)
#loc37 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":53:13)
#loc38 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":60:13)
#loc39 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":62:13)
#loc40 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":54:32)
#loc41 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":54:24)
#loc42 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":54:17)
#loc43 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":56:17)
#loc44 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":59:17)
#loc45 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":56:25)
#loc46 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":56:21)
#loc47 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":56:28)
#loc48 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":56:32)
#loc49 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":56:30)
#loc50 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":57:17)
#loc51 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":58:41)
#loc52 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":58:34)
#loc53 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":58:21)
#loc54 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":56:37)
#loc55 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":56:36)
#loc56 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":63:17)
#loc57 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":223:1)
#loc58 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":229:1)
#loc59 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":225:5)
#loc60 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":225:14)
#loc61 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":226:5)
#loc62 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":226:14)
#loc63 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":227:5)
#loc64 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":227:14)
#loc65 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":228:5)
#loc66 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":228:14)
#loc67 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":23:1)
#loc68 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":26:1)
#loc69 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":25:12)
#loc70 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":25:5)
#loc71 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":87:19)
#loc72 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":106:27)
#loc73 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":74:1)
#loc74 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":110:1)
#loc75 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":76:5)
#loc76 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":76:9)
#loc77 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":78:13)
#loc78 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":78:12)
#loc79 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":78:5)
#loc80 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":79:5)
#loc81 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":83:5)
#loc82 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":79:8)
#loc83 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":79:26)
#loc84 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":80:5)
#loc85 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":82:17)
#loc86 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":82:16)
#loc87 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":82:9)
#loc88 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":84:5)
#loc89 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":109:5)
#loc90 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":84:8)
#loc91 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":84:27)
#loc92 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":85:5)
#loc93 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":88:5)
#loc94 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":90:5)
#loc95 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":87:9)
#loc96 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":91:9)
#loc97 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":108:9)
#loc98 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":92:13)
#loc99 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":92:17)
#loc100 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":93:13)
#loc101 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":93:34)
#loc102 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":95:13)
#loc103 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":107:13)
#loc104 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":95:17)
#loc105 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":95:25)
#loc106 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":95:22)
#loc107 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":95:27)
#loc108 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":95:30)
#loc109 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":95:38)
#loc110 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":95:40)
#loc111 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":95:35)
#loc112 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":96:13)
#loc113 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":103:13)
#loc114 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":105:13)
#loc115 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":97:32)
#loc116 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":97:24)
#loc117 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":97:17)
#loc118 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":99:17)
#loc119 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":102:17)
#loc120 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":99:25)
#loc121 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":99:21)
#loc122 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":99:28)
#loc123 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":99:32)
#loc124 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":99:30)
#loc125 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":100:17)
#loc126 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":101:41)
#loc127 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":101:34)
#loc128 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":101:21)
#loc129 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":99:37)
#loc130 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":99:36)
#loc131 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":106:17)
#loc132 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":28:1)
#loc133 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":31:1)
#loc134 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":30:12)
#loc135 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":30:5)
#loc136 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":113:1)
#loc137 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":144:1)
#loc138 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":115:5)
#loc139 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":115:9)
#loc140 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":117:13)
#loc141 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":117:12)
#loc142 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":117:5)
#loc143 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":118:5)
#loc144 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":122:5)
#loc145 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":118:8)
#loc146 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":118:26)
#loc147 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":119:5)
#loc148 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":121:17)
#loc149 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":121:16)
#loc150 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":121:9)
#loc151 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":123:5)
#loc152 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":143:5)
#loc153 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":123:8)
#loc154 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":123:26)
#loc155 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":124:5)
#loc156 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":125:9)
#loc157 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":142:9)
#loc158 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":126:13)
#loc159 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":126:17)
#loc160 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":127:13)
#loc161 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":127:34)
#loc162 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":129:13)
#loc163 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":141:13)
#loc164 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":129:17)
#loc165 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":129:25)
#loc166 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":129:22)
#loc167 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":129:27)
#loc168 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":129:30)
#loc169 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":129:38)
#loc170 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":129:40)
#loc171 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":129:35)
#loc172 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":130:13)
#loc173 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":137:13)
#loc174 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":139:13)
#loc175 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":131:32)
#loc176 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":131:24)
#loc177 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":131:17)
#loc178 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":133:17)
#loc179 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":136:17)
#loc180 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":133:25)
#loc181 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":133:21)
#loc182 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":133:28)
#loc183 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":133:32)
#loc184 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":133:30)
#loc185 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":134:17)
#loc186 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":135:41)
#loc187 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":135:34)
#loc188 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":135:21)
#loc189 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":133:37)
#loc190 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":133:36)
#loc191 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":140:27)
#loc192 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":140:17)
#loc193 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":147:1)
#loc194 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":185:1)
#loc195 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":149:5)
#loc196 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":149:9)
#loc197 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":151:13)
#loc198 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":151:12)
#loc199 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":151:5)
#loc200 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":152:5)
#loc201 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":162:5)
#loc202 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":152:8)
#loc203 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":152:27)
#loc204 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":153:5)
#loc205 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":156:5)
#loc206 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":158:5)
#loc207 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":155:19)
#loc208 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":155:9)
#loc209 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":161:16)
#loc210 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":161:9)
#loc211 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":163:5)
#loc212 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":184:5)
#loc213 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":163:8)
#loc214 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":163:26)
#loc215 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":164:5)
#loc216 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":165:9)
#loc217 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":183:9)
#loc218 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":166:13)
#loc219 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":166:17)
#loc220 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":167:13)
#loc221 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":167:34)
#loc222 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":170:13)
#loc223 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":182:13)
#loc224 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":170:17)
#loc225 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":170:24)
#loc226 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":170:22)
#loc227 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":171:13)
#loc228 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":178:13)
#loc229 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":180:13)
#loc230 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":172:32)
#loc231 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":172:24)
#loc232 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":172:17)
#loc233 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":174:17)
#loc234 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":177:17)
#loc235 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":174:25)
#loc236 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":174:21)
#loc237 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":174:28)
#loc238 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":174:32)
#loc239 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":174:30)
#loc240 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":175:17)
#loc241 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":176:41)
#loc242 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":176:34)
#loc243 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":176:21)
#loc244 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":174:37)
#loc245 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":174:36)
#loc246 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":181:27)
#loc247 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":181:17)
#loc248 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":188:1)
#loc249 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":221:1)
#loc250 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":190:5)
#loc251 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":190:9)
#loc252 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":192:13)
#loc253 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":192:12)
#loc254 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":192:5)
#loc255 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":193:5)
#loc256 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":198:5)
#loc257 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":193:8)
#loc258 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":193:26)
#loc259 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":194:5)
#loc260 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":197:16)
#loc261 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":197:9)
#loc262 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":199:5)
#loc263 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":220:5)
#loc264 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":199:8)
#loc265 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":199:26)
#loc266 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":200:5)
#loc267 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":201:9)
#loc268 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":219:9)
#loc269 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":202:13)
#loc270 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":202:17)
#loc271 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":203:13)
#loc272 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":203:34)
#loc273 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":206:13)
#loc274 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":218:13)
#loc275 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":206:17)
#loc276 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":206:24)
#loc277 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":206:22)
#loc278 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":207:13)
#loc279 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":214:13)
#loc280 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":216:13)
#loc281 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":208:32)
#loc282 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":208:24)
#loc283 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":208:17)
#loc284 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":210:17)
#loc285 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":213:17)
#loc286 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":210:25)
#loc287 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":210:21)
#loc288 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":210:28)
#loc289 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":210:32)
#loc290 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":210:30)
#loc291 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":211:17)
#loc292 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":212:41)
#loc293 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":212:34)
#loc294 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":212:21)
#loc295 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":210:37)
#loc296 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":210:36)
#loc297 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":217:27)
#loc298 = loc("CWE124_Buffer_Underwrite__CWE839_negative_08.c":217:17)
#loc299 = loc(fused[#loc1, #loc2])
#loc300 = loc(fused[#loc3, #loc4])
#loc301 = loc(fused[#loc6, #loc7])
#loc302 = loc(fused[#loc8, #loc9])
#loc303 = loc(fused[#loc12, #loc10])
#loc304 = loc(fused[#loc13, #loc14])
#loc305 = loc(fused[#loc15, #loc16])
#loc306 = loc(fused[#loc17, #loc14])
#loc307 = loc(fused[#loc20, #loc18])
#loc308 = loc(fused[#loc21, #loc22])
#loc309 = loc(fused[#loc23, #loc24])
#loc310 = loc(fused[#loc25, #loc22])
#loc311 = loc(fused[#loc26, #loc27])
#loc312 = loc(fused[#loc28, #loc29])
#loc313 = loc(fused[#loc30, #loc31])
#loc314 = loc(fused[#loc32, #loc33])
#loc315 = loc(fused[#loc34, #loc35])
#loc316 = loc(fused[#loc37, #loc38, #loc39, #loc33])
#loc317 = loc(fused[#loc42, #loc40])
#loc318 = loc(fused[#loc43, #loc44])
#loc319 = loc(fused[#loc46, #loc45])
#loc320 = loc(fused[#loc47, #loc48])
#loc321 = loc(fused[#loc50, #loc44])
#loc322 = loc(fused[#loc55, #loc54])
#loc323 = loc(fused[#loc57, #loc58])
#loc324 = loc(fused[#loc59, #loc60])
#loc325 = loc(fused[#loc61, #loc62])
#loc326 = loc(fused[#loc63, #loc64])
#loc327 = loc(fused[#loc65, #loc66])
#loc328 = loc(fused[#loc67, #loc68])
#loc329 = loc(fused[#loc70, #loc69])
#loc330 = loc(fused[#loc73, #loc74])
#loc331 = loc(fused[#loc75, #loc76])
#loc332 = loc(fused[#loc79, #loc77])
#loc333 = loc(fused[#loc80, #loc81])
#loc334 = loc(fused[#loc82, #loc83])
#loc335 = loc(fused[#loc84, #loc81])
#loc336 = loc(fused[#loc87, #loc85])
#loc337 = loc(fused[#loc88, #loc89])
#loc338 = loc(fused[#loc90, #loc91])
#loc339 = loc(fused[#loc92, #loc93, #loc94, #loc89])
#loc340 = loc(fused[#loc96, #loc97])
#loc341 = loc(fused[#loc98, #loc99])
#loc342 = loc(fused[#loc100, #loc101])
#loc343 = loc(fused[#loc102, #loc103])
#loc344 = loc(fused[#loc104, #loc105])
#loc345 = loc(fused[#loc108, #loc110])
#loc346 = loc(fused[#loc112, #loc113, #loc114, #loc103])
#loc347 = loc(fused[#loc117, #loc115])
#loc348 = loc(fused[#loc118, #loc119])
#loc349 = loc(fused[#loc121, #loc120])
#loc350 = loc(fused[#loc122, #loc123])
#loc351 = loc(fused[#loc125, #loc119])
#loc352 = loc(fused[#loc130, #loc129])
#loc353 = loc(fused[#loc132, #loc133])
#loc354 = loc(fused[#loc135, #loc134])
#loc355 = loc(fused[#loc136, #loc137])
#loc356 = loc(fused[#loc138, #loc139])
#loc357 = loc(fused[#loc142, #loc140])
#loc358 = loc(fused[#loc143, #loc144])
#loc359 = loc(fused[#loc145, #loc146])
#loc360 = loc(fused[#loc147, #loc144])
#loc361 = loc(fused[#loc150, #loc148])
#loc362 = loc(fused[#loc151, #loc152])
#loc363 = loc(fused[#loc153, #loc154])
#loc364 = loc(fused[#loc155, #loc152])
#loc365 = loc(fused[#loc156, #loc157])
#loc366 = loc(fused[#loc158, #loc159])
#loc367 = loc(fused[#loc160, #loc161])
#loc368 = loc(fused[#loc162, #loc163])
#loc369 = loc(fused[#loc164, #loc165])
#loc370 = loc(fused[#loc168, #loc170])
#loc371 = loc(fused[#loc172, #loc173, #loc174, #loc163])
#loc372 = loc(fused[#loc177, #loc175])
#loc373 = loc(fused[#loc178, #loc179])
#loc374 = loc(fused[#loc181, #loc180])
#loc375 = loc(fused[#loc182, #loc183])
#loc376 = loc(fused[#loc185, #loc179])
#loc377 = loc(fused[#loc190, #loc189])
#loc378 = loc(fused[#loc193, #loc194])
#loc379 = loc(fused[#loc195, #loc196])
#loc380 = loc(fused[#loc199, #loc197])
#loc381 = loc(fused[#loc200, #loc201])
#loc382 = loc(fused[#loc202, #loc203])
#loc383 = loc(fused[#loc204, #loc205, #loc206, #loc201])
#loc384 = loc(fused[#loc210, #loc209])
#loc385 = loc(fused[#loc211, #loc212])
#loc386 = loc(fused[#loc213, #loc214])
#loc387 = loc(fused[#loc215, #loc212])
#loc388 = loc(fused[#loc216, #loc217])
#loc389 = loc(fused[#loc218, #loc219])
#loc390 = loc(fused[#loc220, #loc221])
#loc391 = loc(fused[#loc222, #loc223])
#loc392 = loc(fused[#loc224, #loc225])
#loc393 = loc(fused[#loc227, #loc228, #loc229, #loc223])
#loc394 = loc(fused[#loc232, #loc230])
#loc395 = loc(fused[#loc233, #loc234])
#loc396 = loc(fused[#loc236, #loc235])
#loc397 = loc(fused[#loc237, #loc238])
#loc398 = loc(fused[#loc240, #loc234])
#loc399 = loc(fused[#loc245, #loc244])
#loc400 = loc(fused[#loc248, #loc249])
#loc401 = loc(fused[#loc250, #loc251])
#loc402 = loc(fused[#loc254, #loc252])
#loc403 = loc(fused[#loc255, #loc256])
#loc404 = loc(fused[#loc257, #loc258])
#loc405 = loc(fused[#loc259, #loc256])
#loc406 = loc(fused[#loc261, #loc260])
#loc407 = loc(fused[#loc262, #loc263])
#loc408 = loc(fused[#loc264, #loc265])
#loc409 = loc(fused[#loc266, #loc263])
#loc410 = loc(fused[#loc267, #loc268])
#loc411 = loc(fused[#loc269, #loc270])
#loc412 = loc(fused[#loc271, #loc272])
#loc413 = loc(fused[#loc273, #loc274])
#loc414 = loc(fused[#loc275, #loc276])
#loc415 = loc(fused[#loc278, #loc279, #loc280, #loc274])
#loc416 = loc(fused[#loc283, #loc281])
#loc417 = loc(fused[#loc284, #loc285])
#loc418 = loc(fused[#loc287, #loc286])
#loc419 = loc(fused[#loc288, #loc289])
#loc420 = loc(fused[#loc291, #loc285])
#loc421 = loc(fused[#loc296, #loc295])
