!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__time_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc78)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc79)
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE511_Logic_Time_Bomb__time_11_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc83)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc83)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc12)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc12)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["currentTime"] {alignment = 8 : i64} loc(#loc86)
          %5 = cir.call @time(%4) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc19)
          cir.scope {
            %6 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc22)
            %7 = cir.const #cir.int<1199163600> : !s32i loc(#loc23)
            %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc23)
            %9 = cir.cmp(gt, %6, %8) : !s64i, !cir.bool loc(#loc88)
            cir.if %9 {
              %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc7)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc7)
              %12 = cir.call @unlink(%11) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc25)
            } loc(#loc89)
          } loc(#loc87)
        } loc(#loc85)
      } loc(#loc84)
    } loc(#loc82)
    cir.return loc(#loc9)
  } loc(#loc81)
  cir.func no_proto @CWE511_Logic_Time_Bomb__time_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc91)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc92)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc90)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc93)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc94)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc37)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc97)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc97)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc42)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc42)
      cir.if %3 {
        %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc36)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc36)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc47)
      } else {
        cir.scope {
          %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["currentTime"] {alignment = 8 : i64} loc(#loc100)
          %5 = cir.call @time(%4) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc52)
          cir.scope {
            %6 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc55)
            %7 = cir.const #cir.int<1199163600> : !s32i loc(#loc56)
            %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc56)
            %9 = cir.cmp(gt, %6, %8) : !s64i, !cir.bool loc(#loc102)
            cir.if %9 {
              %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc37)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc37)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc58)
            } loc(#loc103)
          } loc(#loc101)
        } loc(#loc99)
      } loc(#loc98)
    } loc(#loc96)
    cir.return loc(#loc39)
  } loc(#loc95)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc106)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc106)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc63)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc63)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["currentTime"] {alignment = 8 : i64} loc(#loc109)
          %5 = cir.call @time(%4) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc70)
          cir.scope {
            %6 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc73)
            %7 = cir.const #cir.int<1199163600> : !s32i loc(#loc74)
            %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc74)
            %9 = cir.cmp(gt, %6, %8) : !s64i, !cir.bool loc(#loc111)
            cir.if %9 {
              %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc76)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc76)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc77)
            } loc(#loc112)
          } loc(#loc110)
        } loc(#loc108)
      } loc(#loc107)
    } loc(#loc105)
    cir.return loc(#loc60)
  } loc(#loc104)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__time_11.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/time.h":76:1)
#loc4 = loc("/usr/include/time.h":76:38)
#loc5 = loc("/usr/include/unistd.h":858:1)
#loc6 = loc("/usr/include/unistd.h":858:48)
#loc7 = loc("CWE511_Logic_Time_Bomb__time_11.c":41:24)
#loc8 = loc("CWE511_Logic_Time_Bomb__time_11.c":31:1)
#loc9 = loc("CWE511_Logic_Time_Bomb__time_11.c":45:1)
#loc10 = loc("CWE511_Logic_Time_Bomb__time_11.c":33:5)
#loc11 = loc("CWE511_Logic_Time_Bomb__time_11.c":44:5)
#loc12 = loc("CWE511_Logic_Time_Bomb__time_11.c":33:8)
#loc13 = loc("CWE511_Logic_Time_Bomb__time_11.c":33:26)
#loc14 = loc("CWE511_Logic_Time_Bomb__time_11.c":34:5)
#loc15 = loc("CWE511_Logic_Time_Bomb__time_11.c":35:9)
#loc16 = loc("CWE511_Logic_Time_Bomb__time_11.c":43:9)
#loc17 = loc("CWE511_Logic_Time_Bomb__time_11.c":36:13)
#loc18 = loc("CWE511_Logic_Time_Bomb__time_11.c":36:20)
#loc19 = loc("CWE511_Logic_Time_Bomb__time_11.c":38:13)
#loc20 = loc("CWE511_Logic_Time_Bomb__time_11.c":39:13)
#loc21 = loc("CWE511_Logic_Time_Bomb__time_11.c":42:13)
#loc22 = loc("CWE511_Logic_Time_Bomb__time_11.c":39:17)
#loc23 = loc("CWE511_Logic_Time_Bomb__time_11.c":39:31)
#loc24 = loc("CWE511_Logic_Time_Bomb__time_11.c":40:13)
#loc25 = loc("CWE511_Logic_Time_Bomb__time_11.c":41:17)
#loc26 = loc("CWE511_Logic_Time_Bomb__time_11.c":90:1)
#loc27 = loc("CWE511_Logic_Time_Bomb__time_11.c":94:1)
#loc28 = loc("CWE511_Logic_Time_Bomb__time_11.c":92:5)
#loc29 = loc("CWE511_Logic_Time_Bomb__time_11.c":92:11)
#loc30 = loc("CWE511_Logic_Time_Bomb__time_11.c":93:5)
#loc31 = loc("CWE511_Logic_Time_Bomb__time_11.c":93:11)
#loc32 = loc("../../testcasesupport/std_testcase_io.h":50:1)
#loc33 = loc("../../testcasesupport/std_testcase_io.h":50:24)
#loc34 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc35 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc36 = loc("CWE511_Logic_Time_Bomb__time_11.c":57:19)
#loc37 = loc("CWE511_Logic_Time_Bomb__time_11.c":67:27)
#loc38 = loc("CWE511_Logic_Time_Bomb__time_11.c":52:1)
#loc39 = loc("CWE511_Logic_Time_Bomb__time_11.c":71:1)
#loc40 = loc("CWE511_Logic_Time_Bomb__time_11.c":54:5)
#loc41 = loc("CWE511_Logic_Time_Bomb__time_11.c":70:5)
#loc42 = loc("CWE511_Logic_Time_Bomb__time_11.c":54:8)
#loc43 = loc("CWE511_Logic_Time_Bomb__time_11.c":54:27)
#loc44 = loc("CWE511_Logic_Time_Bomb__time_11.c":55:5)
#loc45 = loc("CWE511_Logic_Time_Bomb__time_11.c":58:5)
#loc46 = loc("CWE511_Logic_Time_Bomb__time_11.c":60:5)
#loc47 = loc("CWE511_Logic_Time_Bomb__time_11.c":57:9)
#loc48 = loc("CWE511_Logic_Time_Bomb__time_11.c":61:9)
#loc49 = loc("CWE511_Logic_Time_Bomb__time_11.c":69:9)
#loc50 = loc("CWE511_Logic_Time_Bomb__time_11.c":62:13)
#loc51 = loc("CWE511_Logic_Time_Bomb__time_11.c":62:20)
#loc52 = loc("CWE511_Logic_Time_Bomb__time_11.c":64:13)
#loc53 = loc("CWE511_Logic_Time_Bomb__time_11.c":65:13)
#loc54 = loc("CWE511_Logic_Time_Bomb__time_11.c":68:13)
#loc55 = loc("CWE511_Logic_Time_Bomb__time_11.c":65:17)
#loc56 = loc("CWE511_Logic_Time_Bomb__time_11.c":65:31)
#loc57 = loc("CWE511_Logic_Time_Bomb__time_11.c":66:13)
#loc58 = loc("CWE511_Logic_Time_Bomb__time_11.c":67:17)
#loc59 = loc("CWE511_Logic_Time_Bomb__time_11.c":74:1)
#loc60 = loc("CWE511_Logic_Time_Bomb__time_11.c":88:1)
#loc61 = loc("CWE511_Logic_Time_Bomb__time_11.c":76:5)
#loc62 = loc("CWE511_Logic_Time_Bomb__time_11.c":87:5)
#loc63 = loc("CWE511_Logic_Time_Bomb__time_11.c":76:8)
#loc64 = loc("CWE511_Logic_Time_Bomb__time_11.c":76:26)
#loc65 = loc("CWE511_Logic_Time_Bomb__time_11.c":77:5)
#loc66 = loc("CWE511_Logic_Time_Bomb__time_11.c":78:9)
#loc67 = loc("CWE511_Logic_Time_Bomb__time_11.c":86:9)
#loc68 = loc("CWE511_Logic_Time_Bomb__time_11.c":79:13)
#loc69 = loc("CWE511_Logic_Time_Bomb__time_11.c":79:20)
#loc70 = loc("CWE511_Logic_Time_Bomb__time_11.c":81:13)
#loc71 = loc("CWE511_Logic_Time_Bomb__time_11.c":82:13)
#loc72 = loc("CWE511_Logic_Time_Bomb__time_11.c":85:13)
#loc73 = loc("CWE511_Logic_Time_Bomb__time_11.c":82:17)
#loc74 = loc("CWE511_Logic_Time_Bomb__time_11.c":82:31)
#loc75 = loc("CWE511_Logic_Time_Bomb__time_11.c":83:13)
#loc76 = loc("CWE511_Logic_Time_Bomb__time_11.c":84:27)
#loc77 = loc("CWE511_Logic_Time_Bomb__time_11.c":84:17)
#loc78 = loc(fused[#loc1, #loc2])
#loc79 = loc(fused[#loc3, #loc4])
#loc80 = loc(fused[#loc5, #loc6])
#loc81 = loc(fused[#loc8, #loc9])
#loc82 = loc(fused[#loc10, #loc11])
#loc83 = loc(fused[#loc12, #loc13])
#loc84 = loc(fused[#loc14, #loc11])
#loc85 = loc(fused[#loc15, #loc16])
#loc86 = loc(fused[#loc17, #loc18])
#loc87 = loc(fused[#loc20, #loc21])
#loc88 = loc(fused[#loc22, #loc23])
#loc89 = loc(fused[#loc24, #loc21])
#loc90 = loc(fused[#loc26, #loc27])
#loc91 = loc(fused[#loc28, #loc29])
#loc92 = loc(fused[#loc30, #loc31])
#loc93 = loc(fused[#loc32, #loc33])
#loc94 = loc(fused[#loc34, #loc35])
#loc95 = loc(fused[#loc38, #loc39])
#loc96 = loc(fused[#loc40, #loc41])
#loc97 = loc(fused[#loc42, #loc43])
#loc98 = loc(fused[#loc44, #loc45, #loc46, #loc41])
#loc99 = loc(fused[#loc48, #loc49])
#loc100 = loc(fused[#loc50, #loc51])
#loc101 = loc(fused[#loc53, #loc54])
#loc102 = loc(fused[#loc55, #loc56])
#loc103 = loc(fused[#loc57, #loc54])
#loc104 = loc(fused[#loc59, #loc60])
#loc105 = loc(fused[#loc61, #loc62])
#loc106 = loc(fused[#loc63, #loc64])
#loc107 = loc(fused[#loc65, #loc62])
#loc108 = loc(fused[#loc66, #loc67])
#loc109 = loc(fused[#loc68, #loc69])
#loc110 = loc(fused[#loc71, #loc72])
#loc111 = loc(fused[#loc73, #loc74])
#loc112 = loc(fused[#loc75, #loc72])
