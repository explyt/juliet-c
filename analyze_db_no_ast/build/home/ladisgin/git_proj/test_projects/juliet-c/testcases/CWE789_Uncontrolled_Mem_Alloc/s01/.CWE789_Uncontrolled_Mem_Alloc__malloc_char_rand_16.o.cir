!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc184)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc185)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc186)
  cir.func private  @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc187)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"hello\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc188)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc189)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Input is less than the length of the source string\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc14)
  cir.func no_proto  @CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["data"] {alignment = 8 : i64} loc(#loc191)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc19)
    %2 = cir.cast(integral, %1 : !s32i), !u64i loc(#loc19)
    cir.store %2, %0 : !u64i, !cir.ptr<!u64i> loc(#loc192)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc23)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc23)
        cir.condition(%4) loc(#loc23)
      } do {
        %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
        %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc24)
        cir.store %4, %0 : !u64i, !cir.ptr<!u64i> loc(#loc194)
        cir.break loc(#loc27)
      } loc(#loc193)
    } loc(#loc193)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc30)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc30)
        cir.condition(%4) loc(#loc30)
      } do {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["myString"] {alignment = 8 : i64} loc(#loc197)
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc37)
            %5 = cir.const #cir.int<5> : !u64i loc(#loc199)
            %6 = cir.cmp(gt, %4, %5) : !u64i, !s32i loc(#loc200)
            %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc40)
            cir.if %7 {
              %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc44)
              %9 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc45)
              %10 = cir.const #cir.int<1> : !u64i loc(#loc202)
              %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc203)
              %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc44)
              %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc204)
              cir.store %13, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc205)
              cir.scope {
                %23 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
                %24 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc53)
                %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc53)
                %26 = cir.cmp(eq, %23, %25) : !cir.ptr<!s8i>, !s32i loc(#loc207)
                %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc54)
                cir.if %27 {
                  %28 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc56)
                  %29 = cir.const #cir.int<1> : !s32i loc(#loc57)
                  %30 = cir.unary(minus, %29) : !s32i, !s32i loc(#loc58)
                  cir.call @exit(%30) : (!s32i) -> () extra(#fn_attr) loc(#loc56)
                } loc(#loc208)
              } loc(#loc206)
              %14 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc59)
              %15 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
              %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc9)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc9)
              %18 = cir.call @strcpy(%15, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc59)
              %19 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
              cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc62)
              %20 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc63)
              %21 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
              %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc64)
              cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc63)
            } else {
              %8 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc14)
              %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc14)
              cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc65)
            } loc(#loc201)
          } loc(#loc198)
        } loc(#loc196)
        cir.break loc(#loc66)
      } loc(#loc195)
    } loc(#loc195)
    cir.return loc(#loc16)
  } loc(#loc190)
  cir.func no_proto  @CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc210)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc69)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc211)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc71)
    cir.return loc(#loc68)
  } loc(#loc209)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"Input is less than the length of the source string or too large\00" : !cir.array<!s8i x 64>> : !cir.array<!s8i x 64> {alignment = 1 : i64} loc(#loc73)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["data"] {alignment = 8 : i64} loc(#loc213)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc78)
    %2 = cir.cast(integral, %1 : !s32i), !u64i loc(#loc78)
    cir.store %2, %0 : !u64i, !cir.ptr<!u64i> loc(#loc214)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc82)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc82)
        cir.condition(%4) loc(#loc82)
      } do {
        %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
        %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc83)
        cir.store %4, %0 : !u64i, !cir.ptr<!u64i> loc(#loc216)
        cir.break loc(#loc86)
      } loc(#loc215)
    } loc(#loc215)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc89)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc89)
        cir.condition(%4) loc(#loc89)
      } do {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["myString"] {alignment = 8 : i64} loc(#loc219)
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc96)
            %5 = cir.const #cir.int<5> : !u64i loc(#loc221)
            %6 = cir.cmp(gt, %4, %5) : !u64i, !s32i loc(#loc222)
            %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc99)
            %8 = cir.ternary(%7, true {
              %9 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc101)
              %10 = cir.const #cir.int<100> : !s32i loc(#loc102)
              %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc102)
              %12 = cir.cmp(lt, %9, %11) : !u64i, !s32i loc(#loc223)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc103)
              %14 = cir.ternary(%13, true {
                %15 = cir.const #true loc(#loc100)
                cir.yield %15 : !cir.bool loc(#loc100)
              }, false {
                %15 = cir.const #false loc(#loc100)
                cir.yield %15 : !cir.bool loc(#loc100)
              }) : (!cir.bool) -> !cir.bool loc(#loc100)
              cir.yield %14 : !cir.bool loc(#loc100)
            }, false {
              %9 = cir.const #false loc(#loc100)
              cir.yield %9 : !cir.bool loc(#loc100)
            }) : (!cir.bool) -> !cir.bool loc(#loc100)
            cir.if %8 {
              %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc107)
              %10 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc108)
              %11 = cir.const #cir.int<1> : !u64i loc(#loc225)
              %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc226)
              %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc107)
              %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc227)
              cir.store %14, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc228)
              cir.scope {
                %24 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
                %25 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc116)
                %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc116)
                %27 = cir.cmp(eq, %24, %26) : !cir.ptr<!s8i>, !s32i loc(#loc230)
                %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc117)
                cir.if %28 {
                  %29 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc119)
                  %30 = cir.const #cir.int<1> : !s32i loc(#loc120)
                  %31 = cir.unary(minus, %30) : !s32i, !s32i loc(#loc121)
                  cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc119)
                } loc(#loc231)
              } loc(#loc229)
              %15 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc122)
              %16 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
              %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc124)
              %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc124)
              %19 = cir.call @strcpy(%16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc122)
              %20 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
              cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc126)
              %21 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc127)
              %22 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc128)
              %23 = cir.cast(bitcast, %22 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc128)
              cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc127)
            } else {
              %9 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 64>> loc(#loc73)
              %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 64>>), !cir.ptr<!s8i> loc(#loc73)
              cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc129)
            } loc(#loc224)
          } loc(#loc220)
        } loc(#loc218)
        cir.break loc(#loc130)
      } loc(#loc217)
    } loc(#loc217)
    cir.return loc(#loc75)
  } loc(#loc212)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["data"] {alignment = 8 : i64} loc(#loc233)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc135)
    %2 = cir.cast(integral, %1 : !s32i), !u64i loc(#loc135)
    cir.store %2, %0 : !u64i, !cir.ptr<!u64i> loc(#loc234)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc139)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc139)
        cir.condition(%4) loc(#loc139)
      } do {
        %3 = cir.const #cir.int<20> : !s32i loc(#loc140)
        %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc140)
        cir.store %4, %0 : !u64i, !cir.ptr<!u64i> loc(#loc236)
        cir.break loc(#loc142)
      } loc(#loc235)
    } loc(#loc235)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc145)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc145)
        cir.condition(%4) loc(#loc145)
      } do {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["myString"] {alignment = 8 : i64} loc(#loc239)
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc152)
            %5 = cir.const #cir.int<5> : !u64i loc(#loc241)
            %6 = cir.cmp(gt, %4, %5) : !u64i, !s32i loc(#loc242)
            %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc155)
            cir.if %7 {
              %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc159)
              %9 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc160)
              %10 = cir.const #cir.int<1> : !u64i loc(#loc244)
              %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc245)
              %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc159)
              %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc246)
              cir.store %13, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc247)
              cir.scope {
                %23 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc167)
                %24 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc168)
                %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc168)
                %26 = cir.cmp(eq, %23, %25) : !cir.ptr<!s8i>, !s32i loc(#loc249)
                %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc169)
                cir.if %27 {
                  %28 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc171)
                  %29 = cir.const #cir.int<1> : !s32i loc(#loc172)
                  %30 = cir.unary(minus, %29) : !s32i, !s32i loc(#loc173)
                  cir.call @exit(%30) : (!s32i) -> () extra(#fn_attr) loc(#loc171)
                } loc(#loc250)
              } loc(#loc248)
              %14 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc174)
              %15 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc175)
              %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc176)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc176)
              %18 = cir.call @strcpy(%15, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc174)
              %19 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc177)
              cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc178)
              %20 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc179)
              %21 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc180)
              %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc180)
              cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc179)
            } else {
              %8 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc181)
              %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc181)
              cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc182)
            } loc(#loc243)
          } loc(#loc240)
        } loc(#loc238)
        cir.break loc(#loc183)
      } loc(#loc237)
    } loc(#loc237)
    cir.return loc(#loc132)
  } loc(#loc232)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("/usr/include/string.h":141:1)
#loc8 = loc("/usr/include/string.h":142:14)
#loc9 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":51:34)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc12 = loc("/usr/include/stdlib.h":687:1)
#loc13 = loc("/usr/include/stdlib.h":687:32)
#loc14 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":57:27)
#loc15 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":28:1)
#loc16 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":62:1)
#loc17 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":30:5)
#loc18 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":30:12)
#loc19 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":32:12)
#loc20 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":32:5)
#loc21 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":33:5)
#loc22 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":38:5)
#loc23 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":33:11)
#loc24 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":36:16)
#loc25 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":36:9)
#loc26 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":36:21)
#loc27 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":37:9)
#loc28 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":39:5)
#loc29 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":61:5)
#loc30 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":39:11)
#loc31 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":41:9)
#loc32 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":59:9)
#loc33 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":42:13)
#loc34 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":42:20)
#loc35 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":46:13)
#loc36 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":58:13)
#loc37 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":46:17)
#loc38 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":46:24)
#loc39 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":46:43)
#loc40 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":46:22)
#loc41 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":47:13)
#loc42 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":54:13)
#loc43 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":56:13)
#loc44 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":48:36)
#loc45 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":48:43)
#loc46 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":48:48)
#loc47 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":48:59)
#loc48 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":48:60)
#loc49 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":48:17)
#loc50 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":49:17)
#loc51 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":49:49)
#loc52 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":49:21)
#loc53 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":49:33)
#loc54 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":49:30)
#loc55 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":49:39)
#loc56 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":49:40)
#loc57 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":49:46)
#loc58 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":49:45)
#loc59 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":51:17)
#loc60 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":51:24)
#loc61 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":52:27)
#loc62 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":52:17)
#loc63 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":53:17)
#loc64 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":53:22)
#loc65 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":57:17)
#loc66 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":60:9)
#loc67 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":142:1)
#loc68 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":146:1)
#loc69 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":144:5)
#loc70 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":144:13)
#loc71 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":145:5)
#loc72 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":145:13)
#loc73 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":98:27)
#loc74 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":69:1)
#loc75 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":103:1)
#loc76 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":71:5)
#loc77 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":71:12)
#loc78 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":73:12)
#loc79 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":73:5)
#loc80 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":74:5)
#loc81 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":79:5)
#loc82 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":74:11)
#loc83 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":77:16)
#loc84 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":77:9)
#loc85 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":77:21)
#loc86 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":78:9)
#loc87 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":80:5)
#loc88 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":102:5)
#loc89 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":80:11)
#loc90 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":82:9)
#loc91 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":100:9)
#loc92 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":83:13)
#loc93 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":83:20)
#loc94 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":87:13)
#loc95 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":99:13)
#loc96 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":87:17)
#loc97 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":87:24)
#loc98 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":87:43)
#loc99 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":87:22)
#loc100 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":87:45)
#loc101 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":87:48)
#loc102 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":87:55)
#loc103 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":87:53)
#loc104 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":88:13)
#loc105 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":95:13)
#loc106 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":97:13)
#loc107 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":89:36)
#loc108 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":89:43)
#loc109 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":89:48)
#loc110 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":89:59)
#loc111 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":89:60)
#loc112 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":89:17)
#loc113 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":90:17)
#loc114 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":90:49)
#loc115 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":90:21)
#loc116 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":90:33)
#loc117 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":90:30)
#loc118 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":90:39)
#loc119 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":90:40)
#loc120 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":90:46)
#loc121 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":90:45)
#loc122 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":92:17)
#loc123 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":92:24)
#loc124 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":92:34)
#loc125 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":93:27)
#loc126 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":93:17)
#loc127 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":94:17)
#loc128 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":94:22)
#loc129 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":98:17)
#loc130 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":101:9)
#loc131 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":106:1)
#loc132 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":140:1)
#loc133 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":108:5)
#loc134 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":108:12)
#loc135 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":110:12)
#loc136 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":110:5)
#loc137 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":111:5)
#loc138 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":116:5)
#loc139 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":111:11)
#loc140 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":114:16)
#loc141 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":114:9)
#loc142 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":115:9)
#loc143 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":117:5)
#loc144 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":139:5)
#loc145 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":117:11)
#loc146 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":119:9)
#loc147 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":137:9)
#loc148 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":120:13)
#loc149 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":120:20)
#loc150 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":124:13)
#loc151 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":136:13)
#loc152 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":124:17)
#loc153 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":124:24)
#loc154 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":124:43)
#loc155 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":124:22)
#loc156 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":125:13)
#loc157 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":132:13)
#loc158 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":134:13)
#loc159 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":126:36)
#loc160 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":126:43)
#loc161 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":126:48)
#loc162 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":126:59)
#loc163 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":126:60)
#loc164 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":126:17)
#loc165 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":127:17)
#loc166 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":127:49)
#loc167 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":127:21)
#loc168 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":127:33)
#loc169 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":127:30)
#loc170 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":127:39)
#loc171 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":127:40)
#loc172 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":127:46)
#loc173 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":127:45)
#loc174 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":129:17)
#loc175 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":129:24)
#loc176 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":129:34)
#loc177 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":130:27)
#loc178 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":130:17)
#loc179 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":131:17)
#loc180 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":131:22)
#loc181 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":135:27)
#loc182 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":135:17)
#loc183 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_16.c":138:9)
#loc184 = loc(fused[#loc1, #loc2])
#loc185 = loc(fused[#loc3, #loc4])
#loc186 = loc(fused[#loc5, #loc6])
#loc187 = loc(fused[#loc7, #loc8])
#loc188 = loc(fused[#loc10, #loc11])
#loc189 = loc(fused[#loc12, #loc13])
#loc190 = loc(fused[#loc15, #loc16])
#loc191 = loc(fused[#loc17, #loc18])
#loc192 = loc(fused[#loc20, #loc19])
#loc193 = loc(fused[#loc21, #loc22])
#loc194 = loc(fused[#loc25, #loc26])
#loc195 = loc(fused[#loc28, #loc29])
#loc196 = loc(fused[#loc31, #loc32])
#loc197 = loc(fused[#loc33, #loc34])
#loc198 = loc(fused[#loc35, #loc36])
#loc199 = loc(fused[#loc38, #loc39])
#loc200 = loc(fused[#loc37, #loc39])
#loc201 = loc(fused[#loc41, #loc42, #loc43, #loc36])
#loc202 = loc(fused[#loc46, #loc47])
#loc203 = loc(fused[#loc45, #loc47])
#loc204 = loc(fused[#loc44, #loc48])
#loc205 = loc(fused[#loc49, #loc48])
#loc206 = loc(fused[#loc50, #loc51])
#loc207 = loc(fused[#loc52, #loc53])
#loc208 = loc(fused[#loc55, #loc51])
#loc209 = loc(fused[#loc67, #loc68])
#loc210 = loc(fused[#loc69, #loc70])
#loc211 = loc(fused[#loc71, #loc72])
#loc212 = loc(fused[#loc74, #loc75])
#loc213 = loc(fused[#loc76, #loc77])
#loc214 = loc(fused[#loc79, #loc78])
#loc215 = loc(fused[#loc80, #loc81])
#loc216 = loc(fused[#loc84, #loc85])
#loc217 = loc(fused[#loc87, #loc88])
#loc218 = loc(fused[#loc90, #loc91])
#loc219 = loc(fused[#loc92, #loc93])
#loc220 = loc(fused[#loc94, #loc95])
#loc221 = loc(fused[#loc97, #loc98])
#loc222 = loc(fused[#loc96, #loc98])
#loc223 = loc(fused[#loc101, #loc102])
#loc224 = loc(fused[#loc104, #loc105, #loc106, #loc95])
#loc225 = loc(fused[#loc109, #loc110])
#loc226 = loc(fused[#loc108, #loc110])
#loc227 = loc(fused[#loc107, #loc111])
#loc228 = loc(fused[#loc112, #loc111])
#loc229 = loc(fused[#loc113, #loc114])
#loc230 = loc(fused[#loc115, #loc116])
#loc231 = loc(fused[#loc118, #loc114])
#loc232 = loc(fused[#loc131, #loc132])
#loc233 = loc(fused[#loc133, #loc134])
#loc234 = loc(fused[#loc136, #loc135])
#loc235 = loc(fused[#loc137, #loc138])
#loc236 = loc(fused[#loc141, #loc140])
#loc237 = loc(fused[#loc143, #loc144])
#loc238 = loc(fused[#loc146, #loc147])
#loc239 = loc(fused[#loc148, #loc149])
#loc240 = loc(fused[#loc150, #loc151])
#loc241 = loc(fused[#loc153, #loc154])
#loc242 = loc(fused[#loc152, #loc154])
#loc243 = loc(fused[#loc156, #loc157, #loc158, #loc151])
#loc244 = loc(fused[#loc161, #loc162])
#loc245 = loc(fused[#loc160, #loc162])
#loc246 = loc(fused[#loc159, #loc163])
#loc247 = loc(fused[#loc164, #loc163])
#loc248 = loc(fused[#loc165, #loc166])
#loc249 = loc(fused[#loc167, #loc168])
#loc250 = loc(fused[#loc170, #loc166])
