!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int_calloc_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc231)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc232)
  cir.func private @printIntLine(!s32i) loc(#loc233)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc234)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE401_Memory_Leak__int_calloc_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc236)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc14)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc237)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc18)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc20)
          %4 = cir.const #cir.int<100> : !s32i loc(#loc21)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc21)
          %6 = cir.const #cir.int<4> : !u64i loc(#loc239)
          %7 = cir.call @calloc(%5, %6) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc240)
          cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc241)
          cir.scope {
            %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc28)
            %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc29)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc29)
            %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc243)
            cir.if %20 {
              %21 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc31)
              %22 = cir.const #cir.int<1> : !s32i loc(#loc32)
              %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc33)
              cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc31)
            } loc(#loc244)
          } loc(#loc242)
          %9 = cir.const #cir.int<5> : !s32i loc(#loc34)
          %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc35)
          %11 = cir.const #cir.int<0> : !s32i loc(#loc36)
          %12 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc37)
          cir.store %9, %12 : !s32i, !cir.ptr<!s32i> loc(#loc245)
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc38)
          %14 = cir.const #cir.int<0> : !s32i loc(#loc39)
          %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc40)
          %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc38)
          cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc41)
          cir.break loc(#loc42)
        } loc(#loc19)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc9)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc44)
          cir.break loc(#loc45)
        } loc(#loc43)
        cir.yield loc(#loc16)
      } loc(#loc16)
    } loc(#loc238)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc48)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.break loc(#loc50)
        } loc(#loc49)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc52)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc52)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc53)
          cir.break loc(#loc54)
        } loc(#loc51)
        cir.yield loc(#loc46)
      } loc(#loc46)
    } loc(#loc246)
    cir.return loc(#loc11)
  } loc(#loc235)
  cir.func no_proto @CWE401_Memory_Leak__int_calloc_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc248)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc57)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc249)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc59)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc250)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc61)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc251)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc63)
    cir.return loc(#loc56)
  } loc(#loc247)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc252)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc254)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc71)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc255)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc75)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc77)
          %4 = cir.const #cir.int<100> : !s32i loc(#loc78)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc78)
          %6 = cir.const #cir.int<4> : !u64i loc(#loc257)
          %7 = cir.call @calloc(%5, %6) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc77)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc258)
          cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc259)
          cir.scope {
            %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc85)
            %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc86)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc86)
            %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc261)
            cir.if %20 {
              %21 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc88)
              %22 = cir.const #cir.int<1> : !s32i loc(#loc89)
              %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc90)
              cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc88)
            } loc(#loc262)
          } loc(#loc260)
          %9 = cir.const #cir.int<5> : !s32i loc(#loc91)
          %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc92)
          %11 = cir.const #cir.int<0> : !s32i loc(#loc93)
          %12 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc94)
          cir.store %9, %12 : !s32i, !cir.ptr<!s32i> loc(#loc263)
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
          %14 = cir.const #cir.int<0> : !s32i loc(#loc96)
          %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc97)
          %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc95)
          cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc98)
          cir.break loc(#loc99)
        } loc(#loc76)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc101)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc101)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc102)
          cir.break loc(#loc103)
        } loc(#loc100)
        cir.yield loc(#loc73)
      } loc(#loc73)
    } loc(#loc256)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc106)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc108)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc108)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc109)
          cir.break loc(#loc110)
        } loc(#loc107)
        cir.case(default, []) {
          %3 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc112)
          %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc113)
          %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc113)
          cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc112)
          cir.break loc(#loc114)
        } loc(#loc111)
        cir.yield loc(#loc104)
      } loc(#loc104)
    } loc(#loc264)
    cir.return loc(#loc68)
  } loc(#loc253)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc266)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc119)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc267)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc123)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc125)
          %4 = cir.const #cir.int<100> : !s32i loc(#loc126)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc126)
          %6 = cir.const #cir.int<4> : !u64i loc(#loc269)
          %7 = cir.call @calloc(%5, %6) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc125)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc270)
          cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc271)
          cir.scope {
            %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc133)
            %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc134)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc134)
            %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc273)
            cir.if %20 {
              %21 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc136)
              %22 = cir.const #cir.int<1> : !s32i loc(#loc137)
              %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc138)
              cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc136)
            } loc(#loc274)
          } loc(#loc272)
          %9 = cir.const #cir.int<5> : !s32i loc(#loc139)
          %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc140)
          %11 = cir.const #cir.int<0> : !s32i loc(#loc141)
          %12 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc142)
          cir.store %9, %12 : !s32i, !cir.ptr<!s32i> loc(#loc275)
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc143)
          %14 = cir.const #cir.int<0> : !s32i loc(#loc144)
          %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc145)
          %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc143)
          cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc146)
          cir.break loc(#loc147)
        } loc(#loc124)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc149)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc149)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc150)
          cir.break loc(#loc151)
        } loc(#loc148)
        cir.yield loc(#loc121)
      } loc(#loc121)
    } loc(#loc268)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc154)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %3 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc156)
          %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc157)
          %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc157)
          cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc156)
          cir.break loc(#loc158)
        } loc(#loc155)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc160)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc160)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc161)
          cir.break loc(#loc162)
        } loc(#loc159)
        cir.yield loc(#loc152)
      } loc(#loc152)
    } loc(#loc276)
    cir.return loc(#loc116)
  } loc(#loc265)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc278)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc167)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc279)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc171)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc173)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc173)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc174)
          cir.break loc(#loc175)
        } loc(#loc172)
        cir.case(default, []) {
          %3 = cir.const #cir.int<100> : !s32i loc(#loc177)
          %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc177)
          %5 = cir.const #cir.int<4> : !u64i loc(#loc177)
          %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc177)
          %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc177)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc177)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc177)
          cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc281)
          %10 = cir.const #cir.int<5> : !s32i loc(#loc179)
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc180)
          %12 = cir.const #cir.int<0> : !s32i loc(#loc181)
          %13 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc182)
          cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc282)
          %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc183)
          %15 = cir.const #cir.int<0> : !s32i loc(#loc184)
          %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc185)
          %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc183)
          cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc186)
          cir.break loc(#loc187)
        } loc(#loc176)
        cir.yield loc(#loc169)
      } loc(#loc169)
    } loc(#loc280)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc190)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.break loc(#loc192)
        } loc(#loc191)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc194)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc194)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc195)
          cir.break loc(#loc196)
        } loc(#loc193)
        cir.yield loc(#loc188)
      } loc(#loc188)
    } loc(#loc283)
    cir.return loc(#loc164)
  } loc(#loc277)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc285)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc201)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc286)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc205)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.const #cir.int<100> : !s32i loc(#loc207)
          %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc207)
          %5 = cir.const #cir.int<4> : !u64i loc(#loc207)
          %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc207)
          %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc207)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc207)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc207)
          cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc288)
          %10 = cir.const #cir.int<5> : !s32i loc(#loc209)
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc210)
          %12 = cir.const #cir.int<0> : !s32i loc(#loc211)
          %13 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc212)
          cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc289)
          %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc213)
          %15 = cir.const #cir.int<0> : !s32i loc(#loc214)
          %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc215)
          %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc213)
          cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc216)
          cir.break loc(#loc217)
        } loc(#loc206)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc219)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc219)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc220)
          cir.break loc(#loc221)
        } loc(#loc218)
        cir.yield loc(#loc203)
      } loc(#loc203)
    } loc(#loc287)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc224)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.break loc(#loc226)
        } loc(#loc225)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc228)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc228)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc229)
          cir.break loc(#loc230)
        } loc(#loc227)
        cir.yield loc(#loc222)
      } loc(#loc222)
    } loc(#loc290)
    cir.return loc(#loc198)
  } loc(#loc284)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int_calloc_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":675:1)
#loc2 = loc("/usr/include/stdlib.h":676:14)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE401_Memory_Leak__int_calloc_15.c":40:19)
#loc10 = loc("CWE401_Memory_Leak__int_calloc_15.c":24:1)
#loc11 = loc("CWE401_Memory_Leak__int_calloc_15.c":54:1)
#loc12 = loc("CWE401_Memory_Leak__int_calloc_15.c":26:5)
#loc13 = loc("CWE401_Memory_Leak__int_calloc_15.c":26:11)
#loc14 = loc("CWE401_Memory_Leak__int_calloc_15.c":27:12)
#loc15 = loc("CWE401_Memory_Leak__int_calloc_15.c":27:5)
#loc16 = loc("CWE401_Memory_Leak__int_calloc_15.c":28:5)
#loc17 = loc("CWE401_Memory_Leak__int_calloc_15.c":42:5)
#loc18 = loc("CWE401_Memory_Leak__int_calloc_15.c":28:12)
#loc19 = loc("CWE401_Memory_Leak__int_calloc_15.c":30:5)
#loc20 = loc("CWE401_Memory_Leak__int_calloc_15.c":32:23)
#loc21 = loc("CWE401_Memory_Leak__int_calloc_15.c":32:30)
#loc22 = loc("CWE401_Memory_Leak__int_calloc_15.c":32:35)
#loc23 = loc("CWE401_Memory_Leak__int_calloc_15.c":32:45)
#loc24 = loc("CWE401_Memory_Leak__int_calloc_15.c":32:46)
#loc25 = loc("CWE401_Memory_Leak__int_calloc_15.c":32:9)
#loc26 = loc("CWE401_Memory_Leak__int_calloc_15.c":33:9)
#loc27 = loc("CWE401_Memory_Leak__int_calloc_15.c":33:37)
#loc28 = loc("CWE401_Memory_Leak__int_calloc_15.c":33:13)
#loc29 = loc("CWE401_Memory_Leak__int_calloc_15.c":33:21)
#loc30 = loc("CWE401_Memory_Leak__int_calloc_15.c":33:27)
#loc31 = loc("CWE401_Memory_Leak__int_calloc_15.c":33:28)
#loc32 = loc("CWE401_Memory_Leak__int_calloc_15.c":33:34)
#loc33 = loc("CWE401_Memory_Leak__int_calloc_15.c":33:33)
#loc34 = loc("CWE401_Memory_Leak__int_calloc_15.c":35:19)
#loc35 = loc("CWE401_Memory_Leak__int_calloc_15.c":35:9)
#loc36 = loc("CWE401_Memory_Leak__int_calloc_15.c":35:14)
#loc37 = loc("CWE401_Memory_Leak__int_calloc_15.c":35:15)
#loc38 = loc("CWE401_Memory_Leak__int_calloc_15.c":36:22)
#loc39 = loc("CWE401_Memory_Leak__int_calloc_15.c":36:27)
#loc40 = loc("CWE401_Memory_Leak__int_calloc_15.c":36:28)
#loc41 = loc("CWE401_Memory_Leak__int_calloc_15.c":36:9)
#loc42 = loc("CWE401_Memory_Leak__int_calloc_15.c":37:9)
#loc43 = loc("CWE401_Memory_Leak__int_calloc_15.c":38:5)
#loc44 = loc("CWE401_Memory_Leak__int_calloc_15.c":40:9)
#loc45 = loc("CWE401_Memory_Leak__int_calloc_15.c":41:9)
#loc46 = loc("CWE401_Memory_Leak__int_calloc_15.c":43:5)
#loc47 = loc("CWE401_Memory_Leak__int_calloc_15.c":53:5)
#loc48 = loc("CWE401_Memory_Leak__int_calloc_15.c":43:12)
#loc49 = loc("CWE401_Memory_Leak__int_calloc_15.c":45:5)
#loc50 = loc("CWE401_Memory_Leak__int_calloc_15.c":48:9)
#loc51 = loc("CWE401_Memory_Leak__int_calloc_15.c":49:5)
#loc52 = loc("CWE401_Memory_Leak__int_calloc_15.c":51:19)
#loc53 = loc("CWE401_Memory_Leak__int_calloc_15.c":51:9)
#loc54 = loc("CWE401_Memory_Leak__int_calloc_15.c":52:9)
#loc55 = loc("CWE401_Memory_Leak__int_calloc_15.c":190:1)
#loc56 = loc("CWE401_Memory_Leak__int_calloc_15.c":196:1)
#loc57 = loc("CWE401_Memory_Leak__int_calloc_15.c":192:5)
#loc58 = loc("CWE401_Memory_Leak__int_calloc_15.c":192:14)
#loc59 = loc("CWE401_Memory_Leak__int_calloc_15.c":193:5)
#loc60 = loc("CWE401_Memory_Leak__int_calloc_15.c":193:14)
#loc61 = loc("CWE401_Memory_Leak__int_calloc_15.c":194:5)
#loc62 = loc("CWE401_Memory_Leak__int_calloc_15.c":194:14)
#loc63 = loc("CWE401_Memory_Leak__int_calloc_15.c":195:5)
#loc64 = loc("CWE401_Memory_Leak__int_calloc_15.c":195:14)
#loc65 = loc("/usr/include/stdlib.h":687:1)
#loc66 = loc("/usr/include/stdlib.h":687:32)
#loc67 = loc("CWE401_Memory_Leak__int_calloc_15.c":61:1)
#loc68 = loc("CWE401_Memory_Leak__int_calloc_15.c":91:1)
#loc69 = loc("CWE401_Memory_Leak__int_calloc_15.c":63:5)
#loc70 = loc("CWE401_Memory_Leak__int_calloc_15.c":63:11)
#loc71 = loc("CWE401_Memory_Leak__int_calloc_15.c":64:12)
#loc72 = loc("CWE401_Memory_Leak__int_calloc_15.c":64:5)
#loc73 = loc("CWE401_Memory_Leak__int_calloc_15.c":65:5)
#loc74 = loc("CWE401_Memory_Leak__int_calloc_15.c":79:5)
#loc75 = loc("CWE401_Memory_Leak__int_calloc_15.c":65:12)
#loc76 = loc("CWE401_Memory_Leak__int_calloc_15.c":67:5)
#loc77 = loc("CWE401_Memory_Leak__int_calloc_15.c":69:23)
#loc78 = loc("CWE401_Memory_Leak__int_calloc_15.c":69:30)
#loc79 = loc("CWE401_Memory_Leak__int_calloc_15.c":69:35)
#loc80 = loc("CWE401_Memory_Leak__int_calloc_15.c":69:45)
#loc81 = loc("CWE401_Memory_Leak__int_calloc_15.c":69:46)
#loc82 = loc("CWE401_Memory_Leak__int_calloc_15.c":69:9)
#loc83 = loc("CWE401_Memory_Leak__int_calloc_15.c":70:9)
#loc84 = loc("CWE401_Memory_Leak__int_calloc_15.c":70:37)
#loc85 = loc("CWE401_Memory_Leak__int_calloc_15.c":70:13)
#loc86 = loc("CWE401_Memory_Leak__int_calloc_15.c":70:21)
#loc87 = loc("CWE401_Memory_Leak__int_calloc_15.c":70:27)
#loc88 = loc("CWE401_Memory_Leak__int_calloc_15.c":70:28)
#loc89 = loc("CWE401_Memory_Leak__int_calloc_15.c":70:34)
#loc90 = loc("CWE401_Memory_Leak__int_calloc_15.c":70:33)
#loc91 = loc("CWE401_Memory_Leak__int_calloc_15.c":72:19)
#loc92 = loc("CWE401_Memory_Leak__int_calloc_15.c":72:9)
#loc93 = loc("CWE401_Memory_Leak__int_calloc_15.c":72:14)
#loc94 = loc("CWE401_Memory_Leak__int_calloc_15.c":72:15)
#loc95 = loc("CWE401_Memory_Leak__int_calloc_15.c":73:22)
#loc96 = loc("CWE401_Memory_Leak__int_calloc_15.c":73:27)
#loc97 = loc("CWE401_Memory_Leak__int_calloc_15.c":73:28)
#loc98 = loc("CWE401_Memory_Leak__int_calloc_15.c":73:9)
#loc99 = loc("CWE401_Memory_Leak__int_calloc_15.c":74:9)
#loc100 = loc("CWE401_Memory_Leak__int_calloc_15.c":75:5)
#loc101 = loc("CWE401_Memory_Leak__int_calloc_15.c":77:19)
#loc102 = loc("CWE401_Memory_Leak__int_calloc_15.c":77:9)
#loc103 = loc("CWE401_Memory_Leak__int_calloc_15.c":78:9)
#loc104 = loc("CWE401_Memory_Leak__int_calloc_15.c":80:5)
#loc105 = loc("CWE401_Memory_Leak__int_calloc_15.c":90:5)
#loc106 = loc("CWE401_Memory_Leak__int_calloc_15.c":80:12)
#loc107 = loc("CWE401_Memory_Leak__int_calloc_15.c":82:5)
#loc108 = loc("CWE401_Memory_Leak__int_calloc_15.c":84:19)
#loc109 = loc("CWE401_Memory_Leak__int_calloc_15.c":84:9)
#loc110 = loc("CWE401_Memory_Leak__int_calloc_15.c":85:9)
#loc111 = loc("CWE401_Memory_Leak__int_calloc_15.c":86:5)
#loc112 = loc("CWE401_Memory_Leak__int_calloc_15.c":88:9)
#loc113 = loc("CWE401_Memory_Leak__int_calloc_15.c":88:14)
#loc114 = loc("CWE401_Memory_Leak__int_calloc_15.c":89:9)
#loc115 = loc("CWE401_Memory_Leak__int_calloc_15.c":94:1)
#loc116 = loc("CWE401_Memory_Leak__int_calloc_15.c":124:1)
#loc117 = loc("CWE401_Memory_Leak__int_calloc_15.c":96:5)
#loc118 = loc("CWE401_Memory_Leak__int_calloc_15.c":96:11)
#loc119 = loc("CWE401_Memory_Leak__int_calloc_15.c":97:12)
#loc120 = loc("CWE401_Memory_Leak__int_calloc_15.c":97:5)
#loc121 = loc("CWE401_Memory_Leak__int_calloc_15.c":98:5)
#loc122 = loc("CWE401_Memory_Leak__int_calloc_15.c":112:5)
#loc123 = loc("CWE401_Memory_Leak__int_calloc_15.c":98:12)
#loc124 = loc("CWE401_Memory_Leak__int_calloc_15.c":100:5)
#loc125 = loc("CWE401_Memory_Leak__int_calloc_15.c":102:23)
#loc126 = loc("CWE401_Memory_Leak__int_calloc_15.c":102:30)
#loc127 = loc("CWE401_Memory_Leak__int_calloc_15.c":102:35)
#loc128 = loc("CWE401_Memory_Leak__int_calloc_15.c":102:45)
#loc129 = loc("CWE401_Memory_Leak__int_calloc_15.c":102:46)
#loc130 = loc("CWE401_Memory_Leak__int_calloc_15.c":102:9)
#loc131 = loc("CWE401_Memory_Leak__int_calloc_15.c":103:9)
#loc132 = loc("CWE401_Memory_Leak__int_calloc_15.c":103:37)
#loc133 = loc("CWE401_Memory_Leak__int_calloc_15.c":103:13)
#loc134 = loc("CWE401_Memory_Leak__int_calloc_15.c":103:21)
#loc135 = loc("CWE401_Memory_Leak__int_calloc_15.c":103:27)
#loc136 = loc("CWE401_Memory_Leak__int_calloc_15.c":103:28)
#loc137 = loc("CWE401_Memory_Leak__int_calloc_15.c":103:34)
#loc138 = loc("CWE401_Memory_Leak__int_calloc_15.c":103:33)
#loc139 = loc("CWE401_Memory_Leak__int_calloc_15.c":105:19)
#loc140 = loc("CWE401_Memory_Leak__int_calloc_15.c":105:9)
#loc141 = loc("CWE401_Memory_Leak__int_calloc_15.c":105:14)
#loc142 = loc("CWE401_Memory_Leak__int_calloc_15.c":105:15)
#loc143 = loc("CWE401_Memory_Leak__int_calloc_15.c":106:22)
#loc144 = loc("CWE401_Memory_Leak__int_calloc_15.c":106:27)
#loc145 = loc("CWE401_Memory_Leak__int_calloc_15.c":106:28)
#loc146 = loc("CWE401_Memory_Leak__int_calloc_15.c":106:9)
#loc147 = loc("CWE401_Memory_Leak__int_calloc_15.c":107:9)
#loc148 = loc("CWE401_Memory_Leak__int_calloc_15.c":108:5)
#loc149 = loc("CWE401_Memory_Leak__int_calloc_15.c":110:19)
#loc150 = loc("CWE401_Memory_Leak__int_calloc_15.c":110:9)
#loc151 = loc("CWE401_Memory_Leak__int_calloc_15.c":111:9)
#loc152 = loc("CWE401_Memory_Leak__int_calloc_15.c":113:5)
#loc153 = loc("CWE401_Memory_Leak__int_calloc_15.c":123:5)
#loc154 = loc("CWE401_Memory_Leak__int_calloc_15.c":113:12)
#loc155 = loc("CWE401_Memory_Leak__int_calloc_15.c":115:5)
#loc156 = loc("CWE401_Memory_Leak__int_calloc_15.c":117:9)
#loc157 = loc("CWE401_Memory_Leak__int_calloc_15.c":117:14)
#loc158 = loc("CWE401_Memory_Leak__int_calloc_15.c":118:9)
#loc159 = loc("CWE401_Memory_Leak__int_calloc_15.c":119:5)
#loc160 = loc("CWE401_Memory_Leak__int_calloc_15.c":121:19)
#loc161 = loc("CWE401_Memory_Leak__int_calloc_15.c":121:9)
#loc162 = loc("CWE401_Memory_Leak__int_calloc_15.c":122:9)
#loc163 = loc("CWE401_Memory_Leak__int_calloc_15.c":127:1)
#loc164 = loc("CWE401_Memory_Leak__int_calloc_15.c":156:1)
#loc165 = loc("CWE401_Memory_Leak__int_calloc_15.c":129:5)
#loc166 = loc("CWE401_Memory_Leak__int_calloc_15.c":129:11)
#loc167 = loc("CWE401_Memory_Leak__int_calloc_15.c":130:12)
#loc168 = loc("CWE401_Memory_Leak__int_calloc_15.c":130:5)
#loc169 = loc("CWE401_Memory_Leak__int_calloc_15.c":131:5)
#loc170 = loc("CWE401_Memory_Leak__int_calloc_15.c":144:5)
#loc171 = loc("CWE401_Memory_Leak__int_calloc_15.c":131:12)
#loc172 = loc("CWE401_Memory_Leak__int_calloc_15.c":133:5)
#loc173 = loc("CWE401_Memory_Leak__int_calloc_15.c":135:19)
#loc174 = loc("CWE401_Memory_Leak__int_calloc_15.c":135:9)
#loc175 = loc("CWE401_Memory_Leak__int_calloc_15.c":136:9)
#loc176 = loc("CWE401_Memory_Leak__int_calloc_15.c":137:5)
#loc177 = loc("CWE401_Memory_Leak__int_calloc_15.c":139:23)
#loc178 = loc("CWE401_Memory_Leak__int_calloc_15.c":139:9)
#loc179 = loc("CWE401_Memory_Leak__int_calloc_15.c":141:19)
#loc180 = loc("CWE401_Memory_Leak__int_calloc_15.c":141:9)
#loc181 = loc("CWE401_Memory_Leak__int_calloc_15.c":141:14)
#loc182 = loc("CWE401_Memory_Leak__int_calloc_15.c":141:15)
#loc183 = loc("CWE401_Memory_Leak__int_calloc_15.c":142:22)
#loc184 = loc("CWE401_Memory_Leak__int_calloc_15.c":142:27)
#loc185 = loc("CWE401_Memory_Leak__int_calloc_15.c":142:28)
#loc186 = loc("CWE401_Memory_Leak__int_calloc_15.c":142:9)
#loc187 = loc("CWE401_Memory_Leak__int_calloc_15.c":143:9)
#loc188 = loc("CWE401_Memory_Leak__int_calloc_15.c":145:5)
#loc189 = loc("CWE401_Memory_Leak__int_calloc_15.c":155:5)
#loc190 = loc("CWE401_Memory_Leak__int_calloc_15.c":145:12)
#loc191 = loc("CWE401_Memory_Leak__int_calloc_15.c":147:5)
#loc192 = loc("CWE401_Memory_Leak__int_calloc_15.c":150:9)
#loc193 = loc("CWE401_Memory_Leak__int_calloc_15.c":151:5)
#loc194 = loc("CWE401_Memory_Leak__int_calloc_15.c":153:19)
#loc195 = loc("CWE401_Memory_Leak__int_calloc_15.c":153:9)
#loc196 = loc("CWE401_Memory_Leak__int_calloc_15.c":154:9)
#loc197 = loc("CWE401_Memory_Leak__int_calloc_15.c":159:1)
#loc198 = loc("CWE401_Memory_Leak__int_calloc_15.c":188:1)
#loc199 = loc("CWE401_Memory_Leak__int_calloc_15.c":161:5)
#loc200 = loc("CWE401_Memory_Leak__int_calloc_15.c":161:11)
#loc201 = loc("CWE401_Memory_Leak__int_calloc_15.c":162:12)
#loc202 = loc("CWE401_Memory_Leak__int_calloc_15.c":162:5)
#loc203 = loc("CWE401_Memory_Leak__int_calloc_15.c":163:5)
#loc204 = loc("CWE401_Memory_Leak__int_calloc_15.c":176:5)
#loc205 = loc("CWE401_Memory_Leak__int_calloc_15.c":163:12)
#loc206 = loc("CWE401_Memory_Leak__int_calloc_15.c":165:5)
#loc207 = loc("CWE401_Memory_Leak__int_calloc_15.c":167:23)
#loc208 = loc("CWE401_Memory_Leak__int_calloc_15.c":167:9)
#loc209 = loc("CWE401_Memory_Leak__int_calloc_15.c":169:19)
#loc210 = loc("CWE401_Memory_Leak__int_calloc_15.c":169:9)
#loc211 = loc("CWE401_Memory_Leak__int_calloc_15.c":169:14)
#loc212 = loc("CWE401_Memory_Leak__int_calloc_15.c":169:15)
#loc213 = loc("CWE401_Memory_Leak__int_calloc_15.c":170:22)
#loc214 = loc("CWE401_Memory_Leak__int_calloc_15.c":170:27)
#loc215 = loc("CWE401_Memory_Leak__int_calloc_15.c":170:28)
#loc216 = loc("CWE401_Memory_Leak__int_calloc_15.c":170:9)
#loc217 = loc("CWE401_Memory_Leak__int_calloc_15.c":171:9)
#loc218 = loc("CWE401_Memory_Leak__int_calloc_15.c":172:5)
#loc219 = loc("CWE401_Memory_Leak__int_calloc_15.c":174:19)
#loc220 = loc("CWE401_Memory_Leak__int_calloc_15.c":174:9)
#loc221 = loc("CWE401_Memory_Leak__int_calloc_15.c":175:9)
#loc222 = loc("CWE401_Memory_Leak__int_calloc_15.c":177:5)
#loc223 = loc("CWE401_Memory_Leak__int_calloc_15.c":187:5)
#loc224 = loc("CWE401_Memory_Leak__int_calloc_15.c":177:12)
#loc225 = loc("CWE401_Memory_Leak__int_calloc_15.c":179:5)
#loc226 = loc("CWE401_Memory_Leak__int_calloc_15.c":182:9)
#loc227 = loc("CWE401_Memory_Leak__int_calloc_15.c":183:5)
#loc228 = loc("CWE401_Memory_Leak__int_calloc_15.c":185:19)
#loc229 = loc("CWE401_Memory_Leak__int_calloc_15.c":185:9)
#loc230 = loc("CWE401_Memory_Leak__int_calloc_15.c":186:9)
#loc231 = loc(fused[#loc1, #loc2])
#loc232 = loc(fused[#loc3, #loc4])
#loc233 = loc(fused[#loc5, #loc6])
#loc234 = loc(fused[#loc7, #loc8])
#loc235 = loc(fused[#loc10, #loc11])
#loc236 = loc(fused[#loc12, #loc13])
#loc237 = loc(fused[#loc15, #loc14])
#loc238 = loc(fused[#loc16, #loc17])
#loc239 = loc(fused[#loc22, #loc23])
#loc240 = loc(fused[#loc20, #loc24])
#loc241 = loc(fused[#loc25, #loc24])
#loc242 = loc(fused[#loc26, #loc27])
#loc243 = loc(fused[#loc28, #loc29])
#loc244 = loc(fused[#loc30, #loc27])
#loc245 = loc(fused[#loc35, #loc34])
#loc246 = loc(fused[#loc46, #loc47])
#loc247 = loc(fused[#loc55, #loc56])
#loc248 = loc(fused[#loc57, #loc58])
#loc249 = loc(fused[#loc59, #loc60])
#loc250 = loc(fused[#loc61, #loc62])
#loc251 = loc(fused[#loc63, #loc64])
#loc252 = loc(fused[#loc65, #loc66])
#loc253 = loc(fused[#loc67, #loc68])
#loc254 = loc(fused[#loc69, #loc70])
#loc255 = loc(fused[#loc72, #loc71])
#loc256 = loc(fused[#loc73, #loc74])
#loc257 = loc(fused[#loc79, #loc80])
#loc258 = loc(fused[#loc77, #loc81])
#loc259 = loc(fused[#loc82, #loc81])
#loc260 = loc(fused[#loc83, #loc84])
#loc261 = loc(fused[#loc85, #loc86])
#loc262 = loc(fused[#loc87, #loc84])
#loc263 = loc(fused[#loc92, #loc91])
#loc264 = loc(fused[#loc104, #loc105])
#loc265 = loc(fused[#loc115, #loc116])
#loc266 = loc(fused[#loc117, #loc118])
#loc267 = loc(fused[#loc120, #loc119])
#loc268 = loc(fused[#loc121, #loc122])
#loc269 = loc(fused[#loc127, #loc128])
#loc270 = loc(fused[#loc125, #loc129])
#loc271 = loc(fused[#loc130, #loc129])
#loc272 = loc(fused[#loc131, #loc132])
#loc273 = loc(fused[#loc133, #loc134])
#loc274 = loc(fused[#loc135, #loc132])
#loc275 = loc(fused[#loc140, #loc139])
#loc276 = loc(fused[#loc152, #loc153])
#loc277 = loc(fused[#loc163, #loc164])
#loc278 = loc(fused[#loc165, #loc166])
#loc279 = loc(fused[#loc168, #loc167])
#loc280 = loc(fused[#loc169, #loc170])
#loc281 = loc(fused[#loc178, #loc177])
#loc282 = loc(fused[#loc180, #loc179])
#loc283 = loc(fused[#loc188, #loc189])
#loc284 = loc(fused[#loc197, #loc198])
#loc285 = loc(fused[#loc199, #loc200])
#loc286 = loc(fused[#loc202, #loc201])
#loc287 = loc(fused[#loc203, #loc204])
#loc288 = loc(fused[#loc208, #loc207])
#loc289 = loc(fused[#loc210, #loc209])
#loc290 = loc(fused[#loc222, #loc223])
