!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc231)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc232)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc233)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc234)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc235)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc236)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc237)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc238)
  cir.func @_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc240)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc241)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc22)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc23)
    cir.store %2, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc242)
    cir.scope {
      %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc244)
      %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc29)
      %5 = cir.const #cir.int<50> : !s32i loc(#loc30)
      %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc30)
      %7 = cir.const #cir.int<4> : !u64i loc(#loc245)
      %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc246)
      %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc29)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc247)
      cir.store %10, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc244)
      cir.scope {
        %26 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc35)
        %27 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc36)
        %28 = cir.cmp(eq, %26, %27) : !cir.ptr<!s32i>, !cir.bool loc(#loc249)
        cir.if %28 {
          %29 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc38)
          %30 = cir.const #cir.int<1> : !s32i loc(#loc39)
          %31 = cir.unary(minus, %30) nsw : !s32i, !s32i loc(#loc40)
          cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc38)
        } loc(#loc250)
      } loc(#loc248)
      %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc41)
      %12 = cir.const #cir.int<65> : !s32i loc(#loc42)
      %13 = cir.const #cir.int<50> : !s32i loc(#loc43)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc44)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc43)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc43)
      %17 = cir.call @wmemset(%11, %12, %16) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc45)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc46)
      %19 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
      %20 = cir.const #cir.int<50> : !s32i loc(#loc48)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc49)
      %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc48)
      %23 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc50)
      cir.store %18, %23 : !s32i, !cir.ptr<!s32i> loc(#loc251)
      %24 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc51)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc51)
      cir.store %25, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc252)
    } loc(#loc243)
    cir.scope {
      %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc254)
      %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc56)
      %5 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc56)
      cir.store %5, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc254)
      cir.scope {
        %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc256)
        %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc257)
        %8 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc63)
        %9 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc64)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc64)
        %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc63)
        cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc256)
        %12 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc65)
        %13 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc66)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc67)
        %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc67)
        %16 = cir.binop(add, %13, %15) : !u64i loc(#loc258)
        %17 = cir.const #cir.int<4> : !u64i loc(#loc259)
        %18 = cir.call @calloc(%16, %17) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc65)
        cir.store %18, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc257)
        cir.scope {
          %28 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc72)
          %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc73)
          %30 = cir.cmp(eq, %28, %29) : !cir.ptr<!void>, !cir.bool loc(#loc261)
          cir.if %30 {
            %31 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc75)
            %32 = cir.const #cir.int<1> : !s32i loc(#loc76)
            %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc77)
            cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc75)
          } loc(#loc262)
        } loc(#loc260)
        %19 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc78)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc78)
        %21 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc79)
        %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc79)
        %23 = cir.call @wcscpy(%20, %22) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc80)
        %24 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc81)
        %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc81)
        cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc82)
        %26 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc83)
        %27 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc84)
        cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc83)
      } loc(#loc255)
    } loc(#loc253)
    cir.return loc(#loc18)
  } loc(#loc239)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc263)
  cir.func internal private @_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc265)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc266)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc92)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc93)
    cir.store %2, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc267)
    cir.scope {
      %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc269)
      %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc99)
      %5 = cir.const #cir.int<50> : !s32i loc(#loc100)
      %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc100)
      %7 = cir.const #cir.int<1> : !u64i loc(#loc270)
      %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc271)
      %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc99)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc272)
      cir.store %10, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc269)
      cir.scope {
        %27 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc105)
        %28 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc106)
        %29 = cir.cmp(eq, %27, %28) : !cir.ptr<!s8i>, !cir.bool loc(#loc274)
        cir.if %29 {
          %30 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc108)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc109)
          %32 = cir.unary(minus, %31) nsw : !s32i, !s32i loc(#loc110)
          cir.call @exit(%32) : (!s32i) -> () extra(#fn_attr) loc(#loc108)
        } loc(#loc275)
      } loc(#loc273)
      %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc111)
      %13 = cir.const #cir.int<65> : !s8i loc(#loc112)
      %14 = cir.cast(integral, %13 : !s8i), !s32i loc(#loc112)
      %15 = cir.const #cir.int<50> : !s32i loc(#loc113)
      %16 = cir.const #cir.int<1> : !s32i loc(#loc114)
      %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc113)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc113)
      cir.libc.memset %18 bytes from %12 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc276)
      %19 = cir.const #cir.int<0> : !s8i loc(#loc117)
      %20 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
      %21 = cir.const #cir.int<50> : !s32i loc(#loc119)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc120)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc119)
      %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc121)
      cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc277)
      %25 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc122)
      %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc122)
      cir.store %26, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc278)
    } loc(#loc268)
    cir.scope {
      %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc280)
      %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc127)
      %5 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc127)
      cir.store %5, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc280)
      cir.scope {
        %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc282)
        %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc283)
        %8 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc134)
        %9 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc135)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc135)
        %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc134)
        cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc282)
        %12 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc136)
        %13 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc137)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc138)
        %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc138)
        %16 = cir.binop(add, %13, %15) : !u64i loc(#loc284)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc139)
        %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc139)
        %19 = cir.call @calloc(%16, %18) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc136)
        cir.store %19, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc283)
        cir.scope {
          %30 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc142)
          %31 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc143)
          %32 = cir.cmp(eq, %30, %31) : !cir.ptr<!void>, !cir.bool loc(#loc286)
          cir.if %32 {
            %33 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc145)
            %34 = cir.const #cir.int<1> : !s32i loc(#loc146)
            %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc147)
            cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc145)
          } loc(#loc287)
        } loc(#loc285)
        %20 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc148)
        %21 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc149)
        %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc149)
        %23 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc150)
        %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc150)
        %25 = cir.call @strcpy(%22, %24) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc148)
        %26 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc151)
        %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc151)
        cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc152)
        %28 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc153)
        %29 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc154)
        cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc153)
      } loc(#loc281)
    } loc(#loc279)
    cir.return loc(#loc88)
  } loc(#loc264)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc288)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc289)
  cir.func internal private @_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_33L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc291)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc292)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc164)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc165)
    cir.store %2, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc293)
    cir.scope {
      %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc295)
      %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc171)
      %5 = cir.const #cir.int<50> : !s32i loc(#loc172)
      %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc172)
      %7 = cir.const #cir.int<4> : !u64i loc(#loc296)
      %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc297)
      %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc171)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc298)
      cir.store %10, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc295)
      cir.scope {
        %26 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc177)
        %27 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc178)
        %28 = cir.cmp(eq, %26, %27) : !cir.ptr<!s32i>, !cir.bool loc(#loc300)
        cir.if %28 {
          %29 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc180)
          %30 = cir.const #cir.int<1> : !s32i loc(#loc181)
          %31 = cir.unary(minus, %30) nsw : !s32i, !s32i loc(#loc182)
          cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc180)
        } loc(#loc301)
      } loc(#loc299)
      %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc183)
      %12 = cir.const #cir.int<65> : !s32i loc(#loc184)
      %13 = cir.const #cir.int<50> : !s32i loc(#loc185)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc186)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc185)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc185)
      %17 = cir.call @wmemset(%11, %12, %16) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc187)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc188)
      %19 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc189)
      %20 = cir.const #cir.int<50> : !s32i loc(#loc190)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc191)
      %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc190)
      %23 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc192)
      cir.store %18, %23 : !s32i, !cir.ptr<!s32i> loc(#loc302)
      %24 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc193)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc193)
      cir.store %25, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc303)
    } loc(#loc294)
    cir.scope {
      %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc305)
      %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc198)
      %5 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc198)
      cir.store %5, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc305)
      cir.scope {
        %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc307)
        %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc308)
        %8 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc205)
        %9 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc206)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc206)
        %11 = cir.call @wcslen(%10) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc205)
        cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc307)
        %12 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc207)
        %13 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc208)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc209)
        %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc209)
        %16 = cir.binop(add, %13, %15) : !u64i loc(#loc309)
        %17 = cir.const #cir.int<4> : !u64i loc(#loc310)
        %18 = cir.call @calloc(%16, %17) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc207)
        cir.store %18, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc308)
        cir.scope {
          %28 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc214)
          %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc215)
          %30 = cir.cmp(eq, %28, %29) : !cir.ptr<!void>, !cir.bool loc(#loc312)
          cir.if %30 {
            %31 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc217)
            %32 = cir.const #cir.int<1> : !s32i loc(#loc218)
            %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc219)
            cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc217)
          } loc(#loc313)
        } loc(#loc311)
        %19 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc220)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc220)
        %21 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc221)
        %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc221)
        %23 = cir.call @wcscpy(%20, %22) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc222)
        %24 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc223)
        %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc223)
        cir.call @printWLine(%25) : (!cir.ptr<!s32i>) -> () loc(#loc224)
        %26 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc225)
        %27 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc226)
        cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc225)
      } loc(#loc306)
    } loc(#loc304)
    cir.return loc(#loc160)
  } loc(#loc290)
  cir.func @_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_33L7goodG2BEv() : () -> () loc(#loc229)
    cir.call @_ZN44CWE122_Heap_Based_Buffer_Overflow__CWE135_33L7goodB2GEv() : () -> () loc(#loc230)
    cir.return loc(#loc228)
  } loc(#loc314)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/stdlib.h":675:1)
#loc10 = loc("/usr/include/stdlib.h":676:14)
#loc11 = loc("/usr/include/wchar.h":98:1)
#loc12 = loc("/usr/include/wchar.h":100:14)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc15 = loc("/usr/include/stdlib.h":687:1)
#loc16 = loc("/usr/include/stdlib.h":687:32)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":27:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":52:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":29:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":29:12)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":30:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":30:23)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":31:12)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":31:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":32:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":39:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":33:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":33:71)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":33:46)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":33:53)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":33:56)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":33:70)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":34:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":34:46)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":34:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":34:30)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":34:36)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":34:37)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":34:43)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":34:42)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":35:17)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":35:32)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":35:38)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":35:41)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":35:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":36:31)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":36:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":36:23)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":36:26)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":36:27)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":38:24)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":38:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":40:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":51:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":41:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":41:23)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":42:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":50:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":44:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":44:49)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":45:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":45:68)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":44:30)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":44:45)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":45:35)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":45:42)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":45:50)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":45:53)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":45:67)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":46:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":46:41)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":46:17)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":46:25)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":46:31)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":46:32)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":46:38)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":46:37)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":47:37)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":47:54)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":47:19)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":48:31)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":48:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":49:13)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":49:18)
#loc85 = loc("/usr/include/string.h":141:1)
#loc86 = loc("/usr/include/string.h":142:14)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":59:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":84:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":61:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":61:12)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":62:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":62:23)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":63:12)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":63:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":64:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":71:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":65:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":65:63)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":65:41)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":65:48)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":65:51)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":65:62)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":66:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":66:47)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":66:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":66:31)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":66:37)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":66:38)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":66:44)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":66:43)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":67:16)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":67:32)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":67:37)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":67:40)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":67:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":67:41)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":68:32)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":68:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":68:24)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":68:27)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":68:28)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":70:24)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":70:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":72:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":83:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":73:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":73:23)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":74:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":82:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":76:13)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":76:49)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":77:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":77:54)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":76:30)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":76:45)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":77:35)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":77:42)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":77:50)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":77:53)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":78:13)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":78:41)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":78:17)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":78:25)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":78:31)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":78:32)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":78:38)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":78:37)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":79:19)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":79:34)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":79:48)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":80:31)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":80:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":81:13)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":81:18)
#loc155 = loc("/usr/include/wchar.h":247:1)
#loc156 = loc("/usr/include/wchar.h":247:51)
#loc157 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc158 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":87:1)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":112:1)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":89:5)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":89:12)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":90:5)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":90:23)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":91:12)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":91:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":92:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":99:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":93:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":93:71)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":93:46)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":93:53)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":93:56)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":93:70)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":94:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":94:46)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":94:13)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":94:30)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":94:36)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":94:37)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":94:43)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":94:42)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":95:17)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":95:32)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":95:38)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":95:41)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":95:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":96:31)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":96:9)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":96:23)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":96:26)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":96:27)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":98:24)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":98:9)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":100:5)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":111:5)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":101:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":101:23)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":102:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":110:9)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":104:13)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":104:52)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":105:13)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":105:68)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":104:30)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":104:48)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":105:35)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":105:42)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":105:50)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":105:53)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":105:67)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":106:13)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":106:41)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":106:17)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":106:25)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":106:31)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":106:32)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":106:38)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":106:37)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":107:37)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":107:54)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":107:19)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":108:35)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":108:13)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":109:13)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":109:18)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":114:1)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":118:1)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":116:5)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_33.cpp":117:5)
#loc231 = loc(fused[#loc1, #loc2])
#loc232 = loc(fused[#loc3, #loc4])
#loc233 = loc(fused[#loc5, #loc6])
#loc234 = loc(fused[#loc7, #loc8])
#loc235 = loc(fused[#loc9, #loc10])
#loc236 = loc(fused[#loc11, #loc12])
#loc237 = loc(fused[#loc13, #loc14])
#loc238 = loc(fused[#loc15, #loc16])
#loc239 = loc(fused[#loc17, #loc18])
#loc240 = loc(fused[#loc19, #loc20])
#loc241 = loc(fused[#loc21, #loc22])
#loc242 = loc(fused[#loc24, #loc23])
#loc243 = loc(fused[#loc25, #loc26])
#loc244 = loc(fused[#loc27, #loc28])
#loc245 = loc(fused[#loc31, #loc32])
#loc246 = loc(fused[#loc30, #loc32])
#loc247 = loc(fused[#loc29, #loc28])
#loc248 = loc(fused[#loc33, #loc34])
#loc249 = loc(fused[#loc35, #loc36])
#loc250 = loc(fused[#loc37, #loc34])
#loc251 = loc(fused[#loc47, #loc46])
#loc252 = loc(fused[#loc52, #loc51])
#loc253 = loc(fused[#loc53, #loc54])
#loc254 = loc(fused[#loc55, #loc56])
#loc255 = loc(fused[#loc57, #loc58])
#loc256 = loc(fused[#loc59, #loc60])
#loc257 = loc(fused[#loc61, #loc62])
#loc258 = loc(fused[#loc66, #loc67])
#loc259 = loc(fused[#loc68, #loc69])
#loc260 = loc(fused[#loc70, #loc71])
#loc261 = loc(fused[#loc72, #loc73])
#loc262 = loc(fused[#loc74, #loc71])
#loc263 = loc(fused[#loc85, #loc86])
#loc264 = loc(fused[#loc87, #loc88])
#loc265 = loc(fused[#loc89, #loc90])
#loc266 = loc(fused[#loc91, #loc92])
#loc267 = loc(fused[#loc94, #loc93])
#loc268 = loc(fused[#loc95, #loc96])
#loc269 = loc(fused[#loc97, #loc98])
#loc270 = loc(fused[#loc101, #loc102])
#loc271 = loc(fused[#loc100, #loc102])
#loc272 = loc(fused[#loc99, #loc98])
#loc273 = loc(fused[#loc103, #loc104])
#loc274 = loc(fused[#loc105, #loc106])
#loc275 = loc(fused[#loc107, #loc104])
#loc276 = loc(fused[#loc115, #loc116])
#loc277 = loc(fused[#loc118, #loc117])
#loc278 = loc(fused[#loc123, #loc122])
#loc279 = loc(fused[#loc124, #loc125])
#loc280 = loc(fused[#loc126, #loc127])
#loc281 = loc(fused[#loc128, #loc129])
#loc282 = loc(fused[#loc130, #loc131])
#loc283 = loc(fused[#loc132, #loc133])
#loc284 = loc(fused[#loc137, #loc138])
#loc285 = loc(fused[#loc140, #loc141])
#loc286 = loc(fused[#loc142, #loc143])
#loc287 = loc(fused[#loc144, #loc141])
#loc288 = loc(fused[#loc155, #loc156])
#loc289 = loc(fused[#loc157, #loc158])
#loc290 = loc(fused[#loc159, #loc160])
#loc291 = loc(fused[#loc161, #loc162])
#loc292 = loc(fused[#loc163, #loc164])
#loc293 = loc(fused[#loc166, #loc165])
#loc294 = loc(fused[#loc167, #loc168])
#loc295 = loc(fused[#loc169, #loc170])
#loc296 = loc(fused[#loc173, #loc174])
#loc297 = loc(fused[#loc172, #loc174])
#loc298 = loc(fused[#loc171, #loc170])
#loc299 = loc(fused[#loc175, #loc176])
#loc300 = loc(fused[#loc177, #loc178])
#loc301 = loc(fused[#loc179, #loc176])
#loc302 = loc(fused[#loc189, #loc188])
#loc303 = loc(fused[#loc194, #loc193])
#loc304 = loc(fused[#loc195, #loc196])
#loc305 = loc(fused[#loc197, #loc198])
#loc306 = loc(fused[#loc199, #loc200])
#loc307 = loc(fused[#loc201, #loc202])
#loc308 = loc(fused[#loc203, #loc204])
#loc309 = loc(fused[#loc208, #loc209])
#loc310 = loc(fused[#loc210, #loc211])
#loc311 = loc(fused[#loc212, #loc213])
#loc312 = loc(fused[#loc214, #loc215])
#loc313 = loc(fused[#loc216, #loc213])
#loc314 = loc(fused[#loc227, #loc228])
