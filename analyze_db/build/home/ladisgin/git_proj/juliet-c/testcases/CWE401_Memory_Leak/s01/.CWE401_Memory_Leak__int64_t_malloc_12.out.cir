!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc83 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":148:10)
#loc84 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":148:14)
#loc85 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":148:20)
#loc86 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":148:32)
#loc240 = loc(fused[#loc83, #loc84])
#loc241 = loc(fused[#loc85, #loc86])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int64_t_malloc_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc209)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc210)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc211)
  cir.func private @printLongLongLine(!s64i) loc(#loc212)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc213)
  cir.func no_proto @CWE401_Memory_Leak__int64_t_malloc_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc215)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc216)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc218)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc218)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc19)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc24)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc25)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc25)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc220)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc221)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc222)
        cir.store %12, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc223)
        cir.scope {
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc32)
          %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc33)
          %24 = cir.cmp(eq, %21, %23) : !cir.ptr<!s64i>, !cir.bool loc(#loc225)
          cir.if %24 {
            %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc35)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc36)
            %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc37)
            cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc35)
          } loc(#loc226)
        } loc(#loc224)
        %13 = cir.const #cir.int<5> : !s64i loc(#loc38)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc39)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc40)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s64i>, %15 : !s32i), !cir.ptr<!s64i> loc(#loc41)
        cir.store %13, %16 : !s64i, !cir.ptr<!s64i> loc(#loc227)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc42)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc43)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s64i>, %18 : !s32i), !cir.ptr<!s64i> loc(#loc44)
        %20 = cir.load %19 : !cir.ptr<!s64i>, !s64i loc(#loc42)
        cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc45)
      } else {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc46)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc46)
        %8 = cir.const #cir.int<8> : !u64i loc(#loc46)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc46)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc46)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc46)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc46)
        cir.store %12, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc228)
        %13 = cir.const #cir.int<5> : !s64i loc(#loc48)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc49)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc50)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s64i>, %15 : !s32i), !cir.ptr<!s64i> loc(#loc51)
        cir.store %13, %16 : !s64i, !cir.ptr<!s64i> loc(#loc229)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc52)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc53)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s64i>, %18 : !s32i), !cir.ptr<!s64i> loc(#loc54)
        %20 = cir.load %19 : !cir.ptr<!s64i>, !s64i loc(#loc52)
        cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc55)
      } loc(#loc219)
    } loc(#loc217)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc231)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc231)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc58)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc58)
      cir.if %5 {
      } else {
        %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc63)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc64)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc64)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc63)
      } loc(#loc232)
    } loc(#loc230)
    cir.return loc(#loc12)
  } loc(#loc214)
  cir.func no_proto @CWE401_Memory_Leak__int64_t_malloc_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc234)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc67)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc235)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc69)
    cir.return loc(#loc66)
  } loc(#loc233)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc236)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc237)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc238)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc79)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc80)
  cir.func @main(%arg0: !s32i loc(fused[#loc83, #loc84]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc85, #loc86])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc240)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc241)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc82)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc87)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc88)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc89)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc89)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc90)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc77)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    %8 = cir.get_global @CWE401_Memory_Leak__int64_t_malloc_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc242)
    cir.call @CWE401_Memory_Leak__int64_t_malloc_12_good() : () -> () loc(#loc92)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc78)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc79)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc79)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    %13 = cir.get_global @CWE401_Memory_Leak__int64_t_malloc_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc243)
    cir.call @CWE401_Memory_Leak__int64_t_malloc_12_bad() : () -> () loc(#loc96)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc80)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc80)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc99)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc244)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc244)
    cir.return %17 : !s32i loc(#loc244)
  } loc(#loc239)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc246)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc105)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc247)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc249)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc249)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc109)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc109)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc114)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc115)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc115)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc251)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc252)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc114)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc253)
        cir.store %12, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc254)
        cir.scope {
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc122)
          %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc123)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc123)
          %24 = cir.cmp(eq, %21, %23) : !cir.ptr<!s64i>, !cir.bool loc(#loc256)
          cir.if %24 {
            %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc125)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc126)
            %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc127)
            cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc125)
          } loc(#loc257)
        } loc(#loc255)
        %13 = cir.const #cir.int<5> : !s64i loc(#loc128)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc129)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc130)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s64i>, %15 : !s32i), !cir.ptr<!s64i> loc(#loc131)
        cir.store %13, %16 : !s64i, !cir.ptr<!s64i> loc(#loc258)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc132)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc133)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s64i>, %18 : !s32i), !cir.ptr<!s64i> loc(#loc134)
        %20 = cir.load %19 : !cir.ptr<!s64i>, !s64i loc(#loc132)
        cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc135)
      } else {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc136)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc137)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc137)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc259)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc260)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc136)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc261)
        cir.store %12, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc262)
        cir.scope {
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc144)
          %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc145)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc145)
          %24 = cir.cmp(eq, %21, %23) : !cir.ptr<!s64i>, !cir.bool loc(#loc264)
          cir.if %24 {
            %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc147)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc148)
            %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc149)
            cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc147)
          } loc(#loc265)
        } loc(#loc263)
        %13 = cir.const #cir.int<5> : !s64i loc(#loc150)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc151)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc152)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s64i>, %15 : !s32i), !cir.ptr<!s64i> loc(#loc153)
        cir.store %13, %16 : !s64i, !cir.ptr<!s64i> loc(#loc266)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc154)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc155)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s64i>, %18 : !s32i), !cir.ptr<!s64i> loc(#loc156)
        %20 = cir.load %19 : !cir.ptr<!s64i>, !s64i loc(#loc154)
        cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc157)
      } loc(#loc250)
    } loc(#loc248)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc268)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc268)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc160)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc160)
      cir.if %5 {
        %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc165)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc166)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc166)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc165)
      } else {
        %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc167)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc168)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc168)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc167)
      } loc(#loc269)
    } loc(#loc267)
    cir.return loc(#loc102)
  } loc(#loc245)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc271)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc173)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc272)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc274)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc274)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc177)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc177)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc182)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc182)
        %8 = cir.const #cir.int<8> : !u64i loc(#loc182)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc182)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc182)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc182)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc182)
        cir.store %12, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc276)
        %13 = cir.const #cir.int<5> : !s64i loc(#loc184)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc185)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc186)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s64i>, %15 : !s32i), !cir.ptr<!s64i> loc(#loc187)
        cir.store %13, %16 : !s64i, !cir.ptr<!s64i> loc(#loc277)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc188)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc189)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s64i>, %18 : !s32i), !cir.ptr<!s64i> loc(#loc190)
        %20 = cir.load %19 : !cir.ptr<!s64i>, !s64i loc(#loc188)
        cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc191)
      } else {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc192)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc192)
        %8 = cir.const #cir.int<8> : !u64i loc(#loc192)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc192)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc192)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc192)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc192)
        cir.store %12, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc278)
        %13 = cir.const #cir.int<5> : !s64i loc(#loc194)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc195)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc196)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s64i>, %15 : !s32i), !cir.ptr<!s64i> loc(#loc197)
        cir.store %13, %16 : !s64i, !cir.ptr<!s64i> loc(#loc279)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc198)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc199)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s64i>, %18 : !s32i), !cir.ptr<!s64i> loc(#loc200)
        %20 = cir.load %19 : !cir.ptr<!s64i>, !s64i loc(#loc198)
        cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc201)
      } loc(#loc275)
    } loc(#loc273)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc281)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc281)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc204)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc204)
      cir.if %5 {
      } else {
      } loc(#loc282)
    } loc(#loc280)
    cir.return loc(#loc170)
  } loc(#loc270)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int64_t_malloc_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":24:1)
#loc12 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":55:1)
#loc13 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":26:5)
#loc14 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":26:15)
#loc15 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":27:12)
#loc16 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":27:5)
#loc17 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":28:5)
#loc18 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":44:5)
#loc19 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":28:8)
#loc20 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":28:33)
#loc21 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":29:5)
#loc22 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":36:5)
#loc23 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":38:5)
#loc24 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":31:27)
#loc25 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":31:34)
#loc26 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":31:38)
#loc27 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":31:52)
#loc28 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":31:53)
#loc29 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":31:9)
#loc30 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":32:9)
#loc31 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":32:37)
#loc32 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":32:13)
#loc33 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":32:21)
#loc34 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":32:27)
#loc35 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":32:28)
#loc36 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":32:34)
#loc37 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":32:33)
#loc38 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":34:19)
#loc39 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":34:9)
#loc40 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":34:14)
#loc41 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":34:15)
#loc42 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":35:27)
#loc43 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":35:32)
#loc44 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":35:33)
#loc45 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":35:9)
#loc46 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":40:27)
#loc47 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":40:9)
#loc48 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":42:19)
#loc49 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":42:9)
#loc50 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":42:14)
#loc51 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":42:15)
#loc52 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":43:27)
#loc53 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":43:32)
#loc54 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":43:33)
#loc55 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":43:9)
#loc56 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":45:5)
#loc57 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":54:5)
#loc58 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":45:8)
#loc59 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":45:33)
#loc60 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":46:5)
#loc61 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":49:5)
#loc62 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":51:5)
#loc63 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":53:9)
#loc64 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":53:14)
#loc65 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":133:1)
#loc66 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":137:1)
#loc67 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":135:5)
#loc68 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":135:13)
#loc69 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":136:5)
#loc70 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":136:13)
#loc71 = loc("/usr/include/stdlib.h":575:1)
#loc72 = loc("/usr/include/stdlib.h":575:41)
#loc73 = loc("/usr/include/time.h":76:1)
#loc74 = loc("/usr/include/time.h":76:38)
#loc75 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc76 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc77 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":153:15)
#loc78 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":155:15)
#loc79 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":158:15)
#loc80 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":160:15)
#loc81 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":148:1)
#loc82 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":163:1)
#loc87 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":149:1)
#loc88 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":151:27)
#loc89 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":151:22)
#loc90 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":151:5)
#loc91 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":153:5)
#loc92 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":154:5)
#loc93 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":154:48)
#loc94 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":155:5)
#loc95 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":158:5)
#loc96 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":159:5)
#loc97 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":159:47)
#loc98 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":160:5)
#loc99 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":162:12)
#loc100 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":162:5)
#loc101 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":64:1)
#loc102 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":96:1)
#loc103 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":66:5)
#loc104 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":66:15)
#loc105 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":67:12)
#loc106 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":67:5)
#loc107 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":68:5)
#loc108 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":85:5)
#loc109 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":68:8)
#loc110 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":68:33)
#loc111 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":69:5)
#loc112 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":76:5)
#loc113 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":78:5)
#loc114 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":71:27)
#loc115 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":71:34)
#loc116 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":71:38)
#loc117 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":71:52)
#loc118 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":71:53)
#loc119 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":71:9)
#loc120 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":72:9)
#loc121 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":72:37)
#loc122 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":72:13)
#loc123 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":72:21)
#loc124 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":72:27)
#loc125 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":72:28)
#loc126 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":72:34)
#loc127 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":72:33)
#loc128 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":74:19)
#loc129 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":74:9)
#loc130 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":74:14)
#loc131 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":74:15)
#loc132 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":75:27)
#loc133 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":75:32)
#loc134 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":75:33)
#loc135 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":75:9)
#loc136 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":80:27)
#loc137 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":80:34)
#loc138 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":80:38)
#loc139 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":80:52)
#loc140 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":80:53)
#loc141 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":80:9)
#loc142 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":81:9)
#loc143 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":81:37)
#loc144 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":81:13)
#loc145 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":81:21)
#loc146 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":81:27)
#loc147 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":81:28)
#loc148 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":81:34)
#loc149 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":81:33)
#loc150 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":83:19)
#loc151 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":83:9)
#loc152 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":83:14)
#loc153 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":83:15)
#loc154 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":84:27)
#loc155 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":84:32)
#loc156 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":84:33)
#loc157 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":84:9)
#loc158 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":86:5)
#loc159 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":95:5)
#loc160 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":86:8)
#loc161 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":86:33)
#loc162 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":87:5)
#loc163 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":90:5)
#loc164 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":92:5)
#loc165 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":89:9)
#loc166 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":89:14)
#loc167 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":94:9)
#loc168 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":94:14)
#loc169 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":101:1)
#loc170 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":131:1)
#loc171 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":103:5)
#loc172 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":103:15)
#loc173 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":104:12)
#loc174 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":104:5)
#loc175 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":105:5)
#loc176 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":120:5)
#loc177 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":105:8)
#loc178 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":105:33)
#loc179 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":106:5)
#loc180 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":112:5)
#loc181 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":114:5)
#loc182 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":108:27)
#loc183 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":108:9)
#loc184 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":110:19)
#loc185 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":110:9)
#loc186 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":110:14)
#loc187 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":110:15)
#loc188 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":111:27)
#loc189 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":111:32)
#loc190 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":111:33)
#loc191 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":111:9)
#loc192 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":116:27)
#loc193 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":116:9)
#loc194 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":118:19)
#loc195 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":118:9)
#loc196 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":118:14)
#loc197 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":118:15)
#loc198 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":119:27)
#loc199 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":119:32)
#loc200 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":119:33)
#loc201 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":119:9)
#loc202 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":121:5)
#loc203 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":130:5)
#loc204 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":121:8)
#loc205 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":121:33)
#loc206 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":122:5)
#loc207 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":125:5)
#loc208 = loc("CWE401_Memory_Leak__int64_t_malloc_12.c":127:5)
#loc209 = loc(fused[#loc1, #loc2])
#loc210 = loc(fused[#loc3, #loc4])
#loc211 = loc(fused[#loc5, #loc6])
#loc212 = loc(fused[#loc7, #loc8])
#loc213 = loc(fused[#loc9, #loc10])
#loc214 = loc(fused[#loc11, #loc12])
#loc215 = loc(fused[#loc13, #loc14])
#loc216 = loc(fused[#loc16, #loc15])
#loc217 = loc(fused[#loc17, #loc18])
#loc218 = loc(fused[#loc19, #loc20])
#loc219 = loc(fused[#loc21, #loc22, #loc23, #loc18])
#loc220 = loc(fused[#loc26, #loc27])
#loc221 = loc(fused[#loc25, #loc27])
#loc222 = loc(fused[#loc24, #loc28])
#loc223 = loc(fused[#loc29, #loc28])
#loc224 = loc(fused[#loc30, #loc31])
#loc225 = loc(fused[#loc32, #loc33])
#loc226 = loc(fused[#loc34, #loc31])
#loc227 = loc(fused[#loc39, #loc38])
#loc228 = loc(fused[#loc47, #loc46])
#loc229 = loc(fused[#loc49, #loc48])
#loc230 = loc(fused[#loc56, #loc57])
#loc231 = loc(fused[#loc58, #loc59])
#loc232 = loc(fused[#loc60, #loc61, #loc62, #loc57])
#loc233 = loc(fused[#loc65, #loc66])
#loc234 = loc(fused[#loc67, #loc68])
#loc235 = loc(fused[#loc69, #loc70])
#loc236 = loc(fused[#loc71, #loc72])
#loc237 = loc(fused[#loc73, #loc74])
#loc238 = loc(fused[#loc75, #loc76])
#loc239 = loc(fused[#loc81, #loc82])
#loc242 = loc(fused[#loc92, #loc93])
#loc243 = loc(fused[#loc96, #loc97])
#loc244 = loc(fused[#loc100, #loc99])
#loc245 = loc(fused[#loc101, #loc102])
#loc246 = loc(fused[#loc103, #loc104])
#loc247 = loc(fused[#loc106, #loc105])
#loc248 = loc(fused[#loc107, #loc108])
#loc249 = loc(fused[#loc109, #loc110])
#loc250 = loc(fused[#loc111, #loc112, #loc113, #loc108])
#loc251 = loc(fused[#loc116, #loc117])
#loc252 = loc(fused[#loc115, #loc117])
#loc253 = loc(fused[#loc114, #loc118])
#loc254 = loc(fused[#loc119, #loc118])
#loc255 = loc(fused[#loc120, #loc121])
#loc256 = loc(fused[#loc122, #loc123])
#loc257 = loc(fused[#loc124, #loc121])
#loc258 = loc(fused[#loc129, #loc128])
#loc259 = loc(fused[#loc138, #loc139])
#loc260 = loc(fused[#loc137, #loc139])
#loc261 = loc(fused[#loc136, #loc140])
#loc262 = loc(fused[#loc141, #loc140])
#loc263 = loc(fused[#loc142, #loc143])
#loc264 = loc(fused[#loc144, #loc145])
#loc265 = loc(fused[#loc146, #loc143])
#loc266 = loc(fused[#loc151, #loc150])
#loc267 = loc(fused[#loc158, #loc159])
#loc268 = loc(fused[#loc160, #loc161])
#loc269 = loc(fused[#loc162, #loc163, #loc164, #loc159])
#loc270 = loc(fused[#loc169, #loc170])
#loc271 = loc(fused[#loc171, #loc172])
#loc272 = loc(fused[#loc174, #loc173])
#loc273 = loc(fused[#loc175, #loc176])
#loc274 = loc(fused[#loc177, #loc178])
#loc275 = loc(fused[#loc179, #loc180, #loc181, #loc176])
#loc276 = loc(fused[#loc183, #loc182])
#loc277 = loc(fused[#loc185, #loc184])
#loc278 = loc(fused[#loc193, #loc192])
#loc279 = loc(fused[#loc195, #loc194])
#loc280 = loc(fused[#loc202, #loc203])
#loc281 = loc(fused[#loc204, #loc205])
#loc282 = loc(fused[#loc206, #loc207, #loc208, #loc203])
