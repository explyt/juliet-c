!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_fputs_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc63)
  cir.func private @fputs(!cir.ptr<!s8i>, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc64)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" external @stdout : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc65)
  cir.func no_proto @CWE252_Unchecked_Return_Value__char_fputs_11_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc68)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc68)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc12)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc12)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc5)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc5)
        %6 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc65)
        %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc15)
        %8 = cir.call @fputs(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc16)
      } loc(#loc69)
    } loc(#loc67)
    cir.return loc(#loc9)
  } loc(#loc66)
  cir.func no_proto @CWE252_Unchecked_Return_Value__char_fputs_11_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc71)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc19)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc72)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc21)
    cir.return loc(#loc18)
  } loc(#loc70)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc73)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc27)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"fputs failed!\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc28)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc77)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc77)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc33)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc33)
      cir.if %3 {
        %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc27)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc27)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc38)
      } else {
        cir.scope {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc41)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc41)
          %6 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc65)
          %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc42)
          %8 = cir.call @fputs(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc43)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc44)
          %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc44)
          %11 = cir.cmp(eq, %8, %10) : !s32i, !cir.bool loc(#loc80)
          cir.if %11 {
            %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc28)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc28)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc46)
          } loc(#loc81)
        } loc(#loc79)
      } loc(#loc78)
    } loc(#loc76)
    cir.return loc(#loc30)
  } loc(#loc75)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc84)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc84)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc51)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc51)
      cir.if %3 {
        cir.scope {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc56)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc56)
          %6 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc65)
          %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc57)
          %8 = cir.call @fputs(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc58)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc59)
          %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc59)
          %11 = cir.cmp(eq, %8, %10) : !s32i, !cir.bool loc(#loc87)
          cir.if %11 {
            %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc61)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc61)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc62)
          } loc(#loc88)
        } loc(#loc86)
      } loc(#loc85)
    } loc(#loc83)
    cir.return loc(#loc48)
  } loc(#loc82)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_fputs_11.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdio.h":717:1)
#loc4 = loc("/usr/include/stdio.h":718:3)
#loc5 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":29:15)
#loc6 = loc("/usr/include/stdio.h":150:1)
#loc7 = loc("/usr/include/stdio.h":150:14)
#loc8 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":24:1)
#loc9 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":31:1)
#loc10 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":26:5)
#loc11 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":30:5)
#loc12 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":26:8)
#loc13 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":26:26)
#loc14 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":27:5)
#loc15 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":29:25)
#loc16 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":29:9)
#loc17 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":68:1)
#loc18 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":72:1)
#loc19 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":70:5)
#loc20 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":70:11)
#loc21 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":71:5)
#loc22 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":71:11)
#loc23 = loc("../../testcasesupport/std_testcase_io.h":50:1)
#loc24 = loc("../../testcasesupport/std_testcase_io.h":50:24)
#loc25 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc26 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc27 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":43:19)
#loc28 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":50:23)
#loc29 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":38:1)
#loc30 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":53:1)
#loc31 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":40:5)
#loc32 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":52:5)
#loc33 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":40:8)
#loc34 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":40:27)
#loc35 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":41:5)
#loc36 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":44:5)
#loc37 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":46:5)
#loc38 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":43:9)
#loc39 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":48:9)
#loc40 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":51:9)
#loc41 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":48:19)
#loc42 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":48:29)
#loc43 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":48:13)
#loc44 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":48:40)
#loc45 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":49:9)
#loc46 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":50:13)
#loc47 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":56:1)
#loc48 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":66:1)
#loc49 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":58:5)
#loc50 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":65:5)
#loc51 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":58:8)
#loc52 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":58:26)
#loc53 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":59:5)
#loc54 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":61:9)
#loc55 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":64:9)
#loc56 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":61:19)
#loc57 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":61:29)
#loc58 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":61:13)
#loc59 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":61:40)
#loc60 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":62:9)
#loc61 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":63:23)
#loc62 = loc("CWE252_Unchecked_Return_Value__char_fputs_11.c":63:13)
#loc63 = loc(fused[#loc1, #loc2])
#loc64 = loc(fused[#loc3, #loc4])
#loc65 = loc(fused[#loc6, #loc7])
#loc66 = loc(fused[#loc8, #loc9])
#loc67 = loc(fused[#loc10, #loc11])
#loc68 = loc(fused[#loc12, #loc13])
#loc69 = loc(fused[#loc14, #loc11])
#loc70 = loc(fused[#loc17, #loc18])
#loc71 = loc(fused[#loc19, #loc20])
#loc72 = loc(fused[#loc21, #loc22])
#loc73 = loc(fused[#loc23, #loc24])
#loc74 = loc(fused[#loc25, #loc26])
#loc75 = loc(fused[#loc29, #loc30])
#loc76 = loc(fused[#loc31, #loc32])
#loc77 = loc(fused[#loc33, #loc34])
#loc78 = loc(fused[#loc35, #loc36, #loc37, #loc32])
#loc79 = loc(fused[#loc39, #loc40])
#loc80 = loc(fused[#loc43, #loc44])
#loc81 = loc(fused[#loc45, #loc40])
#loc82 = loc(fused[#loc47, #loc48])
#loc83 = loc(fused[#loc49, #loc50])
#loc84 = loc(fused[#loc51, #loc52])
#loc85 = loc(fused[#loc53, #loc50])
#loc86 = loc(fused[#loc54, #loc55])
#loc87 = loc(fused[#loc58, #loc59])
#loc88 = loc(fused[#loc60, #loc55])
