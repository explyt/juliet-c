!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc44 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":112:10)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":112:14)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":112:20)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":112:32)
#loc126 = loc(fused[#loc44, #loc45])
#loc127 = loc(fused[#loc46, #loc47])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_case_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc112)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc113)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_case_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc115)
    cir.br ^bb1 loc(#loc116)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<6> : !s32i loc(#loc13)
    cir.br ^bb2 loc(#loc11)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %1 : !s32i, ^bb13 [
      6: ^bb4
    ] loc(#loc11)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc14)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc117)
  ^bb5:  // pred: ^bb4
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %3 = cir.const #cir.int<3> : !s32i loc(#loc18)
    %4 = cir.binop(rem, %2, %3) : !s32i loc(#loc118)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    cir.br ^bb6 loc(#loc119)
  ^bb6:  // pred: ^bb5
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    cir.br ^bb7 loc(#loc19)
  ^bb7:  // pred: ^bb6
    cir.switch.flat %5 : !s32i, ^bb10 [
      0: ^bb9
    ] loc(#loc19)
  ^bb8:  // no predecessors
    cir.br ^bb9 loc(#loc22)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc23)
  ^bb10:  // 2 preds: ^bb7, ^bb9
    cir.br ^bb11 loc(#loc20)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc16)
  ^bb12:  // pred: ^bb11
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc24)
    cir.br ^bb14 loc(#loc25)
  ^bb13:  // pred: ^bb2
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc6)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc6)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc26)
    cir.br ^bb14 loc(#loc27)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc12)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc8)
  } loc(#loc114)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_case_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc121)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc122)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc120)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc123)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc124)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc41)
  cir.func @main(%arg0: !s32i loc(fused[#loc44, #loc45]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc46, #loc47])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc126)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc127)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc43)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc48)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc48)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc49)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc50)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc50)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc51)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc38)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %8 = cir.get_global @CWE398_Poor_Code_Quality__empty_case_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc128)
    cir.call @CWE398_Poor_Code_Quality__empty_case_15_good() : () -> () loc(#loc53)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc39)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc40)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %13 = cir.get_global @CWE398_Poor_Code_Quality__empty_case_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc129)
    cir.call @CWE398_Poor_Code_Quality__empty_case_15_bad() : () -> () loc(#loc57)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc41)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc60)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc130)
    cir.return %17 : !s32i loc(#loc130)
  } loc(#loc125)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Inside the case statement\00" : !cir.array<!s8i x 26>> : !cir.array<!s8i x 26> {alignment = 1 : i64} loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc63)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc132)
    cir.br ^bb1 loc(#loc133)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<5> : !s32i loc(#loc70)
    cir.br ^bb2 loc(#loc68)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %1 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc68)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc71)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %2 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc72)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    cir.br ^bb14 loc(#loc74)
  ^bb5:  // pred: ^bb2
    cir.br ^bb6 loc(#loc134)
  ^bb6:  // pred: ^bb5
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
    %5 = cir.const #cir.int<3> : !s32i loc(#loc78)
    %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc135)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc132)
    cir.br ^bb7 loc(#loc136)
  ^bb7:  // pred: ^bb6
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
    cir.br ^bb8 loc(#loc79)
  ^bb8:  // pred: ^bb7
    cir.switch.flat %7 : !s32i, ^bb11 [
      0: ^bb10
    ] loc(#loc79)
  ^bb9:  // no predecessors
    cir.br ^bb10 loc(#loc82)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    %8 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc62)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    cir.br ^bb11 loc(#loc84)
  ^bb11:  // 2 preds: ^bb8, ^bb10
    cir.br ^bb12 loc(#loc80)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc76)
  ^bb13:  // pred: ^bb12
    %10 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc63)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    cir.br ^bb14 loc(#loc86)
  ^bb14:  // 2 preds: ^bb4, ^bb13
    cir.br ^bb15 loc(#loc69)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc65)
  } loc(#loc131)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc138)
    cir.br ^bb1 loc(#loc139)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<6> : !s32i loc(#loc93)
    cir.br ^bb2 loc(#loc91)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %1 : !s32i, ^bb13 [
      6: ^bb4
    ] loc(#loc91)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc94)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc140)
  ^bb5:  // pred: ^bb4
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %3 = cir.const #cir.int<3> : !s32i loc(#loc98)
    %4 = cir.binop(rem, %2, %3) : !s32i loc(#loc141)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    cir.br ^bb6 loc(#loc142)
  ^bb6:  // pred: ^bb5
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    cir.br ^bb7 loc(#loc99)
  ^bb7:  // pred: ^bb6
    cir.switch.flat %5 : !s32i, ^bb10 [
      0: ^bb9
    ] loc(#loc99)
  ^bb8:  // no predecessors
    cir.br ^bb9 loc(#loc102)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    %6 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc103)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc103)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc104)
    cir.br ^bb10 loc(#loc105)
  ^bb10:  // 2 preds: ^bb7, ^bb9
    cir.br ^bb11 loc(#loc100)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc96)
  ^bb12:  // pred: ^bb11
    %8 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc106)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc106)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc107)
    cir.br ^bb14 loc(#loc108)
  ^bb13:  // pred: ^bb2
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc109)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc109)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc110)
    cir.br ^bb14 loc(#loc111)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc92)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc88)
  } loc(#loc137)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_case_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":34:15)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":38:19)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":20:1)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":41:1)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":27:9)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":27:28)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":22:5)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":40:5)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":22:12)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":24:5)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":26:5)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":33:5)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":27:18)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":27:27)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":28:9)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":32:9)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":28:17)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":30:9)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":31:13)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":34:5)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":35:5)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":38:9)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":39:9)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":97:1)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":101:1)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":99:5)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":99:11)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":100:5)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":100:11)
#loc34 = loc("/usr/include/stdlib.h":575:1)
#loc35 = loc("/usr/include/stdlib.h":575:41)
#loc36 = loc("/usr/include/time.h":76:1)
#loc37 = loc("/usr/include/time.h":76:38)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":117:15)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":119:15)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":122:15)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":124:15)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":112:1)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":127:1)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":113:1)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":115:27)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":115:22)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":115:5)
#loc52 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":117:5)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":118:5)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":118:50)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":119:5)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":122:5)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":123:5)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":123:49)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":124:5)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":126:12)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":126:5)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":63:23)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":67:15)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":48:1)
#loc65 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":70:1)
#loc66 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":59:9)
#loc67 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":59:28)
#loc68 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":50:5)
#loc69 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":69:5)
#loc70 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":50:12)
#loc71 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":52:5)
#loc72 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":54:19)
#loc73 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":54:9)
#loc74 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":55:9)
#loc75 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":58:5)
#loc76 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":66:5)
#loc77 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":59:18)
#loc78 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":59:27)
#loc79 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":60:9)
#loc80 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":65:9)
#loc81 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":60:17)
#loc82 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":62:9)
#loc83 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":63:13)
#loc84 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":64:13)
#loc85 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":67:5)
#loc86 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":68:5)
#loc87 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":73:1)
#loc88 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":95:1)
#loc89 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":80:9)
#loc90 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":80:28)
#loc91 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":75:5)
#loc92 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":94:5)
#loc93 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":75:12)
#loc94 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":77:5)
#loc95 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":79:5)
#loc96 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":87:5)
#loc97 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":80:18)
#loc98 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":80:27)
#loc99 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":81:9)
#loc100 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":86:9)
#loc101 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":81:17)
#loc102 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":83:9)
#loc103 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":84:23)
#loc104 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":84:13)
#loc105 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":85:13)
#loc106 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":88:15)
#loc107 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":88:5)
#loc108 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":89:5)
#loc109 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":92:19)
#loc110 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":92:9)
#loc111 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":93:9)
#loc112 = loc(fused[#loc1, #loc2])
#loc113 = loc(fused[#loc3, #loc4])
#loc114 = loc(fused[#loc7, #loc8])
#loc115 = loc(fused[#loc9, #loc10])
#loc116 = loc(fused[#loc11, #loc12])
#loc117 = loc(fused[#loc15, #loc16])
#loc118 = loc(fused[#loc17, #loc18])
#loc119 = loc(fused[#loc19, #loc20])
#loc120 = loc(fused[#loc28, #loc29])
#loc121 = loc(fused[#loc30, #loc31])
#loc122 = loc(fused[#loc32, #loc33])
#loc123 = loc(fused[#loc34, #loc35])
#loc124 = loc(fused[#loc36, #loc37])
#loc125 = loc(fused[#loc42, #loc43])
#loc128 = loc(fused[#loc53, #loc54])
#loc129 = loc(fused[#loc57, #loc58])
#loc130 = loc(fused[#loc61, #loc60])
#loc131 = loc(fused[#loc64, #loc65])
#loc132 = loc(fused[#loc66, #loc67])
#loc133 = loc(fused[#loc68, #loc69])
#loc134 = loc(fused[#loc75, #loc76])
#loc135 = loc(fused[#loc77, #loc78])
#loc136 = loc(fused[#loc79, #loc80])
#loc137 = loc(fused[#loc87, #loc88])
#loc138 = loc(fused[#loc89, #loc90])
#loc139 = loc(fused[#loc91, #loc92])
#loc140 = loc(fused[#loc95, #loc96])
#loc141 = loc(fused[#loc97, #loc98])
#loc142 = loc(fused[#loc99, #loc100])
