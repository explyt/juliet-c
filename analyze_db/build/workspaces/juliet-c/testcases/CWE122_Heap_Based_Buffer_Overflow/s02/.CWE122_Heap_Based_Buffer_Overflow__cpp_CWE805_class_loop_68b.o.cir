!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr2 = #cir<extra({nothrow = #cir.nothrow})>
#loc3 = loc("../../../testcasesupport/std_testcase.h":61:7)
!ty_TwoIntsClass = !cir.record<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s02/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68_badData : !cir.ptr<!ty_TwoIntsClass> {alignment = 8 : i64} loc(#loc114)
  cir.func linkonce_odr @_ZN12TwoIntsClassaSERKS_(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7), %arg1: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) -> !cir.ptr<!ty_TwoIntsClass> extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc3)
    %1 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["", init, const] {alignment = 8 : i64} loc(#loc3)
    %2 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["__retval"] {alignment = 8 : i64} loc(#loc3)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc3)
    cir.store %arg1, %1 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc3)
    %3 = cir.load deref %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc3)
    %4 = cir.get_member %3[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc4)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc3)
    %6 = cir.get_member %5[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc4)
    %7 = cir.const #cir.int<8> : !u64i loc(#loc3)
    %8 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc4)
    %9 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc4)
    cir.libc.memcpy %7 bytes from %9 to %8 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc3)
    cir.store %3, %2 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc3)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc3)
    cir.return %10 : !cir.ptr<!ty_TwoIntsClass> loc(#loc3)
  } loc(#loc3)
  cir.func private @printIntLine(!s32i) loc(#loc115)
  cir.func @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_687badSinkEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data", init] {alignment = 8 : i64} loc(#loc117)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68_badData : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc114)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc10)
    cir.store %2, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc117)
    cir.scope {
      %3 = cir.alloca !cir.array<!ty_TwoIntsClass x 100>, !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>, ["source"] {alignment = 16 : i64} loc(#loc119)
      cir.scope {
        %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc121)
        cir.scope {
          %5 = cir.const #cir.int<0> : !s32i loc(#loc21)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc21)
          cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc123)
          cir.for : cond {
            %7 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc23)
            %8 = cir.const #cir.int<100> : !s32i loc(#loc24)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc24)
            %10 = cir.cmp(lt, %7, %9) : !u64i, !cir.bool loc(#loc124)
            cir.condition(%10) loc(#loc124)
          } body {
            cir.scope {
              %7 = cir.const #cir.int<0> : !s32i loc(#loc26)
              %8 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc27)
              %9 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc28)
              %10 = cir.ptr_stride(%9 : !cir.ptr<!ty_TwoIntsClass>, %8 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc28)
              %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc4)
              cir.store %7, %11 : !s32i, !cir.ptr<!s32i> loc(#loc126)
              %12 = cir.const #cir.int<0> : !s32i loc(#loc29)
              %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc30)
              %14 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc31)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!ty_TwoIntsClass>, %13 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc31)
              %16 = cir.get_member %15[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc32)
              cir.store %12, %16 : !s32i, !cir.ptr<!s32i> loc(#loc127)
            } loc(#loc125)
            cir.yield loc(#loc20)
          } step {
            %7 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc33)
            %8 = cir.unary(inc, %7) : !u64i, !u64i loc(#loc34)
            cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc128)
            cir.yield loc(#loc122)
          } loc(#loc122)
        } loc(#loc122)
      } loc(#loc120)
      cir.scope {
        %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc130)
        cir.scope {
          %11 = cir.const #cir.int<0> : !s32i loc(#loc41)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc41)
          cir.store %12, %4 : !u64i, !cir.ptr<!u64i> loc(#loc132)
          cir.for : cond {
            %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc43)
            %14 = cir.const #cir.int<100> : !s32i loc(#loc44)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc44)
            %16 = cir.cmp(lt, %13, %15) : !u64i, !cir.bool loc(#loc133)
            cir.condition(%16) loc(#loc133)
          } body {
            cir.scope {
              %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc46)
              %14 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc47)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!ty_TwoIntsClass>, %13 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc47)
              %16 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc48)
              %17 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc49)
              %18 = cir.ptr_stride(%16 : !cir.ptr<!ty_TwoIntsClass>, %17 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc50)
              %19 = cir.call @_ZN12TwoIntsClassaSERKS_(%18, %15) : (!cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!ty_TwoIntsClass>) -> !cir.ptr<!ty_TwoIntsClass> extra(#fn_attr2) loc(#loc51)
            } loc(#loc134)
            cir.yield loc(#loc40)
          } step {
            %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc52)
            %14 = cir.unary(inc, %13) : !u64i, !u64i loc(#loc53)
            cir.store %14, %4 : !u64i, !cir.ptr<!u64i> loc(#loc135)
            cir.yield loc(#loc131)
          } loc(#loc131)
        } loc(#loc131)
        %5 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc54)
        %6 = cir.const #cir.int<0> : !s32i loc(#loc55)
        %7 = cir.ptr_stride(%5 : !cir.ptr<!ty_TwoIntsClass>, %6 : !s32i), !cir.ptr<!ty_TwoIntsClass> loc(#loc56)
        %8 = cir.get_member %7[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc4)
        %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc57)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc58)
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc59)
        cir.delete.array %10 : <!ty_TwoIntsClass> loc(#loc59)
      } loc(#loc129)
    } loc(#loc118)
    cir.return loc(#loc8)
  } loc(#loc116)
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68_goodG2BData : !cir.ptr<!ty_TwoIntsClass> {alignment = 8 : i64} loc(#loc136)
  cir.func @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_6811goodG2BSinkEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data", init] {alignment = 8 : i64} loc(#loc138)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68_goodG2BData : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc136)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc65)
    cir.store %2, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc138)
    cir.scope {
      %3 = cir.alloca !cir.array<!ty_TwoIntsClass x 100>, !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>, ["source"] {alignment = 16 : i64} loc(#loc140)
      cir.scope {
        %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc142)
        cir.scope {
          %5 = cir.const #cir.int<0> : !s32i loc(#loc76)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc76)
          cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc144)
          cir.for : cond {
            %7 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc78)
            %8 = cir.const #cir.int<100> : !s32i loc(#loc79)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc79)
            %10 = cir.cmp(lt, %7, %9) : !u64i, !cir.bool loc(#loc145)
            cir.condition(%10) loc(#loc145)
          } body {
            cir.scope {
              %7 = cir.const #cir.int<0> : !s32i loc(#loc81)
              %8 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc82)
              %9 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc83)
              %10 = cir.ptr_stride(%9 : !cir.ptr<!ty_TwoIntsClass>, %8 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc83)
              %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc4)
              cir.store %7, %11 : !s32i, !cir.ptr<!s32i> loc(#loc147)
              %12 = cir.const #cir.int<0> : !s32i loc(#loc84)
              %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc85)
              %14 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc86)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!ty_TwoIntsClass>, %13 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc86)
              %16 = cir.get_member %15[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc32)
              cir.store %12, %16 : !s32i, !cir.ptr<!s32i> loc(#loc148)
            } loc(#loc146)
            cir.yield loc(#loc75)
          } step {
            %7 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc87)
            %8 = cir.unary(inc, %7) : !u64i, !u64i loc(#loc88)
            cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc149)
            cir.yield loc(#loc143)
          } loc(#loc143)
        } loc(#loc143)
      } loc(#loc141)
      cir.scope {
        %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc151)
        cir.scope {
          %11 = cir.const #cir.int<0> : !s32i loc(#loc95)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc95)
          cir.store %12, %4 : !u64i, !cir.ptr<!u64i> loc(#loc153)
          cir.for : cond {
            %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc97)
            %14 = cir.const #cir.int<100> : !s32i loc(#loc98)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc98)
            %16 = cir.cmp(lt, %13, %15) : !u64i, !cir.bool loc(#loc154)
            cir.condition(%16) loc(#loc154)
          } body {
            cir.scope {
              %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc100)
              %14 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc101)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!ty_TwoIntsClass>, %13 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc101)
              %16 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc102)
              %17 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc103)
              %18 = cir.ptr_stride(%16 : !cir.ptr<!ty_TwoIntsClass>, %17 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc104)
              %19 = cir.call @_ZN12TwoIntsClassaSERKS_(%18, %15) : (!cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!ty_TwoIntsClass>) -> !cir.ptr<!ty_TwoIntsClass> extra(#fn_attr2) loc(#loc105)
            } loc(#loc155)
            cir.yield loc(#loc94)
          } step {
            %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc106)
            %14 = cir.unary(inc, %13) : !u64i, !u64i loc(#loc107)
            cir.store %14, %4 : !u64i, !cir.ptr<!u64i> loc(#loc156)
            cir.yield loc(#loc152)
          } loc(#loc152)
        } loc(#loc152)
        %5 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc108)
        %6 = cir.const #cir.int<0> : !s32i loc(#loc109)
        %7 = cir.ptr_stride(%5 : !cir.ptr<!ty_TwoIntsClass>, %6 : !s32i), !cir.ptr<!ty_TwoIntsClass> loc(#loc110)
        %8 = cir.get_member %7[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc4)
        %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc111)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc112)
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc113)
        cir.delete.array %10 : <!ty_TwoIntsClass> loc(#loc113)
      } loc(#loc150)
    } loc(#loc139)
    cir.return loc(#loc63)
  } loc(#loc137)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s02/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":19:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":19:23)
#loc4 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":29:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":54:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":31:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":31:27)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":32:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":53:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":33:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":33:32)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":34:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":42:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":35:13)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":35:20)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":37:13)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":41:13)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":37:22)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":37:18)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":37:25)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":37:29)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":38:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":39:36)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":39:24)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":39:17)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":40:36)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":40:24)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":40:17)
#loc32 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":37:35)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":37:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":43:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":52:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":44:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":44:20)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":46:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":49:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":46:22)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":46:18)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":46:25)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":46:29)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":47:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":48:34)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":48:27)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":48:17)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":48:22)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":48:23)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":48:25)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":46:35)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":46:34)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":50:26)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":50:31)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":50:32)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":50:34)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":50:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":51:23)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":20:1)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":20:23)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":61:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":86:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":63:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":63:27)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":64:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":85:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":65:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":65:32)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":66:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":74:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":67:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":67:20)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":69:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":73:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":69:22)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":69:18)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":69:25)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":69:29)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":70:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":71:36)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":71:24)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":71:17)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":72:36)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":72:24)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":72:17)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":69:35)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":69:34)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":75:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":84:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":76:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":76:20)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":78:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":81:13)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":78:22)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":78:18)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":78:25)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":78:29)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":79:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":80:34)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":80:27)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":80:17)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":80:22)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":80:23)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":80:25)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":78:35)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":78:34)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":82:26)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":82:31)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":82:32)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":82:34)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":82:13)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_68b.cpp":83:23)
#loc114 = loc(fused[#loc1, #loc2])
#loc115 = loc(fused[#loc5, #loc6])
#loc116 = loc(fused[#loc7, #loc8])
#loc117 = loc(fused[#loc9, #loc10])
#loc118 = loc(fused[#loc11, #loc12])
#loc119 = loc(fused[#loc13, #loc14])
#loc120 = loc(fused[#loc15, #loc16])
#loc121 = loc(fused[#loc17, #loc18])
#loc122 = loc(fused[#loc19, #loc20])
#loc123 = loc(fused[#loc22, #loc21])
#loc124 = loc(fused[#loc23, #loc24])
#loc125 = loc(fused[#loc25, #loc20])
#loc126 = loc(fused[#loc28, #loc26])
#loc127 = loc(fused[#loc31, #loc29])
#loc128 = loc(fused[#loc34, #loc33])
#loc129 = loc(fused[#loc35, #loc36])
#loc130 = loc(fused[#loc37, #loc38])
#loc131 = loc(fused[#loc39, #loc40])
#loc132 = loc(fused[#loc42, #loc41])
#loc133 = loc(fused[#loc43, #loc44])
#loc134 = loc(fused[#loc45, #loc40])
#loc135 = loc(fused[#loc53, #loc52])
#loc136 = loc(fused[#loc60, #loc61])
#loc137 = loc(fused[#loc62, #loc63])
#loc138 = loc(fused[#loc64, #loc65])
#loc139 = loc(fused[#loc66, #loc67])
#loc140 = loc(fused[#loc68, #loc69])
#loc141 = loc(fused[#loc70, #loc71])
#loc142 = loc(fused[#loc72, #loc73])
#loc143 = loc(fused[#loc74, #loc75])
#loc144 = loc(fused[#loc77, #loc76])
#loc145 = loc(fused[#loc78, #loc79])
#loc146 = loc(fused[#loc80, #loc75])
#loc147 = loc(fused[#loc83, #loc81])
#loc148 = loc(fused[#loc86, #loc84])
#loc149 = loc(fused[#loc88, #loc87])
#loc150 = loc(fused[#loc89, #loc90])
#loc151 = loc(fused[#loc91, #loc92])
#loc152 = loc(fused[#loc93, #loc94])
#loc153 = loc(fused[#loc96, #loc95])
#loc154 = loc(fused[#loc97, #loc98])
#loc155 = loc(fused[#loc99, #loc94])
#loc156 = loc(fused[#loc107, #loc106])
