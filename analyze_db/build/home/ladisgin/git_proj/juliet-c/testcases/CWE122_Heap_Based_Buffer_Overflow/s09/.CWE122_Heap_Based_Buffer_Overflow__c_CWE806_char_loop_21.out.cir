!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":26:25)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":26:32)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":156:10)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":156:14)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":156:20)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":156:32)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":68:30)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":68:37)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":107:30)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":107:37)
#loc299 = loc(fused[#loc9, #loc10])
#loc337 = loc(fused[#loc109, #loc110])
#loc338 = loc(fused[#loc111, #loc112])
#loc344 = loc(fused[#loc132, #loc133])
#loc375 = loc(fused[#loc217, #loc218])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc295)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc296)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc297)
  cir.func internal private @badSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc9, #loc10])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc299)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc8)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc11)
    cir.br ^bb1 loc(#loc300)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc297)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc301)
  ^bb2:  // pred: ^bb1
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc16)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc16)
    %7 = cir.const #cir.int<65> : !s32i loc(#loc17)
    %8 = cir.const #cir.int<100> : !s32i loc(#loc18)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc18)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc18)
    cir.libc.memset %11 bytes from %6 set to %7 : !cir.ptr<!void>, !s32i, !u64i loc(#loc302)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc22)
    %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc22)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
    %15 = cir.const #cir.int<100> : !s32i loc(#loc24)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc24)
    %18 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %17 : !s32i), !cir.ptr<!s8i> loc(#loc26)
    cir.store %13, %18 : !s8i, !cir.ptr<!s8i> loc(#loc303)
    cir.br ^bb3 loc(#loc13)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc13)
  ^bb4:  // pred: ^bb3
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
    cir.store %19, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc304)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc304)
    cir.return %20 : !cir.ptr<!s8i> loc(#loc304)
  } loc(#loc298)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc305)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc306)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc307)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc309)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc310)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc311)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc312)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc44)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc45)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc45)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc313)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc314)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc44)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc315)
    cir.store %10, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc316)
    cir.br ^bb1 loc(#loc317)
  ^bb1:  // pred: ^bb0
    %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc53)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc53)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc318)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc319)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc55)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc56)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc57)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc55)
    cir.br ^bb3 loc(#loc51)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc51)
  ^bb4:  // pred: ^bb3
    %18 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %19 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc297)
    cir.store %18, %19 : !s32i, !cir.ptr<!s32i> loc(#loc320)
    %20 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
    %21 = cir.call @badSource(%20) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc61)
    cir.store %21, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc321)
    cir.br ^bb5 loc(#loc322)
  ^bb5:  // pred: ^bb4
    %22 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc309)
    cir.store %22, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc309)
    %23 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc66)
    %24 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc67)
    %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc66)
    cir.store %25, %2 : !u64i, !cir.ptr<!u64i> loc(#loc323)
    cir.br ^bb6 loc(#loc324)
  ^bb6:  // pred: ^bb5
    %26 = cir.const #cir.int<0> : !s32i loc(#loc72)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc72)
    cir.store %27, %1 : !u64i, !cir.ptr<!u64i> loc(#loc325)
    cir.br ^bb7 loc(#loc324)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %28 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc74)
    %29 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc75)
    %30 = cir.cmp(lt, %28, %29) : !u64i, !cir.bool loc(#loc326)
    cir.brcond %30 ^bb8, ^bb12 loc(#loc76)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc327)
  ^bb9:  // pred: ^bb8
    %31 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
    %32 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc79)
    %33 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %32 : !u64i), !cir.ptr<!s8i> loc(#loc80)
    %34 = cir.load %33 : !cir.ptr<!s8i>, !s8i loc(#loc78)
    %35 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc81)
    %36 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc82)
    %37 = cir.ptr_stride(%36 : !cir.ptr<!s8i>, %35 : !u64i), !cir.ptr<!s8i> loc(#loc82)
    cir.store %34, %37 : !s8i, !cir.ptr<!s8i> loc(#loc328)
    cir.br ^bb10 loc(#loc71)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc71)
  ^bb11:  // pred: ^bb10
    %38 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc83)
    %39 = cir.unary(inc, %38) : !u64i, !u64i loc(#loc84)
    cir.store %39, %1 : !u64i, !cir.ptr<!u64i> loc(#loc329)
    cir.br ^bb7 loc(#loc324)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc71)
  ^bb13:  // pred: ^bb12
    %40 = cir.const #cir.int<0> : !s32i loc(#loc85)
    %41 = cir.cast(integral, %40 : !s32i), !s8i loc(#loc85)
    %42 = cir.const #cir.int<50> : !s32i loc(#loc86)
    %43 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %44 = cir.binop(sub, %42, %43) nsw : !s32i loc(#loc86)
    %45 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc88)
    %46 = cir.ptr_stride(%45 : !cir.ptr<!s8i>, %44 : !s32i), !cir.ptr<!s8i> loc(#loc88)
    cir.store %41, %46 : !s8i, !cir.ptr<!s8i> loc(#loc330)
    %47 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%47) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %48 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc91)
    %49 = cir.cast(bitcast, %48 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc91)
    cir.call @free(%49) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc92)
    cir.br ^bb14 loc(#loc65)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc36)
  } loc(#loc308)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc332)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc95)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc333)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc97)
    cir.return loc(#loc94)
  } loc(#loc331)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc334)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc335)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc103)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc105)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc106)
  cir.func @main(%arg0: !s32i loc(fused[#loc109, #loc110]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc111, #loc112])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc337)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc338)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc108)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc113)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc114)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc115)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc115)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc116)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc103)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc103)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc117)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21_good : !cir.ptr<!cir.func<!void ()>> loc(#loc339)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21_good() : () -> () loc(#loc118)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc104)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc104)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc105)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc105)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc340)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21_bad() : () -> () loc(#loc122)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc106)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc106)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc124)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc125)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc341)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc341)
    cir.return %17 : !s32i loc(#loc341)
  } loc(#loc336)
  cir.global "private" internal dsolocal @goodG2B1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc342)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc129)
  cir.func internal private @goodG2B1Source(%arg0: !cir.ptr<!s8i> loc(fused[#loc132, #loc133])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc344)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc131)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc134)
    cir.br ^bb1 loc(#loc345)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc342)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc137)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc346)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc129)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc129)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc141)
    cir.br ^bb4 loc(#loc139)
  ^bb3:  // pred: ^bb1
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc142)
    %9 = cir.const #cir.int<65> : !s32i loc(#loc143)
    %10 = cir.const #cir.int<50> : !s32i loc(#loc144)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc145)
    %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc144)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc144)
    cir.libc.memset %13 bytes from %8 set to %9 : !cir.ptr<!void>, !s32i, !u64i loc(#loc347)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc148)
    %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc148)
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc149)
    %17 = cir.const #cir.int<50> : !s32i loc(#loc150)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc151)
    %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc150)
    %20 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc152)
    cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc348)
    cir.br ^bb4 loc(#loc136)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc136)
  ^bb5:  // pred: ^bb4
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
    cir.store %21, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc349)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc349)
    cir.return %22 : !cir.ptr<!s8i> loc(#loc349)
  } loc(#loc343)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc351)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc352)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc353)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc354)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc164)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc165)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc165)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc355)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc356)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc164)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc357)
    cir.store %10, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc358)
    cir.br ^bb1 loc(#loc359)
  ^bb1:  // pred: ^bb0
    %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc172)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc173)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc173)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc360)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc361)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc175)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc176)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc177)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc175)
    cir.br ^bb3 loc(#loc171)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc171)
  ^bb4:  // pred: ^bb3
    %18 = cir.const #cir.int<0> : !s32i loc(#loc178)
    %19 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc342)
    cir.store %18, %19 : !s32i, !cir.ptr<!s32i> loc(#loc362)
    %20 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc180)
    %21 = cir.call @goodG2B1Source(%20) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc181)
    cir.store %21, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc363)
    cir.br ^bb5 loc(#loc364)
  ^bb5:  // pred: ^bb4
    %22 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc351)
    cir.store %22, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc351)
    %23 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc186)
    %24 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc187)
    %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc186)
    cir.store %25, %2 : !u64i, !cir.ptr<!u64i> loc(#loc365)
    cir.br ^bb6 loc(#loc366)
  ^bb6:  // pred: ^bb5
    %26 = cir.const #cir.int<0> : !s32i loc(#loc192)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc192)
    cir.store %27, %1 : !u64i, !cir.ptr<!u64i> loc(#loc367)
    cir.br ^bb7 loc(#loc366)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %28 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc194)
    %29 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc195)
    %30 = cir.cmp(lt, %28, %29) : !u64i, !cir.bool loc(#loc368)
    cir.brcond %30 ^bb8, ^bb12 loc(#loc196)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc369)
  ^bb9:  // pred: ^bb8
    %31 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc198)
    %32 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc199)
    %33 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %32 : !u64i), !cir.ptr<!s8i> loc(#loc200)
    %34 = cir.load %33 : !cir.ptr<!s8i>, !s8i loc(#loc198)
    %35 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc201)
    %36 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc202)
    %37 = cir.ptr_stride(%36 : !cir.ptr<!s8i>, %35 : !u64i), !cir.ptr<!s8i> loc(#loc202)
    cir.store %34, %37 : !s8i, !cir.ptr<!s8i> loc(#loc370)
    cir.br ^bb10 loc(#loc191)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc191)
  ^bb11:  // pred: ^bb10
    %38 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc203)
    %39 = cir.unary(inc, %38) : !u64i, !u64i loc(#loc204)
    cir.store %39, %1 : !u64i, !cir.ptr<!u64i> loc(#loc371)
    cir.br ^bb7 loc(#loc366)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc191)
  ^bb13:  // pred: ^bb12
    %40 = cir.const #cir.int<0> : !s32i loc(#loc205)
    %41 = cir.cast(integral, %40 : !s32i), !s8i loc(#loc205)
    %42 = cir.const #cir.int<50> : !s32i loc(#loc206)
    %43 = cir.const #cir.int<1> : !s32i loc(#loc207)
    %44 = cir.binop(sub, %42, %43) nsw : !s32i loc(#loc206)
    %45 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc208)
    %46 = cir.ptr_stride(%45 : !cir.ptr<!s8i>, %44 : !s32i), !cir.ptr<!s8i> loc(#loc208)
    cir.store %41, %46 : !s8i, !cir.ptr<!s8i> loc(#loc372)
    %47 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc209)
    cir.call @printLine(%47) : (!cir.ptr<!s8i>) -> () loc(#loc210)
    %48 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc211)
    %49 = cir.cast(bitcast, %48 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc211)
    cir.call @free(%49) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc212)
    cir.br ^bb14 loc(#loc185)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc156)
  } loc(#loc350)
  cir.global "private" internal dsolocal @goodG2B2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc373)
  cir.func internal private @goodG2B2Source(%arg0: !cir.ptr<!s8i> loc(fused[#loc217, #loc218])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc375)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc216)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc219)
    cir.br ^bb1 loc(#loc376)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc373)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc222)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc222)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc377)
  ^bb2:  // pred: ^bb1
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc224)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc224)
    %7 = cir.const #cir.int<65> : !s32i loc(#loc225)
    %8 = cir.const #cir.int<50> : !s32i loc(#loc226)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc227)
    %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc226)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc226)
    cir.libc.memset %11 bytes from %6 set to %7 : !cir.ptr<!void>, !s32i, !u64i loc(#loc378)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc230)
    %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc230)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc231)
    %15 = cir.const #cir.int<50> : !s32i loc(#loc232)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc233)
    %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc232)
    %18 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %17 : !s32i), !cir.ptr<!s8i> loc(#loc234)
    cir.store %13, %18 : !s8i, !cir.ptr<!s8i> loc(#loc379)
    cir.br ^bb3 loc(#loc221)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc221)
  ^bb4:  // pred: ^bb3
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc235)
    cir.store %19, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc380)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc380)
    cir.return %20 : !cir.ptr<!s8i> loc(#loc380)
  } loc(#loc374)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc382)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc383)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc384)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc385)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc246)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc247)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc247)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc386)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc387)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc246)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc388)
    cir.store %10, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc389)
    cir.br ^bb1 loc(#loc390)
  ^bb1:  // pred: ^bb0
    %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc254)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc255)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc255)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc391)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc392)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc257)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc258)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc259)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc257)
    cir.br ^bb3 loc(#loc253)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc253)
  ^bb4:  // pred: ^bb3
    %18 = cir.const #cir.int<1> : !s32i loc(#loc260)
    %19 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc373)
    cir.store %18, %19 : !s32i, !cir.ptr<!s32i> loc(#loc393)
    %20 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc262)
    %21 = cir.call @goodG2B2Source(%20) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc263)
    cir.store %21, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc394)
    cir.br ^bb5 loc(#loc395)
  ^bb5:  // pred: ^bb4
    %22 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc382)
    cir.store %22, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc382)
    %23 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc268)
    %24 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc269)
    %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc268)
    cir.store %25, %2 : !u64i, !cir.ptr<!u64i> loc(#loc396)
    cir.br ^bb6 loc(#loc397)
  ^bb6:  // pred: ^bb5
    %26 = cir.const #cir.int<0> : !s32i loc(#loc274)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc274)
    cir.store %27, %1 : !u64i, !cir.ptr<!u64i> loc(#loc398)
    cir.br ^bb7 loc(#loc397)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %28 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc276)
    %29 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc277)
    %30 = cir.cmp(lt, %28, %29) : !u64i, !cir.bool loc(#loc399)
    cir.brcond %30 ^bb8, ^bb12 loc(#loc278)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc400)
  ^bb9:  // pred: ^bb8
    %31 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc280)
    %32 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc281)
    %33 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %32 : !u64i), !cir.ptr<!s8i> loc(#loc282)
    %34 = cir.load %33 : !cir.ptr<!s8i>, !s8i loc(#loc280)
    %35 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc283)
    %36 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc284)
    %37 = cir.ptr_stride(%36 : !cir.ptr<!s8i>, %35 : !u64i), !cir.ptr<!s8i> loc(#loc284)
    cir.store %34, %37 : !s8i, !cir.ptr<!s8i> loc(#loc401)
    cir.br ^bb10 loc(#loc273)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc273)
  ^bb11:  // pred: ^bb10
    %38 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc285)
    %39 = cir.unary(inc, %38) : !u64i, !u64i loc(#loc286)
    cir.store %39, %1 : !u64i, !cir.ptr<!u64i> loc(#loc402)
    cir.br ^bb7 loc(#loc397)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc273)
  ^bb13:  // pred: ^bb12
    %40 = cir.const #cir.int<0> : !s32i loc(#loc287)
    %41 = cir.cast(integral, %40 : !s32i), !s8i loc(#loc287)
    %42 = cir.const #cir.int<50> : !s32i loc(#loc288)
    %43 = cir.const #cir.int<1> : !s32i loc(#loc289)
    %44 = cir.binop(sub, %42, %43) nsw : !s32i loc(#loc288)
    %45 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc290)
    %46 = cir.ptr_stride(%45 : !cir.ptr<!s8i>, %44 : !s32i), !cir.ptr<!s8i> loc(#loc290)
    cir.store %41, %46 : !s8i, !cir.ptr<!s8i> loc(#loc403)
    %47 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc291)
    cir.call @printLine(%47) : (!cir.ptr<!s8i>) -> () loc(#loc292)
    %48 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc293)
    %49 = cir.cast(bitcast, %48 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc293)
    cir.call @free(%49) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc294)
    cir.br ^bb14 loc(#loc267)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc238)
  } loc(#loc381)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":24:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":24:24)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":26:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":35:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":27:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":28:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":33:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":28:8)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":29:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":31:16)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":31:22)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":31:27)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":31:31)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":31:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":31:32)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":32:23)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":32:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":32:14)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":32:18)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":32:19)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":34:12)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":34:5)
#loc29 = loc("/usr/include/string.h":407:1)
#loc30 = loc("/usr/include/string.h":408:33)
#loc31 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc32 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc33 = loc("/usr/include/stdlib.h":687:1)
#loc34 = loc("/usr/include/stdlib.h":687:32)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":37:1)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":57:1)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":45:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":45:25)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":46:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":46:16)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":46:19)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":39:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":39:12)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":40:20)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":40:27)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":40:31)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":40:42)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":40:43)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":40:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":41:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":41:33)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":41:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":41:17)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":41:23)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":41:24)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":41:30)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":41:29)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":42:17)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":42:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":43:22)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":43:12)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":43:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":43:26)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":44:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":56:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":47:19)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":47:26)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":47:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":47:30)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":49:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":52:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":49:18)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":49:14)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":49:21)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":49:25)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":49:23)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":50:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":51:23)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":51:28)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":51:29)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":51:18)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":51:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":49:35)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":49:34)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":53:22)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":53:14)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":53:17)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":53:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":54:19)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":54:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":55:14)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":55:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":140:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":144:1)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":142:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":142:14)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":143:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":143:14)
#loc99 = loc("/usr/include/stdlib.h":575:1)
#loc100 = loc("/usr/include/stdlib.h":575:41)
#loc101 = loc("/usr/include/time.h":76:1)
#loc102 = loc("/usr/include/time.h":76:38)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":161:15)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":163:15)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":166:15)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":168:15)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":156:1)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":171:1)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":157:1)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":159:27)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":159:22)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":159:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":161:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":162:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":162:67)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":163:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":166:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":167:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":167:66)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":168:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":170:12)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":170:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":64:1)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":64:29)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":73:19)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":68:1)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":82:1)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":69:1)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":70:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":80:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":70:8)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":71:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":74:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":76:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":73:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":78:16)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":78:22)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":78:27)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":78:30)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":78:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":78:31)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":79:22)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":79:9)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":79:14)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":79:17)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":79:18)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":81:12)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":81:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":84:1)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":104:1)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":92:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":92:25)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":93:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":93:16)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":93:19)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":86:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":86:12)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":87:20)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":87:27)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":87:31)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":87:42)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":87:43)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":87:5)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":88:5)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":88:33)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":88:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":88:17)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":88:23)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":88:24)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":88:30)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":88:29)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":89:22)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":89:5)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":90:27)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":90:12)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":90:5)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":90:31)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":91:5)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":103:5)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":94:19)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":94:26)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":94:9)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":94:30)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":96:9)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":99:9)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":96:18)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":96:14)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":96:21)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":96:25)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":96:23)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":97:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":98:23)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":98:28)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":98:29)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":98:18)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":98:13)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":96:35)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":96:34)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":100:22)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":100:14)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":100:17)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":100:9)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":101:19)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":101:9)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":102:14)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":102:9)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":65:1)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":65:29)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":107:1)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":116:1)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":108:1)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":109:5)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":114:5)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":109:8)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":110:5)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":112:16)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":112:22)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":112:27)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":112:30)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":112:9)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":112:31)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":113:22)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":113:9)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":113:14)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":113:17)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":113:18)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":115:12)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":115:5)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":118:1)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":138:1)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":126:9)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":126:25)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":127:9)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":127:16)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":127:19)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":120:5)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":120:12)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":121:20)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":121:27)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":121:31)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":121:42)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":121:43)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":121:5)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":122:5)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":122:33)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":122:9)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":122:17)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":122:23)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":122:24)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":122:30)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":122:29)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":123:22)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":123:5)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":124:27)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":124:12)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":124:5)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":124:31)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":125:5)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":137:5)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":128:19)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":128:26)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":128:9)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":128:30)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":130:9)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":133:9)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":130:18)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":130:14)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":130:21)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":130:25)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":130:23)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":131:9)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":132:23)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":132:28)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":132:29)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":132:18)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":132:13)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":130:35)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":130:34)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":134:22)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":134:14)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":134:17)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":134:9)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":135:19)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":135:9)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":136:14)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c":136:9)
#loc295 = loc(fused[#loc1, #loc2])
#loc296 = loc(fused[#loc3, #loc4])
#loc297 = loc(fused[#loc5, #loc6])
#loc298 = loc(fused[#loc7, #loc8])
#loc300 = loc(fused[#loc12, #loc13])
#loc301 = loc(fused[#loc15, #loc13])
#loc302 = loc(fused[#loc20, #loc21])
#loc303 = loc(fused[#loc23, #loc22])
#loc304 = loc(fused[#loc28, #loc27])
#loc305 = loc(fused[#loc29, #loc30])
#loc306 = loc(fused[#loc31, #loc32])
#loc307 = loc(fused[#loc33, #loc34])
#loc308 = loc(fused[#loc35, #loc36])
#loc309 = loc(fused[#loc37, #loc38])
#loc310 = loc(fused[#loc39, #loc40])
#loc311 = loc(fused[#loc39, #loc41])
#loc312 = loc(fused[#loc42, #loc43])
#loc313 = loc(fused[#loc46, #loc47])
#loc314 = loc(fused[#loc45, #loc47])
#loc315 = loc(fused[#loc44, #loc48])
#loc316 = loc(fused[#loc49, #loc48])
#loc317 = loc(fused[#loc50, #loc51])
#loc318 = loc(fused[#loc52, #loc53])
#loc319 = loc(fused[#loc54, #loc51])
#loc320 = loc(fused[#loc59, #loc58])
#loc321 = loc(fused[#loc62, #loc63])
#loc322 = loc(fused[#loc64, #loc65])
#loc323 = loc(fused[#loc68, #loc69])
#loc324 = loc(fused[#loc70, #loc71])
#loc325 = loc(fused[#loc73, #loc72])
#loc326 = loc(fused[#loc74, #loc75])
#loc327 = loc(fused[#loc77, #loc71])
#loc328 = loc(fused[#loc82, #loc80])
#loc329 = loc(fused[#loc84, #loc83])
#loc330 = loc(fused[#loc88, #loc85])
#loc331 = loc(fused[#loc93, #loc94])
#loc332 = loc(fused[#loc95, #loc96])
#loc333 = loc(fused[#loc97, #loc98])
#loc334 = loc(fused[#loc99, #loc100])
#loc335 = loc(fused[#loc101, #loc102])
#loc336 = loc(fused[#loc107, #loc108])
#loc339 = loc(fused[#loc118, #loc119])
#loc340 = loc(fused[#loc122, #loc123])
#loc341 = loc(fused[#loc126, #loc125])
#loc342 = loc(fused[#loc127, #loc128])
#loc343 = loc(fused[#loc130, #loc131])
#loc345 = loc(fused[#loc135, #loc136])
#loc346 = loc(fused[#loc138, #loc139, #loc140, #loc136])
#loc347 = loc(fused[#loc146, #loc147])
#loc348 = loc(fused[#loc149, #loc148])
#loc349 = loc(fused[#loc154, #loc153])
#loc350 = loc(fused[#loc155, #loc156])
#loc351 = loc(fused[#loc157, #loc158])
#loc352 = loc(fused[#loc159, #loc160])
#loc353 = loc(fused[#loc159, #loc161])
#loc354 = loc(fused[#loc162, #loc163])
#loc355 = loc(fused[#loc166, #loc167])
#loc356 = loc(fused[#loc165, #loc167])
#loc357 = loc(fused[#loc164, #loc168])
#loc358 = loc(fused[#loc169, #loc168])
#loc359 = loc(fused[#loc170, #loc171])
#loc360 = loc(fused[#loc172, #loc173])
#loc361 = loc(fused[#loc174, #loc171])
#loc362 = loc(fused[#loc179, #loc178])
#loc363 = loc(fused[#loc182, #loc183])
#loc364 = loc(fused[#loc184, #loc185])
#loc365 = loc(fused[#loc188, #loc189])
#loc366 = loc(fused[#loc190, #loc191])
#loc367 = loc(fused[#loc193, #loc192])
#loc368 = loc(fused[#loc194, #loc195])
#loc369 = loc(fused[#loc197, #loc191])
#loc370 = loc(fused[#loc202, #loc200])
#loc371 = loc(fused[#loc204, #loc203])
#loc372 = loc(fused[#loc208, #loc205])
#loc373 = loc(fused[#loc213, #loc214])
#loc374 = loc(fused[#loc215, #loc216])
#loc376 = loc(fused[#loc220, #loc221])
#loc377 = loc(fused[#loc223, #loc221])
#loc378 = loc(fused[#loc228, #loc229])
#loc379 = loc(fused[#loc231, #loc230])
#loc380 = loc(fused[#loc236, #loc235])
#loc381 = loc(fused[#loc237, #loc238])
#loc382 = loc(fused[#loc239, #loc240])
#loc383 = loc(fused[#loc241, #loc242])
#loc384 = loc(fused[#loc241, #loc243])
#loc385 = loc(fused[#loc244, #loc245])
#loc386 = loc(fused[#loc248, #loc249])
#loc387 = loc(fused[#loc247, #loc249])
#loc388 = loc(fused[#loc246, #loc250])
#loc389 = loc(fused[#loc251, #loc250])
#loc390 = loc(fused[#loc252, #loc253])
#loc391 = loc(fused[#loc254, #loc255])
#loc392 = loc(fused[#loc256, #loc253])
#loc393 = loc(fused[#loc261, #loc260])
#loc394 = loc(fused[#loc264, #loc265])
#loc395 = loc(fused[#loc266, #loc267])
#loc396 = loc(fused[#loc270, #loc271])
#loc397 = loc(fused[#loc272, #loc273])
#loc398 = loc(fused[#loc275, #loc274])
#loc399 = loc(fused[#loc276, #loc277])
#loc400 = loc(fused[#loc279, #loc273])
#loc401 = loc(fused[#loc284, #loc282])
#loc402 = loc(fused[#loc286, #loc285])
#loc403 = loc(fused[#loc290, #loc287])
