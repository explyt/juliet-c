!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc97)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc98)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc99)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc101)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc102)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc103)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc15)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc15)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc15)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc15)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc15)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc15)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc15)
    cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc103)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc16)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc104)
    cir.scope {
      %11 = cir.const #cir.int<0> : !s32i loc(#loc20)
      cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
      cir.for : cond {
        %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc23)
        %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc107)
        cir.condition(%14) loc(#loc24)
      } body {
        cir.scope {
          %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc26)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc26)
          %14 = cir.const #cir.int<65> : !s32i loc(#loc27)
          %15 = cir.const #cir.int<100> : !s32i loc(#loc28)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc29)
          %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc28)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc28)
          cir.libc.memset %18 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc109)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc32)
          %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc32)
          %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
          %22 = cir.const #cir.int<100> : !s32i loc(#loc34)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc35)
          %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc34)
          %25 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc36)
          cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc110)
        } loc(#loc108)
        cir.yield loc(#loc19)
      } step {
        %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
        %13 = cir.unary(inc, %12) nsw : !s32i, !s32i loc(#loc38)
        cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc111)
        cir.yield loc(#loc105)
      } loc(#loc105)
    } loc(#loc105)
    cir.scope {
      %11 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc113)
      %12 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc113)
      cir.store %12, %11 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc113)
      %13 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc43)
      %14 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc44)
      %15 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc45)
      %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
      %17 = cir.call @strlen(%16) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc45)
      %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
      %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
      %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
      %21 = cir.call @snprintf(%14, %17, %19, %20) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc43)
      %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
      cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    } loc(#loc112)
    cir.return loc(#loc9)
  } loc(#loc100)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc115)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc52)
    cir.return loc(#loc51)
  } loc(#loc114)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc117)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc118)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc119)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc61)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc61)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc61)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc61)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc61)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc61)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc61)
    cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc119)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc120)
    cir.scope {
      %11 = cir.const #cir.int<0> : !s32i loc(#loc66)
      cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc122)
      cir.for : cond {
        %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc68)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc69)
        %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc123)
        cir.condition(%14) loc(#loc70)
      } body {
        cir.scope {
          %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc72)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc72)
          %14 = cir.const #cir.int<65> : !s32i loc(#loc73)
          %15 = cir.const #cir.int<50> : !s32i loc(#loc74)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc75)
          %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc74)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc74)
          cir.libc.memset %18 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc125)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc78)
          %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc78)
          %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
          %22 = cir.const #cir.int<50> : !s32i loc(#loc80)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc81)
          %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc80)
          %25 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc82)
          cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc126)
        } loc(#loc124)
        cir.yield loc(#loc65)
      } step {
        %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc83)
        %13 = cir.unary(inc, %12) nsw : !s32i, !s32i loc(#loc84)
        cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc127)
        cir.yield loc(#loc121)
      } loc(#loc121)
    } loc(#loc121)
    cir.scope {
      %11 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc129)
      %12 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc129)
      cir.store %12, %11 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc129)
      %13 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc89)
      %14 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc90)
      %15 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc91)
      %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc92)
      %17 = cir.call @strlen(%16) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc91)
      %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc93)
      %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc93)
      %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc94)
      %21 = cir.call @snprintf(%14, %17, %19, %20) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc89)
      %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc95)
      cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    } loc(#loc128)
    cir.return loc(#loc55)
  } loc(#loc116)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":0:0)
#loc1 = loc("/usr/include/stdio.h":385:1)
#loc2 = loc("/usr/include/stdio.h":387:62)
#loc3 = loc("/usr/include/string.h":407:1)
#loc4 = loc("/usr/include/string.h":408:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":44:38)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":29:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":47:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":31:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":31:9)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":32:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":32:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":33:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":33:33)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":34:12)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":34:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":35:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":40:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":35:13)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":35:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":35:16)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":35:20)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":35:18)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":36:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":38:16)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":38:22)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":38:27)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":38:31)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":38:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":38:32)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":39:23)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":39:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":39:14)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":39:18)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":39:19)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":35:24)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":35:23)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":41:5)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":46:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":42:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":42:25)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":44:9)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":44:18)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":44:24)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":44:31)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":44:44)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":45:19)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":45:9)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":74:1)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":77:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":76:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":76:13)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":54:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":72:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":56:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":56:9)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":57:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":57:12)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":58:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":58:33)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":59:12)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":59:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":60:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":65:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":60:13)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":60:9)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":60:16)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":60:20)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":60:18)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":61:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":63:16)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":63:22)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":63:27)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":63:30)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":63:9)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":63:31)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":64:22)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":64:9)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":64:14)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":64:17)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":64:18)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":60:24)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":60:23)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":66:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":71:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":67:9)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":67:25)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":69:9)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":69:18)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":69:24)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":69:31)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":69:38)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":69:44)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":70:19)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c":70:9)
#loc97 = loc(fused[#loc1, #loc2])
#loc98 = loc(fused[#loc3, #loc4])
#loc99 = loc(fused[#loc6, #loc7])
#loc100 = loc(fused[#loc8, #loc9])
#loc101 = loc(fused[#loc10, #loc11])
#loc102 = loc(fused[#loc12, #loc13])
#loc103 = loc(fused[#loc14, #loc15])
#loc104 = loc(fused[#loc17, #loc16])
#loc105 = loc(fused[#loc18, #loc19])
#loc106 = loc(fused[#loc21, #loc20])
#loc107 = loc(fused[#loc22, #loc23])
#loc108 = loc(fused[#loc25, #loc19])
#loc109 = loc(fused[#loc30, #loc31])
#loc110 = loc(fused[#loc33, #loc32])
#loc111 = loc(fused[#loc38, #loc37])
#loc112 = loc(fused[#loc39, #loc40])
#loc113 = loc(fused[#loc41, #loc42])
#loc114 = loc(fused[#loc50, #loc51])
#loc115 = loc(fused[#loc52, #loc53])
#loc116 = loc(fused[#loc54, #loc55])
#loc117 = loc(fused[#loc56, #loc57])
#loc118 = loc(fused[#loc58, #loc59])
#loc119 = loc(fused[#loc60, #loc61])
#loc120 = loc(fused[#loc63, #loc62])
#loc121 = loc(fused[#loc64, #loc65])
#loc122 = loc(fused[#loc67, #loc66])
#loc123 = loc(fused[#loc68, #loc69])
#loc124 = loc(fused[#loc71, #loc65])
#loc125 = loc(fused[#loc76, #loc77])
#loc126 = loc(fused[#loc79, #loc78])
#loc127 = loc(fused[#loc84, #loc83])
#loc128 = loc(fused[#loc85, #loc86])
#loc129 = loc(fused[#loc87, #loc88])
