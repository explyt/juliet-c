!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":30:30)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":212:10)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":212:14)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":212:20)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":212:32)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":66:30)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":103:30)
#loc234 = loc(fused[#loc58, #loc59])
#loc235 = loc(fused[#loc60, #loc61])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_add_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc214)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc215)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printUnsignedLine(!u32i) loc(#loc216)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_add_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc218)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc219)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc14)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc14)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc220)
    cir.br ^bb1 loc(#loc221)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<6> : !s32i loc(#loc18)
    cir.br ^bb2 loc(#loc16)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %4 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc16)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc20)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %8 ^bb5, ^bb6 loc(#loc20)
  ^bb5:  // pred: ^bb4
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc20)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc20)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc20)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc20)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc20)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc20)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc20)
    cir.br ^bb7(%20 : !u32i) loc(#loc20)
  ^bb6:  // pred: ^bb4
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc20)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc20)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc20)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc20)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc20)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc20)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc20)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc20)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc20)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc20)
    cir.br ^bb7(%36 : !u32i) loc(#loc20)
  ^bb7(%37: !u32i loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":30:30)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc20)
  ^bb8:  // pred: ^bb7
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc20)
    %39 = cir.cast(integral, %38 : !s32i), !u32i loc(#loc20)
    cir.store %39, %1 : !u32i, !cir.ptr<!u32i> loc(#loc222)
    cir.br ^bb10 loc(#loc22)
  ^bb9:  // pred: ^bb2
    %40 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
    %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc23)
    cir.br ^bb10 loc(#loc24)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc17)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc223)
  ^bb12:  // pred: ^bb11
    %42 = cir.const #cir.int<7> : !s32i loc(#loc27)
    cir.br ^bb13 loc(#loc25)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %42 : !s32i, ^bb18 [
      7: ^bb15
    ] loc(#loc25)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc28)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc224)
  ^bb16:  // pred: ^bb15
    %43 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc31)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %45 = cir.cast(integral, %44 : !s32i), !u32i loc(#loc11)
    %46 = cir.binop(add, %43, %45) : !u32i loc(#loc225)
    cir.store %46, %0 : !u32i, !cir.ptr<!u32i> loc(#loc218)
    %47 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc32)
    cir.call @printUnsignedLine(%47) : (!u32i) -> () loc(#loc33)
    cir.br ^bb17 loc(#loc30)
  ^bb17:  // pred: ^bb16
    cir.br ^bb19 loc(#loc34)
  ^bb18:  // pred: ^bb13
    %48 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc35)
    %49 = cir.cast(array_to_ptrdecay, %48 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%49) : (!cir.ptr<!s8i>) -> () loc(#loc36)
    cir.br ^bb19 loc(#loc37)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc26)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc9)
  } loc(#loc217)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_add_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc227)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc228)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc229)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc230)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    cir.return loc(#loc39)
  } loc(#loc226)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc231)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc232)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc55)
  cir.func @main(%arg0: !s32i loc(fused[#loc58, #loc59]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc60, #loc61])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc234)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc235)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc57)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc62)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc62)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc63)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc64)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc64)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc65)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc52)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %8 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_rand_add_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc236)
    cir.call @CWE190_Integer_Overflow__unsigned_int_rand_add_15_good() : () -> () loc(#loc67)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc53)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc54)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %13 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_rand_add_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc237)
    cir.call @CWE190_Integer_Overflow__unsigned_int_rand_add_15_bad() : () -> () loc(#loc71)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc55)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc74)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc238)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc238)
    cir.return %17 : !s32i loc(#loc238)
  } loc(#loc233)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc76)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc240)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc241)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc83)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc83)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc242)
    cir.br ^bb1 loc(#loc243)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<6> : !s32i loc(#loc87)
    cir.br ^bb2 loc(#loc85)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %4 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc85)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc88)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc89)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc89)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc89)
    cir.brcond %8 ^bb5, ^bb6 loc(#loc89)
  ^bb5:  // pred: ^bb4
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc89)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc89)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc89)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc89)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc89)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc89)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc89)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc89)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc89)
    cir.br ^bb7(%20 : !u32i) loc(#loc89)
  ^bb6:  // pred: ^bb4
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc89)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc89)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc89)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc89)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc89)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc89)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc89)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc89)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc89)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc89)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc89)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc89)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc89)
    cir.br ^bb7(%36 : !u32i) loc(#loc89)
  ^bb7(%37: !u32i loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":66:30)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc89)
  ^bb8:  // pred: ^bb7
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc89)
    %39 = cir.cast(integral, %38 : !s32i), !u32i loc(#loc89)
    cir.store %39, %1 : !u32i, !cir.ptr<!u32i> loc(#loc244)
    cir.br ^bb10 loc(#loc91)
  ^bb9:  // pred: ^bb2
    %40 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc92)
    %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    cir.br ^bb10 loc(#loc94)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc86)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc245)
  ^bb12:  // pred: ^bb11
    %42 = cir.const #cir.int<8> : !s32i loc(#loc97)
    cir.br ^bb13 loc(#loc95)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %42 : !s32i, ^bb16 [
      7: ^bb15
    ] loc(#loc95)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc98)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    %43 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc99)
    %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    cir.br ^bb22 loc(#loc101)
  ^bb16:  // pred: ^bb13
    cir.br ^bb17 loc(#loc246)
  ^bb17:  // pred: ^bb16
    %45 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc104)
    %46 = cir.const #cir.int<2147483647> : !s32i loc(#loc105)
    %47 = cir.cast(integral, %46 : !s32i), !u32i loc(#loc105)
    %48 = cir.const #cir.int<2> : !u32i loc(#loc105)
    %49 = cir.binop(mul, %47, %48) : !u32i loc(#loc105)
    %50 = cir.const #cir.int<1> : !u32i loc(#loc105)
    %51 = cir.binop(add, %49, %50) : !u32i loc(#loc105)
    %52 = cir.cmp(lt, %45, %51) : !u32i, !cir.bool loc(#loc247)
    cir.brcond %52 ^bb18, ^bb19 loc(#loc248)
  ^bb18:  // pred: ^bb17
    %53 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc109)
    %54 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %55 = cir.cast(integral, %54 : !s32i), !u32i loc(#loc80)
    %56 = cir.binop(add, %53, %55) : !u32i loc(#loc249)
    cir.store %56, %0 : !u32i, !cir.ptr<!u32i> loc(#loc240)
    %57 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc110)
    cir.call @printUnsignedLine(%57) : (!u32i) -> () loc(#loc111)
    cir.br ^bb20 loc(#loc107)
  ^bb19:  // pred: ^bb17
    %58 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc76)
    %59 = cir.cast(array_to_ptrdecay, %58 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%59) : (!cir.ptr<!s8i>) -> () loc(#loc112)
    cir.br ^bb20 loc(#loc103)
  ^bb20:  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc103)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc113)
  ^bb22:  // 2 preds: ^bb15, ^bb21
    cir.br ^bb23 loc(#loc96)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc78)
  } loc(#loc239)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc251)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc252)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc120)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc120)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc253)
    cir.br ^bb1 loc(#loc254)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<6> : !s32i loc(#loc124)
    cir.br ^bb2 loc(#loc122)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %4 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc122)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc125)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc126)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc126)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc126)
    cir.brcond %8 ^bb5, ^bb6 loc(#loc126)
  ^bb5:  // pred: ^bb4
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc126)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc126)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc126)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc126)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc126)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc126)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc126)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc126)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc126)
    cir.br ^bb7(%20 : !u32i) loc(#loc126)
  ^bb6:  // pred: ^bb4
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc126)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc126)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc126)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc126)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc126)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc126)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc126)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc126)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc126)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc126)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc126)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc126)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc126)
    cir.br ^bb7(%36 : !u32i) loc(#loc126)
  ^bb7(%37: !u32i loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":103:30)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc126)
  ^bb8:  // pred: ^bb7
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc126)
    %39 = cir.cast(integral, %38 : !s32i), !u32i loc(#loc126)
    cir.store %39, %1 : !u32i, !cir.ptr<!u32i> loc(#loc255)
    cir.br ^bb10 loc(#loc128)
  ^bb9:  // pred: ^bb2
    %40 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc129)
    %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc129)
    cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc130)
    cir.br ^bb10 loc(#loc131)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc123)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc256)
  ^bb12:  // pred: ^bb11
    %42 = cir.const #cir.int<7> : !s32i loc(#loc134)
    cir.br ^bb13 loc(#loc132)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %42 : !s32i, ^bb21 [
      7: ^bb15
    ] loc(#loc132)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc135)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc257)
  ^bb16:  // pred: ^bb15
    %43 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc138)
    %44 = cir.const #cir.int<2147483647> : !s32i loc(#loc139)
    %45 = cir.cast(integral, %44 : !s32i), !u32i loc(#loc139)
    %46 = cir.const #cir.int<2> : !u32i loc(#loc139)
    %47 = cir.binop(mul, %45, %46) : !u32i loc(#loc139)
    %48 = cir.const #cir.int<1> : !u32i loc(#loc139)
    %49 = cir.binop(add, %47, %48) : !u32i loc(#loc139)
    %50 = cir.cmp(lt, %43, %49) : !u32i, !cir.bool loc(#loc258)
    cir.brcond %50 ^bb17, ^bb18 loc(#loc259)
  ^bb17:  // pred: ^bb16
    %51 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc143)
    %52 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %53 = cir.cast(integral, %52 : !s32i), !u32i loc(#loc117)
    %54 = cir.binop(add, %51, %53) : !u32i loc(#loc260)
    cir.store %54, %0 : !u32i, !cir.ptr<!u32i> loc(#loc251)
    %55 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc144)
    cir.call @printUnsignedLine(%55) : (!u32i) -> () loc(#loc145)
    cir.br ^bb19 loc(#loc141)
  ^bb18:  // pred: ^bb16
    %56 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc146)
    %57 = cir.cast(array_to_ptrdecay, %56 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc146)
    cir.call @printLine(%57) : (!cir.ptr<!s8i>) -> () loc(#loc147)
    cir.br ^bb19 loc(#loc137)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc137)
  ^bb20:  // pred: ^bb19
    cir.br ^bb22 loc(#loc148)
  ^bb21:  // pred: ^bb13
    %58 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc149)
    %59 = cir.cast(array_to_ptrdecay, %58 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc149)
    cir.call @printLine(%59) : (!cir.ptr<!s8i>) -> () loc(#loc150)
    cir.br ^bb22 loc(#loc151)
  ^bb22:  // 2 preds: ^bb20, ^bb21
    cir.br ^bb23 loc(#loc133)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc115)
  } loc(#loc250)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc262)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc263)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc158)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc158)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc264)
    cir.br ^bb1 loc(#loc265)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<5> : !s32i loc(#loc162)
    cir.br ^bb2 loc(#loc160)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %4 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc160)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc163)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc164)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc164)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc165)
    cir.br ^bb6 loc(#loc166)
  ^bb5:  // pred: ^bb2
    %7 = cir.const #cir.int<2> : !s32i loc(#loc167)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc167)
    cir.store %8, %1 : !u32i, !cir.ptr<!u32i> loc(#loc266)
    cir.br ^bb6 loc(#loc169)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc161)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc267)
  ^bb8:  // pred: ^bb7
    %9 = cir.const #cir.int<7> : !s32i loc(#loc172)
    cir.br ^bb9 loc(#loc170)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %9 : !s32i, ^bb14 [
      7: ^bb11
    ] loc(#loc170)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc173)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc268)
  ^bb12:  // pred: ^bb11
    %10 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc176)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc155)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc155)
    %13 = cir.binop(add, %10, %12) : !u32i loc(#loc269)
    cir.store %13, %0 : !u32i, !cir.ptr<!u32i> loc(#loc262)
    %14 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc177)
    cir.call @printUnsignedLine(%14) : (!u32i) -> () loc(#loc178)
    cir.br ^bb13 loc(#loc175)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc179)
  ^bb14:  // pred: ^bb9
    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc180)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc180)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc181)
    cir.br ^bb15 loc(#loc182)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc171)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc153)
  } loc(#loc261)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc271)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc272)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc189)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc189)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc273)
    cir.br ^bb1 loc(#loc274)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<6> : !s32i loc(#loc193)
    cir.br ^bb2 loc(#loc191)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %4 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc191)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc194)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = cir.const #cir.int<2> : !s32i loc(#loc195)
    %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc195)
    cir.store %6, %1 : !u32i, !cir.ptr<!u32i> loc(#loc275)
    cir.br ^bb6 loc(#loc197)
  ^bb5:  // pred: ^bb2
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc198)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc198)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc199)
    cir.br ^bb6 loc(#loc200)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc192)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc276)
  ^bb8:  // pred: ^bb7
    %9 = cir.const #cir.int<7> : !s32i loc(#loc203)
    cir.br ^bb9 loc(#loc201)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %9 : !s32i, ^bb14 [
      7: ^bb11
    ] loc(#loc201)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc204)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc277)
  ^bb12:  // pred: ^bb11
    %10 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc207)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc186)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc186)
    %13 = cir.binop(add, %10, %12) : !u32i loc(#loc278)
    cir.store %13, %0 : !u32i, !cir.ptr<!u32i> loc(#loc271)
    %14 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc208)
    cir.call @printUnsignedLine(%14) : (!u32i) -> () loc(#loc209)
    cir.br ^bb13 loc(#loc206)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc210)
  ^bb14:  // pred: ^bb9
    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc211)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc211)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc212)
    cir.br ^bb15 loc(#loc213)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc202)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc184)
  } loc(#loc270)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":34:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":22:1)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":51:1)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":42:9)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":42:38)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":24:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":24:18)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":25:12)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":25:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":26:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":36:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":26:12)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":28:5)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":30:9)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":31:9)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":34:9)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":35:9)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":37:5)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":50:5)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":37:12)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":39:5)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":40:5)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":44:5)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":42:31)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":43:27)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":43:9)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":45:5)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":48:19)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":48:9)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":49:9)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":195:1)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":201:1)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":197:5)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":197:14)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":198:5)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":198:14)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":199:5)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":199:14)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":200:5)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":200:14)
#loc48 = loc("/usr/include/stdlib.h":575:1)
#loc49 = loc("/usr/include/stdlib.h":575:41)
#loc50 = loc("/usr/include/time.h":76:1)
#loc51 = loc("/usr/include/time.h":76:38)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":217:15)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":219:15)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":222:15)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":224:15)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":212:1)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":227:1)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":213:1)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":215:27)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":215:22)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":215:5)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":217:5)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":218:5)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":218:60)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":219:5)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":222:5)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":223:5)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":223:59)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":224:5)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":226:12)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":226:5)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":88:23)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":58:1)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":92:1)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":83:13)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":83:42)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":60:5)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":60:18)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":61:12)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":61:5)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":62:5)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":72:5)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":62:12)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":64:5)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":66:9)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":67:9)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":70:19)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":70:9)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":71:9)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":73:5)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":91:5)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":73:12)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":75:5)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":77:19)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":77:9)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":78:9)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":81:9)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":89:9)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":81:13)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":81:20)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":82:9)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":85:9)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":87:9)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":83:35)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":84:31)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":84:13)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":88:13)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":90:9)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":95:1)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":129:1)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":116:13)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":116:42)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":97:5)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":97:18)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":98:12)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":98:5)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":99:5)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":109:5)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":99:12)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":101:5)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":103:9)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":104:9)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":107:19)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":107:9)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":108:9)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":110:5)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":128:5)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":110:12)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":112:5)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":114:9)
#loc137 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":122:9)
#loc138 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":114:13)
#loc139 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":114:20)
#loc140 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":115:9)
#loc141 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":118:9)
#loc142 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":120:9)
#loc143 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":116:35)
#loc144 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":117:31)
#loc145 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":117:13)
#loc146 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":121:23)
#loc147 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":121:13)
#loc148 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":123:9)
#loc149 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":126:19)
#loc150 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":126:9)
#loc151 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":127:9)
#loc152 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":132:1)
#loc153 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":161:1)
#loc154 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":152:9)
#loc155 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":152:38)
#loc156 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":134:5)
#loc157 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":134:18)
#loc158 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":135:12)
#loc159 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":135:5)
#loc160 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":136:5)
#loc161 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":146:5)
#loc162 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":136:12)
#loc163 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":138:5)
#loc164 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":140:19)
#loc165 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":140:9)
#loc166 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":141:9)
#loc167 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":144:16)
#loc168 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":144:9)
#loc169 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":145:9)
#loc170 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":147:5)
#loc171 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":160:5)
#loc172 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":147:12)
#loc173 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":149:5)
#loc174 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":150:5)
#loc175 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":154:5)
#loc176 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":152:31)
#loc177 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":153:27)
#loc178 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":153:9)
#loc179 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":155:5)
#loc180 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":158:19)
#loc181 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":158:9)
#loc182 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":159:9)
#loc183 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":164:1)
#loc184 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":193:1)
#loc185 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":184:9)
#loc186 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":184:38)
#loc187 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":166:5)
#loc188 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":166:18)
#loc189 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":167:12)
#loc190 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":167:5)
#loc191 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":168:5)
#loc192 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":178:5)
#loc193 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":168:12)
#loc194 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":170:5)
#loc195 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":172:16)
#loc196 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":172:9)
#loc197 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":173:9)
#loc198 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":176:19)
#loc199 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":176:9)
#loc200 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":177:9)
#loc201 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":179:5)
#loc202 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":192:5)
#loc203 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":179:12)
#loc204 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":181:5)
#loc205 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":182:5)
#loc206 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":186:5)
#loc207 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":184:31)
#loc208 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":185:27)
#loc209 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":185:9)
#loc210 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":187:5)
#loc211 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":190:19)
#loc212 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":190:9)
#loc213 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":191:9)
#loc214 = loc(fused[#loc1, #loc2])
#loc215 = loc(fused[#loc3, #loc4])
#loc216 = loc(fused[#loc6, #loc7])
#loc217 = loc(fused[#loc8, #loc9])
#loc218 = loc(fused[#loc10, #loc11])
#loc219 = loc(fused[#loc12, #loc13])
#loc220 = loc(fused[#loc15, #loc14])
#loc221 = loc(fused[#loc16, #loc17])
#loc222 = loc(fused[#loc21, #loc20])
#loc223 = loc(fused[#loc25, #loc26])
#loc224 = loc(fused[#loc29, #loc30])
#loc225 = loc(fused[#loc31, #loc11])
#loc226 = loc(fused[#loc38, #loc39])
#loc227 = loc(fused[#loc40, #loc41])
#loc228 = loc(fused[#loc42, #loc43])
#loc229 = loc(fused[#loc44, #loc45])
#loc230 = loc(fused[#loc46, #loc47])
#loc231 = loc(fused[#loc48, #loc49])
#loc232 = loc(fused[#loc50, #loc51])
#loc233 = loc(fused[#loc56, #loc57])
#loc236 = loc(fused[#loc67, #loc68])
#loc237 = loc(fused[#loc71, #loc72])
#loc238 = loc(fused[#loc75, #loc74])
#loc239 = loc(fused[#loc77, #loc78])
#loc240 = loc(fused[#loc79, #loc80])
#loc241 = loc(fused[#loc81, #loc82])
#loc242 = loc(fused[#loc84, #loc83])
#loc243 = loc(fused[#loc85, #loc86])
#loc244 = loc(fused[#loc90, #loc89])
#loc245 = loc(fused[#loc95, #loc96])
#loc246 = loc(fused[#loc102, #loc103])
#loc247 = loc(fused[#loc104, #loc105])
#loc248 = loc(fused[#loc106, #loc107, #loc108, #loc103])
#loc249 = loc(fused[#loc109, #loc80])
#loc250 = loc(fused[#loc114, #loc115])
#loc251 = loc(fused[#loc116, #loc117])
#loc252 = loc(fused[#loc118, #loc119])
#loc253 = loc(fused[#loc121, #loc120])
#loc254 = loc(fused[#loc122, #loc123])
#loc255 = loc(fused[#loc127, #loc126])
#loc256 = loc(fused[#loc132, #loc133])
#loc257 = loc(fused[#loc136, #loc137])
#loc258 = loc(fused[#loc138, #loc139])
#loc259 = loc(fused[#loc140, #loc141, #loc142, #loc137])
#loc260 = loc(fused[#loc143, #loc117])
#loc261 = loc(fused[#loc152, #loc153])
#loc262 = loc(fused[#loc154, #loc155])
#loc263 = loc(fused[#loc156, #loc157])
#loc264 = loc(fused[#loc159, #loc158])
#loc265 = loc(fused[#loc160, #loc161])
#loc266 = loc(fused[#loc168, #loc167])
#loc267 = loc(fused[#loc170, #loc171])
#loc268 = loc(fused[#loc174, #loc175])
#loc269 = loc(fused[#loc176, #loc155])
#loc270 = loc(fused[#loc183, #loc184])
#loc271 = loc(fused[#loc185, #loc186])
#loc272 = loc(fused[#loc187, #loc188])
#loc273 = loc(fused[#loc190, #loc189])
#loc274 = loc(fused[#loc191, #loc192])
#loc275 = loc(fused[#loc196, #loc195])
#loc276 = loc(fused[#loc201, #loc202])
#loc277 = loc(fused[#loc205, #loc206])
#loc278 = loc(fused[#loc207, #loc186])
