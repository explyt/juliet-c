!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc5 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc118 = loc("../../../testcasesupport/std_testcase.h":68:7)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":134:10)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":134:14)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":134:20)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":134:32)
!ty_OneIntClass = !cir.struct<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
#loc280 = loc(fused[#loc187, #loc188])
#loc281 = loc(fused[#loc189, #loc190])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc203)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc204)
  cir.func linkonce_odr @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc5)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc5)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc5)
    cir.return loc(#loc5)
  } loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc205)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc206)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_333badEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc208)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc209)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc210)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc211)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc15)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc20)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc212)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc213)
    cir.store %7, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc210)
    cir.scope {
      %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc26)
      %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc215)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc28)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc30)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
      } loc(#loc216)
    } loc(#loc214)
    %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc31)
    %9 = cir.const #cir.int<8> : !u64i loc(#loc217)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc31)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc218)
    cir.store %11, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc211)
    cir.scope {
      %13 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc37)
      %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc220)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc39)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc40)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc41)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc39)
      } loc(#loc221)
    } loc(#loc219)
    %12 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc42)
    cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc222)
    cir.scope {
      %13 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc224)
      %14 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc47)
      %15 = cir.load %14 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
      cir.store %15, %13 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc224)
      cir.scope {
        %16 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc226)
        %17 = cir.const #cir.int<8> : !u64i loc(#loc227)
        %18 = cir.load %13 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc53)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc227)
        cir.call @_ZN12TwoIntsClassC2Ev(%20) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc51)
        cir.store %20, %16 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc226)
        %21 = cir.const #cir.int<5> : !s32i loc(#loc54)
        %22 = cir.load %16 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc55)
        %23 = cir.get_member %22[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc56)
        cir.store %21, %23 : !s32i, !cir.ptr<!s32i> loc(#loc228)
        %24 = cir.const #cir.int<10> : !s32i loc(#loc57)
        %25 = cir.load %16 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc58)
        %26 = cir.get_member %25[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc59)
        cir.store %24, %26 : !s32i, !cir.ptr<!s32i> loc(#loc229)
        %27 = cir.load %16 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc60)
        %28 = cir.get_member %27[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc56)
        %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc61)
        cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc62)
        %30 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc63)
        %31 = cir.load %13 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
        %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc64)
        cir.call @free(%32) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc63)
      } loc(#loc225)
    } loc(#loc223)
    cir.return loc(#loc11)
  } loc(#loc207)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_33L7goodG2BEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc231)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc232)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc233)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc234)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc70)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc75)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc235)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc75)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc236)
    cir.store %7, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc233)
    cir.scope {
      %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc80)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc81)
      %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc238)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc83)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc84)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc85)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc83)
      } loc(#loc239)
    } loc(#loc237)
    %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc86)
    %9 = cir.const #cir.int<8> : !u64i loc(#loc240)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc86)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc241)
    cir.store %11, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc234)
    cir.scope {
      %13 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc91)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc92)
      %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc243)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc94)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc95)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc96)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc94)
      } loc(#loc244)
    } loc(#loc242)
    %12 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc97)
    cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc245)
    cir.scope {
      %13 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc247)
      %14 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc102)
      %15 = cir.load %14 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc102)
      cir.store %15, %13 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc247)
      cir.scope {
        %16 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc249)
        %17 = cir.const #cir.int<8> : !u64i loc(#loc250)
        %18 = cir.load %13 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc108)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc108)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc250)
        cir.call @_ZN12TwoIntsClassC2Ev(%20) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc106)
        cir.store %20, %16 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc249)
        %21 = cir.const #cir.int<5> : !s32i loc(#loc109)
        %22 = cir.load %16 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc110)
        %23 = cir.get_member %22[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc56)
        cir.store %21, %23 : !s32i, !cir.ptr<!s32i> loc(#loc251)
        %24 = cir.const #cir.int<10> : !s32i loc(#loc111)
        %25 = cir.load %16 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc112)
        %26 = cir.get_member %25[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc59)
        cir.store %24, %26 : !s32i, !cir.ptr<!s32i> loc(#loc252)
        %27 = cir.load %16 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc113)
        %28 = cir.get_member %27[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc56)
        %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc114)
        cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc115)
        %30 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc116)
        %31 = cir.load %13 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc117)
        %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc117)
        cir.call @free(%32) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc116)
      } loc(#loc248)
    } loc(#loc246)
    cir.return loc(#loc66)
  } loc(#loc230)
  cir.func linkonce_odr @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc118)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc118)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc118)
    cir.return loc(#loc118)
  } loc(#loc118)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_33L7goodB2GEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc254)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc255)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc256)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc257)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc124)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc129)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc258)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc129)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc259)
    cir.store %7, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc256)
    cir.scope {
      %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc135)
      %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc261)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc137)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc138)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc139)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc137)
      } loc(#loc262)
    } loc(#loc260)
    %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc140)
    %9 = cir.const #cir.int<8> : !u64i loc(#loc263)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc140)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc264)
    cir.store %11, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc257)
    cir.scope {
      %13 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc146)
      %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc266)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc148)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc149)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc150)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc148)
      } loc(#loc267)
    } loc(#loc265)
    %12 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
    cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc268)
    cir.scope {
      %13 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc270)
      %14 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc156)
      %15 = cir.load %14 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc156)
      cir.store %15, %13 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc270)
      cir.scope {
        %16 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc272)
        %17 = cir.const #cir.int<4> : !u64i loc(#loc273)
        %18 = cir.load %13 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc162)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc162)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc273)
        cir.call @_ZN11OneIntClassC2Ev(%20) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc160)
        cir.store %20, %16 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc272)
        %21 = cir.const #cir.int<5> : !s32i loc(#loc163)
        %22 = cir.load %16 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc164)
        %23 = cir.get_member %22[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc165)
        cir.store %21, %23 : !s32i, !cir.ptr<!s32i> loc(#loc274)
        %24 = cir.load %16 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc166)
        %25 = cir.get_member %24[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc165)
        %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc167)
        cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc168)
        %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc169)
        %28 = cir.load %13 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc170)
        %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc170)
        cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc169)
      } loc(#loc271)
    } loc(#loc269)
    cir.return loc(#loc120)
  } loc(#loc253)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_334goodEv() extra(#fn_attr2) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_33L7goodG2BEv() : () -> () loc(#loc173)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_33L7goodB2GEv() : () -> () loc(#loc174)
    cir.return loc(#loc172)
  } loc(#loc275)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc276)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc277)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc278)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc181)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc182)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc183)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc184)
  cir.func @main(%arg0: !s32i loc(fused[#loc187, #loc188]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc189, #loc190])) -> !s32i extra(#fn_attr2) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc280)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc281)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc186)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc191)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc192)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc193)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc193)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc194)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc181)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc181)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc195)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_334goodEv() : () -> () loc(#loc196)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc182)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc182)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc197)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc183)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc183)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc198)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_333badEv() : () -> () loc(#loc199)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc184)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc184)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc200)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc201)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc282)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc282)
    cir.return %15 : !s32i loc(#loc282)
  } loc(#loc279)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("/usr/include/stdlib.h":687:1)
#loc9 = loc("/usr/include/stdlib.h":687:32)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":25:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":52:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":27:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":27:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":28:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":28:23)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":29:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":29:62)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":31:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":31:64)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":29:36)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":29:43)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":29:61)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":30:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":30:42)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":30:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":30:26)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":30:32)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":30:33)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":30:39)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":30:38)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":31:37)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":31:44)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":31:63)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":32:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":32:43)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":32:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":32:27)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":32:33)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":32:34)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":32:40)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":32:39)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":34:12)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":34:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":35:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":51:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":36:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":36:23)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":37:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":50:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":43:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":43:49)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":43:39)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":43:43)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":45:32)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":45:13)
#loc56 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":46:32)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":46:13)
#loc59 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":47:26)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":47:36)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":47:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":49:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":49:18)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":59:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":86:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":61:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":61:12)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":62:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":62:23)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":63:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":63:62)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":65:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":65:64)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":63:36)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":63:43)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":63:61)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":64:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":64:42)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":64:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":64:26)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":64:32)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":64:33)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":64:39)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":64:38)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":65:37)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":65:44)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":65:63)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":66:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":66:43)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":66:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":66:27)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":66:33)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":66:34)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":66:40)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":66:39)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":68:12)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":68:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":69:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":85:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":70:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":70:23)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":71:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":84:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":77:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":77:49)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":77:39)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":77:43)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":79:32)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":79:13)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":80:32)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":80:13)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":81:26)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":81:36)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":81:13)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":83:13)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":83:18)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":89:1)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":114:1)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":91:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":91:12)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":92:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":92:23)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":93:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":93:62)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":95:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":95:64)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":93:36)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":93:43)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":93:61)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":94:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":94:42)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":94:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":94:26)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":94:32)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":94:33)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":94:39)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":94:38)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":95:37)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":95:44)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":95:63)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":96:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":96:43)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":96:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":96:27)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":96:33)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":96:34)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":96:40)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":96:39)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":98:12)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":98:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":99:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":113:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":100:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":100:23)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":101:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":112:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":107:13)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":107:48)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":107:38)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":107:42)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":109:32)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":109:13)
#loc165 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":110:26)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":110:36)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":110:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":111:13)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":111:18)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":116:1)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":120:1)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":118:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":119:5)
#loc175 = loc("/usr/include/stdlib.h":575:1)
#loc176 = loc("/usr/include/stdlib.h":575:41)
#loc177 = loc("/usr/include/time.h":76:1)
#loc178 = loc("/usr/include/time.h":76:38)
#loc179 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc180 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":139:15)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":141:15)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":144:15)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":146:15)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":134:1)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":149:1)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":135:1)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":137:27)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":137:22)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":137:5)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":139:5)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":140:5)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":141:5)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":144:5)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":145:5)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":146:5)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":148:12)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_33.cpp":148:5)
#loc203 = loc(fused[#loc1, #loc2])
#loc204 = loc(fused[#loc3, #loc4])
#loc205 = loc(fused[#loc6, #loc7])
#loc206 = loc(fused[#loc8, #loc9])
#loc207 = loc(fused[#loc10, #loc11])
#loc208 = loc(fused[#loc12, #loc13])
#loc209 = loc(fused[#loc14, #loc15])
#loc210 = loc(fused[#loc16, #loc17])
#loc211 = loc(fused[#loc18, #loc19])
#loc212 = loc(fused[#loc21, #loc22])
#loc213 = loc(fused[#loc20, #loc17])
#loc214 = loc(fused[#loc23, #loc24])
#loc215 = loc(fused[#loc25, #loc26])
#loc216 = loc(fused[#loc27, #loc24])
#loc217 = loc(fused[#loc32, #loc33])
#loc218 = loc(fused[#loc31, #loc19])
#loc219 = loc(fused[#loc34, #loc35])
#loc220 = loc(fused[#loc36, #loc37])
#loc221 = loc(fused[#loc38, #loc35])
#loc222 = loc(fused[#loc43, #loc42])
#loc223 = loc(fused[#loc44, #loc45])
#loc224 = loc(fused[#loc46, #loc47])
#loc225 = loc(fused[#loc48, #loc49])
#loc226 = loc(fused[#loc50, #loc51])
#loc227 = loc(fused[#loc52, #loc51])
#loc228 = loc(fused[#loc55, #loc54])
#loc229 = loc(fused[#loc58, #loc57])
#loc230 = loc(fused[#loc65, #loc66])
#loc231 = loc(fused[#loc67, #loc68])
#loc232 = loc(fused[#loc69, #loc70])
#loc233 = loc(fused[#loc71, #loc72])
#loc234 = loc(fused[#loc73, #loc74])
#loc235 = loc(fused[#loc76, #loc77])
#loc236 = loc(fused[#loc75, #loc72])
#loc237 = loc(fused[#loc78, #loc79])
#loc238 = loc(fused[#loc80, #loc81])
#loc239 = loc(fused[#loc82, #loc79])
#loc240 = loc(fused[#loc87, #loc88])
#loc241 = loc(fused[#loc86, #loc74])
#loc242 = loc(fused[#loc89, #loc90])
#loc243 = loc(fused[#loc91, #loc92])
#loc244 = loc(fused[#loc93, #loc90])
#loc245 = loc(fused[#loc98, #loc97])
#loc246 = loc(fused[#loc99, #loc100])
#loc247 = loc(fused[#loc101, #loc102])
#loc248 = loc(fused[#loc103, #loc104])
#loc249 = loc(fused[#loc105, #loc106])
#loc250 = loc(fused[#loc107, #loc106])
#loc251 = loc(fused[#loc110, #loc109])
#loc252 = loc(fused[#loc112, #loc111])
#loc253 = loc(fused[#loc119, #loc120])
#loc254 = loc(fused[#loc121, #loc122])
#loc255 = loc(fused[#loc123, #loc124])
#loc256 = loc(fused[#loc125, #loc126])
#loc257 = loc(fused[#loc127, #loc128])
#loc258 = loc(fused[#loc130, #loc131])
#loc259 = loc(fused[#loc129, #loc126])
#loc260 = loc(fused[#loc132, #loc133])
#loc261 = loc(fused[#loc134, #loc135])
#loc262 = loc(fused[#loc136, #loc133])
#loc263 = loc(fused[#loc141, #loc142])
#loc264 = loc(fused[#loc140, #loc128])
#loc265 = loc(fused[#loc143, #loc144])
#loc266 = loc(fused[#loc145, #loc146])
#loc267 = loc(fused[#loc147, #loc144])
#loc268 = loc(fused[#loc152, #loc151])
#loc269 = loc(fused[#loc153, #loc154])
#loc270 = loc(fused[#loc155, #loc156])
#loc271 = loc(fused[#loc157, #loc158])
#loc272 = loc(fused[#loc159, #loc160])
#loc273 = loc(fused[#loc161, #loc160])
#loc274 = loc(fused[#loc164, #loc163])
#loc275 = loc(fused[#loc171, #loc172])
#loc276 = loc(fused[#loc175, #loc176])
#loc277 = loc(fused[#loc177, #loc178])
#loc278 = loc(fused[#loc179, #loc180])
#loc279 = loc(fused[#loc185, #loc186])
#loc282 = loc(fused[#loc202, #loc201])
