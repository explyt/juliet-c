!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc182)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc183)
  cir.func private @strncat(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc184)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc185)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc186)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc188)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc189)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc17)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc190)
    cir.br ^bb1 loc(#loc191)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc192)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc21)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc193)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc24)
    %7 = cir.const #cir.int<50> : !s32i loc(#loc25)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc25)
    %9 = cir.const #cir.int<1> : !u64i loc(#loc194)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc195)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc196)
    cir.store %12, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc197)
    cir.br ^bb3 loc(#loc198)
  ^bb3:  // pred: ^bb2
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc33)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc199)
    cir.brcond %16 ^bb4, ^bb5 loc(#loc200)
  ^bb4:  // pred: ^bb3
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc35)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc37)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc35)
    cir.br ^bb5 loc(#loc31)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc31)
  ^bb6:  // pred: ^bb5
    %20 = cir.const #cir.int<0> : !s32i loc(#loc38)
    %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc38)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc40)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc41)
    cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc201)
    cir.br ^bb7 loc(#loc20)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc20)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc202)
  ^bb9:  // pred: ^bb8
    %25 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc44)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc44)
    %27 = cir.const #cir.int<67> : !s32i loc(#loc45)
    %28 = cir.const #cir.int<100> : !s32i loc(#loc46)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc46)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc46)
    cir.libc.memset %31 bytes from %26 set to %27 : !cir.ptr<!void>, !s32i, !u64i loc(#loc203)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc50)
    %33 = cir.cast(integral, %32 : !s32i), !s8i loc(#loc50)
    %34 = cir.const #cir.int<100> : !s32i loc(#loc51)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %36 = cir.binop(sub, %34, %35) nsw : !s32i loc(#loc51)
    %37 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc53)
    %38 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %36 : !s32i), !cir.ptr<!s8i> loc(#loc53)
    cir.store %33, %38 : !s8i, !cir.ptr<!s8i> loc(#loc204)
    %39 = cir.get_global @strncat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc54)
    %40 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
    %41 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc56)
    %42 = cir.const #cir.int<100> : !s32i loc(#loc57)
    %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc57)
    %44 = cir.call @strncat(%40, %41, %43) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc54)
    %45 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %46 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc60)
    %47 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
    %48 = cir.cast(bitcast, %47 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc61)
    cir.call @free(%48) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc60)
    cir.br ^bb10 loc(#loc43)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc12)
  } loc(#loc187)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc206)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc64)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc66)
    cir.return loc(#loc63)
  } loc(#loc205)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc69)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc70)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc209)
    cir.return %2 : !s32i loc(#loc209)
  } loc(#loc208)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc72)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc211)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc212)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc79)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc213)
    cir.br ^bb1 loc(#loc214)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc215)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc83)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc83)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc216)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc72)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    cir.br ^bb8 loc(#loc86)
  ^bb3:  // pred: ^bb1
    %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc89)
    %9 = cir.const #cir.int<100> : !s32i loc(#loc90)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc90)
    %11 = cir.const #cir.int<1> : !u64i loc(#loc217)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc218)
    %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc89)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc219)
    cir.store %14, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc220)
    cir.br ^bb4 loc(#loc221)
  ^bb4:  // pred: ^bb3
    %15 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc97)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc98)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc98)
    %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc222)
    cir.brcond %18 ^bb5, ^bb6 loc(#loc223)
  ^bb5:  // pred: ^bb4
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc100)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc101)
    %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc102)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc100)
    cir.br ^bb6 loc(#loc96)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc96)
  ^bb7:  // pred: ^bb6
    %22 = cir.const #cir.int<0> : !s32i loc(#loc103)
    %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc103)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc104)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc105)
    %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc106)
    cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc224)
    cir.br ^bb8 loc(#loc82)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc82)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc225)
  ^bb10:  // pred: ^bb9
    %27 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc109)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc109)
    %29 = cir.const #cir.int<67> : !s32i loc(#loc110)
    %30 = cir.const #cir.int<100> : !s32i loc(#loc111)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc112)
    %32 = cir.binop(sub, %30, %31) nsw : !s32i loc(#loc111)
    %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc111)
    cir.libc.memset %33 bytes from %28 set to %29 : !cir.ptr<!void>, !s32i, !u64i loc(#loc226)
    %34 = cir.const #cir.int<0> : !s32i loc(#loc115)
    %35 = cir.cast(integral, %34 : !s32i), !s8i loc(#loc115)
    %36 = cir.const #cir.int<100> : !s32i loc(#loc116)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %38 = cir.binop(sub, %36, %37) nsw : !s32i loc(#loc116)
    %39 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc118)
    %40 = cir.ptr_stride(%39 : !cir.ptr<!s8i>, %38 : !s32i), !cir.ptr<!s8i> loc(#loc118)
    cir.store %35, %40 : !s8i, !cir.ptr<!s8i> loc(#loc227)
    %41 = cir.get_global @strncat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc119)
    %42 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc120)
    %43 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc121)
    %44 = cir.const #cir.int<100> : !s32i loc(#loc122)
    %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc122)
    %46 = cir.call @strncat(%42, %43, %45) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc119)
    %47 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
    cir.call @printLine(%47) : (!cir.ptr<!s8i>) -> () loc(#loc124)
    %48 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc125)
    %49 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
    %50 = cir.cast(bitcast, %49 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc126)
    cir.call @free(%50) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc125)
    cir.br ^bb11 loc(#loc108)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc74)
  } loc(#loc210)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc128)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc129)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc229)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc229)
    cir.return %2 : !s32i loc(#loc229)
  } loc(#loc228)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc231)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc232)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc137)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc233)
    cir.br ^bb1 loc(#loc234)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc235)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc141)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc141)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc236)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc144)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc145)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc145)
    %9 = cir.const #cir.int<1> : !u64i loc(#loc237)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc238)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc144)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc239)
    cir.store %12, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc240)
    cir.br ^bb3 loc(#loc241)
  ^bb3:  // pred: ^bb2
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc152)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc153)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc153)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc242)
    cir.brcond %16 ^bb4, ^bb5 loc(#loc243)
  ^bb4:  // pred: ^bb3
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc155)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc156)
    %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc157)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc155)
    cir.br ^bb5 loc(#loc151)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc151)
  ^bb6:  // pred: ^bb5
    %20 = cir.const #cir.int<0> : !s32i loc(#loc158)
    %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc158)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc160)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc161)
    cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc244)
    cir.br ^bb7 loc(#loc140)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc140)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc245)
  ^bb9:  // pred: ^bb8
    %25 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc164)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc164)
    %27 = cir.const #cir.int<67> : !s32i loc(#loc165)
    %28 = cir.const #cir.int<100> : !s32i loc(#loc166)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc167)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc166)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc166)
    cir.libc.memset %31 bytes from %26 set to %27 : !cir.ptr<!void>, !s32i, !u64i loc(#loc246)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc170)
    %33 = cir.cast(integral, %32 : !s32i), !s8i loc(#loc170)
    %34 = cir.const #cir.int<100> : !s32i loc(#loc171)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc172)
    %36 = cir.binop(sub, %34, %35) nsw : !s32i loc(#loc171)
    %37 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc173)
    %38 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %36 : !s32i), !cir.ptr<!s8i> loc(#loc173)
    cir.store %33, %38 : !s8i, !cir.ptr<!s8i> loc(#loc247)
    %39 = cir.get_global @strncat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc174)
    %40 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc175)
    %41 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc176)
    %42 = cir.const #cir.int<100> : !s32i loc(#loc177)
    %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc177)
    %44 = cir.call @strncat(%40, %41, %43) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc174)
    %45 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc178)
    cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc179)
    %46 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc180)
    %47 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc181)
    %48 = cir.cast(bitcast, %47 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc181)
    cir.call @free(%48) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc180)
    cir.br ^bb10 loc(#loc163)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc132)
  } loc(#loc230)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":152:1)
#loc6 = loc("/usr/include/string.h":153:29)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":37:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":57:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":49:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":49:24)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":39:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":39:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":40:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":40:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":41:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":47:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":41:8)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":41:26)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":42:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":44:24)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":44:31)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":44:34)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":44:45)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":44:46)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":44:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":45:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":45:37)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":45:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":45:21)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":45:27)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":45:28)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":45:34)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":45:33)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":46:19)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":46:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":46:14)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":46:15)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":48:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":56:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":50:16)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":50:24)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":50:29)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":50:33)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":50:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":50:34)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":51:25)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":51:16)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":51:20)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":51:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":53:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":53:17)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":53:23)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":53:31)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":54:19)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":54:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":55:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":55:14)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":114:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":118:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":116:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":116:14)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":117:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":117:14)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":25:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":28:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":27:12)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":27:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":71:19)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":64:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":89:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":81:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":81:24)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":66:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":66:12)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":67:12)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":67:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":68:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":79:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":68:8)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":68:27)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":69:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":72:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":74:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":71:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":76:24)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":76:31)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":76:35)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":76:46)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":76:47)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":76:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":77:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":77:37)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":77:13)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":77:21)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":77:27)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":77:28)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":77:34)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":77:33)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":78:19)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":78:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":78:14)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":78:15)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":80:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":88:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":82:16)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":82:24)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":82:29)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":82:33)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":82:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":82:34)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":83:25)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":83:16)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":83:20)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":83:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":85:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":85:17)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":85:23)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":85:31)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":86:19)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":86:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":87:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":87:14)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":30:1)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":33:1)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":32:12)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":32:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":92:1)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":112:1)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":104:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":104:24)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":94:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":94:12)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":95:12)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":95:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":96:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":102:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":96:8)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":96:26)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":97:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":99:24)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":99:31)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":99:35)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":99:46)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":99:47)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":99:9)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":100:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":100:37)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":100:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":100:21)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":100:27)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":100:28)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":100:34)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":100:33)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":101:19)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":101:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":101:14)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":101:15)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":103:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":111:5)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":105:16)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":105:24)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":105:29)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":105:33)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":105:9)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":105:34)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":106:25)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":106:16)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":106:20)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":106:9)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":108:9)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":108:17)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":108:23)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":108:31)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":109:19)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":109:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":110:9)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c":110:14)
#loc182 = loc(fused[#loc1, #loc2])
#loc183 = loc(fused[#loc3, #loc4])
#loc184 = loc(fused[#loc5, #loc6])
#loc185 = loc(fused[#loc7, #loc8])
#loc186 = loc(fused[#loc9, #loc10])
#loc187 = loc(fused[#loc11, #loc12])
#loc188 = loc(fused[#loc13, #loc14])
#loc189 = loc(fused[#loc15, #loc16])
#loc190 = loc(fused[#loc18, #loc17])
#loc191 = loc(fused[#loc19, #loc20])
#loc192 = loc(fused[#loc21, #loc22])
#loc193 = loc(fused[#loc23, #loc20])
#loc194 = loc(fused[#loc26, #loc27])
#loc195 = loc(fused[#loc25, #loc27])
#loc196 = loc(fused[#loc24, #loc28])
#loc197 = loc(fused[#loc29, #loc28])
#loc198 = loc(fused[#loc30, #loc31])
#loc199 = loc(fused[#loc32, #loc33])
#loc200 = loc(fused[#loc34, #loc31])
#loc201 = loc(fused[#loc39, #loc38])
#loc202 = loc(fused[#loc42, #loc43])
#loc203 = loc(fused[#loc48, #loc49])
#loc204 = loc(fused[#loc53, #loc50])
#loc205 = loc(fused[#loc62, #loc63])
#loc206 = loc(fused[#loc64, #loc65])
#loc207 = loc(fused[#loc66, #loc67])
#loc208 = loc(fused[#loc68, #loc69])
#loc209 = loc(fused[#loc71, #loc70])
#loc210 = loc(fused[#loc73, #loc74])
#loc211 = loc(fused[#loc75, #loc76])
#loc212 = loc(fused[#loc77, #loc78])
#loc213 = loc(fused[#loc80, #loc79])
#loc214 = loc(fused[#loc81, #loc82])
#loc215 = loc(fused[#loc83, #loc84])
#loc216 = loc(fused[#loc85, #loc86, #loc87, #loc82])
#loc217 = loc(fused[#loc91, #loc92])
#loc218 = loc(fused[#loc90, #loc92])
#loc219 = loc(fused[#loc89, #loc93])
#loc220 = loc(fused[#loc94, #loc93])
#loc221 = loc(fused[#loc95, #loc96])
#loc222 = loc(fused[#loc97, #loc98])
#loc223 = loc(fused[#loc99, #loc96])
#loc224 = loc(fused[#loc104, #loc103])
#loc225 = loc(fused[#loc107, #loc108])
#loc226 = loc(fused[#loc113, #loc114])
#loc227 = loc(fused[#loc118, #loc115])
#loc228 = loc(fused[#loc127, #loc128])
#loc229 = loc(fused[#loc130, #loc129])
#loc230 = loc(fused[#loc131, #loc132])
#loc231 = loc(fused[#loc133, #loc134])
#loc232 = loc(fused[#loc135, #loc136])
#loc233 = loc(fused[#loc138, #loc137])
#loc234 = loc(fused[#loc139, #loc140])
#loc235 = loc(fused[#loc141, #loc142])
#loc236 = loc(fused[#loc143, #loc140])
#loc237 = loc(fused[#loc146, #loc147])
#loc238 = loc(fused[#loc145, #loc147])
#loc239 = loc(fused[#loc144, #loc148])
#loc240 = loc(fused[#loc149, #loc148])
#loc241 = loc(fused[#loc150, #loc151])
#loc242 = loc(fused[#loc152, #loc153])
#loc243 = loc(fused[#loc154, #loc151])
#loc244 = loc(fused[#loc159, #loc158])
#loc245 = loc(fused[#loc162, #loc163])
#loc246 = loc(fused[#loc168, #loc169])
#loc247 = loc(fused[#loc173, #loc170])
