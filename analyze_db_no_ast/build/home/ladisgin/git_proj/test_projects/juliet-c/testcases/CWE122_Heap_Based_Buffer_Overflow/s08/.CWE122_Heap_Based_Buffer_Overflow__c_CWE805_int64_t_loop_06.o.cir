!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc192)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc193)
  cir.func private  @printLongLongLine(!s64i) loc(#loc194)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc195)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc197)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc198)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc17)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc18)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc200)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
        %7 = cir.const #cir.int<50> : !s32i loc(#loc22)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc22)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc202)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc203)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc204)
        cir.store %12, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc205)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc29)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc30)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s64i>, !s32i loc(#loc207)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc31)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc33)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc34)
            %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc35)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
          } loc(#loc208)
        } loc(#loc206)
      } loc(#loc201)
    } loc(#loc199)
    cir.scope {
      %2 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc210)
      %3 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc210)
      cir.store %3, %2 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc210)
      cir.scope {
        %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc212)
        cir.scope {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc46)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc46)
          cir.store %13, %4 : !u64i, !cir.ptr<!u64i> loc(#loc214)
          cir.for : cond {
            %14 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc48)
            %15 = cir.const #cir.int<100> : !s32i loc(#loc49)
            %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc49)
            %17 = cir.cmp(lt, %14, %16) : !u64i, !s32i loc(#loc215)
            %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc50)
            cir.condition(%18) loc(#loc50)
          } body {
            cir.scope {
              %14 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc52)
              %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc53)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s64i>, %14 : !u64i), !cir.ptr<!s64i> loc(#loc53)
              %17 = cir.load %16 : !cir.ptr<!s64i>, !s64i loc(#loc53)
              %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc54)
              %19 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc55)
              %20 = cir.ptr_stride(%18 : !cir.ptr<!s64i>, %19 : !u64i), !cir.ptr<!s64i> loc(#loc56)
              cir.store %17, %20 : !s64i, !cir.ptr<!s64i> loc(#loc217)
            } loc(#loc216)
            cir.yield loc(#loc45)
          } step {
            %14 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc58)
            %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc59)
            cir.store %15, %4 : !u64i, !cir.ptr<!u64i> loc(#loc218)
            cir.yield loc(#loc213)
          } loc(#loc213)
        } loc(#loc213)
        %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc60)
        %6 = cir.const #cir.int<0> : !s32i loc(#loc61)
        %7 = cir.ptr_stride(%5 : !cir.ptr<!s64i>, %6 : !s32i), !cir.ptr<!s64i> loc(#loc62)
        %8 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc60)
        cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc63)
        %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc64)
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc65)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc65)
        cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc64)
      } loc(#loc211)
    } loc(#loc209)
    cir.return loc(#loc10)
  } loc(#loc196)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc68)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc221)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc70)
    cir.return loc(#loc67)
  } loc(#loc219)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc222)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc74)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc224)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc79)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc225)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc83)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc84)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !s32i loc(#loc227)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc85)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc74)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc74)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc89)
      } else {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc90)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc91)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc91)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc229)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc230)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc90)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc231)
        cir.store %12, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc232)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc98)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc99)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc99)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s64i>, !s32i loc(#loc234)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc100)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc102)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc103)
            %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc104)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc102)
          } loc(#loc235)
        } loc(#loc233)
      } loc(#loc228)
    } loc(#loc226)
    cir.scope {
      %2 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc237)
      %3 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc237)
      cir.store %3, %2 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc237)
      cir.scope {
        %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc239)
        cir.scope {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc115)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc115)
          cir.store %13, %4 : !u64i, !cir.ptr<!u64i> loc(#loc241)
          cir.for : cond {
            %14 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc117)
            %15 = cir.const #cir.int<100> : !s32i loc(#loc118)
            %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc118)
            %17 = cir.cmp(lt, %14, %16) : !u64i, !s32i loc(#loc242)
            %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc119)
            cir.condition(%18) loc(#loc119)
          } body {
            cir.scope {
              %14 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc121)
              %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc122)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s64i>, %14 : !u64i), !cir.ptr<!s64i> loc(#loc122)
              %17 = cir.load %16 : !cir.ptr<!s64i>, !s64i loc(#loc122)
              %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc123)
              %19 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc124)
              %20 = cir.ptr_stride(%18 : !cir.ptr<!s64i>, %19 : !u64i), !cir.ptr<!s64i> loc(#loc125)
              cir.store %17, %20 : !s64i, !cir.ptr<!s64i> loc(#loc244)
            } loc(#loc243)
            cir.yield loc(#loc114)
          } step {
            %14 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc127)
            %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc128)
            cir.store %15, %4 : !u64i, !cir.ptr<!u64i> loc(#loc245)
            cir.yield loc(#loc240)
          } loc(#loc240)
        } loc(#loc240)
        %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc129)
        %6 = cir.const #cir.int<0> : !s32i loc(#loc130)
        %7 = cir.ptr_stride(%5 : !cir.ptr<!s64i>, %6 : !s32i), !cir.ptr<!s64i> loc(#loc131)
        %8 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc129)
        cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc132)
        %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc133)
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc134)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc134)
        cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc133)
      } loc(#loc238)
    } loc(#loc236)
    cir.return loc(#loc76)
  } loc(#loc223)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc247)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc139)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc248)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc143)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc144)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc250)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc145)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc147)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc148)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc148)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc252)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc253)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc147)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc254)
        cir.store %12, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc255)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc155)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc156)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc156)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s64i>, !s32i loc(#loc257)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc157)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc159)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc160)
            %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc161)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc159)
          } loc(#loc258)
        } loc(#loc256)
      } loc(#loc251)
    } loc(#loc249)
    cir.scope {
      %2 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc260)
      %3 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc260)
      cir.store %3, %2 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc260)
      cir.scope {
        %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc262)
        cir.scope {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc172)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc172)
          cir.store %13, %4 : !u64i, !cir.ptr<!u64i> loc(#loc264)
          cir.for : cond {
            %14 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc174)
            %15 = cir.const #cir.int<100> : !s32i loc(#loc175)
            %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc175)
            %17 = cir.cmp(lt, %14, %16) : !u64i, !s32i loc(#loc265)
            %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc176)
            cir.condition(%18) loc(#loc176)
          } body {
            cir.scope {
              %14 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc178)
              %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc179)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s64i>, %14 : !u64i), !cir.ptr<!s64i> loc(#loc179)
              %17 = cir.load %16 : !cir.ptr<!s64i>, !s64i loc(#loc179)
              %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc180)
              %19 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc181)
              %20 = cir.ptr_stride(%18 : !cir.ptr<!s64i>, %19 : !u64i), !cir.ptr<!s64i> loc(#loc182)
              cir.store %17, %20 : !s64i, !cir.ptr<!s64i> loc(#loc267)
            } loc(#loc266)
            cir.yield loc(#loc171)
          } step {
            %14 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc184)
            %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc185)
            cir.store %15, %4 : !u64i, !cir.ptr<!u64i> loc(#loc268)
            cir.yield loc(#loc263)
          } loc(#loc263)
        } loc(#loc263)
        %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc186)
        %6 = cir.const #cir.int<0> : !s32i loc(#loc187)
        %7 = cir.ptr_stride(%5 : !cir.ptr<!s64i>, %6 : !s32i), !cir.ptr<!s64i> loc(#loc188)
        %8 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc186)
        cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc189)
        %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc190)
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc191)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc191)
        cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc190)
      } loc(#loc261)
    } loc(#loc259)
    cir.return loc(#loc136)
  } loc(#loc246)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":25:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":48:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":27:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":27:15)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":28:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":28:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":29:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":34:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":29:8)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":29:27)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":29:25)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":30:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":32:27)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":32:34)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":32:37)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":32:51)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":32:52)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":32:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":33:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":33:37)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":33:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":33:21)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":33:18)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":33:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":33:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":33:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":33:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":35:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":47:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":36:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":36:33)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":37:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":46:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":38:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":38:20)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":40:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":43:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":40:22)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":40:18)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":40:25)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":40:29)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":40:27)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":41:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":42:34)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":42:27)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":42:17)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":42:22)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":42:23)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":42:35)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":40:35)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":40:34)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":44:31)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":44:36)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":44:37)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":44:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":45:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":45:18)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":111:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":115:1)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":113:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":113:14)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":114:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":114:14)
#loc72 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc73 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":62:19)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":55:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":83:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":57:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":57:15)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":58:12)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":58:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":59:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":69:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":59:8)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":59:27)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":59:25)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":60:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":63:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":65:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":62:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":67:27)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":67:34)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":67:38)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":67:52)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":67:53)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":67:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":68:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":68:37)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":68:13)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":68:21)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":68:18)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":68:27)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":68:28)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":68:34)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":68:33)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":70:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":82:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":71:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":71:33)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":72:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":81:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":73:13)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":73:20)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":75:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":78:13)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":75:22)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":75:18)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":75:25)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":75:29)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":75:27)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":76:13)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":77:34)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":77:27)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":77:17)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":77:22)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":77:23)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":77:35)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":75:35)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":75:34)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":79:31)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":79:36)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":79:37)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":79:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":80:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":80:18)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":86:1)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":109:1)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":88:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":88:15)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":89:12)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":89:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":90:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":95:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":90:8)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":90:27)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":90:25)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":91:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":93:27)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":93:34)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":93:38)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":93:52)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":93:53)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":93:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":94:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":94:37)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":94:13)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":94:21)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":94:18)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":94:27)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":94:28)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":94:34)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":94:33)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":96:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":108:5)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":97:9)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":97:33)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":98:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":107:9)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":99:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":99:20)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":101:13)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":104:13)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":101:22)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":101:18)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":101:25)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":101:29)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":101:27)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":102:13)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":103:34)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":103:27)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":103:17)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":103:22)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":103:23)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":103:35)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":101:35)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":101:34)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":105:31)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":105:36)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":105:37)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":105:13)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":106:13)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c":106:18)
#loc192 = loc(fused[#loc1, #loc2])
#loc193 = loc(fused[#loc3, #loc4])
#loc194 = loc(fused[#loc5, #loc6])
#loc195 = loc(fused[#loc7, #loc8])
#loc196 = loc(fused[#loc9, #loc10])
#loc197 = loc(fused[#loc11, #loc12])
#loc198 = loc(fused[#loc14, #loc13])
#loc199 = loc(fused[#loc15, #loc16])
#loc200 = loc(fused[#loc17, #loc18])
#loc201 = loc(fused[#loc20, #loc16])
#loc202 = loc(fused[#loc23, #loc24])
#loc203 = loc(fused[#loc22, #loc24])
#loc204 = loc(fused[#loc21, #loc25])
#loc205 = loc(fused[#loc26, #loc25])
#loc206 = loc(fused[#loc27, #loc28])
#loc207 = loc(fused[#loc29, #loc30])
#loc208 = loc(fused[#loc32, #loc28])
#loc209 = loc(fused[#loc36, #loc37])
#loc210 = loc(fused[#loc38, #loc39])
#loc211 = loc(fused[#loc40, #loc41])
#loc212 = loc(fused[#loc42, #loc43])
#loc213 = loc(fused[#loc44, #loc45])
#loc214 = loc(fused[#loc47, #loc46])
#loc215 = loc(fused[#loc48, #loc49])
#loc216 = loc(fused[#loc51, #loc45])
#loc217 = loc(fused[#loc54, #loc57])
#loc218 = loc(fused[#loc59, #loc58])
#loc219 = loc(fused[#loc66, #loc67])
#loc220 = loc(fused[#loc68, #loc69])
#loc221 = loc(fused[#loc70, #loc71])
#loc222 = loc(fused[#loc72, #loc73])
#loc223 = loc(fused[#loc75, #loc76])
#loc224 = loc(fused[#loc77, #loc78])
#loc225 = loc(fused[#loc80, #loc79])
#loc226 = loc(fused[#loc81, #loc82])
#loc227 = loc(fused[#loc83, #loc84])
#loc228 = loc(fused[#loc86, #loc87, #loc88, #loc82])
#loc229 = loc(fused[#loc92, #loc93])
#loc230 = loc(fused[#loc91, #loc93])
#loc231 = loc(fused[#loc90, #loc94])
#loc232 = loc(fused[#loc95, #loc94])
#loc233 = loc(fused[#loc96, #loc97])
#loc234 = loc(fused[#loc98, #loc99])
#loc235 = loc(fused[#loc101, #loc97])
#loc236 = loc(fused[#loc105, #loc106])
#loc237 = loc(fused[#loc107, #loc108])
#loc238 = loc(fused[#loc109, #loc110])
#loc239 = loc(fused[#loc111, #loc112])
#loc240 = loc(fused[#loc113, #loc114])
#loc241 = loc(fused[#loc116, #loc115])
#loc242 = loc(fused[#loc117, #loc118])
#loc243 = loc(fused[#loc120, #loc114])
#loc244 = loc(fused[#loc123, #loc126])
#loc245 = loc(fused[#loc128, #loc127])
#loc246 = loc(fused[#loc135, #loc136])
#loc247 = loc(fused[#loc137, #loc138])
#loc248 = loc(fused[#loc140, #loc139])
#loc249 = loc(fused[#loc141, #loc142])
#loc250 = loc(fused[#loc143, #loc144])
#loc251 = loc(fused[#loc146, #loc142])
#loc252 = loc(fused[#loc149, #loc150])
#loc253 = loc(fused[#loc148, #loc150])
#loc254 = loc(fused[#loc147, #loc151])
#loc255 = loc(fused[#loc152, #loc151])
#loc256 = loc(fused[#loc153, #loc154])
#loc257 = loc(fused[#loc155, #loc156])
#loc258 = loc(fused[#loc158, #loc154])
#loc259 = loc(fused[#loc162, #loc163])
#loc260 = loc(fused[#loc164, #loc165])
#loc261 = loc(fused[#loc166, #loc167])
#loc262 = loc(fused[#loc168, #loc169])
#loc263 = loc(fused[#loc170, #loc171])
#loc264 = loc(fused[#loc173, #loc172])
#loc265 = loc(fused[#loc174, #loc175])
#loc266 = loc(fused[#loc177, #loc171])
#loc267 = loc(fused[#loc180, #loc183])
#loc268 = loc(fused[#loc185, #loc184])
