!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":117:10)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":117:14)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":117:20)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":117:32)
#loc242 = loc(fused[#loc81, #loc82])
#loc243 = loc(fused[#loc83, #loc84])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc211)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc212)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc213)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc214)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc215)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc217)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc15)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc16)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc16)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc218)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc219)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc220)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc221)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc24)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc24)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc223)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc26)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc28)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc26)
      } loc(#loc224)
    } loc(#loc222)
    cir.scope {
      %8 = cir.const #cir.int<5> : !s32i loc(#loc31)
      %9 = cir.const #cir.int<5> : !s32i loc(#loc32)
      %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc226)
      cir.if %10 {
        %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc34)
        %13 = cir.const #cir.int<65> : !s32i loc(#loc35)
        %14 = cir.const #cir.int<100> : !s32i loc(#loc36)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc37)
        %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc36)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc36)
        cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc228)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc40)
        %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc40)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
        %21 = cir.const #cir.int<100> : !s32i loc(#loc42)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc43)
        %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc42)
        %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc44)
        cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc229)
      } loc(#loc227)
    } loc(#loc225)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc231)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc231)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc231)
      %10 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc49)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc49)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc50)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc51)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc51)
      %17 = cir.const #cir.int<1> : !u64i loc(#loc232)
      %18 = cir.binop(mul, %16, %17) : !u64i loc(#loc233)
      cir.libc.memmove %18 bytes from %13 to %11 : !cir.ptr<!void>, !u64i loc(#loc234)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc57)
      %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc57)
      %21 = cir.const #cir.int<50> : !s32i loc(#loc58)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc59)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc58)
      %24 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc60)
      %25 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc60)
      cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc235)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc62)
      %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc63)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
      %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc64)
      cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc63)
    } loc(#loc230)
    cir.return loc(#loc12)
  } loc(#loc216)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc237)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc67)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc238)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc69)
    cir.return loc(#loc66)
  } loc(#loc236)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc239)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc240)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc78)
  cir.func @main(%arg0: !s32i loc(fused[#loc81, #loc82]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc83, #loc84])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc242)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc243)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc80)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc85)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc86)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc87)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc87)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc88)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc75)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06_good : !cir.ptr<!cir.func<!void ()>> loc(#loc244)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06_good() : () -> () loc(#loc90)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc76)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc77)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc245)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06_bad() : () -> () loc(#loc94)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc78)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc97)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc246)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc246)
    cir.return %17 : !s32i loc(#loc246)
  } loc(#loc241)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc99)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc248)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc104)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc105)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc105)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc249)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc250)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc104)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc251)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc252)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc112)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc113)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc113)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc254)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc115)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc116)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc117)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc115)
      } loc(#loc255)
    } loc(#loc253)
    cir.scope {
      %8 = cir.const #cir.int<5> : !s32i loc(#loc120)
      %9 = cir.const #cir.int<5> : !s32i loc(#loc121)
      %10 = cir.cmp(ne, %8, %9) : !s32i, !cir.bool loc(#loc257)
      cir.if %10 {
        %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc99)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc99)
        cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc125)
      } else {
        %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc126)
        %13 = cir.const #cir.int<65> : !s32i loc(#loc127)
        %14 = cir.const #cir.int<50> : !s32i loc(#loc128)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc129)
        %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc128)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc128)
        cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc259)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc132)
        %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc132)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
        %21 = cir.const #cir.int<50> : !s32i loc(#loc134)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc135)
        %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc134)
        %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc136)
        cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc260)
      } loc(#loc258)
    } loc(#loc256)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc262)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc262)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc262)
      %10 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc141)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc141)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc142)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc143)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc144)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc143)
      %17 = cir.const #cir.int<1> : !u64i loc(#loc263)
      %18 = cir.binop(mul, %16, %17) : !u64i loc(#loc264)
      cir.libc.memmove %18 bytes from %13 to %11 : !cir.ptr<!void>, !u64i loc(#loc265)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc149)
      %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc149)
      %21 = cir.const #cir.int<50> : !s32i loc(#loc150)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc151)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc150)
      %24 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc152)
      %25 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc152)
      cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc266)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc154)
      %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc155)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc156)
      %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc156)
      cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc155)
    } loc(#loc261)
    cir.return loc(#loc101)
  } loc(#loc247)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc268)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc161)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc162)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc162)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc269)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc270)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc161)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc271)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc272)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc169)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc170)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc170)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc274)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc172)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc173)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc174)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc172)
      } loc(#loc275)
    } loc(#loc273)
    cir.scope {
      %8 = cir.const #cir.int<5> : !s32i loc(#loc177)
      %9 = cir.const #cir.int<5> : !s32i loc(#loc178)
      %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc277)
      cir.if %10 {
        %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc180)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc180)
        %13 = cir.const #cir.int<65> : !s32i loc(#loc181)
        %14 = cir.const #cir.int<50> : !s32i loc(#loc182)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc183)
        %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc182)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc182)
        cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc279)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc186)
        %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc186)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc187)
        %21 = cir.const #cir.int<50> : !s32i loc(#loc188)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc189)
        %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc188)
        %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc190)
        cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc280)
      } loc(#loc278)
    } loc(#loc276)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc282)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc282)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc282)
      %10 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc195)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc195)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc196)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc196)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc197)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc198)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc197)
      %17 = cir.const #cir.int<1> : !u64i loc(#loc283)
      %18 = cir.binop(mul, %16, %17) : !u64i loc(#loc284)
      cir.libc.memmove %18 bytes from %13 to %11 : !cir.ptr<!void>, !u64i loc(#loc285)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc203)
      %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc203)
      %21 = cir.const #cir.int<50> : !s32i loc(#loc204)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc205)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc204)
      %24 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc206)
      %25 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc206)
      cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc286)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc207)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc208)
      %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc209)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc210)
      %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc210)
      cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc209)
    } loc(#loc281)
    cir.return loc(#loc158)
  } loc(#loc267)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":27:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":46:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":29:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":29:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":30:20)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":30:27)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":30:31)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":30:42)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":30:43)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":30:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":31:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":31:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":31:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":31:17)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":31:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":31:24)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":31:30)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":31:29)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":32:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":37:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":32:8)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":32:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":33:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":35:16)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":35:22)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":35:27)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":35:31)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":35:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":35:32)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":36:23)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":36:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":36:14)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":36:18)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":36:19)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":38:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":45:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":39:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":39:25)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":41:17)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":41:23)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":41:29)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":41:36)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":41:42)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":41:53)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":41:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":41:54)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":42:22)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":42:14)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":42:17)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":42:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":43:19)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":43:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":44:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":44:14)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":101:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":105:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":103:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":103:14)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":104:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":104:14)
#loc71 = loc("/usr/include/stdlib.h":575:1)
#loc72 = loc("/usr/include/stdlib.h":575:41)
#loc73 = loc("/usr/include/time.h":76:1)
#loc74 = loc("/usr/include/time.h":76:38)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":122:15)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":124:15)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":127:15)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":129:15)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":117:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":132:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":118:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":120:27)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":120:22)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":120:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":122:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":123:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":123:70)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":124:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":127:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":128:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":128:69)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":129:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":131:12)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":131:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":61:19)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":53:1)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":77:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":55:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":55:12)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":56:20)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":56:27)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":56:31)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":56:42)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":56:43)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":56:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":57:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":57:33)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":57:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":57:17)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":57:23)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":57:24)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":57:30)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":57:29)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":58:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":68:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":58:8)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":58:27)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":59:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":62:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":64:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":61:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":66:16)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":66:22)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":66:27)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":66:30)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":66:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":66:31)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":67:22)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":67:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":67:14)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":67:17)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":67:18)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":69:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":76:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":70:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":70:25)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":72:17)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":72:23)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":72:29)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":72:36)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":72:42)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":72:53)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":72:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":72:54)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":73:22)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":73:14)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":73:17)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":73:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":74:19)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":74:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":75:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":75:14)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":80:1)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":99:1)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":82:5)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":82:12)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":83:20)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":83:27)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":83:31)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":83:42)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":83:43)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":83:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":84:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":84:33)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":84:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":84:17)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":84:23)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":84:24)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":84:30)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":84:29)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":85:5)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":90:5)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":85:8)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":85:27)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":86:5)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":88:16)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":88:22)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":88:27)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":88:30)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":88:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":88:31)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":89:22)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":89:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":89:14)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":89:17)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":89:18)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":91:5)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":98:5)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":92:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":92:25)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":94:17)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":94:23)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":94:29)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":94:36)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":94:42)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":94:53)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":94:9)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":94:54)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":95:22)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":95:14)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":95:17)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":95:9)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":96:19)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":96:9)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":97:9)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c":97:14)
#loc211 = loc(fused[#loc1, #loc2])
#loc212 = loc(fused[#loc3, #loc4])
#loc213 = loc(fused[#loc5, #loc6])
#loc214 = loc(fused[#loc7, #loc8])
#loc215 = loc(fused[#loc9, #loc10])
#loc216 = loc(fused[#loc11, #loc12])
#loc217 = loc(fused[#loc13, #loc14])
#loc218 = loc(fused[#loc17, #loc18])
#loc219 = loc(fused[#loc16, #loc18])
#loc220 = loc(fused[#loc15, #loc19])
#loc221 = loc(fused[#loc20, #loc19])
#loc222 = loc(fused[#loc21, #loc22])
#loc223 = loc(fused[#loc23, #loc24])
#loc224 = loc(fused[#loc25, #loc22])
#loc225 = loc(fused[#loc29, #loc30])
#loc226 = loc(fused[#loc31, #loc32])
#loc227 = loc(fused[#loc33, #loc30])
#loc228 = loc(fused[#loc38, #loc39])
#loc229 = loc(fused[#loc41, #loc40])
#loc230 = loc(fused[#loc45, #loc46])
#loc231 = loc(fused[#loc47, #loc48])
#loc232 = loc(fused[#loc53, #loc54])
#loc233 = loc(fused[#loc51, #loc54])
#loc234 = loc(fused[#loc55, #loc56])
#loc235 = loc(fused[#loc60, #loc57])
#loc236 = loc(fused[#loc65, #loc66])
#loc237 = loc(fused[#loc67, #loc68])
#loc238 = loc(fused[#loc69, #loc70])
#loc239 = loc(fused[#loc71, #loc72])
#loc240 = loc(fused[#loc73, #loc74])
#loc241 = loc(fused[#loc79, #loc80])
#loc244 = loc(fused[#loc90, #loc91])
#loc245 = loc(fused[#loc94, #loc95])
#loc246 = loc(fused[#loc98, #loc97])
#loc247 = loc(fused[#loc100, #loc101])
#loc248 = loc(fused[#loc102, #loc103])
#loc249 = loc(fused[#loc106, #loc107])
#loc250 = loc(fused[#loc105, #loc107])
#loc251 = loc(fused[#loc104, #loc108])
#loc252 = loc(fused[#loc109, #loc108])
#loc253 = loc(fused[#loc110, #loc111])
#loc254 = loc(fused[#loc112, #loc113])
#loc255 = loc(fused[#loc114, #loc111])
#loc256 = loc(fused[#loc118, #loc119])
#loc257 = loc(fused[#loc120, #loc121])
#loc258 = loc(fused[#loc122, #loc123, #loc124, #loc119])
#loc259 = loc(fused[#loc130, #loc131])
#loc260 = loc(fused[#loc133, #loc132])
#loc261 = loc(fused[#loc137, #loc138])
#loc262 = loc(fused[#loc139, #loc140])
#loc263 = loc(fused[#loc145, #loc146])
#loc264 = loc(fused[#loc143, #loc146])
#loc265 = loc(fused[#loc147, #loc148])
#loc266 = loc(fused[#loc152, #loc149])
#loc267 = loc(fused[#loc157, #loc158])
#loc268 = loc(fused[#loc159, #loc160])
#loc269 = loc(fused[#loc163, #loc164])
#loc270 = loc(fused[#loc162, #loc164])
#loc271 = loc(fused[#loc161, #loc165])
#loc272 = loc(fused[#loc166, #loc165])
#loc273 = loc(fused[#loc167, #loc168])
#loc274 = loc(fused[#loc169, #loc170])
#loc275 = loc(fused[#loc171, #loc168])
#loc276 = loc(fused[#loc175, #loc176])
#loc277 = loc(fused[#loc177, #loc178])
#loc278 = loc(fused[#loc179, #loc176])
#loc279 = loc(fused[#loc184, #loc185])
#loc280 = loc(fused[#loc187, #loc186])
#loc281 = loc(fused[#loc191, #loc192])
#loc282 = loc(fused[#loc193, #loc194])
#loc283 = loc(fused[#loc199, #loc200])
#loc284 = loc(fused[#loc197, #loc200])
#loc285 = loc(fused[#loc201, #loc202])
#loc286 = loc(fused[#loc206, #loc203])
