!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc154)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc155)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc156)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc157)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.global "private"  internal dsolocal @CWE190_Integer_Overflow__int_fgets_multiply_45_badData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc158)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_multiply_45_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc160)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc16)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    cir.scope {
      %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc163)
      %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc163)
      cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc163)
      cir.scope {
        %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc24)
        %8 = cir.const #cir.int<3> : !s32i loc(#loc25)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc25)
        %10 = cir.const #cir.int<4> : !u64i loc(#loc25)
        %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc25)
        %12 = cir.const #cir.int<2> : !s32i loc(#loc25)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc25)
        %14 = cir.binop(add, %11, %13) : !u64i loc(#loc25)
        %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc25)
        %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc155)
        %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc26)
        %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc27)
        %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc28)
        %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !s32i loc(#loc165)
        %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc29)
        cir.if %22 {
          %23 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc33)
          %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc34)
          cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc167)
        } else {
          %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
          %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc37)
        } loc(#loc166)
      } loc(#loc164)
    } loc(#loc162)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
    %3 = cir.get_global @CWE190_Integer_Overflow__int_fgets_multiply_45_badData : !cir.ptr<!s32i> loc(#loc158)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc168)
    %4 = cir.get_global @badSink : !cir.ptr<!cir.func<!void ()>> loc(#loc169)
    cir.call %4() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    cir.return loc(#loc13)
  } loc(#loc159)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_multiply_45_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc171)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc172)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    cir.return loc(#loc43)
  } loc(#loc170)
  cir.func private  @printIntLine(!s32i) loc(#loc173)
  cir.func no_proto internal private  @badSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc175)
    %1 = cir.get_global @CWE190_Integer_Overflow__int_fgets_multiply_45_badData : !cir.ptr<!s32i> loc(#loc158)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc57)
      %5 = cir.cmp(gt, %3, %4) : !s32i, !s32i loc(#loc177)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc58)
      cir.if %6 {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc179)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
        %9 = cir.const #cir.int<2> : !s32i loc(#loc61)
        %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc62)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc179)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc63)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc64)
      } loc(#loc178)
    } loc(#loc176)
    cir.return loc(#loc51)
  } loc(#loc174)
  cir.global "private"  internal dsolocal @CWE190_Integer_Overflow__int_fgets_multiply_45_goodG2BData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc180)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc182)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc71)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc73)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    %4 = cir.get_global @CWE190_Integer_Overflow__int_fgets_multiply_45_goodG2BData : !cir.ptr<!s32i> loc(#loc180)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc185)
    %5 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void ()>> loc(#loc186)
    cir.call %5() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc77)
    cir.return loc(#loc68)
  } loc(#loc181)
  cir.func no_proto internal private  @goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc188)
    %1 = cir.get_global @CWE190_Integer_Overflow__int_fgets_multiply_45_goodG2BData : !cir.ptr<!s32i> loc(#loc180)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc86)
      %5 = cir.cmp(gt, %3, %4) : !s32i, !s32i loc(#loc190)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc87)
      cir.if %6 {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc192)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc91)
        %9 = cir.const #cir.int<2> : !s32i loc(#loc90)
        %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc91)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc192)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc92)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc93)
      } loc(#loc191)
    } loc(#loc189)
    cir.return loc(#loc80)
  } loc(#loc187)
  cir.global "private"  internal dsolocal @CWE190_Integer_Overflow__int_fgets_multiply_45_goodB2GData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc193)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc195)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc100)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    cir.scope {
      %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc198)
      %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc198)
      cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc198)
      cir.scope {
        %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc108)
        %8 = cir.const #cir.int<3> : !s32i loc(#loc109)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc109)
        %10 = cir.const #cir.int<4> : !u64i loc(#loc109)
        %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc109)
        %12 = cir.const #cir.int<2> : !s32i loc(#loc109)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc109)
        %14 = cir.binop(add, %11, %13) : !u64i loc(#loc109)
        %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc109)
        %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc155)
        %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc110)
        %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc111)
        %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc112)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc112)
        %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !s32i loc(#loc200)
        %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc113)
        cir.if %22 {
          %23 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc117)
          %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc118)
          cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc202)
        } else {
          %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc121)
          %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc121)
          cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc122)
        } loc(#loc201)
      } loc(#loc199)
    } loc(#loc197)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
    %3 = cir.get_global @CWE190_Integer_Overflow__int_fgets_multiply_45_goodB2GData : !cir.ptr<!s32i> loc(#loc193)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    %4 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void ()>> loc(#loc204)
    cir.call %4() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc125)
    cir.return loc(#loc97)
  } loc(#loc194)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc127)
  cir.func no_proto internal private  @goodB2GSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc206)
    %1 = cir.get_global @CWE190_Integer_Overflow__int_fgets_multiply_45_goodB2GData : !cir.ptr<!s32i> loc(#loc193)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc131)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc134)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc135)
      %5 = cir.cmp(gt, %3, %4) : !s32i, !s32i loc(#loc208)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc136)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc140)
          %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc141)
          %9 = cir.const #cir.int<2> : !s32i loc(#loc142)
          %10 = cir.binop(div, %8, %9) : !s32i loc(#loc211)
          %11 = cir.cmp(lt, %7, %10) : !s32i, !s32i loc(#loc212)
          %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc144)
          cir.if %12 {
            %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc214)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc150)
            %15 = cir.const #cir.int<2> : !s32i loc(#loc149)
            %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc150)
            cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc214)
            %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc151)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc152)
          } else {
            %13 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc127)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc127)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc153)
          } loc(#loc213)
        } loc(#loc210)
      } loc(#loc209)
    } loc(#loc207)
    cir.return loc(#loc129)
  } loc(#loc205)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_45.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":54:23)
#loc10 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":22:1)
#loc11 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":22:12)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":39:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":59:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":41:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":41:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":43:12)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":43:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":44:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":56:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":45:9)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":45:45)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":47:9)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":55:9)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":47:19)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":47:32)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":47:49)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":47:13)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":47:59)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":47:56)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":48:9)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":51:9)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":53:9)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":50:25)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":50:20)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":50:13)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":50:36)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":54:13)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":57:62)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":57:5)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":58:5)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":58:13)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":129:1)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":133:1)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":131:5)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":131:13)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":132:5)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":132:13)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":28:1)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":37:1)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":30:5)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":30:16)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":31:5)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":36:5)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":31:8)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":31:15)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":31:13)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":32:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":34:9)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":34:29)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":34:22)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":35:22)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":35:9)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":23:1)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":23:12)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":77:1)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":86:1)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":79:5)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":79:9)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":81:12)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":81:5)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":83:12)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":83:5)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":84:66)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":84:5)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":85:5)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":85:17)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":66:1)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":75:1)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":68:5)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":68:16)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":69:5)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":74:5)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":69:8)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":69:15)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":69:13)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":70:5)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":72:9)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":72:29)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":72:22)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":73:22)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":73:9)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":24:1)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":24:12)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":107:1)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":127:1)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":109:5)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":109:9)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":111:12)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":111:5)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":112:5)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":124:5)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":113:9)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":113:45)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":115:9)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":123:9)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":115:19)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":115:32)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":115:49)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":115:13)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":115:59)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":115:56)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":116:9)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":119:9)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":121:9)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":118:25)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":118:20)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":118:13)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":118:36)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":122:23)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":122:13)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":125:66)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":125:5)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":126:5)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":126:17)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":102:23)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":89:1)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":105:1)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":91:5)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":91:16)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":92:5)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":104:5)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":92:8)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":92:15)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":92:13)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":93:5)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":95:9)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":103:9)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":95:13)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":95:21)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":95:29)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":95:30)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":95:18)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":96:9)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":99:9)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":101:9)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":97:13)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":97:33)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":97:26)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":98:26)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":98:13)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_multiply_45.c":102:13)
#loc154 = loc(fused[#loc1, #loc2])
#loc155 = loc(fused[#loc3, #loc4])
#loc156 = loc(fused[#loc5, #loc6])
#loc157 = loc(fused[#loc7, #loc8])
#loc158 = loc(fused[#loc10, #loc11])
#loc159 = loc(fused[#loc12, #loc13])
#loc160 = loc(fused[#loc14, #loc15])
#loc161 = loc(fused[#loc17, #loc16])
#loc162 = loc(fused[#loc18, #loc19])
#loc163 = loc(fused[#loc20, #loc21])
#loc164 = loc(fused[#loc22, #loc23])
#loc165 = loc(fused[#loc27, #loc28])
#loc166 = loc(fused[#loc30, #loc31, #loc32, #loc23])
#loc167 = loc(fused[#loc35, #loc36])
#loc168 = loc(fused[#loc39, #loc38])
#loc169 = loc(fused[#loc40, #loc41])
#loc170 = loc(fused[#loc42, #loc43])
#loc171 = loc(fused[#loc44, #loc45])
#loc172 = loc(fused[#loc46, #loc47])
#loc173 = loc(fused[#loc48, #loc49])
#loc174 = loc(fused[#loc50, #loc51])
#loc175 = loc(fused[#loc52, #loc53])
#loc176 = loc(fused[#loc54, #loc55])
#loc177 = loc(fused[#loc56, #loc57])
#loc178 = loc(fused[#loc59, #loc55])
#loc179 = loc(fused[#loc60, #loc61])
#loc180 = loc(fused[#loc65, #loc66])
#loc181 = loc(fused[#loc67, #loc68])
#loc182 = loc(fused[#loc69, #loc70])
#loc183 = loc(fused[#loc72, #loc71])
#loc184 = loc(fused[#loc74, #loc73])
#loc185 = loc(fused[#loc76, #loc75])
#loc186 = loc(fused[#loc77, #loc78])
#loc187 = loc(fused[#loc79, #loc80])
#loc188 = loc(fused[#loc81, #loc82])
#loc189 = loc(fused[#loc83, #loc84])
#loc190 = loc(fused[#loc85, #loc86])
#loc191 = loc(fused[#loc88, #loc84])
#loc192 = loc(fused[#loc89, #loc90])
#loc193 = loc(fused[#loc94, #loc95])
#loc194 = loc(fused[#loc96, #loc97])
#loc195 = loc(fused[#loc98, #loc99])
#loc196 = loc(fused[#loc101, #loc100])
#loc197 = loc(fused[#loc102, #loc103])
#loc198 = loc(fused[#loc104, #loc105])
#loc199 = loc(fused[#loc106, #loc107])
#loc200 = loc(fused[#loc111, #loc112])
#loc201 = loc(fused[#loc114, #loc115, #loc116, #loc107])
#loc202 = loc(fused[#loc119, #loc120])
#loc203 = loc(fused[#loc124, #loc123])
#loc204 = loc(fused[#loc125, #loc126])
#loc205 = loc(fused[#loc128, #loc129])
#loc206 = loc(fused[#loc130, #loc131])
#loc207 = loc(fused[#loc132, #loc133])
#loc208 = loc(fused[#loc134, #loc135])
#loc209 = loc(fused[#loc137, #loc133])
#loc210 = loc(fused[#loc138, #loc139])
#loc211 = loc(fused[#loc141, #loc142])
#loc212 = loc(fused[#loc140, #loc143])
#loc213 = loc(fused[#loc145, #loc146, #loc147, #loc139])
#loc214 = loc(fused[#loc148, #loc149])
