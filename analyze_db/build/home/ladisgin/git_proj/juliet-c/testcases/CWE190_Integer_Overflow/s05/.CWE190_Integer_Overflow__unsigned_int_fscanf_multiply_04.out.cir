!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":177:10)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":177:14)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":177:20)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":177:32)
#loc234 = loc(fused[#loc56, #loc57])
#loc235 = loc(fused[#loc58, #loc59])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc210)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc211)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%u\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printUnsignedLine(!u32i) loc(#loc212)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc214)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc215)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc14)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc14)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc216)
    cir.br ^bb1 loc(#loc217)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc18)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc218)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc20)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc211)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc21)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc20)
    cir.br ^bb3 loc(#loc17)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc219)
  ^bb5:  // pred: ^bb4
    %12 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %13 ^bb6, ^bb11 loc(#loc220)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc221)
  ^bb7:  // pred: ^bb6
    %14 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc28)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc29)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc29)
    %17 = cir.cmp(gt, %14, %16) : !u32i, !cir.bool loc(#loc222)
    cir.brcond %17 ^bb8, ^bb9 loc(#loc223)
  ^bb8:  // pred: ^bb7
    %18 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc31)
    %19 = cir.const #cir.int<2> : !s32i loc(#loc11)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc11)
    %21 = cir.binop(mul, %18, %20) : !u32i loc(#loc224)
    cir.store %21, %0 : !u32i, !cir.ptr<!u32i> loc(#loc214)
    %22 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc32)
    cir.call @printUnsignedLine(%22) : (!u32i) -> () loc(#loc33)
    cir.br ^bb9 loc(#loc27)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc27)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc23)
  ^bb11:  // 2 preds: ^bb5, ^bb10
    cir.br ^bb12 loc(#loc23)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc9)
  } loc(#loc213)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc226)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc227)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc228)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc229)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc35)
  } loc(#loc225)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc230)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc231)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc232)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc53)
  cir.func @main(%arg0: !s32i loc(fused[#loc56, #loc57]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc58, #loc59])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc234)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc235)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc55)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc60)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc60)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc61)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc62)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc62)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc63)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc50)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %8 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04_good : !cir.ptr<!cir.func<!void ()>> loc(#loc236)
    cir.call @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04_good() : () -> () loc(#loc65)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc51)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc52)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %13 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc237)
    cir.call @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04_bad() : () -> () loc(#loc69)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc53)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc72)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc238)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc238)
    cir.return %17 : !s32i loc(#loc238)
  } loc(#loc233)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc75)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc240)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc241)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc82)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc82)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc242)
    cir.br ^bb1 loc(#loc243)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc86)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc244)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc88)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc211)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc89)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc90)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc90)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc88)
    cir.br ^bb3 loc(#loc85)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc85)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc245)
  ^bb5:  // pred: ^bb4
    %12 = cir.const #cir.int<0> : !s32i loc(#loc93)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc93)
    cir.brcond %13 ^bb6, ^bb7 loc(#loc246)
  ^bb6:  // pred: ^bb5
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc74)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc97)
    cir.br ^bb17 loc(#loc95)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc247)
  ^bb8:  // pred: ^bb7
    %16 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc100)
    %17 = cir.const #cir.int<0> : !s32i loc(#loc101)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc101)
    %19 = cir.cmp(gt, %16, %18) : !u32i, !cir.bool loc(#loc248)
    cir.brcond %19 ^bb9, ^bb15 loc(#loc249)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc250)
  ^bb10:  // pred: ^bb9
    %20 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc105)
    %21 = cir.const #cir.int<2147483647> : !s32i loc(#loc106)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc106)
    %23 = cir.const #cir.int<2> : !u32i loc(#loc106)
    %24 = cir.binop(mul, %22, %23) : !u32i loc(#loc106)
    %25 = cir.const #cir.int<1> : !u32i loc(#loc106)
    %26 = cir.binop(add, %24, %25) : !u32i loc(#loc106)
    %27 = cir.const #cir.int<2> : !s32i loc(#loc107)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc107)
    %29 = cir.binop(div, %26, %28) : !u32i loc(#loc251)
    %30 = cir.cmp(lt, %20, %29) : !u32i, !cir.bool loc(#loc252)
    cir.brcond %30 ^bb11, ^bb12 loc(#loc253)
  ^bb11:  // pred: ^bb10
    %31 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc112)
    %32 = cir.const #cir.int<2> : !s32i loc(#loc79)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc79)
    %34 = cir.binop(mul, %31, %33) : !u32i loc(#loc254)
    cir.store %34, %0 : !u32i, !cir.ptr<!u32i> loc(#loc240)
    %35 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc113)
    cir.call @printUnsignedLine(%35) : (!u32i) -> () loc(#loc114)
    cir.br ^bb13 loc(#loc110)
  ^bb12:  // pred: ^bb10
    %36 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc75)
    %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc115)
    cir.br ^bb13 loc(#loc104)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc104)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc99)
  ^bb15:  // 2 preds: ^bb8, ^bb14
    cir.br ^bb16 loc(#loc99)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc92)
  ^bb17:  // 2 preds: ^bb6, ^bb16
    cir.br ^bb18 loc(#loc92)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc77)
  } loc(#loc239)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc256)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc257)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc122)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc122)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc258)
    cir.br ^bb1 loc(#loc259)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<1> : !s32i loc(#loc126)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc126)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc260)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc128)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc211)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc129)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc130)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc130)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc128)
    cir.br ^bb3 loc(#loc125)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc125)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc261)
  ^bb5:  // pred: ^bb4
    %12 = cir.const #cir.int<1> : !s32i loc(#loc133)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc133)
    cir.brcond %13 ^bb6, ^bb16 loc(#loc262)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc263)
  ^bb7:  // pred: ^bb6
    %14 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc137)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc138)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc138)
    %17 = cir.cmp(gt, %14, %16) : !u32i, !cir.bool loc(#loc264)
    cir.brcond %17 ^bb8, ^bb14 loc(#loc265)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc266)
  ^bb9:  // pred: ^bb8
    %18 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc142)
    %19 = cir.const #cir.int<2147483647> : !s32i loc(#loc143)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc143)
    %21 = cir.const #cir.int<2> : !u32i loc(#loc143)
    %22 = cir.binop(mul, %20, %21) : !u32i loc(#loc143)
    %23 = cir.const #cir.int<1> : !u32i loc(#loc143)
    %24 = cir.binop(add, %22, %23) : !u32i loc(#loc143)
    %25 = cir.const #cir.int<2> : !s32i loc(#loc144)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc144)
    %27 = cir.binop(div, %24, %26) : !u32i loc(#loc267)
    %28 = cir.cmp(lt, %18, %27) : !u32i, !cir.bool loc(#loc268)
    cir.brcond %28 ^bb10, ^bb11 loc(#loc269)
  ^bb10:  // pred: ^bb9
    %29 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc149)
    %30 = cir.const #cir.int<2> : !s32i loc(#loc119)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc119)
    %32 = cir.binop(mul, %29, %31) : !u32i loc(#loc270)
    cir.store %32, %0 : !u32i, !cir.ptr<!u32i> loc(#loc256)
    %33 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc150)
    cir.call @printUnsignedLine(%33) : (!u32i) -> () loc(#loc151)
    cir.br ^bb12 loc(#loc147)
  ^bb11:  // pred: ^bb9
    %34 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc152)
    %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc152)
    cir.call @printLine(%35) : (!cir.ptr<!s8i>) -> () loc(#loc153)
    cir.br ^bb12 loc(#loc141)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc141)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc136)
  ^bb14:  // 2 preds: ^bb7, ^bb13
    cir.br ^bb15 loc(#loc136)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc132)
  ^bb16:  // 2 preds: ^bb5, ^bb15
    cir.br ^bb17 loc(#loc132)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc117)
  } loc(#loc255)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc272)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc273)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc160)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc160)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc274)
    cir.br ^bb1 loc(#loc275)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<0> : !s32i loc(#loc164)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc164)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc276)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc168)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc168)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc169)
    cir.br ^bb4 loc(#loc166)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc170)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc170)
    cir.store %9, %1 : !u32i, !cir.ptr<!u32i> loc(#loc277)
    cir.br ^bb4 loc(#loc163)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc163)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc278)
  ^bb6:  // pred: ^bb5
    %10 = cir.const #cir.int<1> : !s32i loc(#loc174)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc174)
    cir.brcond %11 ^bb7, ^bb12 loc(#loc279)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc280)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc178)
    %13 = cir.const #cir.int<0> : !s32i loc(#loc179)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc179)
    %15 = cir.cmp(gt, %12, %14) : !u32i, !cir.bool loc(#loc281)
    cir.brcond %15 ^bb9, ^bb10 loc(#loc282)
  ^bb9:  // pred: ^bb8
    %16 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc181)
    %17 = cir.const #cir.int<2> : !s32i loc(#loc157)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc157)
    %19 = cir.binop(mul, %16, %18) : !u32i loc(#loc283)
    cir.store %19, %0 : !u32i, !cir.ptr<!u32i> loc(#loc272)
    %20 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc182)
    cir.call @printUnsignedLine(%20) : (!u32i) -> () loc(#loc183)
    cir.br ^bb10 loc(#loc177)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc177)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc173)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc173)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc155)
  } loc(#loc271)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc285)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc286)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc190)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc190)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc287)
    cir.br ^bb1 loc(#loc288)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<1> : !s32i loc(#loc194)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc194)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc289)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2> : !s32i loc(#loc196)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc196)
    cir.store %7, %1 : !u32i, !cir.ptr<!u32i> loc(#loc290)
    cir.br ^bb3 loc(#loc193)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc193)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc291)
  ^bb5:  // pred: ^bb4
    %8 = cir.const #cir.int<1> : !s32i loc(#loc200)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc200)
    cir.brcond %9 ^bb6, ^bb11 loc(#loc292)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc293)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc204)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc205)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc205)
    %13 = cir.cmp(gt, %10, %12) : !u32i, !cir.bool loc(#loc294)
    cir.brcond %13 ^bb8, ^bb9 loc(#loc295)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc207)
    %15 = cir.const #cir.int<2> : !s32i loc(#loc187)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc187)
    %17 = cir.binop(mul, %14, %16) : !u32i loc(#loc296)
    cir.store %17, %0 : !u32i, !cir.ptr<!u32i> loc(#loc285)
    %18 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc208)
    cir.call @printUnsignedLine(%18) : (!u32i) -> () loc(#loc209)
    cir.br ^bb9 loc(#loc203)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc203)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc199)
  ^bb11:  // 2 preds: ^bb5, ^bb10
    cir.br ^bb12 loc(#loc199)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc185)
  } loc(#loc284)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":35:24)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":28:1)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":46:1)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":42:13)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":42:42)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":30:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":30:18)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":31:12)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":31:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":32:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":36:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":32:8)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":33:5)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":35:9)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":35:17)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":37:5)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":45:5)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":37:8)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":38:5)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":39:9)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":44:9)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":39:12)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":39:19)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":40:9)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":42:35)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":43:31)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":43:13)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":160:1)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":166:1)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":162:5)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":162:14)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":163:5)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":163:14)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":164:5)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":164:14)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":165:5)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":165:14)
#loc44 = loc("/usr/include/stdlib.h":575:1)
#loc45 = loc("/usr/include/stdlib.h":575:41)
#loc46 = loc("/usr/include/time.h":76:1)
#loc47 = loc("/usr/include/time.h":76:38)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":182:15)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":184:15)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":187:15)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":189:15)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":177:1)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":192:1)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":178:1)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":180:27)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":180:22)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":180:5)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":182:5)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":183:5)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":183:67)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":184:5)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":187:5)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":188:5)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":188:66)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":189:5)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":191:12)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":191:5)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":65:19)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":79:27)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":53:1)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":83:1)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":74:17)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":74:46)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":55:5)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":55:18)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":56:12)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":56:5)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":57:5)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":61:5)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":57:8)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":58:5)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":60:9)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":60:17)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":60:24)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":62:5)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":82:5)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":62:8)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":63:5)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":66:5)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":68:5)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":65:9)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":69:9)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":81:9)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":69:12)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":69:19)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":70:9)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":72:13)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":80:13)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":72:17)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":72:25)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":72:34)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":72:35)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":73:13)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":76:13)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":78:13)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":74:39)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":75:35)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":75:17)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":79:17)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":86:1)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":111:1)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":102:17)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":102:46)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":88:5)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":88:18)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":89:12)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":89:5)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":90:5)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":94:5)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":90:8)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":91:5)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":93:9)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":93:17)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":93:24)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":95:5)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":110:5)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":95:8)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":96:5)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":97:9)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":109:9)
#loc137 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":97:12)
#loc138 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":97:19)
#loc139 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":98:9)
#loc140 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":100:13)
#loc141 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":108:13)
#loc142 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":100:17)
#loc143 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":100:25)
#loc144 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":100:34)
#loc145 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":100:35)
#loc146 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":101:13)
#loc147 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":104:13)
#loc148 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":106:13)
#loc149 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":102:39)
#loc150 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":103:35)
#loc151 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":103:17)
#loc152 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":107:27)
#loc153 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":107:17)
#loc154 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":114:1)
#loc155 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":137:1)
#loc156 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":133:13)
#loc157 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":133:42)
#loc158 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":116:5)
#loc159 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":116:18)
#loc160 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":117:12)
#loc161 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":117:5)
#loc162 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":118:5)
#loc163 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":127:5)
#loc164 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":118:8)
#loc165 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":119:5)
#loc166 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":122:5)
#loc167 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":124:5)
#loc168 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":121:19)
#loc169 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":121:9)
#loc170 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":126:16)
#loc171 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":126:9)
#loc172 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":128:5)
#loc173 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":136:5)
#loc174 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":128:8)
#loc175 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":129:5)
#loc176 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":130:9)
#loc177 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":135:9)
#loc178 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":130:12)
#loc179 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":130:19)
#loc180 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":131:9)
#loc181 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":133:35)
#loc182 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":134:31)
#loc183 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":134:13)
#loc184 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":140:1)
#loc185 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":158:1)
#loc186 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":154:13)
#loc187 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":154:42)
#loc188 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":142:5)
#loc189 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":142:18)
#loc190 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":143:12)
#loc191 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":143:5)
#loc192 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":144:5)
#loc193 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":148:5)
#loc194 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":144:8)
#loc195 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":145:5)
#loc196 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":147:16)
#loc197 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":147:9)
#loc198 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":149:5)
#loc199 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":157:5)
#loc200 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":149:8)
#loc201 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":150:5)
#loc202 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":151:9)
#loc203 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":156:9)
#loc204 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":151:12)
#loc205 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":151:19)
#loc206 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":152:9)
#loc207 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":154:35)
#loc208 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":155:31)
#loc209 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_04.c":155:13)
#loc210 = loc(fused[#loc1, #loc2])
#loc211 = loc(fused[#loc3, #loc4])
#loc212 = loc(fused[#loc6, #loc7])
#loc213 = loc(fused[#loc8, #loc9])
#loc214 = loc(fused[#loc10, #loc11])
#loc215 = loc(fused[#loc12, #loc13])
#loc216 = loc(fused[#loc15, #loc14])
#loc217 = loc(fused[#loc16, #loc17])
#loc218 = loc(fused[#loc19, #loc17])
#loc219 = loc(fused[#loc22, #loc23])
#loc220 = loc(fused[#loc25, #loc23])
#loc221 = loc(fused[#loc26, #loc27])
#loc222 = loc(fused[#loc28, #loc29])
#loc223 = loc(fused[#loc30, #loc27])
#loc224 = loc(fused[#loc31, #loc11])
#loc225 = loc(fused[#loc34, #loc35])
#loc226 = loc(fused[#loc36, #loc37])
#loc227 = loc(fused[#loc38, #loc39])
#loc228 = loc(fused[#loc40, #loc41])
#loc229 = loc(fused[#loc42, #loc43])
#loc230 = loc(fused[#loc44, #loc45])
#loc231 = loc(fused[#loc46, #loc47])
#loc232 = loc(fused[#loc48, #loc49])
#loc233 = loc(fused[#loc54, #loc55])
#loc236 = loc(fused[#loc65, #loc66])
#loc237 = loc(fused[#loc69, #loc70])
#loc238 = loc(fused[#loc73, #loc72])
#loc239 = loc(fused[#loc76, #loc77])
#loc240 = loc(fused[#loc78, #loc79])
#loc241 = loc(fused[#loc80, #loc81])
#loc242 = loc(fused[#loc83, #loc82])
#loc243 = loc(fused[#loc84, #loc85])
#loc244 = loc(fused[#loc87, #loc85])
#loc245 = loc(fused[#loc91, #loc92])
#loc246 = loc(fused[#loc94, #loc95, #loc96, #loc92])
#loc247 = loc(fused[#loc98, #loc99])
#loc248 = loc(fused[#loc100, #loc101])
#loc249 = loc(fused[#loc102, #loc99])
#loc250 = loc(fused[#loc103, #loc104])
#loc251 = loc(fused[#loc106, #loc107])
#loc252 = loc(fused[#loc105, #loc108])
#loc253 = loc(fused[#loc109, #loc110, #loc111, #loc104])
#loc254 = loc(fused[#loc112, #loc79])
#loc255 = loc(fused[#loc116, #loc117])
#loc256 = loc(fused[#loc118, #loc119])
#loc257 = loc(fused[#loc120, #loc121])
#loc258 = loc(fused[#loc123, #loc122])
#loc259 = loc(fused[#loc124, #loc125])
#loc260 = loc(fused[#loc127, #loc125])
#loc261 = loc(fused[#loc131, #loc132])
#loc262 = loc(fused[#loc134, #loc132])
#loc263 = loc(fused[#loc135, #loc136])
#loc264 = loc(fused[#loc137, #loc138])
#loc265 = loc(fused[#loc139, #loc136])
#loc266 = loc(fused[#loc140, #loc141])
#loc267 = loc(fused[#loc143, #loc144])
#loc268 = loc(fused[#loc142, #loc145])
#loc269 = loc(fused[#loc146, #loc147, #loc148, #loc141])
#loc270 = loc(fused[#loc149, #loc119])
#loc271 = loc(fused[#loc154, #loc155])
#loc272 = loc(fused[#loc156, #loc157])
#loc273 = loc(fused[#loc158, #loc159])
#loc274 = loc(fused[#loc161, #loc160])
#loc275 = loc(fused[#loc162, #loc163])
#loc276 = loc(fused[#loc165, #loc166, #loc167, #loc163])
#loc277 = loc(fused[#loc171, #loc170])
#loc278 = loc(fused[#loc172, #loc173])
#loc279 = loc(fused[#loc175, #loc173])
#loc280 = loc(fused[#loc176, #loc177])
#loc281 = loc(fused[#loc178, #loc179])
#loc282 = loc(fused[#loc180, #loc177])
#loc283 = loc(fused[#loc181, #loc157])
#loc284 = loc(fused[#loc184, #loc185])
#loc285 = loc(fused[#loc186, #loc187])
#loc286 = loc(fused[#loc188, #loc189])
#loc287 = loc(fused[#loc191, #loc190])
#loc288 = loc(fused[#loc192, #loc193])
#loc289 = loc(fused[#loc195, #loc193])
#loc290 = loc(fused[#loc197, #loc196])
#loc291 = loc(fused[#loc198, #loc199])
#loc292 = loc(fused[#loc201, #loc199])
#loc293 = loc(fused[#loc202, #loc203])
#loc294 = loc(fused[#loc204, #loc205])
#loc295 = loc(fused[#loc206, #loc203])
#loc296 = loc(fused[#loc207, #loc187])
