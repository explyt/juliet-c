!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc71 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":95:10)
#loc72 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":95:14)
#loc73 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":95:20)
#loc74 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":95:32)
#loc167 = loc(fused[#loc71, #loc72])
#loc168 = loc(fused[#loc73, #loc74])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE194_Unexpected_Sign_Extension/s02/CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc140)
  cir.func private @strncpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc141)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc142)
  cir.func no_proto @CWE194_Unexpected_Sign_Extension__rand_strncpy_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc144)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc145)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc13)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc13)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc146)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc17)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc148)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc149)
        cir.condition(%7) loc(#loc21)
      } body {
        cir.scope {
          %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc23)
          %7 = cir.binop(and, %5, %6) : !s32i loc(#loc23)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc23)
          %9 = cir.ternary(%8, true {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc23)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc23)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc23)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc23)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc23)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc23)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc23)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc23)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc23)
            cir.yield %23 : !u32i loc(#loc23)
          }, false {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc23)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc23)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc23)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc23)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc23)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc23)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc23)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc23)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc23)
            %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc23)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc23)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc23)
            %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc23)
            cir.yield %27 : !u32i loc(#loc23)
          }) : (!cir.bool) -> !u32i loc(#loc23)
          %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc23)
          %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc23)
          cir.store %11, %1 : !s16i, !cir.ptr<!s16i> loc(#loc151)
        } loc(#loc150)
        cir.yield loc(#loc16)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc26)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc152)
        cir.yield loc(#loc147)
      } loc(#loc147)
    } loc(#loc147)
    cir.scope {
      %4 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc154)
      %5 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dest"] {alignment = 16 : i64} loc(#loc155)
      %6 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc155)
      cir.store %6, %5 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc155)
      %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc33)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc33)
      %9 = cir.const #cir.int<65> : !s32i loc(#loc34)
      %10 = cir.const #cir.int<100> : !s32i loc(#loc35)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc36)
      %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc35)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc35)
      cir.libc.memset %13 bytes from %8 set to %9 : !cir.ptr<!void>, !s32i, !u64i loc(#loc156)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc39)
      %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc39)
      %16 = cir.const #cir.int<100> : !s32i loc(#loc40)
      %17 = cir.const #cir.int<1> : !s32i loc(#loc41)
      %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc40)
      %19 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc42)
      %20 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %18 : !s32i), !cir.ptr<!s8i> loc(#loc42)
      cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc157)
      cir.scope {
        %22 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc45)
        %23 = cir.cast(integral, %22 : !s16i), !s32i loc(#loc45)
        %24 = cir.const #cir.int<100> : !s32i loc(#loc46)
        %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc159)
        cir.if %25 {
          %26 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc48)
          %27 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc49)
          %28 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc50)
          %29 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc51)
          %30 = cir.cast(integral, %29 : !s16i), !u64i loc(#loc51)
          %31 = cir.call @strncpy(%27, %28, %30) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc48)
          %32 = cir.const #cir.int<0> : !s32i loc(#loc52)
          %33 = cir.cast(integral, %32 : !s32i), !s8i loc(#loc52)
          %34 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc53)
          %35 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc54)
          %36 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %34 : !s16i), !cir.ptr<!s8i> loc(#loc54)
          cir.store %33, %36 : !s8i, !cir.ptr<!s8i> loc(#loc161)
        } loc(#loc160)
      } loc(#loc158)
      %21 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc55)
      cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    } loc(#loc153)
    cir.return loc(#loc8)
  } loc(#loc143)
  cir.func no_proto @CWE194_Unexpected_Sign_Extension__rand_strncpy_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc163)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    cir.return loc(#loc58)
  } loc(#loc162)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc164)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc165)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc65)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc66)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc68)
  cir.func @main(%arg0: !s32i loc(fused[#loc71, #loc72]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc73, #loc74])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc167)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc168)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc70)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc75)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc75)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc76)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc77)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc77)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc78)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc65)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %8 = cir.get_global @CWE194_Unexpected_Sign_Extension__rand_strncpy_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc169)
    cir.call @CWE194_Unexpected_Sign_Extension__rand_strncpy_17_good() : () -> () loc(#loc80)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc66)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc67)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %13 = cir.get_global @CWE194_Unexpected_Sign_Extension__rand_strncpy_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc170)
    cir.call @CWE194_Unexpected_Sign_Extension__rand_strncpy_17_bad() : () -> () loc(#loc84)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc68)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc87)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc171)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc171)
    cir.return %17 : !s32i loc(#loc171)
  } loc(#loc166)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc173)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc174)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc95)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc95)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc175)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc99)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc177)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc102)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc178)
        cir.condition(%7) loc(#loc103)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<100> : !s32i loc(#loc105)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc106)
          %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc105)
          %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc105)
          cir.store %8, %1 : !s16i, !cir.ptr<!s16i> loc(#loc180)
        } loc(#loc179)
        cir.yield loc(#loc98)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc108)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc109)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc181)
        cir.yield loc(#loc176)
      } loc(#loc176)
    } loc(#loc176)
    cir.scope {
      %4 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc183)
      %5 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dest"] {alignment = 16 : i64} loc(#loc184)
      %6 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc184)
      cir.store %6, %5 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc184)
      %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc116)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc116)
      %9 = cir.const #cir.int<65> : !s32i loc(#loc117)
      %10 = cir.const #cir.int<100> : !s32i loc(#loc118)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc119)
      %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc118)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc118)
      cir.libc.memset %13 bytes from %8 set to %9 : !cir.ptr<!void>, !s32i, !u64i loc(#loc185)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc122)
      %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc122)
      %16 = cir.const #cir.int<100> : !s32i loc(#loc123)
      %17 = cir.const #cir.int<1> : !s32i loc(#loc124)
      %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc123)
      %19 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc125)
      %20 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %18 : !s32i), !cir.ptr<!s8i> loc(#loc125)
      cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc186)
      cir.scope {
        %22 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc128)
        %23 = cir.cast(integral, %22 : !s16i), !s32i loc(#loc128)
        %24 = cir.const #cir.int<100> : !s32i loc(#loc129)
        %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc188)
        cir.if %25 {
          %26 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc131)
          %27 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc132)
          %28 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc133)
          %29 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc134)
          %30 = cir.cast(integral, %29 : !s16i), !u64i loc(#loc134)
          %31 = cir.call @strncpy(%27, %28, %30) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc131)
          %32 = cir.const #cir.int<0> : !s32i loc(#loc135)
          %33 = cir.cast(integral, %32 : !s32i), !s8i loc(#loc135)
          %34 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc136)
          %35 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc137)
          %36 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %34 : !s16i), !cir.ptr<!s8i> loc(#loc137)
          cir.store %33, %36 : !s8i, !cir.ptr<!s8i> loc(#loc190)
        } loc(#loc189)
      } loc(#loc187)
      %21 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc138)
      cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc139)
    } loc(#loc182)
    cir.return loc(#loc90)
  } loc(#loc172)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE194_Unexpected_Sign_Extension/s02/CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/string.h":144:1)
#loc4 = loc("/usr/include/string.h":146:14)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":21:1)
#loc8 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":46:1)
#loc9 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":23:5)
#loc10 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":23:9)
#loc11 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":24:5)
#loc12 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":24:11)
#loc13 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":26:12)
#loc14 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":26:5)
#loc15 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":27:5)
#loc16 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":31:5)
#loc17 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":27:13)
#loc18 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":27:9)
#loc19 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":27:16)
#loc20 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":27:20)
#loc21 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":27:18)
#loc22 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":28:5)
#loc23 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":30:23)
#loc24 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":30:9)
#loc25 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":27:24)
#loc26 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":27:23)
#loc27 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":32:5)
#loc28 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":45:5)
#loc29 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":33:9)
#loc30 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":33:24)
#loc31 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":34:9)
#loc32 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":34:26)
#loc33 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":35:16)
#loc34 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":35:24)
#loc35 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":35:29)
#loc36 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":35:33)
#loc37 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":35:9)
#loc38 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":35:34)
#loc39 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":36:25)
#loc40 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":36:16)
#loc41 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":36:20)
#loc42 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":36:9)
#loc43 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":37:9)
#loc44 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":43:9)
#loc45 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":37:13)
#loc46 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":37:20)
#loc47 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":38:9)
#loc48 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":41:13)
#loc49 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":41:21)
#loc50 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":41:27)
#loc51 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":41:35)
#loc52 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":42:26)
#loc53 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":42:18)
#loc54 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":42:13)
#loc55 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":44:19)
#loc56 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":44:9)
#loc57 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":80:1)
#loc58 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":83:1)
#loc59 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":82:5)
#loc60 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":82:13)
#loc61 = loc("/usr/include/stdlib.h":575:1)
#loc62 = loc("/usr/include/stdlib.h":575:41)
#loc63 = loc("/usr/include/time.h":76:1)
#loc64 = loc("/usr/include/time.h":76:38)
#loc65 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":100:15)
#loc66 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":102:15)
#loc67 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":105:15)
#loc68 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":107:15)
#loc69 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":95:1)
#loc70 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":110:1)
#loc75 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":96:1)
#loc76 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":98:27)
#loc77 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":98:22)
#loc78 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":98:5)
#loc79 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":100:5)
#loc80 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":101:5)
#loc81 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":101:60)
#loc82 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":102:5)
#loc83 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":105:5)
#loc84 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":106:5)
#loc85 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":106:59)
#loc86 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":107:5)
#loc87 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":109:12)
#loc88 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":109:5)
#loc89 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":53:1)
#loc90 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":78:1)
#loc91 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":55:5)
#loc92 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":55:9)
#loc93 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":56:5)
#loc94 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":56:11)
#loc95 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":58:12)
#loc96 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":58:5)
#loc97 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":59:5)
#loc98 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":63:5)
#loc99 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":59:13)
#loc100 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":59:9)
#loc101 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":59:16)
#loc102 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":59:20)
#loc103 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":59:18)
#loc104 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":60:5)
#loc105 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":62:16)
#loc106 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":62:20)
#loc107 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":62:9)
#loc108 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":59:24)
#loc109 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":59:23)
#loc110 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":64:5)
#loc111 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":77:5)
#loc112 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":65:9)
#loc113 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":65:24)
#loc114 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":66:9)
#loc115 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":66:26)
#loc116 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":67:16)
#loc117 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":67:24)
#loc118 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":67:29)
#loc119 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":67:33)
#loc120 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":67:9)
#loc121 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":67:34)
#loc122 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":68:25)
#loc123 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":68:16)
#loc124 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":68:20)
#loc125 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":68:9)
#loc126 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":69:9)
#loc127 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":75:9)
#loc128 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":69:13)
#loc129 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":69:20)
#loc130 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":70:9)
#loc131 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":73:13)
#loc132 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":73:21)
#loc133 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":73:27)
#loc134 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":73:35)
#loc135 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":74:26)
#loc136 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":74:18)
#loc137 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":74:13)
#loc138 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":76:19)
#loc139 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_17.c":76:9)
#loc140 = loc(fused[#loc1, #loc2])
#loc141 = loc(fused[#loc3, #loc4])
#loc142 = loc(fused[#loc5, #loc6])
#loc143 = loc(fused[#loc7, #loc8])
#loc144 = loc(fused[#loc9, #loc10])
#loc145 = loc(fused[#loc11, #loc12])
#loc146 = loc(fused[#loc14, #loc13])
#loc147 = loc(fused[#loc15, #loc16])
#loc148 = loc(fused[#loc18, #loc17])
#loc149 = loc(fused[#loc19, #loc20])
#loc150 = loc(fused[#loc22, #loc16])
#loc151 = loc(fused[#loc24, #loc23])
#loc152 = loc(fused[#loc26, #loc25])
#loc153 = loc(fused[#loc27, #loc28])
#loc154 = loc(fused[#loc29, #loc30])
#loc155 = loc(fused[#loc31, #loc32])
#loc156 = loc(fused[#loc37, #loc38])
#loc157 = loc(fused[#loc42, #loc39])
#loc158 = loc(fused[#loc43, #loc44])
#loc159 = loc(fused[#loc45, #loc46])
#loc160 = loc(fused[#loc47, #loc44])
#loc161 = loc(fused[#loc54, #loc52])
#loc162 = loc(fused[#loc57, #loc58])
#loc163 = loc(fused[#loc59, #loc60])
#loc164 = loc(fused[#loc61, #loc62])
#loc165 = loc(fused[#loc63, #loc64])
#loc166 = loc(fused[#loc69, #loc70])
#loc169 = loc(fused[#loc80, #loc81])
#loc170 = loc(fused[#loc84, #loc85])
#loc171 = loc(fused[#loc88, #loc87])
#loc172 = loc(fused[#loc89, #loc90])
#loc173 = loc(fused[#loc91, #loc92])
#loc174 = loc(fused[#loc93, #loc94])
#loc175 = loc(fused[#loc96, #loc95])
#loc176 = loc(fused[#loc97, #loc98])
#loc177 = loc(fused[#loc100, #loc99])
#loc178 = loc(fused[#loc101, #loc102])
#loc179 = loc(fused[#loc104, #loc98])
#loc180 = loc(fused[#loc107, #loc106])
#loc181 = loc(fused[#loc109, #loc108])
#loc182 = loc(fused[#loc110, #loc111])
#loc183 = loc(fused[#loc112, #loc113])
#loc184 = loc(fused[#loc114, #loc115])
#loc185 = loc(fused[#loc120, #loc121])
#loc186 = loc(fused[#loc125, #loc122])
#loc187 = loc(fused[#loc126, #loc127])
#loc188 = loc(fused[#loc128, #loc129])
#loc189 = loc(fused[#loc130, #loc127])
#loc190 = loc(fused[#loc137, #loc135])
