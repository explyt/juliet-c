!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":101:10)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":101:14)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":101:20)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":101:32)
#loc123 = loc(fused[#loc80, #loc81])
#loc124 = loc(fused[#loc82, #loc83])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_629badSourceERl(!cir.ptr<!s64i>) loc(#loc96)
  cir.func private @printLongLongLine(!s64i) loc(#loc97)
  cir.func @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_623badEv() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc99)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc100)
    cir.call @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_629badSourceERl(%0) : (!cir.ptr<!s64i>) -> () loc(#loc11)
    cir.scope {
      %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc102)
      %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc16)
      %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc15)
      %5 = cir.binop(mul, %3, %4) nsw : !s64i loc(#loc16)
      cir.store %5, %2 : !s64i, !cir.ptr<!s64i> loc(#loc102)
      %6 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc17)
      cir.call @printLongLongLine(%6) : (!s64i) -> () loc(#loc18)
    } loc(#loc101)
    cir.return loc(#loc6)
  } loc(#loc98)
  cir.func private @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_6213goodG2BSourceERl(!cir.ptr<!s64i>) loc(#loc103)
  cir.func internal private @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_62L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc105)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc25)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc106)
    cir.call @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_6213goodG2BSourceERl(%0) : (!cir.ptr<!s64i>) -> () loc(#loc27)
    cir.scope {
      %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc108)
      %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc32)
      %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc31)
      %5 = cir.binop(mul, %3, %4) nsw : !s64i loc(#loc32)
      cir.store %5, %2 : !s64i, !cir.ptr<!s64i> loc(#loc108)
      %6 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc33)
      cir.call @printLongLongLine(%6) : (!s64i) -> () loc(#loc34)
    } loc(#loc107)
    cir.return loc(#loc22)
  } loc(#loc104)
  cir.func private @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_6213goodB2GSourceERl(!cir.ptr<!s64i>) loc(#loc109)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc110)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc40)
  cir.func internal private @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_62L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc112)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc45)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc113)
    cir.call @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_6213goodB2GSourceERl(%0) : (!cir.ptr<!s64i>) -> () loc(#loc47)
    cir.scope {
      %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc50)
      %3 = cir.call @imaxabs(%2) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc51)
      %4 = cir.cast(int_to_float, %3 : !s64i), !cir.long_double<!cir.f80> loc(#loc51)
      %5 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc52)
      %6 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc53)
      %7 = cir.cast(int_to_float, %6 : !s64i), !cir.long_double<!cir.f80> loc(#loc53)
      %8 = cir.call @sqrtl(%7) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc52)
      %9 = cir.cmp(le, %4, %8) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc115)
      cir.if %9 {
        %10 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc117)
        %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc60)
        %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc59)
        %13 = cir.binop(mul, %11, %12) nsw : !s64i loc(#loc60)
        cir.store %13, %10 : !s64i, !cir.ptr<!s64i> loc(#loc117)
        %14 = cir.load %10 : !cir.ptr<!s64i>, !s64i loc(#loc61)
        cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc62)
      } else {
        %10 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc40)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc40)
        cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc63)
      } loc(#loc116)
    } loc(#loc114)
    cir.return loc(#loc42)
  } loc(#loc111)
  cir.func @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_624goodEv() extra(#fn_attr) {
    cir.call @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_62L7goodG2BEv() : () -> () loc(#loc66)
    cir.call @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_62L7goodB2GEv() : () -> () loc(#loc67)
    cir.return loc(#loc65)
  } loc(#loc118)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc119)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc120)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc121)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc77)
  cir.func @main(%arg0: !s32i loc(fused[#loc80, #loc81]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc82, #loc83])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc123)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc124)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc79)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc84)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc85)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc86)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc86)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc87)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc74)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    cir.call @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_624goodEv() : () -> () loc(#loc89)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc75)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc76)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    cir.call @_ZN47CWE190_Integer_Overflow__int64_t_rand_square_623badEv() : () -> () loc(#loc92)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc77)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc94)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc125)
    cir.return %15 : !s32i loc(#loc125)
  } loc(#loc122)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":29:1)
#loc2 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":29:29)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":31:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":41:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":33:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":33:13)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":34:12)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":34:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":35:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":36:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":40:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":38:9)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":38:33)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":38:26)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":39:27)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":39:9)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":48:1)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":48:33)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":50:1)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":60:1)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":52:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":52:13)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":53:12)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":53:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":54:5)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":55:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":59:5)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":57:9)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":57:33)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":57:26)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":58:27)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":58:9)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":63:1)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":63:33)
#loc37 = loc("/usr/include/inttypes.h":351:1)
#loc38 = loc("/usr/include/inttypes.h":351:74)
#loc39 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":78:19)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":65:1)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":80:1)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":67:5)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":67:13)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":68:12)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":68:5)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":69:5)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":71:5)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":79:5)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":71:27)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":71:9)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":71:36)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":71:42)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":71:51)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":72:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":75:5)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":77:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":73:9)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":73:33)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":73:26)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":74:27)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":74:9)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":78:9)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":82:1)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":86:1)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":84:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":85:5)
#loc68 = loc("/usr/include/stdlib.h":575:1)
#loc69 = loc("/usr/include/stdlib.h":575:41)
#loc70 = loc("/usr/include/time.h":76:1)
#loc71 = loc("/usr/include/time.h":76:38)
#loc72 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc73 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":106:15)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":108:15)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":111:15)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":113:15)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":101:1)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":116:1)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":102:1)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":104:27)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":104:22)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":104:5)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":106:5)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":107:5)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":108:5)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":111:5)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":112:5)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":113:5)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":115:12)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_square_62a.cpp":115:5)
#loc96 = loc(fused[#loc1, #loc2])
#loc97 = loc(fused[#loc3, #loc4])
#loc98 = loc(fused[#loc5, #loc6])
#loc99 = loc(fused[#loc7, #loc8])
#loc100 = loc(fused[#loc10, #loc9])
#loc101 = loc(fused[#loc12, #loc13])
#loc102 = loc(fused[#loc14, #loc15])
#loc103 = loc(fused[#loc19, #loc20])
#loc104 = loc(fused[#loc21, #loc22])
#loc105 = loc(fused[#loc23, #loc24])
#loc106 = loc(fused[#loc26, #loc25])
#loc107 = loc(fused[#loc28, #loc29])
#loc108 = loc(fused[#loc30, #loc31])
#loc109 = loc(fused[#loc35, #loc36])
#loc110 = loc(fused[#loc37, #loc38])
#loc111 = loc(fused[#loc41, #loc42])
#loc112 = loc(fused[#loc43, #loc44])
#loc113 = loc(fused[#loc46, #loc45])
#loc114 = loc(fused[#loc48, #loc49])
#loc115 = loc(fused[#loc51, #loc54])
#loc116 = loc(fused[#loc55, #loc56, #loc57, #loc49])
#loc117 = loc(fused[#loc58, #loc59])
#loc118 = loc(fused[#loc64, #loc65])
#loc119 = loc(fused[#loc68, #loc69])
#loc120 = loc(fused[#loc70, #loc71])
#loc121 = loc(fused[#loc72, #loc73])
#loc122 = loc(fused[#loc78, #loc79])
#loc125 = loc(fused[#loc95, #loc94])
