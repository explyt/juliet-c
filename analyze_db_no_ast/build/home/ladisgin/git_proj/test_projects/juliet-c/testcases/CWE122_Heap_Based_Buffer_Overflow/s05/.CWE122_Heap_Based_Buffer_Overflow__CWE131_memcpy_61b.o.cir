!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":21:70)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":21:76)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":34:74)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":34:80)
#loc50 = loc(fused[#loc7, #loc8])
#loc58 = loc(fused[#loc27, #loc28])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc47)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc48)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b_badSource(%arg0: !cir.ptr<!s32i> loc(fused[#loc7, #loc8])) -> !cir.ptr<!s32i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc50)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["__retval"] {alignment = 8 : i64} loc(#loc6)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc9)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc10)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc11)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc11)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc10)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc51)
    cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc52)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc16)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc17)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc17)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !s32i loc(#loc54)
      %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc18)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc20)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc22)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc20)
      } loc(#loc55)
    } loc(#loc53)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc23)
    cir.store %7, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc56)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc56)
    cir.return %8 : !cir.ptr<!s32i> loc(#loc56)
  } loc(#loc49)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b_goodG2BSource(%arg0: !cir.ptr<!s32i> loc(fused[#loc27, #loc28])) -> !cir.ptr<!s32i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc58)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["__retval"] {alignment = 8 : i64} loc(#loc26)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc29)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc30)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc31)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc31)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc59)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc60)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc30)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc61)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc62)
    cir.scope {
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc38)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc39)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc39)
      %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !s32i loc(#loc64)
      %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc40)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc42)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc43)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc44)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc42)
      } loc(#loc65)
    } loc(#loc63)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc45)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc66)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc66)
    cir.return %10 : !cir.ptr<!s32i> loc(#loc66)
  } loc(#loc57)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":27:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":22:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":24:19)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":24:26)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":24:28)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":24:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":25:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":25:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":25:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":25:17)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":25:14)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":25:23)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":25:24)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":25:30)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":25:29)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":26:12)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":26:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":34:1)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":40:1)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":35:1)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":37:19)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":37:26)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":37:29)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":37:39)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":37:40)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":37:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":38:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":38:33)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":38:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":38:17)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":38:14)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":38:23)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":38:24)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":38:30)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":38:29)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":39:12)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c":39:5)
#loc47 = loc(fused[#loc1, #loc2])
#loc48 = loc(fused[#loc3, #loc4])
#loc49 = loc(fused[#loc5, #loc6])
#loc51 = loc(fused[#loc10, #loc12])
#loc52 = loc(fused[#loc13, #loc12])
#loc53 = loc(fused[#loc14, #loc15])
#loc54 = loc(fused[#loc16, #loc17])
#loc55 = loc(fused[#loc19, #loc15])
#loc56 = loc(fused[#loc24, #loc23])
#loc57 = loc(fused[#loc25, #loc26])
#loc59 = loc(fused[#loc32, #loc33])
#loc60 = loc(fused[#loc31, #loc33])
#loc61 = loc(fused[#loc30, #loc34])
#loc62 = loc(fused[#loc35, #loc34])
#loc63 = loc(fused[#loc36, #loc37])
#loc64 = loc(fused[#loc38, #loc39])
#loc65 = loc(fused[#loc41, #loc37])
#loc66 = loc(fused[#loc46, #loc45])
