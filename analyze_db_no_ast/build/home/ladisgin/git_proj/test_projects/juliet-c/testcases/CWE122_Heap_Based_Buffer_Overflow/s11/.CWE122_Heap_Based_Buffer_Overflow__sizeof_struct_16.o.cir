!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc79)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc80)
  cir.func private  @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc81)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc82)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc84)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc85)
    cir.scope {
      cir.while {
        %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc17)
        cir.condition(%7) loc(#loc17)
      } do {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc18)
        %7 = cir.const #cir.int<8> : !u64i loc(#loc87)
        %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc18)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc88)
        cir.store %9, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc89)
        cir.scope {
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc25)
          %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc26)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc26)
          %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!ty__twoIntsStruct>, !s32i loc(#loc91)
          %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc27)
          cir.if %20 {
            %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc29)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc30)
            %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc31)
            cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc29)
          } loc(#loc92)
        } loc(#loc90)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc32)
        %11 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc33)
        %12 = cir.get_member %11[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc34)
        cir.store %10, %12 : !s32i, !cir.ptr<!s32i> loc(#loc93)
        %13 = cir.const #cir.int<2> : !s32i loc(#loc35)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc36)
        %15 = cir.get_member %14[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc37)
        cir.store %13, %15 : !s32i, !cir.ptr<!s32i> loc(#loc94)
        cir.break loc(#loc38)
      } loc(#loc86)
    } loc(#loc86)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc39)
    cir.call @printStructLine(%2) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc40)
    %3 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc41)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc42)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc42)
    cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc41)
    cir.return loc(#loc10)
  } loc(#loc83)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc96)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    cir.return loc(#loc44)
  } loc(#loc95)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc98)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc51)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc99)
    cir.scope {
      cir.while {
        %6 = cir.const #cir.int<1> : !s32i loc(#loc55)
        %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc55)
        cir.condition(%7) loc(#loc55)
      } do {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc56)
        %7 = cir.const #cir.int<8> : !u64i loc(#loc101)
        %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc56)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc102)
        cir.store %9, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc103)
        cir.scope {
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc63)
          %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc64)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc64)
          %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!ty__twoIntsStruct>, !s32i loc(#loc105)
          %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc65)
          cir.if %20 {
            %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc67)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc68)
            %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc69)
            cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc67)
          } loc(#loc106)
        } loc(#loc104)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc70)
        %11 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc71)
        %12 = cir.get_member %11[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc34)
        cir.store %10, %12 : !s32i, !cir.ptr<!s32i> loc(#loc107)
        %13 = cir.const #cir.int<2> : !s32i loc(#loc72)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc73)
        %15 = cir.get_member %14[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc37)
        cir.store %13, %15 : !s32i, !cir.ptr<!s32i> loc(#loc108)
        cir.break loc(#loc74)
      } loc(#loc100)
    } loc(#loc100)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc75)
    cir.call @printStructLine(%2) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc76)
    %3 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc77)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc78)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc78)
    cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc77)
    cir.return loc(#loc48)
  } loc(#loc97)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":39:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":23:21)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":25:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":25:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":26:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":35:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":26:11)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":30:33)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":30:40)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":30:51)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":30:52)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":30:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":31:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":31:37)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":31:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":31:21)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":31:18)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":31:27)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":31:28)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":31:34)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":31:33)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":32:24)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":32:9)
#loc34 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":33:24)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":33:9)
#loc37 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":34:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":37:21)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":37:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":38:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":38:10)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":65:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":68:1)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":67:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":67:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":46:1)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":63:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":48:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":48:21)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":50:12)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":50:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":51:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":59:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":51:11)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":54:33)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":54:40)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":54:52)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":54:53)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":54:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":55:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":55:37)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":55:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":55:21)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":55:18)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":55:27)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":55:28)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":55:34)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":55:33)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":56:24)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":56:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":57:24)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":57:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":58:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":61:21)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":61:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":62:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c":62:10)
#loc79 = loc(fused[#loc1, #loc2])
#loc80 = loc(fused[#loc3, #loc4])
#loc81 = loc(fused[#loc5, #loc6])
#loc82 = loc(fused[#loc7, #loc8])
#loc83 = loc(fused[#loc9, #loc10])
#loc84 = loc(fused[#loc11, #loc12])
#loc85 = loc(fused[#loc14, #loc13])
#loc86 = loc(fused[#loc15, #loc16])
#loc87 = loc(fused[#loc19, #loc20])
#loc88 = loc(fused[#loc18, #loc21])
#loc89 = loc(fused[#loc22, #loc21])
#loc90 = loc(fused[#loc23, #loc24])
#loc91 = loc(fused[#loc25, #loc26])
#loc92 = loc(fused[#loc28, #loc24])
#loc93 = loc(fused[#loc33, #loc32])
#loc94 = loc(fused[#loc36, #loc35])
#loc95 = loc(fused[#loc43, #loc44])
#loc96 = loc(fused[#loc45, #loc46])
#loc97 = loc(fused[#loc47, #loc48])
#loc98 = loc(fused[#loc49, #loc50])
#loc99 = loc(fused[#loc52, #loc51])
#loc100 = loc(fused[#loc53, #loc54])
#loc101 = loc(fused[#loc57, #loc58])
#loc102 = loc(fused[#loc56, #loc59])
#loc103 = loc(fused[#loc60, #loc59])
#loc104 = loc(fused[#loc61, #loc62])
#loc105 = loc(fused[#loc63, #loc64])
#loc106 = loc(fused[#loc66, #loc62])
#loc107 = loc(fused[#loc71, #loc70])
#loc108 = loc(fused[#loc73, #loc72])
