!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc167)
  cir.func private @printIntLine(!s32i) loc(#loc168)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc169)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc171)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc13)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc174)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc174)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc17)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc17)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc22)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc176)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc24)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc177)
      } loc(#loc175)
    } loc(#loc173)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc179)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc179)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc28)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc28)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc182)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc36)
          %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc37)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc182)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc38)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc39)
        } loc(#loc181)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc43)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc43)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc43)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc43)
          %11 = cir.cmp(gt, %6, %10) : !s32i, !cir.bool loc(#loc184)
          %12 = cir.ternary(%11, true {
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
            %14 = cir.abs %13 poison : !s32i loc(#loc46)
            %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc46)
            %16 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc47)
            %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc48)
            %18 = cir.cast(int_to_float, %17 : !s32i), !cir.double loc(#loc48)
            %19 = cir.call @sqrt(%18) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc47)
            %20 = cir.cast(float_to_int, %19 : !cir.double), !s64i loc(#loc47)
            %21 = cir.cmp(lt, %15, %20) : !s64i, !cir.bool loc(#loc185)
            %22 = cir.ternary(%21, true {
              %23 = cir.const #true loc(#loc44)
              cir.yield %23 : !cir.bool loc(#loc44)
            }, false {
              %23 = cir.const #false loc(#loc44)
              cir.yield %23 : !cir.bool loc(#loc44)
            }) : (!cir.bool) -> !cir.bool loc(#loc44)
            cir.yield %22 : !cir.bool loc(#loc44)
          }, false {
            %13 = cir.const #false loc(#loc44)
            cir.yield %13 : !cir.bool loc(#loc44)
          }) : (!cir.bool) -> !cir.bool loc(#loc44)
          cir.if %12 {
            %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc187)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc55)
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
            %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc55)
            cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc187)
            %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc56)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc57)
          } else {
            %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc8)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc8)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc58)
          } loc(#loc186)
        } loc(#loc183)
      } loc(#loc180)
    } loc(#loc178)
    cir.return loc(#loc10)
  } loc(#loc170)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc189)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc61)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc190)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc63)
    cir.return loc(#loc60)
  } loc(#loc188)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc192)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc69)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc195)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc195)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc73)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc73)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc78)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
      } else {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc80)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc198)
      } loc(#loc196)
    } loc(#loc194)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc200)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc200)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc84)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc84)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc91)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc92)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc92)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc92)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc92)
          %11 = cir.cmp(gt, %6, %10) : !s32i, !cir.bool loc(#loc203)
          %12 = cir.ternary(%11, true {
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
            %14 = cir.abs %13 poison : !s32i loc(#loc95)
            %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc95)
            %16 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc96)
            %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc97)
            %18 = cir.cast(int_to_float, %17 : !s32i), !cir.double loc(#loc97)
            %19 = cir.call @sqrt(%18) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc96)
            %20 = cir.cast(float_to_int, %19 : !cir.double), !s64i loc(#loc96)
            %21 = cir.cmp(lt, %15, %20) : !s64i, !cir.bool loc(#loc204)
            %22 = cir.ternary(%21, true {
              %23 = cir.const #true loc(#loc93)
              cir.yield %23 : !cir.bool loc(#loc93)
            }, false {
              %23 = cir.const #false loc(#loc93)
              cir.yield %23 : !cir.bool loc(#loc93)
            }) : (!cir.bool) -> !cir.bool loc(#loc93)
            cir.yield %22 : !cir.bool loc(#loc93)
          }, false {
            %13 = cir.const #false loc(#loc93)
            cir.yield %13 : !cir.bool loc(#loc93)
          }) : (!cir.bool) -> !cir.bool loc(#loc93)
          cir.if %12 {
            %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc206)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc104)
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
            %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc104)
            cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc206)
            %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc105)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc106)
          } else {
            %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc107)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc107)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc108)
          } loc(#loc205)
        } loc(#loc202)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc112)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc112)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc112)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc112)
          %11 = cir.cmp(gt, %6, %10) : !s32i, !cir.bool loc(#loc208)
          %12 = cir.ternary(%11, true {
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc114)
            %14 = cir.abs %13 poison : !s32i loc(#loc115)
            %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc115)
            %16 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc116)
            %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc117)
            %18 = cir.cast(int_to_float, %17 : !s32i), !cir.double loc(#loc117)
            %19 = cir.call @sqrt(%18) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc116)
            %20 = cir.cast(float_to_int, %19 : !cir.double), !s64i loc(#loc116)
            %21 = cir.cmp(lt, %15, %20) : !s64i, !cir.bool loc(#loc209)
            %22 = cir.ternary(%21, true {
              %23 = cir.const #true loc(#loc113)
              cir.yield %23 : !cir.bool loc(#loc113)
            }, false {
              %23 = cir.const #false loc(#loc113)
              cir.yield %23 : !cir.bool loc(#loc113)
            }) : (!cir.bool) -> !cir.bool loc(#loc113)
            cir.yield %22 : !cir.bool loc(#loc113)
          }, false {
            %13 = cir.const #false loc(#loc113)
            cir.yield %13 : !cir.bool loc(#loc113)
          }) : (!cir.bool) -> !cir.bool loc(#loc113)
          cir.if %12 {
            %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc211)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc124)
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
            %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc124)
            cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc211)
            %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc125)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc126)
          } else {
            %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc127)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc127)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc128)
          } loc(#loc210)
        } loc(#loc207)
      } loc(#loc201)
    } loc(#loc199)
    cir.return loc(#loc66)
  } loc(#loc191)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc213)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc133)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc216)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc216)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc137)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc137)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc142)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc218)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc144)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc219)
      } loc(#loc217)
    } loc(#loc215)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc221)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc221)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc148)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc148)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc224)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc156)
          %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc157)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc224)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc158)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc159)
        } loc(#loc223)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc226)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc164)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc163)
          %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc164)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc226)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc165)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc166)
        } loc(#loc225)
      } loc(#loc222)
    } loc(#loc220)
    cir.return loc(#loc130)
  } loc(#loc212)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE190_Integer_Overflow__int_max_square_12.c":57:23)
#loc9 = loc("CWE190_Integer_Overflow__int_max_square_12.c":24:1)
#loc10 = loc("CWE190_Integer_Overflow__int_max_square_12.c":60:1)
#loc11 = loc("CWE190_Integer_Overflow__int_max_square_12.c":26:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_square_12.c":26:9)
#loc13 = loc("CWE190_Integer_Overflow__int_max_square_12.c":28:12)
#loc14 = loc("CWE190_Integer_Overflow__int_max_square_12.c":28:5)
#loc15 = loc("CWE190_Integer_Overflow__int_max_square_12.c":29:5)
#loc16 = loc("CWE190_Integer_Overflow__int_max_square_12.c":38:5)
#loc17 = loc("CWE190_Integer_Overflow__int_max_square_12.c":29:8)
#loc18 = loc("CWE190_Integer_Overflow__int_max_square_12.c":29:33)
#loc19 = loc("CWE190_Integer_Overflow__int_max_square_12.c":30:5)
#loc20 = loc("CWE190_Integer_Overflow__int_max_square_12.c":33:5)
#loc21 = loc("CWE190_Integer_Overflow__int_max_square_12.c":35:5)
#loc22 = loc("CWE190_Integer_Overflow__int_max_square_12.c":32:16)
#loc23 = loc("CWE190_Integer_Overflow__int_max_square_12.c":32:9)
#loc24 = loc("CWE190_Integer_Overflow__int_max_square_12.c":37:16)
#loc25 = loc("CWE190_Integer_Overflow__int_max_square_12.c":37:9)
#loc26 = loc("CWE190_Integer_Overflow__int_max_square_12.c":39:5)
#loc27 = loc("CWE190_Integer_Overflow__int_max_square_12.c":59:5)
#loc28 = loc("CWE190_Integer_Overflow__int_max_square_12.c":39:8)
#loc29 = loc("CWE190_Integer_Overflow__int_max_square_12.c":39:33)
#loc30 = loc("CWE190_Integer_Overflow__int_max_square_12.c":40:5)
#loc31 = loc("CWE190_Integer_Overflow__int_max_square_12.c":46:5)
#loc32 = loc("CWE190_Integer_Overflow__int_max_square_12.c":48:5)
#loc33 = loc("CWE190_Integer_Overflow__int_max_square_12.c":41:9)
#loc34 = loc("CWE190_Integer_Overflow__int_max_square_12.c":45:9)
#loc35 = loc("CWE190_Integer_Overflow__int_max_square_12.c":43:13)
#loc36 = loc("CWE190_Integer_Overflow__int_max_square_12.c":43:33)
#loc37 = loc("CWE190_Integer_Overflow__int_max_square_12.c":43:26)
#loc38 = loc("CWE190_Integer_Overflow__int_max_square_12.c":44:26)
#loc39 = loc("CWE190_Integer_Overflow__int_max_square_12.c":44:13)
#loc40 = loc("CWE190_Integer_Overflow__int_max_square_12.c":50:9)
#loc41 = loc("CWE190_Integer_Overflow__int_max_square_12.c":58:9)
#loc42 = loc("CWE190_Integer_Overflow__int_max_square_12.c":50:13)
#loc43 = loc("CWE190_Integer_Overflow__int_max_square_12.c":50:20)
#loc44 = loc("CWE190_Integer_Overflow__int_max_square_12.c":50:28)
#loc45 = loc("CWE190_Integer_Overflow__int_max_square_12.c":50:35)
#loc46 = loc("CWE190_Integer_Overflow__int_max_square_12.c":50:31)
#loc47 = loc("CWE190_Integer_Overflow__int_max_square_12.c":50:49)
#loc48 = loc("CWE190_Integer_Overflow__int_max_square_12.c":50:62)
#loc49 = loc("CWE190_Integer_Overflow__int_max_square_12.c":50:69)
#loc50 = loc("CWE190_Integer_Overflow__int_max_square_12.c":51:9)
#loc51 = loc("CWE190_Integer_Overflow__int_max_square_12.c":54:9)
#loc52 = loc("CWE190_Integer_Overflow__int_max_square_12.c":56:9)
#loc53 = loc("CWE190_Integer_Overflow__int_max_square_12.c":52:13)
#loc54 = loc("CWE190_Integer_Overflow__int_max_square_12.c":52:33)
#loc55 = loc("CWE190_Integer_Overflow__int_max_square_12.c":52:26)
#loc56 = loc("CWE190_Integer_Overflow__int_max_square_12.c":53:26)
#loc57 = loc("CWE190_Integer_Overflow__int_max_square_12.c":53:13)
#loc58 = loc("CWE190_Integer_Overflow__int_max_square_12.c":57:13)
#loc59 = loc("CWE190_Integer_Overflow__int_max_square_12.c":148:1)
#loc60 = loc("CWE190_Integer_Overflow__int_max_square_12.c":152:1)
#loc61 = loc("CWE190_Integer_Overflow__int_max_square_12.c":150:5)
#loc62 = loc("CWE190_Integer_Overflow__int_max_square_12.c":150:13)
#loc63 = loc("CWE190_Integer_Overflow__int_max_square_12.c":151:5)
#loc64 = loc("CWE190_Integer_Overflow__int_max_square_12.c":151:13)
#loc65 = loc("CWE190_Integer_Overflow__int_max_square_12.c":69:1)
#loc66 = loc("CWE190_Integer_Overflow__int_max_square_12.c":110:1)
#loc67 = loc("CWE190_Integer_Overflow__int_max_square_12.c":71:5)
#loc68 = loc("CWE190_Integer_Overflow__int_max_square_12.c":71:9)
#loc69 = loc("CWE190_Integer_Overflow__int_max_square_12.c":73:12)
#loc70 = loc("CWE190_Integer_Overflow__int_max_square_12.c":73:5)
#loc71 = loc("CWE190_Integer_Overflow__int_max_square_12.c":74:5)
#loc72 = loc("CWE190_Integer_Overflow__int_max_square_12.c":83:5)
#loc73 = loc("CWE190_Integer_Overflow__int_max_square_12.c":74:8)
#loc74 = loc("CWE190_Integer_Overflow__int_max_square_12.c":74:33)
#loc75 = loc("CWE190_Integer_Overflow__int_max_square_12.c":75:5)
#loc76 = loc("CWE190_Integer_Overflow__int_max_square_12.c":78:5)
#loc77 = loc("CWE190_Integer_Overflow__int_max_square_12.c":80:5)
#loc78 = loc("CWE190_Integer_Overflow__int_max_square_12.c":77:16)
#loc79 = loc("CWE190_Integer_Overflow__int_max_square_12.c":77:9)
#loc80 = loc("CWE190_Integer_Overflow__int_max_square_12.c":82:16)
#loc81 = loc("CWE190_Integer_Overflow__int_max_square_12.c":82:9)
#loc82 = loc("CWE190_Integer_Overflow__int_max_square_12.c":84:5)
#loc83 = loc("CWE190_Integer_Overflow__int_max_square_12.c":109:5)
#loc84 = loc("CWE190_Integer_Overflow__int_max_square_12.c":84:8)
#loc85 = loc("CWE190_Integer_Overflow__int_max_square_12.c":84:33)
#loc86 = loc("CWE190_Integer_Overflow__int_max_square_12.c":85:5)
#loc87 = loc("CWE190_Integer_Overflow__int_max_square_12.c":96:5)
#loc88 = loc("CWE190_Integer_Overflow__int_max_square_12.c":98:5)
#loc89 = loc("CWE190_Integer_Overflow__int_max_square_12.c":87:9)
#loc90 = loc("CWE190_Integer_Overflow__int_max_square_12.c":95:9)
#loc91 = loc("CWE190_Integer_Overflow__int_max_square_12.c":87:13)
#loc92 = loc("CWE190_Integer_Overflow__int_max_square_12.c":87:20)
#loc93 = loc("CWE190_Integer_Overflow__int_max_square_12.c":87:28)
#loc94 = loc("CWE190_Integer_Overflow__int_max_square_12.c":87:35)
#loc95 = loc("CWE190_Integer_Overflow__int_max_square_12.c":87:31)
#loc96 = loc("CWE190_Integer_Overflow__int_max_square_12.c":87:49)
#loc97 = loc("CWE190_Integer_Overflow__int_max_square_12.c":87:62)
#loc98 = loc("CWE190_Integer_Overflow__int_max_square_12.c":87:69)
#loc99 = loc("CWE190_Integer_Overflow__int_max_square_12.c":88:9)
#loc100 = loc("CWE190_Integer_Overflow__int_max_square_12.c":91:9)
#loc101 = loc("CWE190_Integer_Overflow__int_max_square_12.c":93:9)
#loc102 = loc("CWE190_Integer_Overflow__int_max_square_12.c":89:13)
#loc103 = loc("CWE190_Integer_Overflow__int_max_square_12.c":89:33)
#loc104 = loc("CWE190_Integer_Overflow__int_max_square_12.c":89:26)
#loc105 = loc("CWE190_Integer_Overflow__int_max_square_12.c":90:26)
#loc106 = loc("CWE190_Integer_Overflow__int_max_square_12.c":90:13)
#loc107 = loc("CWE190_Integer_Overflow__int_max_square_12.c":94:23)
#loc108 = loc("CWE190_Integer_Overflow__int_max_square_12.c":94:13)
#loc109 = loc("CWE190_Integer_Overflow__int_max_square_12.c":100:9)
#loc110 = loc("CWE190_Integer_Overflow__int_max_square_12.c":108:9)
#loc111 = loc("CWE190_Integer_Overflow__int_max_square_12.c":100:13)
#loc112 = loc("CWE190_Integer_Overflow__int_max_square_12.c":100:20)
#loc113 = loc("CWE190_Integer_Overflow__int_max_square_12.c":100:28)
#loc114 = loc("CWE190_Integer_Overflow__int_max_square_12.c":100:35)
#loc115 = loc("CWE190_Integer_Overflow__int_max_square_12.c":100:31)
#loc116 = loc("CWE190_Integer_Overflow__int_max_square_12.c":100:49)
#loc117 = loc("CWE190_Integer_Overflow__int_max_square_12.c":100:62)
#loc118 = loc("CWE190_Integer_Overflow__int_max_square_12.c":100:69)
#loc119 = loc("CWE190_Integer_Overflow__int_max_square_12.c":101:9)
#loc120 = loc("CWE190_Integer_Overflow__int_max_square_12.c":104:9)
#loc121 = loc("CWE190_Integer_Overflow__int_max_square_12.c":106:9)
#loc122 = loc("CWE190_Integer_Overflow__int_max_square_12.c":102:13)
#loc123 = loc("CWE190_Integer_Overflow__int_max_square_12.c":102:33)
#loc124 = loc("CWE190_Integer_Overflow__int_max_square_12.c":102:26)
#loc125 = loc("CWE190_Integer_Overflow__int_max_square_12.c":103:26)
#loc126 = loc("CWE190_Integer_Overflow__int_max_square_12.c":103:13)
#loc127 = loc("CWE190_Integer_Overflow__int_max_square_12.c":107:23)
#loc128 = loc("CWE190_Integer_Overflow__int_max_square_12.c":107:13)
#loc129 = loc("CWE190_Integer_Overflow__int_max_square_12.c":115:1)
#loc130 = loc("CWE190_Integer_Overflow__int_max_square_12.c":146:1)
#loc131 = loc("CWE190_Integer_Overflow__int_max_square_12.c":117:5)
#loc132 = loc("CWE190_Integer_Overflow__int_max_square_12.c":117:9)
#loc133 = loc("CWE190_Integer_Overflow__int_max_square_12.c":119:12)
#loc134 = loc("CWE190_Integer_Overflow__int_max_square_12.c":119:5)
#loc135 = loc("CWE190_Integer_Overflow__int_max_square_12.c":120:5)
#loc136 = loc("CWE190_Integer_Overflow__int_max_square_12.c":129:5)
#loc137 = loc("CWE190_Integer_Overflow__int_max_square_12.c":120:8)
#loc138 = loc("CWE190_Integer_Overflow__int_max_square_12.c":120:33)
#loc139 = loc("CWE190_Integer_Overflow__int_max_square_12.c":121:5)
#loc140 = loc("CWE190_Integer_Overflow__int_max_square_12.c":124:5)
#loc141 = loc("CWE190_Integer_Overflow__int_max_square_12.c":126:5)
#loc142 = loc("CWE190_Integer_Overflow__int_max_square_12.c":123:16)
#loc143 = loc("CWE190_Integer_Overflow__int_max_square_12.c":123:9)
#loc144 = loc("CWE190_Integer_Overflow__int_max_square_12.c":128:16)
#loc145 = loc("CWE190_Integer_Overflow__int_max_square_12.c":128:9)
#loc146 = loc("CWE190_Integer_Overflow__int_max_square_12.c":130:5)
#loc147 = loc("CWE190_Integer_Overflow__int_max_square_12.c":145:5)
#loc148 = loc("CWE190_Integer_Overflow__int_max_square_12.c":130:8)
#loc149 = loc("CWE190_Integer_Overflow__int_max_square_12.c":130:33)
#loc150 = loc("CWE190_Integer_Overflow__int_max_square_12.c":131:5)
#loc151 = loc("CWE190_Integer_Overflow__int_max_square_12.c":137:5)
#loc152 = loc("CWE190_Integer_Overflow__int_max_square_12.c":139:5)
#loc153 = loc("CWE190_Integer_Overflow__int_max_square_12.c":132:9)
#loc154 = loc("CWE190_Integer_Overflow__int_max_square_12.c":136:9)
#loc155 = loc("CWE190_Integer_Overflow__int_max_square_12.c":134:13)
#loc156 = loc("CWE190_Integer_Overflow__int_max_square_12.c":134:33)
#loc157 = loc("CWE190_Integer_Overflow__int_max_square_12.c":134:26)
#loc158 = loc("CWE190_Integer_Overflow__int_max_square_12.c":135:26)
#loc159 = loc("CWE190_Integer_Overflow__int_max_square_12.c":135:13)
#loc160 = loc("CWE190_Integer_Overflow__int_max_square_12.c":140:9)
#loc161 = loc("CWE190_Integer_Overflow__int_max_square_12.c":144:9)
#loc162 = loc("CWE190_Integer_Overflow__int_max_square_12.c":142:13)
#loc163 = loc("CWE190_Integer_Overflow__int_max_square_12.c":142:33)
#loc164 = loc("CWE190_Integer_Overflow__int_max_square_12.c":142:26)
#loc165 = loc("CWE190_Integer_Overflow__int_max_square_12.c":143:26)
#loc166 = loc("CWE190_Integer_Overflow__int_max_square_12.c":143:13)
#loc167 = loc(fused[#loc1, #loc2])
#loc168 = loc(fused[#loc3, #loc4])
#loc169 = loc(fused[#loc6, #loc7])
#loc170 = loc(fused[#loc9, #loc10])
#loc171 = loc(fused[#loc11, #loc12])
#loc172 = loc(fused[#loc14, #loc13])
#loc173 = loc(fused[#loc15, #loc16])
#loc174 = loc(fused[#loc17, #loc18])
#loc175 = loc(fused[#loc19, #loc20, #loc21, #loc16])
#loc176 = loc(fused[#loc23, #loc22])
#loc177 = loc(fused[#loc25, #loc24])
#loc178 = loc(fused[#loc26, #loc27])
#loc179 = loc(fused[#loc28, #loc29])
#loc180 = loc(fused[#loc30, #loc31, #loc32, #loc27])
#loc181 = loc(fused[#loc33, #loc34])
#loc182 = loc(fused[#loc35, #loc36])
#loc183 = loc(fused[#loc40, #loc41])
#loc184 = loc(fused[#loc42, #loc43])
#loc185 = loc(fused[#loc46, #loc49])
#loc186 = loc(fused[#loc50, #loc51, #loc52, #loc41])
#loc187 = loc(fused[#loc53, #loc54])
#loc188 = loc(fused[#loc59, #loc60])
#loc189 = loc(fused[#loc61, #loc62])
#loc190 = loc(fused[#loc63, #loc64])
#loc191 = loc(fused[#loc65, #loc66])
#loc192 = loc(fused[#loc67, #loc68])
#loc193 = loc(fused[#loc70, #loc69])
#loc194 = loc(fused[#loc71, #loc72])
#loc195 = loc(fused[#loc73, #loc74])
#loc196 = loc(fused[#loc75, #loc76, #loc77, #loc72])
#loc197 = loc(fused[#loc79, #loc78])
#loc198 = loc(fused[#loc81, #loc80])
#loc199 = loc(fused[#loc82, #loc83])
#loc200 = loc(fused[#loc84, #loc85])
#loc201 = loc(fused[#loc86, #loc87, #loc88, #loc83])
#loc202 = loc(fused[#loc89, #loc90])
#loc203 = loc(fused[#loc91, #loc92])
#loc204 = loc(fused[#loc95, #loc98])
#loc205 = loc(fused[#loc99, #loc100, #loc101, #loc90])
#loc206 = loc(fused[#loc102, #loc103])
#loc207 = loc(fused[#loc109, #loc110])
#loc208 = loc(fused[#loc111, #loc112])
#loc209 = loc(fused[#loc115, #loc118])
#loc210 = loc(fused[#loc119, #loc120, #loc121, #loc110])
#loc211 = loc(fused[#loc122, #loc123])
#loc212 = loc(fused[#loc129, #loc130])
#loc213 = loc(fused[#loc131, #loc132])
#loc214 = loc(fused[#loc134, #loc133])
#loc215 = loc(fused[#loc135, #loc136])
#loc216 = loc(fused[#loc137, #loc138])
#loc217 = loc(fused[#loc139, #loc140, #loc141, #loc136])
#loc218 = loc(fused[#loc143, #loc142])
#loc219 = loc(fused[#loc145, #loc144])
#loc220 = loc(fused[#loc146, #loc147])
#loc221 = loc(fused[#loc148, #loc149])
#loc222 = loc(fused[#loc150, #loc151, #loc152, #loc147])
#loc223 = loc(fused[#loc153, #loc154])
#loc224 = loc(fused[#loc155, #loc156])
#loc225 = loc(fused[#loc160, #loc161])
#loc226 = loc(fused[#loc162, #loc163])
