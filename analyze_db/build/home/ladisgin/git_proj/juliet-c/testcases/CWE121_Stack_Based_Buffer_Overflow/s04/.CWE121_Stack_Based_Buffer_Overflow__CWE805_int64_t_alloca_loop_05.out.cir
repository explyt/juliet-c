!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":128:10)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":128:14)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":128:20)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":128:32)
#loc199 = loc(fused[#loc65, #loc66])
#loc200 = loc(fused[#loc67, #loc68])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc173)
  cir.func private @printLongLongLine(!s64i) loc(#loc174)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc176)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc177)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc10)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc10)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc10)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc10)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %7 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc178)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc10)
    cir.store %9, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc177)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc12)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc12)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc12)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc12)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc12)
    cir.store %16, %7 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc178)
    cir.scope {
      %17 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc173)
      %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc15)
      cir.if %19 {
        %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc17)
        cir.store %20, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc181)
      } loc(#loc180)
    } loc(#loc179)
    cir.scope {
      %17 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc183)
      %18 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc183)
      cir.store %18, %17 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc183)
      cir.scope {
        %19 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc185)
        cir.scope {
          %24 = cir.const #cir.int<0> : !s32i loc(#loc29)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc29)
          cir.store %25, %19 : !u64i, !cir.ptr<!u64i> loc(#loc187)
          cir.for : cond {
            %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc31)
            %27 = cir.const #cir.int<100> : !s32i loc(#loc32)
            %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc32)
            %29 = cir.cmp(lt, %26, %28) : !u64i, !cir.bool loc(#loc188)
            cir.condition(%29) loc(#loc33)
          } body {
            cir.scope {
              %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc35)
              %27 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc36)
              %28 = cir.ptr_stride(%27 : !cir.ptr<!s64i>, %26 : !u64i), !cir.ptr<!s64i> loc(#loc36)
              %29 = cir.load %28 : !cir.ptr<!s64i>, !s64i loc(#loc36)
              %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc37)
              %31 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc38)
              %32 = cir.ptr_stride(%30 : !cir.ptr<!s64i>, %31 : !u64i), !cir.ptr<!s64i> loc(#loc39)
              cir.store %29, %32 : !s64i, !cir.ptr<!s64i> loc(#loc190)
            } loc(#loc189)
            cir.yield loc(#loc28)
          } step {
            %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc41)
            %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc42)
            cir.store %27, %19 : !u64i, !cir.ptr<!u64i> loc(#loc191)
            cir.yield loc(#loc186)
          } loc(#loc186)
        } loc(#loc186)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc43)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc44)
        %22 = cir.ptr_stride(%20 : !cir.ptr<!s64i>, %21 : !s32i), !cir.ptr<!s64i> loc(#loc45)
        %23 = cir.load %22 : !cir.ptr<!s64i>, !s64i loc(#loc43)
        cir.call @printLongLongLine(%23) : (!s64i) -> () loc(#loc46)
      } loc(#loc184)
    } loc(#loc182)
    cir.return loc(#loc6)
  } loc(#loc175)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc193)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc194)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    cir.return loc(#loc48)
  } loc(#loc192)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc195)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc196)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc197)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc62)
  cir.func @main(%arg0: !s32i loc(fused[#loc65, #loc66]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc67, #loc68])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc199)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc200)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc64)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc69)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc70)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc71)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc71)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc72)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc59)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05_good : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05_good() : () -> () loc(#loc74)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc60)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc61)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc202)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05_bad() : () -> () loc(#loc78)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc62)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc81)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc203)
    cir.return %17 : !s32i loc(#loc203)
  } loc(#loc198)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc204)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc85)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc206)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc207)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc91)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc91)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc91)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc91)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc91)
    %7 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc208)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc91)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc91)
    cir.store %9, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc207)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc93)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc93)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc93)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc93)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc93)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc93)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc93)
    cir.store %16, %7 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc208)
    cir.scope {
      %17 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc204)
      %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc96)
      %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc96)
      cir.if %19 {
        %20 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc85)
        %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc85)
        cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc100)
      } else {
        %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc101)
        cir.store %20, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc211)
      } loc(#loc210)
    } loc(#loc209)
    cir.scope {
      %17 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc213)
      %18 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc213)
      cir.store %18, %17 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc213)
      cir.scope {
        %19 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc215)
        cir.scope {
          %24 = cir.const #cir.int<0> : !s32i loc(#loc113)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc113)
          cir.store %25, %19 : !u64i, !cir.ptr<!u64i> loc(#loc217)
          cir.for : cond {
            %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc115)
            %27 = cir.const #cir.int<100> : !s32i loc(#loc116)
            %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc116)
            %29 = cir.cmp(lt, %26, %28) : !u64i, !cir.bool loc(#loc218)
            cir.condition(%29) loc(#loc117)
          } body {
            cir.scope {
              %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc119)
              %27 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc120)
              %28 = cir.ptr_stride(%27 : !cir.ptr<!s64i>, %26 : !u64i), !cir.ptr<!s64i> loc(#loc120)
              %29 = cir.load %28 : !cir.ptr<!s64i>, !s64i loc(#loc120)
              %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc121)
              %31 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc122)
              %32 = cir.ptr_stride(%30 : !cir.ptr<!s64i>, %31 : !u64i), !cir.ptr<!s64i> loc(#loc123)
              cir.store %29, %32 : !s64i, !cir.ptr<!s64i> loc(#loc220)
            } loc(#loc219)
            cir.yield loc(#loc112)
          } step {
            %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc125)
            %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc126)
            cir.store %27, %19 : !u64i, !cir.ptr<!u64i> loc(#loc221)
            cir.yield loc(#loc216)
          } loc(#loc216)
        } loc(#loc216)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc127)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc128)
        %22 = cir.ptr_stride(%20 : !cir.ptr<!s64i>, %21 : !s32i), !cir.ptr<!s64i> loc(#loc129)
        %23 = cir.load %22 : !cir.ptr<!s64i>, !s64i loc(#loc127)
        cir.call @printLongLongLine(%23) : (!s64i) -> () loc(#loc130)
      } loc(#loc214)
    } loc(#loc212)
    cir.return loc(#loc87)
  } loc(#loc205)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc223)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc224)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc136)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc136)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc136)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc136)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc136)
    %7 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc225)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc136)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc136)
    cir.store %9, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc224)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc138)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc138)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc138)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc138)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc138)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc138)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc138)
    cir.store %16, %7 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc225)
    cir.scope {
      %17 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc173)
      %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc141)
      %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc141)
      cir.if %19 {
        %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc143)
        cir.store %20, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc228)
      } loc(#loc227)
    } loc(#loc226)
    cir.scope {
      %17 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc230)
      %18 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc230)
      cir.store %18, %17 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc230)
      cir.scope {
        %19 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc232)
        cir.scope {
          %24 = cir.const #cir.int<0> : !s32i loc(#loc155)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc155)
          cir.store %25, %19 : !u64i, !cir.ptr<!u64i> loc(#loc234)
          cir.for : cond {
            %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc157)
            %27 = cir.const #cir.int<100> : !s32i loc(#loc158)
            %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc158)
            %29 = cir.cmp(lt, %26, %28) : !u64i, !cir.bool loc(#loc235)
            cir.condition(%29) loc(#loc159)
          } body {
            cir.scope {
              %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc161)
              %27 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc162)
              %28 = cir.ptr_stride(%27 : !cir.ptr<!s64i>, %26 : !u64i), !cir.ptr<!s64i> loc(#loc162)
              %29 = cir.load %28 : !cir.ptr<!s64i>, !s64i loc(#loc162)
              %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc163)
              %31 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc164)
              %32 = cir.ptr_stride(%30 : !cir.ptr<!s64i>, %31 : !u64i), !cir.ptr<!s64i> loc(#loc165)
              cir.store %29, %32 : !s64i, !cir.ptr<!s64i> loc(#loc237)
            } loc(#loc236)
            cir.yield loc(#loc154)
          } step {
            %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc167)
            %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc168)
            cir.store %27, %19 : !u64i, !cir.ptr<!u64i> loc(#loc238)
            cir.yield loc(#loc233)
          } loc(#loc233)
        } loc(#loc233)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc169)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc170)
        %22 = cir.ptr_stride(%20 : !cir.ptr<!s64i>, %21 : !s32i), !cir.ptr<!s64i> loc(#loc171)
        %23 = cir.load %22 : !cir.ptr<!s64i>, !s64i loc(#loc169)
        cir.call @printLongLongLine(%23) : (!s64i) -> () loc(#loc172)
      } loc(#loc231)
    } loc(#loc229)
    cir.return loc(#loc132)
  } loc(#loc222)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":23:1)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":23:25)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":28:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":51:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":30:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":30:15)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":31:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":31:42)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":32:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":32:43)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":33:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":38:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":33:8)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":34:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":37:16)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":37:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":39:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":50:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":40:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":40:33)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":41:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":49:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":42:13)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":42:20)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":44:13)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":47:13)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":44:22)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":44:18)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":44:25)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":44:29)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":44:27)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":45:13)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":46:34)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":46:27)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":46:17)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":46:22)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":46:23)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":46:35)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":44:35)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":44:34)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":48:31)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":48:36)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":48:37)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":48:13)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":112:1)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":116:1)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":114:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":114:14)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":115:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":115:14)
#loc53 = loc("/usr/include/stdlib.h":575:1)
#loc54 = loc("/usr/include/stdlib.h":575:41)
#loc55 = loc("/usr/include/time.h":76:1)
#loc56 = loc("/usr/include/time.h":76:38)
#loc57 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc58 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":133:15)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":135:15)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":138:15)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":140:15)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":128:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":143:1)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":129:1)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":131:27)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":131:22)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":131:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":133:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":134:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":134:76)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":135:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":138:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":139:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":139:75)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":140:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":142:12)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":142:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":24:1)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":24:26)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":66:19)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":58:1)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":85:1)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":60:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":60:15)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":61:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":61:42)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":62:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":62:43)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":63:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":72:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":63:8)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":64:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":67:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":69:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":66:9)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":71:16)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":71:9)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":73:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":84:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":74:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":74:33)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":75:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":83:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":76:13)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":76:20)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":78:13)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":81:13)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":78:22)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":78:18)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":78:25)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":78:29)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":78:27)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":79:13)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":80:34)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":80:27)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":80:17)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":80:22)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":80:23)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":80:35)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":78:35)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":78:34)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":82:31)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":82:36)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":82:37)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":82:13)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":88:1)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":110:1)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":90:5)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":90:15)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":91:5)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":91:42)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":92:5)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":92:43)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":93:5)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":97:5)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":93:8)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":94:5)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":96:16)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":96:9)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":98:5)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":109:5)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":99:9)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":99:33)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":100:9)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":108:9)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":101:13)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":101:20)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":103:13)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":106:13)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":103:22)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":103:18)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":103:25)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":103:29)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":103:27)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":104:13)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":105:34)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":105:27)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":105:17)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":105:22)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":105:23)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":105:35)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":103:35)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":103:34)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":107:31)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":107:36)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":107:37)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c":107:13)
#loc173 = loc(fused[#loc1, #loc2])
#loc174 = loc(fused[#loc3, #loc4])
#loc175 = loc(fused[#loc5, #loc6])
#loc176 = loc(fused[#loc7, #loc8])
#loc177 = loc(fused[#loc9, #loc10])
#loc178 = loc(fused[#loc11, #loc12])
#loc179 = loc(fused[#loc13, #loc14])
#loc180 = loc(fused[#loc16, #loc14])
#loc181 = loc(fused[#loc18, #loc17])
#loc182 = loc(fused[#loc19, #loc20])
#loc183 = loc(fused[#loc21, #loc22])
#loc184 = loc(fused[#loc23, #loc24])
#loc185 = loc(fused[#loc25, #loc26])
#loc186 = loc(fused[#loc27, #loc28])
#loc187 = loc(fused[#loc30, #loc29])
#loc188 = loc(fused[#loc31, #loc32])
#loc189 = loc(fused[#loc34, #loc28])
#loc190 = loc(fused[#loc37, #loc40])
#loc191 = loc(fused[#loc42, #loc41])
#loc192 = loc(fused[#loc47, #loc48])
#loc193 = loc(fused[#loc49, #loc50])
#loc194 = loc(fused[#loc51, #loc52])
#loc195 = loc(fused[#loc53, #loc54])
#loc196 = loc(fused[#loc55, #loc56])
#loc197 = loc(fused[#loc57, #loc58])
#loc198 = loc(fused[#loc63, #loc64])
#loc201 = loc(fused[#loc74, #loc75])
#loc202 = loc(fused[#loc78, #loc79])
#loc203 = loc(fused[#loc82, #loc81])
#loc204 = loc(fused[#loc83, #loc84])
#loc205 = loc(fused[#loc86, #loc87])
#loc206 = loc(fused[#loc88, #loc89])
#loc207 = loc(fused[#loc90, #loc91])
#loc208 = loc(fused[#loc92, #loc93])
#loc209 = loc(fused[#loc94, #loc95])
#loc210 = loc(fused[#loc97, #loc98, #loc99, #loc95])
#loc211 = loc(fused[#loc102, #loc101])
#loc212 = loc(fused[#loc103, #loc104])
#loc213 = loc(fused[#loc105, #loc106])
#loc214 = loc(fused[#loc107, #loc108])
#loc215 = loc(fused[#loc109, #loc110])
#loc216 = loc(fused[#loc111, #loc112])
#loc217 = loc(fused[#loc114, #loc113])
#loc218 = loc(fused[#loc115, #loc116])
#loc219 = loc(fused[#loc118, #loc112])
#loc220 = loc(fused[#loc121, #loc124])
#loc221 = loc(fused[#loc126, #loc125])
#loc222 = loc(fused[#loc131, #loc132])
#loc223 = loc(fused[#loc133, #loc134])
#loc224 = loc(fused[#loc135, #loc136])
#loc225 = loc(fused[#loc137, #loc138])
#loc226 = loc(fused[#loc139, #loc140])
#loc227 = loc(fused[#loc142, #loc140])
#loc228 = loc(fused[#loc144, #loc143])
#loc229 = loc(fused[#loc145, #loc146])
#loc230 = loc(fused[#loc147, #loc148])
#loc231 = loc(fused[#loc149, #loc150])
#loc232 = loc(fused[#loc151, #loc152])
#loc233 = loc(fused[#loc153, #loc154])
#loc234 = loc(fused[#loc156, #loc155])
#loc235 = loc(fused[#loc157, #loc158])
#loc236 = loc(fused[#loc160, #loc154])
#loc237 = loc(fused[#loc163, #loc166])
#loc238 = loc(fused[#loc168, #loc167])
