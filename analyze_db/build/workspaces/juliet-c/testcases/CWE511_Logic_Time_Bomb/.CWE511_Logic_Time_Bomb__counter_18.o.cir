!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc55)
    cir.br ^bb1 loc(#loc56)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<0> : !s32i loc(#loc7)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc55)
    cir.br ^bb2 loc(#loc57)
  ^bb2:  // pred: ^bb1
    cir.br ^bb4 loc(#loc57)
  ^bb3:  // pred: ^bb10
    %2 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc58)
    cir.brcond %4 ^bb4, ^bb11 loc(#loc14)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc59)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc60)
  ^bb6:  // pred: ^bb5
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %6 = cir.const #cir.int<20000> : !s32i loc(#loc20)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc61)
    cir.brcond %7 ^bb7, ^bb8 loc(#loc62)
  ^bb7:  // pred: ^bb6
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc3)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc3)
    %10 = cir.call @unlink(%9) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc22)
    cir.br ^bb8 loc(#loc18)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc18)
  ^bb9:  // pred: ^bb8
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    %12 = cir.unary(inc, %11) nsw : !s32i, !s32i loc(#loc24)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc63)
    cir.br ^bb10 loc(#loc16)
  ^bb10:  // pred: ^bb9
    cir.br ^bb3 loc(#loc11)
  ^bb11:  // pred: ^bb3
    cir.br ^bb12 loc(#loc11)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc5)
  } loc(#loc54)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc65)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc27)
    cir.return loc(#loc26)
  } loc(#loc64)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc66)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc31)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc68)
    cir.br ^bb1 loc(#loc69)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<0> : !s32i loc(#loc35)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc68)
    cir.br ^bb2 loc(#loc70)
  ^bb2:  // pred: ^bb1
    cir.br ^bb4 loc(#loc70)
  ^bb3:  // pred: ^bb10
    %2 = cir.const #cir.int<1> : !s32i loc(#loc40)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc71)
    cir.brcond %4 ^bb4, ^bb11 loc(#loc42)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc72)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc73)
  ^bb6:  // pred: ^bb5
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    %6 = cir.const #cir.int<20000> : !s32i loc(#loc48)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc74)
    cir.brcond %7 ^bb7, ^bb8 loc(#loc75)
  ^bb7:  // pred: ^bb6
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc31)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc31)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    cir.br ^bb8 loc(#loc46)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc46)
  ^bb9:  // pred: ^bb8
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    %11 = cir.unary(inc, %10) nsw : !s32i, !s32i loc(#loc52)
    cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc76)
    cir.br ^bb10 loc(#loc44)
  ^bb10:  // pred: ^bb9
    cir.br ^bb3 loc(#loc39)
  ^bb11:  // pred: ^bb3
    cir.br ^bb12 loc(#loc39)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc33)
  } loc(#loc67)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_18.c":0:0)
#loc1 = loc("/usr/include/unistd.h":858:1)
#loc2 = loc("/usr/include/unistd.h":858:48)
#loc3 = loc("CWE511_Logic_Time_Bomb__counter_18.c":40:24)
#loc4 = loc("CWE511_Logic_Time_Bomb__counter_18.c":29:1)
#loc5 = loc("CWE511_Logic_Time_Bomb__counter_18.c":46:1)
#loc6 = loc("CWE511_Logic_Time_Bomb__counter_18.c":34:9)
#loc7 = loc("CWE511_Logic_Time_Bomb__counter_18.c":34:21)
#loc8 = loc("CWE511_Logic_Time_Bomb__counter_18.c":31:5)
#loc9 = loc("CWE511_Logic_Time_Bomb__counter_18.c":31:10)
#loc10 = loc("CWE511_Logic_Time_Bomb__counter_18.c":35:9)
#loc11 = loc("CWE511_Logic_Time_Bomb__counter_18.c":44:21)
#loc12 = loc("CWE511_Logic_Time_Bomb__counter_18.c":44:15)
#loc13 = loc("CWE511_Logic_Time_Bomb__counter_18.c":44:20)
#loc14 = loc("CWE511_Logic_Time_Bomb__counter_18.c":44:17)
#loc15 = loc("CWE511_Logic_Time_Bomb__counter_18.c":36:9)
#loc16 = loc("CWE511_Logic_Time_Bomb__counter_18.c":43:9)
#loc17 = loc("CWE511_Logic_Time_Bomb__counter_18.c":38:13)
#loc18 = loc("CWE511_Logic_Time_Bomb__counter_18.c":41:13)
#loc19 = loc("CWE511_Logic_Time_Bomb__counter_18.c":38:17)
#loc20 = loc("CWE511_Logic_Time_Bomb__counter_18.c":38:26)
#loc21 = loc("CWE511_Logic_Time_Bomb__counter_18.c":39:13)
#loc22 = loc("CWE511_Logic_Time_Bomb__counter_18.c":40:17)
#loc23 = loc("CWE511_Logic_Time_Bomb__counter_18.c":42:18)
#loc24 = loc("CWE511_Logic_Time_Bomb__counter_18.c":42:13)
#loc25 = loc("CWE511_Logic_Time_Bomb__counter_18.c":72:1)
#loc26 = loc("CWE511_Logic_Time_Bomb__counter_18.c":75:1)
#loc27 = loc("CWE511_Logic_Time_Bomb__counter_18.c":74:5)
#loc28 = loc("CWE511_Logic_Time_Bomb__counter_18.c":74:11)
#loc29 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc30 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc31 = loc("CWE511_Logic_Time_Bomb__counter_18.c":64:27)
#loc32 = loc("CWE511_Logic_Time_Bomb__counter_18.c":53:1)
#loc33 = loc("CWE511_Logic_Time_Bomb__counter_18.c":70:1)
#loc34 = loc("CWE511_Logic_Time_Bomb__counter_18.c":58:9)
#loc35 = loc("CWE511_Logic_Time_Bomb__counter_18.c":58:21)
#loc36 = loc("CWE511_Logic_Time_Bomb__counter_18.c":55:5)
#loc37 = loc("CWE511_Logic_Time_Bomb__counter_18.c":55:10)
#loc38 = loc("CWE511_Logic_Time_Bomb__counter_18.c":59:9)
#loc39 = loc("CWE511_Logic_Time_Bomb__counter_18.c":68:21)
#loc40 = loc("CWE511_Logic_Time_Bomb__counter_18.c":68:15)
#loc41 = loc("CWE511_Logic_Time_Bomb__counter_18.c":68:20)
#loc42 = loc("CWE511_Logic_Time_Bomb__counter_18.c":68:17)
#loc43 = loc("CWE511_Logic_Time_Bomb__counter_18.c":60:9)
#loc44 = loc("CWE511_Logic_Time_Bomb__counter_18.c":67:9)
#loc45 = loc("CWE511_Logic_Time_Bomb__counter_18.c":62:13)
#loc46 = loc("CWE511_Logic_Time_Bomb__counter_18.c":65:13)
#loc47 = loc("CWE511_Logic_Time_Bomb__counter_18.c":62:17)
#loc48 = loc("CWE511_Logic_Time_Bomb__counter_18.c":62:26)
#loc49 = loc("CWE511_Logic_Time_Bomb__counter_18.c":63:13)
#loc50 = loc("CWE511_Logic_Time_Bomb__counter_18.c":64:17)
#loc51 = loc("CWE511_Logic_Time_Bomb__counter_18.c":66:18)
#loc52 = loc("CWE511_Logic_Time_Bomb__counter_18.c":66:13)
#loc53 = loc(fused[#loc1, #loc2])
#loc54 = loc(fused[#loc4, #loc5])
#loc55 = loc(fused[#loc6, #loc7])
#loc56 = loc(fused[#loc8, #loc9])
#loc57 = loc(fused[#loc10, #loc11])
#loc58 = loc(fused[#loc12, #loc13])
#loc59 = loc(fused[#loc15, #loc16])
#loc60 = loc(fused[#loc17, #loc18])
#loc61 = loc(fused[#loc19, #loc20])
#loc62 = loc(fused[#loc21, #loc18])
#loc63 = loc(fused[#loc24, #loc23])
#loc64 = loc(fused[#loc25, #loc26])
#loc65 = loc(fused[#loc27, #loc28])
#loc66 = loc(fused[#loc29, #loc30])
#loc67 = loc(fused[#loc32, #loc33])
#loc68 = loc(fused[#loc34, #loc35])
#loc69 = loc(fused[#loc36, #loc37])
#loc70 = loc(fused[#loc38, #loc39])
#loc71 = loc(fused[#loc40, #loc41])
#loc72 = loc(fused[#loc43, #loc44])
#loc73 = loc(fused[#loc45, #loc46])
#loc74 = loc(fused[#loc47, #loc48])
#loc75 = loc(fused[#loc49, #loc46])
#loc76 = loc(fused[#loc52, #loc51])
