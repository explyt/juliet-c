!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_61a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @CWE369_Divide_by_Zero__int_rand_divide_61b_badSource(!s32i) -> !s32i loc(#loc68)
  cir.func private @printIntLine(!s32i) loc(#loc69)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_divide_61_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc71)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc72)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc12)
    %4 = cir.call @CWE369_Divide_by_Zero__int_rand_divide_61b_badSource(%3) : (!s32i) -> !s32i loc(#loc13)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc73)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc16)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %7 = cir.binop(div, %5, %6) : !s32i loc(#loc74)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc18)
    cir.return loc(#loc6)
  } loc(#loc70)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_divide_61_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc76)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc21)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc77)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc23)
    cir.return loc(#loc20)
  } loc(#loc75)
  cir.func private @CWE369_Divide_by_Zero__int_rand_divide_61b_goodG2BSource(!s32i) -> !s32i loc(#loc78)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc80)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc32)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    %4 = cir.call @CWE369_Divide_by_Zero__int_rand_divide_61b_goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc35)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc38)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    %7 = cir.binop(div, %5, %6) : !s32i loc(#loc83)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc40)
    cir.return loc(#loc28)
  } loc(#loc79)
  cir.func private @CWE369_Divide_by_Zero__int_rand_divide_61b_goodB2GSource(!s32i) -> !s32i loc(#loc84)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc85)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc45)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc87)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc51)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    %4 = cir.call @CWE369_Divide_by_Zero__int_rand_divide_61b_goodB2GSource(%3) : (!s32i) -> !s32i loc(#loc54)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    cir.scope {
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc60)
      %7 = cir.cmp(ne, %5, %6) : !s32i, !cir.bool loc(#loc91)
      cir.if %7 {
        %8 = cir.const #cir.int<100> : !s32i loc(#loc64)
        %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
        %10 = cir.binop(div, %8, %9) : !s32i loc(#loc93)
        cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc66)
      } else {
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc45)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc45)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc67)
      } loc(#loc92)
    } loc(#loc90)
    cir.return loc(#loc47)
  } loc(#loc86)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_61a.c":0:0)
#loc1 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":23:1)
#loc2 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":23:66)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":25:1)
#loc6 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":33:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":27:5)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":27:9)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":29:13)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":29:12)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":29:5)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":30:65)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":30:12)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":30:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":30:69)
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":32:18)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":32:24)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":32:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":72:1)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":76:1)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":74:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":74:13)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":75:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":75:13)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":40:1)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":40:70)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":42:1)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":50:1)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":44:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":44:9)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":46:13)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":46:12)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":46:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":47:69)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":47:12)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":47:5)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":47:73)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":49:18)
#loc39 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":49:24)
#loc40 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":49:5)
#loc41 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":53:1)
#loc42 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":53:70)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":68:19)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":55:1)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":70:1)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":57:5)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":57:9)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":59:13)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":59:12)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":59:5)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":60:69)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":60:12)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":60:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":60:73)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":62:5)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":69:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":62:9)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":62:17)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":63:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":65:5)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":67:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":64:22)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":64:28)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":64:9)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_divide_61a.c":68:9)
#loc68 = loc(fused[#loc1, #loc2])
#loc69 = loc(fused[#loc3, #loc4])
#loc70 = loc(fused[#loc5, #loc6])
#loc71 = loc(fused[#loc7, #loc8])
#loc72 = loc(fused[#loc11, #loc9])
#loc73 = loc(fused[#loc14, #loc15])
#loc74 = loc(fused[#loc16, #loc17])
#loc75 = loc(fused[#loc19, #loc20])
#loc76 = loc(fused[#loc21, #loc22])
#loc77 = loc(fused[#loc23, #loc24])
#loc78 = loc(fused[#loc25, #loc26])
#loc79 = loc(fused[#loc27, #loc28])
#loc80 = loc(fused[#loc29, #loc30])
#loc81 = loc(fused[#loc33, #loc31])
#loc82 = loc(fused[#loc36, #loc37])
#loc83 = loc(fused[#loc38, #loc39])
#loc84 = loc(fused[#loc41, #loc42])
#loc85 = loc(fused[#loc43, #loc44])
#loc86 = loc(fused[#loc46, #loc47])
#loc87 = loc(fused[#loc48, #loc49])
#loc88 = loc(fused[#loc52, #loc50])
#loc89 = loc(fused[#loc55, #loc56])
#loc90 = loc(fused[#loc57, #loc58])
#loc91 = loc(fused[#loc59, #loc60])
#loc92 = loc(fused[#loc61, #loc62, #loc63, #loc58])
#loc93 = loc(fused[#loc64, #loc65])
