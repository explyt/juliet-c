!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":25:21)
#loc8 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":25:25)
#loc49 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":58:26)
#loc50 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":58:30)
#loc88 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":92:26)
#loc89 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":92:30)
#loc125 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":121:25)
#loc126 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":121:29)
#loc155 = loc(fused[#loc7, #loc8])
#loc172 = loc(fused[#loc49, #loc50])
#loc186 = loc(fused[#loc88, #loc89])
#loc200 = loc(fused[#loc125, #loc126])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_sub_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc152)
  cir.func private @printIntLine(!s32i) loc(#loc153)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc7, #loc8])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc156)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc155)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc11)
    cir.br ^bb1 loc(#loc157)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc152)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %4 ^bb2, ^bb5 loc(#loc158)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc159)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc18)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc18)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc156)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc20)
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc13)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc13)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc6)
  } loc(#loc154)
  cir.func no_proto @CWE191_Integer_Underflow__int_min_sub_21_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc161)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc25)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc162)
    %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc27)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc27)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc27)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc163)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %7 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc152)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    cir.call @badSink(%8) : (!s32i) -> () loc(#loc32)
    cir.return loc(#loc22)
  } loc(#loc160)
  cir.func no_proto @CWE191_Integer_Underflow__int_min_sub_21_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc166)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc167)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc168)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc34)
  } loc(#loc165)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc169)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc170)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc46)
  cir.func internal private @goodB2G1Sink(%arg0: !s32i loc(fused[#loc49, #loc50])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc173)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc172)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc53)
    cir.br ^bb1 loc(#loc174)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc169)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc56)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc56)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc175)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc45)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    cir.br ^bb9 loc(#loc58)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc176)
  ^bb4:  // pred: ^bb3
    %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc63)
    %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc64)
    %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc64)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc64)
    %12 = cir.cmp(gt, %7, %11) : !s32i, !cir.bool loc(#loc177)
    cir.brcond %12 ^bb5, ^bb6 loc(#loc178)
  ^bb5:  // pred: ^bb4
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc68)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc68)
    cir.store %15, %0 : !s32i, !cir.ptr<!s32i> loc(#loc173)
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc70)
    cir.br ^bb7 loc(#loc66)
  ^bb6:  // pred: ^bb4
    %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc46)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    cir.br ^bb7 loc(#loc62)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc62)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc55)
  ^bb9:  // 2 preds: ^bb2, ^bb8
    cir.br ^bb10 loc(#loc55)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc48)
  } loc(#loc171)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc180)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc76)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc78)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc78)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc78)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc80)
    %7 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc169)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    cir.call @goodB2G1Sink(%8) : (!s32i) -> () loc(#loc83)
    cir.return loc(#loc73)
  } loc(#loc179)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc184)
  cir.func internal private @goodB2G2Sink(%arg0: !s32i loc(fused[#loc88, #loc89])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc187)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc186)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    cir.br ^bb1 loc(#loc188)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc184)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc95)
    cir.brcond %4 ^bb2, ^bb8 loc(#loc189)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc190)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc100)
    %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc100)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc100)
    %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc100)
    %10 = cir.cmp(gt, %5, %9) : !s32i, !cir.bool loc(#loc191)
    cir.brcond %10 ^bb4, ^bb5 loc(#loc192)
  ^bb4:  // pred: ^bb3
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc104)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc104)
    cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc106)
    cir.br ^bb6 loc(#loc102)
  ^bb5:  // pred: ^bb3
    %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc107)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc107)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc108)
    cir.br ^bb6 loc(#loc98)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc98)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc94)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc94)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc87)
  } loc(#loc185)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc194)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc113)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc115)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc115)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc115)
    %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc115)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %7 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc184)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc119)
    cir.call @goodB2G2Sink(%8) : (!s32i) -> () loc(#loc120)
    cir.return loc(#loc110)
  } loc(#loc193)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc198)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc125, #loc126])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc201)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc200)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    cir.br ^bb1 loc(#loc202)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc198)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc132)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc132)
    cir.brcond %4 ^bb2, ^bb5 loc(#loc203)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc204)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc136)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc128)
    %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc136)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc138)
    cir.br ^bb4 loc(#loc135)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc131)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc131)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc124)
  } loc(#loc199)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc206)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc143)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc145)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc146)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc208)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc148)
    %5 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc198)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc150)
    cir.call @goodG2BSink(%6) : (!s32i) -> () loc(#loc151)
    cir.return loc(#loc140)
  } loc(#loc205)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_sub_21.c":0:0)
#loc1 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":23:1)
#loc2 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":23:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":25:1)
#loc6 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":35:1)
#loc9 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":31:13)
#loc10 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":31:33)
#loc11 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":26:1)
#loc12 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":27:5)
#loc13 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":34:5)
#loc14 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":27:8)
#loc15 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":28:5)
#loc16 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":29:9)
#loc17 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":33:9)
#loc18 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":31:26)
#loc19 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":32:26)
#loc20 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":32:13)
#loc21 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":37:1)
#loc22 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":46:1)
#loc23 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":39:5)
#loc24 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":39:9)
#loc25 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":41:12)
#loc26 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":41:5)
#loc27 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":43:12)
#loc28 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":43:5)
#loc29 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":44:17)
#loc30 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":44:5)
#loc31 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":45:13)
#loc32 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":45:5)
#loc33 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":144:1)
#loc34 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":149:1)
#loc35 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":146:5)
#loc36 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":146:14)
#loc37 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":147:5)
#loc38 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":147:14)
#loc39 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":148:5)
#loc40 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":148:13)
#loc41 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":53:1)
#loc42 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":53:29)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":63:19)
#loc46 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":75:23)
#loc47 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":58:1)
#loc48 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":78:1)
#loc51 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":70:13)
#loc52 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":70:33)
#loc53 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":59:1)
#loc54 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":60:5)
#loc55 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":77:5)
#loc56 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":60:8)
#loc57 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":61:5)
#loc58 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":64:5)
#loc59 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":66:5)
#loc60 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":63:9)
#loc61 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":68:9)
#loc62 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":76:9)
#loc63 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":68:13)
#loc64 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":68:20)
#loc65 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":69:9)
#loc66 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":72:9)
#loc67 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":74:9)
#loc68 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":70:26)
#loc69 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":71:26)
#loc70 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":71:13)
#loc71 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":75:13)
#loc72 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":80:1)
#loc73 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":89:1)
#loc74 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":82:5)
#loc75 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":82:9)
#loc76 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":84:12)
#loc77 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":84:5)
#loc78 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":86:12)
#loc79 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":86:5)
#loc80 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":87:22)
#loc81 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":87:5)
#loc82 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":88:18)
#loc83 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":88:5)
#loc84 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":54:1)
#loc85 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":54:29)
#loc86 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":92:1)
#loc87 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":107:1)
#loc90 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":99:13)
#loc91 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":99:33)
#loc92 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":93:1)
#loc93 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":94:5)
#loc94 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":106:5)
#loc95 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":94:8)
#loc96 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":95:5)
#loc97 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":97:9)
#loc98 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":105:9)
#loc99 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":97:13)
#loc100 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":97:20)
#loc101 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":98:9)
#loc102 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":101:9)
#loc103 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":103:9)
#loc104 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":99:26)
#loc105 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":100:26)
#loc106 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":100:13)
#loc107 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":104:23)
#loc108 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":104:13)
#loc109 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":109:1)
#loc110 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":118:1)
#loc111 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":111:5)
#loc112 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":111:9)
#loc113 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":113:12)
#loc114 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":113:5)
#loc115 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":115:12)
#loc116 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":115:5)
#loc117 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":116:22)
#loc118 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":116:5)
#loc119 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":117:18)
#loc120 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":117:5)
#loc121 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":55:1)
#loc122 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":55:28)
#loc123 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":121:1)
#loc124 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":131:1)
#loc127 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":127:13)
#loc128 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":127:33)
#loc129 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":122:1)
#loc130 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":123:5)
#loc131 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":130:5)
#loc132 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":123:8)
#loc133 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":124:5)
#loc134 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":125:9)
#loc135 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":129:9)
#loc136 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":127:26)
#loc137 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":128:26)
#loc138 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":128:13)
#loc139 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":133:1)
#loc140 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":142:1)
#loc141 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":135:5)
#loc142 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":135:9)
#loc143 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":137:12)
#loc144 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":137:5)
#loc145 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":139:13)
#loc146 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":139:12)
#loc147 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":139:5)
#loc148 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":140:21)
#loc149 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":140:5)
#loc150 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":141:17)
#loc151 = loc("CWE191_Integer_Underflow__int_min_sub_21.c":141:5)
#loc152 = loc(fused[#loc1, #loc2])
#loc153 = loc(fused[#loc3, #loc4])
#loc154 = loc(fused[#loc5, #loc6])
#loc156 = loc(fused[#loc9, #loc10])
#loc157 = loc(fused[#loc12, #loc13])
#loc158 = loc(fused[#loc15, #loc13])
#loc159 = loc(fused[#loc16, #loc17])
#loc160 = loc(fused[#loc21, #loc22])
#loc161 = loc(fused[#loc23, #loc24])
#loc162 = loc(fused[#loc26, #loc25])
#loc163 = loc(fused[#loc28, #loc27])
#loc164 = loc(fused[#loc30, #loc29])
#loc165 = loc(fused[#loc33, #loc34])
#loc166 = loc(fused[#loc35, #loc36])
#loc167 = loc(fused[#loc37, #loc38])
#loc168 = loc(fused[#loc39, #loc40])
#loc169 = loc(fused[#loc41, #loc42])
#loc170 = loc(fused[#loc43, #loc44])
#loc171 = loc(fused[#loc47, #loc48])
#loc173 = loc(fused[#loc51, #loc52])
#loc174 = loc(fused[#loc54, #loc55])
#loc175 = loc(fused[#loc57, #loc58, #loc59, #loc55])
#loc176 = loc(fused[#loc61, #loc62])
#loc177 = loc(fused[#loc63, #loc64])
#loc178 = loc(fused[#loc65, #loc66, #loc67, #loc62])
#loc179 = loc(fused[#loc72, #loc73])
#loc180 = loc(fused[#loc74, #loc75])
#loc181 = loc(fused[#loc77, #loc76])
#loc182 = loc(fused[#loc79, #loc78])
#loc183 = loc(fused[#loc81, #loc80])
#loc184 = loc(fused[#loc84, #loc85])
#loc185 = loc(fused[#loc86, #loc87])
#loc187 = loc(fused[#loc90, #loc91])
#loc188 = loc(fused[#loc93, #loc94])
#loc189 = loc(fused[#loc96, #loc94])
#loc190 = loc(fused[#loc97, #loc98])
#loc191 = loc(fused[#loc99, #loc100])
#loc192 = loc(fused[#loc101, #loc102, #loc103, #loc98])
#loc193 = loc(fused[#loc109, #loc110])
#loc194 = loc(fused[#loc111, #loc112])
#loc195 = loc(fused[#loc114, #loc113])
#loc196 = loc(fused[#loc116, #loc115])
#loc197 = loc(fused[#loc118, #loc117])
#loc198 = loc(fused[#loc121, #loc122])
#loc199 = loc(fused[#loc123, #loc124])
#loc201 = loc(fused[#loc127, #loc128])
#loc202 = loc(fused[#loc130, #loc131])
#loc203 = loc(fused[#loc133, #loc131])
#loc204 = loc(fused[#loc134, #loc135])
#loc205 = loc(fused[#loc139, #loc140])
#loc206 = loc(fused[#loc141, #loc142])
#loc207 = loc(fused[#loc144, #loc143])
#loc208 = loc(fused[#loc147, #loc145])
#loc209 = loc(fused[#loc149, #loc148])
