!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc65 = loc("CWE617_Reachable_Assertion__fgets_17.c":88:10)
#loc66 = loc("CWE617_Reachable_Assertion__fgets_17.c":88:14)
#loc67 = loc("CWE617_Reachable_Assertion__fgets_17.c":88:20)
#loc68 = loc("CWE617_Reachable_Assertion__fgets_17.c":88:32)
#loc131 = loc(fused[#loc65, #loc66])
#loc132 = loc(fused[#loc67, #loc68])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fgets_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc106)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc107)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc108)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc109)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc110)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc12)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"CWE617_Reachable_Assertion__fgets_17.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc12)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void CWE617_Reachable_Assertion__fgets_17_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc12)
  cir.func no_proto @CWE617_Reachable_Assertion__fgets_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc112)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc113)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc20)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc24)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc116)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc117)
        cir.condition(%8) loc(#loc28)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc120)
            %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc120)
            cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc120)
            cir.scope {
              %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc36)
              %9 = cir.const #cir.int<3> : !s32i loc(#loc37)
              %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc37)
              %11 = cir.const #cir.int<4> : !u64i loc(#loc37)
              %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc37)
              %13 = cir.const #cir.int<2> : !s32i loc(#loc37)
              %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc37)
              %15 = cir.binop(add, %12, %14) : !u64i loc(#loc37)
              %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc37)
              %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc107)
              %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc38)
              %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc39)
              %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc40)
              %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc40)
              %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc122)
              cir.if %22 {
                %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc44)
                %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc45)
                cir.store %24, %1 : !s32i, !cir.ptr<!s32i> loc(#loc124)
              } else {
                %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
                %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc48)
              } loc(#loc123)
            } loc(#loc121)
          } loc(#loc119)
        } loc(#loc118)
        cir.yield loc(#loc23)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc50)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc125)
        cir.yield loc(#loc115)
      } loc(#loc115)
    } loc(#loc115)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc12)
    cir.scope {
      cir.scope {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc12)
        %6 = cir.const #cir.int<5> : !s32i loc(#loc12)
        %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc12)
        cir.if %7 {
        } else {
          %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc12)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc12)
          %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc12)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc12)
          %12 = cir.const #cir.int<50> : !s32i loc(#loc12)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc12)
          %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc12)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc12)
          cir.call @__assert_fail(%9, %11, %13, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc12)
        } loc(#loc12)
      } loc(#loc12)
    } loc(#loc12)
    cir.return loc(#loc14)
  } loc(#loc111)
  cir.func no_proto @CWE617_Reachable_Assertion__fgets_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc127)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc53)
    cir.return loc(#loc52)
  } loc(#loc126)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc128)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc129)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc62)
  cir.func @main(%arg0: !s32i loc(fused[#loc65, #loc66]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc67, #loc68])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc131)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc132)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc64)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc69)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc70)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc71)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc71)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc72)
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc59)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %8 = cir.get_global @CWE617_Reachable_Assertion__fgets_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc133)
    cir.call @CWE617_Reachable_Assertion__fgets_17_good() : () -> () loc(#loc74)
    %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc60)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc61)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %13 = cir.get_global @CWE617_Reachable_Assertion__fgets_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc134)
    cir.call @CWE617_Reachable_Assertion__fgets_17_bad() : () -> () loc(#loc78)
    %14 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc62)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc81)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc135)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc135)
    cir.return %17 : !s32i loc(#loc135)
  } loc(#loc130)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc83)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc137)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc138)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc91)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc139)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc95)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc97)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc98)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc142)
        cir.condition(%8) loc(#loc99)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<5> : !s32i loc(#loc101)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc102)
          %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc101)
          cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc144)
        } loc(#loc143)
        cir.yield loc(#loc94)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc104)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc105)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc145)
        cir.yield loc(#loc140)
      } loc(#loc140)
    } loc(#loc140)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc83)
    cir.scope {
      cir.scope {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc83)
        %6 = cir.const #cir.int<5> : !s32i loc(#loc83)
        %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc83)
        cir.if %7 {
        } else {
          %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc83)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc83)
          %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc83)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc83)
          %12 = cir.const #cir.int<70> : !s32i loc(#loc83)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc83)
          %14 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc83)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc83)
          cir.call @__assert_fail(%9, %11, %13, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc83)
        } loc(#loc83)
      } loc(#loc83)
    } loc(#loc83)
    cir.return loc(#loc85)
  } loc(#loc136)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fgets_17.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE617_Reachable_Assertion__fgets_17.c":45:27)
#loc10 = loc("/usr/include/assert.h":67:1)
#loc11 = loc("/usr/include/assert.h":69:43)
#loc12 = loc("CWE617_Reachable_Assertion__fgets_17.c":50:5)
#loc13 = loc("CWE617_Reachable_Assertion__fgets_17.c":27:1)
#loc14 = loc("CWE617_Reachable_Assertion__fgets_17.c":51:1)
#loc15 = loc("CWE617_Reachable_Assertion__fgets_17.c":29:5)
#loc16 = loc("CWE617_Reachable_Assertion__fgets_17.c":29:9)
#loc17 = loc("CWE617_Reachable_Assertion__fgets_17.c":30:5)
#loc18 = loc("CWE617_Reachable_Assertion__fgets_17.c":30:9)
#loc19 = loc("CWE617_Reachable_Assertion__fgets_17.c":32:13)
#loc20 = loc("CWE617_Reachable_Assertion__fgets_17.c":32:12)
#loc21 = loc("CWE617_Reachable_Assertion__fgets_17.c":32:5)
#loc22 = loc("CWE617_Reachable_Assertion__fgets_17.c":33:5)
#loc23 = loc("CWE617_Reachable_Assertion__fgets_17.c":48:5)
#loc24 = loc("CWE617_Reachable_Assertion__fgets_17.c":33:13)
#loc25 = loc("CWE617_Reachable_Assertion__fgets_17.c":33:9)
#loc26 = loc("CWE617_Reachable_Assertion__fgets_17.c":33:16)
#loc27 = loc("CWE617_Reachable_Assertion__fgets_17.c":33:20)
#loc28 = loc("CWE617_Reachable_Assertion__fgets_17.c":33:18)
#loc29 = loc("CWE617_Reachable_Assertion__fgets_17.c":34:5)
#loc30 = loc("CWE617_Reachable_Assertion__fgets_17.c":35:9)
#loc31 = loc("CWE617_Reachable_Assertion__fgets_17.c":47:9)
#loc32 = loc("CWE617_Reachable_Assertion__fgets_17.c":36:13)
#loc33 = loc("CWE617_Reachable_Assertion__fgets_17.c":36:49)
#loc34 = loc("CWE617_Reachable_Assertion__fgets_17.c":38:13)
#loc35 = loc("CWE617_Reachable_Assertion__fgets_17.c":46:13)
#loc36 = loc("CWE617_Reachable_Assertion__fgets_17.c":38:23)
#loc37 = loc("CWE617_Reachable_Assertion__fgets_17.c":38:36)
#loc38 = loc("CWE617_Reachable_Assertion__fgets_17.c":38:53)
#loc39 = loc("CWE617_Reachable_Assertion__fgets_17.c":38:17)
#loc40 = loc("CWE617_Reachable_Assertion__fgets_17.c":38:63)
#loc41 = loc("CWE617_Reachable_Assertion__fgets_17.c":39:13)
#loc42 = loc("CWE617_Reachable_Assertion__fgets_17.c":42:13)
#loc43 = loc("CWE617_Reachable_Assertion__fgets_17.c":44:13)
#loc44 = loc("CWE617_Reachable_Assertion__fgets_17.c":41:29)
#loc45 = loc("CWE617_Reachable_Assertion__fgets_17.c":41:24)
#loc46 = loc("CWE617_Reachable_Assertion__fgets_17.c":41:17)
#loc47 = loc("CWE617_Reachable_Assertion__fgets_17.c":41:40)
#loc48 = loc("CWE617_Reachable_Assertion__fgets_17.c":45:17)
#loc49 = loc("CWE617_Reachable_Assertion__fgets_17.c":33:24)
#loc50 = loc("CWE617_Reachable_Assertion__fgets_17.c":33:23)
#loc51 = loc("CWE617_Reachable_Assertion__fgets_17.c":73:1)
#loc52 = loc("CWE617_Reachable_Assertion__fgets_17.c":76:1)
#loc53 = loc("CWE617_Reachable_Assertion__fgets_17.c":75:5)
#loc54 = loc("CWE617_Reachable_Assertion__fgets_17.c":75:13)
#loc55 = loc("/usr/include/stdlib.h":575:1)
#loc56 = loc("/usr/include/stdlib.h":575:41)
#loc57 = loc("/usr/include/time.h":76:1)
#loc58 = loc("/usr/include/time.h":76:38)
#loc59 = loc("CWE617_Reachable_Assertion__fgets_17.c":93:15)
#loc60 = loc("CWE617_Reachable_Assertion__fgets_17.c":95:15)
#loc61 = loc("CWE617_Reachable_Assertion__fgets_17.c":98:15)
#loc62 = loc("CWE617_Reachable_Assertion__fgets_17.c":100:15)
#loc63 = loc("CWE617_Reachable_Assertion__fgets_17.c":88:1)
#loc64 = loc("CWE617_Reachable_Assertion__fgets_17.c":103:1)
#loc69 = loc("CWE617_Reachable_Assertion__fgets_17.c":89:1)
#loc70 = loc("CWE617_Reachable_Assertion__fgets_17.c":91:27)
#loc71 = loc("CWE617_Reachable_Assertion__fgets_17.c":91:22)
#loc72 = loc("CWE617_Reachable_Assertion__fgets_17.c":91:5)
#loc73 = loc("CWE617_Reachable_Assertion__fgets_17.c":93:5)
#loc74 = loc("CWE617_Reachable_Assertion__fgets_17.c":94:5)
#loc75 = loc("CWE617_Reachable_Assertion__fgets_17.c":94:47)
#loc76 = loc("CWE617_Reachable_Assertion__fgets_17.c":95:5)
#loc77 = loc("CWE617_Reachable_Assertion__fgets_17.c":98:5)
#loc78 = loc("CWE617_Reachable_Assertion__fgets_17.c":99:5)
#loc79 = loc("CWE617_Reachable_Assertion__fgets_17.c":99:46)
#loc80 = loc("CWE617_Reachable_Assertion__fgets_17.c":100:5)
#loc81 = loc("CWE617_Reachable_Assertion__fgets_17.c":102:12)
#loc82 = loc("CWE617_Reachable_Assertion__fgets_17.c":102:5)
#loc83 = loc("CWE617_Reachable_Assertion__fgets_17.c":70:5)
#loc84 = loc("CWE617_Reachable_Assertion__fgets_17.c":58:1)
#loc85 = loc("CWE617_Reachable_Assertion__fgets_17.c":71:1)
#loc86 = loc("CWE617_Reachable_Assertion__fgets_17.c":60:5)
#loc87 = loc("CWE617_Reachable_Assertion__fgets_17.c":60:9)
#loc88 = loc("CWE617_Reachable_Assertion__fgets_17.c":61:5)
#loc89 = loc("CWE617_Reachable_Assertion__fgets_17.c":61:9)
#loc90 = loc("CWE617_Reachable_Assertion__fgets_17.c":63:13)
#loc91 = loc("CWE617_Reachable_Assertion__fgets_17.c":63:12)
#loc92 = loc("CWE617_Reachable_Assertion__fgets_17.c":63:5)
#loc93 = loc("CWE617_Reachable_Assertion__fgets_17.c":64:5)
#loc94 = loc("CWE617_Reachable_Assertion__fgets_17.c":68:5)
#loc95 = loc("CWE617_Reachable_Assertion__fgets_17.c":64:13)
#loc96 = loc("CWE617_Reachable_Assertion__fgets_17.c":64:9)
#loc97 = loc("CWE617_Reachable_Assertion__fgets_17.c":64:16)
#loc98 = loc("CWE617_Reachable_Assertion__fgets_17.c":64:20)
#loc99 = loc("CWE617_Reachable_Assertion__fgets_17.c":64:18)
#loc100 = loc("CWE617_Reachable_Assertion__fgets_17.c":65:5)
#loc101 = loc("CWE617_Reachable_Assertion__fgets_17.c":67:16)
#loc102 = loc("CWE617_Reachable_Assertion__fgets_17.c":67:29)
#loc103 = loc("CWE617_Reachable_Assertion__fgets_17.c":67:9)
#loc104 = loc("CWE617_Reachable_Assertion__fgets_17.c":64:24)
#loc105 = loc("CWE617_Reachable_Assertion__fgets_17.c":64:23)
#loc106 = loc(fused[#loc1, #loc2])
#loc107 = loc(fused[#loc3, #loc4])
#loc108 = loc(fused[#loc5, #loc6])
#loc109 = loc(fused[#loc7, #loc8])
#loc110 = loc(fused[#loc10, #loc11])
#loc111 = loc(fused[#loc13, #loc14])
#loc112 = loc(fused[#loc15, #loc16])
#loc113 = loc(fused[#loc17, #loc18])
#loc114 = loc(fused[#loc21, #loc19])
#loc115 = loc(fused[#loc22, #loc23])
#loc116 = loc(fused[#loc25, #loc24])
#loc117 = loc(fused[#loc26, #loc27])
#loc118 = loc(fused[#loc29, #loc23])
#loc119 = loc(fused[#loc30, #loc31])
#loc120 = loc(fused[#loc32, #loc33])
#loc121 = loc(fused[#loc34, #loc35])
#loc122 = loc(fused[#loc39, #loc40])
#loc123 = loc(fused[#loc41, #loc42, #loc43, #loc35])
#loc124 = loc(fused[#loc46, #loc47])
#loc125 = loc(fused[#loc50, #loc49])
#loc126 = loc(fused[#loc51, #loc52])
#loc127 = loc(fused[#loc53, #loc54])
#loc128 = loc(fused[#loc55, #loc56])
#loc129 = loc(fused[#loc57, #loc58])
#loc130 = loc(fused[#loc63, #loc64])
#loc133 = loc(fused[#loc74, #loc75])
#loc134 = loc(fused[#loc78, #loc79])
#loc135 = loc(fused[#loc82, #loc81])
#loc136 = loc(fused[#loc84, #loc85])
#loc137 = loc(fused[#loc86, #loc87])
#loc138 = loc(fused[#loc88, #loc89])
#loc139 = loc(fused[#loc92, #loc90])
#loc140 = loc(fused[#loc93, #loc94])
#loc141 = loc(fused[#loc96, #loc95])
#loc142 = loc(fused[#loc97, #loc98])
#loc143 = loc(fused[#loc100, #loc94])
#loc144 = loc(fused[#loc103, #loc102])
#loc145 = loc(fused[#loc105, #loc104])
