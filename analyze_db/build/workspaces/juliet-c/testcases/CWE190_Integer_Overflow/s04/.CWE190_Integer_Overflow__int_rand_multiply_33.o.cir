!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc94)
  cir.func private @printIntLine(!s32i) loc(#loc95)
  cir.func @_ZN45CWE190_Integer_Overflow__int_rand_multiply_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc97)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc98)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc10)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc13)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc13)
    %7 = cir.ternary(%6, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc13)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc13)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc13)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc13)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc13)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc13)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc13)
      cir.yield %20 : !u32i loc(#loc13)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc13)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc13)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc13)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc13)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc13)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc13)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc13)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc13)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc13)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc13)
      cir.yield %24 : !u32i loc(#loc13)
    }) : (!cir.bool) -> !u32i loc(#loc13)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc13)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    cir.scope {
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc102)
      %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc18)
      %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc18)
      cir.store %11, %9 : !s32i, !cir.ptr<!s32i> loc(#loc102)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc21)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc22)
        %14 = cir.cmp(gt, %12, %13) : !s32i, !cir.bool loc(#loc104)
        cir.if %14 {
          %15 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc106)
          %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc26)
          %17 = cir.const #cir.int<2> : !s32i loc(#loc25)
          %18 = cir.binop(mul, %16, %17) nsw : !s32i loc(#loc26)
          cir.store %18, %15 : !s32i, !cir.ptr<!s32i> loc(#loc106)
          %19 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc27)
          cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc28)
        } loc(#loc105)
      } loc(#loc103)
    } loc(#loc101)
    cir.return loc(#loc6)
  } loc(#loc96)
  cir.func internal private @_ZN45CWE190_Integer_Overflow__int_rand_multiply_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc108)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc109)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc34)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc35)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc110)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc37)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc113)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc42)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc42)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc113)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc45)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc46)
        %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc115)
        cir.if %9 {
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc117)
          %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc50)
          %12 = cir.const #cir.int<2> : !s32i loc(#loc49)
          %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc50)
          cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc117)
          %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc51)
          cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc52)
        } loc(#loc116)
      } loc(#loc114)
    } loc(#loc112)
    cir.return loc(#loc30)
  } loc(#loc107)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc118)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc55)
  cir.func internal private @_ZN45CWE190_Integer_Overflow__int_rand_multiply_33L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc120)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc121)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc61)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc62)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc122)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc64)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc64)
    %7 = cir.ternary(%6, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc64)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc64)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc64)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc64)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc64)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc64)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc64)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc64)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc64)
      cir.yield %20 : !u32i loc(#loc64)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc64)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc64)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc64)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc64)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc64)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc64)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc64)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc64)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc64)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc64)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc64)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc64)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc64)
      cir.yield %24 : !u32i loc(#loc64)
    }) : (!cir.bool) -> !u32i loc(#loc64)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc64)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc123)
    cir.scope {
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc125)
      %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc69)
      %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc69)
      cir.store %11, %9 : !s32i, !cir.ptr<!s32i> loc(#loc125)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc72)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc73)
        %14 = cir.cmp(gt, %12, %13) : !s32i, !cir.bool loc(#loc127)
        cir.if %14 {
          cir.scope {
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc77)
            %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc78)
            %17 = cir.const #cir.int<2> : !s32i loc(#loc79)
            %18 = cir.binop(div, %16, %17) : !s32i loc(#loc130)
            %19 = cir.cmp(lt, %15, %18) : !s32i, !cir.bool loc(#loc131)
            cir.if %19 {
              %20 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc133)
              %21 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc86)
              %22 = cir.const #cir.int<2> : !s32i loc(#loc85)
              %23 = cir.binop(mul, %21, %22) nsw : !s32i loc(#loc86)
              cir.store %23, %20 : !s32i, !cir.ptr<!s32i> loc(#loc133)
              %24 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc87)
              cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc88)
            } else {
              %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc55)
              %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc55)
              cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc89)
            } loc(#loc132)
          } loc(#loc129)
        } loc(#loc128)
      } loc(#loc126)
    } loc(#loc124)
    cir.return loc(#loc57)
  } loc(#loc119)
  cir.func @_ZN45CWE190_Integer_Overflow__int_rand_multiply_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN45CWE190_Integer_Overflow__int_rand_multiply_33L7goodG2BEv() : () -> () loc(#loc92)
    cir.call @_ZN45CWE190_Integer_Overflow__int_rand_multiply_33L7goodB2GEv() : () -> () loc(#loc93)
    cir.return loc(#loc91)
  } loc(#loc134)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":25:1)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":42:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":27:5)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":27:9)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":28:5)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":28:20)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":30:12)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":30:5)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":32:12)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":32:5)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":33:5)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":41:5)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":34:9)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":34:20)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":35:9)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":40:9)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":35:12)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":35:19)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":36:9)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":38:13)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":38:33)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":38:26)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":39:26)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":39:13)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":49:1)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":66:1)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":51:5)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":51:9)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":52:5)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":52:20)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":54:12)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":54:5)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":56:12)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":56:5)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":57:5)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":65:5)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":58:9)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":58:20)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":59:9)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":64:9)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":59:12)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":59:19)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":60:9)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":62:13)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":62:33)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":62:26)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":63:26)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":63:13)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":89:27)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":69:1)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":93:1)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":71:5)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":71:9)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":72:5)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":72:20)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":74:12)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":74:5)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":76:12)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":76:5)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":77:5)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":92:5)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":78:9)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":78:20)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":79:9)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":91:9)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":79:12)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":79:19)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":80:9)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":82:13)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":90:13)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":82:17)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":82:25)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":82:33)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":82:34)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":83:13)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":86:13)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":88:13)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":84:17)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":84:37)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":84:30)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":85:30)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":85:17)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":89:17)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":95:1)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":99:1)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":97:5)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_multiply_33.cpp":98:5)
#loc94 = loc(fused[#loc1, #loc2])
#loc95 = loc(fused[#loc3, #loc4])
#loc96 = loc(fused[#loc5, #loc6])
#loc97 = loc(fused[#loc7, #loc8])
#loc98 = loc(fused[#loc9, #loc10])
#loc99 = loc(fused[#loc12, #loc11])
#loc100 = loc(fused[#loc14, #loc13])
#loc101 = loc(fused[#loc15, #loc16])
#loc102 = loc(fused[#loc17, #loc18])
#loc103 = loc(fused[#loc19, #loc20])
#loc104 = loc(fused[#loc21, #loc22])
#loc105 = loc(fused[#loc23, #loc20])
#loc106 = loc(fused[#loc24, #loc25])
#loc107 = loc(fused[#loc29, #loc30])
#loc108 = loc(fused[#loc31, #loc32])
#loc109 = loc(fused[#loc33, #loc34])
#loc110 = loc(fused[#loc36, #loc35])
#loc111 = loc(fused[#loc38, #loc37])
#loc112 = loc(fused[#loc39, #loc40])
#loc113 = loc(fused[#loc41, #loc42])
#loc114 = loc(fused[#loc43, #loc44])
#loc115 = loc(fused[#loc45, #loc46])
#loc116 = loc(fused[#loc47, #loc44])
#loc117 = loc(fused[#loc48, #loc49])
#loc118 = loc(fused[#loc53, #loc54])
#loc119 = loc(fused[#loc56, #loc57])
#loc120 = loc(fused[#loc58, #loc59])
#loc121 = loc(fused[#loc60, #loc61])
#loc122 = loc(fused[#loc63, #loc62])
#loc123 = loc(fused[#loc65, #loc64])
#loc124 = loc(fused[#loc66, #loc67])
#loc125 = loc(fused[#loc68, #loc69])
#loc126 = loc(fused[#loc70, #loc71])
#loc127 = loc(fused[#loc72, #loc73])
#loc128 = loc(fused[#loc74, #loc71])
#loc129 = loc(fused[#loc75, #loc76])
#loc130 = loc(fused[#loc78, #loc79])
#loc131 = loc(fused[#loc77, #loc80])
#loc132 = loc(fused[#loc81, #loc82, #loc83, #loc76])
#loc133 = loc(fused[#loc84, #loc85])
#loc134 = loc(fused[#loc90, #loc91])
