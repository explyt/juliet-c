!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc43 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":104:10)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":104:14)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":104:20)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":104:32)
#loc126 = loc(fused[#loc43, #loc44])
#loc127 = loc(fused[#loc45, #loc46])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_case_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc109)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc110)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc111)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_case_07_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc109)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc12)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc13)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc114)
      cir.if %3 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc117)
          %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %8 = cir.const #cir.int<3> : !s32i loc(#loc20)
          %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc118)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc117)
          cir.scope {
            %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc23)
            cir.switch (%10 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                cir.break loc(#loc25)
              } loc(#loc24)
              cir.yield loc(#loc21)
            } loc(#loc21)
          } loc(#loc119)
        } loc(#loc116)
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc7)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc7)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc26)
      } loc(#loc115)
    } loc(#loc113)
    cir.return loc(#loc9)
  } loc(#loc112)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_case_07_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc121)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc122)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc120)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc123)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc124)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc40)
  cir.func @main(%arg0: !s32i loc(fused[#loc43, #loc44]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc45, #loc46])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc126)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc127)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc42)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc47)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc47)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc48)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc49)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc49)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc50)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc37)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    %8 = cir.get_global @CWE398_Poor_Code_Quality__empty_case_07_good : !cir.ptr<!cir.func<!void ()>> loc(#loc128)
    cir.call @CWE398_Poor_Code_Quality__empty_case_07_good() : () -> () loc(#loc52)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc38)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc39)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %13 = cir.get_global @CWE398_Poor_Code_Quality__empty_case_07_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc129)
    cir.call @CWE398_Poor_Code_Quality__empty_case_07_bad() : () -> () loc(#loc56)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc40)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc59)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc130)
    cir.return %17 : !s32i loc(#loc130)
  } loc(#loc125)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Inside the case statement\00" : !cir.array<!s8i x 26>> : !cir.array<!s8i x 26> {alignment = 1 : i64} loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc63)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc109)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc68)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc69)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc133)
      cir.if %3 {
        %4 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc61)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc61)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc73)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc136)
          %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc78)
          %8 = cir.const #cir.int<3> : !s32i loc(#loc79)
          %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc137)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc136)
          cir.scope {
            %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc82)
            cir.switch (%10 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc62)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc62)
                cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc84)
                cir.break loc(#loc85)
              } loc(#loc83)
              cir.yield loc(#loc80)
            } loc(#loc80)
          } loc(#loc138)
        } loc(#loc135)
        %4 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc63)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc63)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc86)
      } loc(#loc134)
    } loc(#loc132)
    cir.return loc(#loc65)
  } loc(#loc131)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc109)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc91)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc92)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc141)
      cir.if %3 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc144)
          %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
          %8 = cir.const #cir.int<3> : !s32i loc(#loc99)
          %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc145)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc144)
          cir.scope {
            %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc102)
            cir.switch (%10 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc104)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc104)
                cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc105)
                cir.break loc(#loc106)
              } loc(#loc103)
              cir.yield loc(#loc100)
            } loc(#loc100)
          } loc(#loc146)
        } loc(#loc143)
        %4 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc107)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc107)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc108)
      } loc(#loc142)
    } loc(#loc140)
    cir.return loc(#loc88)
  } loc(#loc139)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_case_07.c":0:0)
#loc1 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":21:1)
#loc2 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":21:25)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":38:19)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":25:1)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":40:1)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":27:5)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":39:5)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":27:8)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":27:20)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":28:5)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":30:9)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":37:9)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":31:13)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":31:32)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":31:22)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":31:31)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":32:13)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":36:13)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":32:21)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":34:13)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":35:17)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":38:9)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":89:1)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":93:1)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":91:5)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":91:11)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":92:5)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":92:11)
#loc33 = loc("/usr/include/stdlib.h":575:1)
#loc34 = loc("/usr/include/stdlib.h":575:41)
#loc35 = loc("/usr/include/time.h":76:1)
#loc36 = loc("/usr/include/time.h":76:38)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":109:15)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":111:15)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":114:15)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":116:15)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":104:1)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":119:1)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":105:1)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":107:27)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":107:22)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":107:5)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":109:5)
#loc52 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":110:5)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":110:50)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":111:5)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":114:5)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":115:5)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":115:49)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":116:5)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":118:12)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":118:5)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":52:19)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":62:27)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":66:19)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":47:1)
#loc65 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":68:1)
#loc66 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":49:5)
#loc67 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":67:5)
#loc68 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":49:8)
#loc69 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":49:20)
#loc70 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":50:5)
#loc71 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":53:5)
#loc72 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":55:5)
#loc73 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":52:9)
#loc74 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":57:9)
#loc75 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":65:9)
#loc76 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":58:13)
#loc77 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":58:32)
#loc78 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":58:22)
#loc79 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":58:31)
#loc80 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":59:13)
#loc81 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":64:13)
#loc82 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":59:21)
#loc83 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":61:13)
#loc84 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":62:17)
#loc85 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":63:17)
#loc86 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":66:9)
#loc87 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":71:1)
#loc88 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":87:1)
#loc89 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":73:5)
#loc90 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":86:5)
#loc91 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":73:8)
#loc92 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":73:20)
#loc93 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":74:5)
#loc94 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":76:9)
#loc95 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":84:9)
#loc96 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":77:13)
#loc97 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":77:32)
#loc98 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":77:22)
#loc99 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":77:31)
#loc100 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":78:13)
#loc101 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":83:13)
#loc102 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":78:21)
#loc103 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":80:13)
#loc104 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":81:27)
#loc105 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":81:17)
#loc106 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":82:17)
#loc107 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":85:19)
#loc108 = loc("CWE398_Poor_Code_Quality__empty_case_07.c":85:9)
#loc109 = loc(fused[#loc1, #loc2])
#loc110 = loc(fused[#loc3, #loc4])
#loc111 = loc(fused[#loc5, #loc6])
#loc112 = loc(fused[#loc8, #loc9])
#loc113 = loc(fused[#loc10, #loc11])
#loc114 = loc(fused[#loc12, #loc13])
#loc115 = loc(fused[#loc14, #loc11])
#loc116 = loc(fused[#loc15, #loc16])
#loc117 = loc(fused[#loc17, #loc18])
#loc118 = loc(fused[#loc19, #loc20])
#loc119 = loc(fused[#loc21, #loc22])
#loc120 = loc(fused[#loc27, #loc28])
#loc121 = loc(fused[#loc29, #loc30])
#loc122 = loc(fused[#loc31, #loc32])
#loc123 = loc(fused[#loc33, #loc34])
#loc124 = loc(fused[#loc35, #loc36])
#loc125 = loc(fused[#loc41, #loc42])
#loc128 = loc(fused[#loc52, #loc53])
#loc129 = loc(fused[#loc56, #loc57])
#loc130 = loc(fused[#loc60, #loc59])
#loc131 = loc(fused[#loc64, #loc65])
#loc132 = loc(fused[#loc66, #loc67])
#loc133 = loc(fused[#loc68, #loc69])
#loc134 = loc(fused[#loc70, #loc71, #loc72, #loc67])
#loc135 = loc(fused[#loc74, #loc75])
#loc136 = loc(fused[#loc76, #loc77])
#loc137 = loc(fused[#loc78, #loc79])
#loc138 = loc(fused[#loc80, #loc81])
#loc139 = loc(fused[#loc87, #loc88])
#loc140 = loc(fused[#loc89, #loc90])
#loc141 = loc(fused[#loc91, #loc92])
#loc142 = loc(fused[#loc93, #loc90])
#loc143 = loc(fused[#loc94, #loc95])
#loc144 = loc(fused[#loc96, #loc97])
#loc145 = loc(fused[#loc98, #loc99])
#loc146 = loc(fused[#loc100, #loc101])
