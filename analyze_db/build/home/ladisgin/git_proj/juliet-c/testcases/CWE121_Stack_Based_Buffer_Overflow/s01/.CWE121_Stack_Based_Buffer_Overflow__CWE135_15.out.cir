!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":217:10)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":217:14)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":217:20)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":217:32)
#loc256 = loc(fused[#loc64, #loc65])
#loc257 = loc(fused[#loc66, #loc67])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc236)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc4)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc237)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc238)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc240)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc241)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc242)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc17)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc243)
    cir.br ^bb1 loc(#loc244)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<6> : !s32i loc(#loc21)
    cir.br ^bb2 loc(#loc19)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %4 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc19)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc22)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
    cir.store %7, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc245)
    cir.br ^bb6 loc(#loc24)
  ^bb5:  // pred: ^bb2
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc4)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc4)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc25)
    cir.br ^bb6 loc(#loc26)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc20)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc246)
  ^bb8:  // pred: ^bb7
    %10 = cir.const #cir.int<7> : !s32i loc(#loc29)
    cir.br ^bb9 loc(#loc27)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %10 : !s32i, ^bb14 [
      7: ^bb11
    ] loc(#loc27)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc30)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc247)
  ^bb12:  // pred: ^bb11
    %11 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc33)
    %12 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc34)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
    %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc33)
    cir.store %14, %0 : !u64i, !cir.ptr<!u64i> loc(#loc240)
    %15 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc14)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc14)
    %18 = cir.binop(add, %15, %17) : !u64i loc(#loc14)
    %19 = cir.const #cir.int<4> : !u64i loc(#loc14)
    %20 = cir.binop(mul, %18, %19) : !u64i loc(#loc14)
    %21 = cir.alloca !u8i, !cir.ptr<!u8i>, %20 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc14)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc14)
    cir.store %22, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc241)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc35)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc35)
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc36)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc36)
    %27 = cir.call @wcscpy(%24, %26) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc37)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc38)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc39)
    cir.br ^bb13 loc(#loc32)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc40)
  ^bb14:  // pred: ^bb9
    %30 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc41)
    %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc42)
    cir.br ^bb15 loc(#loc43)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc28)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc10)
  } loc(#loc239)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc249)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc250)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc251)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc252)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    cir.return loc(#loc45)
  } loc(#loc248)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc253)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc254)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc61)
  cir.func @main(%arg0: !s32i loc(fused[#loc64, #loc65]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc66, #loc67])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc256)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc257)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc63)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc68)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc68)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc69)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc70)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc70)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc71)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc58)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc258)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_15_good() : () -> () loc(#loc73)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc59)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc60)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc259)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_15_bad() : () -> () loc(#loc77)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc61)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc80)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc260)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc260)
    cir.return %17 : !s32i loc(#loc260)
  } loc(#loc255)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc261)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc262)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc264)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc265)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc266)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc94)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc267)
    cir.br ^bb1 loc(#loc268)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<6> : !s32i loc(#loc98)
    cir.br ^bb2 loc(#loc96)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %4 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc96)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc99)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc100)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc100)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc100)
    cir.store %7, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc269)
    cir.br ^bb6 loc(#loc102)
  ^bb5:  // pred: ^bb2
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc103)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc103)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc104)
    cir.br ^bb6 loc(#loc105)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc97)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc270)
  ^bb8:  // pred: ^bb7
    %10 = cir.const #cir.int<8> : !s32i loc(#loc108)
    cir.br ^bb9 loc(#loc106)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %10 : !s32i, ^bb12 [
      7: ^bb11
    ] loc(#loc106)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc109)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc110)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc110)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc111)
    cir.br ^bb15 loc(#loc112)
  ^bb12:  // pred: ^bb9
    cir.br ^bb13 loc(#loc271)
  ^bb13:  // pred: ^bb12
    %13 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc115)
    %14 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc116)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc116)
    %16 = cir.call @wcslen(%15) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc115)
    cir.store %16, %0 : !u64i, !cir.ptr<!u64i> loc(#loc264)
    %17 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc91)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc91)
    %20 = cir.binop(add, %17, %19) : !u64i loc(#loc91)
    %21 = cir.const #cir.int<4> : !u64i loc(#loc91)
    %22 = cir.binop(mul, %20, %21) : !u64i loc(#loc91)
    %23 = cir.alloca !u8i, !cir.ptr<!u8i>, %22 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc91)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc91)
    cir.store %24, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc265)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc117)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc117)
    %27 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc118)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc118)
    %29 = cir.call @wcscpy(%26, %28) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc119)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc120)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc120)
    cir.call @printWLine(%31) : (!cir.ptr<!s32i>) -> () loc(#loc121)
    cir.br ^bb14 loc(#loc114)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc122)
  ^bb15:  // 2 preds: ^bb11, ^bb14
    cir.br ^bb16 loc(#loc107)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc87)
  } loc(#loc263)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc273)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc274)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc275)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc131)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc276)
    cir.br ^bb1 loc(#loc277)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<6> : !s32i loc(#loc135)
    cir.br ^bb2 loc(#loc133)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %4 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc133)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc136)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc137)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc137)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc137)
    cir.store %7, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc278)
    cir.br ^bb6 loc(#loc139)
  ^bb5:  // pred: ^bb2
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc140)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc140)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc141)
    cir.br ^bb6 loc(#loc142)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc134)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc279)
  ^bb8:  // pred: ^bb7
    %10 = cir.const #cir.int<7> : !s32i loc(#loc145)
    cir.br ^bb9 loc(#loc143)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %10 : !s32i, ^bb14 [
      7: ^bb11
    ] loc(#loc143)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc146)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc280)
  ^bb12:  // pred: ^bb11
    %11 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc149)
    %12 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc150)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc150)
    %14 = cir.call @wcslen(%13) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc149)
    cir.store %14, %0 : !u64i, !cir.ptr<!u64i> loc(#loc273)
    %15 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc128)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc128)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc128)
    %18 = cir.binop(add, %15, %17) : !u64i loc(#loc128)
    %19 = cir.const #cir.int<4> : !u64i loc(#loc128)
    %20 = cir.binop(mul, %18, %19) : !u64i loc(#loc128)
    %21 = cir.alloca !u8i, !cir.ptr<!u8i>, %20 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc128)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc128)
    cir.store %22, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc274)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc151)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc151)
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc152)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc152)
    %27 = cir.call @wcscpy(%24, %26) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc153)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc154)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc154)
    cir.call @printWLine(%29) : (!cir.ptr<!s32i>) -> () loc(#loc155)
    cir.br ^bb13 loc(#loc148)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc156)
  ^bb14:  // pred: ^bb9
    %30 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc157)
    %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc157)
    cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc158)
    cir.br ^bb15 loc(#loc159)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc144)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc124)
  } loc(#loc272)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc160)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc281)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc283)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc284)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc285)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc171)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc286)
    cir.br ^bb1 loc(#loc287)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<5> : !s32i loc(#loc175)
    cir.br ^bb2 loc(#loc173)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %4 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc173)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc176)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc177)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc177)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc178)
    cir.br ^bb6 loc(#loc179)
  ^bb5:  // pred: ^bb2
    %7 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc160)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc160)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc160)
    cir.store %9, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc288)
    cir.br ^bb6 loc(#loc181)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc174)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc289)
  ^bb8:  // pred: ^bb7
    %10 = cir.const #cir.int<7> : !s32i loc(#loc184)
    cir.br ^bb9 loc(#loc182)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %10 : !s32i, ^bb14 [
      7: ^bb11
    ] loc(#loc182)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc185)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc290)
  ^bb12:  // pred: ^bb11
    %11 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc188)
    %12 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc189)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc189)
    %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc188)
    cir.store %14, %0 : !u64i, !cir.ptr<!u64i> loc(#loc283)
    %15 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc168)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc168)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc168)
    %18 = cir.binop(add, %15, %17) : !u64i loc(#loc168)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc168)
    %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc168)
    %21 = cir.binop(mul, %18, %20) : !u64i loc(#loc168)
    %22 = cir.alloca !u8i, !cir.ptr<!u8i>, %21 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc168)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc168)
    cir.store %23, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc284)
    %24 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc190)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc191)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc191)
    %27 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc192)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc192)
    %29 = cir.call @strcpy(%26, %28) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc190)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc193)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc193)
    cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc194)
    cir.br ^bb13 loc(#loc187)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc195)
  ^bb14:  // pred: ^bb9
    %32 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc196)
    %33 = cir.cast(array_to_ptrdecay, %32 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc196)
    cir.call @printLine(%33) : (!cir.ptr<!s8i>) -> () loc(#loc197)
    cir.br ^bb15 loc(#loc198)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc183)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc164)
  } loc(#loc282)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc292)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc293)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc294)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc207)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc295)
    cir.br ^bb1 loc(#loc296)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<6> : !s32i loc(#loc211)
    cir.br ^bb2 loc(#loc209)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %4 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc209)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc212)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc213)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc213)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc213)
    cir.store %7, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc297)
    cir.br ^bb6 loc(#loc215)
  ^bb5:  // pred: ^bb2
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc216)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc216)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc217)
    cir.br ^bb6 loc(#loc218)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc210)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc298)
  ^bb8:  // pred: ^bb7
    %10 = cir.const #cir.int<7> : !s32i loc(#loc221)
    cir.br ^bb9 loc(#loc219)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %10 : !s32i, ^bb14 [
      7: ^bb11
    ] loc(#loc219)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc222)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc299)
  ^bb12:  // pred: ^bb11
    %11 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc225)
    %12 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc226)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc226)
    %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc225)
    cir.store %14, %0 : !u64i, !cir.ptr<!u64i> loc(#loc292)
    %15 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc204)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc204)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc204)
    %18 = cir.binop(add, %15, %17) : !u64i loc(#loc204)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc204)
    %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc204)
    %21 = cir.binop(mul, %18, %20) : !u64i loc(#loc204)
    %22 = cir.alloca !u8i, !cir.ptr<!u8i>, %21 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc204)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc204)
    cir.store %23, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc293)
    %24 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc227)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc228)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc228)
    %27 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc229)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc229)
    %29 = cir.call @strcpy(%26, %28) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc227)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc230)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc230)
    cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc231)
    cir.br ^bb13 loc(#loc224)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc232)
  ^bb14:  // pred: ^bb9
    %32 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc233)
    %33 = cir.cast(array_to_ptrdecay, %32 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc233)
    cir.call @printLine(%33) : (!cir.ptr<!s8i>) -> () loc(#loc234)
    cir.br ^bb15 loc(#loc235)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc220)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc200)
  } loc(#loc291)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":35:24)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":39:19)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/wchar.h":98:1)
#loc8 = loc("/usr/include/wchar.h":100:14)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":27:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":58:1)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":47:9)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":47:45)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":48:9)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":48:31)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":29:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":29:12)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":30:12)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":30:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":31:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":41:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":31:12)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":33:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":35:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":36:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":39:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":40:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":42:5)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":57:5)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":42:12)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":44:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":45:5)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":51:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":47:26)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":47:41)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":49:22)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":49:28)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":49:15)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":50:27)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":50:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":52:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":55:19)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":55:9)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":56:9)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":200:1)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":206:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":202:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":202:14)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":203:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":203:14)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":204:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":204:14)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":205:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":205:14)
#loc54 = loc("/usr/include/stdlib.h":575:1)
#loc55 = loc("/usr/include/stdlib.h":575:41)
#loc56 = loc("/usr/include/time.h":76:1)
#loc57 = loc("/usr/include/time.h":76:38)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":222:15)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":224:15)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":227:15)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":229:15)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":217:1)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":232:1)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":218:1)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":220:27)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":220:22)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":220:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":222:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":223:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":223:56)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":224:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":227:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":228:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":228:55)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":229:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":231:12)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":231:5)
#loc82 = loc("/usr/include/wchar.h":247:1)
#loc83 = loc("/usr/include/wchar.h":247:51)
#loc84 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc85 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":65:1)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":96:1)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":89:9)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":89:48)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":90:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":90:31)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":67:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":67:12)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":68:12)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":68:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":69:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":79:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":69:12)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":71:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":73:24)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":73:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":74:9)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":77:19)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":77:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":78:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":80:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":95:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":80:12)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":82:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":84:19)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":84:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":85:9)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":87:5)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":93:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":89:26)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":89:44)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":91:22)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":91:28)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":91:15)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":92:31)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":92:9)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":94:5)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":99:1)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":130:1)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":119:9)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":119:48)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":120:9)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":120:31)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":101:5)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":101:12)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":102:12)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":102:5)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":103:5)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":113:5)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":103:12)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":105:5)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":107:24)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":107:9)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":108:9)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":111:19)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":111:9)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":112:9)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":114:5)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":129:5)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":114:12)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":116:5)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":117:5)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":123:5)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":119:26)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":119:44)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":121:22)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":121:28)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":121:15)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":122:31)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":122:9)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":124:5)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":127:19)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":127:9)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":128:9)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":145:24)
#loc161 = loc("/usr/include/string.h":141:1)
#loc162 = loc("/usr/include/string.h":142:14)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":133:1)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":164:1)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":153:9)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":153:45)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":154:9)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":154:31)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":135:5)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":135:12)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":136:12)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":136:5)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":137:5)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":147:5)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":137:12)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":139:5)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":141:19)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":141:9)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":142:9)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":145:9)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":146:9)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":148:5)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":163:5)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":148:12)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":150:5)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":151:5)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":157:5)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":153:26)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":153:41)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":155:15)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":155:22)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":155:28)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":156:27)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":156:9)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":158:5)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":161:19)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":161:9)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":162:9)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":167:1)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":198:1)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":187:9)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":187:45)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":188:9)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":188:31)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":169:5)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":169:12)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":170:12)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":170:5)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":171:5)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":181:5)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":171:12)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":173:5)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":175:24)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":175:9)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":176:9)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":179:19)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":179:9)
#loc218 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":180:9)
#loc219 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":182:5)
#loc220 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":197:5)
#loc221 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":182:12)
#loc222 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":184:5)
#loc223 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":185:5)
#loc224 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":191:5)
#loc225 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":187:26)
#loc226 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":187:41)
#loc227 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":189:15)
#loc228 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":189:22)
#loc229 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":189:28)
#loc230 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":190:27)
#loc231 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":190:9)
#loc232 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":192:5)
#loc233 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":195:19)
#loc234 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":195:9)
#loc235 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":196:9)
#loc236 = loc(fused[#loc2, #loc3])
#loc237 = loc(fused[#loc5, #loc6])
#loc238 = loc(fused[#loc7, #loc8])
#loc239 = loc(fused[#loc9, #loc10])
#loc240 = loc(fused[#loc11, #loc12])
#loc241 = loc(fused[#loc13, #loc14])
#loc242 = loc(fused[#loc15, #loc16])
#loc243 = loc(fused[#loc18, #loc17])
#loc244 = loc(fused[#loc19, #loc20])
#loc245 = loc(fused[#loc23, #loc1])
#loc246 = loc(fused[#loc27, #loc28])
#loc247 = loc(fused[#loc31, #loc32])
#loc248 = loc(fused[#loc44, #loc45])
#loc249 = loc(fused[#loc46, #loc47])
#loc250 = loc(fused[#loc48, #loc49])
#loc251 = loc(fused[#loc50, #loc51])
#loc252 = loc(fused[#loc52, #loc53])
#loc253 = loc(fused[#loc54, #loc55])
#loc254 = loc(fused[#loc56, #loc57])
#loc255 = loc(fused[#loc62, #loc63])
#loc258 = loc(fused[#loc73, #loc74])
#loc259 = loc(fused[#loc77, #loc78])
#loc260 = loc(fused[#loc81, #loc80])
#loc261 = loc(fused[#loc82, #loc83])
#loc262 = loc(fused[#loc84, #loc85])
#loc263 = loc(fused[#loc86, #loc87])
#loc264 = loc(fused[#loc88, #loc89])
#loc265 = loc(fused[#loc90, #loc91])
#loc266 = loc(fused[#loc92, #loc93])
#loc267 = loc(fused[#loc95, #loc94])
#loc268 = loc(fused[#loc96, #loc97])
#loc269 = loc(fused[#loc101, #loc100])
#loc270 = loc(fused[#loc106, #loc107])
#loc271 = loc(fused[#loc113, #loc114])
#loc272 = loc(fused[#loc123, #loc124])
#loc273 = loc(fused[#loc125, #loc126])
#loc274 = loc(fused[#loc127, #loc128])
#loc275 = loc(fused[#loc129, #loc130])
#loc276 = loc(fused[#loc132, #loc131])
#loc277 = loc(fused[#loc133, #loc134])
#loc278 = loc(fused[#loc138, #loc137])
#loc279 = loc(fused[#loc143, #loc144])
#loc280 = loc(fused[#loc147, #loc148])
#loc281 = loc(fused[#loc161, #loc162])
#loc282 = loc(fused[#loc163, #loc164])
#loc283 = loc(fused[#loc165, #loc166])
#loc284 = loc(fused[#loc167, #loc168])
#loc285 = loc(fused[#loc169, #loc170])
#loc286 = loc(fused[#loc172, #loc171])
#loc287 = loc(fused[#loc173, #loc174])
#loc288 = loc(fused[#loc180, #loc160])
#loc289 = loc(fused[#loc182, #loc183])
#loc290 = loc(fused[#loc186, #loc187])
#loc291 = loc(fused[#loc199, #loc200])
#loc292 = loc(fused[#loc201, #loc202])
#loc293 = loc(fused[#loc203, #loc204])
#loc294 = loc(fused[#loc205, #loc206])
#loc295 = loc(fused[#loc208, #loc207])
#loc296 = loc(fused[#loc209, #loc210])
#loc297 = loc(fused[#loc214, #loc213])
#loc298 = loc(fused[#loc219, #loc220])
#loc299 = loc(fused[#loc223, #loc224])
