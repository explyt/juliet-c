!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__short_rand_predec_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc83)
  cir.func private @printIntLine(!s32i) loc(#loc84)
  cir.func no_proto @CWE191_Integer_Underflow__short_rand_predec_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc86)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc87)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc11)
    cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc88)
    cir.goto "source" loc(#loc89)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc15)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc16)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc16)
    %8 = cir.ternary(%7, true {
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc16)
      %18 = cir.const #cir.int<30> : !s32i loc(#loc16)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc16)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc16)
      %22 = cir.const #cir.int<15> : !s32i loc(#loc16)
      %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc16)
      %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc16)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc16)
      %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc16)
      cir.yield %27 : !u32i loc(#loc16)
    }, false {
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc16)
      %18 = cir.const #cir.int<30> : !s32i loc(#loc16)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc16)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc16)
      %22 = cir.const #cir.int<15> : !s32i loc(#loc16)
      %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc16)
      %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc16)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc16)
      %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc16)
      %28 = cir.unary(minus, %27) : !u32i, !u32i loc(#loc16)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc16)
      %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc16)
      %31 = cir.binop(sub, %28, %30) : !u32i loc(#loc16)
      cir.yield %31 : !u32i loc(#loc16)
    }) : (!cir.bool) -> !u32i loc(#loc16)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc16)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc16)
    cir.store %10, %0 : !s16i, !cir.ptr<!s16i> loc(#loc90)
    cir.goto "sink" loc(#loc91)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc20)
    %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc21)
    %12 = cir.unary(dec, %11) : !s16i, !s16i loc(#loc21)
    cir.store %12, %0 : !s16i, !cir.ptr<!s16i> loc(#loc92)
    %13 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc10)
    cir.store %13, %1 : !s16i, !cir.ptr<!s16i> loc(#loc87)
    %14 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc23)
    %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc23)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc24)
    cir.return loc(#loc6)
  } loc(#loc85)
  cir.func no_proto @CWE191_Integer_Underflow__short_rand_predec_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc94)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc27)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc95)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    cir.return loc(#loc26)
  } loc(#loc93)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc96)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc33)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc98)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc38)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc38)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc99)
    cir.goto "source" loc(#loc100)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc42)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc43)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc43)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc43)
    %7 = cir.ternary(%6, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc43)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc43)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc43)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc43)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc43)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc43)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc43)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc43)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc43)
      cir.yield %21 : !u32i loc(#loc43)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc43)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc43)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc43)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc43)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc43)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc43)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc43)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc43)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc43)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc43)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc43)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc43)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc43)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc43)
      cir.yield %25 : !u32i loc(#loc43)
    }) : (!cir.bool) -> !u32i loc(#loc43)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc43)
    %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc43)
    cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc101)
    cir.goto "sink" loc(#loc102)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc47)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc50)
      %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc50)
      %12 = cir.const #cir.int<32767> : !s32i loc(#loc51)
      %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc51)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc51)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc51)
      %16 = cir.cmp(gt, %11, %15) : !s32i, !cir.bool loc(#loc104)
      cir.if %16 {
        %17 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc106)
        %18 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc57)
        %19 = cir.unary(dec, %18) : !s16i, !s16i loc(#loc57)
        cir.store %19, %0 : !s16i, !cir.ptr<!s16i> loc(#loc107)
        %20 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc56)
        cir.store %20, %17 : !s16i, !cir.ptr<!s16i> loc(#loc106)
        %21 = cir.load %17 : !cir.ptr<!s16i>, !s16i loc(#loc59)
        %22 = cir.cast(integral, %21 : !s16i), !s32i loc(#loc59)
        cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc60)
      } else {
        %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc33)
        %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc33)
        cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc61)
      } loc(#loc105)
    } loc(#loc103)
    cir.return loc(#loc35)
  } loc(#loc97)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc109)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc110)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc68)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc68)
    cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc111)
    cir.goto "source" loc(#loc112)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc72)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc73)
    %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc74)
    %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc74)
    cir.store %6, %0 : !s16i, !cir.ptr<!s16i> loc(#loc113)
    cir.goto "sink" loc(#loc114)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc78)
    %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc79)
    %8 = cir.unary(dec, %7) : !s16i, !s16i loc(#loc79)
    cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc115)
    %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc67)
    cir.store %9, %1 : !s16i, !cir.ptr<!s16i> loc(#loc110)
    %10 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc81)
    %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc81)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc82)
    cir.return loc(#loc63)
  } loc(#loc108)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__short_rand_predec_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":38:1)
#loc7 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":24:5)
#loc8 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":24:11)
#loc9 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":35:9)
#loc10 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":35:24)
#loc11 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":25:12)
#loc12 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":25:5)
#loc13 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":26:5)
#loc14 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":26:10)
#loc15 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":27:1)
#loc16 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":29:19)
#loc17 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":29:5)
#loc18 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":30:5)
#loc19 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":30:10)
#loc20 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":31:1)
#loc21 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":34:9)
#loc22 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":34:11)
#loc23 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":36:22)
#loc24 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":36:9)
#loc25 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":87:1)
#loc26 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":91:1)
#loc27 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":89:5)
#loc28 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":89:13)
#loc29 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":90:5)
#loc30 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":90:13)
#loc31 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc32 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc33 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":64:19)
#loc34 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":45:1)
#loc35 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":66:1)
#loc36 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":47:5)
#loc37 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":47:11)
#loc38 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":48:12)
#loc39 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":48:5)
#loc40 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":49:5)
#loc41 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":49:10)
#loc42 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":50:1)
#loc43 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":52:19)
#loc44 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":52:5)
#loc45 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":53:5)
#loc46 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":53:10)
#loc47 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":54:1)
#loc48 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":56:5)
#loc49 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":65:5)
#loc50 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":56:9)
#loc51 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":56:16)
#loc52 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":57:5)
#loc53 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":61:5)
#loc54 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":63:5)
#loc55 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":59:9)
#loc56 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":59:24)
#loc57 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":58:9)
#loc58 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":58:11)
#loc59 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":60:22)
#loc60 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":60:9)
#loc61 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":64:9)
#loc62 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":69:1)
#loc63 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":85:1)
#loc64 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":71:5)
#loc65 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":71:11)
#loc66 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":82:9)
#loc67 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":82:24)
#loc68 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":72:12)
#loc69 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":72:5)
#loc70 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":73:5)
#loc71 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":73:10)
#loc72 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":74:1)
#loc73 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":76:13)
#loc74 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":76:12)
#loc75 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":76:5)
#loc76 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":77:5)
#loc77 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":77:10)
#loc78 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":78:1)
#loc79 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":81:9)
#loc80 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":81:11)
#loc81 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":83:22)
#loc82 = loc("CWE191_Integer_Underflow__short_rand_predec_18.c":83:9)
#loc83 = loc(fused[#loc1, #loc2])
#loc84 = loc(fused[#loc3, #loc4])
#loc85 = loc(fused[#loc5, #loc6])
#loc86 = loc(fused[#loc7, #loc8])
#loc87 = loc(fused[#loc9, #loc10])
#loc88 = loc(fused[#loc12, #loc11])
#loc89 = loc(fused[#loc13, #loc14])
#loc90 = loc(fused[#loc17, #loc16])
#loc91 = loc(fused[#loc18, #loc19])
#loc92 = loc(fused[#loc21, #loc22])
#loc93 = loc(fused[#loc25, #loc26])
#loc94 = loc(fused[#loc27, #loc28])
#loc95 = loc(fused[#loc29, #loc30])
#loc96 = loc(fused[#loc31, #loc32])
#loc97 = loc(fused[#loc34, #loc35])
#loc98 = loc(fused[#loc36, #loc37])
#loc99 = loc(fused[#loc39, #loc38])
#loc100 = loc(fused[#loc40, #loc41])
#loc101 = loc(fused[#loc44, #loc43])
#loc102 = loc(fused[#loc45, #loc46])
#loc103 = loc(fused[#loc48, #loc49])
#loc104 = loc(fused[#loc50, #loc51])
#loc105 = loc(fused[#loc52, #loc53, #loc54, #loc49])
#loc106 = loc(fused[#loc55, #loc56])
#loc107 = loc(fused[#loc57, #loc58])
#loc108 = loc(fused[#loc62, #loc63])
#loc109 = loc(fused[#loc64, #loc65])
#loc110 = loc(fused[#loc66, #loc67])
#loc111 = loc(fused[#loc69, #loc68])
#loc112 = loc(fused[#loc70, #loc71])
#loc113 = loc(fused[#loc75, #loc73])
#loc114 = loc(fused[#loc76, #loc77])
#loc115 = loc(fused[#loc79, #loc80])
