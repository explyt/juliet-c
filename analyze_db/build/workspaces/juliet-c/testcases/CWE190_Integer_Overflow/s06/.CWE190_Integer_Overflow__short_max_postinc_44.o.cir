!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":22:21)
#loc6 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":22:27)
#loc36 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":49:25)
#loc37 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":49:31)
#loc64 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":70:25)
#loc65 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":70:31)
#loc95 = loc(fused[#loc5, #loc6])
#loc108 = loc(fused[#loc36, #loc37])
#loc119 = loc(fused[#loc64, #loc65])
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s06/CWE190_Integer_Overflow__short_max_postinc_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc93)
  cir.func internal private @badSink(%arg0: !s16i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc95)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc97)
      %2 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc12)
      %3 = cir.unary(inc, %2) : !s16i, !s16i loc(#loc13)
      cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc98)
      %4 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc11)
      cir.store %4, %1 : !s16i, !cir.ptr<!s16i> loc(#loc97)
      %5 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc14)
      %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc14)
      cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc15)
    } loc(#loc96)
    cir.return loc(#loc4)
  } loc(#loc94)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_postinc_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc100)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s16i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s16i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc101)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!s16i)>> loc(#loc21)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s16i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s16i)>>> loc(#loc101)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc22)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc22)
    cir.store %4, %0 : !s16i, !cir.ptr<!s16i> loc(#loc102)
    %5 = cir.const #cir.int<32767> : !s32i loc(#loc24)
    %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc24)
    cir.store %6, %0 : !s16i, !cir.ptr<!s16i> loc(#loc103)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s16i)>>>, !cir.ptr<!cir.func<(!s16i)>> loc(#loc26)
    %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc27)
    cir.call %7(%8) : (!cir.ptr<!cir.func<(!s16i)>>, !s16i) -> () loc(#loc26)
    cir.return loc(#loc17)
  } loc(#loc99)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_postinc_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc105)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc106)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc104)
  cir.func internal private @goodG2BSink(%arg0: !s16i loc(fused[#loc36, #loc37])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc108)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc38)
    cir.scope {
      %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc110)
      %2 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc43)
      %3 = cir.unary(inc, %2) : !s16i, !s16i loc(#loc44)
      cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc111)
      %4 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc42)
      cir.store %4, %1 : !s16i, !cir.ptr<!s16i> loc(#loc110)
      %5 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc45)
      %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc45)
      cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc46)
    } loc(#loc109)
    cir.return loc(#loc35)
  } loc(#loc107)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc113)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s16i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s16i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc114)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!s16i)>> loc(#loc52)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s16i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s16i)>>> loc(#loc114)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc53)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc53)
    cir.store %4, %0 : !s16i, !cir.ptr<!s16i> loc(#loc115)
    %5 = cir.const #cir.int<2> : !s32i loc(#loc55)
    %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc55)
    cir.store %6, %0 : !s16i, !cir.ptr<!s16i> loc(#loc116)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s16i)>>>, !cir.ptr<!cir.func<(!s16i)>> loc(#loc57)
    %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc58)
    cir.call %7(%8) : (!cir.ptr<!cir.func<(!s16i)>>, !s16i) -> () loc(#loc57)
    cir.return loc(#loc48)
  } loc(#loc112)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc117)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc61)
  cir.func internal private @goodB2GSink(%arg0: !s16i loc(fused[#loc64, #loc65])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc119)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc66)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc69)
      %2 = cir.cast(integral, %1 : !s16i), !s32i loc(#loc69)
      %3 = cir.const #cir.int<32767> : !s32i loc(#loc70)
      %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc121)
      cir.if %4 {
        %5 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc123)
        %6 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc76)
        %7 = cir.unary(inc, %6) : !s16i, !s16i loc(#loc77)
        cir.store %7, %0 : !s16i, !cir.ptr<!s16i> loc(#loc124)
        %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc75)
        cir.store %8, %5 : !s16i, !cir.ptr<!s16i> loc(#loc123)
        %9 = cir.load %5 : !cir.ptr<!s16i>, !s16i loc(#loc78)
        %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc78)
        cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc79)
      } else {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc61)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc61)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc80)
      } loc(#loc122)
    } loc(#loc120)
    cir.return loc(#loc63)
  } loc(#loc118)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc126)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s16i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s16i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc127)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<(!s16i)>> loc(#loc86)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s16i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s16i)>>> loc(#loc127)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc87)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc87)
    cir.store %4, %0 : !s16i, !cir.ptr<!s16i> loc(#loc128)
    %5 = cir.const #cir.int<32767> : !s32i loc(#loc89)
    %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc89)
    cir.store %6, %0 : !s16i, !cir.ptr<!s16i> loc(#loc129)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s16i)>>>, !cir.ptr<!cir.func<(!s16i)>> loc(#loc91)
    %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc92)
    cir.call %7(%8) : (!cir.ptr<!cir.func<(!s16i)>>, !s16i) -> () loc(#loc91)
    cir.return loc(#loc82)
  } loc(#loc125)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s06/CWE190_Integer_Overflow__short_max_postinc_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":30:1)
#loc7 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":23:1)
#loc8 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":24:5)
#loc9 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":29:5)
#loc10 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":27:9)
#loc11 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":27:24)
#loc12 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":26:13)
#loc13 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":26:9)
#loc14 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":28:22)
#loc15 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":28:9)
#loc16 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":32:1)
#loc17 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":42:1)
#loc18 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":34:5)
#loc19 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":34:11)
#loc20 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":36:5)
#loc21 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":36:31)
#loc22 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":37:12)
#loc23 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":37:5)
#loc24 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":39:12)
#loc25 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":39:5)
#loc26 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":41:5)
#loc27 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":41:13)
#loc28 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":95:1)
#loc29 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":99:1)
#loc30 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":97:5)
#loc31 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":97:13)
#loc32 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":98:5)
#loc33 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":98:13)
#loc34 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":49:1)
#loc35 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":57:1)
#loc38 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":50:1)
#loc39 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":51:5)
#loc40 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":56:5)
#loc41 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":54:9)
#loc42 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":54:24)
#loc43 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":53:13)
#loc44 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":53:9)
#loc45 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":55:22)
#loc46 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":55:9)
#loc47 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":59:1)
#loc48 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":67:1)
#loc49 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":61:5)
#loc50 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":61:11)
#loc51 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":62:5)
#loc52 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":62:31)
#loc53 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":63:12)
#loc54 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":63:5)
#loc55 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":65:12)
#loc56 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":65:5)
#loc57 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":66:5)
#loc58 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":66:13)
#loc59 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc60 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc61 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":81:19)
#loc62 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":70:1)
#loc63 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":83:1)
#loc66 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":71:1)
#loc67 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":73:5)
#loc68 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":82:5)
#loc69 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":73:9)
#loc70 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":73:16)
#loc71 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":74:5)
#loc72 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":78:5)
#loc73 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":80:5)
#loc74 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":76:9)
#loc75 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":76:24)
#loc76 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":75:13)
#loc77 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":75:9)
#loc78 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":77:22)
#loc79 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":77:9)
#loc80 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":81:9)
#loc81 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":85:1)
#loc82 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":93:1)
#loc83 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":87:5)
#loc84 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":87:11)
#loc85 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":88:5)
#loc86 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":88:31)
#loc87 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":89:12)
#loc88 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":89:5)
#loc89 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":91:12)
#loc90 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":91:5)
#loc91 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":92:5)
#loc92 = loc("CWE190_Integer_Overflow__short_max_postinc_44.c":92:13)
#loc93 = loc(fused[#loc1, #loc2])
#loc94 = loc(fused[#loc3, #loc4])
#loc96 = loc(fused[#loc8, #loc9])
#loc97 = loc(fused[#loc10, #loc11])
#loc98 = loc(fused[#loc13, #loc12])
#loc99 = loc(fused[#loc16, #loc17])
#loc100 = loc(fused[#loc18, #loc19])
#loc101 = loc(fused[#loc20, #loc21])
#loc102 = loc(fused[#loc23, #loc22])
#loc103 = loc(fused[#loc25, #loc24])
#loc104 = loc(fused[#loc28, #loc29])
#loc105 = loc(fused[#loc30, #loc31])
#loc106 = loc(fused[#loc32, #loc33])
#loc107 = loc(fused[#loc34, #loc35])
#loc109 = loc(fused[#loc39, #loc40])
#loc110 = loc(fused[#loc41, #loc42])
#loc111 = loc(fused[#loc44, #loc43])
#loc112 = loc(fused[#loc47, #loc48])
#loc113 = loc(fused[#loc49, #loc50])
#loc114 = loc(fused[#loc51, #loc52])
#loc115 = loc(fused[#loc54, #loc53])
#loc116 = loc(fused[#loc56, #loc55])
#loc117 = loc(fused[#loc59, #loc60])
#loc118 = loc(fused[#loc62, #loc63])
#loc120 = loc(fused[#loc67, #loc68])
#loc121 = loc(fused[#loc69, #loc70])
#loc122 = loc(fused[#loc71, #loc72, #loc73, #loc68])
#loc123 = loc(fused[#loc74, #loc75])
#loc124 = loc(fused[#loc77, #loc76])
#loc125 = loc(fused[#loc81, #loc82])
#loc126 = loc(fused[#loc83, #loc84])
#loc127 = loc(fused[#loc85, #loc86])
#loc128 = loc(fused[#loc88, #loc87])
#loc129 = loc(fused[#loc90, #loc89])
