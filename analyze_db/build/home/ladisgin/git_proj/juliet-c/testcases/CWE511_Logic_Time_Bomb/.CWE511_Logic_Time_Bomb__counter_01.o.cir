!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc51)
    cir.br ^bb1 loc(#loc52)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<0> : !s32i loc(#loc7)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc51)
    cir.br ^bb2 loc(#loc53)
  ^bb2:  // pred: ^bb1
    cir.br ^bb4 loc(#loc53)
  ^bb3:  // pred: ^bb8
    %2 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc54)
    cir.brcond %4 ^bb4, ^bb9 loc(#loc14)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc55)
  ^bb5:  // pred: ^bb4
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %6 = cir.const #cir.int<20000> : !s32i loc(#loc18)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc56)
    cir.brcond %7 ^bb6, ^bb7 loc(#loc57)
  ^bb6:  // pred: ^bb5
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc3)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc3)
    %10 = cir.call @unlink(%9) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc20)
    cir.br ^bb7 loc(#loc16)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc16)
  ^bb8:  // pred: ^bb7
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    %12 = cir.unary(inc, %11) : !s32i, !s32i loc(#loc22)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc58)
    cir.br ^bb3 loc(#loc11)
  ^bb9:  // pred: ^bb3
    cir.br ^bb10 loc(#loc11)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc9)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc5)
  } loc(#loc50)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc60)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc25)
    cir.return loc(#loc24)
  } loc(#loc59)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc29)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc63)
    cir.br ^bb1 loc(#loc64)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<0> : !s32i loc(#loc33)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc63)
    cir.br ^bb2 loc(#loc65)
  ^bb2:  // pred: ^bb1
    cir.br ^bb4 loc(#loc65)
  ^bb3:  // pred: ^bb8
    %2 = cir.const #cir.int<1> : !s32i loc(#loc38)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc39)
    %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc66)
    cir.brcond %4 ^bb4, ^bb9 loc(#loc40)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc67)
  ^bb5:  // pred: ^bb4
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc43)
    %6 = cir.const #cir.int<20000> : !s32i loc(#loc44)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc68)
    cir.brcond %7 ^bb6, ^bb7 loc(#loc69)
  ^bb6:  // pred: ^bb5
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc29)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc46)
    cir.br ^bb7 loc(#loc42)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc42)
  ^bb8:  // pred: ^bb7
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    %11 = cir.unary(inc, %10) : !s32i, !s32i loc(#loc48)
    cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc70)
    cir.br ^bb3 loc(#loc37)
  ^bb9:  // pred: ^bb3
    cir.br ^bb10 loc(#loc37)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc35)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc31)
  } loc(#loc62)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_01.c":0:0)
#loc1 = loc("/usr/include/unistd.h":858:1)
#loc2 = loc("/usr/include/unistd.h":858:48)
#loc3 = loc("CWE511_Logic_Time_Bomb__counter_01.c":38:24)
#loc4 = loc("CWE511_Logic_Time_Bomb__counter_01.c":29:1)
#loc5 = loc("CWE511_Logic_Time_Bomb__counter_01.c":44:1)
#loc6 = loc("CWE511_Logic_Time_Bomb__counter_01.c":32:9)
#loc7 = loc("CWE511_Logic_Time_Bomb__counter_01.c":32:21)
#loc8 = loc("CWE511_Logic_Time_Bomb__counter_01.c":31:5)
#loc9 = loc("CWE511_Logic_Time_Bomb__counter_01.c":43:5)
#loc10 = loc("CWE511_Logic_Time_Bomb__counter_01.c":33:9)
#loc11 = loc("CWE511_Logic_Time_Bomb__counter_01.c":42:21)
#loc12 = loc("CWE511_Logic_Time_Bomb__counter_01.c":42:15)
#loc13 = loc("CWE511_Logic_Time_Bomb__counter_01.c":42:20)
#loc14 = loc("CWE511_Logic_Time_Bomb__counter_01.c":42:17)
#loc15 = loc("CWE511_Logic_Time_Bomb__counter_01.c":36:13)
#loc16 = loc("CWE511_Logic_Time_Bomb__counter_01.c":39:13)
#loc17 = loc("CWE511_Logic_Time_Bomb__counter_01.c":36:17)
#loc18 = loc("CWE511_Logic_Time_Bomb__counter_01.c":36:26)
#loc19 = loc("CWE511_Logic_Time_Bomb__counter_01.c":37:13)
#loc20 = loc("CWE511_Logic_Time_Bomb__counter_01.c":38:17)
#loc21 = loc("CWE511_Logic_Time_Bomb__counter_01.c":40:18)
#loc22 = loc("CWE511_Logic_Time_Bomb__counter_01.c":40:13)
#loc23 = loc("CWE511_Logic_Time_Bomb__counter_01.c":67:1)
#loc24 = loc("CWE511_Logic_Time_Bomb__counter_01.c":70:1)
#loc25 = loc("CWE511_Logic_Time_Bomb__counter_01.c":69:5)
#loc26 = loc("CWE511_Logic_Time_Bomb__counter_01.c":69:11)
#loc27 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc28 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc29 = loc("CWE511_Logic_Time_Bomb__counter_01.c":59:27)
#loc30 = loc("CWE511_Logic_Time_Bomb__counter_01.c":50:1)
#loc31 = loc("CWE511_Logic_Time_Bomb__counter_01.c":65:1)
#loc32 = loc("CWE511_Logic_Time_Bomb__counter_01.c":53:9)
#loc33 = loc("CWE511_Logic_Time_Bomb__counter_01.c":53:21)
#loc34 = loc("CWE511_Logic_Time_Bomb__counter_01.c":52:5)
#loc35 = loc("CWE511_Logic_Time_Bomb__counter_01.c":64:5)
#loc36 = loc("CWE511_Logic_Time_Bomb__counter_01.c":54:9)
#loc37 = loc("CWE511_Logic_Time_Bomb__counter_01.c":63:21)
#loc38 = loc("CWE511_Logic_Time_Bomb__counter_01.c":63:15)
#loc39 = loc("CWE511_Logic_Time_Bomb__counter_01.c":63:20)
#loc40 = loc("CWE511_Logic_Time_Bomb__counter_01.c":63:17)
#loc41 = loc("CWE511_Logic_Time_Bomb__counter_01.c":57:13)
#loc42 = loc("CWE511_Logic_Time_Bomb__counter_01.c":60:13)
#loc43 = loc("CWE511_Logic_Time_Bomb__counter_01.c":57:17)
#loc44 = loc("CWE511_Logic_Time_Bomb__counter_01.c":57:26)
#loc45 = loc("CWE511_Logic_Time_Bomb__counter_01.c":58:13)
#loc46 = loc("CWE511_Logic_Time_Bomb__counter_01.c":59:17)
#loc47 = loc("CWE511_Logic_Time_Bomb__counter_01.c":61:18)
#loc48 = loc("CWE511_Logic_Time_Bomb__counter_01.c":61:13)
#loc49 = loc(fused[#loc1, #loc2])
#loc50 = loc(fused[#loc4, #loc5])
#loc51 = loc(fused[#loc6, #loc7])
#loc52 = loc(fused[#loc8, #loc9])
#loc53 = loc(fused[#loc10, #loc11])
#loc54 = loc(fused[#loc12, #loc13])
#loc55 = loc(fused[#loc15, #loc16])
#loc56 = loc(fused[#loc17, #loc18])
#loc57 = loc(fused[#loc19, #loc16])
#loc58 = loc(fused[#loc22, #loc21])
#loc59 = loc(fused[#loc23, #loc24])
#loc60 = loc(fused[#loc25, #loc26])
#loc61 = loc(fused[#loc27, #loc28])
#loc62 = loc(fused[#loc30, #loc31])
#loc63 = loc(fused[#loc32, #loc33])
#loc64 = loc(fused[#loc34, #loc35])
#loc65 = loc(fused[#loc36, #loc37])
#loc66 = loc(fused[#loc38, #loc39])
#loc67 = loc(fused[#loc41, #loc42])
#loc68 = loc(fused[#loc43, #loc44])
#loc69 = loc(fused[#loc45, #loc42])
#loc70 = loc(fused[#loc48, #loc47])
