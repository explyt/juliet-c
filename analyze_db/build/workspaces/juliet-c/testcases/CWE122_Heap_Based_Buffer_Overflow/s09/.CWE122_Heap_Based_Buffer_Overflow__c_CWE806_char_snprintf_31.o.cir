!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc115)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc116)
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc117)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc118)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc119)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc120)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc122)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc18)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc19)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc19)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc123)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc124)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc18)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc125)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc126)
    cir.scope {
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc26)
      %23 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc27)
      %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc27)
      %25 = cir.cmp(eq, %22, %24) : !cir.ptr<!s8i>, !cir.bool loc(#loc128)
      cir.if %25 {
        %26 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc29)
        %27 = cir.const #cir.int<1> : !s32i loc(#loc30)
        %28 = cir.unary(minus, %27) nsw : !s32i, !s32i loc(#loc31)
        cir.call @exit(%28) : (!s32i) -> () extra(#fn_attr) loc(#loc29)
      } loc(#loc129)
    } loc(#loc127)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc32)
    %10 = cir.const #cir.int<65> : !s32i loc(#loc33)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc34)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc34)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc34)
    cir.libc.memset %14 bytes from %9 set to %10 : !cir.ptr<!void>, !s32i, !u64i loc(#loc130)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc38)
    %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc38)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
    %18 = cir.const #cir.int<100> : !s32i loc(#loc40)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc40)
    %21 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %20 : !s32i), !cir.ptr<!s8i> loc(#loc42)
    cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc131)
    cir.scope {
      %22 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc133)
      %23 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc134)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
      cir.store %24, %22 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc133)
      %25 = cir.load %22 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
      cir.store %25, %23 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc134)
      cir.scope {
        %26 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc136)
        %27 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc136)
        cir.store %27, %26 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc136)
        %28 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc53)
        %29 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc54)
        %30 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc55)
        %31 = cir.load %23 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
        %32 = cir.call @strlen(%31) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc55)
        %33 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc9)
        %34 = cir.cast(array_to_ptrdecay, %33 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc9)
        %35 = cir.load %23 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
        %36 = cir.call @snprintf(%29, %32, %34, %35) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc53)
        %37 = cir.load %23 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc58)
        cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc59)
        %38 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc60)
        %39 = cir.load %23 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
        %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc61)
        cir.call @free(%40) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc60)
      } loc(#loc135)
    } loc(#loc132)
    cir.return loc(#loc15)
  } loc(#loc121)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc138)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc64)
    cir.return loc(#loc63)
  } loc(#loc137)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc140)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc70)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc71)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc71)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc141)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc142)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc70)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc143)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc144)
    cir.scope {
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
      %23 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc79)
      %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc79)
      %25 = cir.cmp(eq, %22, %24) : !cir.ptr<!s8i>, !cir.bool loc(#loc146)
      cir.if %25 {
        %26 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc81)
        %27 = cir.const #cir.int<1> : !s32i loc(#loc82)
        %28 = cir.unary(minus, %27) nsw : !s32i, !s32i loc(#loc83)
        cir.call @exit(%28) : (!s32i) -> () extra(#fn_attr) loc(#loc81)
      } loc(#loc147)
    } loc(#loc145)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc84)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc84)
    %10 = cir.const #cir.int<65> : !s32i loc(#loc85)
    %11 = cir.const #cir.int<50> : !s32i loc(#loc86)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc86)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc86)
    cir.libc.memset %14 bytes from %9 set to %10 : !cir.ptr<!void>, !s32i, !u64i loc(#loc148)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc90)
    %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc90)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc91)
    %18 = cir.const #cir.int<50> : !s32i loc(#loc92)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc93)
    %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc92)
    %21 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %20 : !s32i), !cir.ptr<!s8i> loc(#loc94)
    cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc149)
    cir.scope {
      %22 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc151)
      %23 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc152)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
      cir.store %24, %22 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc151)
      %25 = cir.load %22 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
      cir.store %25, %23 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc152)
      cir.scope {
        %26 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc154)
        %27 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc154)
        cir.store %27, %26 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc154)
        %28 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc105)
        %29 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc106)
        %30 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc107)
        %31 = cir.load %23 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc108)
        %32 = cir.call @strlen(%31) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc107)
        %33 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc109)
        %34 = cir.cast(array_to_ptrdecay, %33 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc109)
        %35 = cir.load %23 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc110)
        %36 = cir.call @snprintf(%29, %32, %34, %35) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc105)
        %37 = cir.load %23 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
        cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc112)
        %38 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc113)
        %39 = cir.load %23 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc114)
        %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc114)
        cir.call @free(%40) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc113)
      } loc(#loc153)
    } loc(#loc150)
    cir.return loc(#loc67)
  } loc(#loc139)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/stdio.h":385:1)
#loc6 = loc("/usr/include/stdio.h":387:62)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":43:42)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc12 = loc("/usr/include/stdlib.h":687:1)
#loc13 = loc("/usr/include/stdlib.h":687:32)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":29:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":48:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":31:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":31:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":32:20)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":32:27)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":32:31)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":32:42)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":32:43)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":32:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":33:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":33:33)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":33:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":33:17)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":33:23)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":33:24)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":33:30)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":33:29)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":35:12)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":35:18)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":35:23)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":35:27)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":35:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":35:28)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":36:19)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":36:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":36:10)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":36:14)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":36:15)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":37:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":47:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":38:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":38:27)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":39:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":39:23)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":40:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":46:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":41:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":41:29)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":43:13)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":43:22)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":43:28)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":43:35)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":43:48)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":44:23)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":44:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":45:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":45:18)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":76:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":79:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":78:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":78:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":55:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":74:1)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":57:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":57:12)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":58:20)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":58:27)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":58:31)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":58:42)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":58:43)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":58:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":59:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":59:33)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":59:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":59:17)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":59:23)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":59:24)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":59:30)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":59:29)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":61:12)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":61:18)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":61:23)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":61:26)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":61:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":61:27)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":62:18)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":62:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":62:10)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":62:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":62:14)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":63:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":73:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":64:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":64:27)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":65:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":65:23)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":66:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":72:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":67:13)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":67:29)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":69:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":69:22)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":69:28)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":69:35)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":69:42)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":69:48)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":70:23)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":70:13)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":71:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c":71:18)
#loc115 = loc(fused[#loc1, #loc2])
#loc116 = loc(fused[#loc3, #loc4])
#loc117 = loc(fused[#loc5, #loc6])
#loc118 = loc(fused[#loc7, #loc8])
#loc119 = loc(fused[#loc10, #loc11])
#loc120 = loc(fused[#loc12, #loc13])
#loc121 = loc(fused[#loc14, #loc15])
#loc122 = loc(fused[#loc16, #loc17])
#loc123 = loc(fused[#loc20, #loc21])
#loc124 = loc(fused[#loc19, #loc21])
#loc125 = loc(fused[#loc18, #loc22])
#loc126 = loc(fused[#loc23, #loc22])
#loc127 = loc(fused[#loc24, #loc25])
#loc128 = loc(fused[#loc26, #loc27])
#loc129 = loc(fused[#loc28, #loc25])
#loc130 = loc(fused[#loc36, #loc37])
#loc131 = loc(fused[#loc39, #loc38])
#loc132 = loc(fused[#loc43, #loc44])
#loc133 = loc(fused[#loc45, #loc46])
#loc134 = loc(fused[#loc47, #loc48])
#loc135 = loc(fused[#loc49, #loc50])
#loc136 = loc(fused[#loc51, #loc52])
#loc137 = loc(fused[#loc62, #loc63])
#loc138 = loc(fused[#loc64, #loc65])
#loc139 = loc(fused[#loc66, #loc67])
#loc140 = loc(fused[#loc68, #loc69])
#loc141 = loc(fused[#loc72, #loc73])
#loc142 = loc(fused[#loc71, #loc73])
#loc143 = loc(fused[#loc70, #loc74])
#loc144 = loc(fused[#loc75, #loc74])
#loc145 = loc(fused[#loc76, #loc77])
#loc146 = loc(fused[#loc78, #loc79])
#loc147 = loc(fused[#loc80, #loc77])
#loc148 = loc(fused[#loc88, #loc89])
#loc149 = loc(fused[#loc91, #loc90])
#loc150 = loc(fused[#loc95, #loc96])
#loc151 = loc(fused[#loc97, #loc98])
#loc152 = loc(fused[#loc99, #loc100])
#loc153 = loc(fused[#loc101, #loc102])
#loc154 = loc(fused[#loc103, #loc104])
