!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc27 = loc("CWE369_Divide_by_Zero__float_rand_12.c":32:23)
#loc73 = loc("CWE369_Divide_by_Zero__float_rand_12.c":163:10)
#loc74 = loc("CWE369_Divide_by_Zero__float_rand_12.c":163:14)
#loc75 = loc("CWE369_Divide_by_Zero__float_rand_12.c":163:20)
#loc76 = loc("CWE369_Divide_by_Zero__float_rand_12.c":163:32)
#loc108 = loc("CWE369_Divide_by_Zero__float_rand_12.c":77:23)
#loc110 = loc("CWE369_Divide_by_Zero__float_rand_12.c":82:23)
#loc216 = loc(fused[#loc73, #loc74])
#loc217 = loc(fused[#loc75, #loc76])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc187)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc188)
  cir.func private @printIntLine(!s32i) loc(#loc189)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc190)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE369_Divide_by_Zero__float_rand_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc192)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc193)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc194)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc18)
    cir.store %3, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc195)
    cir.br ^bb1 loc(#loc196)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc197)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc197)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc22)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc22)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc198)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc27)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc27)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc27)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc27)
    %14 = cir.const #cir.int<30> : !s32i loc(#loc27)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc27)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc27)
    %18 = cir.const #cir.int<15> : !s32i loc(#loc27)
    %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc27)
    %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc27)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc27)
    %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc27)
    cir.br ^bb5(%23 : !u32i) loc(#loc27)
  ^bb4:  // pred: ^bb2
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc27)
    %26 = cir.const #cir.int<30> : !s32i loc(#loc27)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc27)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc27)
    %30 = cir.const #cir.int<15> : !s32i loc(#loc27)
    %31 = cir.shift(left, %29 : !u32i, %30 : !s32i) -> !u32i loc(#loc27)
    %32 = cir.binop(xor, %27, %31) : !u32i loc(#loc27)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc27)
    %35 = cir.binop(xor, %32, %34) : !u32i loc(#loc27)
    %36 = cir.unary(minus, %35) : !u32i, !u32i loc(#loc27)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc27)
    %39 = cir.binop(sub, %36, %38) : !u32i loc(#loc27)
    cir.br ^bb5(%39 : !u32i) loc(#loc27)
  ^bb5(%40: !u32i loc("CWE369_Divide_by_Zero__float_rand_12.c":32:23)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc27)
  ^bb6:  // pred: ^bb5
    %41 = cir.cast(integral, %40 : !u32i), !s32i loc(#loc27)
    %42 = cir.cast(int_to_float, %41 : !s32i), !cir.float loc(#loc27)
    cir.store %42, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc199)
    cir.br ^bb8 loc(#loc25)
  ^bb7:  // pred: ^bb1
    %43 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc29)
    cir.store %43, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc200)
    cir.br ^bb8 loc(#loc21)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc21)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc201)
  ^bb10:  // pred: ^bb9
    %44 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc202)
    %45 = cir.cast(bitcast, %44 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc202)
    %46 = cir.call %45() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc33)
    %47 = cir.cast(int_to_bool, %46 : !s32i), !cir.bool loc(#loc33)
    cir.brcond %47 ^bb11, ^bb14 loc(#loc203)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc204)
  ^bb12:  // pred: ^bb11
    %48 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc40)
    %49 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc41)
    %50 = cir.cast(floating, %49 : !cir.float), !cir.double loc(#loc41)
    %51 = cir.binop(div, %48, %50) : !cir.double loc(#loc205)
    %52 = cir.cast(float_to_int, %51 : !cir.double), !s32i loc(#loc205)
    cir.store %52, %0 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    %53 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
    cir.call @printIntLine(%53) : (!s32i) -> () loc(#loc43)
    cir.br ^bb13 loc(#loc39)
  ^bb13:  // pred: ^bb12
    cir.br ^bb20 loc(#loc36)
  ^bb14:  // pred: ^bb10
    cir.br ^bb15 loc(#loc206)
  ^bb15:  // pred: ^bb14
    %54 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc46)
    %55 = cir.cast(floating, %54 : !cir.float), !cir.double loc(#loc46)
    %56 = cir.fabs %55 : !cir.double loc(#loc46)
    %57 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc47)
    %58 = cir.cmp(gt, %56, %57) : !cir.double, !cir.bool loc(#loc207)
    cir.brcond %58 ^bb16, ^bb17 loc(#loc208)
  ^bb16:  // pred: ^bb15
    %59 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc52)
    %60 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc53)
    %61 = cir.cast(floating, %60 : !cir.float), !cir.double loc(#loc53)
    %62 = cir.binop(div, %59, %61) : !cir.double loc(#loc209)
    %63 = cir.cast(float_to_int, %62 : !cir.double), !s32i loc(#loc209)
    cir.store %63, %1 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    %64 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    cir.call @printIntLine(%64) : (!s32i) -> () loc(#loc55)
    cir.br ^bb18 loc(#loc50)
  ^bb17:  // pred: ^bb15
    %65 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc9)
    %66 = cir.cast(array_to_ptrdecay, %65 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%66) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    cir.br ^bb18 loc(#loc45)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc45)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc32)
  ^bb20:  // 2 preds: ^bb13, ^bb19
    cir.br ^bb21 loc(#loc32)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc11)
  } loc(#loc191)
  cir.func no_proto @CWE369_Divide_by_Zero__float_rand_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc211)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc212)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc61)
    cir.return loc(#loc58)
  } loc(#loc210)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc213)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc214)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc70)
  cir.func @main(%arg0: !s32i loc(fused[#loc73, #loc74]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc75, #loc76])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc216)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc217)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc72)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc77)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc77)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc78)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc79)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc79)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc80)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc67)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    %8 = cir.get_global @CWE369_Divide_by_Zero__float_rand_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call @CWE369_Divide_by_Zero__float_rand_12_good() : () -> () loc(#loc82)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc68)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc84)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc69)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %13 = cir.get_global @CWE369_Divide_by_Zero__float_rand_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc219)
    cir.call @CWE369_Divide_by_Zero__float_rand_12_bad() : () -> () loc(#loc86)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc70)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc89)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc220)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc220)
    cir.return %17 : !s32i loc(#loc220)
  } loc(#loc215)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc222)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc223)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc224)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc99)
    cir.store %3, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc225)
    cir.br ^bb1 loc(#loc226)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc227)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc227)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc103)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc103)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc228)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc108)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc108)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc108)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc108)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc108)
    %14 = cir.const #cir.int<30> : !s32i loc(#loc108)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc108)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc108)
    %18 = cir.const #cir.int<15> : !s32i loc(#loc108)
    %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc108)
    %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc108)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc108)
    %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc108)
    cir.br ^bb5(%23 : !u32i) loc(#loc108)
  ^bb4:  // pred: ^bb2
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc108)
    %26 = cir.const #cir.int<30> : !s32i loc(#loc108)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc108)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc108)
    %30 = cir.const #cir.int<15> : !s32i loc(#loc108)
    %31 = cir.shift(left, %29 : !u32i, %30 : !s32i) -> !u32i loc(#loc108)
    %32 = cir.binop(xor, %27, %31) : !u32i loc(#loc108)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc108)
    %35 = cir.binop(xor, %32, %34) : !u32i loc(#loc108)
    %36 = cir.unary(minus, %35) : !u32i, !u32i loc(#loc108)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc108)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc108)
    %39 = cir.binop(sub, %36, %38) : !u32i loc(#loc108)
    cir.br ^bb5(%39 : !u32i) loc(#loc108)
  ^bb5(%40: !u32i loc("CWE369_Divide_by_Zero__float_rand_12.c":77:23)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc108)
  ^bb6:  // pred: ^bb5
    %41 = cir.cast(integral, %40 : !u32i), !s32i loc(#loc108)
    %42 = cir.cast(int_to_float, %41 : !s32i), !cir.float loc(#loc108)
    cir.store %42, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc229)
    cir.br ^bb12 loc(#loc106)
  ^bb7:  // pred: ^bb1
    %43 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc110)
    %45 = cir.binop(and, %43, %44) : !s32i loc(#loc110)
    %46 = cir.cast(int_to_bool, %45 : !s32i), !cir.bool loc(#loc110)
    cir.brcond %46 ^bb8, ^bb9 loc(#loc110)
  ^bb8:  // pred: ^bb7
    %47 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
    %48 = cir.cast(integral, %47 : !s32i), !u32i loc(#loc110)
    %49 = cir.const #cir.int<30> : !s32i loc(#loc110)
    %50 = cir.shift(left, %48 : !u32i, %49 : !s32i) -> !u32i loc(#loc110)
    %51 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
    %52 = cir.cast(integral, %51 : !s32i), !u32i loc(#loc110)
    %53 = cir.const #cir.int<15> : !s32i loc(#loc110)
    %54 = cir.shift(left, %52 : !u32i, %53 : !s32i) -> !u32i loc(#loc110)
    %55 = cir.binop(xor, %50, %54) : !u32i loc(#loc110)
    %56 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
    %57 = cir.cast(integral, %56 : !s32i), !u32i loc(#loc110)
    %58 = cir.binop(xor, %55, %57) : !u32i loc(#loc110)
    cir.br ^bb10(%58 : !u32i) loc(#loc110)
  ^bb9:  // pred: ^bb7
    %59 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
    %60 = cir.cast(integral, %59 : !s32i), !u32i loc(#loc110)
    %61 = cir.const #cir.int<30> : !s32i loc(#loc110)
    %62 = cir.shift(left, %60 : !u32i, %61 : !s32i) -> !u32i loc(#loc110)
    %63 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
    %64 = cir.cast(integral, %63 : !s32i), !u32i loc(#loc110)
    %65 = cir.const #cir.int<15> : !s32i loc(#loc110)
    %66 = cir.shift(left, %64 : !u32i, %65 : !s32i) -> !u32i loc(#loc110)
    %67 = cir.binop(xor, %62, %66) : !u32i loc(#loc110)
    %68 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
    %69 = cir.cast(integral, %68 : !s32i), !u32i loc(#loc110)
    %70 = cir.binop(xor, %67, %69) : !u32i loc(#loc110)
    %71 = cir.unary(minus, %70) : !u32i, !u32i loc(#loc110)
    %72 = cir.const #cir.int<1> : !s32i loc(#loc110)
    %73 = cir.cast(integral, %72 : !s32i), !u32i loc(#loc110)
    %74 = cir.binop(sub, %71, %73) : !u32i loc(#loc110)
    cir.br ^bb10(%74 : !u32i) loc(#loc110)
  ^bb10(%75: !u32i loc("CWE369_Divide_by_Zero__float_rand_12.c":82:23)):  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc110)
  ^bb11:  // pred: ^bb10
    %76 = cir.cast(integral, %75 : !u32i), !s32i loc(#loc110)
    %77 = cir.cast(int_to_float, %76 : !s32i), !cir.float loc(#loc110)
    cir.store %77, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc230)
    cir.br ^bb12 loc(#loc102)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc102)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc231)
  ^bb14:  // pred: ^bb13
    %78 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc232)
    %79 = cir.cast(bitcast, %78 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc232)
    %80 = cir.call %79() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc114)
    %81 = cir.cast(int_to_bool, %80 : !s32i), !cir.bool loc(#loc114)
    cir.brcond %81 ^bb15, ^bb21 loc(#loc233)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc234)
  ^bb16:  // pred: ^bb15
    %82 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc121)
    %83 = cir.cast(floating, %82 : !cir.float), !cir.double loc(#loc121)
    %84 = cir.fabs %83 : !cir.double loc(#loc121)
    %85 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc122)
    %86 = cir.cmp(gt, %84, %85) : !cir.double, !cir.bool loc(#loc235)
    cir.brcond %86 ^bb17, ^bb18 loc(#loc236)
  ^bb17:  // pred: ^bb16
    %87 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc127)
    %88 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc128)
    %89 = cir.cast(floating, %88 : !cir.float), !cir.double loc(#loc128)
    %90 = cir.binop(div, %87, %89) : !cir.double loc(#loc237)
    %91 = cir.cast(float_to_int, %90 : !cir.double), !s32i loc(#loc237)
    cir.store %91, %0 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    %92 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
    cir.call @printIntLine(%92) : (!s32i) -> () loc(#loc130)
    cir.br ^bb19 loc(#loc125)
  ^bb18:  // pred: ^bb16
    %93 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc131)
    %94 = cir.cast(array_to_ptrdecay, %93 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc131)
    cir.call @printLine(%94) : (!cir.ptr<!s8i>) -> () loc(#loc132)
    cir.br ^bb19 loc(#loc120)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc120)
  ^bb20:  // pred: ^bb19
    cir.br ^bb27 loc(#loc117)
  ^bb21:  // pred: ^bb14
    cir.br ^bb22 loc(#loc238)
  ^bb22:  // pred: ^bb21
    %95 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc135)
    %96 = cir.cast(floating, %95 : !cir.float), !cir.double loc(#loc135)
    %97 = cir.fabs %96 : !cir.double loc(#loc135)
    %98 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc136)
    %99 = cir.cmp(gt, %97, %98) : !cir.double, !cir.bool loc(#loc239)
    cir.brcond %99 ^bb23, ^bb24 loc(#loc240)
  ^bb23:  // pred: ^bb22
    %100 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc141)
    %101 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc142)
    %102 = cir.cast(floating, %101 : !cir.float), !cir.double loc(#loc142)
    %103 = cir.binop(div, %100, %102) : !cir.double loc(#loc241)
    %104 = cir.cast(float_to_int, %103 : !cir.double), !s32i loc(#loc241)
    cir.store %104, %1 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    %105 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc143)
    cir.call @printIntLine(%105) : (!s32i) -> () loc(#loc144)
    cir.br ^bb25 loc(#loc139)
  ^bb24:  // pred: ^bb22
    %106 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc145)
    %107 = cir.cast(array_to_ptrdecay, %106 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc145)
    cir.call @printLine(%107) : (!cir.ptr<!s8i>) -> () loc(#loc146)
    cir.br ^bb25 loc(#loc134)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    cir.br ^bb26 loc(#loc134)
  ^bb26:  // pred: ^bb25
    cir.br ^bb27 loc(#loc113)
  ^bb27:  // 2 preds: ^bb20, ^bb26
    cir.br ^bb28 loc(#loc113)
  ^bb28:  // pred: ^bb27
    cir.return loc(#loc92)
  } loc(#loc221)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc243)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc244)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc245)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc155)
    cir.store %3, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc246)
    cir.br ^bb1 loc(#loc247)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc248)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc248)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc159)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc159)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc249)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc164)
    cir.store %8, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc250)
    cir.br ^bb4 loc(#loc162)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc166)
    cir.store %9, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc251)
    cir.br ^bb4 loc(#loc158)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc158)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc252)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc253)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc253)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc170)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc170)
    cir.brcond %13 ^bb7, ^bb10 loc(#loc254)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc255)
  ^bb8:  // pred: ^bb7
    %14 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc177)
    %15 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc178)
    %16 = cir.cast(floating, %15 : !cir.float), !cir.double loc(#loc178)
    %17 = cir.binop(div, %14, %16) : !cir.double loc(#loc256)
    %18 = cir.cast(float_to_int, %17 : !cir.double), !s32i loc(#loc256)
    cir.store %18, %0 : !s32i, !cir.ptr<!s32i> loc(#loc243)
    %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc179)
    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc180)
    cir.br ^bb9 loc(#loc176)
  ^bb9:  // pred: ^bb8
    cir.br ^bb13 loc(#loc173)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc257)
  ^bb11:  // pred: ^bb10
    %20 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc183)
    %21 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc184)
    %22 = cir.cast(floating, %21 : !cir.float), !cir.double loc(#loc184)
    %23 = cir.binop(div, %20, %22) : !cir.double loc(#loc258)
    %24 = cir.cast(float_to_int, %23 : !cir.double), !s32i loc(#loc258)
    cir.store %24, %1 : !s32i, !cir.ptr<!s32i> loc(#loc244)
    %25 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc185)
    cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc186)
    cir.br ^bb12 loc(#loc182)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc169)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc169)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc148)
  } loc(#loc242)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE369_Divide_by_Zero__float_rand_12.c":57:23)
#loc10 = loc("CWE369_Divide_by_Zero__float_rand_12.c":24:1)
#loc11 = loc("CWE369_Divide_by_Zero__float_rand_12.c":60:1)
#loc12 = loc("CWE369_Divide_by_Zero__float_rand_12.c":43:13)
#loc13 = loc("CWE369_Divide_by_Zero__float_rand_12.c":43:44)
#loc14 = loc("CWE369_Divide_by_Zero__float_rand_12.c":52:13)
#loc15 = loc("CWE369_Divide_by_Zero__float_rand_12.c":52:44)
#loc16 = loc("CWE369_Divide_by_Zero__float_rand_12.c":26:5)
#loc17 = loc("CWE369_Divide_by_Zero__float_rand_12.c":26:11)
#loc18 = loc("CWE369_Divide_by_Zero__float_rand_12.c":28:12)
#loc19 = loc("CWE369_Divide_by_Zero__float_rand_12.c":28:5)
#loc20 = loc("CWE369_Divide_by_Zero__float_rand_12.c":29:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_rand_12.c":38:5)
#loc22 = loc("CWE369_Divide_by_Zero__float_rand_12.c":29:8)
#loc23 = loc("CWE369_Divide_by_Zero__float_rand_12.c":29:33)
#loc24 = loc("CWE369_Divide_by_Zero__float_rand_12.c":30:5)
#loc25 = loc("CWE369_Divide_by_Zero__float_rand_12.c":33:5)
#loc26 = loc("CWE369_Divide_by_Zero__float_rand_12.c":35:5)
#loc28 = loc("CWE369_Divide_by_Zero__float_rand_12.c":32:9)
#loc29 = loc("CWE369_Divide_by_Zero__float_rand_12.c":37:16)
#loc30 = loc("CWE369_Divide_by_Zero__float_rand_12.c":37:9)
#loc31 = loc("CWE369_Divide_by_Zero__float_rand_12.c":39:5)
#loc32 = loc("CWE369_Divide_by_Zero__float_rand_12.c":59:5)
#loc33 = loc("CWE369_Divide_by_Zero__float_rand_12.c":39:8)
#loc34 = loc("CWE369_Divide_by_Zero__float_rand_12.c":39:33)
#loc35 = loc("CWE369_Divide_by_Zero__float_rand_12.c":40:5)
#loc36 = loc("CWE369_Divide_by_Zero__float_rand_12.c":46:5)
#loc37 = loc("CWE369_Divide_by_Zero__float_rand_12.c":48:5)
#loc38 = loc("CWE369_Divide_by_Zero__float_rand_12.c":41:9)
#loc39 = loc("CWE369_Divide_by_Zero__float_rand_12.c":45:9)
#loc40 = loc("CWE369_Divide_by_Zero__float_rand_12.c":43:32)
#loc41 = loc("CWE369_Divide_by_Zero__float_rand_12.c":43:40)
#loc42 = loc("CWE369_Divide_by_Zero__float_rand_12.c":44:26)
#loc43 = loc("CWE369_Divide_by_Zero__float_rand_12.c":44:13)
#loc44 = loc("CWE369_Divide_by_Zero__float_rand_12.c":50:9)
#loc45 = loc("CWE369_Divide_by_Zero__float_rand_12.c":58:9)
#loc46 = loc("CWE369_Divide_by_Zero__float_rand_12.c":50:17)
#loc47 = loc("CWE369_Divide_by_Zero__float_rand_12.c":50:25)
#loc48 = loc("CWE369_Divide_by_Zero__float_rand_12.c":50:12)
#loc49 = loc("CWE369_Divide_by_Zero__float_rand_12.c":51:9)
#loc50 = loc("CWE369_Divide_by_Zero__float_rand_12.c":54:9)
#loc51 = loc("CWE369_Divide_by_Zero__float_rand_12.c":56:9)
#loc52 = loc("CWE369_Divide_by_Zero__float_rand_12.c":52:32)
#loc53 = loc("CWE369_Divide_by_Zero__float_rand_12.c":52:40)
#loc54 = loc("CWE369_Divide_by_Zero__float_rand_12.c":53:26)
#loc55 = loc("CWE369_Divide_by_Zero__float_rand_12.c":53:13)
#loc56 = loc("CWE369_Divide_by_Zero__float_rand_12.c":57:13)
#loc57 = loc("CWE369_Divide_by_Zero__float_rand_12.c":148:1)
#loc58 = loc("CWE369_Divide_by_Zero__float_rand_12.c":152:1)
#loc59 = loc("CWE369_Divide_by_Zero__float_rand_12.c":150:5)
#loc60 = loc("CWE369_Divide_by_Zero__float_rand_12.c":150:13)
#loc61 = loc("CWE369_Divide_by_Zero__float_rand_12.c":151:5)
#loc62 = loc("CWE369_Divide_by_Zero__float_rand_12.c":151:13)
#loc63 = loc("/usr/include/stdlib.h":575:1)
#loc64 = loc("/usr/include/stdlib.h":575:41)
#loc65 = loc("/usr/include/time.h":76:1)
#loc66 = loc("/usr/include/time.h":76:38)
#loc67 = loc("CWE369_Divide_by_Zero__float_rand_12.c":168:15)
#loc68 = loc("CWE369_Divide_by_Zero__float_rand_12.c":170:15)
#loc69 = loc("CWE369_Divide_by_Zero__float_rand_12.c":173:15)
#loc70 = loc("CWE369_Divide_by_Zero__float_rand_12.c":175:15)
#loc71 = loc("CWE369_Divide_by_Zero__float_rand_12.c":163:1)
#loc72 = loc("CWE369_Divide_by_Zero__float_rand_12.c":178:1)
#loc77 = loc("CWE369_Divide_by_Zero__float_rand_12.c":164:1)
#loc78 = loc("CWE369_Divide_by_Zero__float_rand_12.c":166:27)
#loc79 = loc("CWE369_Divide_by_Zero__float_rand_12.c":166:22)
#loc80 = loc("CWE369_Divide_by_Zero__float_rand_12.c":166:5)
#loc81 = loc("CWE369_Divide_by_Zero__float_rand_12.c":168:5)
#loc82 = loc("CWE369_Divide_by_Zero__float_rand_12.c":169:5)
#loc83 = loc("CWE369_Divide_by_Zero__float_rand_12.c":169:47)
#loc84 = loc("CWE369_Divide_by_Zero__float_rand_12.c":170:5)
#loc85 = loc("CWE369_Divide_by_Zero__float_rand_12.c":173:5)
#loc86 = loc("CWE369_Divide_by_Zero__float_rand_12.c":174:5)
#loc87 = loc("CWE369_Divide_by_Zero__float_rand_12.c":174:46)
#loc88 = loc("CWE369_Divide_by_Zero__float_rand_12.c":175:5)
#loc89 = loc("CWE369_Divide_by_Zero__float_rand_12.c":177:12)
#loc90 = loc("CWE369_Divide_by_Zero__float_rand_12.c":177:5)
#loc91 = loc("CWE369_Divide_by_Zero__float_rand_12.c":69:1)
#loc92 = loc("CWE369_Divide_by_Zero__float_rand_12.c":110:1)
#loc93 = loc("CWE369_Divide_by_Zero__float_rand_12.c":89:13)
#loc94 = loc("CWE369_Divide_by_Zero__float_rand_12.c":89:44)
#loc95 = loc("CWE369_Divide_by_Zero__float_rand_12.c":102:13)
#loc96 = loc("CWE369_Divide_by_Zero__float_rand_12.c":102:44)
#loc97 = loc("CWE369_Divide_by_Zero__float_rand_12.c":71:5)
#loc98 = loc("CWE369_Divide_by_Zero__float_rand_12.c":71:11)
#loc99 = loc("CWE369_Divide_by_Zero__float_rand_12.c":73:12)
#loc100 = loc("CWE369_Divide_by_Zero__float_rand_12.c":73:5)
#loc101 = loc("CWE369_Divide_by_Zero__float_rand_12.c":74:5)
#loc102 = loc("CWE369_Divide_by_Zero__float_rand_12.c":83:5)
#loc103 = loc("CWE369_Divide_by_Zero__float_rand_12.c":74:8)
#loc104 = loc("CWE369_Divide_by_Zero__float_rand_12.c":74:33)
#loc105 = loc("CWE369_Divide_by_Zero__float_rand_12.c":75:5)
#loc106 = loc("CWE369_Divide_by_Zero__float_rand_12.c":78:5)
#loc107 = loc("CWE369_Divide_by_Zero__float_rand_12.c":80:5)
#loc109 = loc("CWE369_Divide_by_Zero__float_rand_12.c":77:9)
#loc111 = loc("CWE369_Divide_by_Zero__float_rand_12.c":82:9)
#loc112 = loc("CWE369_Divide_by_Zero__float_rand_12.c":84:5)
#loc113 = loc("CWE369_Divide_by_Zero__float_rand_12.c":109:5)
#loc114 = loc("CWE369_Divide_by_Zero__float_rand_12.c":84:8)
#loc115 = loc("CWE369_Divide_by_Zero__float_rand_12.c":84:33)
#loc116 = loc("CWE369_Divide_by_Zero__float_rand_12.c":85:5)
#loc117 = loc("CWE369_Divide_by_Zero__float_rand_12.c":96:5)
#loc118 = loc("CWE369_Divide_by_Zero__float_rand_12.c":98:5)
#loc119 = loc("CWE369_Divide_by_Zero__float_rand_12.c":87:9)
#loc120 = loc("CWE369_Divide_by_Zero__float_rand_12.c":95:9)
#loc121 = loc("CWE369_Divide_by_Zero__float_rand_12.c":87:17)
#loc122 = loc("CWE369_Divide_by_Zero__float_rand_12.c":87:25)
#loc123 = loc("CWE369_Divide_by_Zero__float_rand_12.c":87:12)
#loc124 = loc("CWE369_Divide_by_Zero__float_rand_12.c":88:9)
#loc125 = loc("CWE369_Divide_by_Zero__float_rand_12.c":91:9)
#loc126 = loc("CWE369_Divide_by_Zero__float_rand_12.c":93:9)
#loc127 = loc("CWE369_Divide_by_Zero__float_rand_12.c":89:32)
#loc128 = loc("CWE369_Divide_by_Zero__float_rand_12.c":89:40)
#loc129 = loc("CWE369_Divide_by_Zero__float_rand_12.c":90:26)
#loc130 = loc("CWE369_Divide_by_Zero__float_rand_12.c":90:13)
#loc131 = loc("CWE369_Divide_by_Zero__float_rand_12.c":94:23)
#loc132 = loc("CWE369_Divide_by_Zero__float_rand_12.c":94:13)
#loc133 = loc("CWE369_Divide_by_Zero__float_rand_12.c":100:9)
#loc134 = loc("CWE369_Divide_by_Zero__float_rand_12.c":108:9)
#loc135 = loc("CWE369_Divide_by_Zero__float_rand_12.c":100:17)
#loc136 = loc("CWE369_Divide_by_Zero__float_rand_12.c":100:25)
#loc137 = loc("CWE369_Divide_by_Zero__float_rand_12.c":100:12)
#loc138 = loc("CWE369_Divide_by_Zero__float_rand_12.c":101:9)
#loc139 = loc("CWE369_Divide_by_Zero__float_rand_12.c":104:9)
#loc140 = loc("CWE369_Divide_by_Zero__float_rand_12.c":106:9)
#loc141 = loc("CWE369_Divide_by_Zero__float_rand_12.c":102:32)
#loc142 = loc("CWE369_Divide_by_Zero__float_rand_12.c":102:40)
#loc143 = loc("CWE369_Divide_by_Zero__float_rand_12.c":103:26)
#loc144 = loc("CWE369_Divide_by_Zero__float_rand_12.c":103:13)
#loc145 = loc("CWE369_Divide_by_Zero__float_rand_12.c":107:23)
#loc146 = loc("CWE369_Divide_by_Zero__float_rand_12.c":107:13)
#loc147 = loc("CWE369_Divide_by_Zero__float_rand_12.c":115:1)
#loc148 = loc("CWE369_Divide_by_Zero__float_rand_12.c":146:1)
#loc149 = loc("CWE369_Divide_by_Zero__float_rand_12.c":134:13)
#loc150 = loc("CWE369_Divide_by_Zero__float_rand_12.c":134:44)
#loc151 = loc("CWE369_Divide_by_Zero__float_rand_12.c":142:13)
#loc152 = loc("CWE369_Divide_by_Zero__float_rand_12.c":142:44)
#loc153 = loc("CWE369_Divide_by_Zero__float_rand_12.c":117:5)
#loc154 = loc("CWE369_Divide_by_Zero__float_rand_12.c":117:11)
#loc155 = loc("CWE369_Divide_by_Zero__float_rand_12.c":119:12)
#loc156 = loc("CWE369_Divide_by_Zero__float_rand_12.c":119:5)
#loc157 = loc("CWE369_Divide_by_Zero__float_rand_12.c":120:5)
#loc158 = loc("CWE369_Divide_by_Zero__float_rand_12.c":129:5)
#loc159 = loc("CWE369_Divide_by_Zero__float_rand_12.c":120:8)
#loc160 = loc("CWE369_Divide_by_Zero__float_rand_12.c":120:33)
#loc161 = loc("CWE369_Divide_by_Zero__float_rand_12.c":121:5)
#loc162 = loc("CWE369_Divide_by_Zero__float_rand_12.c":124:5)
#loc163 = loc("CWE369_Divide_by_Zero__float_rand_12.c":126:5)
#loc164 = loc("CWE369_Divide_by_Zero__float_rand_12.c":123:16)
#loc165 = loc("CWE369_Divide_by_Zero__float_rand_12.c":123:9)
#loc166 = loc("CWE369_Divide_by_Zero__float_rand_12.c":128:16)
#loc167 = loc("CWE369_Divide_by_Zero__float_rand_12.c":128:9)
#loc168 = loc("CWE369_Divide_by_Zero__float_rand_12.c":130:5)
#loc169 = loc("CWE369_Divide_by_Zero__float_rand_12.c":145:5)
#loc170 = loc("CWE369_Divide_by_Zero__float_rand_12.c":130:8)
#loc171 = loc("CWE369_Divide_by_Zero__float_rand_12.c":130:33)
#loc172 = loc("CWE369_Divide_by_Zero__float_rand_12.c":131:5)
#loc173 = loc("CWE369_Divide_by_Zero__float_rand_12.c":137:5)
#loc174 = loc("CWE369_Divide_by_Zero__float_rand_12.c":139:5)
#loc175 = loc("CWE369_Divide_by_Zero__float_rand_12.c":132:9)
#loc176 = loc("CWE369_Divide_by_Zero__float_rand_12.c":136:9)
#loc177 = loc("CWE369_Divide_by_Zero__float_rand_12.c":134:32)
#loc178 = loc("CWE369_Divide_by_Zero__float_rand_12.c":134:40)
#loc179 = loc("CWE369_Divide_by_Zero__float_rand_12.c":135:26)
#loc180 = loc("CWE369_Divide_by_Zero__float_rand_12.c":135:13)
#loc181 = loc("CWE369_Divide_by_Zero__float_rand_12.c":140:9)
#loc182 = loc("CWE369_Divide_by_Zero__float_rand_12.c":144:9)
#loc183 = loc("CWE369_Divide_by_Zero__float_rand_12.c":142:32)
#loc184 = loc("CWE369_Divide_by_Zero__float_rand_12.c":142:40)
#loc185 = loc("CWE369_Divide_by_Zero__float_rand_12.c":143:26)
#loc186 = loc("CWE369_Divide_by_Zero__float_rand_12.c":143:13)
#loc187 = loc(fused[#loc1, #loc2])
#loc188 = loc(fused[#loc3, #loc4])
#loc189 = loc(fused[#loc5, #loc6])
#loc190 = loc(fused[#loc7, #loc8])
#loc191 = loc(fused[#loc10, #loc11])
#loc192 = loc(fused[#loc12, #loc13])
#loc193 = loc(fused[#loc14, #loc15])
#loc194 = loc(fused[#loc16, #loc17])
#loc195 = loc(fused[#loc19, #loc18])
#loc196 = loc(fused[#loc20, #loc21])
#loc197 = loc(fused[#loc22, #loc23])
#loc198 = loc(fused[#loc24, #loc25, #loc26, #loc21])
#loc199 = loc(fused[#loc28, #loc27])
#loc200 = loc(fused[#loc30, #loc29])
#loc201 = loc(fused[#loc31, #loc32])
#loc202 = loc(fused[#loc33, #loc34])
#loc203 = loc(fused[#loc35, #loc36, #loc37, #loc32])
#loc204 = loc(fused[#loc38, #loc39])
#loc205 = loc(fused[#loc40, #loc41])
#loc206 = loc(fused[#loc44, #loc45])
#loc207 = loc(fused[#loc48, #loc47])
#loc208 = loc(fused[#loc49, #loc50, #loc51, #loc45])
#loc209 = loc(fused[#loc52, #loc53])
#loc210 = loc(fused[#loc57, #loc58])
#loc211 = loc(fused[#loc59, #loc60])
#loc212 = loc(fused[#loc61, #loc62])
#loc213 = loc(fused[#loc63, #loc64])
#loc214 = loc(fused[#loc65, #loc66])
#loc215 = loc(fused[#loc71, #loc72])
#loc218 = loc(fused[#loc82, #loc83])
#loc219 = loc(fused[#loc86, #loc87])
#loc220 = loc(fused[#loc90, #loc89])
#loc221 = loc(fused[#loc91, #loc92])
#loc222 = loc(fused[#loc93, #loc94])
#loc223 = loc(fused[#loc95, #loc96])
#loc224 = loc(fused[#loc97, #loc98])
#loc225 = loc(fused[#loc100, #loc99])
#loc226 = loc(fused[#loc101, #loc102])
#loc227 = loc(fused[#loc103, #loc104])
#loc228 = loc(fused[#loc105, #loc106, #loc107, #loc102])
#loc229 = loc(fused[#loc109, #loc108])
#loc230 = loc(fused[#loc111, #loc110])
#loc231 = loc(fused[#loc112, #loc113])
#loc232 = loc(fused[#loc114, #loc115])
#loc233 = loc(fused[#loc116, #loc117, #loc118, #loc113])
#loc234 = loc(fused[#loc119, #loc120])
#loc235 = loc(fused[#loc123, #loc122])
#loc236 = loc(fused[#loc124, #loc125, #loc126, #loc120])
#loc237 = loc(fused[#loc127, #loc128])
#loc238 = loc(fused[#loc133, #loc134])
#loc239 = loc(fused[#loc137, #loc136])
#loc240 = loc(fused[#loc138, #loc139, #loc140, #loc134])
#loc241 = loc(fused[#loc141, #loc142])
#loc242 = loc(fused[#loc147, #loc148])
#loc243 = loc(fused[#loc149, #loc150])
#loc244 = loc(fused[#loc151, #loc152])
#loc245 = loc(fused[#loc153, #loc154])
#loc246 = loc(fused[#loc156, #loc155])
#loc247 = loc(fused[#loc157, #loc158])
#loc248 = loc(fused[#loc159, #loc160])
#loc249 = loc(fused[#loc161, #loc162, #loc163, #loc158])
#loc250 = loc(fused[#loc165, #loc164])
#loc251 = loc(fused[#loc167, #loc166])
#loc252 = loc(fused[#loc168, #loc169])
#loc253 = loc(fused[#loc170, #loc171])
#loc254 = loc(fused[#loc172, #loc173, #loc174, #loc169])
#loc255 = loc(fused[#loc175, #loc176])
#loc256 = loc(fused[#loc177, #loc178])
#loc257 = loc(fused[#loc181, #loc182])
#loc258 = loc(fused[#loc183, #loc184])
