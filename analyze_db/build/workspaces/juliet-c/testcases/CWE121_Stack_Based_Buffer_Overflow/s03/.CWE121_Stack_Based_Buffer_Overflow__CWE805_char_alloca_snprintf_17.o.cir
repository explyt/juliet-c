!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc103)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc3)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc104)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc106)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc107)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc108)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc13)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc13)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc13)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc13)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc13)
    %8 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc109)
    %9 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc13)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc13)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc108)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc15)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc15)
    %13 = cir.const #cir.int<1> : !u64i loc(#loc15)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc15)
    %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc15)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc15)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc15)
    cir.store %17, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc109)
    cir.scope {
      %18 = cir.const #cir.int<0> : !s32i loc(#loc18)
      cir.store %18, %0 : !s32i, !cir.ptr<!s32i> loc(#loc111)
      cir.for : cond {
        %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
        %20 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc112)
        cir.condition(%21) loc(#loc22)
      } body {
        cir.scope {
          %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc24)
          cir.store %19, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc114)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc26)
          %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc26)
          %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
          %23 = cir.const #cir.int<0> : !s32i loc(#loc28)
          %24 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc29)
          cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc115)
        } loc(#loc113)
        cir.yield loc(#loc17)
      } step {
        %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
        %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc31)
        cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc116)
        cir.yield loc(#loc110)
      } loc(#loc110)
    } loc(#loc110)
    cir.scope {
      %18 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc118)
      %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc36)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc36)
      %21 = cir.const #cir.int<67> : !s32i loc(#loc37)
      %22 = cir.const #cir.int<100> : !s32i loc(#loc38)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc39)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc38)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc38)
      cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc119)
      %26 = cir.const #cir.int<0> : !s32i loc(#loc42)
      %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc42)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc43)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc44)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc43)
      %31 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc45)
      %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc45)
      cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc120)
      %33 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc46)
      %34 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
      %35 = cir.const #cir.int<100> : !s32i loc(#loc48)
      %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc48)
      %37 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc3)
      %38 = cir.cast(array_to_ptrdecay, %37 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc3)
      %39 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc49)
      %40 = cir.call @snprintf(%34, %36, %38, %39) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc46)
      %41 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
      cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    } loc(#loc117)
    cir.return loc(#loc7)
  } loc(#loc105)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc122)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc54)
    cir.return loc(#loc53)
  } loc(#loc121)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc124)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc125)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc126)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc63)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc63)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc63)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc63)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc63)
    %8 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc127)
    %9 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc63)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc63)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc126)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc65)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc65)
    %13 = cir.const #cir.int<1> : !u64i loc(#loc65)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc65)
    %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc65)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc65)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc65)
    cir.store %17, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc127)
    cir.scope {
      %18 = cir.const #cir.int<0> : !s32i loc(#loc68)
      cir.store %18, %0 : !s32i, !cir.ptr<!s32i> loc(#loc129)
      cir.for : cond {
        %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
        %20 = cir.const #cir.int<1> : !s32i loc(#loc71)
        %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc130)
        cir.condition(%21) loc(#loc72)
      } body {
        cir.scope {
          %19 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc74)
          cir.store %19, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc132)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc76)
          %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc76)
          %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc77)
          %23 = cir.const #cir.int<0> : !s32i loc(#loc78)
          %24 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc79)
          cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc133)
        } loc(#loc131)
        cir.yield loc(#loc67)
      } step {
        %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
        %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc81)
        cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc134)
        cir.yield loc(#loc128)
      } loc(#loc128)
    } loc(#loc128)
    cir.scope {
      %18 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc136)
      %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc86)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc86)
      %21 = cir.const #cir.int<67> : !s32i loc(#loc87)
      %22 = cir.const #cir.int<100> : !s32i loc(#loc88)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc89)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc88)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc88)
      cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc137)
      %26 = cir.const #cir.int<0> : !s32i loc(#loc92)
      %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc92)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc93)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc94)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc93)
      %31 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc95)
      %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc95)
      cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc138)
      %33 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc96)
      %34 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc97)
      %35 = cir.const #cir.int<100> : !s32i loc(#loc98)
      %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc98)
      %37 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc99)
      %38 = cir.cast(array_to_ptrdecay, %37 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc99)
      %39 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc100)
      %40 = cir.call @snprintf(%34, %36, %38, %39) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc96)
      %41 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
      cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    } loc(#loc135)
    cir.return loc(#loc57)
  } loc(#loc123)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":0:0)
#loc1 = loc("/usr/include/stdio.h":385:1)
#loc2 = loc("/usr/include/stdio.h":387:62)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":47:29)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":29:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":50:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":31:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":31:9)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":32:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":32:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":33:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":33:36)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":34:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":34:37)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":35:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":41:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":35:13)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":35:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":35:16)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":35:20)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":35:18)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":36:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":39:16)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":39:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":40:19)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":40:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":40:14)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":40:15)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":35:24)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":35:23)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":42:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":49:5)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":43:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":43:24)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":44:16)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":44:24)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":44:29)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":44:33)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":44:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":44:34)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":45:25)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":45:16)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":45:20)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":45:9)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":47:9)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":47:18)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":47:24)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":47:35)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":48:19)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":48:9)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":79:1)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":82:1)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":81:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":81:13)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":57:1)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":77:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":59:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":59:9)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":60:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":60:12)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":61:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":61:36)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":62:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":62:37)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":63:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":68:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":63:13)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":63:9)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":63:16)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":63:20)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":63:18)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":64:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":66:16)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":66:9)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":67:19)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":67:9)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":67:14)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":67:15)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":63:24)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":63:23)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":69:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":76:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":70:9)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":70:24)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":71:16)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":71:24)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":71:29)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":71:33)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":71:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":71:34)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":72:25)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":72:16)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":72:20)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":72:9)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":74:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":74:18)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":74:24)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":74:29)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":74:35)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":75:19)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c":75:9)
#loc103 = loc(fused[#loc1, #loc2])
#loc104 = loc(fused[#loc4, #loc5])
#loc105 = loc(fused[#loc6, #loc7])
#loc106 = loc(fused[#loc8, #loc9])
#loc107 = loc(fused[#loc10, #loc11])
#loc108 = loc(fused[#loc12, #loc13])
#loc109 = loc(fused[#loc14, #loc15])
#loc110 = loc(fused[#loc16, #loc17])
#loc111 = loc(fused[#loc19, #loc18])
#loc112 = loc(fused[#loc20, #loc21])
#loc113 = loc(fused[#loc23, #loc17])
#loc114 = loc(fused[#loc25, #loc24])
#loc115 = loc(fused[#loc27, #loc26])
#loc116 = loc(fused[#loc31, #loc30])
#loc117 = loc(fused[#loc32, #loc33])
#loc118 = loc(fused[#loc34, #loc35])
#loc119 = loc(fused[#loc40, #loc41])
#loc120 = loc(fused[#loc45, #loc42])
#loc121 = loc(fused[#loc52, #loc53])
#loc122 = loc(fused[#loc54, #loc55])
#loc123 = loc(fused[#loc56, #loc57])
#loc124 = loc(fused[#loc58, #loc59])
#loc125 = loc(fused[#loc60, #loc61])
#loc126 = loc(fused[#loc62, #loc63])
#loc127 = loc(fused[#loc64, #loc65])
#loc128 = loc(fused[#loc66, #loc67])
#loc129 = loc(fused[#loc69, #loc68])
#loc130 = loc(fused[#loc70, #loc71])
#loc131 = loc(fused[#loc73, #loc67])
#loc132 = loc(fused[#loc75, #loc74])
#loc133 = loc(fused[#loc77, #loc76])
#loc134 = loc(fused[#loc81, #loc80])
#loc135 = loc(fused[#loc82, #loc83])
#loc136 = loc(fused[#loc84, #loc85])
#loc137 = loc(fused[#loc90, #loc91])
#loc138 = loc(fused[#loc95, #loc92])
