!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":24:67)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":24:80)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":38:71)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":38:84)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":48:71)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":48:84)
#loc54 = loc(fused[#loc5, #loc6])
#loc59 = loc(fused[#loc17, #loc18])
#loc65 = loc(fused[#loc33, #loc34])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_65b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printUnsignedLine(!u32i) loc(#loc52)
  cir.func @CWE190_Integer_Overflow__unsigned_int_max_square_65b_badSink(%arg0: !u32i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc54)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc56)
      %2 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc12)
      %3 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc11)
      %4 = cir.binop(mul, %2, %3) : !u32i loc(#loc57)
      cir.store %4, %1 : !u32i, !cir.ptr<!u32i> loc(#loc56)
      %5 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc13)
      cir.call @printUnsignedLine(%5) : (!u32i) -> () loc(#loc14)
    } loc(#loc55)
    cir.return loc(#loc4)
  } loc(#loc53)
  cir.func @CWE190_Integer_Overflow__unsigned_int_max_square_65b_goodG2BSink(%arg0: !u32i loc(fused[#loc17, #loc18])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc59)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc19)
    cir.scope {
      %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc61)
      %2 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc24)
      %3 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc23)
      %4 = cir.binop(mul, %2, %3) : !u32i loc(#loc62)
      cir.store %4, %1 : !u32i, !cir.ptr<!u32i> loc(#loc61)
      %5 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc25)
      cir.call @printUnsignedLine(%5) : (!u32i) -> () loc(#loc26)
    } loc(#loc60)
    cir.return loc(#loc16)
  } loc(#loc58)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc27)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc30)
  cir.func @CWE190_Integer_Overflow__unsigned_int_max_square_65b_goodB2GSink(%arg0: !u32i loc(fused[#loc33, #loc34])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc65)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc35)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc38)
      %2 = cir.cast(integral, %1 : !u32i), !s64i loc(#loc38)
      %3 = cir.cast(integral, %2 : !s64i), !s32i loc(#loc38)
      %4 = cir.abs %3 poison : !s32i loc(#loc39)
      %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc39)
      %6 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc40)
      %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc41)
      %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc41)
      %9 = cir.const #cir.int<2> : !u32i loc(#loc41)
      %10 = cir.binop(mul, %8, %9) : !u32i loc(#loc41)
      %11 = cir.const #cir.int<1> : !u32i loc(#loc41)
      %12 = cir.binop(add, %10, %11) : !u32i loc(#loc41)
      %13 = cir.cast(int_to_float, %12 : !u32i), !cir.double loc(#loc41)
      %14 = cir.call @sqrt(%13) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc40)
      %15 = cir.cast(float_to_int, %14 : !cir.double), !s64i loc(#loc40)
      %16 = cir.cmp(lt, %5, %15) : !s64i, !cir.bool loc(#loc67)
      cir.if %16 {
        %17 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc69)
        %18 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc48)
        %19 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc47)
        %20 = cir.binop(mul, %18, %19) : !u32i loc(#loc70)
        cir.store %20, %17 : !u32i, !cir.ptr<!u32i> loc(#loc69)
        %21 = cir.load %17 : !cir.ptr<!u32i>, !u32i loc(#loc49)
        cir.call @printUnsignedLine(%21) : (!u32i) -> () loc(#loc50)
      } else {
        %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc30)
        %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc30)
        cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc51)
      } loc(#loc68)
    } loc(#loc66)
    cir.return loc(#loc32)
  } loc(#loc64)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc3 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":31:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":25:1)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":26:5)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":30:5)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":28:9)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":28:38)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":28:31)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":29:27)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":29:9)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":38:1)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":45:1)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":39:1)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":40:5)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":44:5)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":42:9)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":42:38)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":42:31)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":43:27)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":43:9)
#loc27 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc28 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc29 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":58:19)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":48:1)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":60:1)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":49:1)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":51:5)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":59:5)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":51:19)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":51:9)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":51:33)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":51:46)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":51:54)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":52:5)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":55:5)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":57:5)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":53:9)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":53:38)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":53:31)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":54:27)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":54:9)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_65b.c":58:9)
#loc52 = loc(fused[#loc1, #loc2])
#loc53 = loc(fused[#loc3, #loc4])
#loc55 = loc(fused[#loc8, #loc9])
#loc56 = loc(fused[#loc10, #loc11])
#loc57 = loc(fused[#loc12, #loc11])
#loc58 = loc(fused[#loc15, #loc16])
#loc60 = loc(fused[#loc20, #loc21])
#loc61 = loc(fused[#loc22, #loc23])
#loc62 = loc(fused[#loc24, #loc23])
#loc63 = loc(fused[#loc28, #loc29])
#loc64 = loc(fused[#loc31, #loc32])
#loc66 = loc(fused[#loc36, #loc37])
#loc67 = loc(fused[#loc39, #loc42])
#loc68 = loc(fused[#loc43, #loc44, #loc45, #loc37])
#loc69 = loc(fused[#loc46, #loc47])
#loc70 = loc(fused[#loc48, #loc47])
