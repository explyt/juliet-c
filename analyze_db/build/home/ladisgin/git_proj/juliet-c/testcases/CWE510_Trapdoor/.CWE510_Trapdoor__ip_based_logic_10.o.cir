!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc380)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc381)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc382)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc383)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc384)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc385)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc386)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc387)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"192.168.30.123\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc17)
  cir.func private @inet_ntoa(!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc388)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc389)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc22)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc23)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc390)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc26)
  cir.func private @close(!s32i) -> !s32i loc(#loc391)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_10_bad() extra(#fn_attr1) {
    %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc393)
    %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc394)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc395)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc396)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc397)
    cir.br ^bb1 loc(#loc398)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc380)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc42)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc42)
    cir.brcond %7 ^bb2, ^bb51 loc(#loc399)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc400)
  ^bb3:  // pred: ^bb2
    %8 = cir.const #cir.int<16> : !u64i loc(#loc401)
    %9 = cir.cast(integral, %8 : !u64i), !s32i loc(#loc401)
    cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc395)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc37)
    cir.store %11, %3 : !s32i, !cir.ptr<!s32i> loc(#loc396)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc39)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc39)
    cir.store %13, %4 : !s32i, !cir.ptr<!s32i> loc(#loc397)
    cir.br ^bb4 loc(#loc402)
  ^bb4:  // pred: ^bb3
    cir.br ^bb6 loc(#loc402)
  ^bb5:  // pred: ^bb39
    %14 = cir.const #cir.int<0> : !s32i loc(#loc49)
    %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc49)
    cir.brcond %15 ^bb6, ^bb40 loc(#loc49)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    %16 = cir.const #cir.int<2> : !s32i loc(#loc50)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %18 = cir.const #cir.int<6> : !s32i loc(#loc52)
    %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc53)
    cir.store %19, %3 : !s32i, !cir.ptr<!s32i> loc(#loc403)
    cir.br ^bb7 loc(#loc404)
  ^bb7:  // pred: ^bb6
    %20 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc58)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc59)
    %23 = cir.cmp(eq, %20, %22) : !s32i, !cir.bool loc(#loc405)
    cir.brcond %23 ^bb8, ^bb9 loc(#loc406)
  ^bb8:  // pred: ^bb7
    cir.br ^bb40 loc(#loc61)
  ^bb9:  // pred: ^bb7
    cir.br ^bb10 loc(#loc57)
  ^bb10:  // pred: ^bb9
    %24 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc407)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc64)
    %26 = cir.const #cir.int<16> : !u64i loc(#loc408)
    cir.libc.memset %26 bytes from %24 set to %25 : !cir.ptr<!void>, !s32i, !u64i loc(#loc409)
    %27 = cir.const #cir.int<2> : !s32i loc(#loc69)
    %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc69)
    %29 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
    cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc410)
    %30 = cir.const #cir.int<0> : !s32i loc(#loc72)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc72)
    %32 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
    %33 = cir.get_member %32[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc74)
    cir.store %31, %33 : !u32i, !cir.ptr<!u32i> loc(#loc411)
    %34 = cir.const #cir.int<20000> : !s32i loc(#loc76)
    %35 = cir.cast(integral, %34 : !s32i), !u16i loc(#loc76)
    %36 = cir.call @htons(%35) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc77)
    %37 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
    cir.store %36, %37 : !u16i, !cir.ptr<!u16i> loc(#loc412)
    cir.br ^bb11 loc(#loc413)
  ^bb11:  // pred: ^bb10
    %38 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc83)
    %39 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc414)
    %40 = cir.const #cir.int<16> : !u64i loc(#loc415)
    %41 = cir.cast(integral, %40 : !u64i), !u32i loc(#loc415)
    %42 = cir.call @bind(%38, %39, %41) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc88)
    %43 = cir.const #cir.int<1> : !s32i loc(#loc89)
    %44 = cir.unary(minus, %43) : !s32i, !s32i loc(#loc89)
    %45 = cir.cmp(eq, %42, %44) : !s32i, !cir.bool loc(#loc416)
    cir.brcond %45 ^bb12, ^bb13 loc(#loc417)
  ^bb12:  // pred: ^bb11
    cir.br ^bb40 loc(#loc91)
  ^bb13:  // pred: ^bb11
    cir.br ^bb14 loc(#loc82)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc418)
  ^bb15:  // pred: ^bb14
    %46 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    %47 = cir.const #cir.int<5> : !s32i loc(#loc95)
    %48 = cir.call @listen(%46, %47) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc96)
    %49 = cir.const #cir.int<1> : !s32i loc(#loc97)
    %50 = cir.unary(minus, %49) : !s32i, !s32i loc(#loc97)
    %51 = cir.cmp(eq, %48, %50) : !s32i, !cir.bool loc(#loc419)
    cir.brcond %51 ^bb16, ^bb17 loc(#loc420)
  ^bb16:  // pred: ^bb15
    cir.br ^bb40 loc(#loc99)
  ^bb17:  // pred: ^bb15
    cir.br ^bb18 loc(#loc93)
  ^bb18:  // pred: ^bb17
    %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc100)
    %53 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc101)
    %54 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc102)
    %55 = cir.call @accept(%52, %53, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc103)
    cir.store %55, %4 : !s32i, !cir.ptr<!s32i> loc(#loc421)
    cir.br ^bb19 loc(#loc422)
  ^bb19:  // pred: ^bb18
    %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc108)
    %57 = cir.const #cir.int<1> : !s32i loc(#loc109)
    %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc109)
    %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc423)
    cir.brcond %59 ^bb20, ^bb21 loc(#loc424)
  ^bb20:  // pred: ^bb19
    cir.br ^bb40 loc(#loc111)
  ^bb21:  // pred: ^bb19
    cir.br ^bb22 loc(#loc107)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc425)
  ^bb23:  // pred: ^bb22
    %60 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc114)
    %61 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc426)
    %62 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc427)
    %63 = cir.call @getsockname(%60, %61, %62) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc119)
    %64 = cir.const #cir.int<1> : !s32i loc(#loc120)
    %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc121)
    %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc428)
    cir.brcond %66 ^bb24, ^bb25 loc(#loc429)
  ^bb24:  // pred: ^bb23
    cir.br ^bb40 loc(#loc123)
  ^bb25:  // pred: ^bb23
    cir.br ^bb26 loc(#loc113)
  ^bb26:  // pred: ^bb25
    cir.br ^bb27 loc(#loc430)
  ^bb27:  // pred: ^bb26
    %67 = cir.get_global @strcmp : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc126)
    %68 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc17)
    %69 = cir.cast(array_to_ptrdecay, %68 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc17)
    %70 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
    %71 = cir.load %70 : !cir.ptr<!ty_in_addr>, !ty_in_addr loc(#loc127)
    %72 = cir.call @inet_ntoa(%71) : (!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc127)
    %73 = cir.call @strcmp(%69, %72) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc126)
    %74 = cir.const #cir.int<0> : !s32i loc(#loc128)
    %75 = cir.cmp(eq, %73, %74) : !s32i, !cir.bool loc(#loc431)
    cir.brcond %75 ^bb28, ^bb33 loc(#loc432)
  ^bb28:  // pred: ^bb27
    cir.br ^bb29 loc(#loc433)
  ^bb29:  // pred: ^bb28
    %76 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc134)
    %77 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc22)
    %78 = cir.cast(array_to_ptrdecay, %77 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc22)
    %79 = cir.cast(bitcast, %78 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc22)
    %80 = cir.const #cir.int<15> : !u64i loc(#loc434)
    %81 = cir.const #cir.int<0> : !s32i loc(#loc137)
    %82 = cir.call @send(%76, %79, %80, %81) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc138)
    %83 = cir.const #cir.int<1> : !s32i loc(#loc139)
    %84 = cir.unary(minus, %83) : !s32i, !s32i loc(#loc139)
    %85 = cir.cast(integral, %84 : !s32i), !s64i loc(#loc139)
    %86 = cir.cmp(eq, %82, %85) : !s64i, !cir.bool loc(#loc435)
    cir.brcond %86 ^bb30, ^bb31 loc(#loc436)
  ^bb30:  // pred: ^bb29
    cir.br ^bb40 loc(#loc141)
  ^bb31:  // pred: ^bb29
    cir.br ^bb32 loc(#loc133)
  ^bb32:  // pred: ^bb31
    cir.br ^bb38 loc(#loc130)
  ^bb33:  // pred: ^bb27
    cir.br ^bb34 loc(#loc437)
  ^bb34:  // pred: ^bb33
    %87 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc144)
    %88 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc23)
    %89 = cir.cast(array_to_ptrdecay, %88 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc23)
    %90 = cir.cast(bitcast, %89 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc23)
    %91 = cir.const #cir.int<8> : !u64i loc(#loc438)
    %92 = cir.const #cir.int<0> : !s32i loc(#loc147)
    %93 = cir.call @send(%87, %90, %91, %92) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc148)
    %94 = cir.const #cir.int<1> : !s32i loc(#loc149)
    %95 = cir.unary(minus, %94) : !s32i, !s32i loc(#loc149)
    %96 = cir.cast(integral, %95 : !s32i), !s64i loc(#loc149)
    %97 = cir.cmp(eq, %93, %96) : !s64i, !cir.bool loc(#loc439)
    cir.brcond %97 ^bb35, ^bb36 loc(#loc440)
  ^bb35:  // pred: ^bb34
    %98 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc26)
    %99 = cir.cast(array_to_ptrdecay, %98 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc26)
    cir.call @printLine(%99) : (!cir.ptr<!s8i>) -> () loc(#loc151)
    cir.br ^bb36 loc(#loc143)
  ^bb36:  // 2 preds: ^bb34, ^bb35
    cir.br ^bb37 loc(#loc143)
  ^bb37:  // pred: ^bb36
    cir.br ^bb38 loc(#loc125)
  ^bb38:  // 2 preds: ^bb32, ^bb37
    cir.br ^bb39 loc(#loc125)
  ^bb39:  // pred: ^bb38
    cir.br ^bb5 loc(#loc48)
  ^bb40:  // 7 preds: ^bb5, ^bb8, ^bb12, ^bb16, ^bb20, ^bb24, ^bb30
    cir.br ^bb41 loc(#loc48)
  ^bb41:  // pred: ^bb40
    cir.br ^bb42 loc(#loc441)
  ^bb42:  // pred: ^bb41
    %100 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc154)
    %101 = cir.const #cir.int<1> : !s32i loc(#loc155)
    %102 = cir.unary(minus, %101) : !s32i, !s32i loc(#loc155)
    %103 = cir.cmp(ne, %100, %102) : !s32i, !cir.bool loc(#loc442)
    cir.brcond %103 ^bb43, ^bb44 loc(#loc443)
  ^bb43:  // pred: ^bb42
    %104 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    %105 = cir.call @close(%104) : (!s32i) -> !s32i loc(#loc158)
    cir.br ^bb44 loc(#loc153)
  ^bb44:  // 2 preds: ^bb42, ^bb43
    cir.br ^bb45 loc(#loc153)
  ^bb45:  // pred: ^bb44
    cir.br ^bb46 loc(#loc444)
  ^bb46:  // pred: ^bb45
    %106 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc161)
    %107 = cir.const #cir.int<1> : !s32i loc(#loc162)
    %108 = cir.unary(minus, %107) : !s32i, !s32i loc(#loc162)
    %109 = cir.cmp(ne, %106, %108) : !s32i, !cir.bool loc(#loc445)
    cir.brcond %109 ^bb47, ^bb48 loc(#loc446)
  ^bb47:  // pred: ^bb46
    %110 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc164)
    %111 = cir.call @close(%110) : (!s32i) -> !s32i loc(#loc165)
    cir.br ^bb48 loc(#loc160)
  ^bb48:  // 2 preds: ^bb46, ^bb47
    cir.br ^bb49 loc(#loc160)
  ^bb49:  // pred: ^bb48
    cir.br ^bb50 loc(#loc45)
  ^bb50:  // pred: ^bb49
    cir.br ^bb51 loc(#loc41)
  ^bb51:  // 2 preds: ^bb1, ^bb50
    cir.br ^bb52 loc(#loc41)
  ^bb52:  // pred: ^bb51
    cir.return loc(#loc30)
  } loc(#loc392)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_10_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc448)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc168)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc449)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc170)
    cir.return loc(#loc167)
  } loc(#loc447)
  cir.global "private" external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc450)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc174)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc452)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc453)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc454)
    cir.br ^bb1 loc(#loc455)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc450)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc185)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc185)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc456)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc174)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc174)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc189)
    cir.br ^bb39 loc(#loc187)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc457)
  ^bb4:  // pred: ^bb3
    %8 = cir.const #cir.int<1> : !s32i loc(#loc180)
    %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc180)
    cir.store %9, %1 : !s32i, !cir.ptr<!s32i> loc(#loc453)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc182)
    %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc182)
    cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc454)
    cir.br ^bb5 loc(#loc458)
  ^bb5:  // pred: ^bb4
    cir.br ^bb7 loc(#loc458)
  ^bb6:  // pred: ^bb27
    %12 = cir.const #cir.int<0> : !s32i loc(#loc194)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc194)
    cir.brcond %13 ^bb7, ^bb28 loc(#loc194)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %14 = cir.const #cir.int<2> : !s32i loc(#loc195)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc196)
    %16 = cir.const #cir.int<6> : !s32i loc(#loc197)
    %17 = cir.call @socket(%14, %15, %16) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc198)
    cir.store %17, %1 : !s32i, !cir.ptr<!s32i> loc(#loc459)
    cir.br ^bb8 loc(#loc460)
  ^bb8:  // pred: ^bb7
    %18 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc203)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc204)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc204)
    %21 = cir.cmp(eq, %18, %20) : !s32i, !cir.bool loc(#loc461)
    cir.brcond %21 ^bb9, ^bb10 loc(#loc462)
  ^bb9:  // pred: ^bb8
    cir.br ^bb28 loc(#loc206)
  ^bb10:  // pred: ^bb8
    cir.br ^bb11 loc(#loc202)
  ^bb11:  // pred: ^bb10
    %22 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc463)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc209)
    %24 = cir.const #cir.int<16> : !u64i loc(#loc464)
    cir.libc.memset %24 bytes from %22 set to %23 : !cir.ptr<!void>, !s32i, !u64i loc(#loc465)
    %25 = cir.const #cir.int<2> : !s32i loc(#loc214)
    %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc214)
    %27 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
    cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc466)
    %28 = cir.const #cir.int<0> : !s32i loc(#loc216)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc216)
    %30 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
    %31 = cir.get_member %30[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc74)
    cir.store %29, %31 : !u32i, !cir.ptr<!u32i> loc(#loc467)
    %32 = cir.const #cir.int<20000> : !s32i loc(#loc218)
    %33 = cir.cast(integral, %32 : !s32i), !u16i loc(#loc218)
    %34 = cir.call @htons(%33) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc219)
    %35 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
    cir.store %34, %35 : !u16i, !cir.ptr<!u16i> loc(#loc468)
    cir.br ^bb12 loc(#loc469)
  ^bb12:  // pred: ^bb11
    %36 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc224)
    %37 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc470)
    %38 = cir.const #cir.int<16> : !u64i loc(#loc471)
    %39 = cir.cast(integral, %38 : !u64i), !u32i loc(#loc471)
    %40 = cir.call @bind(%36, %37, %39) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc229)
    %41 = cir.const #cir.int<1> : !s32i loc(#loc230)
    %42 = cir.unary(minus, %41) : !s32i, !s32i loc(#loc230)
    %43 = cir.cmp(eq, %40, %42) : !s32i, !cir.bool loc(#loc472)
    cir.brcond %43 ^bb13, ^bb14 loc(#loc473)
  ^bb13:  // pred: ^bb12
    cir.br ^bb28 loc(#loc232)
  ^bb14:  // pred: ^bb12
    cir.br ^bb15 loc(#loc223)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc474)
  ^bb16:  // pred: ^bb15
    %44 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc235)
    %45 = cir.const #cir.int<5> : !s32i loc(#loc236)
    %46 = cir.call @listen(%44, %45) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc237)
    %47 = cir.const #cir.int<1> : !s32i loc(#loc238)
    %48 = cir.unary(minus, %47) : !s32i, !s32i loc(#loc238)
    %49 = cir.cmp(eq, %46, %48) : !s32i, !cir.bool loc(#loc475)
    cir.brcond %49 ^bb17, ^bb18 loc(#loc476)
  ^bb17:  // pred: ^bb16
    cir.br ^bb28 loc(#loc240)
  ^bb18:  // pred: ^bb16
    cir.br ^bb19 loc(#loc234)
  ^bb19:  // pred: ^bb18
    %50 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc241)
    %51 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc242)
    %52 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc243)
    %53 = cir.call @accept(%50, %51, %52) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc244)
    cir.store %53, %2 : !s32i, !cir.ptr<!s32i> loc(#loc477)
    cir.br ^bb20 loc(#loc478)
  ^bb20:  // pred: ^bb19
    %54 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc249)
    %55 = cir.const #cir.int<1> : !s32i loc(#loc250)
    %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc250)
    %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc479)
    cir.brcond %57 ^bb21, ^bb22 loc(#loc480)
  ^bb21:  // pred: ^bb20
    cir.br ^bb28 loc(#loc252)
  ^bb22:  // pred: ^bb20
    cir.br ^bb23 loc(#loc248)
  ^bb23:  // pred: ^bb22
    cir.br ^bb24 loc(#loc481)
  ^bb24:  // pred: ^bb23
    %58 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc255)
    %59 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc256)
    %60 = cir.cast(array_to_ptrdecay, %59 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc256)
    %61 = cir.cast(bitcast, %60 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc256)
    %62 = cir.const #cir.int<8> : !u64i loc(#loc482)
    %63 = cir.const #cir.int<0> : !s32i loc(#loc259)
    %64 = cir.call @send(%58, %61, %62, %63) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc260)
    %65 = cir.const #cir.int<1> : !s32i loc(#loc261)
    %66 = cir.unary(minus, %65) : !s32i, !s32i loc(#loc261)
    %67 = cir.cast(integral, %66 : !s32i), !s64i loc(#loc261)
    %68 = cir.cmp(eq, %64, %67) : !s64i, !cir.bool loc(#loc483)
    cir.brcond %68 ^bb25, ^bb26 loc(#loc484)
  ^bb25:  // pred: ^bb24
    %69 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc263)
    %70 = cir.cast(array_to_ptrdecay, %69 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc263)
    cir.call @printLine(%70) : (!cir.ptr<!s8i>) -> () loc(#loc264)
    cir.br ^bb26 loc(#loc254)
  ^bb26:  // 2 preds: ^bb24, ^bb25
    cir.br ^bb27 loc(#loc254)
  ^bb27:  // pred: ^bb26
    cir.br ^bb6 loc(#loc193)
  ^bb28:  // 5 preds: ^bb6, ^bb9, ^bb13, ^bb17, ^bb21
    cir.br ^bb29 loc(#loc193)
  ^bb29:  // pred: ^bb28
    cir.br ^bb30 loc(#loc485)
  ^bb30:  // pred: ^bb29
    %71 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc267)
    %72 = cir.const #cir.int<1> : !s32i loc(#loc268)
    %73 = cir.unary(minus, %72) : !s32i, !s32i loc(#loc268)
    %74 = cir.cmp(ne, %71, %73) : !s32i, !cir.bool loc(#loc486)
    cir.brcond %74 ^bb31, ^bb32 loc(#loc487)
  ^bb31:  // pred: ^bb30
    %75 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc270)
    %76 = cir.call @close(%75) : (!s32i) -> !s32i loc(#loc271)
    cir.br ^bb32 loc(#loc266)
  ^bb32:  // 2 preds: ^bb30, ^bb31
    cir.br ^bb33 loc(#loc266)
  ^bb33:  // pred: ^bb32
    cir.br ^bb34 loc(#loc488)
  ^bb34:  // pred: ^bb33
    %77 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc274)
    %78 = cir.const #cir.int<1> : !s32i loc(#loc275)
    %79 = cir.unary(minus, %78) : !s32i, !s32i loc(#loc275)
    %80 = cir.cmp(ne, %77, %79) : !s32i, !cir.bool loc(#loc489)
    cir.brcond %80 ^bb35, ^bb36 loc(#loc490)
  ^bb35:  // pred: ^bb34
    %81 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc277)
    %82 = cir.call @close(%81) : (!s32i) -> !s32i loc(#loc278)
    cir.br ^bb36 loc(#loc273)
  ^bb36:  // 2 preds: ^bb34, ^bb35
    cir.br ^bb37 loc(#loc273)
  ^bb37:  // pred: ^bb36
    cir.br ^bb38 loc(#loc191)
  ^bb38:  // pred: ^bb37
    cir.br ^bb39 loc(#loc184)
  ^bb39:  // 2 preds: ^bb2, ^bb38
    cir.br ^bb40 loc(#loc184)
  ^bb40:  // pred: ^bb39
    cir.return loc(#loc176)
  } loc(#loc451)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc492)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc493)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc494)
    cir.br ^bb1 loc(#loc495)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc380)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc289)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc289)
    cir.brcond %5 ^bb2, ^bb38 loc(#loc496)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc497)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<1> : !s32i loc(#loc284)
    %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc284)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc493)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc286)
    %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc286)
    cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc494)
    cir.br ^bb4 loc(#loc498)
  ^bb4:  // pred: ^bb3
    cir.br ^bb6 loc(#loc498)
  ^bb5:  // pred: ^bb26
    %10 = cir.const #cir.int<0> : !s32i loc(#loc295)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc295)
    cir.brcond %11 ^bb6, ^bb27 loc(#loc295)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    %12 = cir.const #cir.int<2> : !s32i loc(#loc296)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc297)
    %14 = cir.const #cir.int<6> : !s32i loc(#loc298)
    %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc299)
    cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc499)
    cir.br ^bb7 loc(#loc500)
  ^bb7:  // pred: ^bb6
    %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc304)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc305)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc305)
    %19 = cir.cmp(eq, %16, %18) : !s32i, !cir.bool loc(#loc501)
    cir.brcond %19 ^bb8, ^bb9 loc(#loc502)
  ^bb8:  // pred: ^bb7
    cir.br ^bb27 loc(#loc307)
  ^bb9:  // pred: ^bb7
    cir.br ^bb10 loc(#loc303)
  ^bb10:  // pred: ^bb9
    %20 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc503)
    %21 = cir.const #cir.int<0> : !s32i loc(#loc310)
    %22 = cir.const #cir.int<16> : !u64i loc(#loc504)
    cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc505)
    %23 = cir.const #cir.int<2> : !s32i loc(#loc315)
    %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc315)
    %25 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
    cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc506)
    %26 = cir.const #cir.int<0> : !s32i loc(#loc317)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc317)
    %28 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
    %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc74)
    cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc507)
    %30 = cir.const #cir.int<20000> : !s32i loc(#loc319)
    %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc319)
    %32 = cir.call @htons(%31) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc320)
    %33 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
    cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc508)
    cir.br ^bb11 loc(#loc509)
  ^bb11:  // pred: ^bb10
    %34 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc325)
    %35 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc510)
    %36 = cir.const #cir.int<16> : !u64i loc(#loc511)
    %37 = cir.cast(integral, %36 : !u64i), !u32i loc(#loc511)
    %38 = cir.call @bind(%34, %35, %37) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc330)
    %39 = cir.const #cir.int<1> : !s32i loc(#loc331)
    %40 = cir.unary(minus, %39) : !s32i, !s32i loc(#loc331)
    %41 = cir.cmp(eq, %38, %40) : !s32i, !cir.bool loc(#loc512)
    cir.brcond %41 ^bb12, ^bb13 loc(#loc513)
  ^bb12:  // pred: ^bb11
    cir.br ^bb27 loc(#loc333)
  ^bb13:  // pred: ^bb11
    cir.br ^bb14 loc(#loc324)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc514)
  ^bb15:  // pred: ^bb14
    %42 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc336)
    %43 = cir.const #cir.int<5> : !s32i loc(#loc337)
    %44 = cir.call @listen(%42, %43) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc338)
    %45 = cir.const #cir.int<1> : !s32i loc(#loc339)
    %46 = cir.unary(minus, %45) : !s32i, !s32i loc(#loc339)
    %47 = cir.cmp(eq, %44, %46) : !s32i, !cir.bool loc(#loc515)
    cir.brcond %47 ^bb16, ^bb17 loc(#loc516)
  ^bb16:  // pred: ^bb15
    cir.br ^bb27 loc(#loc341)
  ^bb17:  // pred: ^bb15
    cir.br ^bb18 loc(#loc335)
  ^bb18:  // pred: ^bb17
    %48 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc342)
    %49 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc343)
    %50 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc344)
    %51 = cir.call @accept(%48, %49, %50) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc345)
    cir.store %51, %2 : !s32i, !cir.ptr<!s32i> loc(#loc517)
    cir.br ^bb19 loc(#loc518)
  ^bb19:  // pred: ^bb18
    %52 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc350)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc351)
    %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc351)
    %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc519)
    cir.brcond %55 ^bb20, ^bb21 loc(#loc520)
  ^bb20:  // pred: ^bb19
    cir.br ^bb27 loc(#loc353)
  ^bb21:  // pred: ^bb19
    cir.br ^bb22 loc(#loc349)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc521)
  ^bb23:  // pred: ^bb22
    %56 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc356)
    %57 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc357)
    %58 = cir.cast(array_to_ptrdecay, %57 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc357)
    %59 = cir.cast(bitcast, %58 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc357)
    %60 = cir.const #cir.int<8> : !u64i loc(#loc522)
    %61 = cir.const #cir.int<0> : !s32i loc(#loc360)
    %62 = cir.call @send(%56, %59, %60, %61) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc361)
    %63 = cir.const #cir.int<1> : !s32i loc(#loc362)
    %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc362)
    %65 = cir.cast(integral, %64 : !s32i), !s64i loc(#loc362)
    %66 = cir.cmp(eq, %62, %65) : !s64i, !cir.bool loc(#loc523)
    cir.brcond %66 ^bb24, ^bb25 loc(#loc524)
  ^bb24:  // pred: ^bb23
    %67 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc364)
    %68 = cir.cast(array_to_ptrdecay, %67 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc364)
    cir.call @printLine(%68) : (!cir.ptr<!s8i>) -> () loc(#loc365)
    cir.br ^bb25 loc(#loc355)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    cir.br ^bb26 loc(#loc355)
  ^bb26:  // pred: ^bb25
    cir.br ^bb5 loc(#loc294)
  ^bb27:  // 5 preds: ^bb5, ^bb8, ^bb12, ^bb16, ^bb20
    cir.br ^bb28 loc(#loc294)
  ^bb28:  // pred: ^bb27
    cir.br ^bb29 loc(#loc525)
  ^bb29:  // pred: ^bb28
    %69 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc368)
    %70 = cir.const #cir.int<1> : !s32i loc(#loc369)
    %71 = cir.unary(minus, %70) : !s32i, !s32i loc(#loc369)
    %72 = cir.cmp(ne, %69, %71) : !s32i, !cir.bool loc(#loc526)
    cir.brcond %72 ^bb30, ^bb31 loc(#loc527)
  ^bb30:  // pred: ^bb29
    %73 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc371)
    %74 = cir.call @close(%73) : (!s32i) -> !s32i loc(#loc372)
    cir.br ^bb31 loc(#loc367)
  ^bb31:  // 2 preds: ^bb29, ^bb30
    cir.br ^bb32 loc(#loc367)
  ^bb32:  // pred: ^bb31
    cir.br ^bb33 loc(#loc528)
  ^bb33:  // pred: ^bb32
    %75 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc375)
    %76 = cir.const #cir.int<1> : !s32i loc(#loc376)
    %77 = cir.unary(minus, %76) : !s32i, !s32i loc(#loc376)
    %78 = cir.cmp(ne, %75, %77) : !s32i, !cir.bool loc(#loc529)
    cir.brcond %78 ^bb34, ^bb35 loc(#loc530)
  ^bb34:  // pred: ^bb33
    %79 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc378)
    %80 = cir.call @close(%79) : (!s32i) -> !s32i loc(#loc379)
    cir.br ^bb35 loc(#loc374)
  ^bb35:  // 2 preds: ^bb33, ^bb34
    cir.br ^bb36 loc(#loc374)
  ^bb36:  // pred: ^bb35
    cir.br ^bb37 loc(#loc292)
  ^bb37:  // pred: ^bb36
    cir.br ^bb38 loc(#loc288)
  ^bb38:  // 2 preds: ^bb1, ^bb37
    cir.br ^bb39 loc(#loc288)
  ^bb39:  // pred: ^bb38
    cir.return loc(#loc280)
  } loc(#loc491)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_10.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":116:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":116:12)
#loc3 = loc("/usr/include/sys/socket.h":102:1)
#loc4 = loc("/usr/include/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":404:1)
#loc6 = loc("/usr/include/netinet/in.h":405:40)
#loc7 = loc("/usr/include/sys/socket.h":112:1)
#loc8 = loc("/usr/include/sys/socket.h":113:6)
#loc9 = loc("/usr/include/sys/socket.h":296:1)
#loc10 = loc("/usr/include/sys/socket.h":296:39)
#loc11 = loc("/usr/include/sys/socket.h":306:1)
#loc12 = loc("/usr/include/sys/socket.h":307:38)
#loc13 = loc("/usr/include/sys/socket.h":116:1)
#loc14 = loc("/usr/include/sys/socket.h":117:33)
#loc15 = loc("/usr/include/string.h":156:1)
#loc16 = loc("/usr/include/string.h":157:33)
#loc17 = loc("CWE510_Trapdoor__ip_based_logic_10.c":90:28)
#loc18 = loc("/usr/include/arpa/inet.h":53:1)
#loc19 = loc("/usr/include/arpa/inet.h":53:46)
#loc20 = loc("/usr/include/sys/socket.h":138:1)
#loc21 = loc("/usr/include/sys/socket.h":138:74)
#loc22 = loc("CWE510_Trapdoor__ip_based_logic_10.c":92:44)
#loc23 = loc("CWE510_Trapdoor__ip_based_logic_10.c":100:44)
#loc24 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc25 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc26 = loc("CWE510_Trapdoor__ip_based_logic_10.c":102:35)
#loc27 = loc("/usr/include/unistd.h":358:1)
#loc28 = loc("/usr/include/unistd.h":358:27)
#loc29 = loc("CWE510_Trapdoor__ip_based_logic_10.c":41:1)
#loc30 = loc("CWE510_Trapdoor__ip_based_logic_10.c":123:1)
#loc31 = loc("CWE510_Trapdoor__ip_based_logic_10.c":50:13)
#loc32 = loc("CWE510_Trapdoor__ip_based_logic_10.c":50:32)
#loc33 = loc("CWE510_Trapdoor__ip_based_logic_10.c":50:41)
#loc34 = loc("CWE510_Trapdoor__ip_based_logic_10.c":51:13)
#loc35 = loc("CWE510_Trapdoor__ip_based_logic_10.c":51:56)
#loc36 = loc("CWE510_Trapdoor__ip_based_logic_10.c":52:13)
#loc37 = loc("CWE510_Trapdoor__ip_based_logic_10.c":52:35)
#loc38 = loc("CWE510_Trapdoor__ip_based_logic_10.c":53:13)
#loc39 = loc("CWE510_Trapdoor__ip_based_logic_10.c":53:35)
#loc40 = loc("CWE510_Trapdoor__ip_based_logic_10.c":43:5)
#loc41 = loc("CWE510_Trapdoor__ip_based_logic_10.c":122:5)
#loc42 = loc("CWE510_Trapdoor__ip_based_logic_10.c":43:8)
#loc43 = loc("CWE510_Trapdoor__ip_based_logic_10.c":44:5)
#loc44 = loc("CWE510_Trapdoor__ip_based_logic_10.c":45:9)
#loc45 = loc("CWE510_Trapdoor__ip_based_logic_10.c":121:9)
#loc46 = loc("CWE510_Trapdoor__ip_based_logic_10.c":51:36)
#loc47 = loc("CWE510_Trapdoor__ip_based_logic_10.c":54:13)
#loc48 = loc("CWE510_Trapdoor__ip_based_logic_10.c":106:21)
#loc49 = loc("CWE510_Trapdoor__ip_based_logic_10.c":106:20)
#loc50 = loc("CWE510_Trapdoor__ip_based_logic_10.c":63:39)
#loc51 = loc("CWE510_Trapdoor__ip_based_logic_10.c":63:48)
#loc52 = loc("CWE510_Trapdoor__ip_based_logic_10.c":63:61)
#loc53 = loc("CWE510_Trapdoor__ip_based_logic_10.c":63:32)
#loc54 = loc("CWE510_Trapdoor__ip_based_logic_10.c":63:17)
#loc55 = loc("CWE510_Trapdoor__ip_based_logic_10.c":63:72)
#loc56 = loc("CWE510_Trapdoor__ip_based_logic_10.c":64:17)
#loc57 = loc("CWE510_Trapdoor__ip_based_logic_10.c":67:17)
#loc58 = loc("CWE510_Trapdoor__ip_based_logic_10.c":64:21)
#loc59 = loc("CWE510_Trapdoor__ip_based_logic_10.c":64:37)
#loc60 = loc("CWE510_Trapdoor__ip_based_logic_10.c":65:17)
#loc61 = loc("CWE510_Trapdoor__ip_based_logic_10.c":66:21)
#loc62 = loc("CWE510_Trapdoor__ip_based_logic_10.c":68:24)
#loc63 = loc("CWE510_Trapdoor__ip_based_logic_10.c":68:25)
#loc64 = loc("CWE510_Trapdoor__ip_based_logic_10.c":68:34)
#loc65 = loc("CWE510_Trapdoor__ip_based_logic_10.c":68:37)
#loc66 = loc("CWE510_Trapdoor__ip_based_logic_10.c":68:51)
#loc67 = loc("CWE510_Trapdoor__ip_based_logic_10.c":68:17)
#loc68 = loc("CWE510_Trapdoor__ip_based_logic_10.c":68:52)
#loc69 = loc("CWE510_Trapdoor__ip_based_logic_10.c":69:38)
#loc70 = loc("/usr/include/netinet/in.h":249:5)
#loc71 = loc("CWE510_Trapdoor__ip_based_logic_10.c":69:17)
#loc72 = loc("CWE510_Trapdoor__ip_based_logic_10.c":70:43)
#loc73 = loc("/usr/include/netinet/in.h":251:20)
#loc74 = loc("/usr/include/netinet/in.h":33:15)
#loc75 = loc("CWE510_Trapdoor__ip_based_logic_10.c":70:17)
#loc76 = loc("CWE510_Trapdoor__ip_based_logic_10.c":71:42)
#loc77 = loc("CWE510_Trapdoor__ip_based_logic_10.c":71:36)
#loc78 = loc("/usr/include/netinet/in.h":250:15)
#loc79 = loc("CWE510_Trapdoor__ip_based_logic_10.c":71:17)
#loc80 = loc("CWE510_Trapdoor__ip_based_logic_10.c":71:47)
#loc81 = loc("CWE510_Trapdoor__ip_based_logic_10.c":72:17)
#loc82 = loc("CWE510_Trapdoor__ip_based_logic_10.c":75:17)
#loc83 = loc("CWE510_Trapdoor__ip_based_logic_10.c":72:26)
#loc84 = loc("CWE510_Trapdoor__ip_based_logic_10.c":72:58)
#loc85 = loc("CWE510_Trapdoor__ip_based_logic_10.c":72:59)
#loc86 = loc("CWE510_Trapdoor__ip_based_logic_10.c":72:68)
#loc87 = loc("CWE510_Trapdoor__ip_based_logic_10.c":72:82)
#loc88 = loc("CWE510_Trapdoor__ip_based_logic_10.c":72:21)
#loc89 = loc("CWE510_Trapdoor__ip_based_logic_10.c":72:88)
#loc90 = loc("CWE510_Trapdoor__ip_based_logic_10.c":73:17)
#loc91 = loc("CWE510_Trapdoor__ip_based_logic_10.c":74:21)
#loc92 = loc("CWE510_Trapdoor__ip_based_logic_10.c":76:17)
#loc93 = loc("CWE510_Trapdoor__ip_based_logic_10.c":79:17)
#loc94 = loc("CWE510_Trapdoor__ip_based_logic_10.c":76:28)
#loc95 = loc("CWE510_Trapdoor__ip_based_logic_10.c":76:42)
#loc96 = loc("CWE510_Trapdoor__ip_based_logic_10.c":76:21)
#loc97 = loc("CWE510_Trapdoor__ip_based_logic_10.c":76:48)
#loc98 = loc("CWE510_Trapdoor__ip_based_logic_10.c":77:17)
#loc99 = loc("CWE510_Trapdoor__ip_based_logic_10.c":78:21)
#loc100 = loc("CWE510_Trapdoor__ip_based_logic_10.c":80:39)
#loc101 = loc("CWE510_Trapdoor__ip_based_logic_10.c":80:53)
#loc102 = loc("CWE510_Trapdoor__ip_based_logic_10.c":80:59)
#loc103 = loc("CWE510_Trapdoor__ip_based_logic_10.c":80:32)
#loc104 = loc("CWE510_Trapdoor__ip_based_logic_10.c":80:17)
#loc105 = loc("CWE510_Trapdoor__ip_based_logic_10.c":80:63)
#loc106 = loc("CWE510_Trapdoor__ip_based_logic_10.c":81:17)
#loc107 = loc("CWE510_Trapdoor__ip_based_logic_10.c":84:17)
#loc108 = loc("CWE510_Trapdoor__ip_based_logic_10.c":81:21)
#loc109 = loc("CWE510_Trapdoor__ip_based_logic_10.c":81:37)
#loc110 = loc("CWE510_Trapdoor__ip_based_logic_10.c":82:17)
#loc111 = loc("CWE510_Trapdoor__ip_based_logic_10.c":83:21)
#loc112 = loc("CWE510_Trapdoor__ip_based_logic_10.c":85:17)
#loc113 = loc("CWE510_Trapdoor__ip_based_logic_10.c":88:17)
#loc114 = loc("CWE510_Trapdoor__ip_based_logic_10.c":85:33)
#loc115 = loc("CWE510_Trapdoor__ip_based_logic_10.c":85:66)
#loc116 = loc("CWE510_Trapdoor__ip_based_logic_10.c":85:67)
#loc117 = loc("CWE510_Trapdoor__ip_based_logic_10.c":85:82)
#loc118 = loc("CWE510_Trapdoor__ip_based_logic_10.c":85:83)
#loc119 = loc("CWE510_Trapdoor__ip_based_logic_10.c":85:21)
#loc120 = loc("CWE510_Trapdoor__ip_based_logic_10.c":85:105)
#loc121 = loc("CWE510_Trapdoor__ip_based_logic_10.c":85:104)
#loc122 = loc("CWE510_Trapdoor__ip_based_logic_10.c":86:17)
#loc123 = loc("CWE510_Trapdoor__ip_based_logic_10.c":87:21)
#loc124 = loc("CWE510_Trapdoor__ip_based_logic_10.c":90:17)
#loc125 = loc("CWE510_Trapdoor__ip_based_logic_10.c":104:17)
#loc126 = loc("CWE510_Trapdoor__ip_based_logic_10.c":90:21)
#loc127 = loc("CWE510_Trapdoor__ip_based_logic_10.c":90:46)
#loc128 = loc("CWE510_Trapdoor__ip_based_logic_10.c":90:84)
#loc129 = loc("CWE510_Trapdoor__ip_based_logic_10.c":91:17)
#loc130 = loc("CWE510_Trapdoor__ip_based_logic_10.c":97:17)
#loc131 = loc("CWE510_Trapdoor__ip_based_logic_10.c":99:17)
#loc132 = loc("CWE510_Trapdoor__ip_based_logic_10.c":92:21)
#loc133 = loc("CWE510_Trapdoor__ip_based_logic_10.c":96:21)
#loc134 = loc("CWE510_Trapdoor__ip_based_logic_10.c":92:30)
#loc135 = loc("CWE510_Trapdoor__ip_based_logic_10.c":92:59)
#loc136 = loc("CWE510_Trapdoor__ip_based_logic_10.c":92:79)
#loc137 = loc("CWE510_Trapdoor__ip_based_logic_10.c":92:82)
#loc138 = loc("CWE510_Trapdoor__ip_based_logic_10.c":92:25)
#loc139 = loc("CWE510_Trapdoor__ip_based_logic_10.c":92:89)
#loc140 = loc("CWE510_Trapdoor__ip_based_logic_10.c":93:21)
#loc141 = loc("CWE510_Trapdoor__ip_based_logic_10.c":95:25)
#loc142 = loc("CWE510_Trapdoor__ip_based_logic_10.c":100:21)
#loc143 = loc("CWE510_Trapdoor__ip_based_logic_10.c":103:21)
#loc144 = loc("CWE510_Trapdoor__ip_based_logic_10.c":100:30)
#loc145 = loc("CWE510_Trapdoor__ip_based_logic_10.c":100:61)
#loc146 = loc("CWE510_Trapdoor__ip_based_logic_10.c":100:83)
#loc147 = loc("CWE510_Trapdoor__ip_based_logic_10.c":100:86)
#loc148 = loc("CWE510_Trapdoor__ip_based_logic_10.c":100:25)
#loc149 = loc("CWE510_Trapdoor__ip_based_logic_10.c":100:92)
#loc150 = loc("CWE510_Trapdoor__ip_based_logic_10.c":101:21)
#loc151 = loc("CWE510_Trapdoor__ip_based_logic_10.c":102:25)
#loc152 = loc("CWE510_Trapdoor__ip_based_logic_10.c":107:13)
#loc153 = loc("CWE510_Trapdoor__ip_based_logic_10.c":110:13)
#loc154 = loc("CWE510_Trapdoor__ip_based_logic_10.c":107:17)
#loc155 = loc("CWE510_Trapdoor__ip_based_logic_10.c":107:33)
#loc156 = loc("CWE510_Trapdoor__ip_based_logic_10.c":108:13)
#loc157 = loc("CWE510_Trapdoor__ip_based_logic_10.c":109:30)
#loc158 = loc("CWE510_Trapdoor__ip_based_logic_10.c":109:17)
#loc159 = loc("CWE510_Trapdoor__ip_based_logic_10.c":111:13)
#loc160 = loc("CWE510_Trapdoor__ip_based_logic_10.c":114:13)
#loc161 = loc("CWE510_Trapdoor__ip_based_logic_10.c":111:17)
#loc162 = loc("CWE510_Trapdoor__ip_based_logic_10.c":111:33)
#loc163 = loc("CWE510_Trapdoor__ip_based_logic_10.c":112:13)
#loc164 = loc("CWE510_Trapdoor__ip_based_logic_10.c":113:30)
#loc165 = loc("CWE510_Trapdoor__ip_based_logic_10.c":113:17)
#loc166 = loc("CWE510_Trapdoor__ip_based_logic_10.c":272:1)
#loc167 = loc("CWE510_Trapdoor__ip_based_logic_10.c":276:1)
#loc168 = loc("CWE510_Trapdoor__ip_based_logic_10.c":274:5)
#loc169 = loc("CWE510_Trapdoor__ip_based_logic_10.c":274:11)
#loc170 = loc("CWE510_Trapdoor__ip_based_logic_10.c":275:5)
#loc171 = loc("CWE510_Trapdoor__ip_based_logic_10.c":275:11)
#loc172 = loc("../../testcasesupport/std_testcase.h":117:1)
#loc173 = loc("../../testcasesupport/std_testcase.h":117:12)
#loc174 = loc("CWE510_Trapdoor__ip_based_logic_10.c":135:19)
#loc175 = loc("CWE510_Trapdoor__ip_based_logic_10.c":130:1)
#loc176 = loc("CWE510_Trapdoor__ip_based_logic_10.c":201:1)
#loc177 = loc("CWE510_Trapdoor__ip_based_logic_10.c":144:13)
#loc178 = loc("CWE510_Trapdoor__ip_based_logic_10.c":144:32)
#loc179 = loc("CWE510_Trapdoor__ip_based_logic_10.c":145:13)
#loc180 = loc("CWE510_Trapdoor__ip_based_logic_10.c":145:35)
#loc181 = loc("CWE510_Trapdoor__ip_based_logic_10.c":146:13)
#loc182 = loc("CWE510_Trapdoor__ip_based_logic_10.c":146:35)
#loc183 = loc("CWE510_Trapdoor__ip_based_logic_10.c":132:5)
#loc184 = loc("CWE510_Trapdoor__ip_based_logic_10.c":200:5)
#loc185 = loc("CWE510_Trapdoor__ip_based_logic_10.c":132:8)
#loc186 = loc("CWE510_Trapdoor__ip_based_logic_10.c":133:5)
#loc187 = loc("CWE510_Trapdoor__ip_based_logic_10.c":136:5)
#loc188 = loc("CWE510_Trapdoor__ip_based_logic_10.c":138:5)
#loc189 = loc("CWE510_Trapdoor__ip_based_logic_10.c":135:9)
#loc190 = loc("CWE510_Trapdoor__ip_based_logic_10.c":139:9)
#loc191 = loc("CWE510_Trapdoor__ip_based_logic_10.c":199:9)
#loc192 = loc("CWE510_Trapdoor__ip_based_logic_10.c":147:13)
#loc193 = loc("CWE510_Trapdoor__ip_based_logic_10.c":184:21)
#loc194 = loc("CWE510_Trapdoor__ip_based_logic_10.c":184:20)
#loc195 = loc("CWE510_Trapdoor__ip_based_logic_10.c":156:39)
#loc196 = loc("CWE510_Trapdoor__ip_based_logic_10.c":156:48)
#loc197 = loc("CWE510_Trapdoor__ip_based_logic_10.c":156:61)
#loc198 = loc("CWE510_Trapdoor__ip_based_logic_10.c":156:32)
#loc199 = loc("CWE510_Trapdoor__ip_based_logic_10.c":156:17)
#loc200 = loc("CWE510_Trapdoor__ip_based_logic_10.c":156:72)
#loc201 = loc("CWE510_Trapdoor__ip_based_logic_10.c":157:17)
#loc202 = loc("CWE510_Trapdoor__ip_based_logic_10.c":160:17)
#loc203 = loc("CWE510_Trapdoor__ip_based_logic_10.c":157:21)
#loc204 = loc("CWE510_Trapdoor__ip_based_logic_10.c":157:37)
#loc205 = loc("CWE510_Trapdoor__ip_based_logic_10.c":158:17)
#loc206 = loc("CWE510_Trapdoor__ip_based_logic_10.c":159:21)
#loc207 = loc("CWE510_Trapdoor__ip_based_logic_10.c":161:24)
#loc208 = loc("CWE510_Trapdoor__ip_based_logic_10.c":161:25)
#loc209 = loc("CWE510_Trapdoor__ip_based_logic_10.c":161:34)
#loc210 = loc("CWE510_Trapdoor__ip_based_logic_10.c":161:37)
#loc211 = loc("CWE510_Trapdoor__ip_based_logic_10.c":161:51)
#loc212 = loc("CWE510_Trapdoor__ip_based_logic_10.c":161:17)
#loc213 = loc("CWE510_Trapdoor__ip_based_logic_10.c":161:52)
#loc214 = loc("CWE510_Trapdoor__ip_based_logic_10.c":162:38)
#loc215 = loc("CWE510_Trapdoor__ip_based_logic_10.c":162:17)
#loc216 = loc("CWE510_Trapdoor__ip_based_logic_10.c":163:43)
#loc217 = loc("CWE510_Trapdoor__ip_based_logic_10.c":163:17)
#loc218 = loc("CWE510_Trapdoor__ip_based_logic_10.c":164:42)
#loc219 = loc("CWE510_Trapdoor__ip_based_logic_10.c":164:36)
#loc220 = loc("CWE510_Trapdoor__ip_based_logic_10.c":164:17)
#loc221 = loc("CWE510_Trapdoor__ip_based_logic_10.c":164:47)
#loc222 = loc("CWE510_Trapdoor__ip_based_logic_10.c":165:17)
#loc223 = loc("CWE510_Trapdoor__ip_based_logic_10.c":168:17)
#loc224 = loc("CWE510_Trapdoor__ip_based_logic_10.c":165:26)
#loc225 = loc("CWE510_Trapdoor__ip_based_logic_10.c":165:58)
#loc226 = loc("CWE510_Trapdoor__ip_based_logic_10.c":165:59)
#loc227 = loc("CWE510_Trapdoor__ip_based_logic_10.c":165:68)
#loc228 = loc("CWE510_Trapdoor__ip_based_logic_10.c":165:82)
#loc229 = loc("CWE510_Trapdoor__ip_based_logic_10.c":165:21)
#loc230 = loc("CWE510_Trapdoor__ip_based_logic_10.c":165:88)
#loc231 = loc("CWE510_Trapdoor__ip_based_logic_10.c":166:17)
#loc232 = loc("CWE510_Trapdoor__ip_based_logic_10.c":167:21)
#loc233 = loc("CWE510_Trapdoor__ip_based_logic_10.c":169:17)
#loc234 = loc("CWE510_Trapdoor__ip_based_logic_10.c":172:17)
#loc235 = loc("CWE510_Trapdoor__ip_based_logic_10.c":169:28)
#loc236 = loc("CWE510_Trapdoor__ip_based_logic_10.c":169:42)
#loc237 = loc("CWE510_Trapdoor__ip_based_logic_10.c":169:21)
#loc238 = loc("CWE510_Trapdoor__ip_based_logic_10.c":169:48)
#loc239 = loc("CWE510_Trapdoor__ip_based_logic_10.c":170:17)
#loc240 = loc("CWE510_Trapdoor__ip_based_logic_10.c":171:21)
#loc241 = loc("CWE510_Trapdoor__ip_based_logic_10.c":173:39)
#loc242 = loc("CWE510_Trapdoor__ip_based_logic_10.c":173:53)
#loc243 = loc("CWE510_Trapdoor__ip_based_logic_10.c":173:59)
#loc244 = loc("CWE510_Trapdoor__ip_based_logic_10.c":173:32)
#loc245 = loc("CWE510_Trapdoor__ip_based_logic_10.c":173:17)
#loc246 = loc("CWE510_Trapdoor__ip_based_logic_10.c":173:63)
#loc247 = loc("CWE510_Trapdoor__ip_based_logic_10.c":174:17)
#loc248 = loc("CWE510_Trapdoor__ip_based_logic_10.c":177:17)
#loc249 = loc("CWE510_Trapdoor__ip_based_logic_10.c":174:21)
#loc250 = loc("CWE510_Trapdoor__ip_based_logic_10.c":174:37)
#loc251 = loc("CWE510_Trapdoor__ip_based_logic_10.c":175:17)
#loc252 = loc("CWE510_Trapdoor__ip_based_logic_10.c":176:21)
#loc253 = loc("CWE510_Trapdoor__ip_based_logic_10.c":179:17)
#loc254 = loc("CWE510_Trapdoor__ip_based_logic_10.c":182:17)
#loc255 = loc("CWE510_Trapdoor__ip_based_logic_10.c":179:26)
#loc256 = loc("CWE510_Trapdoor__ip_based_logic_10.c":179:40)
#loc257 = loc("CWE510_Trapdoor__ip_based_logic_10.c":179:57)
#loc258 = loc("CWE510_Trapdoor__ip_based_logic_10.c":179:79)
#loc259 = loc("CWE510_Trapdoor__ip_based_logic_10.c":179:82)
#loc260 = loc("CWE510_Trapdoor__ip_based_logic_10.c":179:21)
#loc261 = loc("CWE510_Trapdoor__ip_based_logic_10.c":179:88)
#loc262 = loc("CWE510_Trapdoor__ip_based_logic_10.c":180:17)
#loc263 = loc("CWE510_Trapdoor__ip_based_logic_10.c":181:31)
#loc264 = loc("CWE510_Trapdoor__ip_based_logic_10.c":181:21)
#loc265 = loc("CWE510_Trapdoor__ip_based_logic_10.c":185:13)
#loc266 = loc("CWE510_Trapdoor__ip_based_logic_10.c":188:13)
#loc267 = loc("CWE510_Trapdoor__ip_based_logic_10.c":185:17)
#loc268 = loc("CWE510_Trapdoor__ip_based_logic_10.c":185:33)
#loc269 = loc("CWE510_Trapdoor__ip_based_logic_10.c":186:13)
#loc270 = loc("CWE510_Trapdoor__ip_based_logic_10.c":187:30)
#loc271 = loc("CWE510_Trapdoor__ip_based_logic_10.c":187:17)
#loc272 = loc("CWE510_Trapdoor__ip_based_logic_10.c":189:13)
#loc273 = loc("CWE510_Trapdoor__ip_based_logic_10.c":192:13)
#loc274 = loc("CWE510_Trapdoor__ip_based_logic_10.c":189:17)
#loc275 = loc("CWE510_Trapdoor__ip_based_logic_10.c":189:33)
#loc276 = loc("CWE510_Trapdoor__ip_based_logic_10.c":190:13)
#loc277 = loc("CWE510_Trapdoor__ip_based_logic_10.c":191:30)
#loc278 = loc("CWE510_Trapdoor__ip_based_logic_10.c":191:17)
#loc279 = loc("CWE510_Trapdoor__ip_based_logic_10.c":204:1)
#loc280 = loc("CWE510_Trapdoor__ip_based_logic_10.c":270:1)
#loc281 = loc("CWE510_Trapdoor__ip_based_logic_10.c":213:13)
#loc282 = loc("CWE510_Trapdoor__ip_based_logic_10.c":213:32)
#loc283 = loc("CWE510_Trapdoor__ip_based_logic_10.c":214:13)
#loc284 = loc("CWE510_Trapdoor__ip_based_logic_10.c":214:35)
#loc285 = loc("CWE510_Trapdoor__ip_based_logic_10.c":215:13)
#loc286 = loc("CWE510_Trapdoor__ip_based_logic_10.c":215:35)
#loc287 = loc("CWE510_Trapdoor__ip_based_logic_10.c":206:5)
#loc288 = loc("CWE510_Trapdoor__ip_based_logic_10.c":269:5)
#loc289 = loc("CWE510_Trapdoor__ip_based_logic_10.c":206:8)
#loc290 = loc("CWE510_Trapdoor__ip_based_logic_10.c":207:5)
#loc291 = loc("CWE510_Trapdoor__ip_based_logic_10.c":208:9)
#loc292 = loc("CWE510_Trapdoor__ip_based_logic_10.c":268:9)
#loc293 = loc("CWE510_Trapdoor__ip_based_logic_10.c":216:13)
#loc294 = loc("CWE510_Trapdoor__ip_based_logic_10.c":253:21)
#loc295 = loc("CWE510_Trapdoor__ip_based_logic_10.c":253:20)
#loc296 = loc("CWE510_Trapdoor__ip_based_logic_10.c":225:39)
#loc297 = loc("CWE510_Trapdoor__ip_based_logic_10.c":225:48)
#loc298 = loc("CWE510_Trapdoor__ip_based_logic_10.c":225:61)
#loc299 = loc("CWE510_Trapdoor__ip_based_logic_10.c":225:32)
#loc300 = loc("CWE510_Trapdoor__ip_based_logic_10.c":225:17)
#loc301 = loc("CWE510_Trapdoor__ip_based_logic_10.c":225:72)
#loc302 = loc("CWE510_Trapdoor__ip_based_logic_10.c":226:17)
#loc303 = loc("CWE510_Trapdoor__ip_based_logic_10.c":229:17)
#loc304 = loc("CWE510_Trapdoor__ip_based_logic_10.c":226:21)
#loc305 = loc("CWE510_Trapdoor__ip_based_logic_10.c":226:37)
#loc306 = loc("CWE510_Trapdoor__ip_based_logic_10.c":227:17)
#loc307 = loc("CWE510_Trapdoor__ip_based_logic_10.c":228:21)
#loc308 = loc("CWE510_Trapdoor__ip_based_logic_10.c":230:24)
#loc309 = loc("CWE510_Trapdoor__ip_based_logic_10.c":230:25)
#loc310 = loc("CWE510_Trapdoor__ip_based_logic_10.c":230:34)
#loc311 = loc("CWE510_Trapdoor__ip_based_logic_10.c":230:37)
#loc312 = loc("CWE510_Trapdoor__ip_based_logic_10.c":230:51)
#loc313 = loc("CWE510_Trapdoor__ip_based_logic_10.c":230:17)
#loc314 = loc("CWE510_Trapdoor__ip_based_logic_10.c":230:52)
#loc315 = loc("CWE510_Trapdoor__ip_based_logic_10.c":231:38)
#loc316 = loc("CWE510_Trapdoor__ip_based_logic_10.c":231:17)
#loc317 = loc("CWE510_Trapdoor__ip_based_logic_10.c":232:43)
#loc318 = loc("CWE510_Trapdoor__ip_based_logic_10.c":232:17)
#loc319 = loc("CWE510_Trapdoor__ip_based_logic_10.c":233:42)
#loc320 = loc("CWE510_Trapdoor__ip_based_logic_10.c":233:36)
#loc321 = loc("CWE510_Trapdoor__ip_based_logic_10.c":233:17)
#loc322 = loc("CWE510_Trapdoor__ip_based_logic_10.c":233:47)
#loc323 = loc("CWE510_Trapdoor__ip_based_logic_10.c":234:17)
#loc324 = loc("CWE510_Trapdoor__ip_based_logic_10.c":237:17)
#loc325 = loc("CWE510_Trapdoor__ip_based_logic_10.c":234:26)
#loc326 = loc("CWE510_Trapdoor__ip_based_logic_10.c":234:58)
#loc327 = loc("CWE510_Trapdoor__ip_based_logic_10.c":234:59)
#loc328 = loc("CWE510_Trapdoor__ip_based_logic_10.c":234:68)
#loc329 = loc("CWE510_Trapdoor__ip_based_logic_10.c":234:82)
#loc330 = loc("CWE510_Trapdoor__ip_based_logic_10.c":234:21)
#loc331 = loc("CWE510_Trapdoor__ip_based_logic_10.c":234:88)
#loc332 = loc("CWE510_Trapdoor__ip_based_logic_10.c":235:17)
#loc333 = loc("CWE510_Trapdoor__ip_based_logic_10.c":236:21)
#loc334 = loc("CWE510_Trapdoor__ip_based_logic_10.c":238:17)
#loc335 = loc("CWE510_Trapdoor__ip_based_logic_10.c":241:17)
#loc336 = loc("CWE510_Trapdoor__ip_based_logic_10.c":238:28)
#loc337 = loc("CWE510_Trapdoor__ip_based_logic_10.c":238:42)
#loc338 = loc("CWE510_Trapdoor__ip_based_logic_10.c":238:21)
#loc339 = loc("CWE510_Trapdoor__ip_based_logic_10.c":238:48)
#loc340 = loc("CWE510_Trapdoor__ip_based_logic_10.c":239:17)
#loc341 = loc("CWE510_Trapdoor__ip_based_logic_10.c":240:21)
#loc342 = loc("CWE510_Trapdoor__ip_based_logic_10.c":242:39)
#loc343 = loc("CWE510_Trapdoor__ip_based_logic_10.c":242:53)
#loc344 = loc("CWE510_Trapdoor__ip_based_logic_10.c":242:59)
#loc345 = loc("CWE510_Trapdoor__ip_based_logic_10.c":242:32)
#loc346 = loc("CWE510_Trapdoor__ip_based_logic_10.c":242:17)
#loc347 = loc("CWE510_Trapdoor__ip_based_logic_10.c":242:63)
#loc348 = loc("CWE510_Trapdoor__ip_based_logic_10.c":243:17)
#loc349 = loc("CWE510_Trapdoor__ip_based_logic_10.c":246:17)
#loc350 = loc("CWE510_Trapdoor__ip_based_logic_10.c":243:21)
#loc351 = loc("CWE510_Trapdoor__ip_based_logic_10.c":243:37)
#loc352 = loc("CWE510_Trapdoor__ip_based_logic_10.c":244:17)
#loc353 = loc("CWE510_Trapdoor__ip_based_logic_10.c":245:21)
#loc354 = loc("CWE510_Trapdoor__ip_based_logic_10.c":248:17)
#loc355 = loc("CWE510_Trapdoor__ip_based_logic_10.c":251:17)
#loc356 = loc("CWE510_Trapdoor__ip_based_logic_10.c":248:26)
#loc357 = loc("CWE510_Trapdoor__ip_based_logic_10.c":248:40)
#loc358 = loc("CWE510_Trapdoor__ip_based_logic_10.c":248:57)
#loc359 = loc("CWE510_Trapdoor__ip_based_logic_10.c":248:79)
#loc360 = loc("CWE510_Trapdoor__ip_based_logic_10.c":248:82)
#loc361 = loc("CWE510_Trapdoor__ip_based_logic_10.c":248:21)
#loc362 = loc("CWE510_Trapdoor__ip_based_logic_10.c":248:88)
#loc363 = loc("CWE510_Trapdoor__ip_based_logic_10.c":249:17)
#loc364 = loc("CWE510_Trapdoor__ip_based_logic_10.c":250:31)
#loc365 = loc("CWE510_Trapdoor__ip_based_logic_10.c":250:21)
#loc366 = loc("CWE510_Trapdoor__ip_based_logic_10.c":254:13)
#loc367 = loc("CWE510_Trapdoor__ip_based_logic_10.c":257:13)
#loc368 = loc("CWE510_Trapdoor__ip_based_logic_10.c":254:17)
#loc369 = loc("CWE510_Trapdoor__ip_based_logic_10.c":254:33)
#loc370 = loc("CWE510_Trapdoor__ip_based_logic_10.c":255:13)
#loc371 = loc("CWE510_Trapdoor__ip_based_logic_10.c":256:30)
#loc372 = loc("CWE510_Trapdoor__ip_based_logic_10.c":256:17)
#loc373 = loc("CWE510_Trapdoor__ip_based_logic_10.c":258:13)
#loc374 = loc("CWE510_Trapdoor__ip_based_logic_10.c":261:13)
#loc375 = loc("CWE510_Trapdoor__ip_based_logic_10.c":258:17)
#loc376 = loc("CWE510_Trapdoor__ip_based_logic_10.c":258:33)
#loc377 = loc("CWE510_Trapdoor__ip_based_logic_10.c":259:13)
#loc378 = loc("CWE510_Trapdoor__ip_based_logic_10.c":260:30)
#loc379 = loc("CWE510_Trapdoor__ip_based_logic_10.c":260:17)
#loc380 = loc(fused[#loc1, #loc2])
#loc381 = loc(fused[#loc3, #loc4])
#loc382 = loc(fused[#loc5, #loc6])
#loc383 = loc(fused[#loc7, #loc8])
#loc384 = loc(fused[#loc9, #loc10])
#loc385 = loc(fused[#loc11, #loc12])
#loc386 = loc(fused[#loc13, #loc14])
#loc387 = loc(fused[#loc15, #loc16])
#loc388 = loc(fused[#loc18, #loc19])
#loc389 = loc(fused[#loc20, #loc21])
#loc390 = loc(fused[#loc24, #loc25])
#loc391 = loc(fused[#loc27, #loc28])
#loc392 = loc(fused[#loc29, #loc30])
#loc393 = loc(fused[#loc31, #loc32])
#loc394 = loc(fused[#loc31, #loc33])
#loc395 = loc(fused[#loc34, #loc35])
#loc396 = loc(fused[#loc36, #loc37])
#loc397 = loc(fused[#loc38, #loc39])
#loc398 = loc(fused[#loc40, #loc41])
#loc399 = loc(fused[#loc43, #loc41])
#loc400 = loc(fused[#loc44, #loc45])
#loc401 = loc(fused[#loc46, #loc35])
#loc402 = loc(fused[#loc47, #loc48])
#loc403 = loc(fused[#loc54, #loc55])
#loc404 = loc(fused[#loc56, #loc57])
#loc405 = loc(fused[#loc58, #loc59])
#loc406 = loc(fused[#loc60, #loc57])
#loc407 = loc(fused[#loc62, #loc63])
#loc408 = loc(fused[#loc65, #loc66])
#loc409 = loc(fused[#loc67, #loc68])
#loc410 = loc(fused[#loc71, #loc69])
#loc411 = loc(fused[#loc75, #loc72])
#loc412 = loc(fused[#loc79, #loc80])
#loc413 = loc(fused[#loc81, #loc82])
#loc414 = loc(fused[#loc84, #loc85])
#loc415 = loc(fused[#loc86, #loc87])
#loc416 = loc(fused[#loc88, #loc89])
#loc417 = loc(fused[#loc90, #loc82])
#loc418 = loc(fused[#loc92, #loc93])
#loc419 = loc(fused[#loc96, #loc97])
#loc420 = loc(fused[#loc98, #loc93])
#loc421 = loc(fused[#loc104, #loc105])
#loc422 = loc(fused[#loc106, #loc107])
#loc423 = loc(fused[#loc108, #loc109])
#loc424 = loc(fused[#loc110, #loc107])
#loc425 = loc(fused[#loc112, #loc113])
#loc426 = loc(fused[#loc115, #loc116])
#loc427 = loc(fused[#loc117, #loc118])
#loc428 = loc(fused[#loc119, #loc120])
#loc429 = loc(fused[#loc122, #loc113])
#loc430 = loc(fused[#loc124, #loc125])
#loc431 = loc(fused[#loc126, #loc128])
#loc432 = loc(fused[#loc129, #loc130, #loc131, #loc125])
#loc433 = loc(fused[#loc132, #loc133])
#loc434 = loc(fused[#loc135, #loc136])
#loc435 = loc(fused[#loc138, #loc139])
#loc436 = loc(fused[#loc140, #loc133])
#loc437 = loc(fused[#loc142, #loc143])
#loc438 = loc(fused[#loc145, #loc146])
#loc439 = loc(fused[#loc148, #loc149])
#loc440 = loc(fused[#loc150, #loc143])
#loc441 = loc(fused[#loc152, #loc153])
#loc442 = loc(fused[#loc154, #loc155])
#loc443 = loc(fused[#loc156, #loc153])
#loc444 = loc(fused[#loc159, #loc160])
#loc445 = loc(fused[#loc161, #loc162])
#loc446 = loc(fused[#loc163, #loc160])
#loc447 = loc(fused[#loc166, #loc167])
#loc448 = loc(fused[#loc168, #loc169])
#loc449 = loc(fused[#loc170, #loc171])
#loc450 = loc(fused[#loc172, #loc173])
#loc451 = loc(fused[#loc175, #loc176])
#loc452 = loc(fused[#loc177, #loc178])
#loc453 = loc(fused[#loc179, #loc180])
#loc454 = loc(fused[#loc181, #loc182])
#loc455 = loc(fused[#loc183, #loc184])
#loc456 = loc(fused[#loc186, #loc187, #loc188, #loc184])
#loc457 = loc(fused[#loc190, #loc191])
#loc458 = loc(fused[#loc192, #loc193])
#loc459 = loc(fused[#loc199, #loc200])
#loc460 = loc(fused[#loc201, #loc202])
#loc461 = loc(fused[#loc203, #loc204])
#loc462 = loc(fused[#loc205, #loc202])
#loc463 = loc(fused[#loc207, #loc208])
#loc464 = loc(fused[#loc210, #loc211])
#loc465 = loc(fused[#loc212, #loc213])
#loc466 = loc(fused[#loc215, #loc214])
#loc467 = loc(fused[#loc217, #loc216])
#loc468 = loc(fused[#loc220, #loc221])
#loc469 = loc(fused[#loc222, #loc223])
#loc470 = loc(fused[#loc225, #loc226])
#loc471 = loc(fused[#loc227, #loc228])
#loc472 = loc(fused[#loc229, #loc230])
#loc473 = loc(fused[#loc231, #loc223])
#loc474 = loc(fused[#loc233, #loc234])
#loc475 = loc(fused[#loc237, #loc238])
#loc476 = loc(fused[#loc239, #loc234])
#loc477 = loc(fused[#loc245, #loc246])
#loc478 = loc(fused[#loc247, #loc248])
#loc479 = loc(fused[#loc249, #loc250])
#loc480 = loc(fused[#loc251, #loc248])
#loc481 = loc(fused[#loc253, #loc254])
#loc482 = loc(fused[#loc257, #loc258])
#loc483 = loc(fused[#loc260, #loc261])
#loc484 = loc(fused[#loc262, #loc254])
#loc485 = loc(fused[#loc265, #loc266])
#loc486 = loc(fused[#loc267, #loc268])
#loc487 = loc(fused[#loc269, #loc266])
#loc488 = loc(fused[#loc272, #loc273])
#loc489 = loc(fused[#loc274, #loc275])
#loc490 = loc(fused[#loc276, #loc273])
#loc491 = loc(fused[#loc279, #loc280])
#loc492 = loc(fused[#loc281, #loc282])
#loc493 = loc(fused[#loc283, #loc284])
#loc494 = loc(fused[#loc285, #loc286])
#loc495 = loc(fused[#loc287, #loc288])
#loc496 = loc(fused[#loc290, #loc288])
#loc497 = loc(fused[#loc291, #loc292])
#loc498 = loc(fused[#loc293, #loc294])
#loc499 = loc(fused[#loc300, #loc301])
#loc500 = loc(fused[#loc302, #loc303])
#loc501 = loc(fused[#loc304, #loc305])
#loc502 = loc(fused[#loc306, #loc303])
#loc503 = loc(fused[#loc308, #loc309])
#loc504 = loc(fused[#loc311, #loc312])
#loc505 = loc(fused[#loc313, #loc314])
#loc506 = loc(fused[#loc316, #loc315])
#loc507 = loc(fused[#loc318, #loc317])
#loc508 = loc(fused[#loc321, #loc322])
#loc509 = loc(fused[#loc323, #loc324])
#loc510 = loc(fused[#loc326, #loc327])
#loc511 = loc(fused[#loc328, #loc329])
#loc512 = loc(fused[#loc330, #loc331])
#loc513 = loc(fused[#loc332, #loc324])
#loc514 = loc(fused[#loc334, #loc335])
#loc515 = loc(fused[#loc338, #loc339])
#loc516 = loc(fused[#loc340, #loc335])
#loc517 = loc(fused[#loc346, #loc347])
#loc518 = loc(fused[#loc348, #loc349])
#loc519 = loc(fused[#loc350, #loc351])
#loc520 = loc(fused[#loc352, #loc349])
#loc521 = loc(fused[#loc354, #loc355])
#loc522 = loc(fused[#loc358, #loc359])
#loc523 = loc(fused[#loc361, #loc362])
#loc524 = loc(fused[#loc363, #loc355])
#loc525 = loc(fused[#loc366, #loc367])
#loc526 = loc(fused[#loc368, #loc369])
#loc527 = loc(fused[#loc370, #loc367])
#loc528 = loc(fused[#loc373, #loc374])
#loc529 = loc(fused[#loc375, #loc376])
#loc530 = loc(fused[#loc377, #loc374])
