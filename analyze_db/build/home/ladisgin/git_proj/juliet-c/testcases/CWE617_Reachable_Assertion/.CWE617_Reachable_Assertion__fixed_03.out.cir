!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc37 = loc("CWE617_Reachable_Assertion__fixed_03.c":94:10)
#loc38 = loc("CWE617_Reachable_Assertion__fixed_03.c":94:14)
#loc39 = loc("CWE617_Reachable_Assertion__fixed_03.c":94:20)
#loc40 = loc("CWE617_Reachable_Assertion__fixed_03.c":94:32)
#loc106 = loc(fused[#loc37, #loc38])
#loc107 = loc(fused[#loc39, #loc40])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_03.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc91)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__fixed_03.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__fixed_03_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_03_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc93)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc9)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    cir.scope {
      %4 = cir.const #cir.int<5> : !s32i loc(#loc13)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc14)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc96)
      cir.if %6 {
        %7 = cir.const #cir.int<5> : !s32i loc(#loc16)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc16)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc98)
      } loc(#loc97)
    } loc(#loc95)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc3)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc3)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc3)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc3)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc3)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc3)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc3)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc3)
          %11 = cir.const #cir.int<36> : !s32i loc(#loc3)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc3)
          %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc3)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc3)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc3)
        } loc(#loc3)
      } loc(#loc3)
    } loc(#loc3)
    cir.return loc(#loc5)
  } loc(#loc92)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_03_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc100)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc21)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc101)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc23)
    cir.return loc(#loc20)
  } loc(#loc99)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc102)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc103)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc31)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc32)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc33)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc34)
  cir.func @main(%arg0: !s32i loc(fused[#loc37, #loc38]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc39, #loc40])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc106)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc107)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc36)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc41)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc41)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc42)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc43)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc43)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc44)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc31)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc31)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc45)
    %8 = cir.get_global @CWE617_Reachable_Assertion__fixed_03_good : !cir.ptr<!cir.func<!void ()>> loc(#loc108)
    cir.call @CWE617_Reachable_Assertion__fixed_03_good() : () -> () loc(#loc46)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc32)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc33)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    %13 = cir.get_global @CWE617_Reachable_Assertion__fixed_03_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc109)
    cir.call @CWE617_Reachable_Assertion__fixed_03_bad() : () -> () loc(#loc50)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc34)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc53)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc110)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc110)
    cir.return %17 : !s32i loc(#loc110)
  } loc(#loc105)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc56)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc112)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc61)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc62)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    cir.scope {
      %4 = cir.const #cir.int<5> : !s32i loc(#loc66)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc67)
      %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc115)
      cir.if %6 {
        %7 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc55)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc55)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc71)
      } else {
        %7 = cir.const #cir.int<5> : !s32i loc(#loc72)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc73)
        %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc72)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc117)
      } loc(#loc116)
    } loc(#loc114)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc56)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc56)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc56)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc56)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc56)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc56)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc56)
          %11 = cir.const #cir.int<60> : !s32i loc(#loc56)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc56)
          %13 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc56)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc56)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc56)
        } loc(#loc56)
      } loc(#loc56)
    } loc(#loc56)
    cir.return loc(#loc58)
  } loc(#loc111)
  cir.global "private" constant cir_private dsolocal @".str.9" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc75)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc119)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc81)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    cir.scope {
      %4 = cir.const #cir.int<5> : !s32i loc(#loc85)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc86)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc122)
      cir.if %6 {
        %7 = cir.const #cir.int<5> : !s32i loc(#loc88)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc89)
        %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc88)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc124)
      } loc(#loc123)
    } loc(#loc121)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc75)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc75)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc75)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc75)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc75)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc75)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc75)
          %11 = cir.const #cir.int<75> : !s32i loc(#loc75)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc75)
          %13 = cir.get_global @".str.9" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc75)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc75)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc75)
        } loc(#loc75)
      } loc(#loc75)
    } loc(#loc75)
    cir.return loc(#loc77)
  } loc(#loc118)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_03.c":0:0)
#loc1 = loc("/usr/include/assert.h":67:1)
#loc2 = loc("/usr/include/assert.h":69:43)
#loc3 = loc("CWE617_Reachable_Assertion__fixed_03.c":36:5)
#loc4 = loc("CWE617_Reachable_Assertion__fixed_03.c":25:1)
#loc5 = loc("CWE617_Reachable_Assertion__fixed_03.c":37:1)
#loc6 = loc("CWE617_Reachable_Assertion__fixed_03.c":27:5)
#loc7 = loc("CWE617_Reachable_Assertion__fixed_03.c":27:9)
#loc8 = loc("CWE617_Reachable_Assertion__fixed_03.c":29:13)
#loc9 = loc("CWE617_Reachable_Assertion__fixed_03.c":29:12)
#loc10 = loc("CWE617_Reachable_Assertion__fixed_03.c":29:5)
#loc11 = loc("CWE617_Reachable_Assertion__fixed_03.c":30:5)
#loc12 = loc("CWE617_Reachable_Assertion__fixed_03.c":34:5)
#loc13 = loc("CWE617_Reachable_Assertion__fixed_03.c":30:8)
#loc14 = loc("CWE617_Reachable_Assertion__fixed_03.c":30:11)
#loc15 = loc("CWE617_Reachable_Assertion__fixed_03.c":31:5)
#loc16 = loc("CWE617_Reachable_Assertion__fixed_03.c":33:16)
#loc17 = loc("CWE617_Reachable_Assertion__fixed_03.c":33:29)
#loc18 = loc("CWE617_Reachable_Assertion__fixed_03.c":33:9)
#loc19 = loc("CWE617_Reachable_Assertion__fixed_03.c":78:1)
#loc20 = loc("CWE617_Reachable_Assertion__fixed_03.c":82:1)
#loc21 = loc("CWE617_Reachable_Assertion__fixed_03.c":80:5)
#loc22 = loc("CWE617_Reachable_Assertion__fixed_03.c":80:14)
#loc23 = loc("CWE617_Reachable_Assertion__fixed_03.c":81:5)
#loc24 = loc("CWE617_Reachable_Assertion__fixed_03.c":81:14)
#loc25 = loc("/usr/include/stdlib.h":575:1)
#loc26 = loc("/usr/include/stdlib.h":575:41)
#loc27 = loc("/usr/include/time.h":76:1)
#loc28 = loc("/usr/include/time.h":76:38)
#loc29 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc30 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc31 = loc("CWE617_Reachable_Assertion__fixed_03.c":99:15)
#loc32 = loc("CWE617_Reachable_Assertion__fixed_03.c":101:15)
#loc33 = loc("CWE617_Reachable_Assertion__fixed_03.c":104:15)
#loc34 = loc("CWE617_Reachable_Assertion__fixed_03.c":106:15)
#loc35 = loc("CWE617_Reachable_Assertion__fixed_03.c":94:1)
#loc36 = loc("CWE617_Reachable_Assertion__fixed_03.c":109:1)
#loc41 = loc("CWE617_Reachable_Assertion__fixed_03.c":95:1)
#loc42 = loc("CWE617_Reachable_Assertion__fixed_03.c":97:27)
#loc43 = loc("CWE617_Reachable_Assertion__fixed_03.c":97:22)
#loc44 = loc("CWE617_Reachable_Assertion__fixed_03.c":97:5)
#loc45 = loc("CWE617_Reachable_Assertion__fixed_03.c":99:5)
#loc46 = loc("CWE617_Reachable_Assertion__fixed_03.c":100:5)
#loc47 = loc("CWE617_Reachable_Assertion__fixed_03.c":100:47)
#loc48 = loc("CWE617_Reachable_Assertion__fixed_03.c":101:5)
#loc49 = loc("CWE617_Reachable_Assertion__fixed_03.c":104:5)
#loc50 = loc("CWE617_Reachable_Assertion__fixed_03.c":105:5)
#loc51 = loc("CWE617_Reachable_Assertion__fixed_03.c":105:46)
#loc52 = loc("CWE617_Reachable_Assertion__fixed_03.c":106:5)
#loc53 = loc("CWE617_Reachable_Assertion__fixed_03.c":108:12)
#loc54 = loc("CWE617_Reachable_Assertion__fixed_03.c":108:5)
#loc55 = loc("CWE617_Reachable_Assertion__fixed_03.c":52:19)
#loc56 = loc("CWE617_Reachable_Assertion__fixed_03.c":60:5)
#loc57 = loc("CWE617_Reachable_Assertion__fixed_03.c":44:1)
#loc58 = loc("CWE617_Reachable_Assertion__fixed_03.c":61:1)
#loc59 = loc("CWE617_Reachable_Assertion__fixed_03.c":46:5)
#loc60 = loc("CWE617_Reachable_Assertion__fixed_03.c":46:9)
#loc61 = loc("CWE617_Reachable_Assertion__fixed_03.c":48:13)
#loc62 = loc("CWE617_Reachable_Assertion__fixed_03.c":48:12)
#loc63 = loc("CWE617_Reachable_Assertion__fixed_03.c":48:5)
#loc64 = loc("CWE617_Reachable_Assertion__fixed_03.c":49:5)
#loc65 = loc("CWE617_Reachable_Assertion__fixed_03.c":58:5)
#loc66 = loc("CWE617_Reachable_Assertion__fixed_03.c":49:8)
#loc67 = loc("CWE617_Reachable_Assertion__fixed_03.c":49:11)
#loc68 = loc("CWE617_Reachable_Assertion__fixed_03.c":50:5)
#loc69 = loc("CWE617_Reachable_Assertion__fixed_03.c":53:5)
#loc70 = loc("CWE617_Reachable_Assertion__fixed_03.c":55:5)
#loc71 = loc("CWE617_Reachable_Assertion__fixed_03.c":52:9)
#loc72 = loc("CWE617_Reachable_Assertion__fixed_03.c":57:16)
#loc73 = loc("CWE617_Reachable_Assertion__fixed_03.c":57:29)
#loc74 = loc("CWE617_Reachable_Assertion__fixed_03.c":57:9)
#loc75 = loc("CWE617_Reachable_Assertion__fixed_03.c":75:5)
#loc76 = loc("CWE617_Reachable_Assertion__fixed_03.c":64:1)
#loc77 = loc("CWE617_Reachable_Assertion__fixed_03.c":76:1)
#loc78 = loc("CWE617_Reachable_Assertion__fixed_03.c":66:5)
#loc79 = loc("CWE617_Reachable_Assertion__fixed_03.c":66:9)
#loc80 = loc("CWE617_Reachable_Assertion__fixed_03.c":68:13)
#loc81 = loc("CWE617_Reachable_Assertion__fixed_03.c":68:12)
#loc82 = loc("CWE617_Reachable_Assertion__fixed_03.c":68:5)
#loc83 = loc("CWE617_Reachable_Assertion__fixed_03.c":69:5)
#loc84 = loc("CWE617_Reachable_Assertion__fixed_03.c":73:5)
#loc85 = loc("CWE617_Reachable_Assertion__fixed_03.c":69:8)
#loc86 = loc("CWE617_Reachable_Assertion__fixed_03.c":69:11)
#loc87 = loc("CWE617_Reachable_Assertion__fixed_03.c":70:5)
#loc88 = loc("CWE617_Reachable_Assertion__fixed_03.c":72:16)
#loc89 = loc("CWE617_Reachable_Assertion__fixed_03.c":72:29)
#loc90 = loc("CWE617_Reachable_Assertion__fixed_03.c":72:9)
#loc91 = loc(fused[#loc1, #loc2])
#loc92 = loc(fused[#loc4, #loc5])
#loc93 = loc(fused[#loc6, #loc7])
#loc94 = loc(fused[#loc10, #loc8])
#loc95 = loc(fused[#loc11, #loc12])
#loc96 = loc(fused[#loc13, #loc14])
#loc97 = loc(fused[#loc15, #loc12])
#loc98 = loc(fused[#loc18, #loc17])
#loc99 = loc(fused[#loc19, #loc20])
#loc100 = loc(fused[#loc21, #loc22])
#loc101 = loc(fused[#loc23, #loc24])
#loc102 = loc(fused[#loc25, #loc26])
#loc103 = loc(fused[#loc27, #loc28])
#loc104 = loc(fused[#loc29, #loc30])
#loc105 = loc(fused[#loc35, #loc36])
#loc108 = loc(fused[#loc46, #loc47])
#loc109 = loc(fused[#loc50, #loc51])
#loc110 = loc(fused[#loc54, #loc53])
#loc111 = loc(fused[#loc57, #loc58])
#loc112 = loc(fused[#loc59, #loc60])
#loc113 = loc(fused[#loc63, #loc61])
#loc114 = loc(fused[#loc64, #loc65])
#loc115 = loc(fused[#loc66, #loc67])
#loc116 = loc(fused[#loc68, #loc69, #loc70, #loc65])
#loc117 = loc(fused[#loc74, #loc73])
#loc118 = loc(fused[#loc76, #loc77])
#loc119 = loc(fused[#loc78, #loc79])
#loc120 = loc(fused[#loc82, #loc80])
#loc121 = loc(fused[#loc83, #loc84])
#loc122 = loc(fused[#loc85, #loc86])
#loc123 = loc(fused[#loc87, #loc84])
#loc124 = loc(fused[#loc90, #loc89])
