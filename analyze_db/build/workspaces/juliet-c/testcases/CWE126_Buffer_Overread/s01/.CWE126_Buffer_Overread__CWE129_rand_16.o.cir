!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_rand_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc122)
  cir.func private @printIntLine(!s32i) loc(#loc123)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc124)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_rand_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc126)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc17)
        cir.condition(%4) loc(#loc17)
      } do {
        cir.scope {
          %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %4 = cir.const #cir.int<1> : !s32i loc(#loc19)
          %5 = cir.binop(and, %3, %4) : !s32i loc(#loc19)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc19)
          %7 = cir.ternary(%6, true {
            %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc19)
            %11 = cir.const #cir.int<30> : !s32i loc(#loc19)
            %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc19)
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc19)
            %15 = cir.const #cir.int<15> : !s32i loc(#loc19)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc19)
            %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc19)
            %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc19)
            %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc19)
            cir.yield %20 : !u32i loc(#loc19)
          }, false {
            %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc19)
            %11 = cir.const #cir.int<30> : !s32i loc(#loc19)
            %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc19)
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc19)
            %15 = cir.const #cir.int<15> : !s32i loc(#loc19)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc19)
            %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc19)
            %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc19)
            %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc19)
            %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc19)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc19)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc19)
            %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc19)
            cir.yield %24 : !u32i loc(#loc19)
          }) : (!cir.bool) -> !u32i loc(#loc19)
          %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc19)
          cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc130)
          cir.break loc(#loc21)
        } loc(#loc129)
        cir.yield loc(#loc16)
      } loc(#loc128)
    } loc(#loc128)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc24)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc24)
        cir.condition(%4) loc(#loc24)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc134)
            %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc134)
            cir.store %4, %3 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc134)
            cir.scope {
              %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
              %6 = cir.const #cir.int<0> : !s32i loc(#loc33)
              %7 = cir.cmp(ge, %5, %6) : !s32i, !cir.bool loc(#loc136)
              cir.if %7 {
                %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
                %9 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc38)
                %10 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc38)
                %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc38)
                cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc39)
              } else {
                %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc7)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc7)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc40)
              } loc(#loc137)
            } loc(#loc135)
          } loc(#loc133)
          cir.break loc(#loc41)
        } loc(#loc132)
        cir.yield loc(#loc23)
      } loc(#loc131)
    } loc(#loc131)
    cir.return loc(#loc9)
  } loc(#loc125)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_rand_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc139)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc140)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    cir.return loc(#loc43)
  } loc(#loc138)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc48)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc142)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc54)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc143)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc58)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc58)
        cir.condition(%4) loc(#loc58)
      } do {
        cir.scope {
          %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %4 = cir.const #cir.int<1> : !s32i loc(#loc60)
          %5 = cir.binop(and, %3, %4) : !s32i loc(#loc60)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc60)
          %7 = cir.ternary(%6, true {
            %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc60)
            %11 = cir.const #cir.int<30> : !s32i loc(#loc60)
            %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc60)
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc60)
            %15 = cir.const #cir.int<15> : !s32i loc(#loc60)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc60)
            %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc60)
            %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc60)
            %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc60)
            cir.yield %20 : !u32i loc(#loc60)
          }, false {
            %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc60)
            %11 = cir.const #cir.int<30> : !s32i loc(#loc60)
            %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc60)
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc60)
            %15 = cir.const #cir.int<15> : !s32i loc(#loc60)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc60)
            %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc60)
            %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc60)
            %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc60)
            %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc60)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc60)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc60)
            %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc60)
            cir.yield %24 : !u32i loc(#loc60)
          }) : (!cir.bool) -> !u32i loc(#loc60)
          %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc60)
          cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc146)
          cir.break loc(#loc62)
        } loc(#loc145)
        cir.yield loc(#loc57)
      } loc(#loc144)
    } loc(#loc144)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc65)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc65)
        cir.condition(%4) loc(#loc65)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc150)
            %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc150)
            cir.store %4, %3 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc150)
            cir.scope {
              %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
              %6 = cir.const #cir.int<0> : !s32i loc(#loc74)
              %7 = cir.cmp(ge, %5, %6) : !s32i, !cir.bool loc(#loc152)
              %8 = cir.ternary(%7, true {
                %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc76)
                %10 = cir.const #cir.int<10> : !s32i loc(#loc77)
                %11 = cir.cmp(lt, %9, %10) : !s32i, !cir.bool loc(#loc153)
                %12 = cir.ternary(%11, true {
                  %13 = cir.const #true loc(#loc75)
                  cir.yield %13 : !cir.bool loc(#loc75)
                }, false {
                  %13 = cir.const #false loc(#loc75)
                  cir.yield %13 : !cir.bool loc(#loc75)
                }) : (!cir.bool) -> !cir.bool loc(#loc75)
                cir.yield %12 : !cir.bool loc(#loc75)
              }, false {
                %9 = cir.const #false loc(#loc75)
                cir.yield %9 : !cir.bool loc(#loc75)
              }) : (!cir.bool) -> !cir.bool loc(#loc75)
              cir.if %8 {
                %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc82)
                %10 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc83)
                %11 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %9 : !s32i), !cir.ptr<!s32i> loc(#loc83)
                %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc83)
                cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc84)
              } else {
                %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc48)
                %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc48)
                cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc85)
              } loc(#loc154)
            } loc(#loc151)
          } loc(#loc149)
          cir.break loc(#loc86)
        } loc(#loc148)
        cir.yield loc(#loc64)
      } loc(#loc147)
    } loc(#loc147)
    cir.return loc(#loc50)
  } loc(#loc141)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc156)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc92)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc157)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc96)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc96)
        cir.condition(%4) loc(#loc96)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<7> : !s32i loc(#loc98)
          cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc160)
          cir.break loc(#loc100)
        } loc(#loc159)
        cir.yield loc(#loc95)
      } loc(#loc158)
    } loc(#loc158)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc103)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc103)
        cir.condition(%4) loc(#loc103)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc164)
            %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc164)
            cir.store %4, %3 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc164)
            cir.scope {
              %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
              %6 = cir.const #cir.int<0> : !s32i loc(#loc112)
              %7 = cir.cmp(ge, %5, %6) : !s32i, !cir.bool loc(#loc166)
              cir.if %7 {
                %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                %9 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc117)
                %10 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc117)
                %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc117)
                cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc118)
              } else {
                %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc119)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc119)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc120)
              } loc(#loc167)
            } loc(#loc165)
          } loc(#loc163)
          cir.break loc(#loc121)
        } loc(#loc162)
        cir.yield loc(#loc102)
      } loc(#loc161)
    } loc(#loc161)
    cir.return loc(#loc88)
  } loc(#loc155)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_rand_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":45:27)
#loc8 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":22:1)
#loc9 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":50:1)
#loc10 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":24:5)
#loc11 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":24:9)
#loc12 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":26:13)
#loc13 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":26:12)
#loc14 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":26:5)
#loc15 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":27:5)
#loc16 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":32:5)
#loc17 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":27:11)
#loc18 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":28:5)
#loc19 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":30:16)
#loc20 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":30:9)
#loc21 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":31:9)
#loc22 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":33:5)
#loc23 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":49:5)
#loc24 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":33:11)
#loc25 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":34:5)
#loc26 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":35:9)
#loc27 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":47:9)
#loc28 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":36:13)
#loc29 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":36:34)
#loc30 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":39:13)
#loc31 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":46:13)
#loc32 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":39:17)
#loc33 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":39:25)
#loc34 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":40:13)
#loc35 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":42:13)
#loc36 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":44:13)
#loc37 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":41:37)
#loc38 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":41:30)
#loc39 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":41:17)
#loc40 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":45:17)
#loc41 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":48:9)
#loc42 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":118:1)
#loc43 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":122:1)
#loc44 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":120:5)
#loc45 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":120:13)
#loc46 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":121:5)
#loc47 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":121:13)
#loc48 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":79:27)
#loc49 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":57:1)
#loc50 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":84:1)
#loc51 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":59:5)
#loc52 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":59:9)
#loc53 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":61:13)
#loc54 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":61:12)
#loc55 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":61:5)
#loc56 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":62:5)
#loc57 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":67:5)
#loc58 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":62:11)
#loc59 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":63:5)
#loc60 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":65:16)
#loc61 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":65:9)
#loc62 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":66:9)
#loc63 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":68:5)
#loc64 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":83:5)
#loc65 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":68:11)
#loc66 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":69:5)
#loc67 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":70:9)
#loc68 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":81:9)
#loc69 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":71:13)
#loc70 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":71:34)
#loc71 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":73:13)
#loc72 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":80:13)
#loc73 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":73:17)
#loc74 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":73:25)
#loc75 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":73:27)
#loc76 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":73:30)
#loc77 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":73:38)
#loc78 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":73:40)
#loc79 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":74:13)
#loc80 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":76:13)
#loc81 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":78:13)
#loc82 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":75:37)
#loc83 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":75:30)
#loc84 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":75:17)
#loc85 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":79:17)
#loc86 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":82:9)
#loc87 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":87:1)
#loc88 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":116:1)
#loc89 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":89:5)
#loc90 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":89:9)
#loc91 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":91:13)
#loc92 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":91:12)
#loc93 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":91:5)
#loc94 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":92:5)
#loc95 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":98:5)
#loc96 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":92:11)
#loc97 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":93:5)
#loc98 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":96:16)
#loc99 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":96:9)
#loc100 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":97:9)
#loc101 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":99:5)
#loc102 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":115:5)
#loc103 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":99:11)
#loc104 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":100:5)
#loc105 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":101:9)
#loc106 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":113:9)
#loc107 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":102:13)
#loc108 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":102:34)
#loc109 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":105:13)
#loc110 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":112:13)
#loc111 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":105:17)
#loc112 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":105:25)
#loc113 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":106:13)
#loc114 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":108:13)
#loc115 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":110:13)
#loc116 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":107:37)
#loc117 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":107:30)
#loc118 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":107:17)
#loc119 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":111:27)
#loc120 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":111:17)
#loc121 = loc("CWE126_Buffer_Overread__CWE129_rand_16.c":114:9)
#loc122 = loc(fused[#loc1, #loc2])
#loc123 = loc(fused[#loc3, #loc4])
#loc124 = loc(fused[#loc5, #loc6])
#loc125 = loc(fused[#loc8, #loc9])
#loc126 = loc(fused[#loc10, #loc11])
#loc127 = loc(fused[#loc14, #loc12])
#loc128 = loc(fused[#loc15, #loc16])
#loc129 = loc(fused[#loc18, #loc16])
#loc130 = loc(fused[#loc20, #loc19])
#loc131 = loc(fused[#loc22, #loc23])
#loc132 = loc(fused[#loc25, #loc23])
#loc133 = loc(fused[#loc26, #loc27])
#loc134 = loc(fused[#loc28, #loc29])
#loc135 = loc(fused[#loc30, #loc31])
#loc136 = loc(fused[#loc32, #loc33])
#loc137 = loc(fused[#loc34, #loc35, #loc36, #loc31])
#loc138 = loc(fused[#loc42, #loc43])
#loc139 = loc(fused[#loc44, #loc45])
#loc140 = loc(fused[#loc46, #loc47])
#loc141 = loc(fused[#loc49, #loc50])
#loc142 = loc(fused[#loc51, #loc52])
#loc143 = loc(fused[#loc55, #loc53])
#loc144 = loc(fused[#loc56, #loc57])
#loc145 = loc(fused[#loc59, #loc57])
#loc146 = loc(fused[#loc61, #loc60])
#loc147 = loc(fused[#loc63, #loc64])
#loc148 = loc(fused[#loc66, #loc64])
#loc149 = loc(fused[#loc67, #loc68])
#loc150 = loc(fused[#loc69, #loc70])
#loc151 = loc(fused[#loc71, #loc72])
#loc152 = loc(fused[#loc73, #loc74])
#loc153 = loc(fused[#loc76, #loc78])
#loc154 = loc(fused[#loc79, #loc80, #loc81, #loc72])
#loc155 = loc(fused[#loc87, #loc88])
#loc156 = loc(fused[#loc89, #loc90])
#loc157 = loc(fused[#loc93, #loc91])
#loc158 = loc(fused[#loc94, #loc95])
#loc159 = loc(fused[#loc97, #loc95])
#loc160 = loc(fused[#loc99, #loc98])
#loc161 = loc(fused[#loc101, #loc102])
#loc162 = loc(fused[#loc104, #loc102])
#loc163 = loc(fused[#loc105, #loc106])
#loc164 = loc(fused[#loc107, #loc108])
#loc165 = loc(fused[#loc109, #loc110])
#loc166 = loc(fused[#loc111, #loc112])
#loc167 = loc(fused[#loc113, #loc114, #loc115, #loc110])
