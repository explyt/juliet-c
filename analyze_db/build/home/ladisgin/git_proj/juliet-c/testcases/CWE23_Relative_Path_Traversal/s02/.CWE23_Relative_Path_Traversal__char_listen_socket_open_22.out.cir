!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc23 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":56:18)
#loc24 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":56:25)
#loc193 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":153:23)
#loc194 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":153:30)
#loc211 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":169:23)
#loc212 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":169:30)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc234 = loc(fused[#loc23, #loc24])
#loc300 = loc(fused[#loc193, #loc194])
#loc306 = loc(fused[#loc211, #loc212])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE23_Relative_Path_Traversal/s02/CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" external @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_229badGlobalE : !s32i {alignment = 4 : i64} loc(#loc223)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc224)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc225)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc226)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc227)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc228)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc229)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc230)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc231)
  cir.func private @close(!s32i) -> !s32i loc(#loc232)
  cir.func @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_229badSourceEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc23, #loc24])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc234)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc22)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc25)
    cir.scope {
      %4 = cir.get_global @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_229badGlobalE : !cir.ptr<!s32i> loc(#loc223)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc28)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc28)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc238)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc239)
          %9 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc240)
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc241)
          %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc242)
          %12 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc243)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc39)
          %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc39)
          cir.store %14, %10 : !s32i, !cir.ptr<!s32i> loc(#loc241)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc41)
          %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc41)
          cir.store %16, %11 : !s32i, !cir.ptr<!s32i> loc(#loc242)
          %17 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc44)
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
          %19 = cir.call @strlen(%18) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc44)
          cir.store %19, %12 : !u64i, !cir.ptr<!u64i> loc(#loc243)
          cir.scope {
            cir.do {
              %20 = cir.const #cir.int<2> : !s32i loc(#loc48)
              %21 = cir.const #cir.int<1> : !u32i loc(#loc49)
              %22 = cir.cast(integral, %21 : !u32i), !s32i loc(#loc49)
              %23 = cir.const #cir.int<6> : !u32i loc(#loc50)
              %24 = cir.cast(integral, %23 : !u32i), !s32i loc(#loc50)
              %25 = cir.call @socket(%20, %22, %24) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc51)
              cir.store %25, %10 : !s32i, !cir.ptr<!s32i> loc(#loc245)
              cir.scope {
                %78 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc56)
                %79 = cir.const #cir.int<1> : !s32i loc(#loc57)
                %80 = cir.unary(minus, %79) : !s32i, !s32i loc(#loc57)
                %81 = cir.cmp(eq, %78, %80) : !s32i, !cir.bool loc(#loc247)
                cir.if %81 {
                  cir.break loc(#loc59)
                } loc(#loc248)
              } loc(#loc246)
              %26 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc249)
              %27 = cir.const #cir.int<0> : !s32i loc(#loc62)
              %28 = cir.const #cir.int<16> : !u64i loc(#loc250)
              cir.libc.memset %28 bytes from %26 set to %27 : !cir.ptr<!void>, !s32i, !u64i loc(#loc251)
              %29 = cir.const #cir.int<2> : !s32i loc(#loc67)
              %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc67)
              %31 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc68)
              cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc252)
              %32 = cir.const #cir.int<0> : !s32i loc(#loc70)
              %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc70)
              %34 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc71)
              %35 = cir.get_member %34[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc72)
              cir.store %33, %35 : !u32i, !cir.ptr<!u32i> loc(#loc253)
              %36 = cir.const #cir.int<27015> : !s32i loc(#loc74)
              %37 = cir.cast(integral, %36 : !s32i), !u16i loc(#loc74)
              %38 = cir.call @htons(%37) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc75)
              %39 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc76)
              cir.store %38, %39 : !u16i, !cir.ptr<!u16i> loc(#loc254)
              cir.scope {
                %78 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc81)
                %79 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc256)
                %80 = cir.const #cir.int<16> : !u64i loc(#loc257)
                %81 = cir.cast(integral, %80 : !u64i), !u32i loc(#loc257)
                %82 = cir.call @bind(%78, %79, %81) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc86)
                %83 = cir.const #cir.int<1> : !s32i loc(#loc87)
                %84 = cir.unary(minus, %83) : !s32i, !s32i loc(#loc87)
                %85 = cir.cmp(eq, %82, %84) : !s32i, !cir.bool loc(#loc258)
                cir.if %85 {
                  cir.break loc(#loc89)
                } loc(#loc259)
              } loc(#loc255)
              cir.scope {
                %78 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc92)
                %79 = cir.const #cir.int<5> : !s32i loc(#loc93)
                %80 = cir.call @listen(%78, %79) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc94)
                %81 = cir.const #cir.int<1> : !s32i loc(#loc95)
                %82 = cir.unary(minus, %81) : !s32i, !s32i loc(#loc95)
                %83 = cir.cmp(eq, %80, %82) : !s32i, !cir.bool loc(#loc261)
                cir.if %83 {
                  cir.break loc(#loc97)
                } loc(#loc262)
              } loc(#loc260)
              %40 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc98)
              %41 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc99)
              %42 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc100)
              %43 = cir.call @accept(%40, %41, %42) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc101)
              cir.store %43, %11 : !s32i, !cir.ptr<!s32i> loc(#loc263)
              cir.scope {
                %78 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc106)
                %79 = cir.const #cir.int<1> : !s32i loc(#loc107)
                %80 = cir.unary(minus, %79) : !s32i, !s32i loc(#loc107)
                %81 = cir.cmp(eq, %78, %80) : !s32i, !cir.bool loc(#loc265)
                cir.if %81 {
                  cir.break loc(#loc109)
                } loc(#loc266)
              } loc(#loc264)
              %44 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc110)
              %45 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
              %46 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc112)
              %47 = cir.ptr_stride(%45 : !cir.ptr<!s8i>, %46 : !u64i), !cir.ptr<!s8i> loc(#loc113)
              %48 = cir.cast(bitcast, %47 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc267)
              %49 = cir.const #cir.int<1> : !u64i loc(#loc268)
              %50 = cir.const #cir.int<4096> : !s32i loc(#loc118)
              %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc118)
              %52 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc119)
              %53 = cir.binop(sub, %51, %52) : !u64i loc(#loc269)
              %54 = cir.const #cir.int<1> : !s32i loc(#loc120)
              %55 = cir.cast(integral, %54 : !s32i), !u64i loc(#loc120)
              %56 = cir.binop(sub, %53, %55) : !u64i loc(#loc270)
              %57 = cir.binop(mul, %49, %56) : !u64i loc(#loc271)
              %58 = cir.const #cir.int<0> : !s32i loc(#loc122)
              %59 = cir.call @recv(%44, %48, %57, %58) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc123)
              %60 = cir.cast(integral, %59 : !s64i), !s32i loc(#loc123)
              cir.store %60, %7 : !s32i, !cir.ptr<!s32i> loc(#loc272)
              cir.scope {
                %78 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc128)
                %79 = cir.const #cir.int<1> : !s32i loc(#loc129)
                %80 = cir.unary(minus, %79) : !s32i, !s32i loc(#loc129)
                %81 = cir.cmp(eq, %78, %80) : !s32i, !cir.bool loc(#loc274)
                %82 = cir.ternary(%81, true {
                  %83 = cir.const #true loc(#loc130)
                  cir.yield %83 : !cir.bool loc(#loc130)
                }, false {
                  %83 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc131)
                  %84 = cir.const #cir.int<0> : !s32i loc(#loc132)
                  %85 = cir.cmp(eq, %83, %84) : !s32i, !cir.bool loc(#loc275)
                  %86 = cir.ternary(%85, true {
                    %87 = cir.const #true loc(#loc130)
                    cir.yield %87 : !cir.bool loc(#loc130)
                  }, false {
                    %87 = cir.const #false loc(#loc130)
                    cir.yield %87 : !cir.bool loc(#loc130)
                  }) : (!cir.bool) -> !cir.bool loc(#loc130)
                  cir.yield %86 : !cir.bool loc(#loc130)
                }) : (!cir.bool) -> !cir.bool loc(#loc130)
                cir.if %82 {
                  cir.break loc(#loc134)
                } loc(#loc276)
              } loc(#loc273)
              %61 = cir.const #cir.int<0> : !s8i loc(#loc135)
              %62 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc136)
              %63 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc137)
              %64 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc138)
              %65 = cir.cast(integral, %64 : !s32i), !u64i loc(#loc138)
              %66 = cir.const #cir.int<1> : !u64i loc(#loc277)
              %67 = cir.binop(div, %65, %66) : !u64i loc(#loc278)
              %68 = cir.binop(add, %63, %67) : !u64i loc(#loc279)
              %69 = cir.ptr_stride(%62 : !cir.ptr<!s8i>, %68 : !u64i), !cir.ptr<!s8i> loc(#loc141)
              cir.store %61, %69 : !s8i, !cir.ptr<!s8i> loc(#loc280)
              %70 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
              %71 = cir.const #cir.int<13> : !s8i loc(#loc143)
              %72 = cir.cast(integral, %71 : !s8i), !s32i loc(#loc143)
              %73 = cir.call @strchr(%70, %72) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc144)
              cir.store %73, %9 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc281)
              cir.scope {
                %78 = cir.load %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc149)
                %79 = cir.cast(ptr_to_bool, %78 : !cir.ptr<!s8i>), !cir.bool loc(#loc149)
                cir.if %79 {
                  %80 = cir.const #cir.int<0> : !s8i loc(#loc151)
                  %81 = cir.load deref %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc152)
                  cir.store %80, %81 : !s8i, !cir.ptr<!s8i> loc(#loc284)
                } loc(#loc283)
              } loc(#loc282)
              %74 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc154)
              %75 = cir.const #cir.int<10> : !s8i loc(#loc155)
              %76 = cir.cast(integral, %75 : !s8i), !s32i loc(#loc155)
              %77 = cir.call @strchr(%74, %76) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc156)
              cir.store %77, %9 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc285)
              cir.scope {
                %78 = cir.load %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc161)
                %79 = cir.cast(ptr_to_bool, %78 : !cir.ptr<!s8i>), !cir.bool loc(#loc161)
                cir.if %79 {
                  %80 = cir.const #cir.int<0> : !s8i loc(#loc163)
                  %81 = cir.load deref %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc164)
                  cir.store %80, %81 : !s8i, !cir.ptr<!s8i> loc(#loc288)
                } loc(#loc287)
              } loc(#loc286)
              cir.yield loc(#loc47)
            } while {
              %20 = cir.const #cir.int<0> : !s32i loc(#loc166)
              %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc166)
              cir.condition(%21) loc(#loc166)
            } loc(#loc244)
          } loc(#loc244)
          cir.scope {
            %20 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc169)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc170)
            %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc170)
            %23 = cir.cmp(ne, %20, %22) : !s32i, !cir.bool loc(#loc290)
            cir.if %23 {
              %24 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc172)
              %25 = cir.call @close(%24) : (!s32i) -> !s32i loc(#loc173)
            } loc(#loc291)
          } loc(#loc289)
          cir.scope {
            %20 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc176)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc177)
            %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc177)
            %23 = cir.cmp(ne, %20, %22) : !s32i, !cir.bool loc(#loc293)
            cir.if %23 {
              %24 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc179)
              %25 = cir.call @close(%24) : (!s32i) -> !s32i loc(#loc180)
            } loc(#loc294)
          } loc(#loc292)
        } loc(#loc237)
      } loc(#loc236)
    } loc(#loc235)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc181)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc295)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc295)
    cir.return %3 : !cir.ptr<!s8i> loc(#loc295)
  } loc(#loc233)
  cir.global "private" external @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_2214goodG2B1GlobalE : !s32i {alignment = 4 : i64} loc(#loc296)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc297)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc187)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc298)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"file.txt\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc190)
  cir.func @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_2214goodG2B1SourceEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc193, #loc194])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc300)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc192)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc195)
    cir.scope {
      %4 = cir.get_global @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_2214goodG2B1GlobalE : !cir.ptr<!s32i> loc(#loc296)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc198)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc198)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc187)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc187)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc202)
      } else {
        %7 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc203)
        %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc204)
        %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc190)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc190)
        %11 = cir.call @strcat(%8, %10) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc203)
      } loc(#loc302)
    } loc(#loc301)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc205)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc303)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc303)
    cir.return %3 : !cir.ptr<!s8i> loc(#loc303)
  } loc(#loc299)
  cir.global "private" external @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_2214goodG2B2GlobalE : !s32i {alignment = 4 : i64} loc(#loc304)
  cir.func @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_2214goodG2B2SourceEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc211, #loc212])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc306)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc210)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc213)
    cir.scope {
      %4 = cir.get_global @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_2214goodG2B2GlobalE : !cir.ptr<!s32i> loc(#loc304)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc216)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc216)
      cir.if %6 {
        %7 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc218)
        %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc219)
        %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc220)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc220)
        %11 = cir.call @strcat(%8, %10) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc218)
      } loc(#loc308)
    } loc(#loc307)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc221)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc309)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc309)
    cir.return %3 : !cir.ptr<!s8i> loc(#loc309)
  } loc(#loc305)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE23_Relative_Path_Traversal/s02/CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":0:0)
#loc1 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":54:1)
#loc2 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":54:12)
#loc3 = loc("/usr/include/string.h":407:1)
#loc4 = loc("/usr/include/string.h":408:33)
#loc5 = loc("/usr/include/sys/socket.h":102:1)
#loc6 = loc("/usr/include/sys/socket.h":102:62)
#loc7 = loc("/usr/include/netinet/in.h":404:1)
#loc8 = loc("/usr/include/netinet/in.h":405:40)
#loc9 = loc("/usr/include/sys/socket.h":112:1)
#loc10 = loc("/usr/include/sys/socket.h":113:6)
#loc11 = loc("/usr/include/sys/socket.h":296:1)
#loc12 = loc("/usr/include/sys/socket.h":296:39)
#loc13 = loc("/usr/include/sys/socket.h":306:1)
#loc14 = loc("/usr/include/sys/socket.h":307:38)
#loc15 = loc("/usr/include/sys/socket.h":145:1)
#loc16 = loc("/usr/include/sys/socket.h":145:68)
#loc17 = loc("/usr/include/string.h":226:1)
#loc18 = loc("/usr/include/string.h":227:50)
#loc19 = loc("/usr/include/unistd.h":358:1)
#loc20 = loc("/usr/include/unistd.h":358:27)
#loc21 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":56:1)
#loc22 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":141:1)
#loc25 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":57:1)
#loc26 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":58:5)
#loc27 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":139:5)
#loc28 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":58:8)
#loc29 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":59:5)
#loc30 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":60:9)
#loc31 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":138:9)
#loc32 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":65:13)
#loc33 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":65:17)
#loc34 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":66:13)
#loc35 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":66:32)
#loc36 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":67:13)
#loc37 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":67:19)
#loc38 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":68:13)
#loc39 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":68:35)
#loc40 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":69:13)
#loc41 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":69:35)
#loc42 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":70:13)
#loc43 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":70:41)
#loc44 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":70:30)
#loc45 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":70:37)
#loc46 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":71:13)
#loc47 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":123:21)
#loc48 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":81:39)
#loc49 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":81:48)
#loc50 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":81:61)
#loc51 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":81:32)
#loc52 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":81:17)
#loc53 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":81:72)
#loc54 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":82:17)
#loc55 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":85:17)
#loc56 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":82:21)
#loc57 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":82:37)
#loc58 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":83:17)
#loc59 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":84:21)
#loc60 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":86:24)
#loc61 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":86:25)
#loc62 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":86:34)
#loc63 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":86:37)
#loc64 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":86:51)
#loc65 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":86:17)
#loc66 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":86:52)
#loc67 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":87:38)
#loc68 = loc("/usr/include/netinet/in.h":249:5)
#loc69 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":87:17)
#loc70 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":88:43)
#loc71 = loc("/usr/include/netinet/in.h":251:20)
#loc72 = loc("/usr/include/netinet/in.h":33:15)
#loc73 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":88:17)
#loc74 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":89:42)
#loc75 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":89:36)
#loc76 = loc("/usr/include/netinet/in.h":250:15)
#loc77 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":89:17)
#loc78 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":89:50)
#loc79 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":90:17)
#loc80 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":93:17)
#loc81 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":90:26)
#loc82 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":90:58)
#loc83 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":90:59)
#loc84 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":90:68)
#loc85 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":90:82)
#loc86 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":90:21)
#loc87 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":90:88)
#loc88 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":91:17)
#loc89 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":92:21)
#loc90 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":94:17)
#loc91 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":97:17)
#loc92 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":94:28)
#loc93 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":94:42)
#loc94 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":94:21)
#loc95 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":94:61)
#loc96 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":95:17)
#loc97 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":96:21)
#loc98 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":98:39)
#loc99 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":98:53)
#loc100 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":98:59)
#loc101 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":98:32)
#loc102 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":98:17)
#loc103 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":98:63)
#loc104 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":99:17)
#loc105 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":102:17)
#loc106 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":99:21)
#loc107 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":99:37)
#loc108 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":100:17)
#loc109 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":101:21)
#loc110 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":104:35)
#loc111 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":104:58)
#loc112 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":104:65)
#loc113 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":104:63)
#loc114 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":104:49)
#loc115 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":104:72)
#loc116 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":104:75)
#loc117 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":104:86)
#loc118 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":104:91)
#loc119 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":104:106)
#loc120 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":104:116)
#loc121 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":104:117)
#loc122 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":104:120)
#loc123 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":104:30)
#loc124 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":104:17)
#loc125 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":104:121)
#loc126 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":105:17)
#loc127 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":108:17)
#loc128 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":105:21)
#loc129 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":105:35)
#loc130 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":105:48)
#loc131 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":105:51)
#loc132 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":105:65)
#loc133 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":106:17)
#loc134 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":107:21)
#loc135 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":110:61)
#loc136 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":110:17)
#loc137 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":110:22)
#loc138 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":110:32)
#loc139 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":110:45)
#loc140 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":110:56)
#loc141 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":110:57)
#loc142 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":112:34)
#loc143 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":112:40)
#loc144 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":112:27)
#loc145 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":112:17)
#loc146 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":112:44)
#loc147 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":113:17)
#loc148 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":116:17)
#loc149 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":113:21)
#loc150 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":114:17)
#loc151 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":115:32)
#loc152 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":115:22)
#loc153 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":115:21)
#loc154 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":117:34)
#loc155 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":117:40)
#loc156 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":117:27)
#loc157 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":117:17)
#loc158 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":117:44)
#loc159 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":118:17)
#loc160 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":121:17)
#loc161 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":118:21)
#loc162 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":119:17)
#loc163 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":120:32)
#loc164 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":120:22)
#loc165 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":120:21)
#loc166 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":123:20)
#loc167 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":124:13)
#loc168 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":127:13)
#loc169 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":124:17)
#loc170 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":124:33)
#loc171 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":125:13)
#loc172 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":126:30)
#loc173 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":126:17)
#loc174 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":128:13)
#loc175 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":131:13)
#loc176 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":128:17)
#loc177 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":128:33)
#loc178 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":129:13)
#loc179 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":130:30)
#loc180 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":130:17)
#loc181 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":140:12)
#loc182 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":140:5)
#loc183 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":149:1)
#loc184 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":149:12)
#loc185 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc186 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc187 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":158:19)
#loc188 = loc("/usr/include/string.h":149:1)
#loc189 = loc("/usr/include/string.h":150:14)
#loc190 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":163:22)
#loc191 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":153:1)
#loc192 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":166:1)
#loc195 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":154:1)
#loc196 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":155:5)
#loc197 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":164:5)
#loc198 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":155:8)
#loc199 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":156:5)
#loc200 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":159:5)
#loc201 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":161:5)
#loc202 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":158:9)
#loc203 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":163:9)
#loc204 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":163:16)
#loc205 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":165:12)
#loc206 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":165:5)
#loc207 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":150:1)
#loc208 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":150:12)
#loc209 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":169:1)
#loc210 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":177:1)
#loc213 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":170:1)
#loc214 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":171:5)
#loc215 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":175:5)
#loc216 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":171:8)
#loc217 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":172:5)
#loc218 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":174:9)
#loc219 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":174:16)
#loc220 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":174:22)
#loc221 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":176:12)
#loc222 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_22b.cpp":176:5)
#loc223 = loc(fused[#loc1, #loc2])
#loc224 = loc(fused[#loc3, #loc4])
#loc225 = loc(fused[#loc5, #loc6])
#loc226 = loc(fused[#loc7, #loc8])
#loc227 = loc(fused[#loc9, #loc10])
#loc228 = loc(fused[#loc11, #loc12])
#loc229 = loc(fused[#loc13, #loc14])
#loc230 = loc(fused[#loc15, #loc16])
#loc231 = loc(fused[#loc17, #loc18])
#loc232 = loc(fused[#loc19, #loc20])
#loc233 = loc(fused[#loc21, #loc22])
#loc235 = loc(fused[#loc26, #loc27])
#loc236 = loc(fused[#loc29, #loc27])
#loc237 = loc(fused[#loc30, #loc31])
#loc238 = loc(fused[#loc32, #loc33])
#loc239 = loc(fused[#loc34, #loc35])
#loc240 = loc(fused[#loc36, #loc37])
#loc241 = loc(fused[#loc38, #loc39])
#loc242 = loc(fused[#loc40, #loc41])
#loc243 = loc(fused[#loc42, #loc43])
#loc244 = loc(fused[#loc46, #loc47])
#loc245 = loc(fused[#loc52, #loc53])
#loc246 = loc(fused[#loc54, #loc55])
#loc247 = loc(fused[#loc56, #loc57])
#loc248 = loc(fused[#loc58, #loc55])
#loc249 = loc(fused[#loc60, #loc61])
#loc250 = loc(fused[#loc63, #loc64])
#loc251 = loc(fused[#loc65, #loc66])
#loc252 = loc(fused[#loc69, #loc67])
#loc253 = loc(fused[#loc73, #loc70])
#loc254 = loc(fused[#loc77, #loc78])
#loc255 = loc(fused[#loc79, #loc80])
#loc256 = loc(fused[#loc82, #loc83])
#loc257 = loc(fused[#loc84, #loc85])
#loc258 = loc(fused[#loc86, #loc87])
#loc259 = loc(fused[#loc88, #loc80])
#loc260 = loc(fused[#loc90, #loc91])
#loc261 = loc(fused[#loc94, #loc95])
#loc262 = loc(fused[#loc96, #loc91])
#loc263 = loc(fused[#loc102, #loc103])
#loc264 = loc(fused[#loc104, #loc105])
#loc265 = loc(fused[#loc106, #loc107])
#loc266 = loc(fused[#loc108, #loc105])
#loc267 = loc(fused[#loc114, #loc115])
#loc268 = loc(fused[#loc116, #loc117])
#loc269 = loc(fused[#loc118, #loc119])
#loc270 = loc(fused[#loc118, #loc120])
#loc271 = loc(fused[#loc116, #loc121])
#loc272 = loc(fused[#loc124, #loc125])
#loc273 = loc(fused[#loc126, #loc127])
#loc274 = loc(fused[#loc128, #loc129])
#loc275 = loc(fused[#loc131, #loc132])
#loc276 = loc(fused[#loc133, #loc127])
#loc277 = loc(fused[#loc139, #loc140])
#loc278 = loc(fused[#loc138, #loc140])
#loc279 = loc(fused[#loc137, #loc140])
#loc280 = loc(fused[#loc136, #loc135])
#loc281 = loc(fused[#loc145, #loc146])
#loc282 = loc(fused[#loc147, #loc148])
#loc283 = loc(fused[#loc150, #loc148])
#loc284 = loc(fused[#loc153, #loc151])
#loc285 = loc(fused[#loc157, #loc158])
#loc286 = loc(fused[#loc159, #loc160])
#loc287 = loc(fused[#loc162, #loc160])
#loc288 = loc(fused[#loc165, #loc163])
#loc289 = loc(fused[#loc167, #loc168])
#loc290 = loc(fused[#loc169, #loc170])
#loc291 = loc(fused[#loc171, #loc168])
#loc292 = loc(fused[#loc174, #loc175])
#loc293 = loc(fused[#loc176, #loc177])
#loc294 = loc(fused[#loc178, #loc175])
#loc295 = loc(fused[#loc182, #loc181])
#loc296 = loc(fused[#loc183, #loc184])
#loc297 = loc(fused[#loc185, #loc186])
#loc298 = loc(fused[#loc188, #loc189])
#loc299 = loc(fused[#loc191, #loc192])
#loc301 = loc(fused[#loc196, #loc197])
#loc302 = loc(fused[#loc199, #loc200, #loc201, #loc197])
#loc303 = loc(fused[#loc206, #loc205])
#loc304 = loc(fused[#loc207, #loc208])
#loc305 = loc(fused[#loc209, #loc210])
#loc307 = loc(fused[#loc214, #loc215])
#loc308 = loc(fused[#loc217, #loc215])
#loc309 = loc(fused[#loc222, #loc221])
