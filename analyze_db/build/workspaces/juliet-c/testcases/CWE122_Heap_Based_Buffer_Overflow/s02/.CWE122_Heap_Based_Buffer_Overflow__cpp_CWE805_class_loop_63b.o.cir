!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr2 = #cir<extra({nothrow = #cir.nothrow})>
#loc1 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":24:14)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":24:31)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":56:18)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":56:35)
!ty_TwoIntsClass = !cir.record<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
#loc120 = loc(fused[#loc7, #loc8])
#loc141 = loc(fused[#loc64, #loc65])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s02/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func linkonce_odr @_ZN12TwoIntsClassaSERKS_(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7), %arg1: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) -> !cir.ptr<!ty_TwoIntsClass> extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc1)
    %1 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["", init, const] {alignment = 8 : i64} loc(#loc1)
    %2 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["__retval"] {alignment = 8 : i64} loc(#loc1)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc1)
    cir.store %arg1, %1 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc1)
    %3 = cir.load deref %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc1)
    %4 = cir.get_member %3[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc2)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc1)
    %6 = cir.get_member %5[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc2)
    %7 = cir.const #cir.int<8> : !u64i loc(#loc1)
    %8 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc2)
    %9 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc2)
    cir.libc.memcpy %7 bytes from %9 to %8 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc1)
    cir.store %3, %2 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc1)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc1)
    cir.return %10 : !cir.ptr<!ty_TwoIntsClass> loc(#loc1)
  } loc(#loc1)
  cir.func private @printIntLine(!s32i) loc(#loc118)
  cir.func @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_637badSinkEPP12TwoIntsClass(%arg0: !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty_TwoIntsClass>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc120)
    %1 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data", init] {alignment = 8 : i64} loc(#loc121)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty_TwoIntsClass>>> loc(#loc11)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.ptr<!ty_TwoIntsClass>>>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc10)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc12)
    cir.store %3, %1 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc121)
    cir.scope {
      %4 = cir.alloca !cir.array<!ty_TwoIntsClass x 100>, !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>, ["source"] {alignment = 16 : i64} loc(#loc123)
      cir.scope {
        %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc125)
        cir.scope {
          %6 = cir.const #cir.int<0> : !s32i loc(#loc23)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc23)
          cir.store %7, %5 : !u64i, !cir.ptr<!u64i> loc(#loc127)
          cir.for : cond {
            %8 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc25)
            %9 = cir.const #cir.int<100> : !s32i loc(#loc26)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc26)
            %11 = cir.cmp(lt, %8, %10) : !u64i, !cir.bool loc(#loc128)
            cir.condition(%11) loc(#loc128)
          } body {
            cir.scope {
              %8 = cir.const #cir.int<0> : !s32i loc(#loc28)
              %9 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc29)
              %10 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc30)
              %11 = cir.ptr_stride(%10 : !cir.ptr<!ty_TwoIntsClass>, %9 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc30)
              %12 = cir.get_member %11[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc2)
              cir.store %8, %12 : !s32i, !cir.ptr<!s32i> loc(#loc130)
              %13 = cir.const #cir.int<0> : !s32i loc(#loc31)
              %14 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc32)
              %15 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc33)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!ty_TwoIntsClass>, %14 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc33)
              %17 = cir.get_member %16[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc34)
              cir.store %13, %17 : !s32i, !cir.ptr<!s32i> loc(#loc131)
            } loc(#loc129)
            cir.yield loc(#loc22)
          } step {
            %8 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc35)
            %9 = cir.unary(inc, %8) : !u64i, !u64i loc(#loc36)
            cir.store %9, %5 : !u64i, !cir.ptr<!u64i> loc(#loc132)
            cir.yield loc(#loc126)
          } loc(#loc126)
        } loc(#loc126)
      } loc(#loc124)
      cir.scope {
        %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc134)
        cir.scope {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc43)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc43)
          cir.store %13, %5 : !u64i, !cir.ptr<!u64i> loc(#loc136)
          cir.for : cond {
            %14 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc45)
            %15 = cir.const #cir.int<100> : !s32i loc(#loc46)
            %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc46)
            %17 = cir.cmp(lt, %14, %16) : !u64i, !cir.bool loc(#loc137)
            cir.condition(%17) loc(#loc137)
          } body {
            cir.scope {
              %14 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc48)
              %15 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc49)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!ty_TwoIntsClass>, %14 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc49)
              %17 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc50)
              %18 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc51)
              %19 = cir.ptr_stride(%17 : !cir.ptr<!ty_TwoIntsClass>, %18 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc52)
              %20 = cir.call @_ZN12TwoIntsClassaSERKS_(%19, %16) : (!cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!ty_TwoIntsClass>) -> !cir.ptr<!ty_TwoIntsClass> extra(#fn_attr2) loc(#loc53)
            } loc(#loc138)
            cir.yield loc(#loc42)
          } step {
            %14 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc54)
            %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc55)
            cir.store %15, %5 : !u64i, !cir.ptr<!u64i> loc(#loc139)
            cir.yield loc(#loc135)
          } loc(#loc135)
        } loc(#loc135)
        %6 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc56)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc57)
        %8 = cir.ptr_stride(%6 : !cir.ptr<!ty_TwoIntsClass>, %7 : !s32i), !cir.ptr<!ty_TwoIntsClass> loc(#loc58)
        %9 = cir.get_member %8[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc2)
        %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc59)
        cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc60)
        %11 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc61)
        cir.delete.array %11 : <!ty_TwoIntsClass> loc(#loc61)
      } loc(#loc133)
    } loc(#loc122)
    cir.return loc(#loc6)
  } loc(#loc119)
  cir.func @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_6311goodG2BSinkEPP12TwoIntsClass(%arg0: !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(fused[#loc64, #loc65])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty_TwoIntsClass>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc141)
    %1 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data", init] {alignment = 8 : i64} loc(#loc142)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty_TwoIntsClass>>> loc(#loc68)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.ptr<!ty_TwoIntsClass>>>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc67)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc69)
    cir.store %3, %1 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc142)
    cir.scope {
      %4 = cir.alloca !cir.array<!ty_TwoIntsClass x 100>, !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>, ["source"] {alignment = 16 : i64} loc(#loc144)
      cir.scope {
        %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc146)
        cir.scope {
          %6 = cir.const #cir.int<0> : !s32i loc(#loc80)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc80)
          cir.store %7, %5 : !u64i, !cir.ptr<!u64i> loc(#loc148)
          cir.for : cond {
            %8 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc82)
            %9 = cir.const #cir.int<100> : !s32i loc(#loc83)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc83)
            %11 = cir.cmp(lt, %8, %10) : !u64i, !cir.bool loc(#loc149)
            cir.condition(%11) loc(#loc149)
          } body {
            cir.scope {
              %8 = cir.const #cir.int<0> : !s32i loc(#loc85)
              %9 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc86)
              %10 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc87)
              %11 = cir.ptr_stride(%10 : !cir.ptr<!ty_TwoIntsClass>, %9 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc87)
              %12 = cir.get_member %11[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc2)
              cir.store %8, %12 : !s32i, !cir.ptr<!s32i> loc(#loc151)
              %13 = cir.const #cir.int<0> : !s32i loc(#loc88)
              %14 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc89)
              %15 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc90)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!ty_TwoIntsClass>, %14 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc90)
              %17 = cir.get_member %16[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc34)
              cir.store %13, %17 : !s32i, !cir.ptr<!s32i> loc(#loc152)
            } loc(#loc150)
            cir.yield loc(#loc79)
          } step {
            %8 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc91)
            %9 = cir.unary(inc, %8) : !u64i, !u64i loc(#loc92)
            cir.store %9, %5 : !u64i, !cir.ptr<!u64i> loc(#loc153)
            cir.yield loc(#loc147)
          } loc(#loc147)
        } loc(#loc147)
      } loc(#loc145)
      cir.scope {
        %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc155)
        cir.scope {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc99)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc99)
          cir.store %13, %5 : !u64i, !cir.ptr<!u64i> loc(#loc157)
          cir.for : cond {
            %14 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc101)
            %15 = cir.const #cir.int<100> : !s32i loc(#loc102)
            %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc102)
            %17 = cir.cmp(lt, %14, %16) : !u64i, !cir.bool loc(#loc158)
            cir.condition(%17) loc(#loc158)
          } body {
            cir.scope {
              %14 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc104)
              %15 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc105)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!ty_TwoIntsClass>, %14 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc105)
              %17 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc106)
              %18 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc107)
              %19 = cir.ptr_stride(%17 : !cir.ptr<!ty_TwoIntsClass>, %18 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc108)
              %20 = cir.call @_ZN12TwoIntsClassaSERKS_(%19, %16) : (!cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!ty_TwoIntsClass>) -> !cir.ptr<!ty_TwoIntsClass> extra(#fn_attr2) loc(#loc109)
            } loc(#loc159)
            cir.yield loc(#loc98)
          } step {
            %14 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc110)
            %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc111)
            cir.store %15, %5 : !u64i, !cir.ptr<!u64i> loc(#loc160)
            cir.yield loc(#loc156)
          } loc(#loc156)
        } loc(#loc156)
        %6 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc112)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc113)
        %8 = cir.ptr_stride(%6 : !cir.ptr<!ty_TwoIntsClass>, %7 : !s32i), !cir.ptr<!ty_TwoIntsClass> loc(#loc114)
        %9 = cir.get_member %8[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc2)
        %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc115)
        cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc116)
        %11 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc117)
        cir.delete.array %11 : <!ty_TwoIntsClass> loc(#loc117)
      } loc(#loc154)
    } loc(#loc143)
    cir.return loc(#loc63)
  } loc(#loc140)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s02/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":0:0)
#loc2 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":24:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":49:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":26:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":26:28)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":25:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":26:27)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":27:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":48:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":28:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":28:32)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":29:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":37:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":30:13)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":30:20)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":32:13)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":36:13)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":32:22)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":32:18)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":32:25)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":32:29)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":33:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":34:36)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":34:24)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":34:17)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":35:36)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":35:24)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":35:17)
#loc34 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":32:35)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":32:34)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":38:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":47:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":39:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":39:20)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":41:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":44:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":41:22)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":41:18)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":41:25)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":41:29)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":42:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":43:34)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":43:27)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":43:17)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":43:22)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":43:23)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":43:25)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":41:35)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":41:34)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":45:26)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":45:31)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":45:32)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":45:34)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":45:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":46:23)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":56:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":81:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":58:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":58:28)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":57:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":58:27)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":59:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":80:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":60:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":60:32)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":61:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":69:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":62:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":62:20)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":64:13)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":68:13)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":64:22)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":64:18)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":64:25)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":64:29)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":65:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":66:36)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":66:24)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":66:17)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":67:36)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":67:24)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":67:17)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":64:35)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":64:34)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":70:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":79:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":71:13)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":71:20)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":73:13)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":76:13)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":73:22)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":73:18)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":73:25)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":73:29)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":74:13)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":75:34)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":75:27)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":75:17)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":75:22)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":75:23)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":75:25)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":73:35)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":73:34)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":77:26)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":77:31)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":77:32)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":77:34)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":77:13)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_63b.cpp":78:23)
#loc118 = loc(fused[#loc3, #loc4])
#loc119 = loc(fused[#loc5, #loc6])
#loc121 = loc(fused[#loc9, #loc10])
#loc122 = loc(fused[#loc13, #loc14])
#loc123 = loc(fused[#loc15, #loc16])
#loc124 = loc(fused[#loc17, #loc18])
#loc125 = loc(fused[#loc19, #loc20])
#loc126 = loc(fused[#loc21, #loc22])
#loc127 = loc(fused[#loc24, #loc23])
#loc128 = loc(fused[#loc25, #loc26])
#loc129 = loc(fused[#loc27, #loc22])
#loc130 = loc(fused[#loc30, #loc28])
#loc131 = loc(fused[#loc33, #loc31])
#loc132 = loc(fused[#loc36, #loc35])
#loc133 = loc(fused[#loc37, #loc38])
#loc134 = loc(fused[#loc39, #loc40])
#loc135 = loc(fused[#loc41, #loc42])
#loc136 = loc(fused[#loc44, #loc43])
#loc137 = loc(fused[#loc45, #loc46])
#loc138 = loc(fused[#loc47, #loc42])
#loc139 = loc(fused[#loc55, #loc54])
#loc140 = loc(fused[#loc62, #loc63])
#loc142 = loc(fused[#loc66, #loc67])
#loc143 = loc(fused[#loc70, #loc71])
#loc144 = loc(fused[#loc72, #loc73])
#loc145 = loc(fused[#loc74, #loc75])
#loc146 = loc(fused[#loc76, #loc77])
#loc147 = loc(fused[#loc78, #loc79])
#loc148 = loc(fused[#loc81, #loc80])
#loc149 = loc(fused[#loc82, #loc83])
#loc150 = loc(fused[#loc84, #loc79])
#loc151 = loc(fused[#loc87, #loc85])
#loc152 = loc(fused[#loc90, #loc88])
#loc153 = loc(fused[#loc92, #loc91])
#loc154 = loc(fused[#loc93, #loc94])
#loc155 = loc(fused[#loc95, #loc96])
#loc156 = loc(fused[#loc97, #loc98])
#loc157 = loc(fused[#loc100, #loc99])
#loc158 = loc(fused[#loc101, #loc102])
#loc159 = loc(fused[#loc103, #loc98])
#loc160 = loc(fused[#loc111, #loc110])
