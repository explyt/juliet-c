!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":22:21)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":22:34)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":66:25)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":66:38)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":46:25)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":46:38)
#loc93 = loc(fused[#loc7, #loc8])
#loc106 = loc(fused[#loc39, #loc40])
#loc117 = loc(fused[#loc69, #loc70])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc90)
  cir.func private  @printUnsignedLine(!u32i) loc(#loc91)
  cir.func internal private  @badSink(%arg0: !u32i loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc93)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc9)
    cir.scope {
      %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc95)
      %2 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc14)
      %3 = cir.unary(inc, %2) : !u32i, !u32i loc(#loc14)
      cir.store %3, %0 : !u32i, !cir.ptr<!u32i> loc(#loc96)
      %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc13)
      cir.store %4, %1 : !u32i, !cir.ptr<!u32i> loc(#loc95)
      %5 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc16)
      cir.call @printUnsignedLine(%5) : (!u32i) -> () loc(#loc17)
    } loc(#loc94)
    cir.return loc(#loc6)
  } loc(#loc92)
  cir.func no_proto  @CWE190_Integer_Overflow__unsigned_int_rand_preinc_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc98)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc22)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc22)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc99)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc24)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc24)
    %7 = cir.ternary(%6, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc24)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc24)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc24)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc24)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc24)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc24)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc24)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc24)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc24)
      cir.yield %22 : !u32i loc(#loc24)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc24)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc24)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc24)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc24)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc24)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc24)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc24)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc24)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc24)
      %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc24)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc24)
      %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc24)
      %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc24)
      cir.yield %26 : !u32i loc(#loc24)
    }) : (!cir.bool) -> !u32i loc(#loc24)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc24)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc24)
    cir.store %9, %0 : !u32i, !cir.ptr<!u32i> loc(#loc100)
    %10 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc26)
    cir.call @badSink(%10) : (!u32i) -> () loc(#loc27)
    cir.return loc(#loc19)
  } loc(#loc97)
  cir.func no_proto  @CWE190_Integer_Overflow__unsigned_int_rand_preinc_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc102)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc103)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc101)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc104)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc36)
  cir.func internal private  @goodB2GSink(%arg0: !u32i loc(fused[#loc39, #loc40])) extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc106)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc41)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc44)
      %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc45)
      %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc45)
      %4 = cir.const #cir.int<2> : !u32i loc(#loc45)
      %5 = cir.binop(mul, %3, %4) : !u32i loc(#loc45)
      %6 = cir.const #cir.int<1> : !u32i loc(#loc45)
      %7 = cir.binop(add, %5, %6) : !u32i loc(#loc45)
      %8 = cir.cmp(lt, %1, %7) : !u32i, !s32i loc(#loc108)
      %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc46)
      cir.if %9 {
        %10 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc110)
        %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc52)
        %12 = cir.unary(inc, %11) : !u32i, !u32i loc(#loc52)
        cir.store %12, %0 : !u32i, !cir.ptr<!u32i> loc(#loc111)
        %13 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc51)
        cir.store %13, %10 : !u32i, !cir.ptr<!u32i> loc(#loc110)
        %14 = cir.load %10 : !cir.ptr<!u32i>, !u32i loc(#loc54)
        cir.call @printUnsignedLine(%14) : (!u32i) -> () loc(#loc55)
      } else {
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc36)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc36)
        cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc56)
      } loc(#loc109)
    } loc(#loc107)
    cir.return loc(#loc38)
  } loc(#loc105)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc113)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc61)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc61)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc114)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc63)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc63)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc63)
    %7 = cir.ternary(%6, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc63)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc63)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc63)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc63)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc63)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc63)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc63)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc63)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc63)
      cir.yield %22 : !u32i loc(#loc63)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc63)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc63)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc63)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc63)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc63)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc63)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc63)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc63)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc63)
      %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc63)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc63)
      %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc63)
      %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc63)
      cir.yield %26 : !u32i loc(#loc63)
    }) : (!cir.bool) -> !u32i loc(#loc63)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc63)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc63)
    cir.store %9, %0 : !u32i, !cir.ptr<!u32i> loc(#loc115)
    %10 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc65)
    cir.call @goodB2GSink(%10) : (!u32i) -> () loc(#loc66)
    cir.return loc(#loc58)
  } loc(#loc112)
  cir.func internal private  @goodG2BSink(%arg0: !u32i loc(fused[#loc69, #loc70])) extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc117)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc71)
    cir.scope {
      %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc119)
      %2 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc76)
      %3 = cir.unary(inc, %2) : !u32i, !u32i loc(#loc76)
      cir.store %3, %0 : !u32i, !cir.ptr<!u32i> loc(#loc120)
      %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc75)
      cir.store %4, %1 : !u32i, !cir.ptr<!u32i> loc(#loc119)
      %5 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc78)
      cir.call @printUnsignedLine(%5) : (!u32i) -> () loc(#loc79)
    } loc(#loc118)
    cir.return loc(#loc68)
  } loc(#loc116)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc122)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc84)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc84)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc123)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc86)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc86)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc124)
    %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc88)
    cir.call @goodG2BSink(%5) : (!u32i) -> () loc(#loc89)
    cir.return loc(#loc81)
  } loc(#loc121)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":30:1)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":23:1)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":24:5)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":29:5)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":27:9)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":27:31)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":26:9)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":26:11)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":28:27)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":28:9)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":32:1)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":39:1)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":34:5)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":34:18)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":35:12)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":35:5)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":37:26)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":37:5)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":38:13)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":38:5)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":90:1)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":94:1)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":92:5)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":92:13)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":93:5)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":93:13)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":77:19)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":66:1)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":79:1)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":67:1)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":69:5)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":78:5)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":69:9)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":69:16)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":69:14)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":70:5)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":74:5)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":76:5)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":72:9)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":72:31)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":71:9)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":71:11)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":73:27)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":73:9)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":77:9)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":81:1)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":88:1)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":83:5)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":83:18)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":84:12)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":84:5)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":86:26)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":86:5)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":87:17)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":87:5)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":46:1)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":54:1)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":47:1)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":48:5)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":53:5)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":51:9)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":51:31)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":50:9)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":50:11)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":52:27)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":52:9)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":56:1)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":63:1)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":58:5)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":58:18)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":59:12)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":59:5)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":61:12)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":61:5)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":62:17)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_41.c":62:5)
#loc90 = loc(fused[#loc1, #loc2])
#loc91 = loc(fused[#loc3, #loc4])
#loc92 = loc(fused[#loc5, #loc6])
#loc94 = loc(fused[#loc10, #loc11])
#loc95 = loc(fused[#loc12, #loc13])
#loc96 = loc(fused[#loc14, #loc15])
#loc97 = loc(fused[#loc18, #loc19])
#loc98 = loc(fused[#loc20, #loc21])
#loc99 = loc(fused[#loc23, #loc22])
#loc100 = loc(fused[#loc25, #loc24])
#loc101 = loc(fused[#loc28, #loc29])
#loc102 = loc(fused[#loc30, #loc31])
#loc103 = loc(fused[#loc32, #loc33])
#loc104 = loc(fused[#loc34, #loc35])
#loc105 = loc(fused[#loc37, #loc38])
#loc107 = loc(fused[#loc42, #loc43])
#loc108 = loc(fused[#loc44, #loc45])
#loc109 = loc(fused[#loc47, #loc48, #loc49, #loc43])
#loc110 = loc(fused[#loc50, #loc51])
#loc111 = loc(fused[#loc52, #loc53])
#loc112 = loc(fused[#loc57, #loc58])
#loc113 = loc(fused[#loc59, #loc60])
#loc114 = loc(fused[#loc62, #loc61])
#loc115 = loc(fused[#loc64, #loc63])
#loc116 = loc(fused[#loc67, #loc68])
#loc118 = loc(fused[#loc72, #loc73])
#loc119 = loc(fused[#loc74, #loc75])
#loc120 = loc(fused[#loc76, #loc77])
#loc121 = loc(fused[#loc80, #loc81])
#loc122 = loc(fused[#loc82, #loc83])
#loc123 = loc(fused[#loc85, #loc84])
#loc124 = loc(fused[#loc87, #loc86])
