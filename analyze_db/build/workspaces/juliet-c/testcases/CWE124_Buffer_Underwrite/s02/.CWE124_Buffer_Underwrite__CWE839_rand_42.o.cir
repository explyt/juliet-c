!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":22:22)
#loc6 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":22:26)
#loc66 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":97:26)
#loc67 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":97:30)
#loc121 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":61:26)
#loc122 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":61:30)
#true = #cir.bool<true> : !cir.bool
#loc172 = loc(fused[#loc5, #loc6])
#loc197 = loc(fused[#loc66, #loc67])
#loc218 = loc(fused[#loc121, #loc122])
module @"/workspaces/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_rand_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc170)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc5, #loc6])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc172)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc4)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc8)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc8)
    %6 = cir.ternary(%5, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc8)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc8)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc8)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc8)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc8)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc8)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc8)
      cir.yield %21 : !u32i loc(#loc8)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc8)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc8)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc8)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc8)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc8)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc8)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc8)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc8)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc8)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc8)
      cir.yield %25 : !u32i loc(#loc8)
    }) : (!cir.bool) -> !u32i loc(#loc8)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc8)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc173)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc174)
    cir.return %9 : !s32i loc(#loc174)
  } loc(#loc171)
  cir.func private @printIntLine(!s32i) loc(#loc175)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc176)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc16)
  cir.func no_proto @CWE124_Buffer_Underwrite__CWE839_rand_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc178)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc22)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc179)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %4 = cir.call @badSource(%3) : (!s32i) -> !s32i loc(#loc25)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc182)
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc183)
      %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc183)
      cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc183)
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc36)
        %9 = cir.const #cir.int<10> : !s32i loc(#loc37)
        %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc185)
        cir.if %10 {
          %11 = cir.const #cir.int<1> : !s32i loc(#loc41)
          %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
          %13 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc43)
          %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc43)
          cir.store %11, %14 : !s32i, !cir.ptr<!s32i> loc(#loc187)
          cir.scope {
            %15 = cir.const #cir.int<0> : !s32i loc(#loc46)
            cir.store %15, %5 : !s32i, !cir.ptr<!s32i> loc(#loc189)
            cir.for : cond {
              %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc48)
              %17 = cir.const #cir.int<10> : !s32i loc(#loc49)
              %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc190)
              cir.condition(%18) loc(#loc50)
            } body {
              cir.scope {
                %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc52)
                %17 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc53)
                %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc53)
                %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc53)
                cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc54)
              } loc(#loc191)
              cir.yield loc(#loc45)
            } step {
              %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc55)
              %17 = cir.unary(inc, %16) nsw : !s32i, !s32i loc(#loc56)
              cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc192)
              cir.yield loc(#loc188)
            } loc(#loc188)
          } loc(#loc188)
        } else {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc16)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc16)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc57)
        } loc(#loc186)
      } loc(#loc184)
    } loc(#loc181)
    cir.return loc(#loc18)
  } loc(#loc177)
  cir.func no_proto @CWE124_Buffer_Underwrite__CWE839_rand_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc194)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc60)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc195)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc62)
    cir.return loc(#loc59)
  } loc(#loc193)
  cir.func internal private @goodB2GSource(%arg0: !s32i loc(fused[#loc66, #loc67])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc197)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc65)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc68)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc69)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc69)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc69)
    %6 = cir.ternary(%5, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc69)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc69)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc69)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc69)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc69)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc69)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc69)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc69)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc69)
      cir.yield %21 : !u32i loc(#loc69)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc69)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc69)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc69)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc69)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc69)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc69)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc69)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc69)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc69)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc69)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc69)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc69)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc69)
      cir.yield %25 : !u32i loc(#loc69)
    }) : (!cir.bool) -> !u32i loc(#loc69)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc69)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc198)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc199)
    cir.return %9 : !s32i loc(#loc199)
  } loc(#loc196)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc73)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc201)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc79)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
    %4 = cir.call @goodB2GSource(%3) : (!s32i) -> !s32i loc(#loc82)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc205)
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc206)
      %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc206)
      cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc206)
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
        %9 = cir.const #cir.int<0> : !s32i loc(#loc94)
        %10 = cir.cmp(ge, %8, %9) : !s32i, !cir.bool loc(#loc208)
        %11 = cir.ternary(%10, true {
          %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc96)
          %13 = cir.const #cir.int<10> : !s32i loc(#loc97)
          %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc209)
          %15 = cir.ternary(%14, true {
            %16 = cir.const #true loc(#loc95)
            cir.yield %16 : !cir.bool loc(#loc95)
          }, false {
            %16 = cir.const #false loc(#loc95)
            cir.yield %16 : !cir.bool loc(#loc95)
          }) : (!cir.bool) -> !cir.bool loc(#loc95)
          cir.yield %15 : !cir.bool loc(#loc95)
        }, false {
          %12 = cir.const #false loc(#loc95)
          cir.yield %12 : !cir.bool loc(#loc95)
        }) : (!cir.bool) -> !cir.bool loc(#loc95)
        cir.if %11 {
          %12 = cir.const #cir.int<1> : !s32i loc(#loc102)
          %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
          %14 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc104)
          %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc104)
          cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc211)
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc107)
            cir.store %16, %5 : !s32i, !cir.ptr<!s32i> loc(#loc213)
            cir.for : cond {
              %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc109)
              %18 = cir.const #cir.int<10> : !s32i loc(#loc110)
              %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc214)
              cir.condition(%19) loc(#loc111)
            } body {
              cir.scope {
                %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc113)
                %18 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc114)
                %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc114)
                %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc114)
                cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc115)
              } loc(#loc215)
              cir.yield loc(#loc106)
            } step {
              %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc116)
              %18 = cir.unary(inc, %17) nsw : !s32i, !s32i loc(#loc117)
              cir.store %18, %5 : !s32i, !cir.ptr<!s32i> loc(#loc216)
              cir.yield loc(#loc212)
            } loc(#loc212)
          } loc(#loc212)
        } else {
          %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc73)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc73)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc118)
        } loc(#loc210)
      } loc(#loc207)
    } loc(#loc204)
    cir.return loc(#loc75)
  } loc(#loc200)
  cir.func internal private @goodG2BSource(%arg0: !s32i loc(fused[#loc121, #loc122])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc218)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc120)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc123)
    %2 = cir.const #cir.int<7> : !s32i loc(#loc124)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc126)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc220)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc220)
    cir.return %4 : !s32i loc(#loc220)
  } loc(#loc217)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc222)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc132)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc133)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc135)
    %4 = cir.call @goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc136)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc226)
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc227)
      %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc227)
      cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc227)
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc147)
        %9 = cir.const #cir.int<10> : !s32i loc(#loc148)
        %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc229)
        cir.if %10 {
          %11 = cir.const #cir.int<1> : !s32i loc(#loc152)
          %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc153)
          %13 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc154)
          %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc154)
          cir.store %11, %14 : !s32i, !cir.ptr<!s32i> loc(#loc231)
          cir.scope {
            %15 = cir.const #cir.int<0> : !s32i loc(#loc157)
            cir.store %15, %5 : !s32i, !cir.ptr<!s32i> loc(#loc233)
            cir.for : cond {
              %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc159)
              %17 = cir.const #cir.int<10> : !s32i loc(#loc160)
              %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc234)
              cir.condition(%18) loc(#loc161)
            } body {
              cir.scope {
                %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc163)
                %17 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc164)
                %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc164)
                %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc164)
                cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc165)
              } loc(#loc235)
              cir.yield loc(#loc156)
            } step {
              %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc166)
              %17 = cir.unary(inc, %16) nsw : !s32i, !s32i loc(#loc167)
              cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc236)
              cir.yield loc(#loc232)
            } loc(#loc232)
          } loc(#loc232)
        } else {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc168)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc168)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc169)
        } loc(#loc230)
      } loc(#loc228)
    } loc(#loc225)
    cir.return loc(#loc129)
  } loc(#loc221)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_rand_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":22:1)
#loc4 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":27:1)
#loc7 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":23:1)
#loc8 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":25:12)
#loc9 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":25:5)
#loc10 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":26:12)
#loc11 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":26:5)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc16 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":51:23)
#loc17 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":29:1)
#loc18 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":54:1)
#loc19 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":31:5)
#loc20 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":31:9)
#loc21 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":33:13)
#loc22 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":33:12)
#loc23 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":33:5)
#loc24 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":34:22)
#loc25 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":34:12)
#loc26 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":34:5)
#loc27 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":34:26)
#loc28 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":35:5)
#loc29 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":53:5)
#loc30 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":36:9)
#loc31 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":36:13)
#loc32 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":37:9)
#loc33 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":37:30)
#loc34 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":40:9)
#loc35 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":52:9)
#loc36 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":40:13)
#loc37 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":40:20)
#loc38 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":41:9)
#loc39 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":48:9)
#loc40 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":50:9)
#loc41 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":42:28)
#loc42 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":42:20)
#loc43 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":42:13)
#loc44 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":44:13)
#loc45 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":47:13)
#loc46 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":44:21)
#loc47 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":44:17)
#loc48 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":44:24)
#loc49 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":44:28)
#loc50 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":44:26)
#loc51 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":45:13)
#loc52 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":46:37)
#loc53 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":46:30)
#loc54 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":46:17)
#loc55 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":44:33)
#loc56 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":44:32)
#loc57 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":51:13)
#loc58 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":130:1)
#loc59 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":134:1)
#loc60 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":132:5)
#loc61 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":132:13)
#loc62 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":133:5)
#loc63 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":133:13)
#loc64 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":97:1)
#loc65 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":102:1)
#loc68 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":98:1)
#loc69 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":100:12)
#loc70 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":100:5)
#loc71 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":101:12)
#loc72 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":101:5)
#loc73 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":125:23)
#loc74 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":104:1)
#loc75 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":128:1)
#loc76 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":106:5)
#loc77 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":106:9)
#loc78 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":108:13)
#loc79 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":108:12)
#loc80 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":108:5)
#loc81 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":109:26)
#loc82 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":109:12)
#loc83 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":109:5)
#loc84 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":109:30)
#loc85 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":110:5)
#loc86 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":127:5)
#loc87 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":111:9)
#loc88 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":111:13)
#loc89 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":112:9)
#loc90 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":112:30)
#loc91 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":114:9)
#loc92 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":126:9)
#loc93 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":114:13)
#loc94 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":114:21)
#loc95 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":114:23)
#loc96 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":114:26)
#loc97 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":114:34)
#loc98 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":114:36)
#loc99 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":115:9)
#loc100 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":122:9)
#loc101 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":124:9)
#loc102 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":116:28)
#loc103 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":116:20)
#loc104 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":116:13)
#loc105 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":118:13)
#loc106 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":121:13)
#loc107 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":118:21)
#loc108 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":118:17)
#loc109 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":118:24)
#loc110 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":118:28)
#loc111 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":118:26)
#loc112 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":119:13)
#loc113 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":120:37)
#loc114 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":120:30)
#loc115 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":120:17)
#loc116 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":118:33)
#loc117 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":118:32)
#loc118 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":125:13)
#loc119 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":61:1)
#loc120 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":67:1)
#loc123 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":62:1)
#loc124 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":65:12)
#loc125 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":65:5)
#loc126 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":66:12)
#loc127 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":66:5)
#loc128 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":69:1)
#loc129 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":94:1)
#loc130 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":71:5)
#loc131 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":71:9)
#loc132 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":73:13)
#loc133 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":73:12)
#loc134 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":73:5)
#loc135 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":74:26)
#loc136 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":74:12)
#loc137 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":74:5)
#loc138 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":74:30)
#loc139 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":75:5)
#loc140 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":93:5)
#loc141 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":76:9)
#loc142 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":76:13)
#loc143 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":77:9)
#loc144 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":77:30)
#loc145 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":80:9)
#loc146 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":92:9)
#loc147 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":80:13)
#loc148 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":80:20)
#loc149 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":81:9)
#loc150 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":88:9)
#loc151 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":90:9)
#loc152 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":82:28)
#loc153 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":82:20)
#loc154 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":82:13)
#loc155 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":84:13)
#loc156 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":87:13)
#loc157 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":84:21)
#loc158 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":84:17)
#loc159 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":84:24)
#loc160 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":84:28)
#loc161 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":84:26)
#loc162 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":85:13)
#loc163 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":86:37)
#loc164 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":86:30)
#loc165 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":86:17)
#loc166 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":84:33)
#loc167 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":84:32)
#loc168 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":91:23)
#loc169 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":91:13)
#loc170 = loc(fused[#loc1, #loc2])
#loc171 = loc(fused[#loc3, #loc4])
#loc173 = loc(fused[#loc9, #loc8])
#loc174 = loc(fused[#loc11, #loc10])
#loc175 = loc(fused[#loc12, #loc13])
#loc176 = loc(fused[#loc14, #loc15])
#loc177 = loc(fused[#loc17, #loc18])
#loc178 = loc(fused[#loc19, #loc20])
#loc179 = loc(fused[#loc23, #loc21])
#loc180 = loc(fused[#loc26, #loc27])
#loc181 = loc(fused[#loc28, #loc29])
#loc182 = loc(fused[#loc30, #loc31])
#loc183 = loc(fused[#loc32, #loc33])
#loc184 = loc(fused[#loc34, #loc35])
#loc185 = loc(fused[#loc36, #loc37])
#loc186 = loc(fused[#loc38, #loc39, #loc40, #loc35])
#loc187 = loc(fused[#loc43, #loc41])
#loc188 = loc(fused[#loc44, #loc45])
#loc189 = loc(fused[#loc47, #loc46])
#loc190 = loc(fused[#loc48, #loc49])
#loc191 = loc(fused[#loc51, #loc45])
#loc192 = loc(fused[#loc56, #loc55])
#loc193 = loc(fused[#loc58, #loc59])
#loc194 = loc(fused[#loc60, #loc61])
#loc195 = loc(fused[#loc62, #loc63])
#loc196 = loc(fused[#loc64, #loc65])
#loc198 = loc(fused[#loc70, #loc69])
#loc199 = loc(fused[#loc72, #loc71])
#loc200 = loc(fused[#loc74, #loc75])
#loc201 = loc(fused[#loc76, #loc77])
#loc202 = loc(fused[#loc80, #loc78])
#loc203 = loc(fused[#loc83, #loc84])
#loc204 = loc(fused[#loc85, #loc86])
#loc205 = loc(fused[#loc87, #loc88])
#loc206 = loc(fused[#loc89, #loc90])
#loc207 = loc(fused[#loc91, #loc92])
#loc208 = loc(fused[#loc93, #loc94])
#loc209 = loc(fused[#loc96, #loc98])
#loc210 = loc(fused[#loc99, #loc100, #loc101, #loc92])
#loc211 = loc(fused[#loc104, #loc102])
#loc212 = loc(fused[#loc105, #loc106])
#loc213 = loc(fused[#loc108, #loc107])
#loc214 = loc(fused[#loc109, #loc110])
#loc215 = loc(fused[#loc112, #loc106])
#loc216 = loc(fused[#loc117, #loc116])
#loc217 = loc(fused[#loc119, #loc120])
#loc219 = loc(fused[#loc125, #loc124])
#loc220 = loc(fused[#loc127, #loc126])
#loc221 = loc(fused[#loc128, #loc129])
#loc222 = loc(fused[#loc130, #loc131])
#loc223 = loc(fused[#loc134, #loc132])
#loc224 = loc(fused[#loc137, #loc138])
#loc225 = loc(fused[#loc139, #loc140])
#loc226 = loc(fused[#loc141, #loc142])
#loc227 = loc(fused[#loc143, #loc144])
#loc228 = loc(fused[#loc145, #loc146])
#loc229 = loc(fused[#loc147, #loc148])
#loc230 = loc(fused[#loc149, #loc150, #loc151, #loc146])
#loc231 = loc(fused[#loc154, #loc152])
#loc232 = loc(fused[#loc155, #loc156])
#loc233 = loc(fused[#loc158, #loc157])
#loc234 = loc(fused[#loc159, #loc160])
#loc235 = loc(fused[#loc162, #loc156])
#loc236 = loc(fused[#loc167, #loc166])
