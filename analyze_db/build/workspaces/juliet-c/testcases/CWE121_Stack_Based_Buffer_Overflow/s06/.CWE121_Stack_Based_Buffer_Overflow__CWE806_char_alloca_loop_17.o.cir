!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc135)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc136)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc138)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc139)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc140)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc12)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc12)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc12)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc12)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc12)
    cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc140)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc13)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc141)
    cir.scope {
      %11 = cir.const #cir.int<0> : !s32i loc(#loc17)
      cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc143)
      cir.for : cond {
        %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc144)
        cir.condition(%14) loc(#loc21)
      } body {
        cir.scope {
          %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc23)
          %14 = cir.const #cir.int<65> : !s32i loc(#loc24)
          %15 = cir.const #cir.int<100> : !s32i loc(#loc25)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc26)
          %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc25)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc25)
          cir.libc.memset %18 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc146)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc29)
          %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc29)
          %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
          %22 = cir.const #cir.int<100> : !s32i loc(#loc31)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc32)
          %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc31)
          %25 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc33)
          cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc147)
        } loc(#loc145)
        cir.yield loc(#loc16)
      } step {
        %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc34)
        %13 = cir.unary(inc, %12) nsw : !s32i, !s32i loc(#loc35)
        cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc148)
        cir.yield loc(#loc142)
      } loc(#loc142)
    } loc(#loc142)
    cir.scope {
      %11 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc150)
      %12 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc151)
      %13 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc152)
      %14 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc150)
      cir.store %14, %11 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc150)
      %15 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc43)
      %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc44)
      %17 = cir.call @strlen(%16) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc43)
      cir.store %17, %13 : !u64i, !cir.ptr<!u64i> loc(#loc153)
      cir.scope {
        %26 = cir.const #cir.int<0> : !s32i loc(#loc49)
        %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc49)
        cir.store %27, %12 : !u64i, !cir.ptr<!u64i> loc(#loc155)
        cir.for : cond {
          %28 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc51)
          %29 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc52)
          %30 = cir.cmp(lt, %28, %29) : !u64i, !cir.bool loc(#loc156)
          cir.condition(%30) loc(#loc53)
        } body {
          cir.scope {
            %28 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
            %29 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc56)
            %30 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc57)
            %31 = cir.load %30 : !cir.ptr<!s8i>, !s8i loc(#loc55)
            %32 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc58)
            %33 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc59)
            %34 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %32 : !u64i), !cir.ptr<!s8i> loc(#loc59)
            cir.store %31, %34 : !s8i, !cir.ptr<!s8i> loc(#loc158)
          } loc(#loc157)
          cir.yield loc(#loc48)
        } step {
          %28 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc60)
          %29 = cir.unary(inc, %28) : !u64i, !u64i loc(#loc61)
          cir.store %29, %12 : !u64i, !cir.ptr<!u64i> loc(#loc159)
          cir.yield loc(#loc154)
        } loc(#loc154)
      } loc(#loc154)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc62)
      %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc62)
      %20 = cir.const #cir.int<50> : !s32i loc(#loc63)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc64)
      %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc63)
      %23 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc65)
      %24 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc65)
      cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc160)
      %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc66)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    } loc(#loc149)
    cir.return loc(#loc6)
  } loc(#loc137)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc162)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc70)
    cir.return loc(#loc69)
  } loc(#loc161)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc164)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc165)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc166)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc79)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc79)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc79)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc79)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc79)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc79)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc79)
    cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc166)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc80)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc167)
    cir.scope {
      %11 = cir.const #cir.int<0> : !s32i loc(#loc84)
      cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc169)
      cir.for : cond {
        %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc87)
        %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc170)
        cir.condition(%14) loc(#loc88)
      } body {
        cir.scope {
          %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc90)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc90)
          %14 = cir.const #cir.int<65> : !s32i loc(#loc91)
          %15 = cir.const #cir.int<50> : !s32i loc(#loc92)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc93)
          %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc92)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc92)
          cir.libc.memset %18 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc172)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc96)
          %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc96)
          %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc97)
          %22 = cir.const #cir.int<50> : !s32i loc(#loc98)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc99)
          %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc98)
          %25 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc100)
          cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc173)
        } loc(#loc171)
        cir.yield loc(#loc83)
      } step {
        %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
        %13 = cir.unary(inc, %12) nsw : !s32i, !s32i loc(#loc102)
        cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc174)
        cir.yield loc(#loc168)
      } loc(#loc168)
    } loc(#loc168)
    cir.scope {
      %11 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc176)
      %12 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc177)
      %13 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc178)
      %14 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc176)
      cir.store %14, %11 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc176)
      %15 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc110)
      %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
      %17 = cir.call @strlen(%16) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc110)
      cir.store %17, %13 : !u64i, !cir.ptr<!u64i> loc(#loc179)
      cir.scope {
        %26 = cir.const #cir.int<0> : !s32i loc(#loc116)
        %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc116)
        cir.store %27, %12 : !u64i, !cir.ptr<!u64i> loc(#loc181)
        cir.for : cond {
          %28 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc118)
          %29 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc119)
          %30 = cir.cmp(lt, %28, %29) : !u64i, !cir.bool loc(#loc182)
          cir.condition(%30) loc(#loc120)
        } body {
          cir.scope {
            %28 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc122)
            %29 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc123)
            %30 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc124)
            %31 = cir.load %30 : !cir.ptr<!s8i>, !s8i loc(#loc122)
            %32 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc125)
            %33 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc126)
            %34 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %32 : !u64i), !cir.ptr<!s8i> loc(#loc126)
            cir.store %31, %34 : !s8i, !cir.ptr<!s8i> loc(#loc184)
          } loc(#loc183)
          cir.yield loc(#loc115)
        } step {
          %28 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc127)
          %29 = cir.unary(inc, %28) : !u64i, !u64i loc(#loc128)
          cir.store %29, %12 : !u64i, !cir.ptr<!u64i> loc(#loc185)
          cir.yield loc(#loc180)
        } loc(#loc180)
      } loc(#loc180)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc129)
      %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc129)
      %20 = cir.const #cir.int<50> : !s32i loc(#loc130)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc131)
      %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc130)
      %23 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc132)
      %24 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc132)
      cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc186)
      %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc134)
    } loc(#loc175)
    cir.return loc(#loc73)
  } loc(#loc163)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":23:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":47:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":25:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":25:9)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":26:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":26:12)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":27:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":27:33)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":28:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":28:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":29:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":34:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":29:13)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":29:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":29:16)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":29:20)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":29:18)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":30:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":32:16)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":32:22)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":32:27)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":32:31)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":32:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":32:32)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":33:23)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":33:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":33:14)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":33:18)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":33:19)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":29:24)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":29:23)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":35:5)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":46:5)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":36:9)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":36:25)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":37:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":37:16)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":37:19)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":38:19)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":38:26)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":38:9)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":38:30)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":40:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":43:9)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":40:18)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":40:14)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":40:21)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":40:25)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":40:23)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":41:9)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":42:23)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":42:28)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":42:29)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":42:18)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":42:13)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":40:35)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":40:34)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":44:22)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":44:14)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":44:17)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":44:9)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":45:19)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":45:9)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":80:1)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":83:1)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":82:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":82:13)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":54:1)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":78:1)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":56:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":56:9)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":57:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":57:12)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":58:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":58:33)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":59:12)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":59:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":60:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":65:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":60:13)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":60:9)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":60:16)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":60:20)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":60:18)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":61:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":63:16)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":63:22)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":63:27)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":63:30)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":63:9)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":63:31)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":64:22)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":64:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":64:14)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":64:17)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":64:18)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":60:24)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":60:23)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":66:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":77:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":67:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":67:25)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":68:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":68:16)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":68:19)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":69:19)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":69:26)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":69:9)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":69:30)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":71:9)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":74:9)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":71:18)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":71:14)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":71:21)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":71:25)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":71:23)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":72:9)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":73:23)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":73:28)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":73:29)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":73:18)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":73:13)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":71:35)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":71:34)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":75:22)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":75:14)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":75:17)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":75:9)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":76:19)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c":76:9)
#loc135 = loc(fused[#loc1, #loc2])
#loc136 = loc(fused[#loc3, #loc4])
#loc137 = loc(fused[#loc5, #loc6])
#loc138 = loc(fused[#loc7, #loc8])
#loc139 = loc(fused[#loc9, #loc10])
#loc140 = loc(fused[#loc11, #loc12])
#loc141 = loc(fused[#loc14, #loc13])
#loc142 = loc(fused[#loc15, #loc16])
#loc143 = loc(fused[#loc18, #loc17])
#loc144 = loc(fused[#loc19, #loc20])
#loc145 = loc(fused[#loc22, #loc16])
#loc146 = loc(fused[#loc27, #loc28])
#loc147 = loc(fused[#loc30, #loc29])
#loc148 = loc(fused[#loc35, #loc34])
#loc149 = loc(fused[#loc36, #loc37])
#loc150 = loc(fused[#loc38, #loc39])
#loc151 = loc(fused[#loc40, #loc41])
#loc152 = loc(fused[#loc40, #loc42])
#loc153 = loc(fused[#loc45, #loc46])
#loc154 = loc(fused[#loc47, #loc48])
#loc155 = loc(fused[#loc50, #loc49])
#loc156 = loc(fused[#loc51, #loc52])
#loc157 = loc(fused[#loc54, #loc48])
#loc158 = loc(fused[#loc59, #loc57])
#loc159 = loc(fused[#loc61, #loc60])
#loc160 = loc(fused[#loc65, #loc62])
#loc161 = loc(fused[#loc68, #loc69])
#loc162 = loc(fused[#loc70, #loc71])
#loc163 = loc(fused[#loc72, #loc73])
#loc164 = loc(fused[#loc74, #loc75])
#loc165 = loc(fused[#loc76, #loc77])
#loc166 = loc(fused[#loc78, #loc79])
#loc167 = loc(fused[#loc81, #loc80])
#loc168 = loc(fused[#loc82, #loc83])
#loc169 = loc(fused[#loc85, #loc84])
#loc170 = loc(fused[#loc86, #loc87])
#loc171 = loc(fused[#loc89, #loc83])
#loc172 = loc(fused[#loc94, #loc95])
#loc173 = loc(fused[#loc97, #loc96])
#loc174 = loc(fused[#loc102, #loc101])
#loc175 = loc(fused[#loc103, #loc104])
#loc176 = loc(fused[#loc105, #loc106])
#loc177 = loc(fused[#loc107, #loc108])
#loc178 = loc(fused[#loc107, #loc109])
#loc179 = loc(fused[#loc112, #loc113])
#loc180 = loc(fused[#loc114, #loc115])
#loc181 = loc(fused[#loc117, #loc116])
#loc182 = loc(fused[#loc118, #loc119])
#loc183 = loc(fused[#loc121, #loc115])
#loc184 = loc(fused[#loc126, #loc124])
#loc185 = loc(fused[#loc128, #loc127])
#loc186 = loc(fused[#loc132, #loc129])
