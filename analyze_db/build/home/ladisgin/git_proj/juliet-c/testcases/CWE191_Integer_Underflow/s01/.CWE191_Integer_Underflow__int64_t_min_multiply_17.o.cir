!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_min_multiply_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLongLongLine(!s64i) loc(#loc146)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_min_multiply_17_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc148)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc149)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc150)
    %3 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc151)
    %4 = cir.const #cir.int<0> : !s64i loc(#loc12)
    cir.store %4, %3 : !s64i, !cir.ptr<!s64i> loc(#loc152)
    cir.br ^bb1 loc(#loc153)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<0> : !s32i loc(#loc16)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc154)
    cir.br ^bb2 loc(#loc153)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc18)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc155)
    cir.brcond %8 ^bb3, ^bb7 loc(#loc20)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc156)
  ^bb4:  // pred: ^bb3
    %9 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc22)
    %10 = cir.unary(minus, %9) : !s64i, !s64i loc(#loc22)
    %11 = cir.const #cir.int<1> : !s64i loc(#loc22)
    %12 = cir.binop(sub, %10, %11) nsw : !s64i loc(#loc22)
    cir.store %12, %3 : !s64i, !cir.ptr<!s64i> loc(#loc157)
    cir.br ^bb5 loc(#loc15)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc15)
  ^bb6:  // pred: ^bb5
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %14 = cir.unary(inc, %13) : !s32i, !s32i loc(#loc25)
    cir.store %14, %1 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    cir.br ^bb2 loc(#loc153)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc15)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc159)
  ^bb9:  // pred: ^bb8
    %15 = cir.const #cir.int<0> : !s32i loc(#loc28)
    cir.store %15, %2 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    cir.br ^bb10 loc(#loc159)
  ^bb10:  // 2 preds: ^bb9, ^bb18
    %16 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc161)
    cir.brcond %18 ^bb11, ^bb19 loc(#loc32)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc162)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc163)
  ^bb13:  // pred: ^bb12
    %19 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc36)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc37)
    %21 = cir.cast(integral, %20 : !s32i), !s64i loc(#loc37)
    %22 = cir.cmp(lt, %19, %21) : !s64i, !cir.bool loc(#loc164)
    cir.brcond %22 ^bb14, ^bb15 loc(#loc165)
  ^bb14:  // pred: ^bb13
    %23 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc39)
    %24 = cir.const #cir.int<2> : !s32i loc(#loc6)
    %25 = cir.cast(integral, %24 : !s32i), !s64i loc(#loc6)
    %26 = cir.binop(mul, %23, %25) nsw : !s64i loc(#loc39)
    cir.store %26, %0 : !s64i, !cir.ptr<!s64i> loc(#loc148)
    %27 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc40)
    cir.call @printLongLongLine(%27) : (!s64i) -> () loc(#loc41)
    cir.br ^bb15 loc(#loc35)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc35)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc27)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc27)
  ^bb18:  // pred: ^bb17
    %28 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc42)
    %29 = cir.unary(inc, %28) : !s32i, !s32i loc(#loc43)
    cir.store %29, %2 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    cir.br ^bb10 loc(#loc159)
  ^bb19:  // pred: ^bb10
    cir.br ^bb20 loc(#loc27)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc4)
  } loc(#loc147)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_min_multiply_17_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc168)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc169)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    cir.return loc(#loc45)
  } loc(#loc167)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc170)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc52)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc172)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc173)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc174)
    %3 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc175)
    %4 = cir.const #cir.int<0> : !s64i loc(#loc62)
    cir.store %4, %3 : !s64i, !cir.ptr<!s64i> loc(#loc176)
    cir.br ^bb1 loc(#loc177)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<0> : !s32i loc(#loc66)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    cir.br ^bb2 loc(#loc177)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc68)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc69)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc179)
    cir.brcond %8 ^bb3, ^bb7 loc(#loc70)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc180)
  ^bb4:  // pred: ^bb3
    %9 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc72)
    %10 = cir.unary(minus, %9) : !s64i, !s64i loc(#loc72)
    %11 = cir.const #cir.int<1> : !s64i loc(#loc72)
    %12 = cir.binop(sub, %10, %11) nsw : !s64i loc(#loc72)
    cir.store %12, %3 : !s64i, !cir.ptr<!s64i> loc(#loc181)
    cir.br ^bb5 loc(#loc65)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc65)
  ^bb6:  // pred: ^bb5
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    %14 = cir.unary(inc, %13) : !s32i, !s32i loc(#loc75)
    cir.store %14, %1 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    cir.br ^bb2 loc(#loc177)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc65)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc183)
  ^bb9:  // pred: ^bb8
    %15 = cir.const #cir.int<0> : !s32i loc(#loc78)
    cir.store %15, %2 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    cir.br ^bb10 loc(#loc183)
  ^bb10:  // 2 preds: ^bb9, ^bb23
    %16 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc80)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc185)
    cir.brcond %18 ^bb11, ^bb24 loc(#loc82)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc186)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc187)
  ^bb13:  // pred: ^bb12
    %19 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc86)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc87)
    %21 = cir.cast(integral, %20 : !s32i), !s64i loc(#loc87)
    %22 = cir.cmp(lt, %19, %21) : !s64i, !cir.bool loc(#loc188)
    cir.brcond %22 ^bb14, ^bb20 loc(#loc189)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc190)
  ^bb15:  // pred: ^bb14
    %23 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc91)
    %24 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc92)
    %25 = cir.unary(minus, %24) : !s64i, !s64i loc(#loc92)
    %26 = cir.const #cir.int<1> : !s64i loc(#loc92)
    %27 = cir.binop(sub, %25, %26) nsw : !s64i loc(#loc92)
    %28 = cir.const #cir.int<2> : !s32i loc(#loc93)
    %29 = cir.cast(integral, %28 : !s32i), !s64i loc(#loc93)
    %30 = cir.binop(div, %27, %29) : !s64i loc(#loc191)
    %31 = cir.cmp(gt, %23, %30) : !s64i, !cir.bool loc(#loc192)
    cir.brcond %31 ^bb16, ^bb17 loc(#loc193)
  ^bb16:  // pred: ^bb15
    %32 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc98)
    %33 = cir.const #cir.int<2> : !s32i loc(#loc56)
    %34 = cir.cast(integral, %33 : !s32i), !s64i loc(#loc56)
    %35 = cir.binop(mul, %32, %34) nsw : !s64i loc(#loc98)
    cir.store %35, %0 : !s64i, !cir.ptr<!s64i> loc(#loc172)
    %36 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc99)
    cir.call @printLongLongLine(%36) : (!s64i) -> () loc(#loc100)
    cir.br ^bb18 loc(#loc96)
  ^bb17:  // pred: ^bb15
    %37 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc52)
    %38 = cir.cast(array_to_ptrdecay, %37 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%38) : (!cir.ptr<!s8i>) -> () loc(#loc101)
    cir.br ^bb18 loc(#loc90)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc90)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc85)
  ^bb20:  // 2 preds: ^bb13, ^bb19
    cir.br ^bb21 loc(#loc85)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc77)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc77)
  ^bb23:  // pred: ^bb22
    %39 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    %40 = cir.unary(inc, %39) : !s32i, !s32i loc(#loc103)
    cir.store %40, %2 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    cir.br ^bb10 loc(#loc183)
  ^bb24:  // pred: ^bb10
    cir.br ^bb25 loc(#loc77)
  ^bb25:  // pred: ^bb24
    cir.return loc(#loc54)
  } loc(#loc171)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc196)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc197)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc198)
    %3 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc199)
    %4 = cir.const #cir.int<0> : !s64i loc(#loc113)
    cir.store %4, %3 : !s64i, !cir.ptr<!s64i> loc(#loc200)
    cir.br ^bb1 loc(#loc201)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<0> : !s32i loc(#loc117)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    cir.br ^bb2 loc(#loc201)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc119)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc120)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc203)
    cir.brcond %8 ^bb3, ^bb7 loc(#loc121)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc204)
  ^bb4:  // pred: ^bb3
    %9 = cir.const #cir.int<2> : !s32i loc(#loc123)
    %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc124)
    %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc124)
    cir.store %11, %3 : !s64i, !cir.ptr<!s64i> loc(#loc205)
    cir.br ^bb5 loc(#loc116)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc116)
  ^bb6:  // pred: ^bb5
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc126)
    %13 = cir.unary(inc, %12) : !s32i, !s32i loc(#loc127)
    cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    cir.br ^bb2 loc(#loc201)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc116)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc207)
  ^bb9:  // pred: ^bb8
    %14 = cir.const #cir.int<0> : !s32i loc(#loc130)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc208)
    cir.br ^bb10 loc(#loc207)
  ^bb10:  // 2 preds: ^bb9, ^bb18
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc132)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc133)
    %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc209)
    cir.brcond %17 ^bb11, ^bb19 loc(#loc134)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc210)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc211)
  ^bb13:  // pred: ^bb12
    %18 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc138)
    %19 = cir.const #cir.int<0> : !s32i loc(#loc139)
    %20 = cir.cast(integral, %19 : !s32i), !s64i loc(#loc139)
    %21 = cir.cmp(lt, %18, %20) : !s64i, !cir.bool loc(#loc212)
    cir.brcond %21 ^bb14, ^bb15 loc(#loc213)
  ^bb14:  // pred: ^bb13
    %22 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc141)
    %23 = cir.const #cir.int<2> : !s32i loc(#loc107)
    %24 = cir.cast(integral, %23 : !s32i), !s64i loc(#loc107)
    %25 = cir.binop(mul, %22, %24) nsw : !s64i loc(#loc141)
    cir.store %25, %0 : !s64i, !cir.ptr<!s64i> loc(#loc196)
    %26 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc142)
    cir.call @printLongLongLine(%26) : (!s64i) -> () loc(#loc143)
    cir.br ^bb15 loc(#loc137)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc137)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc129)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc129)
  ^bb18:  // pred: ^bb17
    %27 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc144)
    %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc145)
    cir.store %28, %2 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    cir.br ^bb10 loc(#loc207)
  ^bb19:  // pred: ^bb10
    cir.br ^bb20 loc(#loc129)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc105)
  } loc(#loc195)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_min_multiply_17.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":41:1)
#loc5 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":37:13)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":37:37)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":24:5)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":24:9)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":24:11)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":25:5)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":25:13)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":26:12)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":26:5)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":27:5)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":31:5)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":27:13)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":27:9)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":27:16)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":27:20)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":27:18)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":28:5)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":30:16)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":30:9)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":27:24)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":27:23)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":32:5)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":40:5)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":32:13)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":32:9)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":32:16)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":32:20)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":32:18)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":33:5)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":34:9)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":39:9)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":34:12)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":34:19)
#loc38 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":35:9)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":37:30)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":38:31)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":38:13)
#loc42 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":32:24)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":32:23)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":98:1)
#loc45 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":102:1)
#loc46 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":100:5)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":100:13)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":101:5)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":101:13)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":70:27)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":48:1)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":74:1)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":65:17)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":65:41)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":50:5)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":50:9)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":50:11)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":51:5)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":51:13)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":52:12)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":52:5)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":53:5)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":57:5)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":53:13)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":53:9)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":53:16)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":53:20)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":53:18)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":54:5)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":56:16)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":56:9)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":53:24)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":53:23)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":58:5)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":73:5)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":58:13)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":58:9)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":58:16)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":58:20)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":58:18)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":59:5)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":60:9)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":72:9)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":60:12)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":60:19)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":61:9)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":63:13)
#loc90 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":71:13)
#loc91 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":63:17)
#loc92 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":63:25)
#loc93 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":63:35)
#loc94 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":63:36)
#loc95 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":64:13)
#loc96 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":67:13)
#loc97 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":69:13)
#loc98 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":65:34)
#loc99 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":66:35)
#loc100 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":66:17)
#loc101 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":70:17)
#loc102 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":58:24)
#loc103 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":58:23)
#loc104 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":77:1)
#loc105 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":96:1)
#loc106 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":92:13)
#loc107 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":92:37)
#loc108 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":79:5)
#loc109 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":79:9)
#loc110 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":79:11)
#loc111 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":80:5)
#loc112 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":80:13)
#loc113 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":81:12)
#loc114 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":81:5)
#loc115 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":82:5)
#loc116 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":86:5)
#loc117 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":82:13)
#loc118 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":82:9)
#loc119 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":82:16)
#loc120 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":82:20)
#loc121 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":82:18)
#loc122 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":83:5)
#loc123 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":85:17)
#loc124 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":85:16)
#loc125 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":85:9)
#loc126 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":82:24)
#loc127 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":82:23)
#loc128 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":87:5)
#loc129 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":95:5)
#loc130 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":87:13)
#loc131 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":87:9)
#loc132 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":87:16)
#loc133 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":87:20)
#loc134 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":87:18)
#loc135 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":88:5)
#loc136 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":89:9)
#loc137 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":94:9)
#loc138 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":89:12)
#loc139 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":89:19)
#loc140 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":90:9)
#loc141 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":92:30)
#loc142 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":93:31)
#loc143 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":93:13)
#loc144 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":87:24)
#loc145 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_17.c":87:23)
#loc146 = loc(fused[#loc1, #loc2])
#loc147 = loc(fused[#loc3, #loc4])
#loc148 = loc(fused[#loc5, #loc6])
#loc149 = loc(fused[#loc7, #loc8])
#loc150 = loc(fused[#loc7, #loc9])
#loc151 = loc(fused[#loc10, #loc11])
#loc152 = loc(fused[#loc13, #loc12])
#loc153 = loc(fused[#loc14, #loc15])
#loc154 = loc(fused[#loc17, #loc16])
#loc155 = loc(fused[#loc18, #loc19])
#loc156 = loc(fused[#loc21, #loc15])
#loc157 = loc(fused[#loc23, #loc22])
#loc158 = loc(fused[#loc25, #loc24])
#loc159 = loc(fused[#loc26, #loc27])
#loc160 = loc(fused[#loc29, #loc28])
#loc161 = loc(fused[#loc30, #loc31])
#loc162 = loc(fused[#loc33, #loc27])
#loc163 = loc(fused[#loc34, #loc35])
#loc164 = loc(fused[#loc36, #loc37])
#loc165 = loc(fused[#loc38, #loc35])
#loc166 = loc(fused[#loc43, #loc42])
#loc167 = loc(fused[#loc44, #loc45])
#loc168 = loc(fused[#loc46, #loc47])
#loc169 = loc(fused[#loc48, #loc49])
#loc170 = loc(fused[#loc50, #loc51])
#loc171 = loc(fused[#loc53, #loc54])
#loc172 = loc(fused[#loc55, #loc56])
#loc173 = loc(fused[#loc57, #loc58])
#loc174 = loc(fused[#loc57, #loc59])
#loc175 = loc(fused[#loc60, #loc61])
#loc176 = loc(fused[#loc63, #loc62])
#loc177 = loc(fused[#loc64, #loc65])
#loc178 = loc(fused[#loc67, #loc66])
#loc179 = loc(fused[#loc68, #loc69])
#loc180 = loc(fused[#loc71, #loc65])
#loc181 = loc(fused[#loc73, #loc72])
#loc182 = loc(fused[#loc75, #loc74])
#loc183 = loc(fused[#loc76, #loc77])
#loc184 = loc(fused[#loc79, #loc78])
#loc185 = loc(fused[#loc80, #loc81])
#loc186 = loc(fused[#loc83, #loc77])
#loc187 = loc(fused[#loc84, #loc85])
#loc188 = loc(fused[#loc86, #loc87])
#loc189 = loc(fused[#loc88, #loc85])
#loc190 = loc(fused[#loc89, #loc90])
#loc191 = loc(fused[#loc92, #loc93])
#loc192 = loc(fused[#loc91, #loc94])
#loc193 = loc(fused[#loc95, #loc96, #loc97, #loc90])
#loc194 = loc(fused[#loc103, #loc102])
#loc195 = loc(fused[#loc104, #loc105])
#loc196 = loc(fused[#loc106, #loc107])
#loc197 = loc(fused[#loc108, #loc109])
#loc198 = loc(fused[#loc108, #loc110])
#loc199 = loc(fused[#loc111, #loc112])
#loc200 = loc(fused[#loc114, #loc113])
#loc201 = loc(fused[#loc115, #loc116])
#loc202 = loc(fused[#loc118, #loc117])
#loc203 = loc(fused[#loc119, #loc120])
#loc204 = loc(fused[#loc122, #loc116])
#loc205 = loc(fused[#loc125, #loc123])
#loc206 = loc(fused[#loc127, #loc126])
#loc207 = loc(fused[#loc128, #loc129])
#loc208 = loc(fused[#loc131, #loc130])
#loc209 = loc(fused[#loc132, #loc133])
#loc210 = loc(fused[#loc135, #loc129])
#loc211 = loc(fused[#loc136, #loc137])
#loc212 = loc(fused[#loc138, #loc139])
#loc213 = loc(fused[#loc140, #loc137])
#loc214 = loc(fused[#loc145, #loc144])
