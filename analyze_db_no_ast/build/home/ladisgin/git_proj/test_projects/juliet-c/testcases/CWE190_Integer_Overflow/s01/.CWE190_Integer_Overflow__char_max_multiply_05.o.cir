!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_multiply_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc186)
  cir.func private  @printHexCharLine(!s8i) loc(#loc187)
  cir.func no_proto  @CWE190_Integer_Overflow__char_max_multiply_05_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc189)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc9)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc9)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc190)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc186)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc13)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
      cir.if %5 {
        %6 = cir.const #cir.int<127> : !s32i loc(#loc15)
        %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc15)
        cir.store %7, %0 : !s8i, !cir.ptr<!s8i> loc(#loc193)
      } loc(#loc192)
    } loc(#loc191)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc186)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc23)
          %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc23)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc24)
          %9 = cir.cmp(gt, %7, %8) : !s32i, !s32i loc(#loc197)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc25)
          cir.if %10 {
            %11 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc199)
            %12 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc29)
            %13 = cir.cast(integral, %12 : !s8i), !s32i loc(#loc29)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc28)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc29)
            %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc29)
            cir.store %16, %11 : !s8i, !cir.ptr<!s8i> loc(#loc199)
            %17 = cir.load %11 : !cir.ptr<!s8i>, !s8i loc(#loc30)
            cir.call @printHexCharLine(%17) : (!s8i) -> () loc(#loc31)
          } loc(#loc198)
        } loc(#loc196)
      } loc(#loc195)
    } loc(#loc194)
    cir.return loc(#loc6)
  } loc(#loc188)
  cir.func no_proto  @CWE190_Integer_Overflow__char_max_multiply_05_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc202)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc204)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    cir.return loc(#loc33)
  } loc(#loc200)
  cir.global "private"  internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc205)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc206)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc46)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc47)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc208)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc52)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc52)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc209)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc186)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc56)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc56)
      cir.if %5 {
        %6 = cir.const #cir.int<127> : !s32i loc(#loc58)
        %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc58)
        cir.store %7, %0 : !s8i, !cir.ptr<!s8i> loc(#loc212)
      } loc(#loc211)
    } loc(#loc210)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc205)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc62)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc62)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc46)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc46)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc66)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc69)
          %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc69)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc70)
          %9 = cir.cmp(gt, %7, %8) : !s32i, !s32i loc(#loc216)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc71)
          cir.if %10 {
            cir.scope {
              %11 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc75)
              %12 = cir.cast(integral, %11 : !s8i), !s32i loc(#loc75)
              %13 = cir.const #cir.int<127> : !s32i loc(#loc76)
              %14 = cir.const #cir.int<2> : !s32i loc(#loc77)
              %15 = cir.binop(div, %13, %14) : !s32i loc(#loc219)
              %16 = cir.cmp(lt, %12, %15) : !s32i, !s32i loc(#loc220)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc79)
              cir.if %17 {
                %18 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc222)
                %19 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc85)
                %20 = cir.cast(integral, %19 : !s8i), !s32i loc(#loc85)
                %21 = cir.const #cir.int<2> : !s32i loc(#loc84)
                %22 = cir.binop(mul, %20, %21) nsw : !s32i loc(#loc85)
                %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc85)
                cir.store %23, %18 : !s8i, !cir.ptr<!s8i> loc(#loc222)
                %24 = cir.load %18 : !cir.ptr<!s8i>, !s8i loc(#loc86)
                cir.call @printHexCharLine(%24) : (!s8i) -> () loc(#loc87)
              } else {
                %18 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc47)
                %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc47)
                cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc88)
              } loc(#loc221)
            } loc(#loc218)
          } loc(#loc217)
        } loc(#loc215)
      } loc(#loc214)
    } loc(#loc213)
    cir.return loc(#loc49)
  } loc(#loc207)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc224)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc93)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc93)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc225)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc186)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc97)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc97)
      cir.if %5 {
        %6 = cir.const #cir.int<127> : !s32i loc(#loc99)
        %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc99)
        cir.store %7, %0 : !s8i, !cir.ptr<!s8i> loc(#loc228)
      } loc(#loc227)
    } loc(#loc226)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc186)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc103)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc103)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc107)
          %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc107)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc108)
          %9 = cir.cmp(gt, %7, %8) : !s32i, !s32i loc(#loc232)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc109)
          cir.if %10 {
            cir.scope {
              %11 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc113)
              %12 = cir.cast(integral, %11 : !s8i), !s32i loc(#loc113)
              %13 = cir.const #cir.int<127> : !s32i loc(#loc114)
              %14 = cir.const #cir.int<2> : !s32i loc(#loc115)
              %15 = cir.binop(div, %13, %14) : !s32i loc(#loc235)
              %16 = cir.cmp(lt, %12, %15) : !s32i, !s32i loc(#loc236)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc117)
              cir.if %17 {
                %18 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc238)
                %19 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc123)
                %20 = cir.cast(integral, %19 : !s8i), !s32i loc(#loc123)
                %21 = cir.const #cir.int<2> : !s32i loc(#loc122)
                %22 = cir.binop(mul, %20, %21) nsw : !s32i loc(#loc123)
                %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc123)
                cir.store %23, %18 : !s8i, !cir.ptr<!s8i> loc(#loc238)
                %24 = cir.load %18 : !cir.ptr<!s8i>, !s8i loc(#loc124)
                cir.call @printHexCharLine(%24) : (!s8i) -> () loc(#loc125)
              } else {
                %18 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc126)
                %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc126)
                cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc127)
              } loc(#loc237)
            } loc(#loc234)
          } loc(#loc233)
        } loc(#loc231)
      } loc(#loc230)
    } loc(#loc229)
    cir.return loc(#loc90)
  } loc(#loc223)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc240)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc132)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc132)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc241)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc205)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc136)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc136)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc140)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc140)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc141)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc142)
        %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc142)
        cir.store %7, %0 : !s8i, !cir.ptr<!s8i> loc(#loc244)
      } loc(#loc243)
    } loc(#loc242)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc186)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc146)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc146)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc150)
          %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc150)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc151)
          %9 = cir.cmp(gt, %7, %8) : !s32i, !s32i loc(#loc248)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc152)
          cir.if %10 {
            %11 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc250)
            %12 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc156)
            %13 = cir.cast(integral, %12 : !s8i), !s32i loc(#loc156)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc155)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc156)
            %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc156)
            cir.store %16, %11 : !s8i, !cir.ptr<!s8i> loc(#loc250)
            %17 = cir.load %11 : !cir.ptr<!s8i>, !s8i loc(#loc157)
            cir.call @printHexCharLine(%17) : (!s8i) -> () loc(#loc158)
          } loc(#loc249)
        } loc(#loc247)
      } loc(#loc246)
    } loc(#loc245)
    cir.return loc(#loc129)
  } loc(#loc239)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc252)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc163)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc163)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc253)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc186)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc167)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc167)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc169)
        %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc169)
        cir.store %7, %0 : !s8i, !cir.ptr<!s8i> loc(#loc256)
      } loc(#loc255)
    } loc(#loc254)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc186)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc173)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc173)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc177)
          %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc177)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc178)
          %9 = cir.cmp(gt, %7, %8) : !s32i, !s32i loc(#loc260)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc179)
          cir.if %10 {
            %11 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc262)
            %12 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc183)
            %13 = cir.cast(integral, %12 : !s8i), !s32i loc(#loc183)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc182)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc183)
            %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc183)
            cir.store %16, %11 : !s8i, !cir.ptr<!s8i> loc(#loc262)
            %17 = cir.load %11 : !cir.ptr<!s8i>, !s8i loc(#loc184)
            cir.call @printHexCharLine(%17) : (!s8i) -> () loc(#loc185)
          } loc(#loc261)
        } loc(#loc259)
      } loc(#loc258)
    } loc(#loc257)
    cir.return loc(#loc160)
  } loc(#loc251)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_multiply_05.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":23:1)
#loc2 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":23:25)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":28:1)
#loc6 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":46:1)
#loc7 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":30:5)
#loc8 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":30:10)
#loc9 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":31:12)
#loc10 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":31:5)
#loc11 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":32:5)
#loc12 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":36:5)
#loc13 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":32:8)
#loc14 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":33:5)
#loc15 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":35:16)
#loc16 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":35:9)
#loc17 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":37:5)
#loc18 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":45:5)
#loc19 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":37:8)
#loc20 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":38:5)
#loc21 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":39:9)
#loc22 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":44:9)
#loc23 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":39:12)
#loc24 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":39:19)
#loc25 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":39:17)
#loc26 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":40:9)
#loc27 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":42:13)
#loc28 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":42:34)
#loc29 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":42:27)
#loc30 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":43:30)
#loc31 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":43:13)
#loc32 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":160:1)
#loc33 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":166:1)
#loc34 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":162:5)
#loc35 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":162:14)
#loc36 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":163:5)
#loc37 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":163:14)
#loc38 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":164:5)
#loc39 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":164:14)
#loc40 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":165:5)
#loc41 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":165:14)
#loc42 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":24:1)
#loc43 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":24:26)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":65:19)
#loc47 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":79:27)
#loc48 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":53:1)
#loc49 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":83:1)
#loc50 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":55:5)
#loc51 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":55:10)
#loc52 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":56:12)
#loc53 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":56:5)
#loc54 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":57:5)
#loc55 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":61:5)
#loc56 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":57:8)
#loc57 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":58:5)
#loc58 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":60:16)
#loc59 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":60:9)
#loc60 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":62:5)
#loc61 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":82:5)
#loc62 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":62:8)
#loc63 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":63:5)
#loc64 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":66:5)
#loc65 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":68:5)
#loc66 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":65:9)
#loc67 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":69:9)
#loc68 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":81:9)
#loc69 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":69:12)
#loc70 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":69:19)
#loc71 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":69:17)
#loc72 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":70:9)
#loc73 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":72:13)
#loc74 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":80:13)
#loc75 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":72:17)
#loc76 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":72:25)
#loc77 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":72:34)
#loc78 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":72:35)
#loc79 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":72:22)
#loc80 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":73:13)
#loc81 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":76:13)
#loc82 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":78:13)
#loc83 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":74:17)
#loc84 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":74:38)
#loc85 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":74:31)
#loc86 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":75:34)
#loc87 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":75:17)
#loc88 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":79:17)
#loc89 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":86:1)
#loc90 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":111:1)
#loc91 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":88:5)
#loc92 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":88:10)
#loc93 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":89:12)
#loc94 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":89:5)
#loc95 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":90:5)
#loc96 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":94:5)
#loc97 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":90:8)
#loc98 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":91:5)
#loc99 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":93:16)
#loc100 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":93:9)
#loc101 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":95:5)
#loc102 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":110:5)
#loc103 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":95:8)
#loc104 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":96:5)
#loc105 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":97:9)
#loc106 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":109:9)
#loc107 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":97:12)
#loc108 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":97:19)
#loc109 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":97:17)
#loc110 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":98:9)
#loc111 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":100:13)
#loc112 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":108:13)
#loc113 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":100:17)
#loc114 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":100:25)
#loc115 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":100:34)
#loc116 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":100:35)
#loc117 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":100:22)
#loc118 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":101:13)
#loc119 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":104:13)
#loc120 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":106:13)
#loc121 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":102:17)
#loc122 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":102:38)
#loc123 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":102:31)
#loc124 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":103:34)
#loc125 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":103:17)
#loc126 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":107:27)
#loc127 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":107:17)
#loc128 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":114:1)
#loc129 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":137:1)
#loc130 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":116:5)
#loc131 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":116:10)
#loc132 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":117:12)
#loc133 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":117:5)
#loc134 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":118:5)
#loc135 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":127:5)
#loc136 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":118:8)
#loc137 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":119:5)
#loc138 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":122:5)
#loc139 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":124:5)
#loc140 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":121:19)
#loc141 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":121:9)
#loc142 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":126:16)
#loc143 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":126:9)
#loc144 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":128:5)
#loc145 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":136:5)
#loc146 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":128:8)
#loc147 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":129:5)
#loc148 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":130:9)
#loc149 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":135:9)
#loc150 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":130:12)
#loc151 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":130:19)
#loc152 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":130:17)
#loc153 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":131:9)
#loc154 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":133:13)
#loc155 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":133:34)
#loc156 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":133:27)
#loc157 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":134:30)
#loc158 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":134:13)
#loc159 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":140:1)
#loc160 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":158:1)
#loc161 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":142:5)
#loc162 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":142:10)
#loc163 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":143:12)
#loc164 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":143:5)
#loc165 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":144:5)
#loc166 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":148:5)
#loc167 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":144:8)
#loc168 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":145:5)
#loc169 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":147:16)
#loc170 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":147:9)
#loc171 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":149:5)
#loc172 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":157:5)
#loc173 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":149:8)
#loc174 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":150:5)
#loc175 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":151:9)
#loc176 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":156:9)
#loc177 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":151:12)
#loc178 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":151:19)
#loc179 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":151:17)
#loc180 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":152:9)
#loc181 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":154:13)
#loc182 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":154:34)
#loc183 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":154:27)
#loc184 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":155:30)
#loc185 = loc("CWE190_Integer_Overflow__char_max_multiply_05.c":155:13)
#loc186 = loc(fused[#loc1, #loc2])
#loc187 = loc(fused[#loc3, #loc4])
#loc188 = loc(fused[#loc5, #loc6])
#loc189 = loc(fused[#loc7, #loc8])
#loc190 = loc(fused[#loc10, #loc9])
#loc191 = loc(fused[#loc11, #loc12])
#loc192 = loc(fused[#loc14, #loc12])
#loc193 = loc(fused[#loc16, #loc15])
#loc194 = loc(fused[#loc17, #loc18])
#loc195 = loc(fused[#loc20, #loc18])
#loc196 = loc(fused[#loc21, #loc22])
#loc197 = loc(fused[#loc23, #loc24])
#loc198 = loc(fused[#loc26, #loc22])
#loc199 = loc(fused[#loc27, #loc28])
#loc200 = loc(fused[#loc32, #loc33])
#loc201 = loc(fused[#loc34, #loc35])
#loc202 = loc(fused[#loc36, #loc37])
#loc203 = loc(fused[#loc38, #loc39])
#loc204 = loc(fused[#loc40, #loc41])
#loc205 = loc(fused[#loc42, #loc43])
#loc206 = loc(fused[#loc44, #loc45])
#loc207 = loc(fused[#loc48, #loc49])
#loc208 = loc(fused[#loc50, #loc51])
#loc209 = loc(fused[#loc53, #loc52])
#loc210 = loc(fused[#loc54, #loc55])
#loc211 = loc(fused[#loc57, #loc55])
#loc212 = loc(fused[#loc59, #loc58])
#loc213 = loc(fused[#loc60, #loc61])
#loc214 = loc(fused[#loc63, #loc64, #loc65, #loc61])
#loc215 = loc(fused[#loc67, #loc68])
#loc216 = loc(fused[#loc69, #loc70])
#loc217 = loc(fused[#loc72, #loc68])
#loc218 = loc(fused[#loc73, #loc74])
#loc219 = loc(fused[#loc76, #loc77])
#loc220 = loc(fused[#loc75, #loc78])
#loc221 = loc(fused[#loc80, #loc81, #loc82, #loc74])
#loc222 = loc(fused[#loc83, #loc84])
#loc223 = loc(fused[#loc89, #loc90])
#loc224 = loc(fused[#loc91, #loc92])
#loc225 = loc(fused[#loc94, #loc93])
#loc226 = loc(fused[#loc95, #loc96])
#loc227 = loc(fused[#loc98, #loc96])
#loc228 = loc(fused[#loc100, #loc99])
#loc229 = loc(fused[#loc101, #loc102])
#loc230 = loc(fused[#loc104, #loc102])
#loc231 = loc(fused[#loc105, #loc106])
#loc232 = loc(fused[#loc107, #loc108])
#loc233 = loc(fused[#loc110, #loc106])
#loc234 = loc(fused[#loc111, #loc112])
#loc235 = loc(fused[#loc114, #loc115])
#loc236 = loc(fused[#loc113, #loc116])
#loc237 = loc(fused[#loc118, #loc119, #loc120, #loc112])
#loc238 = loc(fused[#loc121, #loc122])
#loc239 = loc(fused[#loc128, #loc129])
#loc240 = loc(fused[#loc130, #loc131])
#loc241 = loc(fused[#loc133, #loc132])
#loc242 = loc(fused[#loc134, #loc135])
#loc243 = loc(fused[#loc137, #loc138, #loc139, #loc135])
#loc244 = loc(fused[#loc143, #loc142])
#loc245 = loc(fused[#loc144, #loc145])
#loc246 = loc(fused[#loc147, #loc145])
#loc247 = loc(fused[#loc148, #loc149])
#loc248 = loc(fused[#loc150, #loc151])
#loc249 = loc(fused[#loc153, #loc149])
#loc250 = loc(fused[#loc154, #loc155])
#loc251 = loc(fused[#loc159, #loc160])
#loc252 = loc(fused[#loc161, #loc162])
#loc253 = loc(fused[#loc164, #loc163])
#loc254 = loc(fused[#loc165, #loc166])
#loc255 = loc(fused[#loc168, #loc166])
#loc256 = loc(fused[#loc170, #loc169])
#loc257 = loc(fused[#loc171, #loc172])
#loc258 = loc(fused[#loc174, #loc172])
#loc259 = loc(fused[#loc175, #loc176])
#loc260 = loc(fused[#loc177, #loc178])
#loc261 = loc(fused[#loc180, #loc176])
#loc262 = loc(fused[#loc181, #loc182])
