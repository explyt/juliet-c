!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_function_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_function_01_bad() extra(#fn_attr) {
    %0 = cir.get_global @helperBad : !cir.ptr<!cir.func<!void ()>> loc(#loc22)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc3)
    cir.return loc(#loc2)
  } loc(#loc21)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_function_01_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc24)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc7)
    cir.return loc(#loc6)
  } loc(#loc23)
  cir.func no_proto internal private @helperBad() extra(#fn_attr) {
    cir.return loc(#loc10)
  } loc(#loc25)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    %0 = cir.get_global @helperGood1 : !cir.ptr<!cir.func<!void ()>> loc(#loc27)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc13)
    cir.return loc(#loc12)
  } loc(#loc26)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc28)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"helperGood1()\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc17)
  cir.func no_proto internal private @helperGood1() extra(#fn_attr) {
    %0 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc17)
    %1 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc17)
    cir.call @printLine(%1) : (!cir.ptr<!s8i>) -> () loc(#loc20)
    cir.return loc(#loc19)
  } loc(#loc29)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_function_01.c":0:0)
#loc1 = loc("CWE398_Poor_Code_Quality__empty_function_01.c":15:1)
#loc2 = loc("CWE398_Poor_Code_Quality__empty_function_01.c":18:1)
#loc3 = loc("CWE398_Poor_Code_Quality__empty_function_01.c":17:5)
#loc4 = loc("CWE398_Poor_Code_Quality__empty_function_01.c":17:15)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_function_01.c":36:1)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_function_01.c":39:1)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_function_01.c":38:5)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_function_01.c":38:11)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_function_01.c":10:1)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_function_01.c":13:1)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_function_01.c":31:1)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_function_01.c":34:1)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_function_01.c":33:5)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_function_01.c":33:17)
#loc15 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc16 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_function_01.c":28:15)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_function_01.c":25:1)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_function_01.c":29:1)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_function_01.c":28:5)
#loc21 = loc(fused[#loc1, #loc2])
#loc22 = loc(fused[#loc3, #loc4])
#loc23 = loc(fused[#loc5, #loc6])
#loc24 = loc(fused[#loc7, #loc8])
#loc25 = loc(fused[#loc9, #loc10])
#loc26 = loc(fused[#loc11, #loc12])
#loc27 = loc(fused[#loc13, #loc14])
#loc28 = loc(fused[#loc15, #loc16])
#loc29 = loc(fused[#loc18, #loc19])
