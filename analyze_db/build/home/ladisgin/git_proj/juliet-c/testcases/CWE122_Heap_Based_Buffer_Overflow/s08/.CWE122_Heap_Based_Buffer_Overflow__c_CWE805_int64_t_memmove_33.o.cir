!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc98)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc99)
  cir.func private @printLongLongLine(!s64i) loc(#loc100)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc101)
  cir.func @_ZN62CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc103)
    %1 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc104)
    %2 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc105)
    %3 = cir.alloca !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc106)
    cir.store %2, %3 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>> loc(#loc18)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc19)
    cir.store %4, %2 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc107)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
    %6 = cir.const #cir.int<50> : !s32i loc(#loc22)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc22)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc108)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc109)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc110)
    cir.store %11, %2 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc111)
    cir.br ^bb1 loc(#loc112)
  ^bb1:  // pred: ^bb0
    %12 = cir.load %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc29)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc30)
    %14 = cir.cmp(eq, %12, %13) : !cir.ptr<!s64i>, !cir.bool loc(#loc113)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc114)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc32)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc34)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
    cir.br ^bb3 loc(#loc28)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc28)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc115)
  ^bb5:  // pred: ^bb4
    %18 = cir.load %3 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc12)
    %19 = cir.load %18 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc12)
    cir.store %19, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc103)
    cir.br ^bb6 loc(#loc116)
  ^bb6:  // pred: ^bb5
    %20 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc104)
    cir.store %20, %1 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc104)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc39)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc39)
    %23 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc40)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc40)
    %25 = cir.const #cir.int<100> : !s32i loc(#loc41)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc41)
    %27 = cir.const #cir.int<8> : !u64i loc(#loc117)
    %28 = cir.binop(mul, %26, %27) : !u64i loc(#loc118)
    cir.libc.memmove %28 bytes from %24 to %22 : !cir.ptr<!void>, !u64i loc(#loc119)
    %29 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc46)
    %30 = cir.const #cir.int<0> : !s32i loc(#loc47)
    %31 = cir.ptr_stride(%29 : !cir.ptr<!s64i>, %30 : !s32i), !cir.ptr<!s64i> loc(#loc48)
    %32 = cir.load %31 : !cir.ptr<!s64i>, !s64i loc(#loc46)
    cir.call @printLongLongLine(%32) : (!s64i) -> () loc(#loc49)
    %33 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc50)
    %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc51)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc51)
    cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc50)
    cir.br ^bb7 loc(#loc38)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc36)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc10)
  } loc(#loc102)
  cir.func internal private @_ZN62CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc121)
    %1 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc122)
    %2 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc123)
    %3 = cir.alloca !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc124)
    cir.store %2, %3 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>> loc(#loc61)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc62)
    cir.store %4, %2 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc125)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc64)
    %6 = cir.const #cir.int<100> : !s32i loc(#loc65)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc65)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc126)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc127)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc64)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc128)
    cir.store %11, %2 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc129)
    cir.br ^bb1 loc(#loc130)
  ^bb1:  // pred: ^bb0
    %12 = cir.load %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc72)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc73)
    %14 = cir.cmp(eq, %12, %13) : !cir.ptr<!s64i>, !cir.bool loc(#loc131)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc132)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc75)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc76)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc77)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc75)
    cir.br ^bb3 loc(#loc71)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc71)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc133)
  ^bb5:  // pred: ^bb4
    %18 = cir.load %3 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc55)
    %19 = cir.load %18 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc55)
    cir.store %19, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc121)
    cir.br ^bb6 loc(#loc134)
  ^bb6:  // pred: ^bb5
    %20 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc122)
    cir.store %20, %1 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc122)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc82)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc82)
    %23 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc83)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc83)
    %25 = cir.const #cir.int<100> : !s32i loc(#loc84)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc84)
    %27 = cir.const #cir.int<8> : !u64i loc(#loc135)
    %28 = cir.binop(mul, %26, %27) : !u64i loc(#loc136)
    cir.libc.memmove %28 bytes from %24 to %22 : !cir.ptr<!void>, !u64i loc(#loc137)
    %29 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc89)
    %30 = cir.const #cir.int<0> : !s32i loc(#loc90)
    %31 = cir.ptr_stride(%29 : !cir.ptr<!s64i>, %30 : !s32i), !cir.ptr<!s64i> loc(#loc91)
    %32 = cir.load %31 : !cir.ptr<!s64i>, !s64i loc(#loc89)
    cir.call @printLongLongLine(%32) : (!s64i) -> () loc(#loc92)
    %33 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc93)
    %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc94)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc94)
    cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc93)
    cir.br ^bb7 loc(#loc81)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc79)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc53)
  } loc(#loc120)
  cir.func @_ZN62CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN62CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33L7goodG2BEv() : () -> () loc(#loc97)
    cir.return loc(#loc96)
  } loc(#loc138)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":24:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":42:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":33:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":33:26)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":35:13)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":35:37)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":26:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":26:15)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":27:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":27:26)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":28:12)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":28:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":30:23)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":30:30)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":30:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":30:47)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":30:48)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":30:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":31:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":31:33)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":31:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":31:17)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":31:23)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":31:24)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":31:30)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":31:29)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":32:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":41:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":34:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":40:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":37:21)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":37:27)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":37:35)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":37:39)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":37:53)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":37:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":37:54)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":38:31)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":38:36)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":38:37)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":38:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":39:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":39:18)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":49:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":67:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":58:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":58:26)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":60:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":60:37)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":51:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":51:15)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":52:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":52:26)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":53:12)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":53:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":55:23)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":55:30)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":55:34)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":55:48)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":55:49)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":55:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":56:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":56:33)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":56:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":56:17)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":56:23)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":56:24)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":56:30)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":56:29)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":57:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":66:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":59:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":65:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":62:21)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":62:27)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":62:35)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":62:39)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":62:53)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":62:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":62:54)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":63:31)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":63:36)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":63:37)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":63:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":64:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":64:18)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":69:1)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":72:1)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_33.cpp":71:5)
#loc98 = loc(fused[#loc1, #loc2])
#loc99 = loc(fused[#loc3, #loc4])
#loc100 = loc(fused[#loc5, #loc6])
#loc101 = loc(fused[#loc7, #loc8])
#loc102 = loc(fused[#loc9, #loc10])
#loc103 = loc(fused[#loc11, #loc12])
#loc104 = loc(fused[#loc13, #loc14])
#loc105 = loc(fused[#loc15, #loc16])
#loc106 = loc(fused[#loc17, #loc18])
#loc107 = loc(fused[#loc20, #loc19])
#loc108 = loc(fused[#loc23, #loc24])
#loc109 = loc(fused[#loc22, #loc24])
#loc110 = loc(fused[#loc21, #loc25])
#loc111 = loc(fused[#loc26, #loc25])
#loc112 = loc(fused[#loc27, #loc28])
#loc113 = loc(fused[#loc29, #loc30])
#loc114 = loc(fused[#loc31, #loc28])
#loc115 = loc(fused[#loc35, #loc36])
#loc116 = loc(fused[#loc37, #loc38])
#loc117 = loc(fused[#loc42, #loc43])
#loc118 = loc(fused[#loc41, #loc43])
#loc119 = loc(fused[#loc44, #loc45])
#loc120 = loc(fused[#loc52, #loc53])
#loc121 = loc(fused[#loc54, #loc55])
#loc122 = loc(fused[#loc56, #loc57])
#loc123 = loc(fused[#loc58, #loc59])
#loc124 = loc(fused[#loc60, #loc61])
#loc125 = loc(fused[#loc63, #loc62])
#loc126 = loc(fused[#loc66, #loc67])
#loc127 = loc(fused[#loc65, #loc67])
#loc128 = loc(fused[#loc64, #loc68])
#loc129 = loc(fused[#loc69, #loc68])
#loc130 = loc(fused[#loc70, #loc71])
#loc131 = loc(fused[#loc72, #loc73])
#loc132 = loc(fused[#loc74, #loc71])
#loc133 = loc(fused[#loc78, #loc79])
#loc134 = loc(fused[#loc80, #loc81])
#loc135 = loc(fused[#loc85, #loc86])
#loc136 = loc(fused[#loc84, #loc86])
#loc137 = loc(fused[#loc87, #loc88])
#loc138 = loc(fused[#loc95, #loc96])
