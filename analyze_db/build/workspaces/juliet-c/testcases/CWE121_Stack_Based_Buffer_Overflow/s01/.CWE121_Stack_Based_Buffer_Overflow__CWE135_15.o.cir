!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc218)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc4)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc219)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc220)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc222)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc223)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc17)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
          %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
          cir.store %5, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc225)
          cir.break loc(#loc20)
        } loc(#loc18)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc4)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc4)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc22)
          cir.break loc(#loc23)
        } loc(#loc21)
        cir.yield loc(#loc15)
      } loc(#loc15)
    } loc(#loc224)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc26)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc228)
            %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc229)
            %5 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc34)
            %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc35)
            %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc35)
            %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc34)
            cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc228)
            %9 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc33)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc33)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc33)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc33)
            %13 = cir.const #cir.int<4> : !u64i loc(#loc33)
            %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc33)
            %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc33)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc33)
            cir.store %16, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc229)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc36)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc36)
            %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc37)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc37)
            %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc38)
            %22 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc39)
            %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc39)
            cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc40)
          } loc(#loc227)
          cir.break loc(#loc41)
        } loc(#loc27)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc43)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc43)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc44)
          cir.break loc(#loc45)
        } loc(#loc42)
        cir.yield loc(#loc24)
      } loc(#loc24)
    } loc(#loc226)
    cir.return loc(#loc10)
  } loc(#loc221)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc231)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc48)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc232)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc50)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc233)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc52)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc234)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc54)
    cir.return loc(#loc47)
  } loc(#loc230)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc235)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc236)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc238)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc64)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc239)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc68)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc70)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc70)
          %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc70)
          cir.store %5, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc241)
          cir.break loc(#loc72)
        } loc(#loc69)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc74)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc74)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc75)
          cir.break loc(#loc76)
        } loc(#loc73)
        cir.yield loc(#loc66)
      } loc(#loc66)
    } loc(#loc240)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc79)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc81)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc81)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc82)
          cir.break loc(#loc83)
        } loc(#loc80)
        cir.case(default, []) {
          cir.scope {
            %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc244)
            %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc245)
            %5 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc91)
            %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc92)
            %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc92)
            %8 = cir.call @wcslen(%7) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc91)
            cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc244)
            %9 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc90)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc90)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc90)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc90)
            %13 = cir.const #cir.int<4> : !u64i loc(#loc90)
            %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc90)
            %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc90)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc90)
            cir.store %16, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc245)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc93)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc93)
            %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc94)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc94)
            %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc95)
            %22 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc96)
            %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc96)
            cir.call @printWLine(%23) : (!cir.ptr<!s32i>) -> () loc(#loc97)
          } loc(#loc243)
          cir.break loc(#loc98)
        } loc(#loc84)
        cir.yield loc(#loc77)
      } loc(#loc77)
    } loc(#loc242)
    cir.return loc(#loc61)
  } loc(#loc237)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc247)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc103)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc248)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc107)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc109)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc109)
          %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc109)
          cir.store %5, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc250)
          cir.break loc(#loc111)
        } loc(#loc108)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc113)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc113)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc114)
          cir.break loc(#loc115)
        } loc(#loc112)
        cir.yield loc(#loc105)
      } loc(#loc105)
    } loc(#loc249)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc118)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc253)
            %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc254)
            %5 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc126)
            %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc127)
            %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc127)
            %8 = cir.call @wcslen(%7) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc126)
            cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc253)
            %9 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc125)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc125)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc125)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc125)
            %13 = cir.const #cir.int<4> : !u64i loc(#loc125)
            %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc125)
            %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc125)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc125)
            cir.store %16, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc254)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc128)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc128)
            %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc129)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc129)
            %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc130)
            %22 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc131)
            %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc131)
            cir.call @printWLine(%23) : (!cir.ptr<!s32i>) -> () loc(#loc132)
          } loc(#loc252)
          cir.break loc(#loc133)
        } loc(#loc119)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc135)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc135)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc136)
          cir.break loc(#loc137)
        } loc(#loc134)
        cir.yield loc(#loc116)
      } loc(#loc116)
    } loc(#loc251)
    cir.return loc(#loc100)
  } loc(#loc246)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc138)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc255)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc257)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc145)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc258)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc149)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc151)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc151)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc152)
          cir.break loc(#loc153)
        } loc(#loc150)
        cir.case(default, []) {
          %3 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc138)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc138)
          %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc138)
          cir.store %5, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc260)
          cir.break loc(#loc156)
        } loc(#loc154)
        cir.yield loc(#loc147)
      } loc(#loc147)
    } loc(#loc259)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc159)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc263)
            %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc264)
            %5 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc167)
            %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc168)
            %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc168)
            %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc167)
            cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc263)
            %9 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc166)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc166)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc166)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc166)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc166)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc166)
            %15 = cir.binop(mul, %12, %14) : !u64i loc(#loc166)
            %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc166)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc166)
            cir.store %17, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc264)
            %18 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc169)
            %19 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc170)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc170)
            %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc171)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc171)
            %23 = cir.call @strcpy(%20, %22) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc169)
            %24 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc172)
            %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc172)
            cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc173)
          } loc(#loc262)
          cir.break loc(#loc174)
        } loc(#loc160)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc176)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc176)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc177)
          cir.break loc(#loc178)
        } loc(#loc175)
        cir.yield loc(#loc157)
      } loc(#loc157)
    } loc(#loc261)
    cir.return loc(#loc142)
  } loc(#loc256)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc266)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc183)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc267)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc187)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc189)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc189)
          %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc189)
          cir.store %5, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc269)
          cir.break loc(#loc191)
        } loc(#loc188)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc193)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc193)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc194)
          cir.break loc(#loc195)
        } loc(#loc192)
        cir.yield loc(#loc185)
      } loc(#loc185)
    } loc(#loc268)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc198)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc272)
            %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc273)
            %5 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc206)
            %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc207)
            %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc207)
            %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc206)
            cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc272)
            %9 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc205)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc205)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc205)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc205)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc205)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc205)
            %15 = cir.binop(mul, %12, %14) : !u64i loc(#loc205)
            %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc205)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc205)
            cir.store %17, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc273)
            %18 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc208)
            %19 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc209)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc209)
            %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc210)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc210)
            %23 = cir.call @strcpy(%20, %22) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc208)
            %24 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc211)
            %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc211)
            cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc212)
          } loc(#loc271)
          cir.break loc(#loc213)
        } loc(#loc199)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc215)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc215)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc216)
          cir.break loc(#loc217)
        } loc(#loc214)
        cir.yield loc(#loc196)
      } loc(#loc196)
    } loc(#loc270)
    cir.return loc(#loc180)
  } loc(#loc265)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":35:24)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":39:19)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/wchar.h":98:1)
#loc8 = loc("/usr/include/wchar.h":100:14)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":27:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":58:1)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":29:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":29:12)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":30:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":30:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":31:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":41:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":31:12)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":33:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":35:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":36:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":37:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":39:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":40:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":42:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":57:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":42:12)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":44:5)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":45:5)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":51:5)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":47:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":47:45)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":48:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":48:31)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":47:26)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":47:41)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":49:22)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":49:28)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":49:15)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":50:27)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":50:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":52:5)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":53:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":55:19)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":55:9)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":56:9)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":200:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":206:1)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":202:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":202:14)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":203:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":203:14)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":204:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":204:14)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":205:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":205:14)
#loc56 = loc("/usr/include/wchar.h":247:1)
#loc57 = loc("/usr/include/wchar.h":247:51)
#loc58 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc59 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":65:1)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":96:1)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":67:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":67:12)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":68:12)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":68:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":69:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":79:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":69:12)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":71:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":73:24)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":73:9)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":74:9)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":75:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":77:19)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":77:9)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":78:9)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":80:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":95:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":80:12)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":82:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":84:19)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":84:9)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":85:9)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":86:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":87:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":93:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":89:9)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":89:48)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":90:9)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":90:31)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":89:26)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":89:44)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":91:22)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":91:28)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":91:15)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":92:31)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":92:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":94:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":99:1)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":130:1)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":101:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":101:12)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":102:12)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":102:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":103:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":113:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":103:12)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":105:5)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":107:24)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":107:9)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":108:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":109:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":111:19)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":111:9)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":112:9)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":114:5)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":129:5)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":114:12)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":116:5)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":117:5)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":123:5)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":119:9)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":119:48)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":120:9)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":120:31)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":119:26)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":119:44)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":121:22)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":121:28)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":121:15)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":122:31)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":122:9)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":124:5)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":125:5)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":127:19)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":127:9)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":128:9)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":145:24)
#loc139 = loc("/usr/include/string.h":141:1)
#loc140 = loc("/usr/include/string.h":142:14)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":133:1)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":164:1)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":135:5)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":135:12)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":136:12)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":136:5)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":137:5)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":147:5)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":137:12)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":139:5)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":141:19)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":141:9)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":142:9)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":143:5)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":145:9)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":146:9)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":148:5)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":163:5)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":148:12)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":150:5)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":151:5)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":157:5)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":153:9)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":153:45)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":154:9)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":154:31)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":153:26)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":153:41)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":155:15)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":155:22)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":155:28)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":156:27)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":156:9)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":158:5)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":159:5)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":161:19)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":161:9)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":162:9)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":167:1)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":198:1)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":169:5)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":169:12)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":170:12)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":170:5)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":171:5)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":181:5)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":171:12)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":173:5)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":175:24)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":175:9)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":176:9)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":177:5)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":179:19)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":179:9)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":180:9)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":182:5)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":197:5)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":182:12)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":184:5)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":185:5)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":191:5)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":187:9)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":187:45)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":188:9)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":188:31)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":187:26)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":187:41)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":189:15)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":189:22)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":189:28)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":190:27)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":190:9)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":192:5)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":193:5)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":195:19)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":195:9)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c":196:9)
#loc218 = loc(fused[#loc2, #loc3])
#loc219 = loc(fused[#loc5, #loc6])
#loc220 = loc(fused[#loc7, #loc8])
#loc221 = loc(fused[#loc9, #loc10])
#loc222 = loc(fused[#loc11, #loc12])
#loc223 = loc(fused[#loc14, #loc13])
#loc224 = loc(fused[#loc15, #loc16])
#loc225 = loc(fused[#loc19, #loc1])
#loc226 = loc(fused[#loc24, #loc25])
#loc227 = loc(fused[#loc28, #loc29])
#loc228 = loc(fused[#loc30, #loc31])
#loc229 = loc(fused[#loc32, #loc33])
#loc230 = loc(fused[#loc46, #loc47])
#loc231 = loc(fused[#loc48, #loc49])
#loc232 = loc(fused[#loc50, #loc51])
#loc233 = loc(fused[#loc52, #loc53])
#loc234 = loc(fused[#loc54, #loc55])
#loc235 = loc(fused[#loc56, #loc57])
#loc236 = loc(fused[#loc58, #loc59])
#loc237 = loc(fused[#loc60, #loc61])
#loc238 = loc(fused[#loc62, #loc63])
#loc239 = loc(fused[#loc65, #loc64])
#loc240 = loc(fused[#loc66, #loc67])
#loc241 = loc(fused[#loc71, #loc70])
#loc242 = loc(fused[#loc77, #loc78])
#loc243 = loc(fused[#loc85, #loc86])
#loc244 = loc(fused[#loc87, #loc88])
#loc245 = loc(fused[#loc89, #loc90])
#loc246 = loc(fused[#loc99, #loc100])
#loc247 = loc(fused[#loc101, #loc102])
#loc248 = loc(fused[#loc104, #loc103])
#loc249 = loc(fused[#loc105, #loc106])
#loc250 = loc(fused[#loc110, #loc109])
#loc251 = loc(fused[#loc116, #loc117])
#loc252 = loc(fused[#loc120, #loc121])
#loc253 = loc(fused[#loc122, #loc123])
#loc254 = loc(fused[#loc124, #loc125])
#loc255 = loc(fused[#loc139, #loc140])
#loc256 = loc(fused[#loc141, #loc142])
#loc257 = loc(fused[#loc143, #loc144])
#loc258 = loc(fused[#loc146, #loc145])
#loc259 = loc(fused[#loc147, #loc148])
#loc260 = loc(fused[#loc155, #loc138])
#loc261 = loc(fused[#loc157, #loc158])
#loc262 = loc(fused[#loc161, #loc162])
#loc263 = loc(fused[#loc163, #loc164])
#loc264 = loc(fused[#loc165, #loc166])
#loc265 = loc(fused[#loc179, #loc180])
#loc266 = loc(fused[#loc181, #loc182])
#loc267 = loc(fused[#loc184, #loc183])
#loc268 = loc(fused[#loc185, #loc186])
#loc269 = loc(fused[#loc190, #loc189])
#loc270 = loc(fused[#loc196, #loc197])
#loc271 = loc(fused[#loc200, #loc201])
#loc272 = loc(fused[#loc202, #loc203])
#loc273 = loc(fused[#loc204, #loc205])
