!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc22 = loc("CWE617_Reachable_Assertion__rand_12.c":33:16)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc52)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc53)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc7)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__rand_12.c\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc7)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__rand_12_bad()\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc56)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    cir.br ^bb1 loc(#loc58)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc59)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc59)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc17)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc60)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc22)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc22)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc22)
  ^bb3:  // pred: ^bb2
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc22)
    %13 = cir.const #cir.int<30> : !s32i loc(#loc22)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc22)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc22)
    %17 = cir.const #cir.int<15> : !s32i loc(#loc22)
    %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc22)
    %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc22)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc22)
    %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc22)
    cir.br ^bb5(%22 : !u32i) loc(#loc22)
  ^bb4:  // pred: ^bb2
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc22)
    %25 = cir.const #cir.int<30> : !s32i loc(#loc22)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc22)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc22)
    %29 = cir.const #cir.int<15> : !s32i loc(#loc22)
    %30 = cir.shift(left, %28 : !u32i, %29 : !s32i) -> !u32i loc(#loc22)
    %31 = cir.binop(xor, %26, %30) : !u32i loc(#loc22)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc22)
    %34 = cir.binop(xor, %31, %33) : !u32i loc(#loc22)
    %35 = cir.unary(minus, %34) : !u32i, !u32i loc(#loc22)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc22)
    %38 = cir.binop(sub, %35, %37) : !u32i loc(#loc22)
    cir.br ^bb5(%38 : !u32i) loc(#loc22)
  ^bb5(%39: !u32i loc("CWE617_Reachable_Assertion__rand_12.c":33:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc22)
  ^bb6:  // pred: ^bb5
    %40 = cir.cast(integral, %39 : !u32i), !s32i loc(#loc22)
    cir.store %40, %0 : !s32i, !cir.ptr<!s32i> loc(#loc61)
    cir.br ^bb8 loc(#loc20)
  ^bb7:  // pred: ^bb1
    %41 = cir.const #cir.int<5> : !s32i loc(#loc24)
    %42 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %43 = cir.binop(add, %41, %42) nsw : !s32i loc(#loc24)
    cir.store %43, %0 : !s32i, !cir.ptr<!s32i> loc(#loc62)
    cir.br ^bb8 loc(#loc16)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc16)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc7)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc7)
  ^bb11:  // pred: ^bb10
    %44 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc7)
    %45 = cir.const #cir.int<5> : !s32i loc(#loc7)
    %46 = cir.cmp(gt, %44, %45) : !s32i, !cir.bool loc(#loc7)
    cir.brcond %46 ^bb12, ^bb13 loc(#loc7)
  ^bb12:  // pred: ^bb11
    cir.br ^bb14 loc(#loc7)
  ^bb13:  // pred: ^bb11
    %47 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc7)
    %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc7)
    %49 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc7)
    %50 = cir.cast(array_to_ptrdecay, %49 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc7)
    %51 = cir.const #cir.int<41> : !s32i loc(#loc7)
    %52 = cir.cast(integral, %51 : !s32i), !u32i loc(#loc7)
    %53 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc7)
    %54 = cir.cast(array_to_ptrdecay, %53 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @__assert_fail(%48, %50, %52, %54) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc7)
    cir.br ^bb14 loc(#loc7)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc7)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc7)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc9)
  } loc(#loc55)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc64)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    cir.return loc(#loc28)
  } loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc31)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc66)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc37)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc67)
    cir.br ^bb1 loc(#loc68)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc69)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc69)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc41)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc41)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc70)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<5> : !s32i loc(#loc46)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc46)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    cir.br ^bb4 loc(#loc44)
  ^bb3:  // pred: ^bb1
    %10 = cir.const #cir.int<5> : !s32i loc(#loc49)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc49)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc72)
    cir.br ^bb4 loc(#loc40)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc40)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc31)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc31)
  ^bb7:  // pred: ^bb6
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    %14 = cir.const #cir.int<5> : !s32i loc(#loc31)
    %15 = cir.cmp(gt, %13, %14) : !s32i, !cir.bool loc(#loc31)
    cir.brcond %15 ^bb8, ^bb9 loc(#loc31)
  ^bb8:  // pred: ^bb7
    cir.br ^bb10 loc(#loc31)
  ^bb9:  // pred: ^bb7
    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc31)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc31)
    %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc31)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc31)
    %20 = cir.const #cir.int<66> : !s32i loc(#loc31)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc31)
    %22 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc31)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc31)
    cir.call @__assert_fail(%17, %19, %21, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc31)
    cir.br ^bb10 loc(#loc31)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc31)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc31)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc33)
  } loc(#loc65)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("/usr/include/assert.h":67:1)
#loc6 = loc("/usr/include/assert.h":69:43)
#loc7 = loc("CWE617_Reachable_Assertion__rand_12.c":41:5)
#loc8 = loc("CWE617_Reachable_Assertion__rand_12.c":25:1)
#loc9 = loc("CWE617_Reachable_Assertion__rand_12.c":42:1)
#loc10 = loc("CWE617_Reachable_Assertion__rand_12.c":27:5)
#loc11 = loc("CWE617_Reachable_Assertion__rand_12.c":27:9)
#loc12 = loc("CWE617_Reachable_Assertion__rand_12.c":29:13)
#loc13 = loc("CWE617_Reachable_Assertion__rand_12.c":29:12)
#loc14 = loc("CWE617_Reachable_Assertion__rand_12.c":29:5)
#loc15 = loc("CWE617_Reachable_Assertion__rand_12.c":30:5)
#loc16 = loc("CWE617_Reachable_Assertion__rand_12.c":39:5)
#loc17 = loc("CWE617_Reachable_Assertion__rand_12.c":30:8)
#loc18 = loc("CWE617_Reachable_Assertion__rand_12.c":30:33)
#loc19 = loc("CWE617_Reachable_Assertion__rand_12.c":31:5)
#loc20 = loc("CWE617_Reachable_Assertion__rand_12.c":34:5)
#loc21 = loc("CWE617_Reachable_Assertion__rand_12.c":36:5)
#loc23 = loc("CWE617_Reachable_Assertion__rand_12.c":33:9)
#loc24 = loc("CWE617_Reachable_Assertion__rand_12.c":38:16)
#loc25 = loc("CWE617_Reachable_Assertion__rand_12.c":38:29)
#loc26 = loc("CWE617_Reachable_Assertion__rand_12.c":38:9)
#loc27 = loc("CWE617_Reachable_Assertion__rand_12.c":69:1)
#loc28 = loc("CWE617_Reachable_Assertion__rand_12.c":72:1)
#loc29 = loc("CWE617_Reachable_Assertion__rand_12.c":71:5)
#loc30 = loc("CWE617_Reachable_Assertion__rand_12.c":71:13)
#loc31 = loc("CWE617_Reachable_Assertion__rand_12.c":66:5)
#loc32 = loc("CWE617_Reachable_Assertion__rand_12.c":50:1)
#loc33 = loc("CWE617_Reachable_Assertion__rand_12.c":67:1)
#loc34 = loc("CWE617_Reachable_Assertion__rand_12.c":52:5)
#loc35 = loc("CWE617_Reachable_Assertion__rand_12.c":52:9)
#loc36 = loc("CWE617_Reachable_Assertion__rand_12.c":54:13)
#loc37 = loc("CWE617_Reachable_Assertion__rand_12.c":54:12)
#loc38 = loc("CWE617_Reachable_Assertion__rand_12.c":54:5)
#loc39 = loc("CWE617_Reachable_Assertion__rand_12.c":55:5)
#loc40 = loc("CWE617_Reachable_Assertion__rand_12.c":64:5)
#loc41 = loc("CWE617_Reachable_Assertion__rand_12.c":55:8)
#loc42 = loc("CWE617_Reachable_Assertion__rand_12.c":55:33)
#loc43 = loc("CWE617_Reachable_Assertion__rand_12.c":56:5)
#loc44 = loc("CWE617_Reachable_Assertion__rand_12.c":59:5)
#loc45 = loc("CWE617_Reachable_Assertion__rand_12.c":61:5)
#loc46 = loc("CWE617_Reachable_Assertion__rand_12.c":58:16)
#loc47 = loc("CWE617_Reachable_Assertion__rand_12.c":58:29)
#loc48 = loc("CWE617_Reachable_Assertion__rand_12.c":58:9)
#loc49 = loc("CWE617_Reachable_Assertion__rand_12.c":63:16)
#loc50 = loc("CWE617_Reachable_Assertion__rand_12.c":63:29)
#loc51 = loc("CWE617_Reachable_Assertion__rand_12.c":63:9)
#loc52 = loc(fused[#loc1, #loc2])
#loc53 = loc(fused[#loc3, #loc4])
#loc54 = loc(fused[#loc5, #loc6])
#loc55 = loc(fused[#loc8, #loc9])
#loc56 = loc(fused[#loc10, #loc11])
#loc57 = loc(fused[#loc14, #loc12])
#loc58 = loc(fused[#loc15, #loc16])
#loc59 = loc(fused[#loc17, #loc18])
#loc60 = loc(fused[#loc19, #loc20, #loc21, #loc16])
#loc61 = loc(fused[#loc23, #loc22])
#loc62 = loc(fused[#loc26, #loc25])
#loc63 = loc(fused[#loc27, #loc28])
#loc64 = loc(fused[#loc29, #loc30])
#loc65 = loc(fused[#loc32, #loc33])
#loc66 = loc(fused[#loc34, #loc35])
#loc67 = loc(fused[#loc38, #loc36])
#loc68 = loc(fused[#loc39, #loc40])
#loc69 = loc(fused[#loc41, #loc42])
#loc70 = loc(fused[#loc43, #loc44, #loc45, #loc40])
#loc71 = loc(fused[#loc48, #loc47])
#loc72 = loc(fused[#loc51, #loc50])
