!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":104:10)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":104:14)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":104:20)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":104:32)
#loc241 = loc(fused[#loc104, #loc105])
#loc242 = loc(fused[#loc106, #loc107])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc201)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc202)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc203)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc204)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc205)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc207)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc208)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc17)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc209)
    cir.br ^bb1 loc(#loc210)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc211)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc211)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc21)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc212)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc26)
    %8 = cir.const #cir.int<50> : !s32i loc(#loc27)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc27)
    %10 = cir.const #cir.int<1> : !u64i loc(#loc213)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc214)
    %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc26)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc215)
    cir.store %13, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc216)
    cir.br ^bb3 loc(#loc217)
  ^bb3:  // pred: ^bb2
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc35)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc35)
    %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc218)
    cir.brcond %17 ^bb4, ^bb5 loc(#loc219)
  ^bb4:  // pred: ^bb3
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc37)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc38)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc39)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc37)
    cir.br ^bb5 loc(#loc33)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc33)
  ^bb6:  // pred: ^bb5
    %21 = cir.const #cir.int<0> : !s32i loc(#loc40)
    %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc40)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc42)
    %25 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc43)
    cir.store %22, %25 : !s8i, !cir.ptr<!s8i> loc(#loc220)
    cir.br ^bb12 loc(#loc24)
  ^bb7:  // pred: ^bb1
    %26 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc44)
    %27 = cir.const #cir.int<100> : !s32i loc(#loc45)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc45)
    %29 = cir.const #cir.int<1> : !u64i loc(#loc221)
    %30 = cir.binop(mul, %28, %29) : !u64i loc(#loc222)
    %31 = cir.call @malloc(%30) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc44)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc223)
    cir.store %32, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc224)
    cir.br ^bb8 loc(#loc225)
  ^bb8:  // pred: ^bb7
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
    %34 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc53)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc53)
    %36 = cir.cmp(eq, %33, %35) : !cir.ptr<!s8i>, !cir.bool loc(#loc226)
    cir.brcond %36 ^bb9, ^bb10 loc(#loc227)
  ^bb9:  // pred: ^bb8
    %37 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc55)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc56)
    %39 = cir.unary(minus, %38) : !s32i, !s32i loc(#loc57)
    cir.call @exit(%39) : (!s32i) -> () extra(#fn_attr) loc(#loc55)
    cir.br ^bb10 loc(#loc51)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc51)
  ^bb11:  // pred: ^bb10
    %40 = cir.const #cir.int<0> : !s32i loc(#loc58)
    %41 = cir.cast(integral, %40 : !s32i), !s8i loc(#loc58)
    %42 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
    %43 = cir.const #cir.int<0> : !s32i loc(#loc60)
    %44 = cir.ptr_stride(%42 : !cir.ptr<!s8i>, %43 : !s32i), !cir.ptr<!s8i> loc(#loc61)
    cir.store %41, %44 : !s8i, !cir.ptr<!s8i> loc(#loc228)
    cir.br ^bb12 loc(#loc20)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc20)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc229)
  ^bb14:  // pred: ^bb13
    %45 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc64)
    %46 = cir.cast(bitcast, %45 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc64)
    %47 = cir.const #cir.int<67> : !s32i loc(#loc65)
    %48 = cir.const #cir.int<100> : !s32i loc(#loc66)
    %49 = cir.const #cir.int<1> : !s32i loc(#loc67)
    %50 = cir.binop(sub, %48, %49) nsw : !s32i loc(#loc66)
    %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc66)
    cir.libc.memset %51 bytes from %46 set to %47 : !cir.ptr<!void>, !s32i, !u64i loc(#loc230)
    %52 = cir.const #cir.int<0> : !s32i loc(#loc70)
    %53 = cir.cast(integral, %52 : !s32i), !s8i loc(#loc70)
    %54 = cir.const #cir.int<100> : !s32i loc(#loc71)
    %55 = cir.const #cir.int<1> : !s32i loc(#loc72)
    %56 = cir.binop(sub, %54, %55) nsw : !s32i loc(#loc71)
    %57 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc73)
    %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc73)
    cir.store %53, %58 : !s8i, !cir.ptr<!s8i> loc(#loc231)
    %59 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc74)
    %60 = cir.cast(bitcast, %59 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc74)
    %61 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc75)
    %62 = cir.cast(bitcast, %61 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc75)
    %63 = cir.const #cir.int<100> : !s32i loc(#loc76)
    %64 = cir.cast(integral, %63 : !s32i), !u64i loc(#loc76)
    %65 = cir.const #cir.int<1> : !u64i loc(#loc232)
    %66 = cir.binop(mul, %64, %65) : !u64i loc(#loc233)
    cir.libc.memmove %66 bytes from %62 to %60 : !cir.ptr<!void>, !u64i loc(#loc234)
    %67 = cir.const #cir.int<0> : !s32i loc(#loc81)
    %68 = cir.cast(integral, %67 : !s32i), !s8i loc(#loc81)
    %69 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc82)
    %70 = cir.const #cir.int<100> : !s32i loc(#loc83)
    %71 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %72 = cir.binop(sub, %70, %71) nsw : !s32i loc(#loc83)
    %73 = cir.ptr_stride(%69 : !cir.ptr<!s8i>, %72 : !s32i), !cir.ptr<!s8i> loc(#loc85)
    cir.store %68, %73 : !s8i, !cir.ptr<!s8i> loc(#loc235)
    %74 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc86)
    cir.call @printLine(%74) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %75 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc88)
    %76 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
    %77 = cir.cast(bitcast, %76 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc89)
    cir.call @free(%77) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc88)
    cir.br ^bb15 loc(#loc63)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc12)
  } loc(#loc206)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc237)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc92)
    cir.return loc(#loc91)
  } loc(#loc236)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc238)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc239)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc98)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc99)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc100)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc101)
  cir.func @main(%arg0: !s32i loc(fused[#loc104, #loc105]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc106, #loc107])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc241)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc242)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc103)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc108)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc109)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc110)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc110)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc111)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc98)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc98)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc112)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc243)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12_good() : () -> () loc(#loc113)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc99)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc115)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc100)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc100)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc244)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12_bad() : () -> () loc(#loc117)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc101)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc101)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc119)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc120)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc245)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc245)
    cir.return %17 : !s32i loc(#loc245)
  } loc(#loc240)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc247)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc248)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc128)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc249)
    cir.br ^bb1 loc(#loc250)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc251)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc251)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc132)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc132)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc252)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc137)
    %8 = cir.const #cir.int<100> : !s32i loc(#loc138)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc138)
    %10 = cir.const #cir.int<1> : !u64i loc(#loc253)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc254)
    %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc137)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc255)
    cir.store %13, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc256)
    cir.br ^bb3 loc(#loc257)
  ^bb3:  // pred: ^bb2
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc146)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc146)
    %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc258)
    cir.brcond %17 ^bb4, ^bb5 loc(#loc259)
  ^bb4:  // pred: ^bb3
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc148)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc149)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc150)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc148)
    cir.br ^bb5 loc(#loc144)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc144)
  ^bb6:  // pred: ^bb5
    %21 = cir.const #cir.int<0> : !s32i loc(#loc151)
    %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc151)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc152)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc153)
    %25 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc154)
    cir.store %22, %25 : !s8i, !cir.ptr<!s8i> loc(#loc260)
    cir.br ^bb12 loc(#loc135)
  ^bb7:  // pred: ^bb1
    %26 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc155)
    %27 = cir.const #cir.int<100> : !s32i loc(#loc156)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc156)
    %29 = cir.const #cir.int<1> : !u64i loc(#loc261)
    %30 = cir.binop(mul, %28, %29) : !u64i loc(#loc262)
    %31 = cir.call @malloc(%30) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc155)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc263)
    cir.store %32, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc264)
    cir.br ^bb8 loc(#loc265)
  ^bb8:  // pred: ^bb7
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc163)
    %34 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc164)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc164)
    %36 = cir.cmp(eq, %33, %35) : !cir.ptr<!s8i>, !cir.bool loc(#loc266)
    cir.brcond %36 ^bb9, ^bb10 loc(#loc267)
  ^bb9:  // pred: ^bb8
    %37 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc166)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc167)
    %39 = cir.unary(minus, %38) : !s32i, !s32i loc(#loc168)
    cir.call @exit(%39) : (!s32i) -> () extra(#fn_attr) loc(#loc166)
    cir.br ^bb10 loc(#loc162)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc162)
  ^bb11:  // pred: ^bb10
    %40 = cir.const #cir.int<0> : !s32i loc(#loc169)
    %41 = cir.cast(integral, %40 : !s32i), !s8i loc(#loc169)
    %42 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc170)
    %43 = cir.const #cir.int<0> : !s32i loc(#loc171)
    %44 = cir.ptr_stride(%42 : !cir.ptr<!s8i>, %43 : !s32i), !cir.ptr<!s8i> loc(#loc172)
    cir.store %41, %44 : !s8i, !cir.ptr<!s8i> loc(#loc268)
    cir.br ^bb12 loc(#loc131)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc131)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc269)
  ^bb14:  // pred: ^bb13
    %45 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc175)
    %46 = cir.cast(bitcast, %45 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc175)
    %47 = cir.const #cir.int<67> : !s32i loc(#loc176)
    %48 = cir.const #cir.int<100> : !s32i loc(#loc177)
    %49 = cir.const #cir.int<1> : !s32i loc(#loc178)
    %50 = cir.binop(sub, %48, %49) nsw : !s32i loc(#loc177)
    %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc177)
    cir.libc.memset %51 bytes from %46 set to %47 : !cir.ptr<!void>, !s32i, !u64i loc(#loc270)
    %52 = cir.const #cir.int<0> : !s32i loc(#loc181)
    %53 = cir.cast(integral, %52 : !s32i), !s8i loc(#loc181)
    %54 = cir.const #cir.int<100> : !s32i loc(#loc182)
    %55 = cir.const #cir.int<1> : !s32i loc(#loc183)
    %56 = cir.binop(sub, %54, %55) nsw : !s32i loc(#loc182)
    %57 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc184)
    %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc184)
    cir.store %53, %58 : !s8i, !cir.ptr<!s8i> loc(#loc271)
    %59 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc185)
    %60 = cir.cast(bitcast, %59 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc185)
    %61 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc186)
    %62 = cir.cast(bitcast, %61 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc186)
    %63 = cir.const #cir.int<100> : !s32i loc(#loc187)
    %64 = cir.cast(integral, %63 : !s32i), !u64i loc(#loc187)
    %65 = cir.const #cir.int<1> : !u64i loc(#loc272)
    %66 = cir.binop(mul, %64, %65) : !u64i loc(#loc273)
    cir.libc.memmove %66 bytes from %62 to %60 : !cir.ptr<!void>, !u64i loc(#loc274)
    %67 = cir.const #cir.int<0> : !s32i loc(#loc192)
    %68 = cir.cast(integral, %67 : !s32i), !s8i loc(#loc192)
    %69 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc193)
    %70 = cir.const #cir.int<100> : !s32i loc(#loc194)
    %71 = cir.const #cir.int<1> : !s32i loc(#loc195)
    %72 = cir.binop(sub, %70, %71) nsw : !s32i loc(#loc194)
    %73 = cir.ptr_stride(%69 : !cir.ptr<!s8i>, %72 : !s32i), !cir.ptr<!s8i> loc(#loc196)
    cir.store %68, %73 : !s8i, !cir.ptr<!s8i> loc(#loc275)
    %74 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc197)
    cir.call @printLine(%74) : (!cir.ptr<!s8i>) -> () loc(#loc198)
    %75 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc199)
    %76 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc200)
    %77 = cir.cast(bitcast, %76 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc200)
    cir.call @free(%77) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc199)
    cir.br ^bb15 loc(#loc174)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc123)
  } loc(#loc246)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":23:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":51:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":42:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":42:24)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":25:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":25:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":26:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":26:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":27:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":40:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":27:8)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":27:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":28:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":33:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":35:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":30:24)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":30:31)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":30:34)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":30:45)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":30:46)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":30:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":31:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":31:37)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":31:13)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":31:21)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":31:27)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":31:28)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":31:34)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":31:33)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":32:19)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":32:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":32:14)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":32:15)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":37:24)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":37:31)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":37:35)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":37:46)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":37:47)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":37:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":38:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":38:37)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":38:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":38:21)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":38:27)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":38:28)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":38:34)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":38:33)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":39:19)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":39:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":39:14)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":39:15)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":41:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":50:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":43:16)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":43:24)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":43:29)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":43:33)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":43:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":43:34)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":44:25)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":44:16)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":44:20)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":44:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":46:17)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":46:23)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":46:31)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":46:35)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":46:46)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":46:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":46:47)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":47:23)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":47:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":47:14)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":47:18)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":47:19)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":48:19)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":48:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":49:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":49:14)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":89:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":92:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":91:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":91:13)
#loc94 = loc("/usr/include/stdlib.h":575:1)
#loc95 = loc("/usr/include/stdlib.h":575:41)
#loc96 = loc("/usr/include/time.h":76:1)
#loc97 = loc("/usr/include/time.h":76:38)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":109:15)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":111:15)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":114:15)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":116:15)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":104:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":119:1)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":105:1)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":107:27)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":107:22)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":107:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":109:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":110:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":110:70)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":111:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":114:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":115:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":115:69)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":116:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":118:12)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":118:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":59:1)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":87:1)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":78:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":78:24)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":61:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":61:12)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":62:12)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":62:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":63:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":76:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":63:8)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":63:33)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":64:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":69:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":71:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":66:24)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":66:31)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":66:35)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":66:46)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":66:47)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":66:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":67:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":67:37)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":67:13)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":67:21)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":67:27)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":67:28)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":67:34)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":67:33)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":68:19)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":68:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":68:14)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":68:15)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":73:24)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":73:31)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":73:35)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":73:46)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":73:47)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":73:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":74:9)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":74:37)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":74:13)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":74:21)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":74:27)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":74:28)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":74:34)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":74:33)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":75:19)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":75:9)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":75:14)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":75:15)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":77:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":86:5)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":79:16)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":79:24)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":79:29)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":79:33)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":79:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":79:34)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":80:25)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":80:16)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":80:20)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":80:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":82:17)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":82:23)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":82:31)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":82:35)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":82:46)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":82:9)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":82:47)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":83:23)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":83:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":83:14)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":83:18)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":83:19)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":84:19)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":84:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":85:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c":85:14)
#loc201 = loc(fused[#loc1, #loc2])
#loc202 = loc(fused[#loc3, #loc4])
#loc203 = loc(fused[#loc5, #loc6])
#loc204 = loc(fused[#loc7, #loc8])
#loc205 = loc(fused[#loc9, #loc10])
#loc206 = loc(fused[#loc11, #loc12])
#loc207 = loc(fused[#loc13, #loc14])
#loc208 = loc(fused[#loc15, #loc16])
#loc209 = loc(fused[#loc18, #loc17])
#loc210 = loc(fused[#loc19, #loc20])
#loc211 = loc(fused[#loc21, #loc22])
#loc212 = loc(fused[#loc23, #loc24, #loc25, #loc20])
#loc213 = loc(fused[#loc28, #loc29])
#loc214 = loc(fused[#loc27, #loc29])
#loc215 = loc(fused[#loc26, #loc30])
#loc216 = loc(fused[#loc31, #loc30])
#loc217 = loc(fused[#loc32, #loc33])
#loc218 = loc(fused[#loc34, #loc35])
#loc219 = loc(fused[#loc36, #loc33])
#loc220 = loc(fused[#loc41, #loc40])
#loc221 = loc(fused[#loc46, #loc47])
#loc222 = loc(fused[#loc45, #loc47])
#loc223 = loc(fused[#loc44, #loc48])
#loc224 = loc(fused[#loc49, #loc48])
#loc225 = loc(fused[#loc50, #loc51])
#loc226 = loc(fused[#loc52, #loc53])
#loc227 = loc(fused[#loc54, #loc51])
#loc228 = loc(fused[#loc59, #loc58])
#loc229 = loc(fused[#loc62, #loc63])
#loc230 = loc(fused[#loc68, #loc69])
#loc231 = loc(fused[#loc73, #loc70])
#loc232 = loc(fused[#loc77, #loc78])
#loc233 = loc(fused[#loc76, #loc78])
#loc234 = loc(fused[#loc79, #loc80])
#loc235 = loc(fused[#loc82, #loc81])
#loc236 = loc(fused[#loc90, #loc91])
#loc237 = loc(fused[#loc92, #loc93])
#loc238 = loc(fused[#loc94, #loc95])
#loc239 = loc(fused[#loc96, #loc97])
#loc240 = loc(fused[#loc102, #loc103])
#loc243 = loc(fused[#loc113, #loc114])
#loc244 = loc(fused[#loc117, #loc118])
#loc245 = loc(fused[#loc121, #loc120])
#loc246 = loc(fused[#loc122, #loc123])
#loc247 = loc(fused[#loc124, #loc125])
#loc248 = loc(fused[#loc126, #loc127])
#loc249 = loc(fused[#loc129, #loc128])
#loc250 = loc(fused[#loc130, #loc131])
#loc251 = loc(fused[#loc132, #loc133])
#loc252 = loc(fused[#loc134, #loc135, #loc136, #loc131])
#loc253 = loc(fused[#loc139, #loc140])
#loc254 = loc(fused[#loc138, #loc140])
#loc255 = loc(fused[#loc137, #loc141])
#loc256 = loc(fused[#loc142, #loc141])
#loc257 = loc(fused[#loc143, #loc144])
#loc258 = loc(fused[#loc145, #loc146])
#loc259 = loc(fused[#loc147, #loc144])
#loc260 = loc(fused[#loc152, #loc151])
#loc261 = loc(fused[#loc157, #loc158])
#loc262 = loc(fused[#loc156, #loc158])
#loc263 = loc(fused[#loc155, #loc159])
#loc264 = loc(fused[#loc160, #loc159])
#loc265 = loc(fused[#loc161, #loc162])
#loc266 = loc(fused[#loc163, #loc164])
#loc267 = loc(fused[#loc165, #loc162])
#loc268 = loc(fused[#loc170, #loc169])
#loc269 = loc(fused[#loc173, #loc174])
#loc270 = loc(fused[#loc179, #loc180])
#loc271 = loc(fused[#loc184, #loc181])
#loc272 = loc(fused[#loc188, #loc189])
#loc273 = loc(fused[#loc187, #loc189])
#loc274 = loc(fused[#loc190, #loc191])
#loc275 = loc(fused[#loc193, #loc192])
