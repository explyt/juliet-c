!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrue(...) -> !s32i loc(#loc136)
  cir.func private  @printIntLine(!s32i) loc(#loc137)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc139)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc9)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc140)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc142)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc142)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc13)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
      cir.if %5 {
        %6 = cir.const #cir.int<10> : !s32i loc(#loc16)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc16)
        %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc16)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc16)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc16)
        cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc144)
      } loc(#loc143)
    } loc(#loc141)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc146)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc147)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc146)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc146)
      cir.scope {
        %9 = cir.const #cir.int<0> : !s32i loc(#loc26)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc26)
        cir.store %10, %3 : !u64i, !cir.ptr<!u64i> loc(#loc149)
        cir.for : cond {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc28)
          %12 = cir.const #cir.int<10> : !s32i loc(#loc29)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc29)
          %14 = cir.cmp(lt, %11, %13) : !u64i, !s32i loc(#loc150)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc30)
          cir.condition(%15) loc(#loc30)
        } body {
          cir.scope {
            %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc32)
            %12 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc33)
            %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !u64i), !cir.ptr<!s32i> loc(#loc33)
            %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc33)
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc34)
            %16 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc35)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !u64i), !cir.ptr<!s32i> loc(#loc36)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc152)
          } loc(#loc151)
          cir.yield loc(#loc25)
        } step {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc38)
          %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc39)
          cir.store %12, %3 : !u64i, !cir.ptr<!u64i> loc(#loc153)
          cir.yield loc(#loc148)
        } loc(#loc148)
      } loc(#loc148)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc40)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc41)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc42)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc40)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc43)
    } loc(#loc145)
    cir.return loc(#loc6)
  } loc(#loc138)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc155)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc156)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    cir.return loc(#loc45)
  } loc(#loc154)
  cir.func no_proto private  @globalReturnsFalse(...) -> !s32i loc(#loc157)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc158)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc54)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc160)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc59)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc161)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc163)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc163)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc63)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc63)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc54)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc54)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc68)
      } else {
        %6 = cir.const #cir.int<10> : !s32i loc(#loc69)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc69)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc69)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc69)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc69)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc69)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc69)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc165)
      } loc(#loc164)
    } loc(#loc162)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc167)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc168)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc167)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc167)
      cir.scope {
        %9 = cir.const #cir.int<0> : !s32i loc(#loc79)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc79)
        cir.store %10, %3 : !u64i, !cir.ptr<!u64i> loc(#loc170)
        cir.for : cond {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc81)
          %12 = cir.const #cir.int<10> : !s32i loc(#loc82)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc82)
          %14 = cir.cmp(lt, %11, %13) : !u64i, !s32i loc(#loc171)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc83)
          cir.condition(%15) loc(#loc83)
        } body {
          cir.scope {
            %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc85)
            %12 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc86)
            %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !u64i), !cir.ptr<!s32i> loc(#loc86)
            %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc86)
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc87)
            %16 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc88)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !u64i), !cir.ptr<!s32i> loc(#loc89)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc173)
          } loc(#loc172)
          cir.yield loc(#loc78)
        } step {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc91)
          %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc92)
          cir.store %12, %3 : !u64i, !cir.ptr<!u64i> loc(#loc174)
          cir.yield loc(#loc169)
        } loc(#loc169)
      } loc(#loc169)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc93)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc94)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc95)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc93)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc96)
    } loc(#loc166)
    cir.return loc(#loc56)
  } loc(#loc159)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc176)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc101)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc177)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc179)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc179)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc105)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc105)
      cir.if %5 {
        %6 = cir.const #cir.int<10> : !s32i loc(#loc108)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc108)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc108)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc108)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc108)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc108)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc108)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc181)
      } loc(#loc180)
    } loc(#loc178)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc183)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc184)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc183)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc183)
      cir.scope {
        %9 = cir.const #cir.int<0> : !s32i loc(#loc118)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc118)
        cir.store %10, %3 : !u64i, !cir.ptr<!u64i> loc(#loc186)
        cir.for : cond {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc120)
          %12 = cir.const #cir.int<10> : !s32i loc(#loc121)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc121)
          %14 = cir.cmp(lt, %11, %13) : !u64i, !s32i loc(#loc187)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc122)
          cir.condition(%15) loc(#loc122)
        } body {
          cir.scope {
            %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc124)
            %12 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc125)
            %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !u64i), !cir.ptr<!s32i> loc(#loc125)
            %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc125)
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc126)
            %16 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc127)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !u64i), !cir.ptr<!s32i> loc(#loc128)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc189)
          } loc(#loc188)
          cir.yield loc(#loc117)
        } step {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc130)
          %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc131)
          cir.store %12, %3 : !u64i, !cir.ptr<!u64i> loc(#loc190)
          cir.yield loc(#loc185)
        } loc(#loc185)
      } loc(#loc185)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc132)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc133)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc134)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc132)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc135)
    } loc(#loc182)
    cir.return loc(#loc98)
  } loc(#loc175)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":21:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":40:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":23:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":23:11)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":24:12)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":24:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":25:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":29:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":25:8)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":25:26)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":26:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":28:23)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":28:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":30:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":39:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":31:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":31:28)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":32:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":32:16)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":34:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":37:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":34:18)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":34:14)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":34:21)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":34:25)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":34:23)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":35:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":36:30)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":36:23)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":36:13)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":36:18)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":36:19)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":36:31)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":34:30)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":34:29)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":38:22)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":38:27)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":38:28)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":38:9)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":95:1)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":99:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":97:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":97:14)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":98:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":98:14)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":54:19)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":47:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":71:1)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":49:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":49:11)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":50:12)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":50:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":51:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":60:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":51:8)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":51:27)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":52:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":55:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":57:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":54:9)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":59:23)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":59:9)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":61:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":70:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":62:9)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":62:28)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":63:9)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":63:16)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":65:9)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":68:9)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":65:18)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":65:14)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":65:21)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":65:25)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":65:23)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":66:9)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":67:30)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":67:23)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":67:13)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":67:18)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":67:19)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":67:31)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":65:30)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":65:29)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":69:22)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":69:27)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":69:28)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":69:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":74:1)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":93:1)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":76:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":76:11)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":77:12)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":77:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":78:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":82:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":78:8)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":78:26)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":79:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":81:23)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":81:9)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":83:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":92:5)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":84:9)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":84:28)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":85:9)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":85:16)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":87:9)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":90:9)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":87:18)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":87:14)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":87:21)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":87:25)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":87:23)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":88:9)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":89:30)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":89:23)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":89:13)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":89:18)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":89:19)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":89:31)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":87:30)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":87:29)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":91:22)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":91:27)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":91:28)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c":91:9)
#loc136 = loc(fused[#loc1, #loc2])
#loc137 = loc(fused[#loc3, #loc4])
#loc138 = loc(fused[#loc5, #loc6])
#loc139 = loc(fused[#loc7, #loc8])
#loc140 = loc(fused[#loc10, #loc9])
#loc141 = loc(fused[#loc11, #loc12])
#loc142 = loc(fused[#loc13, #loc14])
#loc143 = loc(fused[#loc15, #loc12])
#loc144 = loc(fused[#loc17, #loc16])
#loc145 = loc(fused[#loc18, #loc19])
#loc146 = loc(fused[#loc20, #loc21])
#loc147 = loc(fused[#loc22, #loc23])
#loc148 = loc(fused[#loc24, #loc25])
#loc149 = loc(fused[#loc27, #loc26])
#loc150 = loc(fused[#loc28, #loc29])
#loc151 = loc(fused[#loc31, #loc25])
#loc152 = loc(fused[#loc34, #loc37])
#loc153 = loc(fused[#loc39, #loc38])
#loc154 = loc(fused[#loc44, #loc45])
#loc155 = loc(fused[#loc46, #loc47])
#loc156 = loc(fused[#loc48, #loc49])
#loc157 = loc(fused[#loc50, #loc51])
#loc158 = loc(fused[#loc52, #loc53])
#loc159 = loc(fused[#loc55, #loc56])
#loc160 = loc(fused[#loc57, #loc58])
#loc161 = loc(fused[#loc60, #loc59])
#loc162 = loc(fused[#loc61, #loc62])
#loc163 = loc(fused[#loc63, #loc64])
#loc164 = loc(fused[#loc65, #loc66, #loc67, #loc62])
#loc165 = loc(fused[#loc70, #loc69])
#loc166 = loc(fused[#loc71, #loc72])
#loc167 = loc(fused[#loc73, #loc74])
#loc168 = loc(fused[#loc75, #loc76])
#loc169 = loc(fused[#loc77, #loc78])
#loc170 = loc(fused[#loc80, #loc79])
#loc171 = loc(fused[#loc81, #loc82])
#loc172 = loc(fused[#loc84, #loc78])
#loc173 = loc(fused[#loc87, #loc90])
#loc174 = loc(fused[#loc92, #loc91])
#loc175 = loc(fused[#loc97, #loc98])
#loc176 = loc(fused[#loc99, #loc100])
#loc177 = loc(fused[#loc102, #loc101])
#loc178 = loc(fused[#loc103, #loc104])
#loc179 = loc(fused[#loc105, #loc106])
#loc180 = loc(fused[#loc107, #loc104])
#loc181 = loc(fused[#loc109, #loc108])
#loc182 = loc(fused[#loc110, #loc111])
#loc183 = loc(fused[#loc112, #loc113])
#loc184 = loc(fused[#loc114, #loc115])
#loc185 = loc(fused[#loc116, #loc117])
#loc186 = loc(fused[#loc119, #loc118])
#loc187 = loc(fused[#loc120, #loc121])
#loc188 = loc(fused[#loc123, #loc117])
#loc189 = loc(fused[#loc126, #loc129])
#loc190 = loc(fused[#loc131, #loc130])
