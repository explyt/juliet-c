!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":21:21)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":21:27)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":97:10)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":97:14)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":97:20)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":97:32)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":56:25)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":56:31)
#loc133 = loc(fused[#loc5, #loc6])
#loc156 = loc(fused[#loc66, #loc67])
#loc157 = loc(fused[#loc68, #loc69])
#loc162 = loc(fused[#loc86, #loc87])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc131)
  cir.func internal private @badSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc133)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc135)
      %2 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc135)
      cir.store %2, %1 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc135)
      cir.scope {
        %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc137)
        cir.scope {
          %8 = cir.const #cir.int<0> : !s32i loc(#loc18)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc18)
          cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc139)
          cir.for : cond {
            %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc20)
            %11 = cir.const #cir.int<100> : !s32i loc(#loc21)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc21)
            %13 = cir.cmp(lt, %10, %12) : !u64i, !cir.bool loc(#loc140)
            cir.condition(%13) loc(#loc22)
          } body {
            cir.scope {
              %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc24)
              %11 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc25)
              %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !u64i), !cir.ptr<!s32i> loc(#loc25)
              %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc25)
              %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
              %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc27)
              %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !u64i), !cir.ptr<!s32i> loc(#loc28)
              cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc142)
            } loc(#loc141)
            cir.yield loc(#loc17)
          } step {
            %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc30)
            %11 = cir.unary(inc, %10) : !u64i, !u64i loc(#loc31)
            cir.store %11, %3 : !u64i, !cir.ptr<!u64i> loc(#loc143)
            cir.yield loc(#loc138)
          } loc(#loc138)
        } loc(#loc138)
        %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc33)
        %6 = cir.ptr_stride(%4 : !cir.ptr<!s32i>, %5 : !s32i), !cir.ptr<!s32i> loc(#loc34)
        %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc32)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc35)
      } loc(#loc136)
    } loc(#loc134)
    cir.return loc(#loc4)
  } loc(#loc132)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc145)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc146)
    %2 = cir.alloca !cir.array<!s32i x 50>, !cir.ptr<!cir.array<!s32i x 50>>, ["dataBadBuffer"] {alignment = 16 : i64} loc(#loc147)
    %3 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["dataGoodBuffer"] {alignment = 16 : i64} loc(#loc148)
    %4 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>> loc(#loc41)
    cir.store %4, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>> loc(#loc146)
    %5 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 50>>), !cir.ptr<!s32i> loc(#loc46)
    cir.store %5, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc149)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>> loc(#loc48)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!s32i>) -> () loc(#loc48)
    cir.return loc(#loc37)
  } loc(#loc144)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc151)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    cir.return loc(#loc51)
  } loc(#loc150)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc152)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc153)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc154)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc63)
  cir.func @main(%arg0: !s32i loc(fused[#loc66, #loc67]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc68, #loc69])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc156)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc157)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc65)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc70)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc70)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc71)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc72)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc72)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc73)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc60)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44_good : !cir.ptr<!cir.func<!void ()>> loc(#loc158)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44_good() : () -> () loc(#loc75)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc61)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc62)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc159)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44_bad() : () -> () loc(#loc79)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc63)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc82)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc160)
    cir.return %17 : !s32i loc(#loc160)
  } loc(#loc155)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc86, #loc87])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc162)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc88)
    cir.scope {
      %1 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc164)
      %2 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc164)
      cir.store %2, %1 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc164)
      cir.scope {
        %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc166)
        cir.scope {
          %8 = cir.const #cir.int<0> : !s32i loc(#loc99)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc99)
          cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc168)
          cir.for : cond {
            %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc101)
            %11 = cir.const #cir.int<100> : !s32i loc(#loc102)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc102)
            %13 = cir.cmp(lt, %10, %12) : !u64i, !cir.bool loc(#loc169)
            cir.condition(%13) loc(#loc103)
          } body {
            cir.scope {
              %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc105)
              %11 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc106)
              %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !u64i), !cir.ptr<!s32i> loc(#loc106)
              %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc106)
              %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc107)
              %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc108)
              %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !u64i), !cir.ptr<!s32i> loc(#loc109)
              cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc171)
            } loc(#loc170)
            cir.yield loc(#loc98)
          } step {
            %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc111)
            %11 = cir.unary(inc, %10) : !u64i, !u64i loc(#loc112)
            cir.store %11, %3 : !u64i, !cir.ptr<!u64i> loc(#loc172)
            cir.yield loc(#loc167)
          } loc(#loc167)
        } loc(#loc167)
        %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc113)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc114)
        %6 = cir.ptr_stride(%4 : !cir.ptr<!s32i>, %5 : !s32i), !cir.ptr<!s32i> loc(#loc115)
        %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc113)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc116)
      } loc(#loc165)
    } loc(#loc163)
    cir.return loc(#loc85)
  } loc(#loc161)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc174)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc175)
    %2 = cir.alloca !cir.array<!s32i x 50>, !cir.ptr<!cir.array<!s32i x 50>>, ["dataBadBuffer"] {alignment = 16 : i64} loc(#loc176)
    %3 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["dataGoodBuffer"] {alignment = 16 : i64} loc(#loc177)
    %4 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>> loc(#loc122)
    cir.store %4, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>> loc(#loc175)
    %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc127)
    cir.store %5, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc178)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>> loc(#loc129)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc130)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!s32i>) -> () loc(#loc129)
    cir.return loc(#loc118)
  } loc(#loc173)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":35:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":22:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":23:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":34:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":24:9)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":24:29)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":25:9)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":33:9)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":26:13)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":26:20)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":28:13)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":31:13)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":28:22)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":28:18)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":28:25)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":28:29)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":28:27)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":29:13)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":30:34)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":30:27)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":30:17)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":30:22)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":30:23)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":30:35)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":28:35)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":28:34)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":32:26)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":32:31)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":32:32)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":32:13)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":37:1)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":49:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":39:5)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":39:11)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":41:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":41:31)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":42:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":42:25)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":43:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":43:27)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":46:12)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":46:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":48:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":48:13)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":83:1)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":86:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":85:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":85:13)
#loc54 = loc("/usr/include/stdlib.h":575:1)
#loc55 = loc("/usr/include/stdlib.h":575:41)
#loc56 = loc("/usr/include/time.h":76:1)
#loc57 = loc("/usr/include/time.h":76:38)
#loc58 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc59 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":102:15)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":104:15)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":107:15)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":109:15)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":97:1)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":112:1)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":98:1)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":100:27)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":100:22)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":100:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":102:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":103:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":103:73)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":104:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":107:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":108:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":108:72)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":109:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":111:12)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":111:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":56:1)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":70:1)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":57:1)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":58:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":69:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":59:9)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":59:29)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":60:9)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":68:9)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":61:13)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":61:20)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":63:13)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":66:13)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":63:22)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":63:18)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":63:25)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":63:29)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":63:27)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":64:13)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":65:34)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":65:27)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":65:17)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":65:22)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":65:23)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":65:35)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":63:35)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":63:34)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":67:26)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":67:31)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":67:32)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":67:13)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":72:1)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":81:1)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":74:5)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":74:11)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":75:5)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":75:31)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":76:5)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":76:25)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":77:5)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":77:27)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":79:12)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":79:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":80:5)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c":80:13)
#loc131 = loc(fused[#loc1, #loc2])
#loc132 = loc(fused[#loc3, #loc4])
#loc134 = loc(fused[#loc8, #loc9])
#loc135 = loc(fused[#loc10, #loc11])
#loc136 = loc(fused[#loc12, #loc13])
#loc137 = loc(fused[#loc14, #loc15])
#loc138 = loc(fused[#loc16, #loc17])
#loc139 = loc(fused[#loc19, #loc18])
#loc140 = loc(fused[#loc20, #loc21])
#loc141 = loc(fused[#loc23, #loc17])
#loc142 = loc(fused[#loc26, #loc29])
#loc143 = loc(fused[#loc31, #loc30])
#loc144 = loc(fused[#loc36, #loc37])
#loc145 = loc(fused[#loc38, #loc39])
#loc146 = loc(fused[#loc40, #loc41])
#loc147 = loc(fused[#loc42, #loc43])
#loc148 = loc(fused[#loc44, #loc45])
#loc149 = loc(fused[#loc47, #loc46])
#loc150 = loc(fused[#loc50, #loc51])
#loc151 = loc(fused[#loc52, #loc53])
#loc152 = loc(fused[#loc54, #loc55])
#loc153 = loc(fused[#loc56, #loc57])
#loc154 = loc(fused[#loc58, #loc59])
#loc155 = loc(fused[#loc64, #loc65])
#loc158 = loc(fused[#loc75, #loc76])
#loc159 = loc(fused[#loc79, #loc80])
#loc160 = loc(fused[#loc83, #loc82])
#loc161 = loc(fused[#loc84, #loc85])
#loc163 = loc(fused[#loc89, #loc90])
#loc164 = loc(fused[#loc91, #loc92])
#loc165 = loc(fused[#loc93, #loc94])
#loc166 = loc(fused[#loc95, #loc96])
#loc167 = loc(fused[#loc97, #loc98])
#loc168 = loc(fused[#loc100, #loc99])
#loc169 = loc(fused[#loc101, #loc102])
#loc170 = loc(fused[#loc104, #loc98])
#loc171 = loc(fused[#loc107, #loc110])
#loc172 = loc(fused[#loc112, #loc111])
#loc173 = loc(fused[#loc117, #loc118])
#loc174 = loc(fused[#loc119, #loc120])
#loc175 = loc(fused[#loc121, #loc122])
#loc176 = loc(fused[#loc123, #loc124])
#loc177 = loc(fused[#loc125, #loc126])
#loc178 = loc(fused[#loc128, #loc127])
