!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65b_badSink(!cir.ptr<!s8i>) loc(#loc79)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc80)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc81)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc83)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc84)
    %2 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65b_badSink : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc12)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>> loc(#loc84)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc13)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc14)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc14)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc85)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc86)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc13)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc87)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc88)
    cir.scope {
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc21)
      %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc22)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc22)
      %29 = cir.cmp(eq, %26, %28) : !cir.ptr<!s8i>, !cir.bool loc(#loc90)
      cir.if %29 {
        %30 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc24)
        %31 = cir.const #cir.int<1> : !s32i loc(#loc25)
        %32 = cir.unary(minus, %31) nsw : !s32i, !s32i loc(#loc26)
        cir.call @exit(%32) : (!s32i) -> () extra(#fn_attr) loc(#loc24)
      } loc(#loc91)
    } loc(#loc89)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc27)
    %12 = cir.const #cir.int<65> : !s32i loc(#loc28)
    %13 = cir.const #cir.int<100> : !s32i loc(#loc29)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc29)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc29)
    cir.libc.memset %16 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc92)
    %17 = cir.const #cir.int<0> : !s32i loc(#loc33)
    %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc33)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
    %20 = cir.const #cir.int<100> : !s32i loc(#loc35)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc35)
    %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc37)
    cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc93)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc38)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
    cir.call %24(%25) : (!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc38)
    cir.return loc(#loc8)
  } loc(#loc82)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc95)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    cir.return loc(#loc41)
  } loc(#loc94)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65b_goodG2BSink(!cir.ptr<!s8i>) loc(#loc96)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc98)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc99)
    %2 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65b_goodG2BSink : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc51)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>> loc(#loc99)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc52)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc53)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc53)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc100)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc101)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc52)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc102)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc103)
    cir.scope {
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
      %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc61)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc61)
      %29 = cir.cmp(eq, %26, %28) : !cir.ptr<!s8i>, !cir.bool loc(#loc105)
      cir.if %29 {
        %30 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc63)
        %31 = cir.const #cir.int<1> : !s32i loc(#loc64)
        %32 = cir.unary(minus, %31) nsw : !s32i, !s32i loc(#loc65)
        cir.call @exit(%32) : (!s32i) -> () extra(#fn_attr) loc(#loc63)
      } loc(#loc106)
    } loc(#loc104)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc66)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc66)
    %12 = cir.const #cir.int<65> : !s32i loc(#loc67)
    %13 = cir.const #cir.int<50> : !s32i loc(#loc68)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc69)
    %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc68)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc68)
    cir.libc.memset %16 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc107)
    %17 = cir.const #cir.int<0> : !s32i loc(#loc72)
    %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc72)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc73)
    %20 = cir.const #cir.int<50> : !s32i loc(#loc74)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc74)
    %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc76)
    cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc108)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc77)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
    cir.call %24(%25) : (!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc77)
    cir.return loc(#loc47)
  } loc(#loc97)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":30:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":30:87)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":32:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":44:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":34:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":34:12)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":36:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":36:32)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":37:20)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":37:27)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":37:31)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":37:42)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":37:43)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":37:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":38:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":38:33)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":38:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":38:17)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":38:23)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":38:24)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":38:30)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":38:29)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":40:12)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":40:18)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":40:23)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":40:27)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":40:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":40:28)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":41:19)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":41:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":41:10)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":41:14)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":41:15)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":43:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":43:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":65:1)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":68:1)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":67:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":67:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":51:1)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":51:91)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":53:1)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":63:1)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":55:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":55:12)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":56:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":56:32)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":57:20)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":57:27)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":57:31)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":57:42)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":57:43)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":57:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":58:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":58:33)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":58:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":58:17)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":58:23)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":58:24)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":58:30)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":58:29)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":60:12)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":60:18)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":60:23)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":60:26)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":60:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":60:27)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":61:18)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":61:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":61:10)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":61:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":61:14)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":62:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c":62:13)
#loc79 = loc(fused[#loc1, #loc2])
#loc80 = loc(fused[#loc3, #loc4])
#loc81 = loc(fused[#loc5, #loc6])
#loc82 = loc(fused[#loc7, #loc8])
#loc83 = loc(fused[#loc9, #loc10])
#loc84 = loc(fused[#loc11, #loc12])
#loc85 = loc(fused[#loc15, #loc16])
#loc86 = loc(fused[#loc14, #loc16])
#loc87 = loc(fused[#loc13, #loc17])
#loc88 = loc(fused[#loc18, #loc17])
#loc89 = loc(fused[#loc19, #loc20])
#loc90 = loc(fused[#loc21, #loc22])
#loc91 = loc(fused[#loc23, #loc20])
#loc92 = loc(fused[#loc31, #loc32])
#loc93 = loc(fused[#loc34, #loc33])
#loc94 = loc(fused[#loc40, #loc41])
#loc95 = loc(fused[#loc42, #loc43])
#loc96 = loc(fused[#loc44, #loc45])
#loc97 = loc(fused[#loc46, #loc47])
#loc98 = loc(fused[#loc48, #loc49])
#loc99 = loc(fused[#loc50, #loc51])
#loc100 = loc(fused[#loc54, #loc55])
#loc101 = loc(fused[#loc53, #loc55])
#loc102 = loc(fused[#loc52, #loc56])
#loc103 = loc(fused[#loc57, #loc56])
#loc104 = loc(fused[#loc58, #loc59])
#loc105 = loc(fused[#loc60, #loc61])
#loc106 = loc(fused[#loc62, #loc59])
#loc107 = loc(fused[#loc70, #loc71])
#loc108 = loc(fused[#loc73, #loc72])
