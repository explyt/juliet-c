!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc59)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc60)
  cir.func private  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54b_badSink(!cir.ptr<!s64i>) loc(#loc61)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc63)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc11)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc64)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc13)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc14)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc14)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc65)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc66)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc13)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc67)
    cir.store %8, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc68)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc21)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc22)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc22)
      %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s64i>, !s32i loc(#loc70)
      %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc23)
      cir.if %14 {
        %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc25)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc26)
        %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc27)
        cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc25)
      } loc(#loc71)
    } loc(#loc69)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc28)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54b_badSink(%9) : (!cir.ptr<!s64i>) -> () loc(#loc29)
    cir.return loc(#loc8)
  } loc(#loc62)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc73)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    cir.return loc(#loc31)
  } loc(#loc72)
  cir.func private  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54b_goodG2BSink(!cir.ptr<!s64i>) loc(#loc74)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc76)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc40)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc77)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc42)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc43)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc43)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc78)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc79)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc42)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc80)
    cir.store %8, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc81)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc50)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc51)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc51)
      %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s64i>, !s32i loc(#loc83)
      %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc52)
      cir.if %14 {
        %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc54)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc55)
        %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc56)
        cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc54)
      } loc(#loc84)
    } loc(#loc82)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc57)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54b_goodG2BSink(%9) : (!cir.ptr<!s64i>) -> () loc(#loc58)
    cir.return loc(#loc37)
  } loc(#loc75)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":22:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":22:91)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":24:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":32:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":26:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":26:15)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":27:12)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":27:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":29:23)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":29:30)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":29:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":29:47)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":29:48)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":29:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":30:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":30:33)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":30:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":30:17)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":30:14)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":30:23)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":30:24)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":30:30)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":30:29)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":31:76)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":31:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":52:1)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":55:1)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":54:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":54:13)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":39:1)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":39:95)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":42:1)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":50:1)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":44:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":44:15)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":45:12)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":45:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":47:23)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":47:30)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":47:34)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":47:48)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":47:49)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":47:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":48:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":48:33)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":48:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":48:17)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":48:14)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":48:23)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":48:24)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":48:30)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":48:29)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":49:80)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c":49:5)
#loc59 = loc(fused[#loc1, #loc2])
#loc60 = loc(fused[#loc3, #loc4])
#loc61 = loc(fused[#loc5, #loc6])
#loc62 = loc(fused[#loc7, #loc8])
#loc63 = loc(fused[#loc9, #loc10])
#loc64 = loc(fused[#loc12, #loc11])
#loc65 = loc(fused[#loc15, #loc16])
#loc66 = loc(fused[#loc14, #loc16])
#loc67 = loc(fused[#loc13, #loc17])
#loc68 = loc(fused[#loc18, #loc17])
#loc69 = loc(fused[#loc19, #loc20])
#loc70 = loc(fused[#loc21, #loc22])
#loc71 = loc(fused[#loc24, #loc20])
#loc72 = loc(fused[#loc30, #loc31])
#loc73 = loc(fused[#loc32, #loc33])
#loc74 = loc(fused[#loc34, #loc35])
#loc75 = loc(fused[#loc36, #loc37])
#loc76 = loc(fused[#loc38, #loc39])
#loc77 = loc(fused[#loc41, #loc40])
#loc78 = loc(fused[#loc44, #loc45])
#loc79 = loc(fused[#loc43, #loc45])
#loc80 = loc(fused[#loc42, #loc46])
#loc81 = loc(fused[#loc47, #loc46])
#loc82 = loc(fused[#loc48, #loc49])
#loc83 = loc(fused[#loc50, #loc51])
#loc84 = loc(fused[#loc53, #loc49])
