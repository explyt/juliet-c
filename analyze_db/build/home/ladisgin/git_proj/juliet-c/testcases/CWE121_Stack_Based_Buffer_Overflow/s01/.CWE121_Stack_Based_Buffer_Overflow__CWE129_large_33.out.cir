!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":145:10)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":145:14)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":145:20)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":145:32)
#true = #cir.bool<true> : !cir.bool
#loc232 = loc(fused[#loc155, #loc156])
#loc233 = loc(fused[#loc157, #loc158])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc171)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc172)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func @_ZN51CWE121_Stack_Based_Buffer_Overflow__CWE129_large_333badEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc174)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc175)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc11)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc13)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc15)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc179)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc20)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc20)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc179)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc181)
        %9 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc182)
        %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc182)
        cir.store %10, %9 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc182)
        cir.scope {
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc29)
          %12 = cir.const #cir.int<0> : !s32i loc(#loc30)
          %13 = cir.cmp(ge, %11, %12) : !s32i, !cir.bool loc(#loc184)
          cir.if %13 {
            %14 = cir.const #cir.int<1> : !s32i loc(#loc34)
            %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc35)
            %16 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc36)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc36)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc186)
            cir.scope {
              %18 = cir.const #cir.int<0> : !s32i loc(#loc39)
              cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc188)
              cir.for : cond {
                %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc41)
                %20 = cir.const #cir.int<10> : !s32i loc(#loc42)
                %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc189)
                cir.condition(%21) loc(#loc189)
              } body {
                %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc43)
                %20 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc44)
                %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc44)
                %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc44)
                cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc45)
                cir.yield loc(#loc38)
              } step {
                %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc46)
                %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc47)
                cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc190)
                cir.yield loc(#loc187)
              } loc(#loc187)
            } loc(#loc187)
          } else {
            %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc48)
          } loc(#loc185)
        } loc(#loc183)
      } loc(#loc180)
    } loc(#loc178)
    cir.return loc(#loc7)
  } loc(#loc173)
  cir.func internal private @_ZN51CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc192)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc193)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc54)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc56)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    %4 = cir.const #cir.int<7> : !s32i loc(#loc58)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc197)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc63)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc63)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc197)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc199)
        %9 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc200)
        %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc200)
        cir.store %10, %9 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc200)
        cir.scope {
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc72)
          %12 = cir.const #cir.int<0> : !s32i loc(#loc73)
          %13 = cir.cmp(ge, %11, %12) : !s32i, !cir.bool loc(#loc202)
          cir.if %13 {
            %14 = cir.const #cir.int<1> : !s32i loc(#loc77)
            %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc78)
            %16 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc79)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc79)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc204)
            cir.scope {
              %18 = cir.const #cir.int<0> : !s32i loc(#loc82)
              cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc206)
              cir.for : cond {
                %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc84)
                %20 = cir.const #cir.int<10> : !s32i loc(#loc85)
                %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc207)
                cir.condition(%21) loc(#loc207)
              } body {
                %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc86)
                %20 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc87)
                %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc87)
                %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc87)
                cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc88)
                cir.yield loc(#loc81)
              } step {
                %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc89)
                %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc90)
                cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc208)
                cir.yield loc(#loc205)
              } loc(#loc205)
            } loc(#loc205)
          } else {
            %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc91)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc91)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc92)
          } loc(#loc203)
        } loc(#loc201)
      } loc(#loc198)
    } loc(#loc196)
    cir.return loc(#loc50)
  } loc(#loc191)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc93)
  cir.func internal private @_ZN51CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc210)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc211)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc99)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc100)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc101)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc103)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc215)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc108)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc108)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc215)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc217)
        %9 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc218)
        %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc218)
        cir.store %10, %9 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc218)
        cir.scope {
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc117)
          %12 = cir.const #cir.int<0> : !s32i loc(#loc118)
          %13 = cir.cmp(ge, %11, %12) : !s32i, !cir.bool loc(#loc220)
          %14 = cir.ternary(%13, true {
            %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc120)
            %16 = cir.const #cir.int<10> : !s32i loc(#loc121)
            %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc221)
            %18 = cir.ternary(%17, true {
              %19 = cir.const #true loc(#loc119)
              cir.yield %19 : !cir.bool loc(#loc119)
            }, false {
              %19 = cir.const #false loc(#loc119)
              cir.yield %19 : !cir.bool loc(#loc119)
            }) : (!cir.bool) -> !cir.bool loc(#loc119)
            cir.yield %18 : !cir.bool loc(#loc119)
          }, false {
            %15 = cir.const #false loc(#loc119)
            cir.yield %15 : !cir.bool loc(#loc119)
          }) : (!cir.bool) -> !cir.bool loc(#loc119)
          cir.if %14 {
            %15 = cir.const #cir.int<1> : !s32i loc(#loc126)
            %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc127)
            %17 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc128)
            %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc128)
            cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc223)
            cir.scope {
              %19 = cir.const #cir.int<0> : !s32i loc(#loc131)
              cir.store %19, %8 : !s32i, !cir.ptr<!s32i> loc(#loc225)
              cir.for : cond {
                %20 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc133)
                %21 = cir.const #cir.int<10> : !s32i loc(#loc134)
                %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc226)
                cir.condition(%22) loc(#loc226)
              } body {
                %20 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc135)
                %21 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc136)
                %22 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc136)
                %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc136)
                cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc137)
                cir.yield loc(#loc130)
              } step {
                %20 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc138)
                %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc139)
                cir.store %21, %8 : !s32i, !cir.ptr<!s32i> loc(#loc227)
                cir.yield loc(#loc224)
              } loc(#loc224)
            } loc(#loc224)
          } else {
            %15 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc93)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc93)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc140)
          } loc(#loc222)
        } loc(#loc219)
      } loc(#loc216)
    } loc(#loc214)
    cir.return loc(#loc95)
  } loc(#loc209)
  cir.func @_ZN51CWE121_Stack_Based_Buffer_Overflow__CWE129_large_334goodEv() extra(#fn_attr) {
    cir.call @_ZN51CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33L7goodG2BEv() : () -> () loc(#loc143)
    cir.call @_ZN51CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33L7goodB2GEv() : () -> () loc(#loc144)
    cir.return loc(#loc142)
  } loc(#loc228)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc229)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc230)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc149)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc150)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc151)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc152)
  cir.func @main(%arg0: !s32i loc(fused[#loc155, #loc156]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc157, #loc158])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc232)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc233)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc154)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc159)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc160)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc161)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc161)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc162)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc149)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc149)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc163)
    cir.call @_ZN51CWE121_Stack_Based_Buffer_Overflow__CWE129_large_334goodEv() : () -> () loc(#loc164)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc150)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc150)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc165)
    %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc151)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc151)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc166)
    cir.call @_ZN51CWE121_Stack_Based_Buffer_Overflow__CWE129_large_333badEv() : () -> () loc(#loc167)
    %12 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc152)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc152)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc168)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc169)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc234)
    cir.return %15 : !s32i loc(#loc234)
  } loc(#loc231)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":51:27)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":25:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":55:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":27:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":27:9)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":28:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":28:20)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":30:13)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":30:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":30:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":32:12)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":32:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":33:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":54:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":34:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":34:20)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":35:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":53:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":36:13)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":36:17)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":37:13)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":37:34)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":40:13)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":52:13)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":40:17)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":40:25)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":41:13)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":48:13)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":50:13)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":42:32)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":42:24)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":42:17)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":44:17)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":47:17)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":44:25)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":44:21)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":44:28)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":44:32)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":46:41)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":46:34)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":46:21)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":44:37)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":44:36)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":51:17)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":62:1)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":93:1)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":64:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":64:9)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":65:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":65:20)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":67:13)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":67:12)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":67:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":70:12)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":70:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":71:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":92:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":72:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":72:20)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":73:9)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":91:9)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":74:13)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":74:17)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":75:13)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":75:34)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":78:13)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":90:13)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":78:17)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":78:25)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":79:13)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":86:13)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":88:13)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":80:32)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":80:24)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":80:17)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":82:17)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":85:17)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":82:25)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":82:21)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":82:28)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":82:32)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":84:41)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":84:34)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":84:21)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":82:37)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":82:36)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":89:27)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":89:17)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":121:27)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":96:1)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":125:1)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":98:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":98:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":99:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":99:20)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":101:13)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":101:12)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":101:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":103:12)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":103:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":104:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":124:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":105:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":105:20)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":106:9)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":123:9)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":107:13)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":107:17)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":108:13)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":108:34)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":110:13)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":122:13)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":110:17)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":110:25)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":110:27)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":110:30)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":110:38)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":110:40)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":111:13)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":118:13)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":120:13)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":112:32)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":112:24)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":112:17)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":114:17)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":117:17)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":114:25)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":114:21)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":114:28)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":114:32)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":116:41)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":116:34)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":116:21)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":114:37)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":114:36)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":121:17)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":127:1)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":131:1)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":129:5)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":130:5)
#loc145 = loc("/usr/include/stdlib.h":575:1)
#loc146 = loc("/usr/include/stdlib.h":575:41)
#loc147 = loc("/usr/include/time.h":76:1)
#loc148 = loc("/usr/include/time.h":76:38)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":150:15)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":152:15)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":155:15)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":157:15)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":145:1)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":160:1)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":146:1)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":148:27)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":148:22)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":148:5)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":150:5)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":151:5)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":152:5)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":155:5)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":156:5)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":157:5)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":159:12)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_33.cpp":159:5)
#loc171 = loc(fused[#loc1, #loc2])
#loc172 = loc(fused[#loc3, #loc4])
#loc173 = loc(fused[#loc6, #loc7])
#loc174 = loc(fused[#loc8, #loc9])
#loc175 = loc(fused[#loc10, #loc11])
#loc176 = loc(fused[#loc14, #loc12])
#loc177 = loc(fused[#loc16, #loc15])
#loc178 = loc(fused[#loc17, #loc18])
#loc179 = loc(fused[#loc19, #loc20])
#loc180 = loc(fused[#loc21, #loc22])
#loc181 = loc(fused[#loc23, #loc24])
#loc182 = loc(fused[#loc25, #loc26])
#loc183 = loc(fused[#loc27, #loc28])
#loc184 = loc(fused[#loc29, #loc30])
#loc185 = loc(fused[#loc31, #loc32, #loc33, #loc28])
#loc186 = loc(fused[#loc36, #loc34])
#loc187 = loc(fused[#loc37, #loc38])
#loc188 = loc(fused[#loc40, #loc39])
#loc189 = loc(fused[#loc41, #loc42])
#loc190 = loc(fused[#loc47, #loc46])
#loc191 = loc(fused[#loc49, #loc50])
#loc192 = loc(fused[#loc51, #loc52])
#loc193 = loc(fused[#loc53, #loc54])
#loc194 = loc(fused[#loc57, #loc55])
#loc195 = loc(fused[#loc59, #loc58])
#loc196 = loc(fused[#loc60, #loc61])
#loc197 = loc(fused[#loc62, #loc63])
#loc198 = loc(fused[#loc64, #loc65])
#loc199 = loc(fused[#loc66, #loc67])
#loc200 = loc(fused[#loc68, #loc69])
#loc201 = loc(fused[#loc70, #loc71])
#loc202 = loc(fused[#loc72, #loc73])
#loc203 = loc(fused[#loc74, #loc75, #loc76, #loc71])
#loc204 = loc(fused[#loc79, #loc77])
#loc205 = loc(fused[#loc80, #loc81])
#loc206 = loc(fused[#loc83, #loc82])
#loc207 = loc(fused[#loc84, #loc85])
#loc208 = loc(fused[#loc90, #loc89])
#loc209 = loc(fused[#loc94, #loc95])
#loc210 = loc(fused[#loc96, #loc97])
#loc211 = loc(fused[#loc98, #loc99])
#loc212 = loc(fused[#loc102, #loc100])
#loc213 = loc(fused[#loc104, #loc103])
#loc214 = loc(fused[#loc105, #loc106])
#loc215 = loc(fused[#loc107, #loc108])
#loc216 = loc(fused[#loc109, #loc110])
#loc217 = loc(fused[#loc111, #loc112])
#loc218 = loc(fused[#loc113, #loc114])
#loc219 = loc(fused[#loc115, #loc116])
#loc220 = loc(fused[#loc117, #loc118])
#loc221 = loc(fused[#loc120, #loc122])
#loc222 = loc(fused[#loc123, #loc124, #loc125, #loc116])
#loc223 = loc(fused[#loc128, #loc126])
#loc224 = loc(fused[#loc129, #loc130])
#loc225 = loc(fused[#loc132, #loc131])
#loc226 = loc(fused[#loc133, #loc134])
#loc227 = loc(fused[#loc139, #loc138])
#loc228 = loc(fused[#loc141, #loc142])
#loc229 = loc(fused[#loc145, #loc146])
#loc230 = loc(fused[#loc147, #loc148])
#loc231 = loc(fused[#loc153, #loc154])
#loc234 = loc(fused[#loc170, #loc169])
