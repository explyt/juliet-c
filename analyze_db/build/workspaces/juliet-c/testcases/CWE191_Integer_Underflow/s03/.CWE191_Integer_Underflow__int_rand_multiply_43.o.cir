!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":25:23)
#loc6 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":25:28)
#loc8 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":28:12)
#loc31 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":50:27)
#loc32 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":50:32)
#loc56 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":71:27)
#loc57 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":71:32)
#loc59 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":74:12)
#loc97 = loc(fused[#loc5, #loc6])
#loc108 = loc(fused[#loc31, #loc32])
#loc118 = loc(fused[#loc56, #loc57])
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_43.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc95)
  cir.func internal private @_ZN46CWE191_Integer_Underflow__int_rand_multiply_43L9badSourceERi(%arg0: !cir.ptr<!s32i> loc(fused[#loc5, #loc6])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc97)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc7)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc8)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc8)
    cir.brcond %4 ^bb1, ^bb2 loc(#loc8)
  ^bb1:  // pred: ^bb0
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc8)
    %7 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %8 = cir.shift(left, %6 : !u32i, %7 : !s32i) -> !u32i loc(#loc8)
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc8)
    %11 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc8)
    %13 = cir.binop(xor, %8, %12) : !u32i loc(#loc8)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc8)
    %16 = cir.binop(xor, %13, %15) : !u32i loc(#loc8)
    cir.br ^bb3(%16 : !u32i) loc(#loc8)
  ^bb2:  // pred: ^bb0
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc8)
    %19 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc8)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc8)
    %23 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc8)
    %25 = cir.binop(xor, %20, %24) : !u32i loc(#loc8)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc8)
    %28 = cir.binop(xor, %25, %27) : !u32i loc(#loc8)
    %29 = cir.unary(minus, %28) : !u32i, !u32i loc(#loc8)
    %30 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc8)
    %32 = cir.binop(sub, %29, %31) : !u32i loc(#loc8)
    cir.br ^bb3(%32 : !u32i) loc(#loc8)
  ^bb3(%33: !u32i loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":28:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc8)
  ^bb4:  // pred: ^bb3
    %34 = cir.cast(integral, %33 : !u32i), !s32i loc(#loc8)
    %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc9)
    cir.store %34, %35 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    cir.return loc(#loc4)
  } loc(#loc96)
  cir.func private @printIntLine(!s32i) loc(#loc99)
  cir.func @_ZN46CWE191_Integer_Underflow__int_rand_multiply_433badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc101)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc102)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc18)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    cir.call @_ZN46CWE191_Integer_Underflow__int_rand_multiply_43L9badSourceERi(%1) : (!cir.ptr<!s32i>) -> () loc(#loc20)
    cir.br ^bb1 loc(#loc104)
  ^bb1:  // pred: ^bb0
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc24)
    %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc105)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc106)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    %7 = cir.const #cir.int<2> : !s32i loc(#loc15)
    %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc26)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc28)
    cir.br ^bb3 loc(#loc22)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc22)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc13)
  } loc(#loc100)
  cir.func internal private @_ZN46CWE191_Integer_Underflow__int_rand_multiply_43L13goodG2BSourceERi(%arg0: !cir.ptr<!s32i> loc(fused[#loc31, #loc32])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc108)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc33)
    %1 = cir.const #cir.int<2> : !s32i loc(#loc34)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc35)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc36)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    cir.return loc(#loc30)
  } loc(#loc107)
  cir.func internal private @_ZN46CWE191_Integer_Underflow__int_rand_multiply_43L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc111)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc112)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc43)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    cir.call @_ZN46CWE191_Integer_Underflow__int_rand_multiply_43L13goodG2BSourceERi(%1) : (!cir.ptr<!s32i>) -> () loc(#loc45)
    cir.br ^bb1 loc(#loc114)
  ^bb1:  // pred: ^bb0
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc48)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc49)
    %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc115)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc116)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    %7 = cir.const #cir.int<2> : !s32i loc(#loc40)
    %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc51)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc53)
    cir.br ^bb3 loc(#loc47)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc47)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc38)
  } loc(#loc110)
  cir.func internal private @_ZN46CWE191_Integer_Underflow__int_rand_multiply_43L13goodB2GSourceERi(%arg0: !cir.ptr<!s32i> loc(fused[#loc56, #loc57])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc118)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc58)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc59)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc59)
    cir.brcond %4 ^bb1, ^bb2 loc(#loc59)
  ^bb1:  // pred: ^bb0
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
    %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc59)
    %7 = cir.const #cir.int<30> : !s32i loc(#loc59)
    %8 = cir.shift(left, %6 : !u32i, %7 : !s32i) -> !u32i loc(#loc59)
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc59)
    %11 = cir.const #cir.int<15> : !s32i loc(#loc59)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc59)
    %13 = cir.binop(xor, %8, %12) : !u32i loc(#loc59)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc59)
    %16 = cir.binop(xor, %13, %15) : !u32i loc(#loc59)
    cir.br ^bb3(%16 : !u32i) loc(#loc59)
  ^bb2:  // pred: ^bb0
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc59)
    %19 = cir.const #cir.int<30> : !s32i loc(#loc59)
    %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc59)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc59)
    %23 = cir.const #cir.int<15> : !s32i loc(#loc59)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc59)
    %25 = cir.binop(xor, %20, %24) : !u32i loc(#loc59)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc59)
    %28 = cir.binop(xor, %25, %27) : !u32i loc(#loc59)
    %29 = cir.unary(minus, %28) : !u32i, !u32i loc(#loc59)
    %30 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc59)
    %32 = cir.binop(sub, %29, %31) : !u32i loc(#loc59)
    cir.br ^bb3(%32 : !u32i) loc(#loc59)
  ^bb3(%33: !u32i loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":74:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc59)
  ^bb4:  // pred: ^bb3
    %34 = cir.cast(integral, %33 : !u32i), !s32i loc(#loc59)
    %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
    cir.store %34, %35 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    cir.return loc(#loc55)
  } loc(#loc117)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc120)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc63)
  cir.func internal private @_ZN46CWE191_Integer_Underflow__int_rand_multiply_43L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc122)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc123)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc70)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    cir.call @_ZN46CWE191_Integer_Underflow__int_rand_multiply_43L13goodB2GSourceERi(%1) : (!cir.ptr<!s32i>) -> () loc(#loc72)
    cir.br ^bb1 loc(#loc125)
  ^bb1:  // pred: ^bb0
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc76)
    %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc126)
    cir.brcond %5 ^bb2, ^bb8 loc(#loc127)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc128)
  ^bb3:  // pred: ^bb2
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc80)
    %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc81)
    %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc81)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc81)
    %11 = cir.const #cir.int<2> : !s32i loc(#loc82)
    %12 = cir.binop(div, %10, %11) : !s32i loc(#loc129)
    %13 = cir.cmp(gt, %6, %12) : !s32i, !cir.bool loc(#loc130)
    cir.brcond %13 ^bb4, ^bb5 loc(#loc131)
  ^bb4:  // pred: ^bb3
    %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc87)
    %15 = cir.const #cir.int<2> : !s32i loc(#loc67)
    %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc87)
    cir.store %16, %0 : !s32i, !cir.ptr<!s32i> loc(#loc122)
    %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc89)
    cir.br ^bb6 loc(#loc85)
  ^bb5:  // pred: ^bb3
    %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc63)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    cir.br ^bb6 loc(#loc79)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc79)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc74)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc74)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc65)
  } loc(#loc121)
  cir.func @_ZN46CWE191_Integer_Underflow__int_rand_multiply_434goodEv() extra(#fn_attr1) {
    cir.call @_ZN46CWE191_Integer_Underflow__int_rand_multiply_43L7goodG2BEv() : () -> () loc(#loc93)
    cir.call @_ZN46CWE191_Integer_Underflow__int_rand_multiply_43L7goodB2GEv() : () -> () loc(#loc94)
    cir.return loc(#loc92)
  } loc(#loc132)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_43.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":25:1)
#loc4 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":29:1)
#loc7 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":26:1)
#loc9 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":28:5)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":31:1)
#loc13 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":43:1)
#loc14 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":40:9)
#loc15 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":40:29)
#loc16 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":33:5)
#loc17 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":33:9)
#loc18 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":35:12)
#loc19 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":35:5)
#loc20 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":36:5)
#loc21 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":37:5)
#loc22 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":42:5)
#loc23 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":37:8)
#loc24 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":37:15)
#loc25 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":38:5)
#loc26 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":40:22)
#loc27 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":41:22)
#loc28 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":41:9)
#loc29 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":50:1)
#loc30 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":54:1)
#loc33 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":51:1)
#loc34 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":53:13)
#loc35 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":53:12)
#loc36 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":53:5)
#loc37 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":56:1)
#loc38 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":68:1)
#loc39 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":65:9)
#loc40 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":65:29)
#loc41 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":58:5)
#loc42 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":58:9)
#loc43 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":60:12)
#loc44 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":60:5)
#loc45 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":61:5)
#loc46 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":62:5)
#loc47 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":67:5)
#loc48 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":62:8)
#loc49 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":62:15)
#loc50 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":63:5)
#loc51 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":65:22)
#loc52 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":66:22)
#loc53 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":66:9)
#loc54 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":71:1)
#loc55 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":75:1)
#loc58 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":72:1)
#loc60 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":74:5)
#loc61 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc62 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc63 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":93:23)
#loc64 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":77:1)
#loc65 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":96:1)
#loc66 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":88:13)
#loc67 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":88:33)
#loc68 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":79:5)
#loc69 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":79:9)
#loc70 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":81:12)
#loc71 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":81:5)
#loc72 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":82:5)
#loc73 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":83:5)
#loc74 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":95:5)
#loc75 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":83:8)
#loc76 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":83:15)
#loc77 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":84:5)
#loc78 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":86:9)
#loc79 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":94:9)
#loc80 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":86:13)
#loc81 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":86:21)
#loc82 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":86:29)
#loc83 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":86:30)
#loc84 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":87:9)
#loc85 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":90:9)
#loc86 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":92:9)
#loc87 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":88:26)
#loc88 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":89:26)
#loc89 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":89:13)
#loc90 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":93:13)
#loc91 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":98:1)
#loc92 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":102:1)
#loc93 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":100:5)
#loc94 = loc("CWE191_Integer_Underflow__int_rand_multiply_43.cpp":101:5)
#loc95 = loc(fused[#loc1, #loc2])
#loc96 = loc(fused[#loc3, #loc4])
#loc98 = loc(fused[#loc9, #loc8])
#loc99 = loc(fused[#loc10, #loc11])
#loc100 = loc(fused[#loc12, #loc13])
#loc101 = loc(fused[#loc14, #loc15])
#loc102 = loc(fused[#loc16, #loc17])
#loc103 = loc(fused[#loc19, #loc18])
#loc104 = loc(fused[#loc21, #loc22])
#loc105 = loc(fused[#loc23, #loc24])
#loc106 = loc(fused[#loc25, #loc22])
#loc107 = loc(fused[#loc29, #loc30])
#loc109 = loc(fused[#loc36, #loc34])
#loc110 = loc(fused[#loc37, #loc38])
#loc111 = loc(fused[#loc39, #loc40])
#loc112 = loc(fused[#loc41, #loc42])
#loc113 = loc(fused[#loc44, #loc43])
#loc114 = loc(fused[#loc46, #loc47])
#loc115 = loc(fused[#loc48, #loc49])
#loc116 = loc(fused[#loc50, #loc47])
#loc117 = loc(fused[#loc54, #loc55])
#loc119 = loc(fused[#loc60, #loc59])
#loc120 = loc(fused[#loc61, #loc62])
#loc121 = loc(fused[#loc64, #loc65])
#loc122 = loc(fused[#loc66, #loc67])
#loc123 = loc(fused[#loc68, #loc69])
#loc124 = loc(fused[#loc71, #loc70])
#loc125 = loc(fused[#loc73, #loc74])
#loc126 = loc(fused[#loc75, #loc76])
#loc127 = loc(fused[#loc77, #loc74])
#loc128 = loc(fused[#loc78, #loc79])
#loc129 = loc(fused[#loc81, #loc82])
#loc130 = loc(fused[#loc80, #loc83])
#loc131 = loc(fused[#loc84, #loc85, #loc86, #loc79])
#loc132 = loc(fused[#loc91, #loc92])
