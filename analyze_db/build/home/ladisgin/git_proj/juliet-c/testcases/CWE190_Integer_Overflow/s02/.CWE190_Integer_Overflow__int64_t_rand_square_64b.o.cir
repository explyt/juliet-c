!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":25:63)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":25:70)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":43:67)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":43:74)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":57:67)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":57:74)
#loc74 = loc(fused[#loc5, #loc6])
#loc80 = loc(fused[#loc23, #loc24])
#loc88 = loc(fused[#loc47, #loc48])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_64b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLongLongLine(!s64i) loc(#loc72)
  cir.func @CWE190_Integer_Overflow__int64_t_rand_square_64b_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc75)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc74)
    %2 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc76)
    %3 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc77)
    cir.store %arg0, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc13)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc10)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc10)
    cir.store %5, %2 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc76)
    %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc14)
    %7 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc15)
    cir.store %7, %3 : !s64i, !cir.ptr<!s64i> loc(#loc77)
    cir.br ^bb1 loc(#loc78)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc18)
    %9 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc8)
    %10 = cir.binop(mul, %8, %9) nsw : !s64i loc(#loc18)
    cir.store %10, %0 : !s64i, !cir.ptr<!s64i> loc(#loc75)
    %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc19)
    cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc20)
    cir.br ^bb2 loc(#loc17)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc4)
  } loc(#loc73)
  cir.func @CWE190_Integer_Overflow__int64_t_rand_square_64b_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc23, #loc24])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc81)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc80)
    %2 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc82)
    %3 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc83)
    cir.store %arg0, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc31)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc28)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc28)
    cir.store %5, %2 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc82)
    %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc32)
    %7 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc33)
    cir.store %7, %3 : !s64i, !cir.ptr<!s64i> loc(#loc83)
    cir.br ^bb1 loc(#loc84)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc36)
    %9 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc26)
    %10 = cir.binop(mul, %8, %9) nsw : !s64i loc(#loc36)
    cir.store %10, %0 : !s64i, !cir.ptr<!s64i> loc(#loc81)
    %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc37)
    cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc38)
    cir.br ^bb2 loc(#loc35)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc22)
  } loc(#loc79)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc85)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc41)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc86)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc44)
  cir.func @CWE190_Integer_Overflow__int64_t_rand_square_64b_goodB2GSink(%arg0: !cir.ptr<!void> loc(fused[#loc47, #loc48])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc89)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc88)
    %2 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc90)
    %3 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc91)
    cir.store %arg0, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc55)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc52)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc52)
    cir.store %5, %2 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc90)
    %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc56)
    %7 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc57)
    cir.store %7, %3 : !s64i, !cir.ptr<!s64i> loc(#loc91)
    cir.br ^bb1 loc(#loc92)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc60)
    %9 = cir.call @imaxabs(%8) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc61)
    %10 = cir.cast(int_to_float, %9 : !s64i), !cir.long_double<!cir.f80> loc(#loc61)
    %11 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc62)
    %12 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc63)
    %13 = cir.cast(int_to_float, %12 : !s64i), !cir.long_double<!cir.f80> loc(#loc63)
    %14 = cir.call @sqrtl(%13) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc62)
    %15 = cir.cmp(le, %10, %14) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc93)
    cir.brcond %15 ^bb2, ^bb3 loc(#loc94)
  ^bb2:  // pred: ^bb1
    %16 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc68)
    %17 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc50)
    %18 = cir.binop(mul, %16, %17) nsw : !s64i loc(#loc68)
    cir.store %18, %0 : !s64i, !cir.ptr<!s64i> loc(#loc89)
    %19 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc69)
    cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc70)
    cir.br ^bb4 loc(#loc66)
  ^bb3:  // pred: ^bb1
    %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc44)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    cir.br ^bb4 loc(#loc59)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc59)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc46)
  } loc(#loc87)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_64b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":25:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":36:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":33:9)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":33:33)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":28:5)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":28:36)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":30:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":30:29)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":26:1)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":30:22)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":30:21)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":31:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":35:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":33:26)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":34:27)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":34:9)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":43:1)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":54:1)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":51:9)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":51:33)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":46:5)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":46:36)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":48:5)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":48:29)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":44:1)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":48:22)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":48:21)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":49:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":53:5)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":51:26)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":52:27)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":52:9)
#loc39 = loc("/usr/include/inttypes.h":351:1)
#loc40 = loc("/usr/include/inttypes.h":351:74)
#loc41 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":71:19)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":57:1)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":73:1)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":66:9)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":66:33)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":60:5)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":60:36)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":62:5)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":62:29)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":58:1)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":62:22)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":62:21)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":64:5)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":72:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":64:27)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":64:9)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":64:36)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":64:42)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":64:51)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":65:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":68:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":70:5)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":66:26)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":67:27)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":67:9)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_square_64b.c":71:9)
#loc72 = loc(fused[#loc1, #loc2])
#loc73 = loc(fused[#loc3, #loc4])
#loc75 = loc(fused[#loc7, #loc8])
#loc76 = loc(fused[#loc9, #loc10])
#loc77 = loc(fused[#loc11, #loc12])
#loc78 = loc(fused[#loc16, #loc17])
#loc79 = loc(fused[#loc21, #loc22])
#loc81 = loc(fused[#loc25, #loc26])
#loc82 = loc(fused[#loc27, #loc28])
#loc83 = loc(fused[#loc29, #loc30])
#loc84 = loc(fused[#loc34, #loc35])
#loc85 = loc(fused[#loc39, #loc40])
#loc86 = loc(fused[#loc42, #loc43])
#loc87 = loc(fused[#loc45, #loc46])
#loc89 = loc(fused[#loc49, #loc50])
#loc90 = loc(fused[#loc51, #loc52])
#loc91 = loc(fused[#loc53, #loc54])
#loc92 = loc(fused[#loc58, #loc59])
#loc93 = loc(fused[#loc61, #loc64])
#loc94 = loc(fused[#loc65, #loc66, #loc67, #loc59])
