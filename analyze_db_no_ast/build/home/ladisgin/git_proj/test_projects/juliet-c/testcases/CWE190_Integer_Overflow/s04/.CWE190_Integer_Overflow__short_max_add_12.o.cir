!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_add_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc151)
  cir.func private  @printIntLine(!s32i) loc(#loc152)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc153)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto  @CWE190_Integer_Overflow__short_max_add_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc155)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc12)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc12)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc156)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc158)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc158)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc16)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc16)
      cir.if %6 {
        %7 = cir.const #cir.int<32767> : !s32i loc(#loc21)
        %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc21)
        cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc160)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc23)
        %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc23)
        cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc161)
      } loc(#loc159)
    } loc(#loc157)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc163)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc163)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc27)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc27)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc166)
          %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc36)
          %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc36)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc35)
          %11 = cir.binop(add, %9, %10) nsw : !s32i loc(#loc36)
          %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc36)
          cir.store %12, %7 : !s16i, !cir.ptr<!s16i> loc(#loc166)
          %13 = cir.load %7 : !cir.ptr<!s16i>, !s16i loc(#loc37)
          %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc37)
          cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc38)
        } loc(#loc165)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc41)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc41)
          %9 = cir.const #cir.int<32767> : !s32i loc(#loc42)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !s32i loc(#loc168)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc43)
          cir.if %11 {
            %12 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc170)
            %13 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc49)
            %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc49)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc48)
            %16 = cir.binop(add, %14, %15) nsw : !s32i loc(#loc49)
            %17 = cir.cast(integral, %16 : !s32i), !s16i loc(#loc49)
            cir.store %17, %12 : !s16i, !cir.ptr<!s16i> loc(#loc170)
            %18 = cir.load %12 : !cir.ptr<!s16i>, !s16i loc(#loc50)
            %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc50)
            cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc51)
          } else {
            %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc7)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc7)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc52)
          } loc(#loc169)
        } loc(#loc167)
      } loc(#loc164)
    } loc(#loc162)
    cir.return loc(#loc9)
  } loc(#loc154)
  cir.func no_proto  @CWE190_Integer_Overflow__short_max_add_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc172)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc55)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc173)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc57)
    cir.return loc(#loc54)
  } loc(#loc171)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc175)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc63)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc63)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc176)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc178)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc178)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc67)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc67)
      cir.if %6 {
        %7 = cir.const #cir.int<32767> : !s32i loc(#loc72)
        %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc72)
        cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc180)
      } else {
        %7 = cir.const #cir.int<32767> : !s32i loc(#loc74)
        %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc74)
        cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc181)
      } loc(#loc179)
    } loc(#loc177)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc183)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc183)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc78)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc78)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc85)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc85)
          %9 = cir.const #cir.int<32767> : !s32i loc(#loc86)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !s32i loc(#loc186)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc87)
          cir.if %11 {
            %12 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc188)
            %13 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc93)
            %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc93)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc92)
            %16 = cir.binop(add, %14, %15) nsw : !s32i loc(#loc93)
            %17 = cir.cast(integral, %16 : !s32i), !s16i loc(#loc93)
            cir.store %17, %12 : !s16i, !cir.ptr<!s16i> loc(#loc188)
            %18 = cir.load %12 : !cir.ptr<!s16i>, !s16i loc(#loc94)
            %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc94)
            cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc95)
          } else {
            %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc96)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc96)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc97)
          } loc(#loc187)
        } loc(#loc185)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc100)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc100)
          %9 = cir.const #cir.int<32767> : !s32i loc(#loc101)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !s32i loc(#loc190)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc102)
          cir.if %11 {
            %12 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc192)
            %13 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc108)
            %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc108)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc107)
            %16 = cir.binop(add, %14, %15) nsw : !s32i loc(#loc108)
            %17 = cir.cast(integral, %16 : !s32i), !s16i loc(#loc108)
            cir.store %17, %12 : !s16i, !cir.ptr<!s16i> loc(#loc192)
            %18 = cir.load %12 : !cir.ptr<!s16i>, !s16i loc(#loc109)
            %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc109)
            cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc110)
          } else {
            %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc111)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc111)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc112)
          } loc(#loc191)
        } loc(#loc189)
      } loc(#loc184)
    } loc(#loc182)
    cir.return loc(#loc60)
  } loc(#loc174)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc194)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc117)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc117)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc195)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc197)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc197)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc121)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc121)
      cir.if %6 {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc126)
        %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc126)
        cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc199)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc128)
        %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc128)
        cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc200)
      } loc(#loc198)
    } loc(#loc196)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc202)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc202)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc132)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc132)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc205)
          %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc141)
          %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc141)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc140)
          %11 = cir.binop(add, %9, %10) nsw : !s32i loc(#loc141)
          %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc141)
          cir.store %12, %7 : !s16i, !cir.ptr<!s16i> loc(#loc205)
          %13 = cir.load %7 : !cir.ptr<!s16i>, !s16i loc(#loc142)
          %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc142)
          cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc143)
        } loc(#loc204)
      } else {
        cir.scope {
          %7 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc207)
          %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc148)
          %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc148)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc147)
          %11 = cir.binop(add, %9, %10) nsw : !s32i loc(#loc148)
          %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc148)
          cir.store %12, %7 : !s16i, !cir.ptr<!s16i> loc(#loc207)
          %13 = cir.load %7 : !cir.ptr<!s16i>, !s16i loc(#loc149)
          %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc149)
          cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc150)
        } loc(#loc206)
      } loc(#loc203)
    } loc(#loc201)
    cir.return loc(#loc114)
  } loc(#loc193)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_add_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE190_Integer_Overflow__short_max_add_12.c":54:23)
#loc8 = loc("CWE190_Integer_Overflow__short_max_add_12.c":22:1)
#loc9 = loc("CWE190_Integer_Overflow__short_max_add_12.c":57:1)
#loc10 = loc("CWE190_Integer_Overflow__short_max_add_12.c":24:5)
#loc11 = loc("CWE190_Integer_Overflow__short_max_add_12.c":24:11)
#loc12 = loc("CWE190_Integer_Overflow__short_max_add_12.c":25:12)
#loc13 = loc("CWE190_Integer_Overflow__short_max_add_12.c":25:5)
#loc14 = loc("CWE190_Integer_Overflow__short_max_add_12.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__short_max_add_12.c":35:5)
#loc16 = loc("CWE190_Integer_Overflow__short_max_add_12.c":26:8)
#loc17 = loc("CWE190_Integer_Overflow__short_max_add_12.c":26:33)
#loc18 = loc("CWE190_Integer_Overflow__short_max_add_12.c":27:5)
#loc19 = loc("CWE190_Integer_Overflow__short_max_add_12.c":30:5)
#loc20 = loc("CWE190_Integer_Overflow__short_max_add_12.c":32:5)
#loc21 = loc("CWE190_Integer_Overflow__short_max_add_12.c":29:16)
#loc22 = loc("CWE190_Integer_Overflow__short_max_add_12.c":29:9)
#loc23 = loc("CWE190_Integer_Overflow__short_max_add_12.c":34:16)
#loc24 = loc("CWE190_Integer_Overflow__short_max_add_12.c":34:9)
#loc25 = loc("CWE190_Integer_Overflow__short_max_add_12.c":36:5)
#loc26 = loc("CWE190_Integer_Overflow__short_max_add_12.c":56:5)
#loc27 = loc("CWE190_Integer_Overflow__short_max_add_12.c":36:8)
#loc28 = loc("CWE190_Integer_Overflow__short_max_add_12.c":36:33)
#loc29 = loc("CWE190_Integer_Overflow__short_max_add_12.c":37:5)
#loc30 = loc("CWE190_Integer_Overflow__short_max_add_12.c":43:5)
#loc31 = loc("CWE190_Integer_Overflow__short_max_add_12.c":45:5)
#loc32 = loc("CWE190_Integer_Overflow__short_max_add_12.c":38:9)
#loc33 = loc("CWE190_Integer_Overflow__short_max_add_12.c":42:9)
#loc34 = loc("CWE190_Integer_Overflow__short_max_add_12.c":40:13)
#loc35 = loc("CWE190_Integer_Overflow__short_max_add_12.c":40:35)
#loc36 = loc("CWE190_Integer_Overflow__short_max_add_12.c":40:28)
#loc37 = loc("CWE190_Integer_Overflow__short_max_add_12.c":41:26)
#loc38 = loc("CWE190_Integer_Overflow__short_max_add_12.c":41:13)
#loc39 = loc("CWE190_Integer_Overflow__short_max_add_12.c":47:9)
#loc40 = loc("CWE190_Integer_Overflow__short_max_add_12.c":55:9)
#loc41 = loc("CWE190_Integer_Overflow__short_max_add_12.c":47:13)
#loc42 = loc("CWE190_Integer_Overflow__short_max_add_12.c":47:20)
#loc43 = loc("CWE190_Integer_Overflow__short_max_add_12.c":47:18)
#loc44 = loc("CWE190_Integer_Overflow__short_max_add_12.c":48:9)
#loc45 = loc("CWE190_Integer_Overflow__short_max_add_12.c":51:9)
#loc46 = loc("CWE190_Integer_Overflow__short_max_add_12.c":53:9)
#loc47 = loc("CWE190_Integer_Overflow__short_max_add_12.c":49:13)
#loc48 = loc("CWE190_Integer_Overflow__short_max_add_12.c":49:35)
#loc49 = loc("CWE190_Integer_Overflow__short_max_add_12.c":49:28)
#loc50 = loc("CWE190_Integer_Overflow__short_max_add_12.c":50:26)
#loc51 = loc("CWE190_Integer_Overflow__short_max_add_12.c":50:13)
#loc52 = loc("CWE190_Integer_Overflow__short_max_add_12.c":54:13)
#loc53 = loc("CWE190_Integer_Overflow__short_max_add_12.c":143:1)
#loc54 = loc("CWE190_Integer_Overflow__short_max_add_12.c":147:1)
#loc55 = loc("CWE190_Integer_Overflow__short_max_add_12.c":145:5)
#loc56 = loc("CWE190_Integer_Overflow__short_max_add_12.c":145:13)
#loc57 = loc("CWE190_Integer_Overflow__short_max_add_12.c":146:5)
#loc58 = loc("CWE190_Integer_Overflow__short_max_add_12.c":146:13)
#loc59 = loc("CWE190_Integer_Overflow__short_max_add_12.c":66:1)
#loc60 = loc("CWE190_Integer_Overflow__short_max_add_12.c":106:1)
#loc61 = loc("CWE190_Integer_Overflow__short_max_add_12.c":68:5)
#loc62 = loc("CWE190_Integer_Overflow__short_max_add_12.c":68:11)
#loc63 = loc("CWE190_Integer_Overflow__short_max_add_12.c":69:12)
#loc64 = loc("CWE190_Integer_Overflow__short_max_add_12.c":69:5)
#loc65 = loc("CWE190_Integer_Overflow__short_max_add_12.c":70:5)
#loc66 = loc("CWE190_Integer_Overflow__short_max_add_12.c":79:5)
#loc67 = loc("CWE190_Integer_Overflow__short_max_add_12.c":70:8)
#loc68 = loc("CWE190_Integer_Overflow__short_max_add_12.c":70:33)
#loc69 = loc("CWE190_Integer_Overflow__short_max_add_12.c":71:5)
#loc70 = loc("CWE190_Integer_Overflow__short_max_add_12.c":74:5)
#loc71 = loc("CWE190_Integer_Overflow__short_max_add_12.c":76:5)
#loc72 = loc("CWE190_Integer_Overflow__short_max_add_12.c":73:16)
#loc73 = loc("CWE190_Integer_Overflow__short_max_add_12.c":73:9)
#loc74 = loc("CWE190_Integer_Overflow__short_max_add_12.c":78:16)
#loc75 = loc("CWE190_Integer_Overflow__short_max_add_12.c":78:9)
#loc76 = loc("CWE190_Integer_Overflow__short_max_add_12.c":80:5)
#loc77 = loc("CWE190_Integer_Overflow__short_max_add_12.c":105:5)
#loc78 = loc("CWE190_Integer_Overflow__short_max_add_12.c":80:8)
#loc79 = loc("CWE190_Integer_Overflow__short_max_add_12.c":80:33)
#loc80 = loc("CWE190_Integer_Overflow__short_max_add_12.c":81:5)
#loc81 = loc("CWE190_Integer_Overflow__short_max_add_12.c":92:5)
#loc82 = loc("CWE190_Integer_Overflow__short_max_add_12.c":94:5)
#loc83 = loc("CWE190_Integer_Overflow__short_max_add_12.c":83:9)
#loc84 = loc("CWE190_Integer_Overflow__short_max_add_12.c":91:9)
#loc85 = loc("CWE190_Integer_Overflow__short_max_add_12.c":83:13)
#loc86 = loc("CWE190_Integer_Overflow__short_max_add_12.c":83:20)
#loc87 = loc("CWE190_Integer_Overflow__short_max_add_12.c":83:18)
#loc88 = loc("CWE190_Integer_Overflow__short_max_add_12.c":84:9)
#loc89 = loc("CWE190_Integer_Overflow__short_max_add_12.c":87:9)
#loc90 = loc("CWE190_Integer_Overflow__short_max_add_12.c":89:9)
#loc91 = loc("CWE190_Integer_Overflow__short_max_add_12.c":85:13)
#loc92 = loc("CWE190_Integer_Overflow__short_max_add_12.c":85:35)
#loc93 = loc("CWE190_Integer_Overflow__short_max_add_12.c":85:28)
#loc94 = loc("CWE190_Integer_Overflow__short_max_add_12.c":86:26)
#loc95 = loc("CWE190_Integer_Overflow__short_max_add_12.c":86:13)
#loc96 = loc("CWE190_Integer_Overflow__short_max_add_12.c":90:23)
#loc97 = loc("CWE190_Integer_Overflow__short_max_add_12.c":90:13)
#loc98 = loc("CWE190_Integer_Overflow__short_max_add_12.c":96:9)
#loc99 = loc("CWE190_Integer_Overflow__short_max_add_12.c":104:9)
#loc100 = loc("CWE190_Integer_Overflow__short_max_add_12.c":96:13)
#loc101 = loc("CWE190_Integer_Overflow__short_max_add_12.c":96:20)
#loc102 = loc("CWE190_Integer_Overflow__short_max_add_12.c":96:18)
#loc103 = loc("CWE190_Integer_Overflow__short_max_add_12.c":97:9)
#loc104 = loc("CWE190_Integer_Overflow__short_max_add_12.c":100:9)
#loc105 = loc("CWE190_Integer_Overflow__short_max_add_12.c":102:9)
#loc106 = loc("CWE190_Integer_Overflow__short_max_add_12.c":98:13)
#loc107 = loc("CWE190_Integer_Overflow__short_max_add_12.c":98:35)
#loc108 = loc("CWE190_Integer_Overflow__short_max_add_12.c":98:28)
#loc109 = loc("CWE190_Integer_Overflow__short_max_add_12.c":99:26)
#loc110 = loc("CWE190_Integer_Overflow__short_max_add_12.c":99:13)
#loc111 = loc("CWE190_Integer_Overflow__short_max_add_12.c":103:23)
#loc112 = loc("CWE190_Integer_Overflow__short_max_add_12.c":103:13)
#loc113 = loc("CWE190_Integer_Overflow__short_max_add_12.c":111:1)
#loc114 = loc("CWE190_Integer_Overflow__short_max_add_12.c":141:1)
#loc115 = loc("CWE190_Integer_Overflow__short_max_add_12.c":113:5)
#loc116 = loc("CWE190_Integer_Overflow__short_max_add_12.c":113:11)
#loc117 = loc("CWE190_Integer_Overflow__short_max_add_12.c":114:12)
#loc118 = loc("CWE190_Integer_Overflow__short_max_add_12.c":114:5)
#loc119 = loc("CWE190_Integer_Overflow__short_max_add_12.c":115:5)
#loc120 = loc("CWE190_Integer_Overflow__short_max_add_12.c":124:5)
#loc121 = loc("CWE190_Integer_Overflow__short_max_add_12.c":115:8)
#loc122 = loc("CWE190_Integer_Overflow__short_max_add_12.c":115:33)
#loc123 = loc("CWE190_Integer_Overflow__short_max_add_12.c":116:5)
#loc124 = loc("CWE190_Integer_Overflow__short_max_add_12.c":119:5)
#loc125 = loc("CWE190_Integer_Overflow__short_max_add_12.c":121:5)
#loc126 = loc("CWE190_Integer_Overflow__short_max_add_12.c":118:16)
#loc127 = loc("CWE190_Integer_Overflow__short_max_add_12.c":118:9)
#loc128 = loc("CWE190_Integer_Overflow__short_max_add_12.c":123:16)
#loc129 = loc("CWE190_Integer_Overflow__short_max_add_12.c":123:9)
#loc130 = loc("CWE190_Integer_Overflow__short_max_add_12.c":125:5)
#loc131 = loc("CWE190_Integer_Overflow__short_max_add_12.c":140:5)
#loc132 = loc("CWE190_Integer_Overflow__short_max_add_12.c":125:8)
#loc133 = loc("CWE190_Integer_Overflow__short_max_add_12.c":125:33)
#loc134 = loc("CWE190_Integer_Overflow__short_max_add_12.c":126:5)
#loc135 = loc("CWE190_Integer_Overflow__short_max_add_12.c":132:5)
#loc136 = loc("CWE190_Integer_Overflow__short_max_add_12.c":134:5)
#loc137 = loc("CWE190_Integer_Overflow__short_max_add_12.c":127:9)
#loc138 = loc("CWE190_Integer_Overflow__short_max_add_12.c":131:9)
#loc139 = loc("CWE190_Integer_Overflow__short_max_add_12.c":129:13)
#loc140 = loc("CWE190_Integer_Overflow__short_max_add_12.c":129:35)
#loc141 = loc("CWE190_Integer_Overflow__short_max_add_12.c":129:28)
#loc142 = loc("CWE190_Integer_Overflow__short_max_add_12.c":130:26)
#loc143 = loc("CWE190_Integer_Overflow__short_max_add_12.c":130:13)
#loc144 = loc("CWE190_Integer_Overflow__short_max_add_12.c":135:9)
#loc145 = loc("CWE190_Integer_Overflow__short_max_add_12.c":139:9)
#loc146 = loc("CWE190_Integer_Overflow__short_max_add_12.c":137:13)
#loc147 = loc("CWE190_Integer_Overflow__short_max_add_12.c":137:35)
#loc148 = loc("CWE190_Integer_Overflow__short_max_add_12.c":137:28)
#loc149 = loc("CWE190_Integer_Overflow__short_max_add_12.c":138:26)
#loc150 = loc("CWE190_Integer_Overflow__short_max_add_12.c":138:13)
#loc151 = loc(fused[#loc1, #loc2])
#loc152 = loc(fused[#loc3, #loc4])
#loc153 = loc(fused[#loc5, #loc6])
#loc154 = loc(fused[#loc8, #loc9])
#loc155 = loc(fused[#loc10, #loc11])
#loc156 = loc(fused[#loc13, #loc12])
#loc157 = loc(fused[#loc14, #loc15])
#loc158 = loc(fused[#loc16, #loc17])
#loc159 = loc(fused[#loc18, #loc19, #loc20, #loc15])
#loc160 = loc(fused[#loc22, #loc21])
#loc161 = loc(fused[#loc24, #loc23])
#loc162 = loc(fused[#loc25, #loc26])
#loc163 = loc(fused[#loc27, #loc28])
#loc164 = loc(fused[#loc29, #loc30, #loc31, #loc26])
#loc165 = loc(fused[#loc32, #loc33])
#loc166 = loc(fused[#loc34, #loc35])
#loc167 = loc(fused[#loc39, #loc40])
#loc168 = loc(fused[#loc41, #loc42])
#loc169 = loc(fused[#loc44, #loc45, #loc46, #loc40])
#loc170 = loc(fused[#loc47, #loc48])
#loc171 = loc(fused[#loc53, #loc54])
#loc172 = loc(fused[#loc55, #loc56])
#loc173 = loc(fused[#loc57, #loc58])
#loc174 = loc(fused[#loc59, #loc60])
#loc175 = loc(fused[#loc61, #loc62])
#loc176 = loc(fused[#loc64, #loc63])
#loc177 = loc(fused[#loc65, #loc66])
#loc178 = loc(fused[#loc67, #loc68])
#loc179 = loc(fused[#loc69, #loc70, #loc71, #loc66])
#loc180 = loc(fused[#loc73, #loc72])
#loc181 = loc(fused[#loc75, #loc74])
#loc182 = loc(fused[#loc76, #loc77])
#loc183 = loc(fused[#loc78, #loc79])
#loc184 = loc(fused[#loc80, #loc81, #loc82, #loc77])
#loc185 = loc(fused[#loc83, #loc84])
#loc186 = loc(fused[#loc85, #loc86])
#loc187 = loc(fused[#loc88, #loc89, #loc90, #loc84])
#loc188 = loc(fused[#loc91, #loc92])
#loc189 = loc(fused[#loc98, #loc99])
#loc190 = loc(fused[#loc100, #loc101])
#loc191 = loc(fused[#loc103, #loc104, #loc105, #loc99])
#loc192 = loc(fused[#loc106, #loc107])
#loc193 = loc(fused[#loc113, #loc114])
#loc194 = loc(fused[#loc115, #loc116])
#loc195 = loc(fused[#loc118, #loc117])
#loc196 = loc(fused[#loc119, #loc120])
#loc197 = loc(fused[#loc121, #loc122])
#loc198 = loc(fused[#loc123, #loc124, #loc125, #loc120])
#loc199 = loc(fused[#loc127, #loc126])
#loc200 = loc(fused[#loc129, #loc128])
#loc201 = loc(fused[#loc130, #loc131])
#loc202 = loc(fused[#loc132, #loc133])
#loc203 = loc(fused[#loc134, #loc135, #loc136, #loc131])
#loc204 = loc(fused[#loc137, #loc138])
#loc205 = loc(fused[#loc139, #loc140])
#loc206 = loc(fused[#loc144, #loc145])
#loc207 = loc(fused[#loc146, #loc147])
