!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":22:22)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":22:26)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":113:10)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":113:14)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":113:20)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":113:32)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":70:26)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":70:30)
#loc112 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":48:26)
#loc113 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":48:30)
#loc141 = loc(fused[#loc5, #loc6])
#loc160 = loc(fused[#loc52, #loc53])
#loc161 = loc(fused[#loc54, #loc55])
#loc166 = loc(fused[#loc72, #loc73])
#loc182 = loc(fused[#loc112, #loc113])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc139)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc5, #loc6])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc141)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc4)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc8)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc8)
    %6 = cir.ternary(%5, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc8)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc8)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc8)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc8)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc8)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc8)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc8)
      cir.yield %21 : !u32i loc(#loc8)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc8)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc8)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc8)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc8)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc8)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc8)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc8)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc8)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc8)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc8)
      cir.yield %25 : !u32i loc(#loc8)
    }) : (!cir.bool) -> !u32i loc(#loc8)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc8)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc142)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc143)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc143)
    cir.return %9 : !s32i loc(#loc143)
  } loc(#loc140)
  cir.func private @printIntLine(!s32i) loc(#loc144)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_multiply_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc146)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc18)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    %3 = cir.call @badSource(%2) : (!s32i) -> !s32i loc(#loc21)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc148)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc27)
      %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc150)
      cir.if %6 {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc152)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
        %9 = cir.const #cir.int<2> : !s32i loc(#loc30)
        %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc31)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc152)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc32)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc33)
      } loc(#loc151)
    } loc(#loc149)
    cir.return loc(#loc15)
  } loc(#loc145)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_multiply_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc154)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc155)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc35)
  } loc(#loc153)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc156)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc157)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc158)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc49)
  cir.func @main(%arg0: !s32i loc(fused[#loc52, #loc53]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc54, #loc55])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc160)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc161)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc51)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc56)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc56)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc57)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc58)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc58)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc59)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc46)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_rand_multiply_42_good : !cir.ptr<!cir.func<!void ()>> loc(#loc162)
    cir.call @CWE190_Integer_Overflow__int_rand_multiply_42_good() : () -> () loc(#loc61)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc47)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc48)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_rand_multiply_42_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc163)
    cir.call @CWE190_Integer_Overflow__int_rand_multiply_42_bad() : () -> () loc(#loc65)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc49)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc68)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc164)
    cir.return %17 : !s32i loc(#loc164)
  } loc(#loc159)
  cir.func internal private @goodB2GSource(%arg0: !s32i loc(fused[#loc72, #loc73])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc166)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc71)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc74)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc75)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc75)
    %6 = cir.ternary(%5, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc75)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc75)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc75)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc75)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc75)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc75)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc75)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc75)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc75)
      cir.yield %21 : !u32i loc(#loc75)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc75)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc75)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc75)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc75)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc75)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc75)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc75)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc75)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc75)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc75)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc75)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc75)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc75)
      cir.yield %25 : !u32i loc(#loc75)
    }) : (!cir.bool) -> !u32i loc(#loc75)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc75)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc167)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc77)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc168)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc168)
    cir.return %9 : !s32i loc(#loc168)
  } loc(#loc165)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc79)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc170)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc84)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc171)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    %3 = cir.call @goodB2GSource(%2) : (!s32i) -> !s32i loc(#loc87)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc92)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc93)
      %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc174)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc97)
          %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc98)
          %9 = cir.const #cir.int<2> : !s32i loc(#loc99)
          %10 = cir.binop(div, %8, %9) : !s32i loc(#loc177)
          %11 = cir.cmp(lt, %7, %10) : !s32i, !cir.bool loc(#loc178)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc180)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc106)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc105)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc106)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc180)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc107)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc108)
          } else {
            %12 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc79)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc79)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc109)
          } loc(#loc179)
        } loc(#loc176)
      } loc(#loc175)
    } loc(#loc173)
    cir.return loc(#loc81)
  } loc(#loc169)
  cir.func internal private @goodG2BSource(%arg0: !s32i loc(fused[#loc112, #loc113])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc182)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc111)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc115)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc184)
    cir.return %4 : !s32i loc(#loc184)
  } loc(#loc181)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc186)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc123)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc125)
    %3 = cir.call @goodG2BSource(%2) : (!s32i) -> !s32i loc(#loc126)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc131)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc132)
      %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc190)
      cir.if %6 {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc192)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc136)
        %9 = cir.const #cir.int<2> : !s32i loc(#loc135)
        %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc136)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc192)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc137)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc138)
      } loc(#loc191)
    } loc(#loc189)
    cir.return loc(#loc120)
  } loc(#loc185)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":27:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":23:1)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":25:12)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":25:5)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":26:12)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":26:5)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":29:1)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":41:1)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":31:5)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":31:9)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":33:12)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":33:5)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":34:22)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":34:12)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":34:5)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":34:26)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":35:5)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":40:5)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":35:8)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":35:15)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":36:5)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":38:9)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":38:29)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":38:22)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":39:22)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":39:9)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":98:1)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":102:1)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":100:5)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":100:13)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":101:5)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":101:13)
#loc40 = loc("/usr/include/stdlib.h":575:1)
#loc41 = loc("/usr/include/stdlib.h":575:41)
#loc42 = loc("/usr/include/time.h":76:1)
#loc43 = loc("/usr/include/time.h":76:38)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":118:15)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":120:15)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":123:15)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":125:15)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":113:1)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":128:1)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":114:1)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":116:27)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":116:22)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":116:5)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":118:5)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":119:5)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":119:56)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":120:5)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":123:5)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":124:5)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":124:55)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":125:5)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":127:12)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":127:5)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":70:1)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":75:1)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":71:1)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":73:12)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":73:5)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":74:12)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":74:5)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":93:23)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":77:1)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":96:1)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":79:5)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":79:9)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":81:12)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":81:5)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":82:26)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":82:12)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":82:5)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":82:30)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":83:5)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":95:5)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":83:8)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":83:15)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":84:5)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":86:9)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":94:9)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":86:13)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":86:21)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":86:29)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":86:30)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":87:9)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":90:9)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":92:9)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":88:13)
#loc105 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":88:33)
#loc106 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":88:26)
#loc107 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":89:26)
#loc108 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":89:13)
#loc109 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":93:13)
#loc110 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":48:1)
#loc111 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":53:1)
#loc114 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":49:1)
#loc115 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":51:12)
#loc116 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":51:5)
#loc117 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":52:12)
#loc118 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":52:5)
#loc119 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":55:1)
#loc120 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":67:1)
#loc121 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":57:5)
#loc122 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":57:9)
#loc123 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":59:12)
#loc124 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":59:5)
#loc125 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":60:26)
#loc126 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":60:12)
#loc127 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":60:5)
#loc128 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":60:30)
#loc129 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":61:5)
#loc130 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":66:5)
#loc131 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":61:8)
#loc132 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":61:15)
#loc133 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":62:5)
#loc134 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":64:9)
#loc135 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":64:29)
#loc136 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":64:22)
#loc137 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":65:22)
#loc138 = loc("CWE190_Integer_Overflow__int_rand_multiply_42.c":65:9)
#loc139 = loc(fused[#loc1, #loc2])
#loc140 = loc(fused[#loc3, #loc4])
#loc142 = loc(fused[#loc9, #loc8])
#loc143 = loc(fused[#loc11, #loc10])
#loc144 = loc(fused[#loc12, #loc13])
#loc145 = loc(fused[#loc14, #loc15])
#loc146 = loc(fused[#loc16, #loc17])
#loc147 = loc(fused[#loc19, #loc18])
#loc148 = loc(fused[#loc22, #loc23])
#loc149 = loc(fused[#loc24, #loc25])
#loc150 = loc(fused[#loc26, #loc27])
#loc151 = loc(fused[#loc28, #loc25])
#loc152 = loc(fused[#loc29, #loc30])
#loc153 = loc(fused[#loc34, #loc35])
#loc154 = loc(fused[#loc36, #loc37])
#loc155 = loc(fused[#loc38, #loc39])
#loc156 = loc(fused[#loc40, #loc41])
#loc157 = loc(fused[#loc42, #loc43])
#loc158 = loc(fused[#loc44, #loc45])
#loc159 = loc(fused[#loc50, #loc51])
#loc162 = loc(fused[#loc61, #loc62])
#loc163 = loc(fused[#loc65, #loc66])
#loc164 = loc(fused[#loc69, #loc68])
#loc165 = loc(fused[#loc70, #loc71])
#loc167 = loc(fused[#loc76, #loc75])
#loc168 = loc(fused[#loc78, #loc77])
#loc169 = loc(fused[#loc80, #loc81])
#loc170 = loc(fused[#loc82, #loc83])
#loc171 = loc(fused[#loc85, #loc84])
#loc172 = loc(fused[#loc88, #loc89])
#loc173 = loc(fused[#loc90, #loc91])
#loc174 = loc(fused[#loc92, #loc93])
#loc175 = loc(fused[#loc94, #loc91])
#loc176 = loc(fused[#loc95, #loc96])
#loc177 = loc(fused[#loc98, #loc99])
#loc178 = loc(fused[#loc97, #loc100])
#loc179 = loc(fused[#loc101, #loc102, #loc103, #loc96])
#loc180 = loc(fused[#loc104, #loc105])
#loc181 = loc(fused[#loc110, #loc111])
#loc183 = loc(fused[#loc116, #loc115])
#loc184 = loc(fused[#loc118, #loc117])
#loc185 = loc(fused[#loc119, #loc120])
#loc186 = loc(fused[#loc121, #loc122])
#loc187 = loc(fused[#loc124, #loc123])
#loc188 = loc(fused[#loc127, #loc128])
#loc189 = loc(fused[#loc129, #loc130])
#loc190 = loc(fused[#loc131, #loc132])
#loc191 = loc(fused[#loc133, #loc130])
#loc192 = loc(fused[#loc134, #loc135])
