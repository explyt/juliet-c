!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc24 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":32:16)
#loc100 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":86:16)
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__int_rand_predec_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc120)
  cir.func private @printIntLine(!s32i) loc(#loc121)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_predec_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc123)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc124)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc125)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc126)
    %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc127)
    %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc128)
    cir.store %3, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc127)
    cir.store %3, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc128)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc19)
    cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    cir.br ^bb1 loc(#loc130)
  ^bb1:  // pred: ^bb0
    %7 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc8)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc123)
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %11 = cir.binop(and, %9, %10) : !s32i loc(#loc24)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc24)
  ^bb2:  // pred: ^bb1
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc24)
    %15 = cir.const #cir.int<30> : !s32i loc(#loc24)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc24)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc24)
    %19 = cir.const #cir.int<15> : !s32i loc(#loc24)
    %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc24)
    %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc24)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc24)
    %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc24)
    cir.br ^bb4(%24 : !u32i) loc(#loc24)
  ^bb3:  // pred: ^bb1
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc24)
    %27 = cir.const #cir.int<30> : !s32i loc(#loc24)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc24)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc24)
    %31 = cir.const #cir.int<15> : !s32i loc(#loc24)
    %32 = cir.shift(left, %30 : !u32i, %31 : !s32i) -> !u32i loc(#loc24)
    %33 = cir.binop(xor, %28, %32) : !u32i loc(#loc24)
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc24)
    %36 = cir.binop(xor, %33, %35) : !u32i loc(#loc24)
    %37 = cir.unary(minus, %36) : !u32i, !u32i loc(#loc24)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %39 = cir.cast(integral, %38 : !s32i), !u32i loc(#loc24)
    %40 = cir.binop(sub, %37, %39) : !u32i loc(#loc24)
    cir.br ^bb4(%40 : !u32i) loc(#loc24)
  ^bb4(%41: !u32i loc("CWE191_Integer_Underflow__int_rand_predec_32.c":32:16)):  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc24)
  ^bb5:  // pred: ^bb4
    %42 = cir.cast(integral, %41 : !u32i), !s32i loc(#loc24)
    cir.store %42, %0 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    %43 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    %44 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
    cir.store %43, %44 : !s32i, !cir.ptr<!s32i> loc(#loc132)
    cir.br ^bb6 loc(#loc22)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc133)
  ^bb7:  // pred: ^bb6
    %45 = cir.load deref %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc10)
    %46 = cir.load %45 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    cir.store %46, %1 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    cir.br ^bb8 loc(#loc134)
  ^bb8:  // pred: ^bb7
    %47 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    %48 = cir.unary(dec, %47) nsw : !s32i, !s32i loc(#loc34)
    cir.store %48, %1 : !s32i, !cir.ptr<!s32i> loc(#loc135)
    %49 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc12)
    cir.store %49, %2 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    %50 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc36)
    cir.call @printIntLine(%50) : (!s32i) -> () loc(#loc37)
    cir.br ^bb9 loc(#loc33)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc30)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc6)
  } loc(#loc122)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_predec_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc137)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc138)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    cir.return loc(#loc39)
  } loc(#loc136)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc140)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc141)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc142)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc143)
    %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc144)
    %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc145)
    cir.store %3, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc144)
    cir.store %3, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc145)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc58)
    cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc146)
    cir.br ^bb1 loc(#loc147)
  ^bb1:  // pred: ^bb0
    %7 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc63)
    %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc64)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc148)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    %12 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc67)
    cir.store %11, %12 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    cir.br ^bb2 loc(#loc61)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc150)
  ^bb3:  // pred: ^bb2
    %13 = cir.load deref %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
    %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc71)
    cir.store %14, %1 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    cir.br ^bb4 loc(#loc151)
  ^bb4:  // pred: ^bb3
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    %16 = cir.unary(dec, %15) nsw : !s32i, !s32i loc(#loc74)
    cir.store %16, %1 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    %17 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    cir.store %17, %2 : !s32i, !cir.ptr<!s32i> loc(#loc142)
    %18 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc76)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc77)
    cir.br ^bb5 loc(#loc73)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc70)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc45)
  } loc(#loc139)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc153)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc80)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc155)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc156)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc157)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc158)
    %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc159)
    %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc160)
    cir.store %3, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc159)
    cir.store %3, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc160)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc95)
    cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    cir.br ^bb1 loc(#loc162)
  ^bb1:  // pred: ^bb0
    %7 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc84)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc155)
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc100)
    %11 = cir.binop(and, %9, %10) : !s32i loc(#loc100)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc100)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc100)
  ^bb2:  // pred: ^bb1
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc100)
    %15 = cir.const #cir.int<30> : !s32i loc(#loc100)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc100)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc100)
    %19 = cir.const #cir.int<15> : !s32i loc(#loc100)
    %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc100)
    %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc100)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc100)
    %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc100)
    cir.br ^bb4(%24 : !u32i) loc(#loc100)
  ^bb3:  // pred: ^bb1
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc100)
    %27 = cir.const #cir.int<30> : !s32i loc(#loc100)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc100)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc100)
    %31 = cir.const #cir.int<15> : !s32i loc(#loc100)
    %32 = cir.shift(left, %30 : !u32i, %31 : !s32i) -> !u32i loc(#loc100)
    %33 = cir.binop(xor, %28, %32) : !u32i loc(#loc100)
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc100)
    %36 = cir.binop(xor, %33, %35) : !u32i loc(#loc100)
    %37 = cir.unary(minus, %36) : !u32i, !u32i loc(#loc100)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc100)
    %39 = cir.cast(integral, %38 : !s32i), !u32i loc(#loc100)
    %40 = cir.binop(sub, %37, %39) : !u32i loc(#loc100)
    cir.br ^bb4(%40 : !u32i) loc(#loc100)
  ^bb4(%41: !u32i loc("CWE191_Integer_Underflow__int_rand_predec_32.c":86:16)):  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc100)
  ^bb5:  // pred: ^bb4
    %42 = cir.cast(integral, %41 : !u32i), !s32i loc(#loc100)
    cir.store %42, %0 : !s32i, !cir.ptr<!s32i> loc(#loc163)
    %43 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    %44 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc103)
    cir.store %43, %44 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    cir.br ^bb6 loc(#loc98)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc165)
  ^bb7:  // pred: ^bb6
    %45 = cir.load deref %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc86)
    %46 = cir.load %45 : !cir.ptr<!s32i>, !s32i loc(#loc107)
    cir.store %46, %1 : !s32i, !cir.ptr<!s32i> loc(#loc156)
    cir.br ^bb8 loc(#loc166)
  ^bb8:  // pred: ^bb7
    %47 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc110)
    %48 = cir.const #cir.int<2147483647> : !s32i loc(#loc111)
    %49 = cir.unary(minus, %48) nsw : !s32i, !s32i loc(#loc111)
    %50 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %51 = cir.binop(sub, %49, %50) nsw : !s32i loc(#loc111)
    %52 = cir.cmp(gt, %47, %51) : !s32i, !cir.bool loc(#loc167)
    cir.brcond %52 ^bb9, ^bb10 loc(#loc168)
  ^bb9:  // pred: ^bb8
    %53 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc115)
    %54 = cir.unary(dec, %53) nsw : !s32i, !s32i loc(#loc115)
    cir.store %54, %1 : !s32i, !cir.ptr<!s32i> loc(#loc169)
    %55 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    cir.store %55, %2 : !s32i, !cir.ptr<!s32i> loc(#loc157)
    %56 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    cir.call @printIntLine(%56) : (!s32i) -> () loc(#loc118)
    cir.br ^bb11 loc(#loc113)
  ^bb10:  // pred: ^bb8
    %57 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc80)
    %58 = cir.cast(array_to_ptrdecay, %57 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc80)
    cir.call @printLine(%58) : (!cir.ptr<!s8i>) -> () loc(#loc119)
    cir.br ^bb11 loc(#loc109)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc109)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc106)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc82)
  } loc(#loc154)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__int_rand_predec_32.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":44:1)
#loc7 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":30:9)
#loc8 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":30:21)
#loc9 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":36:9)
#loc10 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":36:21)
#loc11 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":40:13)
#loc12 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":40:26)
#loc13 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":24:5)
#loc14 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":24:9)
#loc15 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":25:5)
#loc16 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":25:22)
#loc17 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":26:5)
#loc18 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":26:22)
#loc19 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":28:12)
#loc20 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":28:5)
#loc21 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":29:5)
#loc22 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":34:5)
#loc23 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":30:20)
#loc25 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":32:9)
#loc26 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":33:21)
#loc27 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":33:10)
#loc28 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":33:9)
#loc29 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":35:5)
#loc30 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":43:5)
#loc31 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":36:20)
#loc32 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":37:9)
#loc33 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":42:9)
#loc34 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":39:13)
#loc35 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":39:15)
#loc36 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":41:26)
#loc37 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":41:13)
#loc38 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":105:1)
#loc39 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":109:1)
#loc40 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":107:5)
#loc41 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":107:13)
#loc42 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":108:5)
#loc43 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":108:13)
#loc44 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":51:1)
#loc45 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":73:1)
#loc46 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":59:9)
#loc47 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":59:21)
#loc48 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":65:9)
#loc49 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":65:21)
#loc50 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":69:13)
#loc51 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":69:26)
#loc52 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":53:5)
#loc53 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":53:9)
#loc54 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":54:5)
#loc55 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":54:22)
#loc56 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":55:5)
#loc57 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":55:22)
#loc58 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":57:12)
#loc59 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":57:5)
#loc60 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":58:5)
#loc61 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":63:5)
#loc62 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":59:20)
#loc63 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":61:17)
#loc64 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":61:16)
#loc65 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":61:9)
#loc66 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":62:21)
#loc67 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":62:10)
#loc68 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":62:9)
#loc69 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":64:5)
#loc70 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":72:5)
#loc71 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":65:20)
#loc72 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":66:9)
#loc73 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":71:9)
#loc74 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":68:13)
#loc75 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":68:15)
#loc76 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":70:26)
#loc77 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":70:13)
#loc78 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc79 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc80 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":100:23)
#loc81 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":76:1)
#loc82 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":103:1)
#loc83 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":84:9)
#loc84 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":84:21)
#loc85 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":90:9)
#loc86 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":90:21)
#loc87 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":95:13)
#loc88 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":95:26)
#loc89 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":78:5)
#loc90 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":78:9)
#loc91 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":79:5)
#loc92 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":79:22)
#loc93 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":80:5)
#loc94 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":80:22)
#loc95 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":82:12)
#loc96 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":82:5)
#loc97 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":83:5)
#loc98 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":88:5)
#loc99 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":84:20)
#loc101 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":86:9)
#loc102 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":87:21)
#loc103 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":87:10)
#loc104 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":87:9)
#loc105 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":89:5)
#loc106 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":102:5)
#loc107 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":90:20)
#loc108 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":92:9)
#loc109 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":101:9)
#loc110 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":92:13)
#loc111 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":92:20)
#loc112 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":93:9)
#loc113 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":97:9)
#loc114 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":99:9)
#loc115 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":94:13)
#loc116 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":94:15)
#loc117 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":96:26)
#loc118 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":96:13)
#loc119 = loc("CWE191_Integer_Underflow__int_rand_predec_32.c":100:13)
#loc120 = loc(fused[#loc1, #loc2])
#loc121 = loc(fused[#loc3, #loc4])
#loc122 = loc(fused[#loc5, #loc6])
#loc123 = loc(fused[#loc7, #loc8])
#loc124 = loc(fused[#loc9, #loc10])
#loc125 = loc(fused[#loc11, #loc12])
#loc126 = loc(fused[#loc13, #loc14])
#loc127 = loc(fused[#loc15, #loc16])
#loc128 = loc(fused[#loc17, #loc18])
#loc129 = loc(fused[#loc20, #loc19])
#loc130 = loc(fused[#loc21, #loc22])
#loc131 = loc(fused[#loc25, #loc24])
#loc132 = loc(fused[#loc28, #loc26])
#loc133 = loc(fused[#loc29, #loc30])
#loc134 = loc(fused[#loc32, #loc33])
#loc135 = loc(fused[#loc34, #loc35])
#loc136 = loc(fused[#loc38, #loc39])
#loc137 = loc(fused[#loc40, #loc41])
#loc138 = loc(fused[#loc42, #loc43])
#loc139 = loc(fused[#loc44, #loc45])
#loc140 = loc(fused[#loc46, #loc47])
#loc141 = loc(fused[#loc48, #loc49])
#loc142 = loc(fused[#loc50, #loc51])
#loc143 = loc(fused[#loc52, #loc53])
#loc144 = loc(fused[#loc54, #loc55])
#loc145 = loc(fused[#loc56, #loc57])
#loc146 = loc(fused[#loc59, #loc58])
#loc147 = loc(fused[#loc60, #loc61])
#loc148 = loc(fused[#loc65, #loc63])
#loc149 = loc(fused[#loc68, #loc66])
#loc150 = loc(fused[#loc69, #loc70])
#loc151 = loc(fused[#loc72, #loc73])
#loc152 = loc(fused[#loc74, #loc75])
#loc153 = loc(fused[#loc78, #loc79])
#loc154 = loc(fused[#loc81, #loc82])
#loc155 = loc(fused[#loc83, #loc84])
#loc156 = loc(fused[#loc85, #loc86])
#loc157 = loc(fused[#loc87, #loc88])
#loc158 = loc(fused[#loc89, #loc90])
#loc159 = loc(fused[#loc91, #loc92])
#loc160 = loc(fused[#loc93, #loc94])
#loc161 = loc(fused[#loc96, #loc95])
#loc162 = loc(fused[#loc97, #loc98])
#loc163 = loc(fused[#loc101, #loc100])
#loc164 = loc(fused[#loc104, #loc102])
#loc165 = loc(fused[#loc105, #loc106])
#loc166 = loc(fused[#loc108, #loc109])
#loc167 = loc(fused[#loc110, #loc111])
#loc168 = loc(fused[#loc112, #loc113, #loc114, #loc109])
#loc169 = loc(fused[#loc115, #loc116])
