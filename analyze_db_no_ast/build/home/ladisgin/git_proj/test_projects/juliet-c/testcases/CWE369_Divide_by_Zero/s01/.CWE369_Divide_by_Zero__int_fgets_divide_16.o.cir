!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_divide_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc125)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc126)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc127)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc128)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @printIntLine(!s32i) loc(#loc129)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_fgets_divide_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc131)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc17)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc132)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc21)
        cir.condition(%4) loc(#loc21)
      } do {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc135)
          %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc135)
          cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc135)
          cir.scope {
            %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc28)
            %6 = cir.const #cir.int<3> : !s32i loc(#loc29)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc29)
            %8 = cir.const #cir.int<4> : !u64i loc(#loc29)
            %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc29)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc29)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc29)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc29)
            %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc29)
            %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc126)
            %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc30)
            %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc31)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc32)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc32)
            %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !s32i loc(#loc137)
            %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc33)
            cir.if %20 {
              %21 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc37)
              %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc38)
              cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc139)
            } else {
              %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc41)
            } loc(#loc138)
          } loc(#loc136)
        } loc(#loc134)
        cir.break loc(#loc42)
      } loc(#loc133)
    } loc(#loc133)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc45)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc45)
        cir.condition(%4) loc(#loc45)
      } do {
        %3 = cir.const #cir.int<100> : !s32i loc(#loc46)
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc47)
        %5 = cir.binop(div, %3, %4) : !s32i loc(#loc141)
        cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc48)
        cir.break loc(#loc49)
      } loc(#loc140)
    } loc(#loc140)
    cir.return loc(#loc13)
  } loc(#loc130)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_fgets_divide_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc143)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc144)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    cir.return loc(#loc51)
  } loc(#loc142)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc56)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc146)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc61)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc62)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc66)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc66)
        cir.condition(%4) loc(#loc66)
      } do {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc150)
          %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc150)
          cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc150)
          cir.scope {
            %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc73)
            %6 = cir.const #cir.int<3> : !s32i loc(#loc74)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc74)
            %8 = cir.const #cir.int<4> : !u64i loc(#loc74)
            %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc74)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc74)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc74)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc74)
            %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc74)
            %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc126)
            %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc75)
            %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc76)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc77)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc77)
            %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !s32i loc(#loc152)
            %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc78)
            cir.if %20 {
              %21 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc82)
              %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc83)
              cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc154)
            } else {
              %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc86)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc86)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc87)
            } loc(#loc153)
          } loc(#loc151)
        } loc(#loc149)
        cir.break loc(#loc88)
      } loc(#loc148)
    } loc(#loc148)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc91)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc91)
        cir.condition(%4) loc(#loc91)
      } do {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc95)
          %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc157)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc96)
          cir.if %6 {
            %7 = cir.const #cir.int<100> : !s32i loc(#loc100)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
            %9 = cir.binop(div, %7, %8) : !s32i loc(#loc159)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc102)
          } else {
            %7 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc56)
            %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc56)
            cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc103)
          } loc(#loc158)
        } loc(#loc156)
        cir.break loc(#loc104)
      } loc(#loc155)
    } loc(#loc155)
    cir.return loc(#loc58)
  } loc(#loc145)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc161)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc109)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc110)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc162)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc114)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc114)
        cir.condition(%4) loc(#loc114)
      } do {
        %3 = cir.const #cir.int<7> : !s32i loc(#loc115)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
        cir.break loc(#loc117)
      } loc(#loc163)
    } loc(#loc163)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc120)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc120)
        cir.condition(%4) loc(#loc120)
      } do {
        %3 = cir.const #cir.int<100> : !s32i loc(#loc121)
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
        %5 = cir.binop(div, %3, %4) : !s32i loc(#loc166)
        cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc123)
        cir.break loc(#loc124)
      } loc(#loc165)
    } loc(#loc165)
    cir.return loc(#loc106)
  } loc(#loc160)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_divide_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":41:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":24:1)
#loc13 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":52:1)
#loc14 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":26:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":26:9)
#loc16 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":28:13)
#loc17 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":28:12)
#loc18 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":28:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":29:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":45:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":29:11)
#loc22 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":31:9)
#loc23 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":43:9)
#loc24 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":32:13)
#loc25 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":32:49)
#loc26 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":34:13)
#loc27 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":42:13)
#loc28 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":34:23)
#loc29 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":34:36)
#loc30 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":34:53)
#loc31 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":34:17)
#loc32 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":34:63)
#loc33 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":34:60)
#loc34 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":35:13)
#loc35 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":38:13)
#loc36 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":40:13)
#loc37 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":37:29)
#loc38 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":37:24)
#loc39 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":37:17)
#loc40 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":37:40)
#loc41 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":41:17)
#loc42 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":44:9)
#loc43 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":46:5)
#loc44 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":51:5)
#loc45 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":46:11)
#loc46 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":49:22)
#loc47 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":49:28)
#loc48 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":49:9)
#loc49 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":50:9)
#loc50 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":116:1)
#loc51 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":120:1)
#loc52 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":118:5)
#loc53 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":118:13)
#loc54 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":119:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":119:13)
#loc56 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":90:23)
#loc57 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":59:1)
#loc58 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":94:1)
#loc59 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":61:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":61:9)
#loc61 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":63:13)
#loc62 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":63:12)
#loc63 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":63:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":64:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":80:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":64:11)
#loc67 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":66:9)
#loc68 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":78:9)
#loc69 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":67:13)
#loc70 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":67:49)
#loc71 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":69:13)
#loc72 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":77:13)
#loc73 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":69:23)
#loc74 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":69:36)
#loc75 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":69:53)
#loc76 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":69:17)
#loc77 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":69:63)
#loc78 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":69:60)
#loc79 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":70:13)
#loc80 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":73:13)
#loc81 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":75:13)
#loc82 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":72:29)
#loc83 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":72:24)
#loc84 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":72:17)
#loc85 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":72:40)
#loc86 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":76:27)
#loc87 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":76:17)
#loc88 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":79:9)
#loc89 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":81:5)
#loc90 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":93:5)
#loc91 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":81:11)
#loc92 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":84:9)
#loc93 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":91:9)
#loc94 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":84:13)
#loc95 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":84:21)
#loc96 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":84:18)
#loc97 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":85:9)
#loc98 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":87:9)
#loc99 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":89:9)
#loc100 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":86:26)
#loc101 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":86:32)
#loc102 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":86:13)
#loc103 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":90:13)
#loc104 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":92:9)
#loc105 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":97:1)
#loc106 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":114:1)
#loc107 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":99:5)
#loc108 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":99:9)
#loc109 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":101:13)
#loc110 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":101:12)
#loc111 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":101:5)
#loc112 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":102:5)
#loc113 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":107:5)
#loc114 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":102:11)
#loc115 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":105:16)
#loc116 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":105:9)
#loc117 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":106:9)
#loc118 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":108:5)
#loc119 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":113:5)
#loc120 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":108:11)
#loc121 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":111:22)
#loc122 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":111:28)
#loc123 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":111:9)
#loc124 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":112:9)
#loc125 = loc(fused[#loc1, #loc2])
#loc126 = loc(fused[#loc3, #loc4])
#loc127 = loc(fused[#loc5, #loc6])
#loc128 = loc(fused[#loc7, #loc8])
#loc129 = loc(fused[#loc10, #loc11])
#loc130 = loc(fused[#loc12, #loc13])
#loc131 = loc(fused[#loc14, #loc15])
#loc132 = loc(fused[#loc18, #loc16])
#loc133 = loc(fused[#loc19, #loc20])
#loc134 = loc(fused[#loc22, #loc23])
#loc135 = loc(fused[#loc24, #loc25])
#loc136 = loc(fused[#loc26, #loc27])
#loc137 = loc(fused[#loc31, #loc32])
#loc138 = loc(fused[#loc34, #loc35, #loc36, #loc27])
#loc139 = loc(fused[#loc39, #loc40])
#loc140 = loc(fused[#loc43, #loc44])
#loc141 = loc(fused[#loc46, #loc47])
#loc142 = loc(fused[#loc50, #loc51])
#loc143 = loc(fused[#loc52, #loc53])
#loc144 = loc(fused[#loc54, #loc55])
#loc145 = loc(fused[#loc57, #loc58])
#loc146 = loc(fused[#loc59, #loc60])
#loc147 = loc(fused[#loc63, #loc61])
#loc148 = loc(fused[#loc64, #loc65])
#loc149 = loc(fused[#loc67, #loc68])
#loc150 = loc(fused[#loc69, #loc70])
#loc151 = loc(fused[#loc71, #loc72])
#loc152 = loc(fused[#loc76, #loc77])
#loc153 = loc(fused[#loc79, #loc80, #loc81, #loc72])
#loc154 = loc(fused[#loc84, #loc85])
#loc155 = loc(fused[#loc89, #loc90])
#loc156 = loc(fused[#loc92, #loc93])
#loc157 = loc(fused[#loc94, #loc95])
#loc158 = loc(fused[#loc97, #loc98, #loc99, #loc93])
#loc159 = loc(fused[#loc100, #loc101])
#loc160 = loc(fused[#loc105, #loc106])
#loc161 = loc(fused[#loc107, #loc108])
#loc162 = loc(fused[#loc111, #loc109])
#loc163 = loc(fused[#loc112, #loc113])
#loc164 = loc(fused[#loc116, #loc115])
#loc165 = loc(fused[#loc118, #loc119])
#loc166 = loc(fused[#loc121, #loc122])
