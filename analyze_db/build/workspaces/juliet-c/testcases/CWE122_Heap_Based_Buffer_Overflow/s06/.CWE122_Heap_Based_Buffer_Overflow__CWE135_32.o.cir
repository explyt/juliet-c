!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc266)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc267)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc268)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc269)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc270)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc271)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc272)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc273)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc275)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc276)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc277)
    %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc278)
    %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc279)
    %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc280)
    %6 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc281)
    %7 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc282)
    cir.store %5, %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc281)
    cir.store %5, %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc282)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc35)
    cir.store %8, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc283)
    cir.br ^bb1 loc(#loc284)
  ^bb1:  // pred: ^bb0
    %9 = cir.load deref %6 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc20)
    %10 = cir.load %9 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc39)
    cir.store %10, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc275)
    cir.br ^bb2 loc(#loc285)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc42)
    %12 = cir.const #cir.int<50> : !s32i loc(#loc43)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc43)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc286)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc287)
    %16 = cir.call @malloc(%15) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc42)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc288)
    cir.store %17, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc276)
    cir.br ^bb3 loc(#loc289)
  ^bb3:  // pred: ^bb2
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc48)
    %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc49)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc49)
    %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc290)
    cir.brcond %21 ^bb4, ^bb5 loc(#loc291)
  ^bb4:  // pred: ^bb3
    %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc51)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc53)
    cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc51)
    cir.br ^bb5 loc(#loc47)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc47)
  ^bb6:  // pred: ^bb5
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
    %26 = cir.const #cir.int<65> : !s32i loc(#loc55)
    %27 = cir.const #cir.int<50> : !s32i loc(#loc56)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc56)
    %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc56)
    %31 = cir.call @wmemset(%25, %26, %30) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc58)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc59)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
    %34 = cir.const #cir.int<50> : !s32i loc(#loc61)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %36 = cir.binop(sub, %34, %35) nsw : !s32i loc(#loc61)
    %37 = cir.ptr_stride(%33 : !cir.ptr<!s32i>, %36 : !s32i), !cir.ptr<!s32i> loc(#loc63)
    cir.store %32, %37 : !s32i, !cir.ptr<!s32i> loc(#loc292)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc64)
    %39 = cir.cast(bitcast, %38 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc64)
    cir.store %39, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc293)
    cir.br ^bb7 loc(#loc41)
  ^bb7:  // pred: ^bb6
    %40 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc66)
    %41 = cir.load deref %6 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc67)
    cir.store %40, %41 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc294)
    cir.br ^bb8 loc(#loc38)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc295)
  ^bb9:  // pred: ^bb8
    %42 = cir.load deref %7 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc24)
    %43 = cir.load %42 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc71)
    cir.store %43, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc277)
    cir.br ^bb10 loc(#loc296)
  ^bb10:  // pred: ^bb9
    %44 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc74)
    %45 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc75)
    %46 = cir.cast(bitcast, %45 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc75)
    %47 = cir.call @strlen(%46) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc74)
    cir.store %47, %3 : !u64i, !cir.ptr<!u64i> loc(#loc278)
    %48 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc76)
    %49 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc77)
    %50 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc78)
    %52 = cir.binop(add, %49, %51) : !u64i loc(#loc297)
    %53 = cir.const #cir.int<4> : !u64i loc(#loc298)
    %54 = cir.call @calloc(%52, %53) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc76)
    cir.store %54, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc279)
    cir.br ^bb11 loc(#loc299)
  ^bb11:  // pred: ^bb10
    %55 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc83)
    %56 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc84)
    %57 = cir.cmp(eq, %55, %56) : !cir.ptr<!void>, !cir.bool loc(#loc300)
    cir.brcond %57 ^bb12, ^bb13 loc(#loc301)
  ^bb12:  // pred: ^bb11
    %58 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc86)
    %59 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc88)
    cir.call @exit(%60) : (!s32i) -> () extra(#fn_attr) loc(#loc86)
    cir.br ^bb13 loc(#loc82)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc82)
  ^bb14:  // pred: ^bb13
    %61 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc89)
    %62 = cir.cast(bitcast, %61 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc89)
    %63 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc90)
    %64 = cir.cast(bitcast, %63 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc90)
    %65 = cir.call @wcscpy(%62, %64) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc91)
    %66 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc92)
    %67 = cir.cast(bitcast, %66 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%67) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    %68 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc94)
    cir.call @free(%68) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc95)
    cir.br ^bb15 loc(#loc73)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc70)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc18)
  } loc(#loc274)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc303)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc98)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc304)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc100)
    cir.return loc(#loc97)
  } loc(#loc302)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc305)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc307)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc308)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc309)
    %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc310)
    %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc311)
    %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc312)
    %6 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc313)
    %7 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc314)
    cir.store %5, %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc313)
    cir.store %5, %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc314)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc122)
    cir.store %8, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc315)
    cir.br ^bb1 loc(#loc316)
  ^bb1:  // pred: ^bb0
    %9 = cir.load deref %6 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc107)
    %10 = cir.load %9 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc126)
    cir.store %10, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc307)
    cir.br ^bb2 loc(#loc317)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc129)
    %12 = cir.const #cir.int<50> : !s32i loc(#loc130)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc130)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc318)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc319)
    %16 = cir.call @malloc(%15) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc129)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc320)
    cir.store %17, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc308)
    cir.br ^bb3 loc(#loc321)
  ^bb3:  // pred: ^bb2
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
    %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc136)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc136)
    %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc322)
    cir.brcond %21 ^bb4, ^bb5 loc(#loc323)
  ^bb4:  // pred: ^bb3
    %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc138)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc139)
    %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc140)
    cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc138)
    cir.br ^bb5 loc(#loc134)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc134)
  ^bb6:  // pred: ^bb5
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc141)
    %27 = cir.const #cir.int<65> : !s32i loc(#loc142)
    %28 = cir.const #cir.int<50> : !s32i loc(#loc143)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc144)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc143)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc143)
    cir.libc.memset %31 bytes from %26 set to %27 : !cir.ptr<!void>, !s32i, !u64i loc(#loc324)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc147)
    %33 = cir.cast(integral, %32 : !s32i), !s8i loc(#loc147)
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
    %35 = cir.const #cir.int<50> : !s32i loc(#loc149)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc150)
    %37 = cir.binop(sub, %35, %36) nsw : !s32i loc(#loc149)
    %38 = cir.ptr_stride(%34 : !cir.ptr<!s8i>, %37 : !s32i), !cir.ptr<!s8i> loc(#loc151)
    cir.store %33, %38 : !s8i, !cir.ptr<!s8i> loc(#loc325)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc152)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc152)
    cir.store %40, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc326)
    cir.br ^bb7 loc(#loc128)
  ^bb7:  // pred: ^bb6
    %41 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc154)
    %42 = cir.load deref %6 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc155)
    cir.store %41, %42 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc327)
    cir.br ^bb8 loc(#loc125)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc328)
  ^bb9:  // pred: ^bb8
    %43 = cir.load deref %7 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc111)
    %44 = cir.load %43 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc159)
    cir.store %44, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc309)
    cir.br ^bb10 loc(#loc329)
  ^bb10:  // pred: ^bb9
    %45 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc162)
    %46 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc163)
    %47 = cir.cast(bitcast, %46 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc163)
    %48 = cir.call @strlen(%47) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc162)
    cir.store %48, %3 : !u64i, !cir.ptr<!u64i> loc(#loc310)
    %49 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc164)
    %50 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc165)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc166)
    %52 = cir.cast(integral, %51 : !s32i), !u64i loc(#loc166)
    %53 = cir.binop(add, %50, %52) : !u64i loc(#loc330)
    %54 = cir.const #cir.int<1> : !s32i loc(#loc167)
    %55 = cir.cast(integral, %54 : !s32i), !u64i loc(#loc167)
    %56 = cir.call @calloc(%53, %55) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc164)
    cir.store %56, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc311)
    cir.br ^bb11 loc(#loc331)
  ^bb11:  // pred: ^bb10
    %57 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc170)
    %58 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc171)
    %59 = cir.cmp(eq, %57, %58) : !cir.ptr<!void>, !cir.bool loc(#loc332)
    cir.brcond %59 ^bb12, ^bb13 loc(#loc333)
  ^bb12:  // pred: ^bb11
    %60 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc173)
    %61 = cir.const #cir.int<1> : !s32i loc(#loc174)
    %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc175)
    cir.call @exit(%62) : (!s32i) -> () extra(#fn_attr) loc(#loc173)
    cir.br ^bb13 loc(#loc169)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc169)
  ^bb14:  // pred: ^bb13
    %63 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc176)
    %64 = cir.cast(bitcast, %63 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc176)
    %65 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc177)
    %66 = cir.cast(bitcast, %65 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc177)
    %67 = cir.call @strcpy(%64, %66) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc178)
    %68 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc179)
    %69 = cir.cast(bitcast, %68 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc179)
    cir.call @printLine(%69) : (!cir.ptr<!s8i>) -> () loc(#loc180)
    %70 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc181)
    cir.call @free(%70) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc182)
    cir.br ^bb15 loc(#loc161)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc158)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc105)
  } loc(#loc306)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc334)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc335)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc337)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc338)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc339)
    %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc340)
    %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc341)
    %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc342)
    %6 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc343)
    %7 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc344)
    cir.store %5, %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc343)
    cir.store %5, %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc344)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc205)
    cir.store %8, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc345)
    cir.br ^bb1 loc(#loc346)
  ^bb1:  // pred: ^bb0
    %9 = cir.load deref %6 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc190)
    %10 = cir.load %9 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc209)
    cir.store %10, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc337)
    cir.br ^bb2 loc(#loc347)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc212)
    %12 = cir.const #cir.int<50> : !s32i loc(#loc213)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc213)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc348)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc349)
    %16 = cir.call @malloc(%15) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc212)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc350)
    cir.store %17, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc338)
    cir.br ^bb3 loc(#loc351)
  ^bb3:  // pred: ^bb2
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc218)
    %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc219)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc219)
    %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc352)
    cir.brcond %21 ^bb4, ^bb5 loc(#loc353)
  ^bb4:  // pred: ^bb3
    %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc221)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc222)
    %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc223)
    cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc221)
    cir.br ^bb5 loc(#loc217)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc217)
  ^bb6:  // pred: ^bb5
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc224)
    %26 = cir.const #cir.int<65> : !s32i loc(#loc225)
    %27 = cir.const #cir.int<50> : !s32i loc(#loc226)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc227)
    %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc226)
    %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc226)
    %31 = cir.call @wmemset(%25, %26, %30) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc228)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc229)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc230)
    %34 = cir.const #cir.int<50> : !s32i loc(#loc231)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc232)
    %36 = cir.binop(sub, %34, %35) nsw : !s32i loc(#loc231)
    %37 = cir.ptr_stride(%33 : !cir.ptr<!s32i>, %36 : !s32i), !cir.ptr<!s32i> loc(#loc233)
    cir.store %32, %37 : !s32i, !cir.ptr<!s32i> loc(#loc354)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc234)
    %39 = cir.cast(bitcast, %38 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc234)
    cir.store %39, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc355)
    cir.br ^bb7 loc(#loc211)
  ^bb7:  // pred: ^bb6
    %40 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc236)
    %41 = cir.load deref %6 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc237)
    cir.store %40, %41 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc356)
    cir.br ^bb8 loc(#loc208)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc357)
  ^bb9:  // pred: ^bb8
    %42 = cir.load deref %7 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc194)
    %43 = cir.load %42 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc241)
    cir.store %43, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc339)
    cir.br ^bb10 loc(#loc358)
  ^bb10:  // pred: ^bb9
    %44 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc244)
    %45 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc245)
    %46 = cir.cast(bitcast, %45 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc245)
    %47 = cir.call @wcslen(%46) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc244)
    cir.store %47, %3 : !u64i, !cir.ptr<!u64i> loc(#loc340)
    %48 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc246)
    %49 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc247)
    %50 = cir.const #cir.int<1> : !s32i loc(#loc248)
    %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc248)
    %52 = cir.binop(add, %49, %51) : !u64i loc(#loc359)
    %53 = cir.const #cir.int<4> : !u64i loc(#loc360)
    %54 = cir.call @calloc(%52, %53) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc246)
    cir.store %54, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc341)
    cir.br ^bb11 loc(#loc361)
  ^bb11:  // pred: ^bb10
    %55 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc253)
    %56 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc254)
    %57 = cir.cmp(eq, %55, %56) : !cir.ptr<!void>, !cir.bool loc(#loc362)
    cir.brcond %57 ^bb12, ^bb13 loc(#loc363)
  ^bb12:  // pred: ^bb11
    %58 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc256)
    %59 = cir.const #cir.int<1> : !s32i loc(#loc257)
    %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc258)
    cir.call @exit(%60) : (!s32i) -> () extra(#fn_attr) loc(#loc256)
    cir.br ^bb13 loc(#loc252)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc252)
  ^bb14:  // pred: ^bb13
    %61 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc259)
    %62 = cir.cast(bitcast, %61 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc259)
    %63 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc260)
    %64 = cir.cast(bitcast, %63 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc260)
    %65 = cir.call @wcscpy(%62, %64) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc261)
    %66 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc262)
    %67 = cir.cast(bitcast, %66 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc262)
    cir.call @printWLine(%67) : (!cir.ptr<!s32i>) -> () loc(#loc263)
    %68 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc264)
    cir.call @free(%68) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc265)
    cir.br ^bb15 loc(#loc243)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc240)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc188)
  } loc(#loc336)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/stdlib.h":675:1)
#loc10 = loc("/usr/include/stdlib.h":676:14)
#loc11 = loc("/usr/include/wchar.h":98:1)
#loc12 = loc("/usr/include/wchar.h":100:14)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc15 = loc("/usr/include/stdlib.h":687:1)
#loc16 = loc("/usr/include/stdlib.h":687:32)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":24:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":54:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":31:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":31:24)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":33:13)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":33:75)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":43:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":43:24)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":46:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":46:49)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":47:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":47:68)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":26:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":26:12)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":27:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":27:25)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":28:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":28:25)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":29:12)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":29:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":30:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":41:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":31:23)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":32:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":39:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":33:50)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":33:57)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":33:60)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":33:74)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":34:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":34:50)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":34:17)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":34:34)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":34:40)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":34:41)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":34:47)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":34:46)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":35:21)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":35:36)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":35:42)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":35:45)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":35:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":36:35)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":36:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":36:27)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":36:30)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":36:31)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":38:28)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":38:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":40:21)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":40:10)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":40:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":42:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":53:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":43:23)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":44:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":52:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":46:30)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":46:45)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":47:35)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":47:42)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":47:50)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":47:53)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":47:67)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":48:13)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":48:41)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":48:17)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":48:25)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":48:31)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":48:32)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":48:38)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":48:37)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":49:26)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":49:32)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":49:19)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":50:31)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":50:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":51:18)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":51:13)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":126:1)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":130:1)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":128:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":128:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":129:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":129:13)
#loc102 = loc("/usr/include/string.h":141:1)
#loc103 = loc("/usr/include/string.h":142:14)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":61:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":91:1)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":68:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":68:24)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":70:13)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":70:67)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":80:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":80:24)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":83:13)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":83:49)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":84:13)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":84:54)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":63:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":63:12)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":64:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":64:25)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":65:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":65:25)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":66:12)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":66:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":67:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":78:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":68:23)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":69:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":76:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":70:45)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":70:52)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":70:55)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":70:66)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":71:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":71:51)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":71:17)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":71:35)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":71:41)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":71:42)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":71:48)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":71:47)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":72:20)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":72:36)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":72:41)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":72:44)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":72:13)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":72:45)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":73:36)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":73:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":73:28)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":73:31)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":73:32)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":75:28)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":75:13)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":77:21)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":77:10)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":77:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":79:5)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":90:5)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":80:23)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":81:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":89:9)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":83:30)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":83:45)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":84:35)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":84:42)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":84:50)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":84:53)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":85:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":85:41)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":85:17)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":85:25)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":85:31)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":85:32)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":85:38)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":85:37)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":86:26)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":86:32)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":86:19)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":87:31)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":87:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":88:18)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":88:13)
#loc183 = loc("/usr/include/wchar.h":247:1)
#loc184 = loc("/usr/include/wchar.h":247:51)
#loc185 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc186 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":94:1)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":124:1)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":101:9)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":101:24)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":103:13)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":103:75)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":113:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":113:24)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":116:13)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":116:52)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":117:13)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":117:68)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":96:5)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":96:12)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":97:5)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":97:25)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":98:5)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":98:25)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":99:12)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":99:5)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":100:5)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":111:5)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":101:23)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":102:9)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":109:9)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":103:50)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":103:57)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":103:60)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":103:74)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":104:13)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":104:50)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":104:17)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":104:34)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":104:40)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":104:41)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":104:47)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":104:46)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":105:21)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":105:36)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":105:42)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":105:45)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":105:13)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":106:35)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":106:13)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":106:27)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":106:30)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":106:31)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":108:28)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":108:13)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":110:21)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":110:10)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":110:9)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":112:5)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":123:5)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":113:23)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":114:9)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":122:9)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":116:30)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":116:48)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":117:35)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":117:42)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":117:50)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":117:53)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":117:67)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":118:13)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":118:41)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":118:17)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":118:25)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":118:31)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":118:32)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":118:38)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":118:37)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":119:26)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":119:32)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":119:19)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":120:35)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":120:13)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":121:18)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c":121:13)
#loc266 = loc(fused[#loc1, #loc2])
#loc267 = loc(fused[#loc3, #loc4])
#loc268 = loc(fused[#loc5, #loc6])
#loc269 = loc(fused[#loc7, #loc8])
#loc270 = loc(fused[#loc9, #loc10])
#loc271 = loc(fused[#loc11, #loc12])
#loc272 = loc(fused[#loc13, #loc14])
#loc273 = loc(fused[#loc15, #loc16])
#loc274 = loc(fused[#loc17, #loc18])
#loc275 = loc(fused[#loc19, #loc20])
#loc276 = loc(fused[#loc21, #loc22])
#loc277 = loc(fused[#loc23, #loc24])
#loc278 = loc(fused[#loc25, #loc26])
#loc279 = loc(fused[#loc27, #loc28])
#loc280 = loc(fused[#loc29, #loc30])
#loc281 = loc(fused[#loc31, #loc32])
#loc282 = loc(fused[#loc33, #loc34])
#loc283 = loc(fused[#loc36, #loc35])
#loc284 = loc(fused[#loc37, #loc38])
#loc285 = loc(fused[#loc40, #loc41])
#loc286 = loc(fused[#loc44, #loc45])
#loc287 = loc(fused[#loc43, #loc45])
#loc288 = loc(fused[#loc42, #loc22])
#loc289 = loc(fused[#loc46, #loc47])
#loc290 = loc(fused[#loc48, #loc49])
#loc291 = loc(fused[#loc50, #loc47])
#loc292 = loc(fused[#loc60, #loc59])
#loc293 = loc(fused[#loc65, #loc64])
#loc294 = loc(fused[#loc68, #loc66])
#loc295 = loc(fused[#loc69, #loc70])
#loc296 = loc(fused[#loc72, #loc73])
#loc297 = loc(fused[#loc77, #loc78])
#loc298 = loc(fused[#loc79, #loc80])
#loc299 = loc(fused[#loc81, #loc82])
#loc300 = loc(fused[#loc83, #loc84])
#loc301 = loc(fused[#loc85, #loc82])
#loc302 = loc(fused[#loc96, #loc97])
#loc303 = loc(fused[#loc98, #loc99])
#loc304 = loc(fused[#loc100, #loc101])
#loc305 = loc(fused[#loc102, #loc103])
#loc306 = loc(fused[#loc104, #loc105])
#loc307 = loc(fused[#loc106, #loc107])
#loc308 = loc(fused[#loc108, #loc109])
#loc309 = loc(fused[#loc110, #loc111])
#loc310 = loc(fused[#loc112, #loc113])
#loc311 = loc(fused[#loc114, #loc115])
#loc312 = loc(fused[#loc116, #loc117])
#loc313 = loc(fused[#loc118, #loc119])
#loc314 = loc(fused[#loc120, #loc121])
#loc315 = loc(fused[#loc123, #loc122])
#loc316 = loc(fused[#loc124, #loc125])
#loc317 = loc(fused[#loc127, #loc128])
#loc318 = loc(fused[#loc131, #loc132])
#loc319 = loc(fused[#loc130, #loc132])
#loc320 = loc(fused[#loc129, #loc109])
#loc321 = loc(fused[#loc133, #loc134])
#loc322 = loc(fused[#loc135, #loc136])
#loc323 = loc(fused[#loc137, #loc134])
#loc324 = loc(fused[#loc145, #loc146])
#loc325 = loc(fused[#loc148, #loc147])
#loc326 = loc(fused[#loc153, #loc152])
#loc327 = loc(fused[#loc156, #loc154])
#loc328 = loc(fused[#loc157, #loc158])
#loc329 = loc(fused[#loc160, #loc161])
#loc330 = loc(fused[#loc165, #loc166])
#loc331 = loc(fused[#loc168, #loc169])
#loc332 = loc(fused[#loc170, #loc171])
#loc333 = loc(fused[#loc172, #loc169])
#loc334 = loc(fused[#loc183, #loc184])
#loc335 = loc(fused[#loc185, #loc186])
#loc336 = loc(fused[#loc187, #loc188])
#loc337 = loc(fused[#loc189, #loc190])
#loc338 = loc(fused[#loc191, #loc192])
#loc339 = loc(fused[#loc193, #loc194])
#loc340 = loc(fused[#loc195, #loc196])
#loc341 = loc(fused[#loc197, #loc198])
#loc342 = loc(fused[#loc199, #loc200])
#loc343 = loc(fused[#loc201, #loc202])
#loc344 = loc(fused[#loc203, #loc204])
#loc345 = loc(fused[#loc206, #loc205])
#loc346 = loc(fused[#loc207, #loc208])
#loc347 = loc(fused[#loc210, #loc211])
#loc348 = loc(fused[#loc214, #loc215])
#loc349 = loc(fused[#loc213, #loc215])
#loc350 = loc(fused[#loc212, #loc192])
#loc351 = loc(fused[#loc216, #loc217])
#loc352 = loc(fused[#loc218, #loc219])
#loc353 = loc(fused[#loc220, #loc217])
#loc354 = loc(fused[#loc230, #loc229])
#loc355 = loc(fused[#loc235, #loc234])
#loc356 = loc(fused[#loc238, #loc236])
#loc357 = loc(fused[#loc239, #loc240])
#loc358 = loc(fused[#loc242, #loc243])
#loc359 = loc(fused[#loc247, #loc248])
#loc360 = loc(fused[#loc249, #loc250])
#loc361 = loc(fused[#loc251, #loc252])
#loc362 = loc(fused[#loc253, #loc254])
#loc363 = loc(fused[#loc255, #loc252])
