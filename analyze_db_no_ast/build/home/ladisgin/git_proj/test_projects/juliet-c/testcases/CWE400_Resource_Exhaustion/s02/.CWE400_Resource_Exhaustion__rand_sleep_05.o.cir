!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc162)
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc163)
  cir.func private  @usleep(!u32i) -> !s32i loc(#loc164)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc165)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Sleep time possibly too long\00" : !cir.array<!s8i x 29>> : !cir.array<!s8i x 29> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_sleep_05_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc167)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc15)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc168)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc162)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc21)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc21)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc21)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc21)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc21)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc21)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc21)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc21)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc21)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc21)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc21)
          cir.yield %23 : !u32i loc(#loc21)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc21)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc21)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc21)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc21)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc21)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc21)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc21)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc21)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc21)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc21)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc21)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc21)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc21)
          cir.yield %27 : !u32i loc(#loc21)
        }) : (!cir.bool) -> !u32i loc(#loc21)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc21)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc171)
      } loc(#loc170)
    } loc(#loc169)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc162)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc25)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc25)
      cir.if %5 {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc27)
        %8 = cir.call @usleep(%7) : (!u32i) -> !s32i loc(#loc28)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc9)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc9)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc29)
      } loc(#loc173)
    } loc(#loc172)
    cir.return loc(#loc11)
  } loc(#loc166)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_sleep_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc176)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc177)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc178)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc174)
  cir.global "private"  internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc179)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc42)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"Sleep time OK\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc43)
  cir.global "private"  constant internal dsolocal @".str3" = #cir.const_array<"Sleep time too long\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc44)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc181)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc50)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc162)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc54)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc54)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc56)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc56)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc56)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc56)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc56)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc56)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc56)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc56)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc56)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc56)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc56)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc56)
          cir.yield %23 : !u32i loc(#loc56)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc56)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc56)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc56)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc56)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc56)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc56)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc56)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc56)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc56)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc56)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc56)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc56)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc56)
          cir.yield %27 : !u32i loc(#loc56)
        }) : (!cir.bool) -> !u32i loc(#loc56)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc56)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc185)
      } loc(#loc184)
    } loc(#loc183)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc179)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc60)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc60)
      cir.if %5 {
        %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc42)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc42)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc64)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc67)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc68)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !s32i loc(#loc189)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc69)
          %10 = cir.ternary(%9, true {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
            %12 = cir.const #cir.int<2000> : !s32i loc(#loc72)
            %13 = cir.cmp(le, %11, %12) : !s32i, !s32i loc(#loc190)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc73)
            %15 = cir.ternary(%14, true {
              %16 = cir.const #true loc(#loc70)
              cir.yield %16 : !cir.bool loc(#loc70)
            }, false {
              %16 = cir.const #false loc(#loc70)
              cir.yield %16 : !cir.bool loc(#loc70)
            }) : (!cir.bool) -> !cir.bool loc(#loc70)
            cir.yield %15 : !cir.bool loc(#loc70)
          }, false {
            %11 = cir.const #false loc(#loc70)
            cir.yield %11 : !cir.bool loc(#loc70)
          }) : (!cir.bool) -> !cir.bool loc(#loc70)
          cir.if %10 {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc77)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc77)
            %13 = cir.call @usleep(%12) : (!u32i) -> !s32i loc(#loc78)
            %14 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc43)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc43)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc79)
          } else {
            %11 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc44)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc44)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc80)
          } loc(#loc191)
        } loc(#loc188)
      } loc(#loc187)
    } loc(#loc186)
    cir.return loc(#loc46)
  } loc(#loc180)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc193)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc85)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc86)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc162)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc90)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc90)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc92)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc92)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc92)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc92)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc92)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc92)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc92)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc92)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc92)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc92)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc92)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc92)
          cir.yield %23 : !u32i loc(#loc92)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc92)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc92)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc92)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc92)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc92)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc92)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc92)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc92)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc92)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc92)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc92)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc92)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc92)
          cir.yield %27 : !u32i loc(#loc92)
        }) : (!cir.bool) -> !u32i loc(#loc92)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc92)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
      } loc(#loc196)
    } loc(#loc195)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc162)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc96)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc96)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc101)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !s32i loc(#loc201)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc102)
          %10 = cir.ternary(%9, true {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc104)
            %12 = cir.const #cir.int<2000> : !s32i loc(#loc105)
            %13 = cir.cmp(le, %11, %12) : !s32i, !s32i loc(#loc202)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc106)
            %15 = cir.ternary(%14, true {
              %16 = cir.const #true loc(#loc103)
              cir.yield %16 : !cir.bool loc(#loc103)
            }, false {
              %16 = cir.const #false loc(#loc103)
              cir.yield %16 : !cir.bool loc(#loc103)
            }) : (!cir.bool) -> !cir.bool loc(#loc103)
            cir.yield %15 : !cir.bool loc(#loc103)
          }, false {
            %11 = cir.const #false loc(#loc103)
            cir.yield %11 : !cir.bool loc(#loc103)
          }) : (!cir.bool) -> !cir.bool loc(#loc103)
          cir.if %10 {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc110)
            %13 = cir.call @usleep(%12) : (!u32i) -> !s32i loc(#loc111)
            %14 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc112)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc112)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc113)
          } else {
            %11 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc114)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc114)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc115)
          } loc(#loc203)
        } loc(#loc200)
      } loc(#loc199)
    } loc(#loc198)
    cir.return loc(#loc82)
  } loc(#loc192)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc205)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc120)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc121)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc179)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc125)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc125)
      cir.if %5 {
        %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc129)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc129)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc130)
      } else {
        %6 = cir.const #cir.int<20> : !s32i loc(#loc131)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
      } loc(#loc208)
    } loc(#loc207)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc162)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc135)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc135)
      cir.if %5 {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc137)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc137)
        %8 = cir.call @usleep(%7) : (!u32i) -> !s32i loc(#loc138)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc139)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc139)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc140)
      } loc(#loc211)
    } loc(#loc210)
    cir.return loc(#loc117)
  } loc(#loc204)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc213)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc145)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc146)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc162)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc150)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc150)
      cir.if %5 {
        %6 = cir.const #cir.int<20> : !s32i loc(#loc152)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc217)
      } loc(#loc216)
    } loc(#loc215)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc162)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc156)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc156)
      cir.if %5 {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc158)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc158)
        %8 = cir.call @usleep(%7) : (!u32i) -> !s32i loc(#loc159)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc160)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc160)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc161)
      } loc(#loc219)
    } loc(#loc218)
    cir.return loc(#loc142)
  } loc(#loc212)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_05.c":0:0)
#loc1 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":31:1)
#loc2 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":31:25)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("/usr/include/unistd.h":480:1)
#loc6 = loc("/usr/include/unistd.h":480:43)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":50:19)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":36:1)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":52:1)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":38:5)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":38:9)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":40:14)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":40:13)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":40:5)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":41:5)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":45:5)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":41:8)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":42:5)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":44:17)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":44:9)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":46:5)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":51:5)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":46:8)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":47:5)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":49:15)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":49:9)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":50:9)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":158:1)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":164:1)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":160:5)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":160:14)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":161:5)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":161:14)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":162:5)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":162:14)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":163:5)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":163:14)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":32:1)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":32:26)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":72:19)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":80:23)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":84:23)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":59:1)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":87:1)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":61:5)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":61:9)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":63:14)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":63:13)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":63:5)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":64:5)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":68:5)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":64:8)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":65:5)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":67:17)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":67:9)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":69:5)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":86:5)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":69:8)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":70:5)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":73:5)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":75:5)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":72:9)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":77:9)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":85:9)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":77:13)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":77:21)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":77:19)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":77:23)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":77:26)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":77:35)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":77:32)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":78:9)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":81:9)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":83:9)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":79:19)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":79:13)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":80:13)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":84:13)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":90:1)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":113:1)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":92:5)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":92:9)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":94:14)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":94:13)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":94:5)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":95:5)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":99:5)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":95:8)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":96:5)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":98:17)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":98:9)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":100:5)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":112:5)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":100:8)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":101:5)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":103:9)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":111:9)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":103:13)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":103:21)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":103:19)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":103:23)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":103:26)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":103:35)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":103:32)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":104:9)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":107:9)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":109:9)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":105:19)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":105:13)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":106:23)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":106:13)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":110:23)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":110:13)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":116:1)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":137:1)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":118:5)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":118:9)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":120:14)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":120:13)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":120:5)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":121:5)
#loc124 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":130:5)
#loc125 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":121:8)
#loc126 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":122:5)
#loc127 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":125:5)
#loc128 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":127:5)
#loc129 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":124:19)
#loc130 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":124:9)
#loc131 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":129:17)
#loc132 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":129:9)
#loc133 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":131:5)
#loc134 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":136:5)
#loc135 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":131:8)
#loc136 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":132:5)
#loc137 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":134:15)
#loc138 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":134:9)
#loc139 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":135:19)
#loc140 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":135:9)
#loc141 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":140:1)
#loc142 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":156:1)
#loc143 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":142:5)
#loc144 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":142:9)
#loc145 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":144:14)
#loc146 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":144:13)
#loc147 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":144:5)
#loc148 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":145:5)
#loc149 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":149:5)
#loc150 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":145:8)
#loc151 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":146:5)
#loc152 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":148:17)
#loc153 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":148:9)
#loc154 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":150:5)
#loc155 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":155:5)
#loc156 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":150:8)
#loc157 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":151:5)
#loc158 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":153:15)
#loc159 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":153:9)
#loc160 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":154:19)
#loc161 = loc("CWE400_Resource_Exhaustion__rand_sleep_05.c":154:9)
#loc162 = loc(fused[#loc1, #loc2])
#loc163 = loc(fused[#loc3, #loc4])
#loc164 = loc(fused[#loc5, #loc6])
#loc165 = loc(fused[#loc7, #loc8])
#loc166 = loc(fused[#loc10, #loc11])
#loc167 = loc(fused[#loc12, #loc13])
#loc168 = loc(fused[#loc16, #loc14])
#loc169 = loc(fused[#loc17, #loc18])
#loc170 = loc(fused[#loc20, #loc18])
#loc171 = loc(fused[#loc22, #loc21])
#loc172 = loc(fused[#loc23, #loc24])
#loc173 = loc(fused[#loc26, #loc24])
#loc174 = loc(fused[#loc30, #loc31])
#loc175 = loc(fused[#loc32, #loc33])
#loc176 = loc(fused[#loc34, #loc35])
#loc177 = loc(fused[#loc36, #loc37])
#loc178 = loc(fused[#loc38, #loc39])
#loc179 = loc(fused[#loc40, #loc41])
#loc180 = loc(fused[#loc45, #loc46])
#loc181 = loc(fused[#loc47, #loc48])
#loc182 = loc(fused[#loc51, #loc49])
#loc183 = loc(fused[#loc52, #loc53])
#loc184 = loc(fused[#loc55, #loc53])
#loc185 = loc(fused[#loc57, #loc56])
#loc186 = loc(fused[#loc58, #loc59])
#loc187 = loc(fused[#loc61, #loc62, #loc63, #loc59])
#loc188 = loc(fused[#loc65, #loc66])
#loc189 = loc(fused[#loc67, #loc68])
#loc190 = loc(fused[#loc71, #loc72])
#loc191 = loc(fused[#loc74, #loc75, #loc76, #loc66])
#loc192 = loc(fused[#loc81, #loc82])
#loc193 = loc(fused[#loc83, #loc84])
#loc194 = loc(fused[#loc87, #loc85])
#loc195 = loc(fused[#loc88, #loc89])
#loc196 = loc(fused[#loc91, #loc89])
#loc197 = loc(fused[#loc93, #loc92])
#loc198 = loc(fused[#loc94, #loc95])
#loc199 = loc(fused[#loc97, #loc95])
#loc200 = loc(fused[#loc98, #loc99])
#loc201 = loc(fused[#loc100, #loc101])
#loc202 = loc(fused[#loc104, #loc105])
#loc203 = loc(fused[#loc107, #loc108, #loc109, #loc99])
#loc204 = loc(fused[#loc116, #loc117])
#loc205 = loc(fused[#loc118, #loc119])
#loc206 = loc(fused[#loc122, #loc120])
#loc207 = loc(fused[#loc123, #loc124])
#loc208 = loc(fused[#loc126, #loc127, #loc128, #loc124])
#loc209 = loc(fused[#loc132, #loc131])
#loc210 = loc(fused[#loc133, #loc134])
#loc211 = loc(fused[#loc136, #loc134])
#loc212 = loc(fused[#loc141, #loc142])
#loc213 = loc(fused[#loc143, #loc144])
#loc214 = loc(fused[#loc147, #loc145])
#loc215 = loc(fused[#loc148, #loc149])
#loc216 = loc(fused[#loc151, #loc149])
#loc217 = loc(fused[#loc153, #loc152])
#loc218 = loc(fused[#loc154, #loc155])
#loc219 = loc(fused[#loc157, #loc155])
