!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":26:25)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":26:32)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":159:10)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":159:14)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":159:20)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":159:32)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":69:30)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":69:37)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":109:30)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":109:37)
#loc303 = loc(fused[#loc9, #loc10])
#loc340 = loc(fused[#loc109, #loc110])
#loc341 = loc(fused[#loc111, #loc112])
#loc347 = loc(fused[#loc132, #loc133])
#loc378 = loc(fused[#loc219, #loc220])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc299)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc300)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc301)
  cir.func internal private @badSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc9, #loc10])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc303)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc8)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc11)
    cir.br ^bb1 loc(#loc304)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc299)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc305)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc16)
    %6 = cir.const #cir.int<50> : !s32i loc(#loc17)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc17)
    %8 = cir.const #cir.int<1> : !u64i loc(#loc306)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc307)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc16)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc308)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc309)
    cir.br ^bb3 loc(#loc310)
  ^bb3:  // pred: ^bb2
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc24)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc25)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc25)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc311)
    cir.brcond %15 ^bb4, ^bb5 loc(#loc312)
  ^bb4:  // pred: ^bb3
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc27)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc29)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc27)
    cir.br ^bb5 loc(#loc23)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc23)
  ^bb6:  // pred: ^bb5
    %19 = cir.const #cir.int<0> : !s32i loc(#loc30)
    %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc30)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc32)
    %23 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc33)
    cir.store %20, %23 : !s8i, !cir.ptr<!s8i> loc(#loc313)
    cir.br ^bb7 loc(#loc13)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc13)
  ^bb8:  // pred: ^bb7
    %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
    cir.store %24, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc314)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc314)
    cir.return %25 : !cir.ptr<!s8i> loc(#loc314)
  } loc(#loc302)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc315)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc316)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc318)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc319)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc320)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc48)
    cir.store %3, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc321)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %5 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc299)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc322)
    %6 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
    %7 = cir.call @badSource(%6) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc53)
    cir.store %7, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc323)
    cir.br ^bb1 loc(#loc324)
  ^bb1:  // pred: ^bb0
    %8 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc58)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc58)
    %10 = cir.const #cir.int<67> : !s32i loc(#loc59)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc60)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc61)
    %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc60)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc60)
    cir.libc.memset %14 bytes from %9 set to %10 : !cir.ptr<!void>, !s32i, !u64i loc(#loc325)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc64)
    %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc64)
    %17 = cir.const #cir.int<100> : !s32i loc(#loc65)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc66)
    %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc65)
    %20 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc67)
    %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc67)
    cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc326)
    cir.br ^bb2 loc(#loc327)
  ^bb2:  // pred: ^bb1
    %22 = cir.const #cir.int<0> : !s32i loc(#loc70)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc70)
    cir.store %23, %0 : !u64i, !cir.ptr<!u64i> loc(#loc328)
    cir.br ^bb3 loc(#loc327)
  ^bb3:  // 2 preds: ^bb2, ^bb7
    %24 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc72)
    %25 = cir.const #cir.int<100> : !s32i loc(#loc73)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc73)
    %27 = cir.cmp(lt, %24, %26) : !u64i, !cir.bool loc(#loc329)
    cir.brcond %27 ^bb4, ^bb8 loc(#loc74)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc330)
  ^bb5:  // pred: ^bb4
    %28 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc76)
    %29 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc77)
    %30 = cir.ptr_stride(%29 : !cir.ptr<!s8i>, %28 : !u64i), !cir.ptr<!s8i> loc(#loc77)
    %31 = cir.load %30 : !cir.ptr<!s8i>, !s8i loc(#loc77)
    %32 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
    %33 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc79)
    %34 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %33 : !u64i), !cir.ptr<!s8i> loc(#loc80)
    cir.store %31, %34 : !s8i, !cir.ptr<!s8i> loc(#loc331)
    cir.br ^bb6 loc(#loc69)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc69)
  ^bb7:  // pred: ^bb6
    %35 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc82)
    %36 = cir.unary(inc, %35) : !u64i, !u64i loc(#loc83)
    cir.store %36, %0 : !u64i, !cir.ptr<!u64i> loc(#loc332)
    cir.br ^bb3 loc(#loc327)
  ^bb8:  // pred: ^bb3
    cir.br ^bb9 loc(#loc69)
  ^bb9:  // pred: ^bb8
    %37 = cir.const #cir.int<0> : !s32i loc(#loc84)
    %38 = cir.cast(integral, %37 : !s32i), !s8i loc(#loc84)
    %39 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc85)
    %40 = cir.const #cir.int<100> : !s32i loc(#loc86)
    %41 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %42 = cir.binop(sub, %40, %41) nsw : !s32i loc(#loc86)
    %43 = cir.ptr_stride(%39 : !cir.ptr<!s8i>, %42 : !s32i), !cir.ptr<!s8i> loc(#loc88)
    cir.store %38, %43 : !s8i, !cir.ptr<!s8i> loc(#loc333)
    %44 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %45 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc91)
    %46 = cir.cast(bitcast, %45 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc91)
    cir.call @free(%46) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc92)
    cir.br ^bb10 loc(#loc57)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc41)
  } loc(#loc317)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc335)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc95)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc336)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc97)
    cir.return loc(#loc94)
  } loc(#loc334)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc337)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc338)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc103)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc105)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc106)
  cir.func @main(%arg0: !s32i loc(fused[#loc109, #loc110]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc111, #loc112])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc340)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc341)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc108)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc113)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc114)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc115)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc115)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc116)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc103)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc103)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc117)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21_good : !cir.ptr<!cir.func<!void ()>> loc(#loc342)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21_good() : () -> () loc(#loc118)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc104)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc104)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc105)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc105)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc343)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21_bad() : () -> () loc(#loc122)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc106)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc106)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc124)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc125)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc344)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc344)
    cir.return %17 : !s32i loc(#loc344)
  } loc(#loc339)
  cir.global "private" internal dsolocal @goodG2B1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc345)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc129)
  cir.func internal private @goodG2B1Source(%arg0: !cir.ptr<!s8i> loc(fused[#loc132, #loc133])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc347)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc131)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc134)
    cir.br ^bb1 loc(#loc348)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc345)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc137)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc349)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc129)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc129)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc141)
    cir.br ^bb8 loc(#loc139)
  ^bb3:  // pred: ^bb1
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc142)
    %8 = cir.const #cir.int<100> : !s32i loc(#loc143)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc143)
    %10 = cir.const #cir.int<1> : !u64i loc(#loc350)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc351)
    %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc142)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc352)
    cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc353)
    cir.br ^bb4 loc(#loc354)
  ^bb4:  // pred: ^bb3
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc150)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc151)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc151)
    %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc355)
    cir.brcond %17 ^bb5, ^bb6 loc(#loc356)
  ^bb5:  // pred: ^bb4
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc153)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc154)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc155)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc153)
    cir.br ^bb6 loc(#loc149)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc149)
  ^bb7:  // pred: ^bb6
    %21 = cir.const #cir.int<0> : !s32i loc(#loc156)
    %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc156)
    %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc157)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc158)
    %25 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc159)
    cir.store %22, %25 : !s8i, !cir.ptr<!s8i> loc(#loc357)
    cir.br ^bb8 loc(#loc136)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc136)
  ^bb9:  // pred: ^bb8
    %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc160)
    cir.store %26, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc358)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc358)
    cir.return %27 : !cir.ptr<!s8i> loc(#loc358)
  } loc(#loc346)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc360)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc361)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc362)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc170)
    cir.store %3, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc363)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc172)
    %5 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc345)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc364)
    %6 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc174)
    %7 = cir.call @goodG2B1Source(%6) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc175)
    cir.store %7, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc365)
    cir.br ^bb1 loc(#loc366)
  ^bb1:  // pred: ^bb0
    %8 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc180)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc180)
    %10 = cir.const #cir.int<67> : !s32i loc(#loc181)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc182)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc183)
    %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc182)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc182)
    cir.libc.memset %14 bytes from %9 set to %10 : !cir.ptr<!void>, !s32i, !u64i loc(#loc367)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc186)
    %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc186)
    %17 = cir.const #cir.int<100> : !s32i loc(#loc187)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc188)
    %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc187)
    %20 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc189)
    %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc189)
    cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc368)
    cir.br ^bb2 loc(#loc369)
  ^bb2:  // pred: ^bb1
    %22 = cir.const #cir.int<0> : !s32i loc(#loc192)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc192)
    cir.store %23, %0 : !u64i, !cir.ptr<!u64i> loc(#loc370)
    cir.br ^bb3 loc(#loc369)
  ^bb3:  // 2 preds: ^bb2, ^bb7
    %24 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc194)
    %25 = cir.const #cir.int<100> : !s32i loc(#loc195)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc195)
    %27 = cir.cmp(lt, %24, %26) : !u64i, !cir.bool loc(#loc371)
    cir.brcond %27 ^bb4, ^bb8 loc(#loc196)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc372)
  ^bb5:  // pred: ^bb4
    %28 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc198)
    %29 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc199)
    %30 = cir.ptr_stride(%29 : !cir.ptr<!s8i>, %28 : !u64i), !cir.ptr<!s8i> loc(#loc199)
    %31 = cir.load %30 : !cir.ptr<!s8i>, !s8i loc(#loc199)
    %32 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc200)
    %33 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc201)
    %34 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %33 : !u64i), !cir.ptr<!s8i> loc(#loc202)
    cir.store %31, %34 : !s8i, !cir.ptr<!s8i> loc(#loc373)
    cir.br ^bb6 loc(#loc191)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc191)
  ^bb7:  // pred: ^bb6
    %35 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc204)
    %36 = cir.unary(inc, %35) : !u64i, !u64i loc(#loc205)
    cir.store %36, %0 : !u64i, !cir.ptr<!u64i> loc(#loc374)
    cir.br ^bb3 loc(#loc369)
  ^bb8:  // pred: ^bb3
    cir.br ^bb9 loc(#loc191)
  ^bb9:  // pred: ^bb8
    %37 = cir.const #cir.int<0> : !s32i loc(#loc206)
    %38 = cir.cast(integral, %37 : !s32i), !s8i loc(#loc206)
    %39 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc207)
    %40 = cir.const #cir.int<100> : !s32i loc(#loc208)
    %41 = cir.const #cir.int<1> : !s32i loc(#loc209)
    %42 = cir.binop(sub, %40, %41) nsw : !s32i loc(#loc208)
    %43 = cir.ptr_stride(%39 : !cir.ptr<!s8i>, %42 : !s32i), !cir.ptr<!s8i> loc(#loc210)
    cir.store %38, %43 : !s8i, !cir.ptr<!s8i> loc(#loc375)
    %44 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc211)
    cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc212)
    %45 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc213)
    %46 = cir.cast(bitcast, %45 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc213)
    cir.call @free(%46) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc214)
    cir.br ^bb10 loc(#loc179)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc163)
  } loc(#loc359)
  cir.global "private" internal dsolocal @goodG2B2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc376)
  cir.func internal private @goodG2B2Source(%arg0: !cir.ptr<!s8i> loc(fused[#loc219, #loc220])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc378)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc218)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc221)
    cir.br ^bb1 loc(#loc379)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc376)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc224)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc224)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc380)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc226)
    %6 = cir.const #cir.int<100> : !s32i loc(#loc227)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc227)
    %8 = cir.const #cir.int<1> : !u64i loc(#loc381)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc382)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc226)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc383)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc384)
    cir.br ^bb3 loc(#loc385)
  ^bb3:  // pred: ^bb2
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc234)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc235)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc235)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc386)
    cir.brcond %15 ^bb4, ^bb5 loc(#loc387)
  ^bb4:  // pred: ^bb3
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc237)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc238)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc239)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc237)
    cir.br ^bb5 loc(#loc233)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc233)
  ^bb6:  // pred: ^bb5
    %19 = cir.const #cir.int<0> : !s32i loc(#loc240)
    %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc240)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc241)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc242)
    %23 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc243)
    cir.store %20, %23 : !s8i, !cir.ptr<!s8i> loc(#loc388)
    cir.br ^bb7 loc(#loc223)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc223)
  ^bb8:  // pred: ^bb7
    %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc244)
    cir.store %24, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc389)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc389)
    cir.return %25 : !cir.ptr<!s8i> loc(#loc389)
  } loc(#loc377)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc391)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc392)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc393)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc254)
    cir.store %3, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc394)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc256)
    %5 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc376)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc395)
    %6 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc258)
    %7 = cir.call @goodG2B2Source(%6) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc259)
    cir.store %7, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc396)
    cir.br ^bb1 loc(#loc397)
  ^bb1:  // pred: ^bb0
    %8 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc264)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc264)
    %10 = cir.const #cir.int<67> : !s32i loc(#loc265)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc266)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc267)
    %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc266)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc266)
    cir.libc.memset %14 bytes from %9 set to %10 : !cir.ptr<!void>, !s32i, !u64i loc(#loc398)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc270)
    %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc270)
    %17 = cir.const #cir.int<100> : !s32i loc(#loc271)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc272)
    %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc271)
    %20 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc273)
    %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc273)
    cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc399)
    cir.br ^bb2 loc(#loc400)
  ^bb2:  // pred: ^bb1
    %22 = cir.const #cir.int<0> : !s32i loc(#loc276)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc276)
    cir.store %23, %0 : !u64i, !cir.ptr<!u64i> loc(#loc401)
    cir.br ^bb3 loc(#loc400)
  ^bb3:  // 2 preds: ^bb2, ^bb7
    %24 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc278)
    %25 = cir.const #cir.int<100> : !s32i loc(#loc279)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc279)
    %27 = cir.cmp(lt, %24, %26) : !u64i, !cir.bool loc(#loc402)
    cir.brcond %27 ^bb4, ^bb8 loc(#loc280)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc403)
  ^bb5:  // pred: ^bb4
    %28 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc282)
    %29 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc283)
    %30 = cir.ptr_stride(%29 : !cir.ptr<!s8i>, %28 : !u64i), !cir.ptr<!s8i> loc(#loc283)
    %31 = cir.load %30 : !cir.ptr<!s8i>, !s8i loc(#loc283)
    %32 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc284)
    %33 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc285)
    %34 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %33 : !u64i), !cir.ptr<!s8i> loc(#loc286)
    cir.store %31, %34 : !s8i, !cir.ptr<!s8i> loc(#loc404)
    cir.br ^bb6 loc(#loc275)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc275)
  ^bb7:  // pred: ^bb6
    %35 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc288)
    %36 = cir.unary(inc, %35) : !u64i, !u64i loc(#loc289)
    cir.store %36, %0 : !u64i, !cir.ptr<!u64i> loc(#loc405)
    cir.br ^bb3 loc(#loc400)
  ^bb8:  // pred: ^bb3
    cir.br ^bb9 loc(#loc275)
  ^bb9:  // pred: ^bb8
    %37 = cir.const #cir.int<0> : !s32i loc(#loc290)
    %38 = cir.cast(integral, %37 : !s32i), !s8i loc(#loc290)
    %39 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc291)
    %40 = cir.const #cir.int<100> : !s32i loc(#loc292)
    %41 = cir.const #cir.int<1> : !s32i loc(#loc293)
    %42 = cir.binop(sub, %40, %41) nsw : !s32i loc(#loc292)
    %43 = cir.ptr_stride(%39 : !cir.ptr<!s8i>, %42 : !s32i), !cir.ptr<!s8i> loc(#loc294)
    cir.store %38, %43 : !s8i, !cir.ptr<!s8i> loc(#loc406)
    %44 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc295)
    cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc296)
    %45 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc297)
    %46 = cir.cast(bitcast, %45 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc297)
    cir.call @free(%46) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc298)
    cir.br ^bb10 loc(#loc263)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc247)
  } loc(#loc390)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":24:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":24:24)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":26:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":36:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":27:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":28:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":34:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":28:8)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":29:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":31:24)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":31:31)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":31:34)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":31:45)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":31:46)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":31:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":32:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":32:37)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":32:13)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":32:21)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":32:27)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":32:28)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":32:34)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":32:33)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":33:19)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":33:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":33:14)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":33:15)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":35:12)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":35:5)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc38 = loc("/usr/include/stdlib.h":687:1)
#loc39 = loc("/usr/include/stdlib.h":687:32)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":38:1)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":58:1)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":45:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":45:16)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":46:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":46:24)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":40:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":40:12)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":41:12)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":41:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":42:17)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":42:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":43:22)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":43:12)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":43:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":43:26)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":44:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":57:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":47:16)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":47:24)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":47:29)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":47:33)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":47:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":47:34)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":48:25)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":48:16)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":48:20)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":48:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":50:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":53:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":50:18)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":50:14)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":50:21)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":50:25)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":50:23)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":51:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":52:30)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":52:23)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":52:13)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":52:18)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":52:19)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":52:31)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":50:31)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":50:30)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":54:23)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":54:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":54:14)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":54:18)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":54:19)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":55:19)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":55:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":56:14)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":56:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":143:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":147:1)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":145:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":145:14)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":146:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":146:14)
#loc99 = loc("/usr/include/stdlib.h":575:1)
#loc100 = loc("/usr/include/stdlib.h":575:41)
#loc101 = loc("/usr/include/time.h":76:1)
#loc102 = loc("/usr/include/time.h":76:38)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":164:15)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":166:15)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":169:15)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":171:15)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":159:1)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":174:1)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":160:1)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":162:27)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":162:22)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":162:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":164:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":165:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":165:67)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":166:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":169:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":170:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":170:66)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":171:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":173:12)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":173:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":65:1)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":65:29)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":74:19)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":69:1)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":84:1)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":70:1)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":71:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":82:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":71:8)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":72:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":75:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":77:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":74:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":79:24)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":79:31)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":79:35)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":79:46)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":79:47)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":79:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":80:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":80:37)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":80:13)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":80:21)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":80:27)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":80:28)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":80:34)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":80:33)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":81:19)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":81:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":81:14)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":81:15)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":83:12)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":83:5)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":86:1)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":106:1)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":93:9)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":93:16)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":94:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":94:24)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":88:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":88:12)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":89:12)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":89:5)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":90:22)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":90:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":91:27)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":91:12)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":91:5)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":91:31)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":92:5)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":105:5)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":95:16)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":95:24)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":95:29)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":95:33)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":95:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":95:34)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":96:25)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":96:16)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":96:20)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":96:9)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":98:9)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":101:9)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":98:18)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":98:14)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":98:21)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":98:25)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":98:23)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":99:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":100:30)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":100:23)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":100:13)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":100:18)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":100:19)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":100:31)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":98:31)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":98:30)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":102:23)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":102:9)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":102:14)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":102:18)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":102:19)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":103:19)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":103:9)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":104:14)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":104:9)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":66:1)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":66:29)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":109:1)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":119:1)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":110:1)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":111:5)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":117:5)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":111:8)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":112:5)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":114:24)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":114:31)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":114:35)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":114:46)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":114:47)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":114:9)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":115:9)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":115:37)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":115:13)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":115:21)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":115:27)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":115:28)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":115:34)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":115:33)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":116:19)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":116:9)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":116:14)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":116:15)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":118:12)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":118:5)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":121:1)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":141:1)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":128:9)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":128:16)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":129:9)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":129:24)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":123:5)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":123:12)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":124:12)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":124:5)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":125:22)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":125:5)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":126:27)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":126:12)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":126:5)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":126:31)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":127:5)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":140:5)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":130:16)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":130:24)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":130:29)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":130:33)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":130:9)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":130:34)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":131:25)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":131:16)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":131:20)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":131:9)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":133:9)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":136:9)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":133:18)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":133:14)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":133:21)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":133:25)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":133:23)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":134:9)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":135:30)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":135:23)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":135:13)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":135:18)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":135:19)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":135:31)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":133:31)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":133:30)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":137:23)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":137:9)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":137:14)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":137:18)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":137:19)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":138:19)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":138:9)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":139:14)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c":139:9)
#loc299 = loc(fused[#loc1, #loc2])
#loc300 = loc(fused[#loc3, #loc4])
#loc301 = loc(fused[#loc5, #loc6])
#loc302 = loc(fused[#loc7, #loc8])
#loc304 = loc(fused[#loc12, #loc13])
#loc305 = loc(fused[#loc15, #loc13])
#loc306 = loc(fused[#loc18, #loc19])
#loc307 = loc(fused[#loc17, #loc19])
#loc308 = loc(fused[#loc16, #loc20])
#loc309 = loc(fused[#loc21, #loc20])
#loc310 = loc(fused[#loc22, #loc23])
#loc311 = loc(fused[#loc24, #loc25])
#loc312 = loc(fused[#loc26, #loc23])
#loc313 = loc(fused[#loc31, #loc30])
#loc314 = loc(fused[#loc35, #loc34])
#loc315 = loc(fused[#loc36, #loc37])
#loc316 = loc(fused[#loc38, #loc39])
#loc317 = loc(fused[#loc40, #loc41])
#loc318 = loc(fused[#loc42, #loc43])
#loc319 = loc(fused[#loc44, #loc45])
#loc320 = loc(fused[#loc46, #loc47])
#loc321 = loc(fused[#loc49, #loc48])
#loc322 = loc(fused[#loc51, #loc50])
#loc323 = loc(fused[#loc54, #loc55])
#loc324 = loc(fused[#loc56, #loc57])
#loc325 = loc(fused[#loc62, #loc63])
#loc326 = loc(fused[#loc67, #loc64])
#loc327 = loc(fused[#loc68, #loc69])
#loc328 = loc(fused[#loc71, #loc70])
#loc329 = loc(fused[#loc72, #loc73])
#loc330 = loc(fused[#loc75, #loc69])
#loc331 = loc(fused[#loc78, #loc81])
#loc332 = loc(fused[#loc83, #loc82])
#loc333 = loc(fused[#loc85, #loc84])
#loc334 = loc(fused[#loc93, #loc94])
#loc335 = loc(fused[#loc95, #loc96])
#loc336 = loc(fused[#loc97, #loc98])
#loc337 = loc(fused[#loc99, #loc100])
#loc338 = loc(fused[#loc101, #loc102])
#loc339 = loc(fused[#loc107, #loc108])
#loc342 = loc(fused[#loc118, #loc119])
#loc343 = loc(fused[#loc122, #loc123])
#loc344 = loc(fused[#loc126, #loc125])
#loc345 = loc(fused[#loc127, #loc128])
#loc346 = loc(fused[#loc130, #loc131])
#loc348 = loc(fused[#loc135, #loc136])
#loc349 = loc(fused[#loc138, #loc139, #loc140, #loc136])
#loc350 = loc(fused[#loc144, #loc145])
#loc351 = loc(fused[#loc143, #loc145])
#loc352 = loc(fused[#loc142, #loc146])
#loc353 = loc(fused[#loc147, #loc146])
#loc354 = loc(fused[#loc148, #loc149])
#loc355 = loc(fused[#loc150, #loc151])
#loc356 = loc(fused[#loc152, #loc149])
#loc357 = loc(fused[#loc157, #loc156])
#loc358 = loc(fused[#loc161, #loc160])
#loc359 = loc(fused[#loc162, #loc163])
#loc360 = loc(fused[#loc164, #loc165])
#loc361 = loc(fused[#loc166, #loc167])
#loc362 = loc(fused[#loc168, #loc169])
#loc363 = loc(fused[#loc171, #loc170])
#loc364 = loc(fused[#loc173, #loc172])
#loc365 = loc(fused[#loc176, #loc177])
#loc366 = loc(fused[#loc178, #loc179])
#loc367 = loc(fused[#loc184, #loc185])
#loc368 = loc(fused[#loc189, #loc186])
#loc369 = loc(fused[#loc190, #loc191])
#loc370 = loc(fused[#loc193, #loc192])
#loc371 = loc(fused[#loc194, #loc195])
#loc372 = loc(fused[#loc197, #loc191])
#loc373 = loc(fused[#loc200, #loc203])
#loc374 = loc(fused[#loc205, #loc204])
#loc375 = loc(fused[#loc207, #loc206])
#loc376 = loc(fused[#loc215, #loc216])
#loc377 = loc(fused[#loc217, #loc218])
#loc379 = loc(fused[#loc222, #loc223])
#loc380 = loc(fused[#loc225, #loc223])
#loc381 = loc(fused[#loc228, #loc229])
#loc382 = loc(fused[#loc227, #loc229])
#loc383 = loc(fused[#loc226, #loc230])
#loc384 = loc(fused[#loc231, #loc230])
#loc385 = loc(fused[#loc232, #loc233])
#loc386 = loc(fused[#loc234, #loc235])
#loc387 = loc(fused[#loc236, #loc233])
#loc388 = loc(fused[#loc241, #loc240])
#loc389 = loc(fused[#loc245, #loc244])
#loc390 = loc(fused[#loc246, #loc247])
#loc391 = loc(fused[#loc248, #loc249])
#loc392 = loc(fused[#loc250, #loc251])
#loc393 = loc(fused[#loc252, #loc253])
#loc394 = loc(fused[#loc255, #loc254])
#loc395 = loc(fused[#loc257, #loc256])
#loc396 = loc(fused[#loc260, #loc261])
#loc397 = loc(fused[#loc262, #loc263])
#loc398 = loc(fused[#loc268, #loc269])
#loc399 = loc(fused[#loc273, #loc270])
#loc400 = loc(fused[#loc274, #loc275])
#loc401 = loc(fused[#loc277, #loc276])
#loc402 = loc(fused[#loc278, #loc279])
#loc403 = loc(fused[#loc281, #loc275])
#loc404 = loc(fused[#loc284, #loc287])
#loc405 = loc(fused[#loc289, #loc288])
#loc406 = loc(fused[#loc291, #loc290])
