!s32i = !cir.int<s, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE617_Reachable_Assertion__fscanf_54d.c":30:53)
#loc6 = loc("CWE617_Reachable_Assertion__fscanf_54d.c":30:57)
#loc14 = loc("CWE617_Reachable_Assertion__fscanf_54d.c":43:57)
#loc15 = loc("CWE617_Reachable_Assertion__fscanf_54d.c":43:61)
#loc21 = loc(fused[#loc5, #loc6])
#loc24 = loc(fused[#loc14, #loc15])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fscanf_54d.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @CWE617_Reachable_Assertion__fscanf_54e_badSink(!s32i) loc(#loc19)
  cir.func @CWE617_Reachable_Assertion__fscanf_54d_badSink(%arg0: !s32i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc21)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc8)
    cir.call @CWE617_Reachable_Assertion__fscanf_54e_badSink(%1) : (!s32i) -> () loc(#loc9)
    cir.return loc(#loc4)
  } loc(#loc20)
  cir.func private @CWE617_Reachable_Assertion__fscanf_54e_goodG2BSink(!s32i) loc(#loc22)
  cir.func @CWE617_Reachable_Assertion__fscanf_54d_goodG2BSink(%arg0: !s32i loc(fused[#loc14, #loc15])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc24)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc16)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    cir.call @CWE617_Reachable_Assertion__fscanf_54e_goodG2BSink(%1) : (!s32i) -> () loc(#loc18)
    cir.return loc(#loc13)
  } loc(#loc23)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fscanf_54d.c":0:0)
#loc1 = loc("CWE617_Reachable_Assertion__fscanf_54d.c":28:1)
#loc2 = loc("CWE617_Reachable_Assertion__fscanf_54d.c":28:61)
#loc3 = loc("CWE617_Reachable_Assertion__fscanf_54d.c":30:1)
#loc4 = loc("CWE617_Reachable_Assertion__fscanf_54d.c":33:1)
#loc7 = loc("CWE617_Reachable_Assertion__fscanf_54d.c":31:1)
#loc8 = loc("CWE617_Reachable_Assertion__fscanf_54d.c":32:52)
#loc9 = loc("CWE617_Reachable_Assertion__fscanf_54d.c":32:5)
#loc10 = loc("CWE617_Reachable_Assertion__fscanf_54d.c":40:1)
#loc11 = loc("CWE617_Reachable_Assertion__fscanf_54d.c":40:65)
#loc12 = loc("CWE617_Reachable_Assertion__fscanf_54d.c":43:1)
#loc13 = loc("CWE617_Reachable_Assertion__fscanf_54d.c":46:1)
#loc16 = loc("CWE617_Reachable_Assertion__fscanf_54d.c":44:1)
#loc17 = loc("CWE617_Reachable_Assertion__fscanf_54d.c":45:56)
#loc18 = loc("CWE617_Reachable_Assertion__fscanf_54d.c":45:5)
#loc19 = loc(fused[#loc1, #loc2])
#loc20 = loc(fused[#loc3, #loc4])
#loc22 = loc(fused[#loc10, #loc11])
#loc23 = loc(fused[#loc12, #loc13])
