!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc161)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc162)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc163)
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc164)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc165)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc166)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc168)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc18)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc169)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc171)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc171)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc22)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc22)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc27)
        %7 = cir.const #cir.int<50> : !s32i loc(#loc28)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc28)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc173)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc174)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc27)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc175)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc176)
        cir.scope {
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc35)
          %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc36)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc36)
          %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc178)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc38)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc39)
            %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc40)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc38)
          } loc(#loc179)
        } loc(#loc177)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc41)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc41)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc42)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc43)
        %17 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc44)
        cir.store %14, %17 : !s8i, !cir.ptr<!s8i> loc(#loc180)
      } else {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc45)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc46)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc46)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc181)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc182)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc45)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc183)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc184)
        cir.scope {
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
          %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc54)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc54)
          %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc186)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc56)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc57)
            %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc58)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc56)
          } loc(#loc187)
        } loc(#loc185)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc59)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc59)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc61)
        %17 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc62)
        cir.store %14, %17 : !s8i, !cir.ptr<!s8i> loc(#loc188)
      } loc(#loc172)
    } loc(#loc170)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc190)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc67)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc67)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc68)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc69)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc70)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc69)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc69)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc191)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc73)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc73)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc74)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc75)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc74)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc76)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc76)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc192)
      %17 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc77)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
      %19 = cir.const #cir.int<100> : !s32i loc(#loc79)
      %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc79)
      %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc9)
      %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc9)
      %23 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc80)
      %24 = cir.call @snprintf(%18, %20, %22, %23) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc77)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc81)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc82)
      %26 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc83)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc84)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc84)
      cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc83)
    } loc(#loc189)
    cir.return loc(#loc15)
  } loc(#loc167)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc194)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc87)
    cir.return loc(#loc86)
  } loc(#loc193)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc196)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc93)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc197)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc199)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc199)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc97)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc97)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc102)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc103)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc103)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc201)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc202)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc102)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc203)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc204)
        cir.scope {
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc110)
          %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc111)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc111)
          %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc206)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc113)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc114)
            %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc115)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc113)
          } loc(#loc207)
        } loc(#loc205)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc116)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc116)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc117)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc118)
        %17 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc119)
        cir.store %14, %17 : !s8i, !cir.ptr<!s8i> loc(#loc208)
      } else {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc120)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc121)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc121)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc209)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc210)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc120)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc211)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc212)
        cir.scope {
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc128)
          %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc129)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc129)
          %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc214)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc131)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc132)
            %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc133)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc131)
          } loc(#loc215)
        } loc(#loc213)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc134)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc134)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc136)
        %17 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc137)
        cir.store %14, %17 : !s8i, !cir.ptr<!s8i> loc(#loc216)
      } loc(#loc200)
    } loc(#loc198)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc218)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc142)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc142)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc143)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc144)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc145)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc144)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc144)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc219)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc148)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc148)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc149)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc150)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc149)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc151)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc151)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc220)
      %17 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc152)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
      %19 = cir.const #cir.int<100> : !s32i loc(#loc154)
      %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc154)
      %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc155)
      %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc155)
      %23 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc156)
      %24 = cir.call @snprintf(%18, %20, %22, %23) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc152)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc157)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc158)
      %26 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc159)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc160)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc160)
      cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc159)
    } loc(#loc217)
    cir.return loc(#loc90)
  } loc(#loc195)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("/usr/include/stdio.h":385:1)
#loc8 = loc("/usr/include/stdio.h":387:62)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":52:29)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc12 = loc("/usr/include/stdlib.h":687:1)
#loc13 = loc("/usr/include/stdlib.h":687:32)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":29:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":56:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":31:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":31:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":32:12)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":32:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":33:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":46:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":33:8)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":33:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":34:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":39:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":41:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":36:24)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":36:31)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":36:34)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":36:45)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":36:46)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":36:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":37:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":37:37)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":37:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":37:21)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":37:27)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":37:28)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":37:34)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":37:33)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":38:19)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":38:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":38:14)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":38:15)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":43:24)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":43:31)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":43:35)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":43:46)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":43:47)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":43:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":44:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":44:37)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":44:13)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":44:21)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":44:27)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":44:28)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":44:34)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":44:33)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":45:19)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":45:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":45:14)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":45:15)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":47:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":55:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":48:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":48:24)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":49:16)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":49:24)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":49:29)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":49:33)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":49:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":49:34)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":50:25)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":50:16)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":50:20)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":50:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":52:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":52:18)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":52:24)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":52:35)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":53:19)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":53:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":54:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":54:14)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":93:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":96:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":95:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":95:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":64:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":91:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":66:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":66:12)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":67:12)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":67:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":68:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":81:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":68:8)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":68:33)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":69:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":74:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":76:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":71:24)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":71:31)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":71:35)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":71:46)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":71:47)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":71:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":72:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":72:37)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":72:13)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":72:21)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":72:27)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":72:28)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":72:34)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":72:33)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":73:19)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":73:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":73:14)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":73:15)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":78:24)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":78:31)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":78:35)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":78:46)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":78:47)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":78:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":79:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":79:37)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":79:13)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":79:21)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":79:27)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":79:28)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":79:34)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":79:33)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":80:19)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":80:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":80:14)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":80:15)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":82:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":90:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":83:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":83:24)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":84:16)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":84:24)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":84:29)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":84:33)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":84:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":84:34)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":85:25)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":85:16)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":85:20)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":85:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":87:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":87:18)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":87:24)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":87:29)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":87:35)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":88:19)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":88:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":89:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c":89:14)
#loc161 = loc(fused[#loc1, #loc2])
#loc162 = loc(fused[#loc3, #loc4])
#loc163 = loc(fused[#loc5, #loc6])
#loc164 = loc(fused[#loc7, #loc8])
#loc165 = loc(fused[#loc10, #loc11])
#loc166 = loc(fused[#loc12, #loc13])
#loc167 = loc(fused[#loc14, #loc15])
#loc168 = loc(fused[#loc16, #loc17])
#loc169 = loc(fused[#loc19, #loc18])
#loc170 = loc(fused[#loc20, #loc21])
#loc171 = loc(fused[#loc22, #loc23])
#loc172 = loc(fused[#loc24, #loc25, #loc26, #loc21])
#loc173 = loc(fused[#loc29, #loc30])
#loc174 = loc(fused[#loc28, #loc30])
#loc175 = loc(fused[#loc27, #loc31])
#loc176 = loc(fused[#loc32, #loc31])
#loc177 = loc(fused[#loc33, #loc34])
#loc178 = loc(fused[#loc35, #loc36])
#loc179 = loc(fused[#loc37, #loc34])
#loc180 = loc(fused[#loc42, #loc41])
#loc181 = loc(fused[#loc47, #loc48])
#loc182 = loc(fused[#loc46, #loc48])
#loc183 = loc(fused[#loc45, #loc49])
#loc184 = loc(fused[#loc50, #loc49])
#loc185 = loc(fused[#loc51, #loc52])
#loc186 = loc(fused[#loc53, #loc54])
#loc187 = loc(fused[#loc55, #loc52])
#loc188 = loc(fused[#loc60, #loc59])
#loc189 = loc(fused[#loc63, #loc64])
#loc190 = loc(fused[#loc65, #loc66])
#loc191 = loc(fused[#loc71, #loc72])
#loc192 = loc(fused[#loc76, #loc73])
#loc193 = loc(fused[#loc85, #loc86])
#loc194 = loc(fused[#loc87, #loc88])
#loc195 = loc(fused[#loc89, #loc90])
#loc196 = loc(fused[#loc91, #loc92])
#loc197 = loc(fused[#loc94, #loc93])
#loc198 = loc(fused[#loc95, #loc96])
#loc199 = loc(fused[#loc97, #loc98])
#loc200 = loc(fused[#loc99, #loc100, #loc101, #loc96])
#loc201 = loc(fused[#loc104, #loc105])
#loc202 = loc(fused[#loc103, #loc105])
#loc203 = loc(fused[#loc102, #loc106])
#loc204 = loc(fused[#loc107, #loc106])
#loc205 = loc(fused[#loc108, #loc109])
#loc206 = loc(fused[#loc110, #loc111])
#loc207 = loc(fused[#loc112, #loc109])
#loc208 = loc(fused[#loc117, #loc116])
#loc209 = loc(fused[#loc122, #loc123])
#loc210 = loc(fused[#loc121, #loc123])
#loc211 = loc(fused[#loc120, #loc124])
#loc212 = loc(fused[#loc125, #loc124])
#loc213 = loc(fused[#loc126, #loc127])
#loc214 = loc(fused[#loc128, #loc129])
#loc215 = loc(fused[#loc130, #loc127])
#loc216 = loc(fused[#loc135, #loc134])
#loc217 = loc(fused[#loc138, #loc139])
#loc218 = loc(fused[#loc140, #loc141])
#loc219 = loc(fused[#loc146, #loc147])
#loc220 = loc(fused[#loc151, #loc148])
