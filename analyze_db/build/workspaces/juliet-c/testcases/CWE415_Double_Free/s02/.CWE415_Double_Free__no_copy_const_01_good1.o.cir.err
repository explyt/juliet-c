clang: warning: argument unused during compilation: '-c' [-Wunused-command-line-argument]
warning: unknown warning option '-Wno-terminate' [-Wunknown-warning-option]
clang: /workspaces/clangir/clang/lib/CIR/CodeGen/CIRGenExprCXX.cpp:635: mlir::Value emitCXXNewAllocSize(CIRGenFunction &, const CXXNewExpr *, unsigned int, mlir::Value &, mlir::Value &): Assertion `numElementsWidth == sizeWidth && "Expected a size_t array size constant"' failed.
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /workspaces/clangir/install/bin/clang -S -Xclang -emit-cir-flat -std=c++11 -Wno-terminate -std=c++11 -I ../../../testcasesupport -c CWE415_Double_Free__no_copy_const_01_good1.cpp -o /workspaces/juliet-c/testcases/CWE415_Double_Free/s02/.CWE415_Double_Free__no_copy_const_01_good1.o.cir
1.	<eof> parser at end of file
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang     0x00005594ed3efb68 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 40
1  clang     0x00005594ed3ed73e llvm::sys::RunSignalHandlers() + 238
2  clang     0x00005594ed35e946
3  libc.so.6 0x00007f3fcc845330
4  libc.so.6 0x00007f3fcc89eb2c pthread_kill + 284
5  libc.so.6 0x00007f3fcc84527e gsignal + 30
6  libc.so.6 0x00007f3fcc8288ff abort + 223
7  libc.so.6 0x00007f3fcc82881b
8  libc.so.6 0x00007f3fcc83b517
9  clang     0x00005594ee8384fc clang::CIRGen::CIRGenFunction::emitCXXNewExpr(clang::CXXNewExpr const*) + 12028
10 clang     0x00005594ee83bd1f clang::CIRGen::CIRGenFunction::emitScalarExpr(clang::Expr const*) + 63
11 clang     0x00005594ee7fd7e2 clang::CIRGen::CIRGenFunction::emitAnyExpr(clang::Expr const*, clang::CIRGen::AggValueSlot, bool) + 66
12 clang     0x00005594ee7fd3d4 clang::CIRGen::CIRGenFunction::emitBinaryOperatorLValue(clang::BinaryOperator const*) + 420
13 clang     0x00005594ee7f7694 clang::CIRGen::CIRGenFunction::emitLValue(clang::Expr const*) + 308
14 clang     0x00005594ee7f74f1 clang::CIRGen::CIRGenFunction::emitIgnoredExpr(clang::Expr const*) + 33
15 clang     0x00005594ee86e518 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 120
16 clang     0x00005594ee86ebd4 clang::CIRGen::CIRGenFunction::emitSimpleStmt(clang::Stmt const*, bool) + 356
17 clang     0x00005594ee86e4b0 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 16
18 clang     0x00005594ee80bac1
19 clang     0x00005594ef95b8e7 cir::IfOp::build(mlir::OpBuilder&, mlir::OperationState&, mlir::Value, bool, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>) + 247
20 clang     0x00005594ee805a1a
21 clang     0x00005594ee805595 clang::CIRGen::CIRGenFunction::emitIfOnBoolExpr(clang::Expr const*, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>, mlir::Location, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>, std::optional<mlir::Location>) + 245
22 clang     0x00005594ee80547c clang::CIRGen::CIRGenFunction::emitIfOnBoolExpr(clang::Expr const*, clang::Stmt const*, clang::Stmt const*) + 396
23 clang     0x00005594ee872ada
24 clang     0x00005594ef95be86 cir::ScopeOp::build(mlir::OpBuilder&, mlir::OperationState&, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>) + 134
25 clang     0x00005594ee86efce clang::CIRGen::CIRGenFunction::emitIfStmt(clang::IfStmt const&) + 286
26 clang     0x00005594ee86e587 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 231
27 clang     0x00005594ee86ebd4 clang::CIRGen::CIRGenFunction::emitSimpleStmt(clang::Stmt const*, bool) + 356
28 clang     0x00005594ee86e4b0 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 16
29 clang     0x00005594ee85d8f4 clang::CIRGen::CIRGenFunction::emitConstructorBody(clang::CIRGen::FunctionArgList&) + 276
30 clang     0x00005594ee8586a2 clang::CIRGen::CIRGenFunction::generateCode(clang::GlobalDecl, cir::FuncOp, clang::CIRGen::CIRGenFunctionInfo const&) + 1138
31 clang     0x00005594ee8ab67a clang::CIRGen::CIRGenModule::codegenCXXStructor(clang::GlobalDecl) + 218
32 clang     0x00005594ee866041
33 clang     0x00005594ee7ab484 clang::CIRGen::CIRGenModule::emitGlobalDefinition(clang::GlobalDecl, mlir::Operation*) + 244
34 clang     0x00005594ee7b6b22 clang::CIRGen::CIRGenModule::emitGlobalDecl(clang::GlobalDecl&) + 338
35 clang     0x00005594ee7b6dfb clang::CIRGen::CIRGenModule::emitDeferred(unsigned int) + 315
36 clang     0x00005594ee7b6e25 clang::CIRGen::CIRGenModule::emitDeferred(unsigned int) + 357
37 clang     0x00005594ee7b6e25 clang::CIRGen::CIRGenModule::emitDeferred(unsigned int) + 357
38 clang     0x00005594ee7b6f20 clang::CIRGen::CIRGenModule::Release() + 32
39 clang     0x00005594ee698a8c
40 clang     0x00005594f079aa09 clang::ParseAST(clang::Sema&, bool, bool) + 617
41 clang     0x00005594edeb5d36 clang::FrontendAction::Execute() + 38
42 clang     0x00005594ede213ad clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 1149
43 clang     0x00005594edf9eedf clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 815
44 clang     0x00005594ec1c1a7a cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 6074
45 clang     0x00005594ec1be06d
46 clang     0x00005594edc68339
47 clang     0x00005594ed35e686 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 150
48 clang     0x00005594edc67892 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const + 242
49 clang     0x00005594edc23c27 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 455
50 clang     0x00005594edc23f17 clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const + 135
51 clang     0x00005594edc43928 clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 904
52 clang     0x00005594ec1bd6ba clang_main(int, char**, llvm::ToolContext const&) + 6090
53 clang     0x00005594ec1cd147 main + 87
54 libc.so.6 0x00007f3fcc82a1ca
55 libc.so.6 0x00007f3fcc82a28b __libc_start_main + 139
56 clang     0x00005594ec1bbaa5 _start + 37
clang: error: clang frontend command failed with exit code 134 (use -v to see invocation)
clang version 21.0.0git (git@github.com:llvm/clangir.git 4e7a2236d38507e994cbe5b79c888cf86427e7db)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /workspaces/clangir/install/bin
Build config: +assertions
clang: error: unable to execute command: Aborted (core dumped)
clang: note: diagnostic msg: Error generating preprocessed source(s).
