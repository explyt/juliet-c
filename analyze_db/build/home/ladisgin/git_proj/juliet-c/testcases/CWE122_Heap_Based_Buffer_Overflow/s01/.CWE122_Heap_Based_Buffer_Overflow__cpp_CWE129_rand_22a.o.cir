!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":37:12)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":61:12)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":75:12)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global external dsolocal @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_229badGlobalE = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc76)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc77)
  cir.func private @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_227badSinkEi(!s32i) loc(#loc78)
  cir.func @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_223badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc80)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc12)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc14)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc14)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc14)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc14)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc14)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc14)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc14)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc14)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc14)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc14)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc14)
    cir.br ^bb3(%18 : !u32i) loc(#loc14)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc14)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc14)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc14)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc14)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc14)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc14)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc14)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc14)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc14)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc14)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc14)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc14)
    cir.br ^bb3(%34 : !u32i) loc(#loc14)
  ^bb3(%35: !u32i loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":37:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc14)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc14)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %38 = cir.get_global @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_229badGlobalE : !cir.ptr<!s32i> loc(#loc76)
    cir.store %37, %38 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
    cir.call @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_227badSinkEi(%39) : (!s32i) -> () loc(#loc19)
    cir.return loc(#loc8)
  } loc(#loc79)
  cir.global external dsolocal @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_2214goodB2G1GlobalE = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc84)
  cir.global external dsolocal @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_2214goodB2G2GlobalE = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc85)
  cir.global external dsolocal @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_2214goodG2B1GlobalE = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc86)
  cir.func private @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_2212goodB2G1SinkEi(!s32i) loc(#loc87)
  cir.func internal private @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22L8goodB2G1Ev() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc89)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc33)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc35)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc35)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc35)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc35)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc35)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc35)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc35)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc35)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc35)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc35)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc35)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc35)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc35)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc35)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc35)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc35)
    cir.br ^bb3(%18 : !u32i) loc(#loc35)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc35)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc35)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc35)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc35)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc35)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc35)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc35)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc35)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc35)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc35)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc35)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc35)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc35)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc35)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc35)
    cir.br ^bb3(%34 : !u32i) loc(#loc35)
  ^bb3(%35: !u32i loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":61:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc35)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc35)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc91)
    %37 = cir.const #cir.int<0> : !s32i loc(#loc37)
    %38 = cir.get_global @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_2214goodB2G1GlobalE : !cir.ptr<!s32i> loc(#loc84)
    cir.store %37, %38 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    cir.call @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_2212goodB2G1SinkEi(%39) : (!s32i) -> () loc(#loc40)
    cir.return loc(#loc29)
  } loc(#loc88)
  cir.func private @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_2212goodB2G2SinkEi(!s32i) loc(#loc93)
  cir.func internal private @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22L8goodB2G2Ev() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc95)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc48)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc50)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc50)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc50)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc50)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc50)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc50)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc50)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc50)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc50)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc50)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc50)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc50)
    cir.br ^bb3(%18 : !u32i) loc(#loc50)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc50)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc50)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc50)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc50)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc50)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc50)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc50)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc50)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc50)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc50)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc50)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc50)
    cir.br ^bb3(%34 : !u32i) loc(#loc50)
  ^bb3(%35: !u32i loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":75:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc50)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc50)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %38 = cir.get_global @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_2214goodB2G2GlobalE : !cir.ptr<!s32i> loc(#loc85)
    cir.store %37, %38 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    cir.call @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_2212goodB2G2SinkEi(%39) : (!s32i) -> () loc(#loc55)
    cir.return loc(#loc44)
  } loc(#loc94)
  cir.func private @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_2212goodG2B1SinkEi(!s32i) loc(#loc99)
  cir.func internal private @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22L8goodG2B1Ev() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc101)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc63)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc102)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc65)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc67)
    %5 = cir.get_global @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_2214goodG2B1GlobalE : !cir.ptr<!s32i> loc(#loc86)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    cir.call @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_2212goodG2B1SinkEi(%6) : (!s32i) -> () loc(#loc70)
    cir.return loc(#loc59)
  } loc(#loc100)
  cir.func @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_224goodEv() extra(#fn_attr1) {
    cir.call @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22L8goodB2G1Ev() : () -> () loc(#loc73)
    cir.call @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22L8goodB2G2Ev() : () -> () loc(#loc74)
    cir.call @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22L8goodG2B1Ev() : () -> () loc(#loc75)
    cir.return loc(#loc72)
  } loc(#loc105)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":27:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":27:17)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":29:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":29:22)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":31:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":40:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":33:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":33:9)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":35:13)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":35:12)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":35:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":37:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":38:17)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":38:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":39:13)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":39:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":48:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":48:22)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":49:1)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":49:22)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":50:1)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":50:22)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":53:1)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":53:27)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":55:1)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":64:1)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":57:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":57:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":59:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":59:12)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":59:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":61:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":62:22)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":62:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":63:18)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":63:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":67:1)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":67:27)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":69:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":78:1)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":71:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":71:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":73:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":73:12)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":73:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":75:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":76:22)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":76:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":77:18)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":77:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":81:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":81:27)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":83:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":93:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":85:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":85:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":87:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":87:12)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":87:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":90:12)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":90:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":91:22)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":91:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":92:18)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":92:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":95:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":100:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":97:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":98:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_22a.cpp":99:5)
#loc76 = loc(fused[#loc1, #loc2])
#loc77 = loc(fused[#loc3, #loc4])
#loc78 = loc(fused[#loc5, #loc6])
#loc79 = loc(fused[#loc7, #loc8])
#loc80 = loc(fused[#loc9, #loc10])
#loc81 = loc(fused[#loc13, #loc11])
#loc82 = loc(fused[#loc15, #loc14])
#loc83 = loc(fused[#loc17, #loc16])
#loc84 = loc(fused[#loc20, #loc21])
#loc85 = loc(fused[#loc22, #loc23])
#loc86 = loc(fused[#loc24, #loc25])
#loc87 = loc(fused[#loc26, #loc27])
#loc88 = loc(fused[#loc28, #loc29])
#loc89 = loc(fused[#loc30, #loc31])
#loc90 = loc(fused[#loc34, #loc32])
#loc91 = loc(fused[#loc36, #loc35])
#loc92 = loc(fused[#loc38, #loc37])
#loc93 = loc(fused[#loc41, #loc42])
#loc94 = loc(fused[#loc43, #loc44])
#loc95 = loc(fused[#loc45, #loc46])
#loc96 = loc(fused[#loc49, #loc47])
#loc97 = loc(fused[#loc51, #loc50])
#loc98 = loc(fused[#loc53, #loc52])
#loc99 = loc(fused[#loc56, #loc57])
#loc100 = loc(fused[#loc58, #loc59])
#loc101 = loc(fused[#loc60, #loc61])
#loc102 = loc(fused[#loc64, #loc62])
#loc103 = loc(fused[#loc66, #loc65])
#loc104 = loc(fused[#loc68, #loc67])
#loc105 = loc(fused[#loc71, #loc72])
