!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc55 = loc("CWE401_Memory_Leak__strdup_char_08.c":176:10)
#loc56 = loc("CWE401_Memory_Leak__strdup_char_08.c":176:14)
#loc57 = loc("CWE401_Memory_Leak__strdup_char_08.c":176:20)
#loc58 = loc("CWE401_Memory_Leak__strdup_char_08.c":176:32)
#loc215 = loc(fused[#loc55, #loc56])
#loc216 = loc(fused[#loc57, #loc58])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s02/CWE401_Memory_Leak__strdup_char_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const.goodB2G2.myString = #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc191)
  cir.global "private" constant cir_private @__const.goodB2G1.myString = #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc192)
  cir.global "private" constant cir_private @__const.CWE401_Memory_Leak__strdup_char_08_bad.myString = #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc193)
  cir.func private @strdup(!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc194)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc195)
  cir.func no_proto @CWE401_Memory_Leak__strdup_char_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc193)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc197)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc15)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc198)
    cir.br ^bb1 loc(#loc199)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc200)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc19)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %5 ^bb2, ^bb5 loc(#loc201)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc202)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @__const.CWE401_Memory_Leak__strdup_char_08_bad.myString : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc193)
    cir.copy %6 to %0 : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc193)
    %7 = cir.get_global @strdup : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>)>> loc(#loc24)
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc25)
    %9 = cir.call @strdup(%8) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc24)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc203)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc29)
    cir.br ^bb4 loc(#loc23)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc18)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc18)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc204)
  ^bb7:  // pred: ^bb6
    %11 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc205)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc32)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc32)
    cir.brcond %13 ^bb8, ^bb9 loc(#loc206)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc31)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc31)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc12)
  } loc(#loc196)
  cir.func no_proto @CWE401_Memory_Leak__strdup_char_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc209)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc210)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc211)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    cir.return loc(#loc36)
  } loc(#loc207)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc212)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc213)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc52)
  cir.func @main(%arg0: !s32i loc(fused[#loc55, #loc56]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc57, #loc58])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc215)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc216)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc54)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc59)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc59)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc60)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc61)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc61)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc62)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc49)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %8 = cir.get_global @CWE401_Memory_Leak__strdup_char_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc217)
    cir.call @CWE401_Memory_Leak__strdup_char_08_good() : () -> () loc(#loc64)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc50)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc51)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %13 = cir.get_global @CWE401_Memory_Leak__strdup_char_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call @CWE401_Memory_Leak__strdup_char_08_bad() : () -> () loc(#loc68)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc52)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc71)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc219)
    cir.return %17 : !s32i loc(#loc219)
  } loc(#loc214)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc74)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc75)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc221)
    cir.return %2 : !s32i loc(#loc221)
  } loc(#loc220)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc77)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc222)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc192)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc224)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc84)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc225)
    cir.br ^bb1 loc(#loc226)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc227)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc88)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc88)
    cir.brcond %5 ^bb2, ^bb5 loc(#loc228)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc229)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @__const.goodB2G1.myString : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc192)
    cir.copy %6 to %0 : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc192)
    %7 = cir.get_global @strdup : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>)>> loc(#loc93)
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc94)
    %9 = cir.call @strdup(%8) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc93)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc230)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc97)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    cir.br ^bb4 loc(#loc92)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc87)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc87)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc231)
  ^bb7:  // pred: ^bb6
    %11 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc232)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc101)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc101)
    cir.brcond %13 ^bb8, ^bb9 loc(#loc233)
  ^bb8:  // pred: ^bb7
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc77)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc106)
    cir.br ^bb10 loc(#loc104)
  ^bb9:  // pred: ^bb7
    %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc107)
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc108)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc108)
    cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc107)
    cir.br ^bb10 loc(#loc100)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc100)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc81)
  } loc(#loc223)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc110)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc111)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc235)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc235)
    cir.return %2 : !s32i loc(#loc235)
  } loc(#loc234)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc191)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc237)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc117)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc238)
    cir.br ^bb1 loc(#loc239)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc240)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc121)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc121)
    cir.brcond %5 ^bb2, ^bb5 loc(#loc241)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc242)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @__const.goodB2G2.myString : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc191)
    cir.copy %6 to %0 : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc191)
    %7 = cir.get_global @strdup : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>)>> loc(#loc126)
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc127)
    %9 = cir.call @strdup(%8) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc126)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc243)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc130)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc131)
    cir.br ^bb4 loc(#loc125)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc120)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc120)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc244)
  ^bb7:  // pred: ^bb6
    %11 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc245)
    %12 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc134)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc134)
    cir.brcond %13 ^bb8, ^bb9 loc(#loc246)
  ^bb8:  // pred: ^bb7
    %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc137)
    %15 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc138)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc138)
    cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc137)
    cir.br ^bb9 loc(#loc133)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc133)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc114)
  } loc(#loc236)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc247)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"a string\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc141)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc249)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc146)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc250)
    cir.br ^bb1 loc(#loc251)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc252)
    %3 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc150)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc150)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc253)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc155)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc155)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc156)
    cir.br ^bb4 loc(#loc153)
  ^bb3:  // pred: ^bb1
    %7 = cir.const #cir.int<100> : !s32i loc(#loc157)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc157)
    %9 = cir.const #cir.int<1> : !u64i loc(#loc157)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc157)
    %11 = cir.alloca !u8i, !cir.ptr<!u8i>, %10 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc157)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc157)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc157)
    cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc254)
    %14 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc159)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc160)
    %16 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc141)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc141)
    %18 = cir.call @strcpy(%15, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc159)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc161)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc162)
    cir.br ^bb4 loc(#loc149)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc149)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc255)
  ^bb6:  // pred: ^bb5
    %20 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc256)
    %21 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc165)
    %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc165)
    cir.brcond %22 ^bb7, ^bb8 loc(#loc257)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc164)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc164)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc143)
  } loc(#loc248)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc259)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc172)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc260)
    cir.br ^bb1 loc(#loc261)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc262)
    %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc176)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc176)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc263)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<100> : !s32i loc(#loc179)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc179)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc179)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc179)
    %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc179)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc179)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc179)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc264)
    %12 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc181)
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc182)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc183)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc183)
    %16 = cir.call @strcpy(%13, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc181)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc184)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc185)
    cir.br ^bb3 loc(#loc175)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc175)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc265)
  ^bb5:  // pred: ^bb4
    %18 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc266)
    %19 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc188)
    %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc188)
    cir.brcond %20 ^bb6, ^bb7 loc(#loc267)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc187)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc187)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc169)
  } loc(#loc258)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s02/CWE401_Memory_Leak__strdup_char_08.c":0:0)
#loc1 = loc("CWE401_Memory_Leak__strdup_char_08.c":98:13)
#loc2 = loc("CWE401_Memory_Leak__strdup_char_08.c":98:31)
#loc3 = loc("CWE401_Memory_Leak__strdup_char_08.c":71:13)
#loc4 = loc("CWE401_Memory_Leak__strdup_char_08.c":71:31)
#loc5 = loc("CWE401_Memory_Leak__strdup_char_08.c":44:13)
#loc6 = loc("CWE401_Memory_Leak__strdup_char_08.c":44:31)
#loc7 = loc("/usr/include/string.h":187:1)
#loc8 = loc("/usr/include/string.h":188:35)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE401_Memory_Leak__strdup_char_08.c":37:1)
#loc12 = loc("CWE401_Memory_Leak__strdup_char_08.c":57:1)
#loc13 = loc("CWE401_Memory_Leak__strdup_char_08.c":39:5)
#loc14 = loc("CWE401_Memory_Leak__strdup_char_08.c":39:12)
#loc15 = loc("CWE401_Memory_Leak__strdup_char_08.c":40:12)
#loc16 = loc("CWE401_Memory_Leak__strdup_char_08.c":40:5)
#loc17 = loc("CWE401_Memory_Leak__strdup_char_08.c":41:5)
#loc18 = loc("CWE401_Memory_Leak__strdup_char_08.c":50:5)
#loc19 = loc("CWE401_Memory_Leak__strdup_char_08.c":41:8)
#loc20 = loc("CWE401_Memory_Leak__strdup_char_08.c":41:26)
#loc21 = loc("CWE401_Memory_Leak__strdup_char_08.c":42:5)
#loc22 = loc("CWE401_Memory_Leak__strdup_char_08.c":43:9)
#loc23 = loc("CWE401_Memory_Leak__strdup_char_08.c":49:9)
#loc24 = loc("CWE401_Memory_Leak__strdup_char_08.c":46:20)
#loc25 = loc("CWE401_Memory_Leak__strdup_char_08.c":46:27)
#loc26 = loc("CWE401_Memory_Leak__strdup_char_08.c":46:13)
#loc27 = loc("CWE401_Memory_Leak__strdup_char_08.c":46:35)
#loc28 = loc("CWE401_Memory_Leak__strdup_char_08.c":48:23)
#loc29 = loc("CWE401_Memory_Leak__strdup_char_08.c":48:13)
#loc30 = loc("CWE401_Memory_Leak__strdup_char_08.c":51:5)
#loc31 = loc("CWE401_Memory_Leak__strdup_char_08.c":56:5)
#loc32 = loc("CWE401_Memory_Leak__strdup_char_08.c":51:8)
#loc33 = loc("CWE401_Memory_Leak__strdup_char_08.c":51:26)
#loc34 = loc("CWE401_Memory_Leak__strdup_char_08.c":52:5)
#loc35 = loc("CWE401_Memory_Leak__strdup_char_08.c":159:1)
#loc36 = loc("CWE401_Memory_Leak__strdup_char_08.c":165:1)
#loc37 = loc("CWE401_Memory_Leak__strdup_char_08.c":161:5)
#loc38 = loc("CWE401_Memory_Leak__strdup_char_08.c":161:14)
#loc39 = loc("CWE401_Memory_Leak__strdup_char_08.c":162:5)
#loc40 = loc("CWE401_Memory_Leak__strdup_char_08.c":162:14)
#loc41 = loc("CWE401_Memory_Leak__strdup_char_08.c":163:5)
#loc42 = loc("CWE401_Memory_Leak__strdup_char_08.c":163:14)
#loc43 = loc("CWE401_Memory_Leak__strdup_char_08.c":164:5)
#loc44 = loc("CWE401_Memory_Leak__strdup_char_08.c":164:14)
#loc45 = loc("/usr/include/stdlib.h":575:1)
#loc46 = loc("/usr/include/stdlib.h":575:41)
#loc47 = loc("/usr/include/time.h":76:1)
#loc48 = loc("/usr/include/time.h":76:38)
#loc49 = loc("CWE401_Memory_Leak__strdup_char_08.c":181:15)
#loc50 = loc("CWE401_Memory_Leak__strdup_char_08.c":183:15)
#loc51 = loc("CWE401_Memory_Leak__strdup_char_08.c":186:15)
#loc52 = loc("CWE401_Memory_Leak__strdup_char_08.c":188:15)
#loc53 = loc("CWE401_Memory_Leak__strdup_char_08.c":176:1)
#loc54 = loc("CWE401_Memory_Leak__strdup_char_08.c":191:1)
#loc59 = loc("CWE401_Memory_Leak__strdup_char_08.c":177:1)
#loc60 = loc("CWE401_Memory_Leak__strdup_char_08.c":179:27)
#loc61 = loc("CWE401_Memory_Leak__strdup_char_08.c":179:22)
#loc62 = loc("CWE401_Memory_Leak__strdup_char_08.c":179:5)
#loc63 = loc("CWE401_Memory_Leak__strdup_char_08.c":181:5)
#loc64 = loc("CWE401_Memory_Leak__strdup_char_08.c":182:5)
#loc65 = loc("CWE401_Memory_Leak__strdup_char_08.c":182:45)
#loc66 = loc("CWE401_Memory_Leak__strdup_char_08.c":183:5)
#loc67 = loc("CWE401_Memory_Leak__strdup_char_08.c":186:5)
#loc68 = loc("CWE401_Memory_Leak__strdup_char_08.c":187:5)
#loc69 = loc("CWE401_Memory_Leak__strdup_char_08.c":187:44)
#loc70 = loc("CWE401_Memory_Leak__strdup_char_08.c":188:5)
#loc71 = loc("CWE401_Memory_Leak__strdup_char_08.c":190:12)
#loc72 = loc("CWE401_Memory_Leak__strdup_char_08.c":190:5)
#loc73 = loc("CWE401_Memory_Leak__strdup_char_08.c":25:1)
#loc74 = loc("CWE401_Memory_Leak__strdup_char_08.c":28:1)
#loc75 = loc("CWE401_Memory_Leak__strdup_char_08.c":27:12)
#loc76 = loc("CWE401_Memory_Leak__strdup_char_08.c":27:5)
#loc77 = loc("CWE401_Memory_Leak__strdup_char_08.c":81:19)
#loc78 = loc("/usr/include/stdlib.h":687:1)
#loc79 = loc("/usr/include/stdlib.h":687:32)
#loc80 = loc("CWE401_Memory_Leak__strdup_char_08.c":64:1)
#loc81 = loc("CWE401_Memory_Leak__strdup_char_08.c":88:1)
#loc82 = loc("CWE401_Memory_Leak__strdup_char_08.c":66:5)
#loc83 = loc("CWE401_Memory_Leak__strdup_char_08.c":66:12)
#loc84 = loc("CWE401_Memory_Leak__strdup_char_08.c":67:12)
#loc85 = loc("CWE401_Memory_Leak__strdup_char_08.c":67:5)
#loc86 = loc("CWE401_Memory_Leak__strdup_char_08.c":68:5)
#loc87 = loc("CWE401_Memory_Leak__strdup_char_08.c":77:5)
#loc88 = loc("CWE401_Memory_Leak__strdup_char_08.c":68:8)
#loc89 = loc("CWE401_Memory_Leak__strdup_char_08.c":68:26)
#loc90 = loc("CWE401_Memory_Leak__strdup_char_08.c":69:5)
#loc91 = loc("CWE401_Memory_Leak__strdup_char_08.c":70:9)
#loc92 = loc("CWE401_Memory_Leak__strdup_char_08.c":76:9)
#loc93 = loc("CWE401_Memory_Leak__strdup_char_08.c":73:20)
#loc94 = loc("CWE401_Memory_Leak__strdup_char_08.c":73:27)
#loc95 = loc("CWE401_Memory_Leak__strdup_char_08.c":73:13)
#loc96 = loc("CWE401_Memory_Leak__strdup_char_08.c":73:35)
#loc97 = loc("CWE401_Memory_Leak__strdup_char_08.c":75:23)
#loc98 = loc("CWE401_Memory_Leak__strdup_char_08.c":75:13)
#loc99 = loc("CWE401_Memory_Leak__strdup_char_08.c":78:5)
#loc100 = loc("CWE401_Memory_Leak__strdup_char_08.c":87:5)
#loc101 = loc("CWE401_Memory_Leak__strdup_char_08.c":78:8)
#loc102 = loc("CWE401_Memory_Leak__strdup_char_08.c":78:27)
#loc103 = loc("CWE401_Memory_Leak__strdup_char_08.c":79:5)
#loc104 = loc("CWE401_Memory_Leak__strdup_char_08.c":82:5)
#loc105 = loc("CWE401_Memory_Leak__strdup_char_08.c":84:5)
#loc106 = loc("CWE401_Memory_Leak__strdup_char_08.c":81:9)
#loc107 = loc("CWE401_Memory_Leak__strdup_char_08.c":86:9)
#loc108 = loc("CWE401_Memory_Leak__strdup_char_08.c":86:14)
#loc109 = loc("CWE401_Memory_Leak__strdup_char_08.c":30:1)
#loc110 = loc("CWE401_Memory_Leak__strdup_char_08.c":33:1)
#loc111 = loc("CWE401_Memory_Leak__strdup_char_08.c":32:12)
#loc112 = loc("CWE401_Memory_Leak__strdup_char_08.c":32:5)
#loc113 = loc("CWE401_Memory_Leak__strdup_char_08.c":91:1)
#loc114 = loc("CWE401_Memory_Leak__strdup_char_08.c":110:1)
#loc115 = loc("CWE401_Memory_Leak__strdup_char_08.c":93:5)
#loc116 = loc("CWE401_Memory_Leak__strdup_char_08.c":93:12)
#loc117 = loc("CWE401_Memory_Leak__strdup_char_08.c":94:12)
#loc118 = loc("CWE401_Memory_Leak__strdup_char_08.c":94:5)
#loc119 = loc("CWE401_Memory_Leak__strdup_char_08.c":95:5)
#loc120 = loc("CWE401_Memory_Leak__strdup_char_08.c":104:5)
#loc121 = loc("CWE401_Memory_Leak__strdup_char_08.c":95:8)
#loc122 = loc("CWE401_Memory_Leak__strdup_char_08.c":95:26)
#loc123 = loc("CWE401_Memory_Leak__strdup_char_08.c":96:5)
#loc124 = loc("CWE401_Memory_Leak__strdup_char_08.c":97:9)
#loc125 = loc("CWE401_Memory_Leak__strdup_char_08.c":103:9)
#loc126 = loc("CWE401_Memory_Leak__strdup_char_08.c":100:20)
#loc127 = loc("CWE401_Memory_Leak__strdup_char_08.c":100:27)
#loc128 = loc("CWE401_Memory_Leak__strdup_char_08.c":100:13)
#loc129 = loc("CWE401_Memory_Leak__strdup_char_08.c":100:35)
#loc130 = loc("CWE401_Memory_Leak__strdup_char_08.c":102:23)
#loc131 = loc("CWE401_Memory_Leak__strdup_char_08.c":102:13)
#loc132 = loc("CWE401_Memory_Leak__strdup_char_08.c":105:5)
#loc133 = loc("CWE401_Memory_Leak__strdup_char_08.c":109:5)
#loc134 = loc("CWE401_Memory_Leak__strdup_char_08.c":105:8)
#loc135 = loc("CWE401_Memory_Leak__strdup_char_08.c":105:26)
#loc136 = loc("CWE401_Memory_Leak__strdup_char_08.c":106:5)
#loc137 = loc("CWE401_Memory_Leak__strdup_char_08.c":108:9)
#loc138 = loc("CWE401_Memory_Leak__strdup_char_08.c":108:14)
#loc139 = loc("/usr/include/string.h":141:1)
#loc140 = loc("/usr/include/string.h":142:14)
#loc141 = loc("CWE401_Memory_Leak__strdup_char_08.c":127:22)
#loc142 = loc("CWE401_Memory_Leak__strdup_char_08.c":113:1)
#loc143 = loc("CWE401_Memory_Leak__strdup_char_08.c":136:1)
#loc144 = loc("CWE401_Memory_Leak__strdup_char_08.c":115:5)
#loc145 = loc("CWE401_Memory_Leak__strdup_char_08.c":115:12)
#loc146 = loc("CWE401_Memory_Leak__strdup_char_08.c":116:12)
#loc147 = loc("CWE401_Memory_Leak__strdup_char_08.c":116:5)
#loc148 = loc("CWE401_Memory_Leak__strdup_char_08.c":117:5)
#loc149 = loc("CWE401_Memory_Leak__strdup_char_08.c":129:5)
#loc150 = loc("CWE401_Memory_Leak__strdup_char_08.c":117:8)
#loc151 = loc("CWE401_Memory_Leak__strdup_char_08.c":117:27)
#loc152 = loc("CWE401_Memory_Leak__strdup_char_08.c":118:5)
#loc153 = loc("CWE401_Memory_Leak__strdup_char_08.c":121:5)
#loc154 = loc("CWE401_Memory_Leak__strdup_char_08.c":123:5)
#loc155 = loc("CWE401_Memory_Leak__strdup_char_08.c":120:19)
#loc156 = loc("CWE401_Memory_Leak__strdup_char_08.c":120:9)
#loc157 = loc("CWE401_Memory_Leak__strdup_char_08.c":125:24)
#loc158 = loc("CWE401_Memory_Leak__strdup_char_08.c":125:9)
#loc159 = loc("CWE401_Memory_Leak__strdup_char_08.c":127:9)
#loc160 = loc("CWE401_Memory_Leak__strdup_char_08.c":127:16)
#loc161 = loc("CWE401_Memory_Leak__strdup_char_08.c":128:19)
#loc162 = loc("CWE401_Memory_Leak__strdup_char_08.c":128:9)
#loc163 = loc("CWE401_Memory_Leak__strdup_char_08.c":130:5)
#loc164 = loc("CWE401_Memory_Leak__strdup_char_08.c":135:5)
#loc165 = loc("CWE401_Memory_Leak__strdup_char_08.c":130:8)
#loc166 = loc("CWE401_Memory_Leak__strdup_char_08.c":130:26)
#loc167 = loc("CWE401_Memory_Leak__strdup_char_08.c":131:5)
#loc168 = loc("CWE401_Memory_Leak__strdup_char_08.c":139:1)
#loc169 = loc("CWE401_Memory_Leak__strdup_char_08.c":157:1)
#loc170 = loc("CWE401_Memory_Leak__strdup_char_08.c":141:5)
#loc171 = loc("CWE401_Memory_Leak__strdup_char_08.c":141:12)
#loc172 = loc("CWE401_Memory_Leak__strdup_char_08.c":142:12)
#loc173 = loc("CWE401_Memory_Leak__strdup_char_08.c":142:5)
#loc174 = loc("CWE401_Memory_Leak__strdup_char_08.c":143:5)
#loc175 = loc("CWE401_Memory_Leak__strdup_char_08.c":150:5)
#loc176 = loc("CWE401_Memory_Leak__strdup_char_08.c":143:8)
#loc177 = loc("CWE401_Memory_Leak__strdup_char_08.c":143:26)
#loc178 = loc("CWE401_Memory_Leak__strdup_char_08.c":144:5)
#loc179 = loc("CWE401_Memory_Leak__strdup_char_08.c":146:24)
#loc180 = loc("CWE401_Memory_Leak__strdup_char_08.c":146:9)
#loc181 = loc("CWE401_Memory_Leak__strdup_char_08.c":148:9)
#loc182 = loc("CWE401_Memory_Leak__strdup_char_08.c":148:16)
#loc183 = loc("CWE401_Memory_Leak__strdup_char_08.c":148:22)
#loc184 = loc("CWE401_Memory_Leak__strdup_char_08.c":149:19)
#loc185 = loc("CWE401_Memory_Leak__strdup_char_08.c":149:9)
#loc186 = loc("CWE401_Memory_Leak__strdup_char_08.c":151:5)
#loc187 = loc("CWE401_Memory_Leak__strdup_char_08.c":156:5)
#loc188 = loc("CWE401_Memory_Leak__strdup_char_08.c":151:8)
#loc189 = loc("CWE401_Memory_Leak__strdup_char_08.c":151:26)
#loc190 = loc("CWE401_Memory_Leak__strdup_char_08.c":152:5)
#loc191 = loc(fused[#loc1, #loc2])
#loc192 = loc(fused[#loc3, #loc4])
#loc193 = loc(fused[#loc5, #loc6])
#loc194 = loc(fused[#loc7, #loc8])
#loc195 = loc(fused[#loc9, #loc10])
#loc196 = loc(fused[#loc11, #loc12])
#loc197 = loc(fused[#loc13, #loc14])
#loc198 = loc(fused[#loc16, #loc15])
#loc199 = loc(fused[#loc17, #loc18])
#loc200 = loc(fused[#loc19, #loc20])
#loc201 = loc(fused[#loc21, #loc18])
#loc202 = loc(fused[#loc22, #loc23])
#loc203 = loc(fused[#loc26, #loc27])
#loc204 = loc(fused[#loc30, #loc31])
#loc205 = loc(fused[#loc32, #loc33])
#loc206 = loc(fused[#loc34, #loc31])
#loc207 = loc(fused[#loc35, #loc36])
#loc208 = loc(fused[#loc37, #loc38])
#loc209 = loc(fused[#loc39, #loc40])
#loc210 = loc(fused[#loc41, #loc42])
#loc211 = loc(fused[#loc43, #loc44])
#loc212 = loc(fused[#loc45, #loc46])
#loc213 = loc(fused[#loc47, #loc48])
#loc214 = loc(fused[#loc53, #loc54])
#loc217 = loc(fused[#loc64, #loc65])
#loc218 = loc(fused[#loc68, #loc69])
#loc219 = loc(fused[#loc72, #loc71])
#loc220 = loc(fused[#loc73, #loc74])
#loc221 = loc(fused[#loc76, #loc75])
#loc222 = loc(fused[#loc78, #loc79])
#loc223 = loc(fused[#loc80, #loc81])
#loc224 = loc(fused[#loc82, #loc83])
#loc225 = loc(fused[#loc85, #loc84])
#loc226 = loc(fused[#loc86, #loc87])
#loc227 = loc(fused[#loc88, #loc89])
#loc228 = loc(fused[#loc90, #loc87])
#loc229 = loc(fused[#loc91, #loc92])
#loc230 = loc(fused[#loc95, #loc96])
#loc231 = loc(fused[#loc99, #loc100])
#loc232 = loc(fused[#loc101, #loc102])
#loc233 = loc(fused[#loc103, #loc104, #loc105, #loc100])
#loc234 = loc(fused[#loc109, #loc110])
#loc235 = loc(fused[#loc112, #loc111])
#loc236 = loc(fused[#loc113, #loc114])
#loc237 = loc(fused[#loc115, #loc116])
#loc238 = loc(fused[#loc118, #loc117])
#loc239 = loc(fused[#loc119, #loc120])
#loc240 = loc(fused[#loc121, #loc122])
#loc241 = loc(fused[#loc123, #loc120])
#loc242 = loc(fused[#loc124, #loc125])
#loc243 = loc(fused[#loc128, #loc129])
#loc244 = loc(fused[#loc132, #loc133])
#loc245 = loc(fused[#loc134, #loc135])
#loc246 = loc(fused[#loc136, #loc133])
#loc247 = loc(fused[#loc139, #loc140])
#loc248 = loc(fused[#loc142, #loc143])
#loc249 = loc(fused[#loc144, #loc145])
#loc250 = loc(fused[#loc147, #loc146])
#loc251 = loc(fused[#loc148, #loc149])
#loc252 = loc(fused[#loc150, #loc151])
#loc253 = loc(fused[#loc152, #loc153, #loc154, #loc149])
#loc254 = loc(fused[#loc158, #loc157])
#loc255 = loc(fused[#loc163, #loc164])
#loc256 = loc(fused[#loc165, #loc166])
#loc257 = loc(fused[#loc167, #loc164])
#loc258 = loc(fused[#loc168, #loc169])
#loc259 = loc(fused[#loc170, #loc171])
#loc260 = loc(fused[#loc173, #loc172])
#loc261 = loc(fused[#loc174, #loc175])
#loc262 = loc(fused[#loc176, #loc177])
#loc263 = loc(fused[#loc178, #loc175])
#loc264 = loc(fused[#loc180, #loc179])
#loc265 = loc(fused[#loc186, #loc187])
#loc266 = loc(fused[#loc188, #loc189])
#loc267 = loc(fused[#loc190, #loc187])
