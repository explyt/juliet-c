!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":24:52)
#loc6 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":24:59)
#loc24 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":42:56)
#loc25 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":42:63)
#loc46 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":56:56)
#loc47 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":56:63)
#loc72 = loc(fused[#loc5, #loc6])
#loc79 = loc(fused[#loc24, #loc25])
#loc87 = loc(fused[#loc46, #loc47])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_64b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc70)
  cir.func @CWE369_Divide_by_Zero__float_rand_64b_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc72)
    %1 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc73)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc74)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc11)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc8)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.float> loc(#loc8)
    cir.store %4, %1 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc73)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc12)
    %6 = cir.load %5 : !cir.ptr<!cir.float>, !cir.float loc(#loc13)
    cir.store %6, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc74)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc76)
      %8 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc18)
      %9 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc19)
      %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc19)
      %11 = cir.binop(div, %8, %10) : !cir.double loc(#loc77)
      %12 = cir.cast(float_to_int, %11 : !cir.double), !s32i loc(#loc77)
      cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc76)
      %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc20)
      cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc21)
    } loc(#loc75)
    cir.return loc(#loc4)
  } loc(#loc71)
  cir.func @CWE369_Divide_by_Zero__float_rand_64b_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc24, #loc25])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc79)
    %1 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc80)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc81)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc30)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc27)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.float> loc(#loc27)
    cir.store %4, %1 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc80)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc31)
    %6 = cir.load %5 : !cir.ptr<!cir.float>, !cir.float loc(#loc32)
    cir.store %6, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc81)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc83)
      %8 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc37)
      %9 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc38)
      %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc38)
      %11 = cir.binop(div, %8, %10) : !cir.double loc(#loc84)
      %12 = cir.cast(float_to_int, %11 : !cir.double), !s32i loc(#loc84)
      cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc83)
      %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc39)
      cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc40)
    } loc(#loc82)
    cir.return loc(#loc23)
  } loc(#loc78)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc85)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc43)
  cir.func @CWE369_Divide_by_Zero__float_rand_64b_goodB2GSink(%arg0: !cir.ptr<!void> loc(fused[#loc46, #loc47])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc87)
    %1 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc88)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc89)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc52)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc49)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.float> loc(#loc49)
    cir.store %4, %1 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc88)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc53)
    %6 = cir.load %5 : !cir.ptr<!cir.float>, !cir.float loc(#loc54)
    cir.store %6, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc89)
    cir.scope {
      %7 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc57)
      %8 = cir.cast(floating, %7 : !cir.float), !cir.double loc(#loc57)
      %9 = cir.fabs %8 : !cir.double loc(#loc57)
      %10 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc58)
      %11 = cir.cmp(gt, %9, %10) : !cir.double, !cir.bool loc(#loc91)
      cir.if %11 {
        %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc93)
        %13 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc65)
        %14 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc66)
        %15 = cir.cast(floating, %14 : !cir.float), !cir.double loc(#loc66)
        %16 = cir.binop(div, %13, %15) : !cir.double loc(#loc94)
        %17 = cir.cast(float_to_int, %16 : !cir.double), !s32i loc(#loc94)
        cir.store %17, %12 : !s32i, !cir.ptr<!s32i> loc(#loc93)
        %18 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc67)
        cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc68)
      } else {
        %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc43)
        %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc43)
        cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc69)
      } loc(#loc92)
    } loc(#loc90)
    cir.return loc(#loc45)
  } loc(#loc86)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_64b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":24:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":35:1)
#loc7 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":27:5)
#loc8 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":27:32)
#loc9 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":29:5)
#loc10 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":29:27)
#loc11 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":25:1)
#loc12 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":29:20)
#loc13 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":29:19)
#loc14 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":30:5)
#loc15 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":34:5)
#loc16 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":32:9)
#loc17 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":32:40)
#loc18 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":32:28)
#loc19 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":32:36)
#loc20 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":33:22)
#loc21 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":33:9)
#loc22 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":42:1)
#loc23 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":53:1)
#loc26 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":45:5)
#loc27 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":45:32)
#loc28 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":47:5)
#loc29 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":47:27)
#loc30 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":43:1)
#loc31 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":47:20)
#loc32 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":47:19)
#loc33 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":48:5)
#loc34 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":52:5)
#loc35 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":50:9)
#loc36 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":50:40)
#loc37 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":50:28)
#loc38 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":50:36)
#loc39 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":51:22)
#loc40 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":51:9)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":70:19)
#loc44 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":56:1)
#loc45 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":72:1)
#loc48 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":59:5)
#loc49 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":59:32)
#loc50 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":61:5)
#loc51 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":61:27)
#loc52 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":57:1)
#loc53 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":61:20)
#loc54 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":61:19)
#loc55 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":63:5)
#loc56 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":71:5)
#loc57 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":63:13)
#loc58 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":63:21)
#loc59 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":63:8)
#loc60 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":64:5)
#loc61 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":67:5)
#loc62 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":69:5)
#loc63 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":65:9)
#loc64 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":65:40)
#loc65 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":65:28)
#loc66 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":65:36)
#loc67 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":66:22)
#loc68 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":66:9)
#loc69 = loc("CWE369_Divide_by_Zero__float_rand_64b.c":70:9)
#loc70 = loc(fused[#loc1, #loc2])
#loc71 = loc(fused[#loc3, #loc4])
#loc73 = loc(fused[#loc7, #loc8])
#loc74 = loc(fused[#loc9, #loc10])
#loc75 = loc(fused[#loc14, #loc15])
#loc76 = loc(fused[#loc16, #loc17])
#loc77 = loc(fused[#loc18, #loc19])
#loc78 = loc(fused[#loc22, #loc23])
#loc80 = loc(fused[#loc26, #loc27])
#loc81 = loc(fused[#loc28, #loc29])
#loc82 = loc(fused[#loc33, #loc34])
#loc83 = loc(fused[#loc35, #loc36])
#loc84 = loc(fused[#loc37, #loc38])
#loc85 = loc(fused[#loc41, #loc42])
#loc86 = loc(fused[#loc44, #loc45])
#loc88 = loc(fused[#loc48, #loc49])
#loc89 = loc(fused[#loc50, #loc51])
#loc90 = loc(fused[#loc55, #loc56])
#loc91 = loc(fused[#loc59, #loc58])
#loc92 = loc(fused[#loc60, #loc61, #loc62, #loc56])
#loc93 = loc(fused[#loc63, #loc64])
#loc94 = loc(fused[#loc65, #loc66])
