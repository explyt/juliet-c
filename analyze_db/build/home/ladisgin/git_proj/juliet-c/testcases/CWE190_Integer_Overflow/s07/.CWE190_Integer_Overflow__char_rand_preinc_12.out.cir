!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc72 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":164:10)
#loc73 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":164:14)
#loc74 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":164:20)
#loc75 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":164:32)
#loc213 = loc(fused[#loc72, #loc73])
#loc214 = loc(fused[#loc74, #loc75])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__char_rand_preinc_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc184)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc185)
  cir.func private @printHexCharLine(!s8i) loc(#loc186)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc187)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE190_Integer_Overflow__char_rand_preinc_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc189)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc14)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc14)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc190)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc192)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc192)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc18)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc18)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc23)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc23)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc23)
        %11 = cir.ternary(%10, true {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc23)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc23)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc23)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc23)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc23)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc23)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc23)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc23)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc23)
          cir.yield %25 : !u32i loc(#loc23)
        }, false {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc23)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc23)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc23)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc23)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc23)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc23)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc23)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc23)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc23)
          %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc23)
          %27 = cir.const #cir.int<1> : !s32i loc(#loc23)
          %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc23)
          %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc23)
          cir.yield %29 : !u32i loc(#loc23)
        }) : (!cir.bool) -> !u32i loc(#loc23)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc23)
        %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc23)
        cir.store %13, %0 : !s8i, !cir.ptr<!s8i> loc(#loc194)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc25)
        %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc25)
        cir.store %8, %0 : !s8i, !cir.ptr<!s8i> loc(#loc195)
      } loc(#loc193)
    } loc(#loc191)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc197)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc197)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc29)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc29)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc200)
          %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc38)
          %9 = cir.unary(inc, %8) : !s8i, !s8i loc(#loc38)
          cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc201)
          %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc37)
          cir.store %10, %7 : !s8i, !cir.ptr<!s8i> loc(#loc200)
          %11 = cir.load %7 : !cir.ptr<!s8i>, !s8i loc(#loc40)
          cir.call @printHexCharLine(%11) : (!s8i) -> () loc(#loc41)
        } loc(#loc199)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc44)
          %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc44)
          %9 = cir.const #cir.int<127> : !s32i loc(#loc45)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc203)
          cir.if %10 {
            %11 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc205)
            %12 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc51)
            %13 = cir.unary(inc, %12) : !s8i, !s8i loc(#loc51)
            cir.store %13, %0 : !s8i, !cir.ptr<!s8i> loc(#loc206)
            %14 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc50)
            cir.store %14, %11 : !s8i, !cir.ptr<!s8i> loc(#loc205)
            %15 = cir.load %11 : !cir.ptr<!s8i>, !s8i loc(#loc53)
            cir.call @printHexCharLine(%15) : (!s8i) -> () loc(#loc54)
          } else {
            %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc9)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc9)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc55)
          } loc(#loc204)
        } loc(#loc202)
      } loc(#loc198)
    } loc(#loc196)
    cir.return loc(#loc11)
  } loc(#loc188)
  cir.func no_proto @CWE190_Integer_Overflow__char_rand_preinc_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc209)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    cir.return loc(#loc57)
  } loc(#loc207)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc210)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc211)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc66)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc69)
  cir.func @main(%arg0: !s32i loc(fused[#loc72, #loc73]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc74, #loc75])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc213)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc214)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc71)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc76)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc76)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc77)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc78)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc78)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc79)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc66)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %8 = cir.get_global @CWE190_Integer_Overflow__char_rand_preinc_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc215)
    cir.call @CWE190_Integer_Overflow__char_rand_preinc_12_good() : () -> () loc(#loc81)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc67)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc68)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc84)
    %13 = cir.get_global @CWE190_Integer_Overflow__char_rand_preinc_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc216)
    cir.call @CWE190_Integer_Overflow__char_rand_preinc_12_bad() : () -> () loc(#loc85)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc69)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc88)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc217)
    cir.return %17 : !s32i loc(#loc217)
  } loc(#loc212)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc219)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc94)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc94)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc220)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc222)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc222)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc98)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc98)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc103)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc103)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc103)
        %11 = cir.ternary(%10, true {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc103)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc103)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc103)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc103)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc103)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc103)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc103)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc103)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc103)
          cir.yield %25 : !u32i loc(#loc103)
        }, false {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc103)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc103)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc103)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc103)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc103)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc103)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc103)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc103)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc103)
          %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc103)
          %27 = cir.const #cir.int<1> : !s32i loc(#loc103)
          %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc103)
          %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc103)
          cir.yield %29 : !u32i loc(#loc103)
        }) : (!cir.bool) -> !u32i loc(#loc103)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc103)
        %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc103)
        cir.store %13, %0 : !s8i, !cir.ptr<!s8i> loc(#loc224)
      } else {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc105)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc105)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc105)
        %11 = cir.ternary(%10, true {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc105)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc105)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc105)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc105)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc105)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc105)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc105)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc105)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc105)
          cir.yield %25 : !u32i loc(#loc105)
        }, false {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc105)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc105)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc105)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc105)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc105)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc105)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc105)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc105)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc105)
          %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc105)
          %27 = cir.const #cir.int<1> : !s32i loc(#loc105)
          %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc105)
          %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc105)
          cir.yield %29 : !u32i loc(#loc105)
        }) : (!cir.bool) -> !u32i loc(#loc105)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc105)
        %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc105)
        cir.store %13, %0 : !s8i, !cir.ptr<!s8i> loc(#loc225)
      } loc(#loc223)
    } loc(#loc221)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc227)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc227)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc109)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc109)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc116)
          %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc116)
          %9 = cir.const #cir.int<127> : !s32i loc(#loc117)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc230)
          cir.if %10 {
            %11 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc232)
            %12 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc123)
            %13 = cir.unary(inc, %12) : !s8i, !s8i loc(#loc123)
            cir.store %13, %0 : !s8i, !cir.ptr<!s8i> loc(#loc233)
            %14 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc122)
            cir.store %14, %11 : !s8i, !cir.ptr<!s8i> loc(#loc232)
            %15 = cir.load %11 : !cir.ptr<!s8i>, !s8i loc(#loc125)
            cir.call @printHexCharLine(%15) : (!s8i) -> () loc(#loc126)
          } else {
            %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc127)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc127)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc128)
          } loc(#loc231)
        } loc(#loc229)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc131)
          %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc131)
          %9 = cir.const #cir.int<127> : !s32i loc(#loc132)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc235)
          cir.if %10 {
            %11 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc237)
            %12 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc138)
            %13 = cir.unary(inc, %12) : !s8i, !s8i loc(#loc138)
            cir.store %13, %0 : !s8i, !cir.ptr<!s8i> loc(#loc238)
            %14 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc137)
            cir.store %14, %11 : !s8i, !cir.ptr<!s8i> loc(#loc237)
            %15 = cir.load %11 : !cir.ptr<!s8i>, !s8i loc(#loc140)
            cir.call @printHexCharLine(%15) : (!s8i) -> () loc(#loc141)
          } else {
            %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc142)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc142)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc143)
          } loc(#loc236)
        } loc(#loc234)
      } loc(#loc228)
    } loc(#loc226)
    cir.return loc(#loc91)
  } loc(#loc218)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc240)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc148)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc148)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc241)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc243)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc243)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc152)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc152)
      cir.if %6 {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc157)
        %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc157)
        cir.store %8, %0 : !s8i, !cir.ptr<!s8i> loc(#loc245)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc159)
        %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc159)
        cir.store %8, %0 : !s8i, !cir.ptr<!s8i> loc(#loc246)
      } loc(#loc244)
    } loc(#loc242)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc248)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc248)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc163)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc163)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc251)
          %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc172)
          %9 = cir.unary(inc, %8) : !s8i, !s8i loc(#loc172)
          cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc252)
          %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc171)
          cir.store %10, %7 : !s8i, !cir.ptr<!s8i> loc(#loc251)
          %11 = cir.load %7 : !cir.ptr<!s8i>, !s8i loc(#loc174)
          cir.call @printHexCharLine(%11) : (!s8i) -> () loc(#loc175)
        } loc(#loc250)
      } else {
        cir.scope {
          %7 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc254)
          %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc180)
          %9 = cir.unary(inc, %8) : !s8i, !s8i loc(#loc180)
          cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc255)
          %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc179)
          cir.store %10, %7 : !s8i, !cir.ptr<!s8i> loc(#loc254)
          %11 = cir.load %7 : !cir.ptr<!s8i>, !s8i loc(#loc182)
          cir.call @printHexCharLine(%11) : (!s8i) -> () loc(#loc183)
        } loc(#loc253)
      } loc(#loc249)
    } loc(#loc247)
    cir.return loc(#loc145)
  } loc(#loc239)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__char_rand_preinc_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":56:23)
#loc10 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":22:1)
#loc11 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":59:1)
#loc12 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":24:5)
#loc13 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":24:10)
#loc14 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":25:12)
#loc15 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":25:5)
#loc16 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":26:5)
#loc17 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":35:5)
#loc18 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":26:8)
#loc19 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":26:33)
#loc20 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":27:5)
#loc21 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":30:5)
#loc22 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":32:5)
#loc23 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":29:22)
#loc24 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":29:9)
#loc25 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":34:16)
#loc26 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":34:9)
#loc27 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":36:5)
#loc28 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":58:5)
#loc29 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":36:8)
#loc30 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":36:33)
#loc31 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":37:5)
#loc32 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":44:5)
#loc33 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":46:5)
#loc34 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":38:9)
#loc35 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":43:9)
#loc36 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":41:13)
#loc37 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":41:27)
#loc38 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":40:13)
#loc39 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":40:15)
#loc40 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":42:30)
#loc41 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":42:13)
#loc42 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":48:9)
#loc43 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":57:9)
#loc44 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":48:13)
#loc45 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":48:20)
#loc46 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":49:9)
#loc47 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":53:9)
#loc48 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":55:9)
#loc49 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":51:13)
#loc50 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":51:27)
#loc51 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":50:13)
#loc52 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":50:15)
#loc53 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":52:30)
#loc54 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":52:13)
#loc55 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":56:13)
#loc56 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":149:1)
#loc57 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":153:1)
#loc58 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":151:5)
#loc59 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":151:13)
#loc60 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":152:5)
#loc61 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":152:13)
#loc62 = loc("/usr/include/stdlib.h":575:1)
#loc63 = loc("/usr/include/stdlib.h":575:41)
#loc64 = loc("/usr/include/time.h":76:1)
#loc65 = loc("/usr/include/time.h":76:38)
#loc66 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":169:15)
#loc67 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":171:15)
#loc68 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":174:15)
#loc69 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":176:15)
#loc70 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":164:1)
#loc71 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":179:1)
#loc76 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":165:1)
#loc77 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":167:27)
#loc78 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":167:22)
#loc79 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":167:5)
#loc80 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":169:5)
#loc81 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":170:5)
#loc82 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":170:55)
#loc83 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":171:5)
#loc84 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":174:5)
#loc85 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":175:5)
#loc86 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":175:54)
#loc87 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":176:5)
#loc88 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":178:12)
#loc89 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":178:5)
#loc90 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":68:1)
#loc91 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":110:1)
#loc92 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":70:5)
#loc93 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":70:10)
#loc94 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":71:12)
#loc95 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":71:5)
#loc96 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":72:5)
#loc97 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":81:5)
#loc98 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":72:8)
#loc99 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":72:33)
#loc100 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":73:5)
#loc101 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":76:5)
#loc102 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":78:5)
#loc103 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":75:22)
#loc104 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":75:9)
#loc105 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":80:22)
#loc106 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":80:9)
#loc107 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":82:5)
#loc108 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":109:5)
#loc109 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":82:8)
#loc110 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":82:33)
#loc111 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":83:5)
#loc112 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":95:5)
#loc113 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":97:5)
#loc114 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":85:9)
#loc115 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":94:9)
#loc116 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":85:13)
#loc117 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":85:20)
#loc118 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":86:9)
#loc119 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":90:9)
#loc120 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":92:9)
#loc121 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":88:13)
#loc122 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":88:27)
#loc123 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":87:13)
#loc124 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":87:15)
#loc125 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":89:30)
#loc126 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":89:13)
#loc127 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":93:23)
#loc128 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":93:13)
#loc129 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":99:9)
#loc130 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":108:9)
#loc131 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":99:13)
#loc132 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":99:20)
#loc133 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":100:9)
#loc134 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":104:9)
#loc135 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":106:9)
#loc136 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":102:13)
#loc137 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":102:27)
#loc138 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":101:13)
#loc139 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":101:15)
#loc140 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":103:30)
#loc141 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":103:13)
#loc142 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":107:23)
#loc143 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":107:13)
#loc144 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":115:1)
#loc145 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":147:1)
#loc146 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":117:5)
#loc147 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":117:10)
#loc148 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":118:12)
#loc149 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":118:5)
#loc150 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":119:5)
#loc151 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":128:5)
#loc152 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":119:8)
#loc153 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":119:33)
#loc154 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":120:5)
#loc155 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":123:5)
#loc156 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":125:5)
#loc157 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":122:16)
#loc158 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":122:9)
#loc159 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":127:16)
#loc160 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":127:9)
#loc161 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":129:5)
#loc162 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":146:5)
#loc163 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":129:8)
#loc164 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":129:33)
#loc165 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":130:5)
#loc166 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":137:5)
#loc167 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":139:5)
#loc168 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":131:9)
#loc169 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":136:9)
#loc170 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":134:13)
#loc171 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":134:27)
#loc172 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":133:13)
#loc173 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":133:15)
#loc174 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":135:30)
#loc175 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":135:13)
#loc176 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":140:9)
#loc177 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":145:9)
#loc178 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":143:13)
#loc179 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":143:27)
#loc180 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":142:13)
#loc181 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":142:15)
#loc182 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":144:30)
#loc183 = loc("CWE190_Integer_Overflow__char_rand_preinc_12.c":144:13)
#loc184 = loc(fused[#loc1, #loc2])
#loc185 = loc(fused[#loc3, #loc4])
#loc186 = loc(fused[#loc5, #loc6])
#loc187 = loc(fused[#loc7, #loc8])
#loc188 = loc(fused[#loc10, #loc11])
#loc189 = loc(fused[#loc12, #loc13])
#loc190 = loc(fused[#loc15, #loc14])
#loc191 = loc(fused[#loc16, #loc17])
#loc192 = loc(fused[#loc18, #loc19])
#loc193 = loc(fused[#loc20, #loc21, #loc22, #loc17])
#loc194 = loc(fused[#loc24, #loc23])
#loc195 = loc(fused[#loc26, #loc25])
#loc196 = loc(fused[#loc27, #loc28])
#loc197 = loc(fused[#loc29, #loc30])
#loc198 = loc(fused[#loc31, #loc32, #loc33, #loc28])
#loc199 = loc(fused[#loc34, #loc35])
#loc200 = loc(fused[#loc36, #loc37])
#loc201 = loc(fused[#loc38, #loc39])
#loc202 = loc(fused[#loc42, #loc43])
#loc203 = loc(fused[#loc44, #loc45])
#loc204 = loc(fused[#loc46, #loc47, #loc48, #loc43])
#loc205 = loc(fused[#loc49, #loc50])
#loc206 = loc(fused[#loc51, #loc52])
#loc207 = loc(fused[#loc56, #loc57])
#loc208 = loc(fused[#loc58, #loc59])
#loc209 = loc(fused[#loc60, #loc61])
#loc210 = loc(fused[#loc62, #loc63])
#loc211 = loc(fused[#loc64, #loc65])
#loc212 = loc(fused[#loc70, #loc71])
#loc215 = loc(fused[#loc81, #loc82])
#loc216 = loc(fused[#loc85, #loc86])
#loc217 = loc(fused[#loc89, #loc88])
#loc218 = loc(fused[#loc90, #loc91])
#loc219 = loc(fused[#loc92, #loc93])
#loc220 = loc(fused[#loc95, #loc94])
#loc221 = loc(fused[#loc96, #loc97])
#loc222 = loc(fused[#loc98, #loc99])
#loc223 = loc(fused[#loc100, #loc101, #loc102, #loc97])
#loc224 = loc(fused[#loc104, #loc103])
#loc225 = loc(fused[#loc106, #loc105])
#loc226 = loc(fused[#loc107, #loc108])
#loc227 = loc(fused[#loc109, #loc110])
#loc228 = loc(fused[#loc111, #loc112, #loc113, #loc108])
#loc229 = loc(fused[#loc114, #loc115])
#loc230 = loc(fused[#loc116, #loc117])
#loc231 = loc(fused[#loc118, #loc119, #loc120, #loc115])
#loc232 = loc(fused[#loc121, #loc122])
#loc233 = loc(fused[#loc123, #loc124])
#loc234 = loc(fused[#loc129, #loc130])
#loc235 = loc(fused[#loc131, #loc132])
#loc236 = loc(fused[#loc133, #loc134, #loc135, #loc130])
#loc237 = loc(fused[#loc136, #loc137])
#loc238 = loc(fused[#loc138, #loc139])
#loc239 = loc(fused[#loc144, #loc145])
#loc240 = loc(fused[#loc146, #loc147])
#loc241 = loc(fused[#loc149, #loc148])
#loc242 = loc(fused[#loc150, #loc151])
#loc243 = loc(fused[#loc152, #loc153])
#loc244 = loc(fused[#loc154, #loc155, #loc156, #loc151])
#loc245 = loc(fused[#loc158, #loc157])
#loc246 = loc(fused[#loc160, #loc159])
#loc247 = loc(fused[#loc161, #loc162])
#loc248 = loc(fused[#loc163, #loc164])
#loc249 = loc(fused[#loc165, #loc166, #loc167, #loc162])
#loc250 = loc(fused[#loc168, #loc169])
#loc251 = loc(fused[#loc170, #loc171])
#loc252 = loc(fused[#loc172, #loc173])
#loc253 = loc(fused[#loc176, #loc177])
#loc254 = loc(fused[#loc178, #loc179])
#loc255 = loc(fused[#loc180, #loc181])
