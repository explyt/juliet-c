!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc49 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":238:8)
#loc50 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":238:14)
#loc101 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":110:10)
#loc102 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":110:14)
#loc103 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":110:20)
#loc104 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":110:32)
#loc139 = loc(fused[#loc49, #loc50])
#loc158 = loc(fused[#loc101, #loc102])
#loc159 = loc(fused[#loc103, #loc104])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc117)
  cir.func @_ZN36CWE369_Divide_by_Zero__float_zero_333badEv() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc119)
    %1 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc120)
    cir.store %0, %1 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc8)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc9)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc121)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc11)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc122)
    cir.scope {
      %4 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc124)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc16)
      %6 = cir.load %5 : !cir.ptr<!cir.float>, !cir.float loc(#loc16)
      cir.store %6, %4 : !cir.float, !cir.ptr<!cir.float> loc(#loc124)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc126)
        %8 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc21)
        %9 = cir.load %4 : !cir.ptr<!cir.float>, !cir.float loc(#loc22)
        %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc22)
        %11 = cir.binop(div, %8, %10) : !cir.double loc(#loc127)
        %12 = cir.cast(float_to_int, %11 : !cir.double), !s32i loc(#loc127)
        cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc126)
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc23)
        cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc24)
      } loc(#loc125)
    } loc(#loc123)
    cir.return loc(#loc4)
  } loc(#loc118)
  cir.func internal private @_ZN36CWE369_Divide_by_Zero__float_zero_33L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc129)
    %1 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc130)
    cir.store %0, %1 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc30)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc31)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc131)
    %3 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc33)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc132)
    cir.scope {
      %4 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc134)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc38)
      %6 = cir.load %5 : !cir.ptr<!cir.float>, !cir.float loc(#loc38)
      cir.store %6, %4 : !cir.float, !cir.ptr<!cir.float> loc(#loc134)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc136)
        %8 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc43)
        %9 = cir.load %4 : !cir.ptr<!cir.float>, !cir.float loc(#loc44)
        %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc44)
        %11 = cir.binop(div, %8, %10) : !cir.double loc(#loc137)
        %12 = cir.cast(float_to_int, %11 : !cir.double), !s32i loc(#loc137)
        cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc136)
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc45)
        cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc46)
      } loc(#loc135)
    } loc(#loc133)
    cir.return loc(#loc26)
  } loc(#loc128)
  cir.func linkonce_odr @_ZSt4fabsf(%arg0: !cir.float loc(fused[#loc49, #loc50])) -> !cir.float extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["__x", init] {alignment = 4 : i64} loc(#loc139)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["__retval"] {alignment = 4 : i64} loc(#loc48)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc51)
    %2 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc52)
    %3 = cir.fabs %2 : !cir.float loc(#loc52)
    cir.store %3, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc140)
    %4 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc140)
    cir.return %4 : !cir.float loc(#loc140)
  } loc(#loc138)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc55)
  cir.func internal private @_ZN36CWE369_Divide_by_Zero__float_zero_33L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc142)
    %1 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc143)
    cir.store %0, %1 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc61)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc62)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc144)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc64)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc145)
    cir.scope {
      %4 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc147)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc69)
      %6 = cir.load %5 : !cir.ptr<!cir.float>, !cir.float loc(#loc69)
      cir.store %6, %4 : !cir.float, !cir.ptr<!cir.float> loc(#loc147)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!cir.float>, !cir.float loc(#loc72)
        %8 = cir.call @_ZSt4fabsf(%7) : (!cir.float) -> !cir.float loc(#loc73)
        %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc73)
        %10 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc74)
        %11 = cir.cmp(gt, %9, %10) : !cir.double, !cir.bool loc(#loc149)
        cir.if %11 {
          %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc151)
          %13 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc80)
          %14 = cir.load %4 : !cir.ptr<!cir.float>, !cir.float loc(#loc81)
          %15 = cir.cast(floating, %14 : !cir.float), !cir.double loc(#loc81)
          %16 = cir.binop(div, %13, %15) : !cir.double loc(#loc152)
          %17 = cir.cast(float_to_int, %16 : !cir.double), !s32i loc(#loc152)
          cir.store %17, %12 : !s32i, !cir.ptr<!s32i> loc(#loc151)
          %18 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc82)
          cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc83)
        } else {
          %12 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc55)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc55)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc84)
        } loc(#loc150)
      } loc(#loc148)
    } loc(#loc146)
    cir.return loc(#loc57)
  } loc(#loc141)
  cir.func @_ZN36CWE369_Divide_by_Zero__float_zero_334goodEv() extra(#fn_attr) {
    cir.call @_ZN36CWE369_Divide_by_Zero__float_zero_33L7goodG2BEv() : () -> () loc(#loc87)
    cir.call @_ZN36CWE369_Divide_by_Zero__float_zero_33L7goodB2GEv() : () -> () loc(#loc88)
    cir.return loc(#loc86)
  } loc(#loc153)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc154)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc155)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc156)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc95)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc96)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc97)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc98)
  cir.func @main(%arg0: !s32i loc(fused[#loc101, #loc102]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc103, #loc104])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc158)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc159)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc100)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc105)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc106)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc107)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc107)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc108)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc95)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc95)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc109)
    cir.call @_ZN36CWE369_Divide_by_Zero__float_zero_334goodEv() : () -> () loc(#loc110)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc96)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc96)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc111)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc97)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc97)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc112)
    cir.call @_ZN36CWE369_Divide_by_Zero__float_zero_333badEv() : () -> () loc(#loc113)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc98)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc98)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc114)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc115)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc160)
    cir.return %15 : !s32i loc(#loc160)
  } loc(#loc157)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_33.cpp":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":27:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":43:1)
#loc5 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":29:5)
#loc6 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":29:11)
#loc7 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":30:5)
#loc8 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":30:22)
#loc9 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":32:12)
#loc10 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":32:5)
#loc11 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":34:12)
#loc12 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":34:5)
#loc13 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":35:5)
#loc14 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":42:5)
#loc15 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":36:9)
#loc16 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":36:22)
#loc17 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":37:9)
#loc18 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":41:9)
#loc19 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":39:13)
#loc20 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":39:44)
#loc21 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":39:32)
#loc22 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":39:40)
#loc23 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":40:26)
#loc24 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":40:13)
#loc25 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":50:1)
#loc26 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":66:1)
#loc27 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":52:5)
#loc28 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":52:11)
#loc29 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":53:5)
#loc30 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":53:22)
#loc31 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":55:12)
#loc32 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":55:5)
#loc33 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":57:12)
#loc34 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":57:5)
#loc35 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":58:5)
#loc36 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":65:5)
#loc37 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":59:9)
#loc38 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":59:22)
#loc39 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":60:9)
#loc40 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":64:9)
#loc41 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":62:13)
#loc42 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":62:44)
#loc43 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":62:32)
#loc44 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":62:40)
#loc45 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":63:26)
#loc46 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":63:13)
#loc47 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":237:3)
#loc48 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:34)
#loc51 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:3)
#loc52 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:28)
#loc53 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:5)
#loc54 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:31)
#loc55 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":87:23)
#loc56 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":69:1)
#loc57 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":90:1)
#loc58 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":71:5)
#loc59 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":71:11)
#loc60 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":72:5)
#loc61 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":72:22)
#loc62 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":74:12)
#loc63 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":74:5)
#loc64 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":76:12)
#loc65 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":76:5)
#loc66 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":77:5)
#loc67 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":89:5)
#loc68 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":78:9)
#loc69 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":78:22)
#loc70 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":80:9)
#loc71 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":88:9)
#loc72 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":80:17)
#loc73 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":80:12)
#loc74 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":80:25)
#loc75 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":81:9)
#loc76 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":84:9)
#loc77 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":86:9)
#loc78 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":82:13)
#loc79 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":82:44)
#loc80 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":82:32)
#loc81 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":82:40)
#loc82 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":83:26)
#loc83 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":83:13)
#loc84 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":87:13)
#loc85 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":92:1)
#loc86 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":96:1)
#loc87 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":94:5)
#loc88 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":95:5)
#loc89 = loc("/usr/include/stdlib.h":575:1)
#loc90 = loc("/usr/include/stdlib.h":575:41)
#loc91 = loc("/usr/include/time.h":76:1)
#loc92 = loc("/usr/include/time.h":76:38)
#loc93 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc94 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc95 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":115:15)
#loc96 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":117:15)
#loc97 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":120:15)
#loc98 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":122:15)
#loc99 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":110:1)
#loc100 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":125:1)
#loc105 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":111:1)
#loc106 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":113:27)
#loc107 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":113:22)
#loc108 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":113:5)
#loc109 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":115:5)
#loc110 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":116:5)
#loc111 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":117:5)
#loc112 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":120:5)
#loc113 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":121:5)
#loc114 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":122:5)
#loc115 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":124:12)
#loc116 = loc("CWE369_Divide_by_Zero__float_zero_33.cpp":124:5)
#loc117 = loc(fused[#loc1, #loc2])
#loc118 = loc(fused[#loc3, #loc4])
#loc119 = loc(fused[#loc5, #loc6])
#loc120 = loc(fused[#loc7, #loc8])
#loc121 = loc(fused[#loc10, #loc9])
#loc122 = loc(fused[#loc12, #loc11])
#loc123 = loc(fused[#loc13, #loc14])
#loc124 = loc(fused[#loc15, #loc16])
#loc125 = loc(fused[#loc17, #loc18])
#loc126 = loc(fused[#loc19, #loc20])
#loc127 = loc(fused[#loc21, #loc22])
#loc128 = loc(fused[#loc25, #loc26])
#loc129 = loc(fused[#loc27, #loc28])
#loc130 = loc(fused[#loc29, #loc30])
#loc131 = loc(fused[#loc32, #loc31])
#loc132 = loc(fused[#loc34, #loc33])
#loc133 = loc(fused[#loc35, #loc36])
#loc134 = loc(fused[#loc37, #loc38])
#loc135 = loc(fused[#loc39, #loc40])
#loc136 = loc(fused[#loc41, #loc42])
#loc137 = loc(fused[#loc43, #loc44])
#loc138 = loc(fused[#loc47, #loc48])
#loc140 = loc(fused[#loc53, #loc54])
#loc141 = loc(fused[#loc56, #loc57])
#loc142 = loc(fused[#loc58, #loc59])
#loc143 = loc(fused[#loc60, #loc61])
#loc144 = loc(fused[#loc63, #loc62])
#loc145 = loc(fused[#loc65, #loc64])
#loc146 = loc(fused[#loc66, #loc67])
#loc147 = loc(fused[#loc68, #loc69])
#loc148 = loc(fused[#loc70, #loc71])
#loc149 = loc(fused[#loc73, #loc74])
#loc150 = loc(fused[#loc75, #loc76, #loc77, #loc71])
#loc151 = loc(fused[#loc78, #loc79])
#loc152 = loc(fused[#loc80, #loc81])
#loc153 = loc(fused[#loc85, #loc86])
#loc154 = loc(fused[#loc89, #loc90])
#loc155 = loc(fused[#loc91, #loc92])
#loc156 = loc(fused[#loc93, #loc94])
#loc157 = loc(fused[#loc99, #loc100])
#loc160 = loc(fused[#loc116, #loc115])
