!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_13.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  constant external @GLOBAL_CONST_FIVE : !s32i {alignment = 4 : i64} loc(#loc267)
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc268)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc269)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc270)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc271)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private  @printIntLine(!s32i) loc(#loc272)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_multiply_13_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc274)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc18)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc275)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc267)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc22)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc23)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc277)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc24)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc280)
          %8 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc280)
          cir.store %8, %7 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc280)
          cir.scope {
            %9 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc32)
            %10 = cir.const #cir.int<3> : !s32i loc(#loc33)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc33)
            %12 = cir.const #cir.int<4> : !u64i loc(#loc33)
            %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc33)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc33)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc33)
            %16 = cir.binop(add, %13, %15) : !u64i loc(#loc33)
            %17 = cir.cast(integral, %16 : !u64i), !s32i loc(#loc33)
            %18 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc269)
            %19 = cir.load %18 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc34)
            %20 = cir.call @fgets(%9, %17, %19) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc35)
            %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc36)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc36)
            %23 = cir.cmp(ne, %20, %22) : !cir.ptr<!s8i>, !s32i loc(#loc282)
            %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc37)
            cir.if %24 {
              %25 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc41)
              %26 = cir.call @atoi(%25) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc42)
              cir.store %26, %0 : !s32i, !cir.ptr<!s32i> loc(#loc284)
            } else {
              %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc45)
            } loc(#loc283)
          } loc(#loc281)
        } loc(#loc279)
      } loc(#loc278)
    } loc(#loc276)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc267)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc48)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc49)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc286)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc50)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc55)
          %9 = cir.cmp(gt, %7, %8) : !s32i, !s32i loc(#loc289)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc56)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc291)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc60)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc59)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc60)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc291)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc61)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc62)
          } loc(#loc290)
        } loc(#loc288)
      } loc(#loc287)
    } loc(#loc285)
    cir.return loc(#loc15)
  } loc(#loc273)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_multiply_13_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc293)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc294)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc67)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc295)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc69)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc296)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc71)
    cir.return loc(#loc64)
  } loc(#loc292)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc73)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc74)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc298)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc79)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc299)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc267)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc83)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc84)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc301)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc85)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc304)
          %8 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc304)
          cir.store %8, %7 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc304)
          cir.scope {
            %9 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc93)
            %10 = cir.const #cir.int<3> : !s32i loc(#loc94)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc94)
            %12 = cir.const #cir.int<4> : !u64i loc(#loc94)
            %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc94)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc94)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc94)
            %16 = cir.binop(add, %13, %15) : !u64i loc(#loc94)
            %17 = cir.cast(integral, %16 : !u64i), !s32i loc(#loc94)
            %18 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc269)
            %19 = cir.load %18 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc95)
            %20 = cir.call @fgets(%9, %17, %19) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc96)
            %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc97)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc97)
            %23 = cir.cmp(ne, %20, %22) : !cir.ptr<!s8i>, !s32i loc(#loc306)
            %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc98)
            cir.if %24 {
              %25 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc102)
              %26 = cir.call @atoi(%25) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc103)
              cir.store %26, %0 : !s32i, !cir.ptr<!s32i> loc(#loc308)
            } else {
              %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc106)
              %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc106)
              cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc107)
            } loc(#loc307)
          } loc(#loc305)
        } loc(#loc303)
      } loc(#loc302)
    } loc(#loc300)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc267)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc110)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc111)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc310)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc112)
      cir.if %6 {
        %7 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc73)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc73)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc116)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc119)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc120)
          %9 = cir.cmp(gt, %7, %8) : !s32i, !s32i loc(#loc313)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc121)
          cir.if %10 {
            cir.scope {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc125)
              %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc126)
              %13 = cir.const #cir.int<2> : !s32i loc(#loc127)
              %14 = cir.binop(div, %12, %13) : !s32i loc(#loc316)
              %15 = cir.cmp(lt, %11, %14) : !s32i, !s32i loc(#loc317)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc129)
              cir.if %16 {
                %17 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc319)
                %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc135)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc134)
                %20 = cir.binop(mul, %18, %19) nsw : !s32i loc(#loc135)
                cir.store %20, %17 : !s32i, !cir.ptr<!s32i> loc(#loc319)
                %21 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc136)
                cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc137)
              } else {
                %17 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc74)
                %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc74)
                cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc138)
              } loc(#loc318)
            } loc(#loc315)
          } loc(#loc314)
        } loc(#loc312)
      } loc(#loc311)
    } loc(#loc309)
    cir.return loc(#loc76)
  } loc(#loc297)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc321)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc143)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc322)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc267)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc147)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc148)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc324)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc149)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc327)
          %8 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc327)
          cir.store %8, %7 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc327)
          cir.scope {
            %9 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc157)
            %10 = cir.const #cir.int<3> : !s32i loc(#loc158)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc158)
            %12 = cir.const #cir.int<4> : !u64i loc(#loc158)
            %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc158)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc158)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc158)
            %16 = cir.binop(add, %13, %15) : !u64i loc(#loc158)
            %17 = cir.cast(integral, %16 : !u64i), !s32i loc(#loc158)
            %18 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc269)
            %19 = cir.load %18 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc159)
            %20 = cir.call @fgets(%9, %17, %19) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc160)
            %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc161)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc161)
            %23 = cir.cmp(ne, %20, %22) : !cir.ptr<!s8i>, !s32i loc(#loc329)
            %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc162)
            cir.if %24 {
              %25 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc166)
              %26 = cir.call @atoi(%25) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc167)
              cir.store %26, %0 : !s32i, !cir.ptr<!s32i> loc(#loc331)
            } else {
              %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc170)
              %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc170)
              cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc171)
            } loc(#loc330)
          } loc(#loc328)
        } loc(#loc326)
      } loc(#loc325)
    } loc(#loc323)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc267)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc174)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc175)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc333)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc176)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc180)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc181)
          %9 = cir.cmp(gt, %7, %8) : !s32i, !s32i loc(#loc336)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc182)
          cir.if %10 {
            cir.scope {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc186)
              %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc187)
              %13 = cir.const #cir.int<2> : !s32i loc(#loc188)
              %14 = cir.binop(div, %12, %13) : !s32i loc(#loc339)
              %15 = cir.cmp(lt, %11, %14) : !s32i, !s32i loc(#loc340)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc190)
              cir.if %16 {
                %17 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc342)
                %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc196)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc195)
                %20 = cir.binop(mul, %18, %19) nsw : !s32i loc(#loc196)
                cir.store %20, %17 : !s32i, !cir.ptr<!s32i> loc(#loc342)
                %21 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc197)
                cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc198)
              } else {
                %17 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc199)
                %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc199)
                cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc200)
              } loc(#loc341)
            } loc(#loc338)
          } loc(#loc337)
        } loc(#loc335)
      } loc(#loc334)
    } loc(#loc332)
    cir.return loc(#loc140)
  } loc(#loc320)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc344)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc205)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc345)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc267)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc209)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc210)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc347)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc211)
      cir.if %6 {
        %7 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc215)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc215)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc216)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc217)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc349)
      } loc(#loc348)
    } loc(#loc346)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc267)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc221)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc222)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc351)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc223)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc227)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc228)
          %9 = cir.cmp(gt, %7, %8) : !s32i, !s32i loc(#loc354)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc229)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc356)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc233)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc232)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc233)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc356)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc234)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc235)
          } loc(#loc355)
        } loc(#loc353)
      } loc(#loc352)
    } loc(#loc350)
    cir.return loc(#loc202)
  } loc(#loc343)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc358)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc240)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc359)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc267)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc244)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc245)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc361)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc246)
      cir.if %6 {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc248)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc363)
      } loc(#loc362)
    } loc(#loc360)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc267)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc252)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc253)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc365)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc254)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc258)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc259)
          %9 = cir.cmp(gt, %7, %8) : !s32i, !s32i loc(#loc368)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc260)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc370)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc264)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc263)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc264)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc370)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc265)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc266)
          } loc(#loc369)
        } loc(#loc367)
      } loc(#loc366)
    } loc(#loc364)
    cir.return loc(#loc237)
  } loc(#loc357)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_13.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":111:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":111:18)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":105:1)
#loc8 = loc("/usr/include/stdlib.h":106:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":41:27)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":24:1)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":54:1)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":26:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":26:9)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":28:12)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":28:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":29:5)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":44:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":29:8)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":29:27)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":29:25)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":30:5)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":31:9)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":43:9)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":32:13)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":32:49)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":34:13)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":42:13)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":34:23)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":34:36)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":34:53)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":34:17)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":34:63)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":34:60)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":35:13)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":38:13)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":40:13)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":37:29)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":37:24)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":37:17)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":37:40)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":41:17)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":45:5)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":53:5)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":45:8)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":45:27)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":45:25)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":46:5)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":47:9)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":52:9)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":47:12)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":47:19)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":47:17)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":48:9)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":50:13)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":50:33)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":50:26)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":51:26)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":51:13)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":194:1)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":200:1)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":196:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":196:14)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":197:5)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":197:14)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":198:5)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":198:14)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":199:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":199:14)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":85:19)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":99:27)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":61:1)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":103:1)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":63:5)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":63:9)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":65:12)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":65:5)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":66:5)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":81:5)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":66:8)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":66:27)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":66:25)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":67:5)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":68:9)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":80:9)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":69:13)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":69:49)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":71:13)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":79:13)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":71:23)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":71:36)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":71:53)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":71:17)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":71:63)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":71:60)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":72:13)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":75:13)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":77:13)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":74:29)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":74:24)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":74:17)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":74:40)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":78:27)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":78:17)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":82:5)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":102:5)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":82:8)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":82:27)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":82:25)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":83:5)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":86:5)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":88:5)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":85:9)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":89:9)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":101:9)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":89:12)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":89:19)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":89:17)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":90:9)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":92:13)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":100:13)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":92:17)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":92:25)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":92:33)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":92:34)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":92:22)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":93:13)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":96:13)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":98:13)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":94:17)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":94:37)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":94:30)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":95:30)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":95:17)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":99:17)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":106:1)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":143:1)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":108:5)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":108:9)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":110:12)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":110:5)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":111:5)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":126:5)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":111:8)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":111:27)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":111:25)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":112:5)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":113:9)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":125:9)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":114:13)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":114:49)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":116:13)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":124:13)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":116:23)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":116:36)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":116:53)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":116:17)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":116:63)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":116:60)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":117:13)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":120:13)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":122:13)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":119:29)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":119:24)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":119:17)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":119:40)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":123:27)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":123:17)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":127:5)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":142:5)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":127:8)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":127:27)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":127:25)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":128:5)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":129:9)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":141:9)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":129:12)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":129:19)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":129:17)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":130:9)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":132:13)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":140:13)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":132:17)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":132:25)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":132:33)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":132:34)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":132:22)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":133:13)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":136:13)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":138:13)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":134:17)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":134:37)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":134:30)
#loc197 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":135:30)
#loc198 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":135:17)
#loc199 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":139:27)
#loc200 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":139:17)
#loc201 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":146:1)
#loc202 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":170:1)
#loc203 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":148:5)
#loc204 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":148:9)
#loc205 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":150:12)
#loc206 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":150:5)
#loc207 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":151:5)
#loc208 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":160:5)
#loc209 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":151:8)
#loc210 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":151:27)
#loc211 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":151:25)
#loc212 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":152:5)
#loc213 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":155:5)
#loc214 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":157:5)
#loc215 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":154:19)
#loc216 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":154:9)
#loc217 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":159:16)
#loc218 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":159:9)
#loc219 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":161:5)
#loc220 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":169:5)
#loc221 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":161:8)
#loc222 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":161:27)
#loc223 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":161:25)
#loc224 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":162:5)
#loc225 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":163:9)
#loc226 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":168:9)
#loc227 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":163:12)
#loc228 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":163:19)
#loc229 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":163:17)
#loc230 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":164:9)
#loc231 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":166:13)
#loc232 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":166:33)
#loc233 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":166:26)
#loc234 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":167:26)
#loc235 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":167:13)
#loc236 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":173:1)
#loc237 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":192:1)
#loc238 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":175:5)
#loc239 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":175:9)
#loc240 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":177:12)
#loc241 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":177:5)
#loc242 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":178:5)
#loc243 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":182:5)
#loc244 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":178:8)
#loc245 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":178:27)
#loc246 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":178:25)
#loc247 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":179:5)
#loc248 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":181:16)
#loc249 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":181:9)
#loc250 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":183:5)
#loc251 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":191:5)
#loc252 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":183:8)
#loc253 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":183:27)
#loc254 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":183:25)
#loc255 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":184:5)
#loc256 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":185:9)
#loc257 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":190:9)
#loc258 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":185:12)
#loc259 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":185:19)
#loc260 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":185:17)
#loc261 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":186:9)
#loc262 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":188:13)
#loc263 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":188:33)
#loc264 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":188:26)
#loc265 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":189:26)
#loc266 = loc("CWE190_Integer_Overflow__int_fgets_multiply_13.c":189:13)
#loc267 = loc(fused[#loc1, #loc2])
#loc268 = loc(fused[#loc3, #loc4])
#loc269 = loc(fused[#loc5, #loc6])
#loc270 = loc(fused[#loc7, #loc8])
#loc271 = loc(fused[#loc9, #loc10])
#loc272 = loc(fused[#loc12, #loc13])
#loc273 = loc(fused[#loc14, #loc15])
#loc274 = loc(fused[#loc16, #loc17])
#loc275 = loc(fused[#loc19, #loc18])
#loc276 = loc(fused[#loc20, #loc21])
#loc277 = loc(fused[#loc22, #loc23])
#loc278 = loc(fused[#loc25, #loc21])
#loc279 = loc(fused[#loc26, #loc27])
#loc280 = loc(fused[#loc28, #loc29])
#loc281 = loc(fused[#loc30, #loc31])
#loc282 = loc(fused[#loc35, #loc36])
#loc283 = loc(fused[#loc38, #loc39, #loc40, #loc31])
#loc284 = loc(fused[#loc43, #loc44])
#loc285 = loc(fused[#loc46, #loc47])
#loc286 = loc(fused[#loc48, #loc49])
#loc287 = loc(fused[#loc51, #loc47])
#loc288 = loc(fused[#loc52, #loc53])
#loc289 = loc(fused[#loc54, #loc55])
#loc290 = loc(fused[#loc57, #loc53])
#loc291 = loc(fused[#loc58, #loc59])
#loc292 = loc(fused[#loc63, #loc64])
#loc293 = loc(fused[#loc65, #loc66])
#loc294 = loc(fused[#loc67, #loc68])
#loc295 = loc(fused[#loc69, #loc70])
#loc296 = loc(fused[#loc71, #loc72])
#loc297 = loc(fused[#loc75, #loc76])
#loc298 = loc(fused[#loc77, #loc78])
#loc299 = loc(fused[#loc80, #loc79])
#loc300 = loc(fused[#loc81, #loc82])
#loc301 = loc(fused[#loc83, #loc84])
#loc302 = loc(fused[#loc86, #loc82])
#loc303 = loc(fused[#loc87, #loc88])
#loc304 = loc(fused[#loc89, #loc90])
#loc305 = loc(fused[#loc91, #loc92])
#loc306 = loc(fused[#loc96, #loc97])
#loc307 = loc(fused[#loc99, #loc100, #loc101, #loc92])
#loc308 = loc(fused[#loc104, #loc105])
#loc309 = loc(fused[#loc108, #loc109])
#loc310 = loc(fused[#loc110, #loc111])
#loc311 = loc(fused[#loc113, #loc114, #loc115, #loc109])
#loc312 = loc(fused[#loc117, #loc118])
#loc313 = loc(fused[#loc119, #loc120])
#loc314 = loc(fused[#loc122, #loc118])
#loc315 = loc(fused[#loc123, #loc124])
#loc316 = loc(fused[#loc126, #loc127])
#loc317 = loc(fused[#loc125, #loc128])
#loc318 = loc(fused[#loc130, #loc131, #loc132, #loc124])
#loc319 = loc(fused[#loc133, #loc134])
#loc320 = loc(fused[#loc139, #loc140])
#loc321 = loc(fused[#loc141, #loc142])
#loc322 = loc(fused[#loc144, #loc143])
#loc323 = loc(fused[#loc145, #loc146])
#loc324 = loc(fused[#loc147, #loc148])
#loc325 = loc(fused[#loc150, #loc146])
#loc326 = loc(fused[#loc151, #loc152])
#loc327 = loc(fused[#loc153, #loc154])
#loc328 = loc(fused[#loc155, #loc156])
#loc329 = loc(fused[#loc160, #loc161])
#loc330 = loc(fused[#loc163, #loc164, #loc165, #loc156])
#loc331 = loc(fused[#loc168, #loc169])
#loc332 = loc(fused[#loc172, #loc173])
#loc333 = loc(fused[#loc174, #loc175])
#loc334 = loc(fused[#loc177, #loc173])
#loc335 = loc(fused[#loc178, #loc179])
#loc336 = loc(fused[#loc180, #loc181])
#loc337 = loc(fused[#loc183, #loc179])
#loc338 = loc(fused[#loc184, #loc185])
#loc339 = loc(fused[#loc187, #loc188])
#loc340 = loc(fused[#loc186, #loc189])
#loc341 = loc(fused[#loc191, #loc192, #loc193, #loc185])
#loc342 = loc(fused[#loc194, #loc195])
#loc343 = loc(fused[#loc201, #loc202])
#loc344 = loc(fused[#loc203, #loc204])
#loc345 = loc(fused[#loc206, #loc205])
#loc346 = loc(fused[#loc207, #loc208])
#loc347 = loc(fused[#loc209, #loc210])
#loc348 = loc(fused[#loc212, #loc213, #loc214, #loc208])
#loc349 = loc(fused[#loc218, #loc217])
#loc350 = loc(fused[#loc219, #loc220])
#loc351 = loc(fused[#loc221, #loc222])
#loc352 = loc(fused[#loc224, #loc220])
#loc353 = loc(fused[#loc225, #loc226])
#loc354 = loc(fused[#loc227, #loc228])
#loc355 = loc(fused[#loc230, #loc226])
#loc356 = loc(fused[#loc231, #loc232])
#loc357 = loc(fused[#loc236, #loc237])
#loc358 = loc(fused[#loc238, #loc239])
#loc359 = loc(fused[#loc241, #loc240])
#loc360 = loc(fused[#loc242, #loc243])
#loc361 = loc(fused[#loc244, #loc245])
#loc362 = loc(fused[#loc247, #loc243])
#loc363 = loc(fused[#loc249, #loc248])
#loc364 = loc(fused[#loc250, #loc251])
#loc365 = loc(fused[#loc252, #loc253])
#loc366 = loc(fused[#loc255, #loc251])
#loc367 = loc(fused[#loc256, #loc257])
#loc368 = loc(fused[#loc258, #loc259])
#loc369 = loc(fused[#loc261, #loc257])
#loc370 = loc(fused[#loc262, #loc263])
