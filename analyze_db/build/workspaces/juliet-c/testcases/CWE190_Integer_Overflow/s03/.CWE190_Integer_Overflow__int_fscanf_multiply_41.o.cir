!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":22:21)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":22:25)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":68:25)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":68:29)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":47:25)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":47:29)
#loc107 = loc(fused[#loc10, #loc11])
#loc120 = loc(fused[#loc44, #loc45])
#loc133 = loc(fused[#loc80, #loc81])
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_multiply_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc103)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc105)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc10, #loc11])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc108)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc107)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc14)
    cir.br ^bb1 loc(#loc109)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc18)
    %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc110)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc111)
  ^bb2:  // pred: ^bb1
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    %6 = cir.const #cir.int<2> : !s32i loc(#loc13)
    %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc20)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc22)
    cir.br ^bb3 loc(#loc16)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc16)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc9)
  } loc(#loc106)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_multiply_41_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc113)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc27)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc29)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc104)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc30)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc29)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    cir.call @badSink(%8) : (!s32i) -> () loc(#loc32)
    cir.return loc(#loc24)
  } loc(#loc112)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_multiply_41_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc116)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc117)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc115)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc118)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc41)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc44, #loc45])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc121)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc120)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc48)
    cir.br ^bb1 loc(#loc122)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc52)
    %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc123)
    cir.brcond %4 ^bb2, ^bb8 loc(#loc124)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc125)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc56)
    %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc57)
    %7 = cir.const #cir.int<2> : !s32i loc(#loc58)
    %8 = cir.binop(div, %6, %7) : !s32i loc(#loc126)
    %9 = cir.cmp(lt, %5, %8) : !s32i, !cir.bool loc(#loc127)
    cir.brcond %9 ^bb4, ^bb5 loc(#loc128)
  ^bb4:  // pred: ^bb3
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc63)
    %11 = cir.const #cir.int<2> : !s32i loc(#loc47)
    %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc63)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc65)
    cir.br ^bb6 loc(#loc61)
  ^bb5:  // pred: ^bb3
    %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc41)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    cir.br ^bb6 loc(#loc55)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc55)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc50)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc50)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc43)
  } loc(#loc119)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc130)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc71)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc73)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc104)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc74)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc75)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc75)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc73)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc76)
    cir.call @goodB2GSink(%8) : (!s32i) -> () loc(#loc77)
    cir.return loc(#loc68)
  } loc(#loc129)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc80, #loc81])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc134)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc133)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    cir.br ^bb1 loc(#loc135)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc87)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc88)
    %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc136)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc137)
  ^bb2:  // pred: ^bb1
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc90)
    %6 = cir.const #cir.int<2> : !s32i loc(#loc83)
    %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc90)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc91)
    cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc92)
    cir.br ^bb3 loc(#loc86)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc86)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc79)
  } loc(#loc132)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc139)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc97)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc99)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    cir.call @goodG2BSink(%3) : (!s32i) -> () loc(#loc102)
    cir.return loc(#loc94)
  } loc(#loc138)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_multiply_41.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":38:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":22:1)
#loc9 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":30:1)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":27:9)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":27:29)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":23:1)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":24:5)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":29:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":24:8)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":24:15)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":25:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":27:22)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":28:22)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":28:9)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":32:1)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":40:1)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":34:5)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":34:9)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":36:12)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":36:5)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":38:5)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":38:12)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":39:13)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":39:5)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":95:1)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":99:1)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":97:5)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":97:13)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":98:5)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":98:13)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":80:23)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":68:1)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":83:1)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":75:13)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":75:33)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":69:1)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":70:5)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":82:5)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":70:8)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":70:15)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":71:5)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":73:9)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":81:9)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":73:13)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":73:21)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":73:29)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":73:30)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":74:9)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":77:9)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":79:9)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":75:26)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":76:26)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":76:13)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":80:13)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":85:1)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":93:1)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":87:5)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":87:9)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":89:12)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":89:5)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":91:5)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":91:12)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":91:19)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":92:17)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":92:5)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":47:1)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":55:1)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":52:9)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":52:29)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":48:1)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":49:5)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":54:5)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":49:8)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":49:15)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":50:5)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":52:22)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":53:22)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":53:9)
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":57:1)
#loc94 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":65:1)
#loc95 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":59:5)
#loc96 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":59:9)
#loc97 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":61:12)
#loc98 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":61:5)
#loc99 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":63:12)
#loc100 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":63:5)
#loc101 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":64:17)
#loc102 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_41.c":64:5)
#loc103 = loc(fused[#loc1, #loc2])
#loc104 = loc(fused[#loc3, #loc4])
#loc105 = loc(fused[#loc6, #loc7])
#loc106 = loc(fused[#loc8, #loc9])
#loc108 = loc(fused[#loc12, #loc13])
#loc109 = loc(fused[#loc15, #loc16])
#loc110 = loc(fused[#loc17, #loc18])
#loc111 = loc(fused[#loc19, #loc16])
#loc112 = loc(fused[#loc23, #loc24])
#loc113 = loc(fused[#loc25, #loc26])
#loc114 = loc(fused[#loc28, #loc27])
#loc115 = loc(fused[#loc33, #loc34])
#loc116 = loc(fused[#loc35, #loc36])
#loc117 = loc(fused[#loc37, #loc38])
#loc118 = loc(fused[#loc39, #loc40])
#loc119 = loc(fused[#loc42, #loc43])
#loc121 = loc(fused[#loc46, #loc47])
#loc122 = loc(fused[#loc49, #loc50])
#loc123 = loc(fused[#loc51, #loc52])
#loc124 = loc(fused[#loc53, #loc50])
#loc125 = loc(fused[#loc54, #loc55])
#loc126 = loc(fused[#loc57, #loc58])
#loc127 = loc(fused[#loc56, #loc59])
#loc128 = loc(fused[#loc60, #loc61, #loc62, #loc55])
#loc129 = loc(fused[#loc67, #loc68])
#loc130 = loc(fused[#loc69, #loc70])
#loc131 = loc(fused[#loc72, #loc71])
#loc132 = loc(fused[#loc78, #loc79])
#loc134 = loc(fused[#loc82, #loc83])
#loc135 = loc(fused[#loc85, #loc86])
#loc136 = loc(fused[#loc87, #loc88])
#loc137 = loc(fused[#loc89, #loc86])
#loc138 = loc(fused[#loc93, #loc94])
#loc139 = loc(fused[#loc95, #loc96])
#loc140 = loc(fused[#loc98, #loc97])
#loc141 = loc(fused[#loc100, #loc99])
