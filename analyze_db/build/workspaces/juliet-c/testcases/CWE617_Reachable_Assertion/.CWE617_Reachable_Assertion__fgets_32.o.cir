!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fgets_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc88)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc89)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc90)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc91)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc92)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc12)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"CWE617_Reachable_Assertion__fgets_32.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc12)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void CWE617_Reachable_Assertion__fgets_32_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc12)
  cir.func no_proto @CWE617_Reachable_Assertion__fgets_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc94)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc95)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc96)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc95)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc96)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc22)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc99)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc28)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc99)
      cir.scope {
        %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc101)
        %11 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc101)
        cir.store %11, %10 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc101)
        cir.scope {
          %12 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc35)
          %13 = cir.const #cir.int<3> : !s32i loc(#loc36)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc36)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc36)
          %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc36)
          %17 = cir.const #cir.int<2> : !s32i loc(#loc36)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc36)
          %19 = cir.binop(add, %16, %18) : !u64i loc(#loc36)
          %20 = cir.cast(integral, %19 : !u64i), !s32i loc(#loc36)
          %21 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc89)
          %22 = cir.load %21 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc37)
          %23 = cir.call @fgets(%12, %20, %22) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc38)
          %24 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc39)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc39)
          %26 = cir.cmp(ne, %23, %25) : !cir.ptr<!s8i>, !cir.bool loc(#loc103)
          cir.if %26 {
            %27 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc43)
            %28 = cir.call @atoi(%27) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc44)
            cir.store %28, %5 : !s32i, !cir.ptr<!s32i> loc(#loc105)
          } else {
            %27 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
            %28 = cir.cast(array_to_ptrdecay, %27 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
            cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc47)
          } loc(#loc104)
        } loc(#loc102)
      } loc(#loc100)
      %8 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc48)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
      cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    } loc(#loc98)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc108)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc55)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc108)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc12)
      cir.scope {
        cir.scope {
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc12)
          %10 = cir.const #cir.int<5> : !s32i loc(#loc12)
          %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc12)
          cir.if %11 {
          } else {
            %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc12)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc12)
            %14 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc12)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc12)
            %16 = cir.const #cir.int<54> : !s32i loc(#loc12)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc12)
            %18 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc12)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc12)
            cir.call @__assert_fail(%13, %15, %17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc12)
          } loc(#loc12)
        } loc(#loc12)
      } loc(#loc12)
    } loc(#loc107)
    cir.return loc(#loc14)
  } loc(#loc93)
  cir.func no_proto @CWE617_Reachable_Assertion__fgets_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc110)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc58)
    cir.return loc(#loc57)
  } loc(#loc109)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc60)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc112)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc113)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc114)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc113)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc114)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc69)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc70)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc117)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc75)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc76)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc117)
      %8 = cir.const #cir.int<5> : !s32i loc(#loc77)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc78)
      %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc77)
      cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc118)
      %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc80)
      %12 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc81)
      cir.store %11, %12 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    } loc(#loc116)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc121)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc86)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc87)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc121)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc60)
      cir.scope {
        cir.scope {
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc60)
          %10 = cir.const #cir.int<5> : !s32i loc(#loc60)
          %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc60)
          cir.if %11 {
          } else {
            %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc60)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc60)
            %14 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc60)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc60)
            %16 = cir.const #cir.int<79> : !s32i loc(#loc60)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc60)
            %18 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc60)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc60)
            cir.call @__assert_fail(%13, %15, %17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc60)
          } loc(#loc60)
        } loc(#loc60)
      } loc(#loc60)
    } loc(#loc120)
    cir.return loc(#loc62)
  } loc(#loc111)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fgets_32.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE617_Reachable_Assertion__fgets_32.c":46:27)
#loc10 = loc("/usr/include/assert.h":69:1)
#loc11 = loc("/usr/include/assert.h":71:43)
#loc12 = loc("CWE617_Reachable_Assertion__fgets_32.c":54:9)
#loc13 = loc("CWE617_Reachable_Assertion__fgets_32.c":27:1)
#loc14 = loc("CWE617_Reachable_Assertion__fgets_32.c":56:1)
#loc15 = loc("CWE617_Reachable_Assertion__fgets_32.c":29:5)
#loc16 = loc("CWE617_Reachable_Assertion__fgets_32.c":29:9)
#loc17 = loc("CWE617_Reachable_Assertion__fgets_32.c":30:5)
#loc18 = loc("CWE617_Reachable_Assertion__fgets_32.c":30:22)
#loc19 = loc("CWE617_Reachable_Assertion__fgets_32.c":31:5)
#loc20 = loc("CWE617_Reachable_Assertion__fgets_32.c":31:22)
#loc21 = loc("CWE617_Reachable_Assertion__fgets_32.c":33:13)
#loc22 = loc("CWE617_Reachable_Assertion__fgets_32.c":33:12)
#loc23 = loc("CWE617_Reachable_Assertion__fgets_32.c":33:5)
#loc24 = loc("CWE617_Reachable_Assertion__fgets_32.c":34:5)
#loc25 = loc("CWE617_Reachable_Assertion__fgets_32.c":50:5)
#loc26 = loc("CWE617_Reachable_Assertion__fgets_32.c":35:9)
#loc27 = loc("CWE617_Reachable_Assertion__fgets_32.c":35:21)
#loc28 = loc("CWE617_Reachable_Assertion__fgets_32.c":35:20)
#loc29 = loc("CWE617_Reachable_Assertion__fgets_32.c":36:9)
#loc30 = loc("CWE617_Reachable_Assertion__fgets_32.c":48:9)
#loc31 = loc("CWE617_Reachable_Assertion__fgets_32.c":37:13)
#loc32 = loc("CWE617_Reachable_Assertion__fgets_32.c":37:49)
#loc33 = loc("CWE617_Reachable_Assertion__fgets_32.c":39:13)
#loc34 = loc("CWE617_Reachable_Assertion__fgets_32.c":47:13)
#loc35 = loc("CWE617_Reachable_Assertion__fgets_32.c":39:23)
#loc36 = loc("CWE617_Reachable_Assertion__fgets_32.c":39:36)
#loc37 = loc("CWE617_Reachable_Assertion__fgets_32.c":39:53)
#loc38 = loc("CWE617_Reachable_Assertion__fgets_32.c":39:17)
#loc39 = loc("CWE617_Reachable_Assertion__fgets_32.c":39:63)
#loc40 = loc("CWE617_Reachable_Assertion__fgets_32.c":40:13)
#loc41 = loc("CWE617_Reachable_Assertion__fgets_32.c":43:13)
#loc42 = loc("CWE617_Reachable_Assertion__fgets_32.c":45:13)
#loc43 = loc("CWE617_Reachable_Assertion__fgets_32.c":42:29)
#loc44 = loc("CWE617_Reachable_Assertion__fgets_32.c":42:24)
#loc45 = loc("CWE617_Reachable_Assertion__fgets_32.c":42:17)
#loc46 = loc("CWE617_Reachable_Assertion__fgets_32.c":42:40)
#loc47 = loc("CWE617_Reachable_Assertion__fgets_32.c":46:17)
#loc48 = loc("CWE617_Reachable_Assertion__fgets_32.c":49:21)
#loc49 = loc("CWE617_Reachable_Assertion__fgets_32.c":49:10)
#loc50 = loc("CWE617_Reachable_Assertion__fgets_32.c":49:9)
#loc51 = loc("CWE617_Reachable_Assertion__fgets_32.c":51:5)
#loc52 = loc("CWE617_Reachable_Assertion__fgets_32.c":55:5)
#loc53 = loc("CWE617_Reachable_Assertion__fgets_32.c":52:9)
#loc54 = loc("CWE617_Reachable_Assertion__fgets_32.c":52:21)
#loc55 = loc("CWE617_Reachable_Assertion__fgets_32.c":52:20)
#loc56 = loc("CWE617_Reachable_Assertion__fgets_32.c":83:1)
#loc57 = loc("CWE617_Reachable_Assertion__fgets_32.c":86:1)
#loc58 = loc("CWE617_Reachable_Assertion__fgets_32.c":85:5)
#loc59 = loc("CWE617_Reachable_Assertion__fgets_32.c":85:13)
#loc60 = loc("CWE617_Reachable_Assertion__fgets_32.c":79:9)
#loc61 = loc("CWE617_Reachable_Assertion__fgets_32.c":63:1)
#loc62 = loc("CWE617_Reachable_Assertion__fgets_32.c":81:1)
#loc63 = loc("CWE617_Reachable_Assertion__fgets_32.c":65:5)
#loc64 = loc("CWE617_Reachable_Assertion__fgets_32.c":65:9)
#loc65 = loc("CWE617_Reachable_Assertion__fgets_32.c":66:5)
#loc66 = loc("CWE617_Reachable_Assertion__fgets_32.c":66:22)
#loc67 = loc("CWE617_Reachable_Assertion__fgets_32.c":67:5)
#loc68 = loc("CWE617_Reachable_Assertion__fgets_32.c":67:22)
#loc69 = loc("CWE617_Reachable_Assertion__fgets_32.c":69:13)
#loc70 = loc("CWE617_Reachable_Assertion__fgets_32.c":69:12)
#loc71 = loc("CWE617_Reachable_Assertion__fgets_32.c":69:5)
#loc72 = loc("CWE617_Reachable_Assertion__fgets_32.c":70:5)
#loc73 = loc("CWE617_Reachable_Assertion__fgets_32.c":75:5)
#loc74 = loc("CWE617_Reachable_Assertion__fgets_32.c":71:9)
#loc75 = loc("CWE617_Reachable_Assertion__fgets_32.c":71:21)
#loc76 = loc("CWE617_Reachable_Assertion__fgets_32.c":71:20)
#loc77 = loc("CWE617_Reachable_Assertion__fgets_32.c":73:16)
#loc78 = loc("CWE617_Reachable_Assertion__fgets_32.c":73:29)
#loc79 = loc("CWE617_Reachable_Assertion__fgets_32.c":73:9)
#loc80 = loc("CWE617_Reachable_Assertion__fgets_32.c":74:21)
#loc81 = loc("CWE617_Reachable_Assertion__fgets_32.c":74:10)
#loc82 = loc("CWE617_Reachable_Assertion__fgets_32.c":74:9)
#loc83 = loc("CWE617_Reachable_Assertion__fgets_32.c":76:5)
#loc84 = loc("CWE617_Reachable_Assertion__fgets_32.c":80:5)
#loc85 = loc("CWE617_Reachable_Assertion__fgets_32.c":77:9)
#loc86 = loc("CWE617_Reachable_Assertion__fgets_32.c":77:21)
#loc87 = loc("CWE617_Reachable_Assertion__fgets_32.c":77:20)
#loc88 = loc(fused[#loc1, #loc2])
#loc89 = loc(fused[#loc3, #loc4])
#loc90 = loc(fused[#loc5, #loc6])
#loc91 = loc(fused[#loc7, #loc8])
#loc92 = loc(fused[#loc10, #loc11])
#loc93 = loc(fused[#loc13, #loc14])
#loc94 = loc(fused[#loc15, #loc16])
#loc95 = loc(fused[#loc17, #loc18])
#loc96 = loc(fused[#loc19, #loc20])
#loc97 = loc(fused[#loc23, #loc21])
#loc98 = loc(fused[#loc24, #loc25])
#loc99 = loc(fused[#loc26, #loc27])
#loc100 = loc(fused[#loc29, #loc30])
#loc101 = loc(fused[#loc31, #loc32])
#loc102 = loc(fused[#loc33, #loc34])
#loc103 = loc(fused[#loc38, #loc39])
#loc104 = loc(fused[#loc40, #loc41, #loc42, #loc34])
#loc105 = loc(fused[#loc45, #loc46])
#loc106 = loc(fused[#loc50, #loc48])
#loc107 = loc(fused[#loc51, #loc52])
#loc108 = loc(fused[#loc53, #loc54])
#loc109 = loc(fused[#loc56, #loc57])
#loc110 = loc(fused[#loc58, #loc59])
#loc111 = loc(fused[#loc61, #loc62])
#loc112 = loc(fused[#loc63, #loc64])
#loc113 = loc(fused[#loc65, #loc66])
#loc114 = loc(fused[#loc67, #loc68])
#loc115 = loc(fused[#loc71, #loc69])
#loc116 = loc(fused[#loc72, #loc73])
#loc117 = loc(fused[#loc74, #loc75])
#loc118 = loc(fused[#loc79, #loc78])
#loc119 = loc(fused[#loc82, #loc80])
#loc120 = loc(fused[#loc83, #loc84])
#loc121 = loc(fused[#loc85, #loc86])
