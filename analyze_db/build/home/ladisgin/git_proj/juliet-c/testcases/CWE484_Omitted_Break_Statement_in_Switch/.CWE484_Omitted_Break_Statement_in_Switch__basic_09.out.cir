!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc51 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":125:10)
#loc52 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":125:14)
#loc53 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":125:20)
#loc54 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":125:32)
#loc147 = loc(fused[#loc51, #loc52])
#loc148 = loc(fused[#loc53, #loc54])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE484_Omitted_Break_Statement_in_Switch/CWE484_Omitted_Break_Statement_in_Switch__basic_09.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant external @GLOBAL_CONST_TRUE : !s32i {alignment = 4 : i64} loc(#loc131)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc132)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc133)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc7)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc8)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"2\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc9)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Invalid Number\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc10)
  cir.func no_proto @CWE484_Omitted_Break_Statement_in_Switch__basic_09_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc135)
    cir.br ^bb1 loc(#loc136)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc131)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %3 ^bb2, ^bb15 loc(#loc137)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc138)
  ^bb3:  // pred: ^bb2
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %5 = cir.const #cir.int<3> : !s32i loc(#loc22)
    %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc139)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc135)
    cir.br ^bb4 loc(#loc140)
  ^bb4:  // pred: ^bb3
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    cir.br ^bb5 loc(#loc23)
  ^bb5:  // pred: ^bb4
    cir.switch.flat %7 : !s32i, ^bb11 [
      0: ^bb7,
      1: ^bb9,
      2: ^bb10
    ] loc(#loc23)
  ^bb6:  // no predecessors
    cir.br ^bb7 loc(#loc26)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc7)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc27)
    cir.br ^bb8 loc(#loc26)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc28)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc8)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc8)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc29)
    cir.br ^bb12 loc(#loc30)
  ^bb10:  // pred: ^bb5
    %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc9)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc31)
    cir.br ^bb12 loc(#loc32)
  ^bb11:  // pred: ^bb5
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc10)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc10)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc33)
    cir.br ^bb12 loc(#loc34)
  ^bb12:  // 3 preds: ^bb9, ^bb10, ^bb11
    cir.br ^bb13 loc(#loc24)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc20)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc16)
  ^bb15:  // 2 preds: ^bb1, ^bb14
    cir.br ^bb16 loc(#loc16)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc12)
  } loc(#loc134)
  cir.func no_proto @CWE484_Omitted_Break_Statement_in_Switch__basic_09_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc142)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc143)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc36)
  } loc(#loc141)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc144)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc145)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc48)
  cir.func @main(%arg0: !s32i loc(fused[#loc51, #loc52]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc53, #loc54])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc147)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc148)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc50)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc55)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc55)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc56)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc57)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc57)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc58)
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc45)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %8 = cir.get_global @CWE484_Omitted_Break_Statement_in_Switch__basic_09_good : !cir.ptr<!cir.func<!void ()>> loc(#loc149)
    cir.call @CWE484_Omitted_Break_Statement_in_Switch__basic_09_good() : () -> () loc(#loc60)
    %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc46)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc47)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %13 = cir.get_global @CWE484_Omitted_Break_Statement_in_Switch__basic_09_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc150)
    cir.call @CWE484_Omitted_Break_Statement_in_Switch__basic_09_bad() : () -> () loc(#loc64)
    %14 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc48)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc67)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    cir.return %17 : !s32i loc(#loc151)
  } loc(#loc146)
  cir.global "private" constant external @GLOBAL_CONST_FALSE : !s32i {alignment = 4 : i64} loc(#loc152)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc71)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc154)
    cir.br ^bb1 loc(#loc155)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc152)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc78)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc156)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc71)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    cir.br ^bb15 loc(#loc80)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc157)
  ^bb4:  // pred: ^bb3
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
    %7 = cir.const #cir.int<3> : !s32i loc(#loc86)
    %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc158)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc154)
    cir.br ^bb5 loc(#loc159)
  ^bb5:  // pred: ^bb4
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    cir.br ^bb6 loc(#loc87)
  ^bb6:  // pred: ^bb5
    cir.switch.flat %9 : !s32i, ^bb11 [
      0: ^bb8,
      1: ^bb9,
      2: ^bb10
    ] loc(#loc87)
  ^bb7:  // no predecessors
    cir.br ^bb8 loc(#loc90)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc91)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc91)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    cir.br ^bb12 loc(#loc93)
  ^bb9:  // pred: ^bb6
    %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc94)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc94)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    cir.br ^bb12 loc(#loc96)
  ^bb10:  // pred: ^bb6
    %14 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc97)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc97)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    cir.br ^bb12 loc(#loc99)
  ^bb11:  // pred: ^bb6
    %16 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc100)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc100)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc101)
    cir.br ^bb12 loc(#loc102)
  ^bb12:  // 4 preds: ^bb8, ^bb9, ^bb10, ^bb11
    cir.br ^bb13 loc(#loc88)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc84)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc77)
  ^bb15:  // 2 preds: ^bb2, ^bb14
    cir.br ^bb16 loc(#loc77)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc73)
  } loc(#loc153)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc161)
    cir.br ^bb1 loc(#loc162)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc131)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc109)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc109)
    cir.brcond %3 ^bb2, ^bb14 loc(#loc163)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc164)
  ^bb3:  // pred: ^bb2
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
    %5 = cir.const #cir.int<3> : !s32i loc(#loc114)
    %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc165)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    cir.br ^bb4 loc(#loc166)
  ^bb4:  // pred: ^bb3
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    cir.br ^bb5 loc(#loc115)
  ^bb5:  // pred: ^bb4
    cir.switch.flat %7 : !s32i, ^bb10 [
      0: ^bb7,
      1: ^bb8,
      2: ^bb9
    ] loc(#loc115)
  ^bb6:  // no predecessors
    cir.br ^bb7 loc(#loc118)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc119)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc119)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    cir.br ^bb11 loc(#loc121)
  ^bb8:  // pred: ^bb5
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc122)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc122)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc123)
    cir.br ^bb11 loc(#loc124)
  ^bb9:  // pred: ^bb5
    %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc125)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc125)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc126)
    cir.br ^bb11 loc(#loc127)
  ^bb10:  // pred: ^bb5
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc128)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc128)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc129)
    cir.br ^bb11 loc(#loc130)
  ^bb11:  // 4 preds: ^bb7, ^bb8, ^bb9, ^bb10
    cir.br ^bb12 loc(#loc116)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc112)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc108)
  ^bb14:  // 2 preds: ^bb1, ^bb13
    cir.br ^bb15 loc(#loc108)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc104)
  } loc(#loc160)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE484_Omitted_Break_Statement_in_Switch/CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":109:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":109:18)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":30:27)
#loc8 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":32:27)
#loc9 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":35:27)
#loc10 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":38:27)
#loc11 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":20:1)
#loc12 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":43:1)
#loc13 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":25:13)
#loc14 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":25:32)
#loc15 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":22:5)
#loc16 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":42:5)
#loc17 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":22:8)
#loc18 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":23:5)
#loc19 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":24:9)
#loc20 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":41:9)
#loc21 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":25:22)
#loc22 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":25:31)
#loc23 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":27:13)
#loc24 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":40:13)
#loc25 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":27:21)
#loc26 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":29:13)
#loc27 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":30:17)
#loc28 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":31:13)
#loc29 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":32:17)
#loc30 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":33:17)
#loc31 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":35:17)
#loc32 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":36:17)
#loc33 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":38:17)
#loc34 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":39:17)
#loc35 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":110:1)
#loc36 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":114:1)
#loc37 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":112:5)
#loc38 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":112:11)
#loc39 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":113:5)
#loc40 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":113:11)
#loc41 = loc("/usr/include/stdlib.h":575:1)
#loc42 = loc("/usr/include/stdlib.h":575:41)
#loc43 = loc("/usr/include/time.h":76:1)
#loc44 = loc("/usr/include/time.h":76:38)
#loc45 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":130:15)
#loc46 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":132:15)
#loc47 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":135:15)
#loc48 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":137:15)
#loc49 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":125:1)
#loc50 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":140:1)
#loc55 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":126:1)
#loc56 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":128:27)
#loc57 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":128:22)
#loc58 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":128:5)
#loc59 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":130:5)
#loc60 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":131:5)
#loc61 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":131:61)
#loc62 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":132:5)
#loc63 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":135:5)
#loc64 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":136:5)
#loc65 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":136:60)
#loc66 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":137:5)
#loc67 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":139:12)
#loc68 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":139:5)
#loc69 = loc("../../testcasesupport/std_testcase.h":110:1)
#loc70 = loc("../../testcasesupport/std_testcase.h":110:18)
#loc71 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":55:19)
#loc72 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":50:1)
#loc73 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":80:1)
#loc74 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":60:13)
#loc75 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":60:32)
#loc76 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":52:5)
#loc77 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":79:5)
#loc78 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":52:8)
#loc79 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":53:5)
#loc80 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":56:5)
#loc81 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":58:5)
#loc82 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":55:9)
#loc83 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":59:9)
#loc84 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":78:9)
#loc85 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":60:22)
#loc86 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":60:31)
#loc87 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":63:13)
#loc88 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":77:13)
#loc89 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":63:21)
#loc90 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":65:13)
#loc91 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":66:27)
#loc92 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":66:17)
#loc93 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":67:17)
#loc94 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":69:27)
#loc95 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":69:17)
#loc96 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":70:17)
#loc97 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":72:27)
#loc98 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":72:17)
#loc99 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":73:17)
#loc100 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":75:27)
#loc101 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":75:17)
#loc102 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":76:17)
#loc103 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":83:1)
#loc104 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":108:1)
#loc105 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":88:13)
#loc106 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":88:32)
#loc107 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":85:5)
#loc108 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":107:5)
#loc109 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":85:8)
#loc110 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":86:5)
#loc111 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":87:9)
#loc112 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":106:9)
#loc113 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":88:22)
#loc114 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":88:31)
#loc115 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":91:13)
#loc116 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":105:13)
#loc117 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":91:21)
#loc118 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":93:13)
#loc119 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":94:27)
#loc120 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":94:17)
#loc121 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":95:17)
#loc122 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":97:27)
#loc123 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":97:17)
#loc124 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":98:17)
#loc125 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":100:27)
#loc126 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":100:17)
#loc127 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":101:17)
#loc128 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":103:27)
#loc129 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":103:17)
#loc130 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_09.c":104:17)
#loc131 = loc(fused[#loc1, #loc2])
#loc132 = loc(fused[#loc3, #loc4])
#loc133 = loc(fused[#loc5, #loc6])
#loc134 = loc(fused[#loc11, #loc12])
#loc135 = loc(fused[#loc13, #loc14])
#loc136 = loc(fused[#loc15, #loc16])
#loc137 = loc(fused[#loc18, #loc16])
#loc138 = loc(fused[#loc19, #loc20])
#loc139 = loc(fused[#loc21, #loc22])
#loc140 = loc(fused[#loc23, #loc24])
#loc141 = loc(fused[#loc35, #loc36])
#loc142 = loc(fused[#loc37, #loc38])
#loc143 = loc(fused[#loc39, #loc40])
#loc144 = loc(fused[#loc41, #loc42])
#loc145 = loc(fused[#loc43, #loc44])
#loc146 = loc(fused[#loc49, #loc50])
#loc149 = loc(fused[#loc60, #loc61])
#loc150 = loc(fused[#loc64, #loc65])
#loc151 = loc(fused[#loc68, #loc67])
#loc152 = loc(fused[#loc69, #loc70])
#loc153 = loc(fused[#loc72, #loc73])
#loc154 = loc(fused[#loc74, #loc75])
#loc155 = loc(fused[#loc76, #loc77])
#loc156 = loc(fused[#loc79, #loc80, #loc81, #loc77])
#loc157 = loc(fused[#loc83, #loc84])
#loc158 = loc(fused[#loc85, #loc86])
#loc159 = loc(fused[#loc87, #loc88])
#loc160 = loc(fused[#loc103, #loc104])
#loc161 = loc(fused[#loc105, #loc106])
#loc162 = loc(fused[#loc107, #loc108])
#loc163 = loc(fused[#loc110, #loc108])
#loc164 = loc(fused[#loc111, #loc112])
#loc165 = loc(fused[#loc113, #loc114])
#loc166 = loc(fused[#loc115, #loc116])
