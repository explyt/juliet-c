clang: warning: argument unused during compilation: '-c' [-Wunused-command-line-argument]
CWE480_Use_of_Incorrect_Operator__basic_11.c:54:12: warning: comparison of function 'helperBad' equal to a null pointer is always false [-Wtautological-pointer-compare]
   54 |         if(helperBad == NULL)
      |            ^~~~~~~~~    ~~~~
CWE480_Use_of_Incorrect_Operator__basic_11.c:54:12: note: prefix with the address-of operator to silence this warning
   54 |         if(helperBad == NULL)
      |            ^
      |            &
CWE480_Use_of_Incorrect_Operator__basic_11.c:54:12: note: suffix with parentheses to turn this into a function call
   54 |         if(helperBad == NULL)
      |            ^
      |                     ()
loc(fused["CWE480_Use_of_Incorrect_Operator__basic_11.c":54:12, "CWE480_Use_of_Incorrect_Operator__basic_11.c":54:25]): error: 'cir.cmp' op requires all operands to have the same type
fatal error: error in backend: CIR codegen: module verification error before running CIR passes
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /home/ladisgin/git_proj/clangir/build/bin/clang -S -Xclang -emit-cir -Wno-implicit-function-declaration -Wno-int-conversion -I ../../testcasesupport -DINCLUDEMAIN -c CWE480_Use_of_Incorrect_Operator__basic_11.c -o /home/ladisgin/git_proj/juliet-c/testcases/CWE480_Use_of_Incorrect_Operator/.CWE480_Use_of_Incorrect_Operator__basic_11.out.cir
1.	<eof> parser at end of file
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang     0x0000000001aaf03b llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 43
1  clang     0x0000000001aac584 llvm::sys::CleanupOnSignal(unsigned long) + 132
2  clang     0x00000000019f6336 llvm::CrashRecoveryContext::HandleExit(int) + 118
3  clang     0x0000000001aa560e llvm::sys::Process::Exit(int, bool) + 30
4  clang     0x000000000051fe63
5  clang     0x0000000001a01359 llvm::report_fatal_error(llvm::Twine const&, bool) + 89
6  clang     0x0000000001a014cf
7  clang     0x000000000309dbc5
8  clang     0x00000000053c0c1c clang::ParseAST(clang::Sema&, bool, bool) + 1212
9  clang     0x0000000002741cd9 clang::FrontendAction::Execute() + 169
10 clang     0x00000000026bdf7e clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 1886
11 clang     0x00000000028273ee clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 1742
12 clang     0x0000000000522f6b cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 6299
13 clang     0x0000000000519f00
14 clang     0x00000000024813a9
15 clang     0x00000000019f6272 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 146
16 clang     0x000000000248376e
17 clang     0x000000000244139b clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 155
18 clang     0x000000000244245e clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const + 222
19 clang     0x000000000244e554 clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 356
20 clang     0x000000000051f110 clang_main(int, char**, llvm::ToolContext const&) + 9168
21 clang     0x000000000042abb3 main + 83
22 libc.so.6 0x00007f799b80f248
23 libc.so.6 0x00007f799b80f30b __libc_start_main + 139
24 clang     0x0000000000519525 _start + 37
clang: error: clang frontend command failed with exit code 70 (use -v to see invocation)
clang version 20.0.0git (git@github.com:llvm/clangir.git 888f00c5bd78e8355c9f7288c1a3237884a04dbc)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /home/ladisgin/git_proj/clangir/build/bin
Build config: +assertions
clang: note: diagnostic msg: Error generating preprocessed source(s).
