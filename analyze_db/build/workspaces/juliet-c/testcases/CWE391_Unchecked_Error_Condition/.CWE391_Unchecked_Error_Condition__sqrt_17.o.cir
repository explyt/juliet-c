!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc1)
  cir.func private @printDoubleLine(!cir.double) loc(#loc75)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc77)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc10)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc79)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc12)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc80)
        cir.condition(%4) loc(#loc14)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc83)
            %3 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc20)
            %4 = cir.const #cir.int<1> : !s32i loc(#loc21)
            %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc22)
            %6 = cir.cast(int_to_float, %5 : !s32i), !cir.double loc(#loc22)
            %7 = cir.call @sqrt(%6) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc20)
            cir.store %7, %2 : !cir.double, !cir.ptr<!cir.double> loc(#loc84)
            %8 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc25)
            cir.call @printDoubleLine(%8) : (!cir.double) -> () loc(#loc26)
          } loc(#loc82)
        } loc(#loc81)
        cir.yield loc(#loc9)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc28)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
        cir.yield loc(#loc78)
      } loc(#loc78)
    } loc(#loc78)
    cir.return loc(#loc5)
  } loc(#loc76)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc87)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    cir.return loc(#loc30)
  } loc(#loc86)
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc88)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc89)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc37)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc90)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc92)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc46)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc94)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc49)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc95)
        cir.condition(%4) loc(#loc50)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc98)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc56)
            %4 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc57)
            cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc99)
            %5 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc58)
            %6 = cir.const #cir.int<1> : !s32i loc(#loc59)
            %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc60)
            %8 = cir.cast(int_to_float, %7 : !s32i), !cir.double loc(#loc60)
            %9 = cir.call @sqrt(%8) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc58)
            cir.store %9, %2 : !cir.double, !cir.ptr<!cir.double> loc(#loc100)
            cir.scope {
              %11 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc65)
              %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc65)
              %13 = cir.const #cir.int<33> : !s32i loc(#loc66)
              %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc102)
              cir.if %14 {
                %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc37)
                %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc37)
                cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc68)
                %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc69)
                %18 = cir.const #cir.int<1> : !s32i loc(#loc70)
                cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc69)
              } loc(#loc103)
            } loc(#loc101)
            %10 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc71)
            cir.call @printDoubleLine(%10) : (!cir.double) -> () loc(#loc72)
          } loc(#loc97)
        } loc(#loc96)
        cir.yield loc(#loc45)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc74)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc104)
        cir.yield loc(#loc93)
      } loc(#loc93)
    } loc(#loc93)
    cir.return loc(#loc41)
  } loc(#loc91)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_17.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc4 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":24:1)
#loc5 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":36:1)
#loc6 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":26:5)
#loc7 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":26:9)
#loc8 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":27:5)
#loc9 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":35:5)
#loc10 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":27:13)
#loc11 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":27:9)
#loc12 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":27:16)
#loc13 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":27:20)
#loc14 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":27:18)
#loc15 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":28:5)
#loc16 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":29:9)
#loc17 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":34:9)
#loc18 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":30:13)
#loc19 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":30:20)
#loc20 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":31:36)
#loc21 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":31:50)
#loc22 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":31:49)
#loc23 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":31:13)
#loc24 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":31:51)
#loc25 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":33:29)
#loc26 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":33:13)
#loc27 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":27:24)
#loc28 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":27:23)
#loc29 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":63:1)
#loc30 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":66:1)
#loc31 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":65:5)
#loc32 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":65:11)
#loc33 = loc("/usr/include/errno.h":37:1)
#loc34 = loc("/usr/include/errno.h":37:45)
#loc35 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc36 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc37 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":55:27)
#loc38 = loc("/usr/include/stdlib.h":756:1)
#loc39 = loc("/usr/include/stdlib.h":756:70)
#loc40 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":43:1)
#loc41 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":61:1)
#loc42 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":45:5)
#loc43 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":45:9)
#loc44 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":46:5)
#loc45 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":60:5)
#loc46 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":46:13)
#loc47 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":46:9)
#loc48 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":46:16)
#loc49 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":46:20)
#loc50 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":46:18)
#loc51 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":47:5)
#loc52 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":48:9)
#loc53 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":59:9)
#loc54 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":49:13)
#loc55 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":49:20)
#loc56 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":50:21)
#loc57 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":50:13)
#loc58 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":51:36)
#loc59 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":51:50)
#loc60 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":51:49)
#loc61 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":51:13)
#loc62 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":51:51)
#loc63 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":53:13)
#loc64 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":57:13)
#loc65 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":53:17)
#loc66 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":53:26)
#loc67 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":54:13)
#loc68 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":55:17)
#loc69 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":56:17)
#loc70 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":56:22)
#loc71 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":58:29)
#loc72 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":58:13)
#loc73 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":46:24)
#loc74 = loc("CWE391_Unchecked_Error_Condition__sqrt_17.c":46:23)
#loc75 = loc(fused[#loc2, #loc3])
#loc76 = loc(fused[#loc4, #loc5])
#loc77 = loc(fused[#loc6, #loc7])
#loc78 = loc(fused[#loc8, #loc9])
#loc79 = loc(fused[#loc11, #loc10])
#loc80 = loc(fused[#loc12, #loc13])
#loc81 = loc(fused[#loc15, #loc9])
#loc82 = loc(fused[#loc16, #loc17])
#loc83 = loc(fused[#loc18, #loc19])
#loc84 = loc(fused[#loc23, #loc24])
#loc85 = loc(fused[#loc28, #loc27])
#loc86 = loc(fused[#loc29, #loc30])
#loc87 = loc(fused[#loc31, #loc32])
#loc88 = loc(fused[#loc33, #loc34])
#loc89 = loc(fused[#loc35, #loc36])
#loc90 = loc(fused[#loc38, #loc39])
#loc91 = loc(fused[#loc40, #loc41])
#loc92 = loc(fused[#loc42, #loc43])
#loc93 = loc(fused[#loc44, #loc45])
#loc94 = loc(fused[#loc47, #loc46])
#loc95 = loc(fused[#loc48, #loc49])
#loc96 = loc(fused[#loc51, #loc45])
#loc97 = loc(fused[#loc52, #loc53])
#loc98 = loc(fused[#loc54, #loc55])
#loc99 = loc(fused[#loc57, #loc56])
#loc100 = loc(fused[#loc61, #loc62])
#loc101 = loc(fused[#loc63, #loc64])
#loc102 = loc(fused[#loc65, #loc66])
#loc103 = loc(fused[#loc67, #loc64])
#loc104 = loc(fused[#loc74, #loc73])
