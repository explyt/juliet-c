!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fgets_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc181)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc182)
  cir.func private  @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc183)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc184)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @printIntLine(!s32i) loc(#loc185)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_fgets_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc187)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc188)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc189)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc19)
    cir.store %3, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc190)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc23)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc192)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc26)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc193)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc27)
        cir.condition(%8) loc(#loc27)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc196)
            cir.scope {
              %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc35)
              %7 = cir.const #cir.int<20> : !s32i loc(#loc36)
              %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc182)
              %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc37)
              %10 = cir.call @fgets(%6, %7, %9) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc38)
              %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc39)
              %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc39)
              %13 = cir.cmp(ne, %10, %12) : !cir.ptr<!s8i>, !s32i loc(#loc198)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc40)
              cir.if %14 {
                %15 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc44)
                %16 = cir.call @atof(%15) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc45)
                %17 = cir.cast(floating, %16 : !cir.double), !cir.float loc(#loc45)
                cir.store %17, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc200)
              } else {
                %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
                %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc48)
              } loc(#loc199)
            } loc(#loc197)
          } loc(#loc195)
        } loc(#loc194)
        cir.yield loc(#loc22)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc50)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
        cir.yield loc(#loc191)
      } loc(#loc191)
    } loc(#loc191)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc53)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc203)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc55)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc56)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc204)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc57)
        cir.condition(%8) loc(#loc57)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc207)
            %6 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc63)
            %7 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc64)
            %8 = cir.cast(floating, %7 : !cir.float), !cir.double loc(#loc64)
            %9 = cir.binop(div, %6, %8) : !cir.double loc(#loc208)
            %10 = cir.cast(float_to_int, %9 : !cir.double), !s32i loc(#loc208)
            cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc207)
            %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc65)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc66)
          } loc(#loc206)
        } loc(#loc205)
        cir.yield loc(#loc52)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc67)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc68)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc209)
        cir.yield loc(#loc202)
      } loc(#loc202)
    } loc(#loc202)
    cir.return loc(#loc13)
  } loc(#loc186)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_fgets_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc211)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc71)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc212)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc73)
    cir.return loc(#loc70)
  } loc(#loc210)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc75)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc214)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc215)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc216)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc83)
    cir.store %3, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc217)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc87)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc219)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc90)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc220)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc91)
        cir.condition(%8) loc(#loc91)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc223)
            cir.scope {
              %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc99)
              %7 = cir.const #cir.int<20> : !s32i loc(#loc100)
              %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc182)
              %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc101)
              %10 = cir.call @fgets(%6, %7, %9) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc102)
              %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc103)
              %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc103)
              %13 = cir.cmp(ne, %10, %12) : !cir.ptr<!s8i>, !s32i loc(#loc225)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc104)
              cir.if %14 {
                %15 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc108)
                %16 = cir.call @atof(%15) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc109)
                %17 = cir.cast(floating, %16 : !cir.double), !cir.float loc(#loc109)
                cir.store %17, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc227)
              } else {
                %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc112)
                %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc112)
                cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc113)
              } loc(#loc226)
            } loc(#loc224)
          } loc(#loc222)
        } loc(#loc221)
        cir.yield loc(#loc86)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc114)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc115)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc228)
        cir.yield loc(#loc218)
      } loc(#loc218)
    } loc(#loc218)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc118)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc230)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc120)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc121)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc231)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc122)
        cir.condition(%8) loc(#loc122)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc126)
            %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc126)
            %7 = cir.fabs %6 : !cir.double loc(#loc126)
            %8 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc127)
            %9 = cir.cmp(gt, %7, %8) : !cir.double, !s32i loc(#loc234)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc129)
            cir.if %10 {
              %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc236)
              %12 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc135)
              %13 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc136)
              %14 = cir.cast(floating, %13 : !cir.float), !cir.double loc(#loc136)
              %15 = cir.binop(div, %12, %14) : !cir.double loc(#loc237)
              %16 = cir.cast(float_to_int, %15 : !cir.double), !s32i loc(#loc237)
              cir.store %16, %11 : !s32i, !cir.ptr<!s32i> loc(#loc236)
              %17 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc137)
              cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc138)
            } else {
              %11 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc75)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc75)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc139)
            } loc(#loc235)
          } loc(#loc233)
        } loc(#loc232)
        cir.yield loc(#loc117)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc140)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc141)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc238)
        cir.yield loc(#loc229)
      } loc(#loc229)
    } loc(#loc229)
    cir.return loc(#loc77)
  } loc(#loc213)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc240)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc241)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc242)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc149)
    cir.store %3, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc243)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc153)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc245)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc155)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc156)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc246)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc157)
        cir.condition(%8) loc(#loc157)
      } body {
        cir.scope {
          %5 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc159)
          cir.store %5, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc248)
        } loc(#loc247)
        cir.yield loc(#loc152)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc161)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc162)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc249)
        cir.yield loc(#loc244)
      } loc(#loc244)
    } loc(#loc244)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc165)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc251)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc167)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc168)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc252)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc169)
        cir.condition(%8) loc(#loc169)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc255)
            %6 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc175)
            %7 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc176)
            %8 = cir.cast(floating, %7 : !cir.float), !cir.double loc(#loc176)
            %9 = cir.binop(div, %6, %8) : !cir.double loc(#loc256)
            %10 = cir.cast(float_to_int, %9 : !cir.double), !s32i loc(#loc256)
            cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc255)
            %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc177)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc178)
          } loc(#loc254)
        } loc(#loc253)
        cir.yield loc(#loc164)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc179)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc180)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc257)
        cir.yield loc(#loc250)
      } loc(#loc250)
    } loc(#loc250)
    cir.return loc(#loc143)
  } loc(#loc239)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fgets_17.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":102:1)
#loc6 = loc("/usr/include/stdlib.h":103:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":44:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":26:1)
#loc13 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":56:1)
#loc14 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":28:5)
#loc15 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":28:9)
#loc16 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":28:11)
#loc17 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":29:5)
#loc18 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":29:11)
#loc19 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":31:12)
#loc20 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":31:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":32:5)
#loc22 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":47:5)
#loc23 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":32:13)
#loc24 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":32:9)
#loc25 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":32:16)
#loc26 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":32:20)
#loc27 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":32:18)
#loc28 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":33:5)
#loc29 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":34:9)
#loc30 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":46:9)
#loc31 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":35:13)
#loc32 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":35:45)
#loc33 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":37:13)
#loc34 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":45:13)
#loc35 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":37:23)
#loc36 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":37:36)
#loc37 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":37:53)
#loc38 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":37:17)
#loc39 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":37:63)
#loc40 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":37:60)
#loc41 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":38:13)
#loc42 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":41:13)
#loc43 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":43:13)
#loc44 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":40:36)
#loc45 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":40:31)
#loc46 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":40:17)
#loc47 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":40:47)
#loc48 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":44:17)
#loc49 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":32:24)
#loc50 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":32:23)
#loc51 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":48:5)
#loc52 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":55:5)
#loc53 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":48:13)
#loc54 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":48:9)
#loc55 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":48:16)
#loc56 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":48:20)
#loc57 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":48:18)
#loc58 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":49:5)
#loc59 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":50:9)
#loc60 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":54:9)
#loc61 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":52:13)
#loc62 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":52:44)
#loc63 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":52:32)
#loc64 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":52:40)
#loc65 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":53:26)
#loc66 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":53:13)
#loc67 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":48:24)
#loc68 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":48:23)
#loc69 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":122:1)
#loc70 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":126:1)
#loc71 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":124:5)
#loc72 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":124:13)
#loc73 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":125:5)
#loc74 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":125:13)
#loc75 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":95:23)
#loc76 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":63:1)
#loc77 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":98:1)
#loc78 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":65:5)
#loc79 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":65:9)
#loc80 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":65:11)
#loc81 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":66:5)
#loc82 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":66:11)
#loc83 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":68:12)
#loc84 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":68:5)
#loc85 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":69:5)
#loc86 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":84:5)
#loc87 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":69:13)
#loc88 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":69:9)
#loc89 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":69:16)
#loc90 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":69:20)
#loc91 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":69:18)
#loc92 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":70:5)
#loc93 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":71:9)
#loc94 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":83:9)
#loc95 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":72:13)
#loc96 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":72:45)
#loc97 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":74:13)
#loc98 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":82:13)
#loc99 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":74:23)
#loc100 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":74:36)
#loc101 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":74:53)
#loc102 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":74:17)
#loc103 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":74:63)
#loc104 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":74:60)
#loc105 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":75:13)
#loc106 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":78:13)
#loc107 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":80:13)
#loc108 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":77:36)
#loc109 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":77:31)
#loc110 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":77:17)
#loc111 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":77:47)
#loc112 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":81:27)
#loc113 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":81:17)
#loc114 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":69:24)
#loc115 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":69:23)
#loc116 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":85:5)
#loc117 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":97:5)
#loc118 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":85:13)
#loc119 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":85:9)
#loc120 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":85:16)
#loc121 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":85:20)
#loc122 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":85:18)
#loc123 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":86:5)
#loc124 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":88:9)
#loc125 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":96:9)
#loc126 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":88:17)
#loc127 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":88:25)
#loc128 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":88:12)
#loc129 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":88:23)
#loc130 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":89:9)
#loc131 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":92:9)
#loc132 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":94:9)
#loc133 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":90:13)
#loc134 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":90:44)
#loc135 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":90:32)
#loc136 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":90:40)
#loc137 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":91:26)
#loc138 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":91:13)
#loc139 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":95:13)
#loc140 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":85:24)
#loc141 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":85:23)
#loc142 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":101:1)
#loc143 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":120:1)
#loc144 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":103:5)
#loc145 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":103:9)
#loc146 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":103:11)
#loc147 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":104:5)
#loc148 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":104:11)
#loc149 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":106:12)
#loc150 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":106:5)
#loc151 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":107:5)
#loc152 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":111:5)
#loc153 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":107:13)
#loc154 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":107:9)
#loc155 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":107:16)
#loc156 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":107:20)
#loc157 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":107:18)
#loc158 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":108:5)
#loc159 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":110:16)
#loc160 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":110:9)
#loc161 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":107:24)
#loc162 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":107:23)
#loc163 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":112:5)
#loc164 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":119:5)
#loc165 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":112:13)
#loc166 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":112:9)
#loc167 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":112:16)
#loc168 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":112:20)
#loc169 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":112:18)
#loc170 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":113:5)
#loc171 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":114:9)
#loc172 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":118:9)
#loc173 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":116:13)
#loc174 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":116:44)
#loc175 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":116:32)
#loc176 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":116:40)
#loc177 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":117:26)
#loc178 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":117:13)
#loc179 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":112:24)
#loc180 = loc("CWE369_Divide_by_Zero__float_fgets_17.c":112:23)
#loc181 = loc(fused[#loc1, #loc2])
#loc182 = loc(fused[#loc3, #loc4])
#loc183 = loc(fused[#loc5, #loc6])
#loc184 = loc(fused[#loc7, #loc8])
#loc185 = loc(fused[#loc10, #loc11])
#loc186 = loc(fused[#loc12, #loc13])
#loc187 = loc(fused[#loc14, #loc15])
#loc188 = loc(fused[#loc14, #loc16])
#loc189 = loc(fused[#loc17, #loc18])
#loc190 = loc(fused[#loc20, #loc19])
#loc191 = loc(fused[#loc21, #loc22])
#loc192 = loc(fused[#loc24, #loc23])
#loc193 = loc(fused[#loc25, #loc26])
#loc194 = loc(fused[#loc28, #loc22])
#loc195 = loc(fused[#loc29, #loc30])
#loc196 = loc(fused[#loc31, #loc32])
#loc197 = loc(fused[#loc33, #loc34])
#loc198 = loc(fused[#loc38, #loc39])
#loc199 = loc(fused[#loc41, #loc42, #loc43, #loc34])
#loc200 = loc(fused[#loc46, #loc47])
#loc201 = loc(fused[#loc50, #loc49])
#loc202 = loc(fused[#loc51, #loc52])
#loc203 = loc(fused[#loc54, #loc53])
#loc204 = loc(fused[#loc55, #loc56])
#loc205 = loc(fused[#loc58, #loc52])
#loc206 = loc(fused[#loc59, #loc60])
#loc207 = loc(fused[#loc61, #loc62])
#loc208 = loc(fused[#loc63, #loc64])
#loc209 = loc(fused[#loc68, #loc67])
#loc210 = loc(fused[#loc69, #loc70])
#loc211 = loc(fused[#loc71, #loc72])
#loc212 = loc(fused[#loc73, #loc74])
#loc213 = loc(fused[#loc76, #loc77])
#loc214 = loc(fused[#loc78, #loc79])
#loc215 = loc(fused[#loc78, #loc80])
#loc216 = loc(fused[#loc81, #loc82])
#loc217 = loc(fused[#loc84, #loc83])
#loc218 = loc(fused[#loc85, #loc86])
#loc219 = loc(fused[#loc88, #loc87])
#loc220 = loc(fused[#loc89, #loc90])
#loc221 = loc(fused[#loc92, #loc86])
#loc222 = loc(fused[#loc93, #loc94])
#loc223 = loc(fused[#loc95, #loc96])
#loc224 = loc(fused[#loc97, #loc98])
#loc225 = loc(fused[#loc102, #loc103])
#loc226 = loc(fused[#loc105, #loc106, #loc107, #loc98])
#loc227 = loc(fused[#loc110, #loc111])
#loc228 = loc(fused[#loc115, #loc114])
#loc229 = loc(fused[#loc116, #loc117])
#loc230 = loc(fused[#loc119, #loc118])
#loc231 = loc(fused[#loc120, #loc121])
#loc232 = loc(fused[#loc123, #loc117])
#loc233 = loc(fused[#loc124, #loc125])
#loc234 = loc(fused[#loc128, #loc127])
#loc235 = loc(fused[#loc130, #loc131, #loc132, #loc125])
#loc236 = loc(fused[#loc133, #loc134])
#loc237 = loc(fused[#loc135, #loc136])
#loc238 = loc(fused[#loc141, #loc140])
#loc239 = loc(fused[#loc142, #loc143])
#loc240 = loc(fused[#loc144, #loc145])
#loc241 = loc(fused[#loc144, #loc146])
#loc242 = loc(fused[#loc147, #loc148])
#loc243 = loc(fused[#loc150, #loc149])
#loc244 = loc(fused[#loc151, #loc152])
#loc245 = loc(fused[#loc154, #loc153])
#loc246 = loc(fused[#loc155, #loc156])
#loc247 = loc(fused[#loc158, #loc152])
#loc248 = loc(fused[#loc160, #loc159])
#loc249 = loc(fused[#loc162, #loc161])
#loc250 = loc(fused[#loc163, #loc164])
#loc251 = loc(fused[#loc166, #loc165])
#loc252 = loc(fused[#loc167, #loc168])
#loc253 = loc(fused[#loc170, #loc164])
#loc254 = loc(fused[#loc171, #loc172])
#loc255 = loc(fused[#loc173, #loc174])
#loc256 = loc(fused[#loc175, #loc176])
#loc257 = loc(fused[#loc180, #loc179])
