!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_case_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc65)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc66)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_case_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc68)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc12)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc70)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc14)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc15)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc71)
        cir.condition(%4) loc(#loc16)
      } body {
        cir.scope {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc74)
            %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %6 = cir.const #cir.int<3> : !s32i loc(#loc23)
            %7 = cir.binop(rem, %5, %6) : !s32i loc(#loc75)
            cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc74)
            cir.scope {
              %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc26)
              cir.switch (%8 : !s32i) {
                cir.case(equal, [#cir.int<0> : !s32i]) {
                  cir.break loc(#loc28)
                } loc(#loc27)
                cir.yield loc(#loc24)
              } loc(#loc24)
            } loc(#loc76)
          } loc(#loc73)
          %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc5)
          %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc29)
        } loc(#loc72)
        cir.yield loc(#loc11)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc31)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc77)
        cir.yield loc(#loc69)
      } loc(#loc69)
    } loc(#loc69)
    cir.return loc(#loc7)
  } loc(#loc67)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_case_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc79)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    cir.return loc(#loc33)
  } loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Inside the case statement\00" : !cir.array<!s8i x 26>> : !cir.array<!s8i x 26> {alignment = 1 : i64} loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc37)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc81)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc44)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc47)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc84)
        cir.condition(%4) loc(#loc48)
      } body {
        cir.scope {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc87)
            %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
            %6 = cir.const #cir.int<3> : !s32i loc(#loc55)
            %7 = cir.binop(rem, %5, %6) : !s32i loc(#loc88)
            cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc87)
            cir.scope {
              %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc58)
              cir.switch (%8 : !s32i) {
                cir.case(equal, [#cir.int<0> : !s32i]) {
                  %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc36)
                  %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc36)
                  cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc60)
                  cir.break loc(#loc61)
                } loc(#loc59)
                cir.yield loc(#loc56)
              } loc(#loc56)
            } loc(#loc89)
          } loc(#loc86)
          %2 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc37)
          %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc37)
          cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc62)
        } loc(#loc85)
        cir.yield loc(#loc43)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc63)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc64)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc90)
        cir.yield loc(#loc82)
      } loc(#loc82)
    } loc(#loc82)
    cir.return loc(#loc39)
  } loc(#loc80)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_case_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":34:19)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":20:1)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":36:1)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":22:5)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":22:9)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":23:5)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":35:5)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":23:13)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":23:9)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":23:16)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":23:20)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":23:18)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":24:5)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":26:9)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":33:9)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":27:13)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":27:32)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":27:22)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":27:31)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":28:13)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":32:13)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":28:21)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":30:13)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":31:17)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":34:9)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":23:24)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":23:23)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":62:1)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":65:1)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":64:5)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":64:11)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":54:27)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":58:19)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":43:1)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":60:1)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":45:5)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":45:9)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":46:5)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":59:5)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":46:13)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":46:9)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":46:16)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":46:20)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":46:18)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":47:5)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":49:9)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":57:9)
#loc52 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":50:13)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":50:32)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":50:22)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":50:31)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":51:13)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":56:13)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":51:21)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":53:13)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":54:17)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":55:17)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":58:9)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":46:24)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_case_17.c":46:23)
#loc65 = loc(fused[#loc1, #loc2])
#loc66 = loc(fused[#loc3, #loc4])
#loc67 = loc(fused[#loc6, #loc7])
#loc68 = loc(fused[#loc8, #loc9])
#loc69 = loc(fused[#loc10, #loc11])
#loc70 = loc(fused[#loc13, #loc12])
#loc71 = loc(fused[#loc14, #loc15])
#loc72 = loc(fused[#loc17, #loc11])
#loc73 = loc(fused[#loc18, #loc19])
#loc74 = loc(fused[#loc20, #loc21])
#loc75 = loc(fused[#loc22, #loc23])
#loc76 = loc(fused[#loc24, #loc25])
#loc77 = loc(fused[#loc31, #loc30])
#loc78 = loc(fused[#loc32, #loc33])
#loc79 = loc(fused[#loc34, #loc35])
#loc80 = loc(fused[#loc38, #loc39])
#loc81 = loc(fused[#loc40, #loc41])
#loc82 = loc(fused[#loc42, #loc43])
#loc83 = loc(fused[#loc45, #loc44])
#loc84 = loc(fused[#loc46, #loc47])
#loc85 = loc(fused[#loc49, #loc43])
#loc86 = loc(fused[#loc50, #loc51])
#loc87 = loc(fused[#loc52, #loc53])
#loc88 = loc(fused[#loc54, #loc55])
#loc89 = loc(fused[#loc56, #loc57])
#loc90 = loc(fused[#loc64, #loc63])
