!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc156 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":234:10)
#loc157 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":234:14)
#loc158 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":234:20)
#loc159 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":234:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc398 = loc(fused[#loc156, #loc157])
#loc399 = loc(fused[#loc158, #loc159])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc335)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc336)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc337)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc338)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc339)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc340)
  cir.func private @close(!s32i) -> !s32i loc(#loc341)
  cir.func private @printIntLine(!s32i) loc(#loc342)
  cir.func no_proto @CWE369_Divide_by_Zero__int_connect_socket_modulo_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc344)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc345)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc346)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc26)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc347)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc30)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc349)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc33)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc350)
        cir.condition(%8) loc(#loc34)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc353)
            %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc354)
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc355)
            %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc356)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc43)
            %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc43)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc355)
            cir.scope {
              cir.do {
                %12 = cir.const #cir.int<2> : !s32i loc(#loc48)
                %13 = cir.const #cir.int<1> : !s32i loc(#loc49)
                %14 = cir.const #cir.int<6> : !s32i loc(#loc50)
                %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc51)
                cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc358)
                cir.scope {
                  %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc56)
                  %55 = cir.const #cir.int<1> : !s32i loc(#loc57)
                  %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc57)
                  %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc360)
                  cir.if %57 {
                    cir.break loc(#loc59)
                  } loc(#loc361)
                } loc(#loc359)
                %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc362)
                %17 = cir.const #cir.int<0> : !s32i loc(#loc62)
                %18 = cir.const #cir.int<16> : !u64i loc(#loc363)
                cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc364)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc67)
                %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc67)
                %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc68)
                cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc365)
                %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
                %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
                %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc70)
                %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc71)
                %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc72)
                cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc366)
                %27 = cir.const #cir.int<27015> : !s32i loc(#loc75)
                %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc75)
                %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc76)
                %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
                cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc367)
                cir.scope {
                  %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc82)
                  %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc369)
                  %56 = cir.const #cir.int<16> : !u64i loc(#loc370)
                  %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc370)
                  %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc87)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc88)
                  %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc88)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc371)
                  cir.if %61 {
                    cir.break loc(#loc90)
                  } loc(#loc372)
                } loc(#loc368)
                %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc91)
                %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc92)
                %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc92)
                %34 = cir.const #cir.int<3> : !s32i loc(#loc93)
                %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc93)
                %36 = cir.const #cir.int<4> : !u64i loc(#loc93)
                %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc93)
                %38 = cir.const #cir.int<2> : !s32i loc(#loc93)
                %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc93)
                %40 = cir.binop(add, %37, %39) : !u64i loc(#loc93)
                %41 = cir.const #cir.int<1> : !s32i loc(#loc94)
                %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc94)
                %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc373)
                %44 = cir.const #cir.int<0> : !s32i loc(#loc95)
                %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc96)
                %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc96)
                cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc374)
                cir.scope {
                  %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc101)
                  %55 = cir.const #cir.int<1> : !s32i loc(#loc102)
                  %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc102)
                  %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc376)
                  %58 = cir.ternary(%57, true {
                    %59 = cir.const #true loc(#loc103)
                    cir.yield %59 : !cir.bool loc(#loc103)
                  }, false {
                    %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc104)
                    %60 = cir.const #cir.int<0> : !s32i loc(#loc105)
                    %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc377)
                    %62 = cir.ternary(%61, true {
                      %63 = cir.const #true loc(#loc103)
                      cir.yield %63 : !cir.bool loc(#loc103)
                    }, false {
                      %63 = cir.const #false loc(#loc103)
                      cir.yield %63 : !cir.bool loc(#loc103)
                    }) : (!cir.bool) -> !cir.bool loc(#loc103)
                    cir.yield %62 : !cir.bool loc(#loc103)
                  }) : (!cir.bool) -> !cir.bool loc(#loc103)
                  cir.if %58 {
                    cir.break loc(#loc107)
                  } loc(#loc378)
                } loc(#loc375)
                %47 = cir.const #cir.int<0> : !s32i loc(#loc108)
                %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc108)
                %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc109)
                %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc110)
                %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc110)
                cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc379)
                %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc111)
                %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc112)
                cir.store %53, %2 : !s32i, !cir.ptr<!s32i> loc(#loc380)
                cir.yield loc(#loc47)
              } while {
                %12 = cir.const #cir.int<0> : !s32i loc(#loc115)
                %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc115)
                cir.condition(%13) loc(#loc115)
              } loc(#loc357)
            } loc(#loc357)
            cir.scope {
              %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc118)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc119)
              %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc119)
              %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc382)
              cir.if %15 {
                %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc121)
                %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc122)
              } loc(#loc383)
            } loc(#loc381)
          } loc(#loc352)
        } loc(#loc351)
        cir.yield loc(#loc29)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc124)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc384)
        cir.yield loc(#loc348)
      } loc(#loc348)
    } loc(#loc348)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc127)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc386)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc129)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc130)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc387)
        cir.condition(%8) loc(#loc131)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<100> : !s32i loc(#loc133)
          %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc134)
          %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc389)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc135)
        } loc(#loc388)
        cir.yield loc(#loc126)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc136)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc137)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc390)
        cir.yield loc(#loc385)
      } loc(#loc385)
    } loc(#loc385)
    cir.return loc(#loc19)
  } loc(#loc343)
  cir.func no_proto @CWE369_Divide_by_Zero__int_connect_socket_modulo_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc392)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc140)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc393)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc142)
    cir.return loc(#loc139)
  } loc(#loc391)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc394)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc395)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc396)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc150)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc151)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc152)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc153)
  cir.func @main(%arg0: !s32i loc(fused[#loc156, #loc157]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc158, #loc159])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc398)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc399)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc155)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc160)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc161)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc162)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc162)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc163)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc150)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc150)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc164)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_connect_socket_modulo_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc400)
    cir.call @CWE369_Divide_by_Zero__int_connect_socket_modulo_17_good() : () -> () loc(#loc165)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc151)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc151)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc167)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc152)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc152)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc168)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_connect_socket_modulo_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc401)
    cir.call @CWE369_Divide_by_Zero__int_connect_socket_modulo_17_bad() : () -> () loc(#loc169)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc153)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc153)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc171)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc172)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc402)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc402)
    cir.return %17 : !s32i loc(#loc402)
  } loc(#loc397)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc174)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc404)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc405)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc406)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc182)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc183)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc407)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc187)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc409)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc189)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc190)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc410)
        cir.condition(%8) loc(#loc191)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc413)
            %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc414)
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc415)
            %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc416)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc200)
            %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc200)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc415)
            cir.scope {
              cir.do {
                %12 = cir.const #cir.int<2> : !s32i loc(#loc205)
                %13 = cir.const #cir.int<1> : !s32i loc(#loc206)
                %14 = cir.const #cir.int<6> : !s32i loc(#loc207)
                %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc208)
                cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc418)
                cir.scope {
                  %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc213)
                  %55 = cir.const #cir.int<1> : !s32i loc(#loc214)
                  %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc214)
                  %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc420)
                  cir.if %57 {
                    cir.break loc(#loc216)
                  } loc(#loc421)
                } loc(#loc419)
                %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc422)
                %17 = cir.const #cir.int<0> : !s32i loc(#loc219)
                %18 = cir.const #cir.int<16> : !u64i loc(#loc423)
                cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc424)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc224)
                %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc224)
                %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc68)
                cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc425)
                %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc226)
                %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc226)
                %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc227)
                %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc71)
                %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc72)
                cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc426)
                %27 = cir.const #cir.int<27015> : !s32i loc(#loc230)
                %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc230)
                %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc231)
                %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
                cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc427)
                cir.scope {
                  %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc236)
                  %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc429)
                  %56 = cir.const #cir.int<16> : !u64i loc(#loc430)
                  %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc430)
                  %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc241)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc242)
                  %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc242)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc431)
                  cir.if %61 {
                    cir.break loc(#loc244)
                  } loc(#loc432)
                } loc(#loc428)
                %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc245)
                %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc246)
                %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc246)
                %34 = cir.const #cir.int<3> : !s32i loc(#loc247)
                %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc247)
                %36 = cir.const #cir.int<4> : !u64i loc(#loc247)
                %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc247)
                %38 = cir.const #cir.int<2> : !s32i loc(#loc247)
                %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc247)
                %40 = cir.binop(add, %37, %39) : !u64i loc(#loc247)
                %41 = cir.const #cir.int<1> : !s32i loc(#loc248)
                %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc248)
                %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc433)
                %44 = cir.const #cir.int<0> : !s32i loc(#loc249)
                %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc250)
                %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc250)
                cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc434)
                cir.scope {
                  %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc255)
                  %55 = cir.const #cir.int<1> : !s32i loc(#loc256)
                  %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc256)
                  %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc436)
                  %58 = cir.ternary(%57, true {
                    %59 = cir.const #true loc(#loc257)
                    cir.yield %59 : !cir.bool loc(#loc257)
                  }, false {
                    %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc258)
                    %60 = cir.const #cir.int<0> : !s32i loc(#loc259)
                    %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc437)
                    %62 = cir.ternary(%61, true {
                      %63 = cir.const #true loc(#loc257)
                      cir.yield %63 : !cir.bool loc(#loc257)
                    }, false {
                      %63 = cir.const #false loc(#loc257)
                      cir.yield %63 : !cir.bool loc(#loc257)
                    }) : (!cir.bool) -> !cir.bool loc(#loc257)
                    cir.yield %62 : !cir.bool loc(#loc257)
                  }) : (!cir.bool) -> !cir.bool loc(#loc257)
                  cir.if %58 {
                    cir.break loc(#loc261)
                  } loc(#loc438)
                } loc(#loc435)
                %47 = cir.const #cir.int<0> : !s32i loc(#loc262)
                %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc262)
                %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc263)
                %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc264)
                %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc264)
                cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc439)
                %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc265)
                %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc266)
                cir.store %53, %2 : !s32i, !cir.ptr<!s32i> loc(#loc440)
                cir.yield loc(#loc204)
              } while {
                %12 = cir.const #cir.int<0> : !s32i loc(#loc269)
                %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc269)
                cir.condition(%13) loc(#loc269)
              } loc(#loc417)
            } loc(#loc417)
            cir.scope {
              %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc272)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc273)
              %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc273)
              %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc442)
              cir.if %15 {
                %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc275)
                %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc276)
              } loc(#loc443)
            } loc(#loc441)
          } loc(#loc412)
        } loc(#loc411)
        cir.yield loc(#loc186)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc277)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc278)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc444)
        cir.yield loc(#loc408)
      } loc(#loc408)
    } loc(#loc408)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc281)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc446)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc283)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc284)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc447)
        cir.condition(%8) loc(#loc285)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc289)
            %7 = cir.const #cir.int<0> : !s32i loc(#loc290)
            %8 = cir.cmp(ne, %6, %7) : !s32i, !cir.bool loc(#loc450)
            cir.if %8 {
              %9 = cir.const #cir.int<100> : !s32i loc(#loc294)
              %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc295)
              %11 = cir.binop(rem, %9, %10) : !s32i loc(#loc452)
              cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc296)
            } else {
              %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc174)
              %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc174)
              cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc297)
            } loc(#loc451)
          } loc(#loc449)
        } loc(#loc448)
        cir.yield loc(#loc280)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc298)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc299)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc453)
        cir.yield loc(#loc445)
      } loc(#loc445)
    } loc(#loc445)
    cir.return loc(#loc176)
  } loc(#loc403)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc455)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc456)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc457)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc307)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc308)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc458)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc312)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc460)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc314)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc315)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc461)
        cir.condition(%8) loc(#loc316)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<7> : !s32i loc(#loc318)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc463)
        } loc(#loc462)
        cir.yield loc(#loc311)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc320)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc321)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc464)
        cir.yield loc(#loc459)
      } loc(#loc459)
    } loc(#loc459)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc324)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc466)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc326)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc327)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc467)
        cir.condition(%8) loc(#loc328)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<100> : !s32i loc(#loc330)
          %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc331)
          %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc469)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc332)
        } loc(#loc468)
        cir.yield loc(#loc323)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc333)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc334)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc470)
        cir.yield loc(#loc465)
      } loc(#loc465)
    } loc(#loc465)
    cir.return loc(#loc301)
  } loc(#loc454)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":78:53)
#loc6 = loc("/usr/include/netinet/in.h":404:1)
#loc7 = loc("/usr/include/netinet/in.h":405:40)
#loc8 = loc("/usr/include/sys/socket.h":126:1)
#loc9 = loc("/usr/include/sys/socket.h":126:75)
#loc10 = loc("/usr/include/sys/socket.h":145:1)
#loc11 = loc("/usr/include/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":44:1)
#loc19 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":114:1)
#loc20 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":46:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":46:9)
#loc22 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":46:11)
#loc23 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":47:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":47:9)
#loc25 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":49:13)
#loc26 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":49:12)
#loc27 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":49:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":50:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":108:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":50:13)
#loc31 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":50:9)
#loc32 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":50:16)
#loc33 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":50:20)
#loc34 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":50:18)
#loc35 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":51:5)
#loc36 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":52:9)
#loc37 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":107:9)
#loc38 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":57:13)
#loc39 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":57:17)
#loc40 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":58:13)
#loc41 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":58:32)
#loc42 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":59:13)
#loc43 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":59:36)
#loc44 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":60:13)
#loc45 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":60:45)
#loc46 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":61:13)
#loc47 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":96:21)
#loc48 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":71:40)
#loc49 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":71:49)
#loc50 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":71:62)
#loc51 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":71:33)
#loc52 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":71:17)
#loc53 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":71:73)
#loc54 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":72:17)
#loc55 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":75:17)
#loc56 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":72:21)
#loc57 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":72:38)
#loc58 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":73:17)
#loc59 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":74:21)
#loc60 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":76:24)
#loc61 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":76:25)
#loc62 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":76:34)
#loc63 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":76:37)
#loc64 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":76:51)
#loc65 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":76:17)
#loc66 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":76:52)
#loc67 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":77:38)
#loc68 = loc("/usr/include/netinet/in.h":249:5)
#loc69 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":77:17)
#loc70 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":78:43)
#loc71 = loc("/usr/include/netinet/in.h":251:20)
#loc72 = loc("/usr/include/netinet/in.h":33:15)
#loc73 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":78:17)
#loc74 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":78:63)
#loc75 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":79:42)
#loc76 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":79:36)
#loc77 = loc("/usr/include/netinet/in.h":250:15)
#loc78 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":79:17)
#loc79 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":79:50)
#loc80 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":80:17)
#loc81 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":83:17)
#loc82 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":80:29)
#loc83 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":80:62)
#loc84 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":80:63)
#loc85 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":80:72)
#loc86 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":80:86)
#loc87 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":80:21)
#loc88 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":80:92)
#loc89 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":81:17)
#loc90 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":82:21)
#loc91 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":86:35)
#loc92 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":86:50)
#loc93 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":86:63)
#loc94 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":86:81)
#loc95 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":86:84)
#loc96 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":86:30)
#loc97 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":86:17)
#loc98 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":86:85)
#loc99 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":87:17)
#loc100 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":90:17)
#loc101 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":87:21)
#loc102 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":87:35)
#loc103 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":87:48)
#loc104 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":87:51)
#loc105 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":87:65)
#loc106 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":88:17)
#loc107 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":89:21)
#loc108 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":92:43)
#loc109 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":92:29)
#loc110 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":92:17)
#loc111 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":94:29)
#loc112 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":94:24)
#loc113 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":94:17)
#loc114 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":94:40)
#loc115 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":96:20)
#loc116 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":97:13)
#loc117 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":100:13)
#loc118 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":97:17)
#loc119 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":97:34)
#loc120 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":98:13)
#loc121 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":99:30)
#loc122 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":99:17)
#loc123 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":50:24)
#loc124 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":50:23)
#loc125 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":109:5)
#loc126 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":113:5)
#loc127 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":109:13)
#loc128 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":109:9)
#loc129 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":109:16)
#loc130 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":109:20)
#loc131 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":109:18)
#loc132 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":110:5)
#loc133 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":112:22)
#loc134 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":112:28)
#loc135 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":112:9)
#loc136 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":109:24)
#loc137 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":109:23)
#loc138 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":219:1)
#loc139 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":223:1)
#loc140 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":221:5)
#loc141 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":221:13)
#loc142 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":222:5)
#loc143 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":222:13)
#loc144 = loc("/usr/include/stdlib.h":575:1)
#loc145 = loc("/usr/include/stdlib.h":575:41)
#loc146 = loc("/usr/include/time.h":76:1)
#loc147 = loc("/usr/include/time.h":76:38)
#loc148 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc149 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc150 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":239:15)
#loc151 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":241:15)
#loc152 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":244:15)
#loc153 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":246:15)
#loc154 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":234:1)
#loc155 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":249:1)
#loc160 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":235:1)
#loc161 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":237:27)
#loc162 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":237:22)
#loc163 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":237:5)
#loc164 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":239:5)
#loc165 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":240:5)
#loc166 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":240:62)
#loc167 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":241:5)
#loc168 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":244:5)
#loc169 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":245:5)
#loc170 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":245:61)
#loc171 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":246:5)
#loc172 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":248:12)
#loc173 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":248:5)
#loc174 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":195:23)
#loc175 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":121:1)
#loc176 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":198:1)
#loc177 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":123:5)
#loc178 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":123:9)
#loc179 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":123:11)
#loc180 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":124:5)
#loc181 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":124:9)
#loc182 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":126:13)
#loc183 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":126:12)
#loc184 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":126:5)
#loc185 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":127:5)
#loc186 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":185:5)
#loc187 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":127:13)
#loc188 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":127:9)
#loc189 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":127:16)
#loc190 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":127:20)
#loc191 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":127:18)
#loc192 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":128:5)
#loc193 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":129:9)
#loc194 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":184:9)
#loc195 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":134:13)
#loc196 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":134:17)
#loc197 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":135:13)
#loc198 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":135:32)
#loc199 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":136:13)
#loc200 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":136:36)
#loc201 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":137:13)
#loc202 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":137:45)
#loc203 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":138:13)
#loc204 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":173:21)
#loc205 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":148:40)
#loc206 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":148:49)
#loc207 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":148:62)
#loc208 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":148:33)
#loc209 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":148:17)
#loc210 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":148:73)
#loc211 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":149:17)
#loc212 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":152:17)
#loc213 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":149:21)
#loc214 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":149:38)
#loc215 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":150:17)
#loc216 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":151:21)
#loc217 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":153:24)
#loc218 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":153:25)
#loc219 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":153:34)
#loc220 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":153:37)
#loc221 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":153:51)
#loc222 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":153:17)
#loc223 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":153:52)
#loc224 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":154:38)
#loc225 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":154:17)
#loc226 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":155:53)
#loc227 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":155:43)
#loc228 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":155:17)
#loc229 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":155:63)
#loc230 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":156:42)
#loc231 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":156:36)
#loc232 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":156:17)
#loc233 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":156:50)
#loc234 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":157:17)
#loc235 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":160:17)
#loc236 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":157:29)
#loc237 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":157:62)
#loc238 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":157:63)
#loc239 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":157:72)
#loc240 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":157:86)
#loc241 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":157:21)
#loc242 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":157:92)
#loc243 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":158:17)
#loc244 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":159:21)
#loc245 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":163:35)
#loc246 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":163:50)
#loc247 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":163:63)
#loc248 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":163:81)
#loc249 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":163:84)
#loc250 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":163:30)
#loc251 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":163:17)
#loc252 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":163:85)
#loc253 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":164:17)
#loc254 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":167:17)
#loc255 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":164:21)
#loc256 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":164:35)
#loc257 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":164:48)
#loc258 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":164:51)
#loc259 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":164:65)
#loc260 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":165:17)
#loc261 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":166:21)
#loc262 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":169:43)
#loc263 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":169:29)
#loc264 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":169:17)
#loc265 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":171:29)
#loc266 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":171:24)
#loc267 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":171:17)
#loc268 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":171:40)
#loc269 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":173:20)
#loc270 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":174:13)
#loc271 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":177:13)
#loc272 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":174:17)
#loc273 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":174:34)
#loc274 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":175:13)
#loc275 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":176:30)
#loc276 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":176:17)
#loc277 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":127:24)
#loc278 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":127:23)
#loc279 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":186:5)
#loc280 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":197:5)
#loc281 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":186:13)
#loc282 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":186:9)
#loc283 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":186:16)
#loc284 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":186:20)
#loc285 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":186:18)
#loc286 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":187:5)
#loc287 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":189:9)
#loc288 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":196:9)
#loc289 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":189:13)
#loc290 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":189:21)
#loc291 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":190:9)
#loc292 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":192:9)
#loc293 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":194:9)
#loc294 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":191:26)
#loc295 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":191:32)
#loc296 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":191:13)
#loc297 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":195:13)
#loc298 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":186:24)
#loc299 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":186:23)
#loc300 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":201:1)
#loc301 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":217:1)
#loc302 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":203:5)
#loc303 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":203:9)
#loc304 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":203:11)
#loc305 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":204:5)
#loc306 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":204:9)
#loc307 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":206:13)
#loc308 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":206:12)
#loc309 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":206:5)
#loc310 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":207:5)
#loc311 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":211:5)
#loc312 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":207:13)
#loc313 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":207:9)
#loc314 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":207:16)
#loc315 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":207:20)
#loc316 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":207:18)
#loc317 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":208:5)
#loc318 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":210:16)
#loc319 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":210:9)
#loc320 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":207:24)
#loc321 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":207:23)
#loc322 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":212:5)
#loc323 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":216:5)
#loc324 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":212:13)
#loc325 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":212:9)
#loc326 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":212:16)
#loc327 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":212:20)
#loc328 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":212:18)
#loc329 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":213:5)
#loc330 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":215:22)
#loc331 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":215:28)
#loc332 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":215:9)
#loc333 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":212:24)
#loc334 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_17.c":212:23)
#loc335 = loc(fused[#loc1, #loc2])
#loc336 = loc(fused[#loc3, #loc4])
#loc337 = loc(fused[#loc6, #loc7])
#loc338 = loc(fused[#loc8, #loc9])
#loc339 = loc(fused[#loc10, #loc11])
#loc340 = loc(fused[#loc12, #loc13])
#loc341 = loc(fused[#loc14, #loc15])
#loc342 = loc(fused[#loc16, #loc17])
#loc343 = loc(fused[#loc18, #loc19])
#loc344 = loc(fused[#loc20, #loc21])
#loc345 = loc(fused[#loc20, #loc22])
#loc346 = loc(fused[#loc23, #loc24])
#loc347 = loc(fused[#loc27, #loc25])
#loc348 = loc(fused[#loc28, #loc29])
#loc349 = loc(fused[#loc31, #loc30])
#loc350 = loc(fused[#loc32, #loc33])
#loc351 = loc(fused[#loc35, #loc29])
#loc352 = loc(fused[#loc36, #loc37])
#loc353 = loc(fused[#loc38, #loc39])
#loc354 = loc(fused[#loc40, #loc41])
#loc355 = loc(fused[#loc42, #loc43])
#loc356 = loc(fused[#loc44, #loc45])
#loc357 = loc(fused[#loc46, #loc47])
#loc358 = loc(fused[#loc52, #loc53])
#loc359 = loc(fused[#loc54, #loc55])
#loc360 = loc(fused[#loc56, #loc57])
#loc361 = loc(fused[#loc58, #loc55])
#loc362 = loc(fused[#loc60, #loc61])
#loc363 = loc(fused[#loc63, #loc64])
#loc364 = loc(fused[#loc65, #loc66])
#loc365 = loc(fused[#loc69, #loc67])
#loc366 = loc(fused[#loc73, #loc74])
#loc367 = loc(fused[#loc78, #loc79])
#loc368 = loc(fused[#loc80, #loc81])
#loc369 = loc(fused[#loc83, #loc84])
#loc370 = loc(fused[#loc85, #loc86])
#loc371 = loc(fused[#loc87, #loc88])
#loc372 = loc(fused[#loc89, #loc81])
#loc373 = loc(fused[#loc93, #loc94])
#loc374 = loc(fused[#loc97, #loc98])
#loc375 = loc(fused[#loc99, #loc100])
#loc376 = loc(fused[#loc101, #loc102])
#loc377 = loc(fused[#loc104, #loc105])
#loc378 = loc(fused[#loc106, #loc100])
#loc379 = loc(fused[#loc110, #loc108])
#loc380 = loc(fused[#loc113, #loc114])
#loc381 = loc(fused[#loc116, #loc117])
#loc382 = loc(fused[#loc118, #loc119])
#loc383 = loc(fused[#loc120, #loc117])
#loc384 = loc(fused[#loc124, #loc123])
#loc385 = loc(fused[#loc125, #loc126])
#loc386 = loc(fused[#loc128, #loc127])
#loc387 = loc(fused[#loc129, #loc130])
#loc388 = loc(fused[#loc132, #loc126])
#loc389 = loc(fused[#loc133, #loc134])
#loc390 = loc(fused[#loc137, #loc136])
#loc391 = loc(fused[#loc138, #loc139])
#loc392 = loc(fused[#loc140, #loc141])
#loc393 = loc(fused[#loc142, #loc143])
#loc394 = loc(fused[#loc144, #loc145])
#loc395 = loc(fused[#loc146, #loc147])
#loc396 = loc(fused[#loc148, #loc149])
#loc397 = loc(fused[#loc154, #loc155])
#loc400 = loc(fused[#loc165, #loc166])
#loc401 = loc(fused[#loc169, #loc170])
#loc402 = loc(fused[#loc173, #loc172])
#loc403 = loc(fused[#loc175, #loc176])
#loc404 = loc(fused[#loc177, #loc178])
#loc405 = loc(fused[#loc177, #loc179])
#loc406 = loc(fused[#loc180, #loc181])
#loc407 = loc(fused[#loc184, #loc182])
#loc408 = loc(fused[#loc185, #loc186])
#loc409 = loc(fused[#loc188, #loc187])
#loc410 = loc(fused[#loc189, #loc190])
#loc411 = loc(fused[#loc192, #loc186])
#loc412 = loc(fused[#loc193, #loc194])
#loc413 = loc(fused[#loc195, #loc196])
#loc414 = loc(fused[#loc197, #loc198])
#loc415 = loc(fused[#loc199, #loc200])
#loc416 = loc(fused[#loc201, #loc202])
#loc417 = loc(fused[#loc203, #loc204])
#loc418 = loc(fused[#loc209, #loc210])
#loc419 = loc(fused[#loc211, #loc212])
#loc420 = loc(fused[#loc213, #loc214])
#loc421 = loc(fused[#loc215, #loc212])
#loc422 = loc(fused[#loc217, #loc218])
#loc423 = loc(fused[#loc220, #loc221])
#loc424 = loc(fused[#loc222, #loc223])
#loc425 = loc(fused[#loc225, #loc224])
#loc426 = loc(fused[#loc228, #loc229])
#loc427 = loc(fused[#loc232, #loc233])
#loc428 = loc(fused[#loc234, #loc235])
#loc429 = loc(fused[#loc237, #loc238])
#loc430 = loc(fused[#loc239, #loc240])
#loc431 = loc(fused[#loc241, #loc242])
#loc432 = loc(fused[#loc243, #loc235])
#loc433 = loc(fused[#loc247, #loc248])
#loc434 = loc(fused[#loc251, #loc252])
#loc435 = loc(fused[#loc253, #loc254])
#loc436 = loc(fused[#loc255, #loc256])
#loc437 = loc(fused[#loc258, #loc259])
#loc438 = loc(fused[#loc260, #loc254])
#loc439 = loc(fused[#loc264, #loc262])
#loc440 = loc(fused[#loc267, #loc268])
#loc441 = loc(fused[#loc270, #loc271])
#loc442 = loc(fused[#loc272, #loc273])
#loc443 = loc(fused[#loc274, #loc271])
#loc444 = loc(fused[#loc278, #loc277])
#loc445 = loc(fused[#loc279, #loc280])
#loc446 = loc(fused[#loc282, #loc281])
#loc447 = loc(fused[#loc283, #loc284])
#loc448 = loc(fused[#loc286, #loc280])
#loc449 = loc(fused[#loc287, #loc288])
#loc450 = loc(fused[#loc289, #loc290])
#loc451 = loc(fused[#loc291, #loc292, #loc293, #loc288])
#loc452 = loc(fused[#loc294, #loc295])
#loc453 = loc(fused[#loc299, #loc298])
#loc454 = loc(fused[#loc300, #loc301])
#loc455 = loc(fused[#loc302, #loc303])
#loc456 = loc(fused[#loc302, #loc304])
#loc457 = loc(fused[#loc305, #loc306])
#loc458 = loc(fused[#loc309, #loc307])
#loc459 = loc(fused[#loc310, #loc311])
#loc460 = loc(fused[#loc313, #loc312])
#loc461 = loc(fused[#loc314, #loc315])
#loc462 = loc(fused[#loc317, #loc311])
#loc463 = loc(fused[#loc319, #loc318])
#loc464 = loc(fused[#loc321, #loc320])
#loc465 = loc(fused[#loc322, #loc323])
#loc466 = loc(fused[#loc325, #loc324])
#loc467 = loc(fused[#loc326, #loc327])
#loc468 = loc(fused[#loc329, #loc323])
#loc469 = loc(fused[#loc330, #loc331])
#loc470 = loc(fused[#loc334, #loc333])
