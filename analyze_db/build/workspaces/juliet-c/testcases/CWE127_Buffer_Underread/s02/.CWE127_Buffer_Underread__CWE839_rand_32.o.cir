!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc28 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":32:16)
#loc118 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":101:16)
#loc132 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":109:27)
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_rand_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc143)
  cir.func private @printIntLine(!s32i) loc(#loc144)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc145)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is too big.\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE127_Buffer_Underread__CWE839_rand_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc147)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc148)
    %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc149)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc150)
    %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc151)
    %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc152)
    cir.store %3, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc151)
    cir.store %3, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc152)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc23)
    cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc153)
    cir.br ^bb1 loc(#loc154)
  ^bb1:  // pred: ^bb0
    %8 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc11)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc28)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %12 = cir.binop(and, %10, %11) : !s32i loc(#loc28)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc28)
    cir.brcond %13 ^bb2, ^bb3 loc(#loc28)
  ^bb2:  // pred: ^bb1
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc28)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc28)
    %16 = cir.const #cir.int<30> : !s32i loc(#loc28)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc28)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc28)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc28)
    %20 = cir.const #cir.int<15> : !s32i loc(#loc28)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc28)
    %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc28)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc28)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc28)
    %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc28)
    cir.br ^bb4(%25 : !u32i) loc(#loc28)
  ^bb3:  // pred: ^bb1
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc28)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc28)
    %28 = cir.const #cir.int<30> : !s32i loc(#loc28)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc28)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc28)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc28)
    %32 = cir.const #cir.int<15> : !s32i loc(#loc28)
    %33 = cir.shift(left, %31 : !u32i, %32 : !s32i) -> !u32i loc(#loc28)
    %34 = cir.binop(xor, %29, %33) : !u32i loc(#loc28)
    %35 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc28)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc28)
    %37 = cir.binop(xor, %34, %36) : !u32i loc(#loc28)
    %38 = cir.unary(minus, %37) : !u32i, !u32i loc(#loc28)
    %39 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %40 = cir.cast(integral, %39 : !s32i), !u32i loc(#loc28)
    %41 = cir.binop(sub, %38, %40) : !u32i loc(#loc28)
    cir.br ^bb4(%41 : !u32i) loc(#loc28)
  ^bb4(%42: !u32i loc("CWE127_Buffer_Underread__CWE839_rand_32.c":32:16)):  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc28)
  ^bb5:  // pred: ^bb4
    %43 = cir.cast(integral, %42 : !u32i), !s32i loc(#loc28)
    cir.store %43, %0 : !s32i, !cir.ptr<!s32i> loc(#loc155)
    %44 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    %45 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc31)
    cir.store %44, %45 : !s32i, !cir.ptr<!s32i> loc(#loc156)
    cir.br ^bb6 loc(#loc26)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc157)
  ^bb7:  // pred: ^bb6
    %46 = cir.load deref %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc13)
    %47 = cir.load %46 : !cir.ptr<!s32i>, !s32i loc(#loc35)
    cir.store %47, %1 : !s32i, !cir.ptr<!s32i> loc(#loc148)
    cir.br ^bb8 loc(#loc158)
  ^bb8:  // pred: ^bb7
    %48 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc149)
    cir.store %48, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc149)
    cir.br ^bb9 loc(#loc159)
  ^bb9:  // pred: ^bb8
    %49 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc40)
    %50 = cir.const #cir.int<10> : !s32i loc(#loc41)
    %51 = cir.cmp(lt, %49, %50) : !s32i, !cir.bool loc(#loc160)
    cir.brcond %51 ^bb10, ^bb11 loc(#loc161)
  ^bb10:  // pred: ^bb9
    %52 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc45)
    %53 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc46)
    %54 = cir.ptr_stride(%53 : !cir.ptr<!s32i>, %52 : !s32i), !cir.ptr<!s32i> loc(#loc46)
    %55 = cir.load %54 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    cir.call @printIntLine(%55) : (!s32i) -> () loc(#loc47)
    cir.br ^bb12 loc(#loc43)
  ^bb11:  // pred: ^bb9
    %56 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc7)
    %57 = cir.cast(array_to_ptrdecay, %56 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%57) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    cir.br ^bb12 loc(#loc39)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc39)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc37)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc34)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc9)
  } loc(#loc146)
  cir.func no_proto @CWE127_Buffer_Underread__CWE839_rand_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc163)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc51)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc164)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc53)
    cir.return loc(#loc50)
  } loc(#loc162)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc166)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc167)
    %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc168)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc169)
    %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc170)
    %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc171)
    cir.store %3, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc170)
    cir.store %3, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc171)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc69)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc70)
    cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    cir.br ^bb1 loc(#loc173)
  ^bb1:  // pred: ^bb0
    %8 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc58)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    %10 = cir.const #cir.int<7> : !s32i loc(#loc75)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc77)
    %12 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc78)
    cir.store %11, %12 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    cir.br ^bb2 loc(#loc73)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc176)
  ^bb3:  // pred: ^bb2
    %13 = cir.load deref %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
    %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    cir.store %14, %1 : !s32i, !cir.ptr<!s32i> loc(#loc167)
    cir.br ^bb4 loc(#loc177)
  ^bb4:  // pred: ^bb3
    %15 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc168)
    cir.store %15, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc168)
    cir.br ^bb5 loc(#loc178)
  ^bb5:  // pred: ^bb4
    %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc87)
    %17 = cir.const #cir.int<10> : !s32i loc(#loc88)
    %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc179)
    cir.brcond %18 ^bb6, ^bb7 loc(#loc180)
  ^bb6:  // pred: ^bb5
    %19 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    %20 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc93)
    %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc93)
    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc93)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc94)
    cir.br ^bb8 loc(#loc90)
  ^bb7:  // pred: ^bb5
    %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc95)
    %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc95)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    cir.br ^bb8 loc(#loc86)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc86)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc84)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc81)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc56)
  } loc(#loc165)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc97)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc182)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc183)
    %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc184)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc185)
    %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc186)
    %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc187)
    cir.store %3, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc186)
    cir.store %3, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc187)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc112)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc113)
    cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    cir.br ^bb1 loc(#loc189)
  ^bb1:  // pred: ^bb0
    %8 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc101)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc118)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %12 = cir.binop(and, %10, %11) : !s32i loc(#loc118)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc118)
    cir.brcond %13 ^bb2, ^bb3 loc(#loc118)
  ^bb2:  // pred: ^bb1
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc118)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc118)
    %16 = cir.const #cir.int<30> : !s32i loc(#loc118)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc118)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc118)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc118)
    %20 = cir.const #cir.int<15> : !s32i loc(#loc118)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc118)
    %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc118)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc118)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc118)
    %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc118)
    cir.br ^bb4(%25 : !u32i) loc(#loc118)
  ^bb3:  // pred: ^bb1
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc118)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc118)
    %28 = cir.const #cir.int<30> : !s32i loc(#loc118)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc118)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc118)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc118)
    %32 = cir.const #cir.int<15> : !s32i loc(#loc118)
    %33 = cir.shift(left, %31 : !u32i, %32 : !s32i) -> !u32i loc(#loc118)
    %34 = cir.binop(xor, %29, %33) : !u32i loc(#loc118)
    %35 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc118)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc118)
    %37 = cir.binop(xor, %34, %36) : !u32i loc(#loc118)
    %38 = cir.unary(minus, %37) : !u32i, !u32i loc(#loc118)
    %39 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %40 = cir.cast(integral, %39 : !s32i), !u32i loc(#loc118)
    %41 = cir.binop(sub, %38, %40) : !u32i loc(#loc118)
    cir.br ^bb4(%41 : !u32i) loc(#loc118)
  ^bb4(%42: !u32i loc("CWE127_Buffer_Underread__CWE839_rand_32.c":101:16)):  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc118)
  ^bb5:  // pred: ^bb4
    %43 = cir.cast(integral, %42 : !u32i), !s32i loc(#loc118)
    cir.store %43, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    %44 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc120)
    %45 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc121)
    cir.store %44, %45 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    cir.br ^bb6 loc(#loc116)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc192)
  ^bb7:  // pred: ^bb6
    %46 = cir.load deref %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc103)
    %47 = cir.load %46 : !cir.ptr<!s32i>, !s32i loc(#loc125)
    cir.store %47, %1 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    cir.br ^bb8 loc(#loc193)
  ^bb8:  // pred: ^bb7
    %48 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc184)
    cir.store %48, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc184)
    cir.br ^bb9 loc(#loc194)
  ^bb9:  // pred: ^bb8
    %49 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc130)
    %50 = cir.const #cir.int<0> : !s32i loc(#loc131)
    %51 = cir.cmp(ge, %49, %50) : !s32i, !cir.bool loc(#loc195)
    cir.brcond %51 ^bb10, ^bb15 loc(#loc132)
  ^bb10:  // pred: ^bb9
    %52 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc133)
    %53 = cir.const #cir.int<10> : !s32i loc(#loc134)
    %54 = cir.cmp(lt, %52, %53) : !s32i, !cir.bool loc(#loc196)
    cir.brcond %54 ^bb11, ^bb12 loc(#loc132)
  ^bb11:  // pred: ^bb10
    %55 = cir.const #true loc(#loc132)
    cir.br ^bb13(%55 : !cir.bool) loc(#loc132)
  ^bb12:  // pred: ^bb10
    %56 = cir.const #false loc(#loc132)
    cir.br ^bb13(%56 : !cir.bool) loc(#loc132)
  ^bb13(%57: !cir.bool loc("CWE127_Buffer_Underread__CWE839_rand_32.c":109:27)):  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc132)
  ^bb14:  // pred: ^bb13
    cir.br ^bb16(%57 : !cir.bool) loc(#loc132)
  ^bb15:  // pred: ^bb9
    %58 = cir.const #false loc(#loc132)
    cir.br ^bb16(%58 : !cir.bool) loc(#loc132)
  ^bb16(%59: !cir.bool loc("CWE127_Buffer_Underread__CWE839_rand_32.c":109:27)):  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc132)
  ^bb17:  // pred: ^bb16
    cir.brcond %59 ^bb18, ^bb19 loc(#loc197)
  ^bb18:  // pred: ^bb17
    %60 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc139)
    %61 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc140)
    %62 = cir.ptr_stride(%61 : !cir.ptr<!s32i>, %60 : !s32i), !cir.ptr<!s32i> loc(#loc140)
    %63 = cir.load %62 : !cir.ptr<!s32i>, !s32i loc(#loc140)
    cir.call @printIntLine(%63) : (!s32i) -> () loc(#loc141)
    cir.br ^bb20 loc(#loc137)
  ^bb19:  // pred: ^bb17
    %64 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc97)
    %65 = cir.cast(array_to_ptrdecay, %64 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc97)
    cir.call @printLine(%65) : (!cir.ptr<!s8i>) -> () loc(#loc142)
    cir.br ^bb20 loc(#loc129)
  ^bb20:  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc129)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc127)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc124)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc99)
  } loc(#loc181)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_rand_32.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":47:27)
#loc8 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":22:1)
#loc9 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":51:1)
#loc10 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":30:9)
#loc11 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":30:21)
#loc12 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":36:9)
#loc13 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":36:21)
#loc14 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":38:13)
#loc15 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":38:34)
#loc16 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":24:5)
#loc17 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":24:9)
#loc18 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":25:5)
#loc19 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":25:22)
#loc20 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":26:5)
#loc21 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":26:22)
#loc22 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":28:13)
#loc23 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":28:12)
#loc24 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":28:5)
#loc25 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":29:5)
#loc26 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":34:5)
#loc27 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":30:20)
#loc29 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":32:9)
#loc30 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":33:21)
#loc31 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":33:10)
#loc32 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":33:9)
#loc33 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":35:5)
#loc34 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":50:5)
#loc35 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":36:20)
#loc36 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":37:9)
#loc37 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":49:9)
#loc38 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":41:13)
#loc39 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":48:13)
#loc40 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":41:17)
#loc41 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":41:24)
#loc42 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":42:13)
#loc43 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":44:13)
#loc44 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":46:13)
#loc45 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":43:37)
#loc46 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":43:30)
#loc47 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":43:17)
#loc48 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":47:17)
#loc49 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":121:1)
#loc50 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":125:1)
#loc51 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":123:5)
#loc52 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":123:13)
#loc53 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":124:5)
#loc54 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":124:13)
#loc55 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":58:1)
#loc56 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":88:1)
#loc57 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":66:9)
#loc58 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":66:21)
#loc59 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":73:9)
#loc60 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":73:21)
#loc61 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":75:13)
#loc62 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":75:34)
#loc63 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":60:5)
#loc64 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":60:9)
#loc65 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":61:5)
#loc66 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":61:22)
#loc67 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":62:5)
#loc68 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":62:22)
#loc69 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":64:13)
#loc70 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":64:12)
#loc71 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":64:5)
#loc72 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":65:5)
#loc73 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":71:5)
#loc74 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":66:20)
#loc75 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":69:16)
#loc76 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":69:9)
#loc77 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":70:21)
#loc78 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":70:10)
#loc79 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":70:9)
#loc80 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":72:5)
#loc81 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":87:5)
#loc82 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":73:20)
#loc83 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":74:9)
#loc84 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":86:9)
#loc85 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":78:13)
#loc86 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":85:13)
#loc87 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":78:17)
#loc88 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":78:24)
#loc89 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":79:13)
#loc90 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":81:13)
#loc91 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":83:13)
#loc92 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":80:37)
#loc93 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":80:30)
#loc94 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":80:17)
#loc95 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":84:27)
#loc96 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":84:17)
#loc97 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":115:27)
#loc98 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":91:1)
#loc99 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":119:1)
#loc100 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":99:9)
#loc101 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":99:21)
#loc102 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":105:9)
#loc103 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":105:21)
#loc104 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":107:13)
#loc105 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":107:34)
#loc106 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":93:5)
#loc107 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":93:9)
#loc108 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":94:5)
#loc109 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":94:22)
#loc110 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":95:5)
#loc111 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":95:22)
#loc112 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":97:13)
#loc113 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":97:12)
#loc114 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":97:5)
#loc115 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":98:5)
#loc116 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":103:5)
#loc117 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":99:20)
#loc119 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":101:9)
#loc120 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":102:21)
#loc121 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":102:10)
#loc122 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":102:9)
#loc123 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":104:5)
#loc124 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":118:5)
#loc125 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":105:20)
#loc126 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":106:9)
#loc127 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":117:9)
#loc128 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":109:13)
#loc129 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":116:13)
#loc130 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":109:17)
#loc131 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":109:25)
#loc133 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":109:30)
#loc134 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":109:38)
#loc135 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":109:40)
#loc136 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":110:13)
#loc137 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":112:13)
#loc138 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":114:13)
#loc139 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":111:37)
#loc140 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":111:30)
#loc141 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":111:17)
#loc142 = loc("CWE127_Buffer_Underread__CWE839_rand_32.c":115:17)
#loc143 = loc(fused[#loc1, #loc2])
#loc144 = loc(fused[#loc3, #loc4])
#loc145 = loc(fused[#loc5, #loc6])
#loc146 = loc(fused[#loc8, #loc9])
#loc147 = loc(fused[#loc10, #loc11])
#loc148 = loc(fused[#loc12, #loc13])
#loc149 = loc(fused[#loc14, #loc15])
#loc150 = loc(fused[#loc16, #loc17])
#loc151 = loc(fused[#loc18, #loc19])
#loc152 = loc(fused[#loc20, #loc21])
#loc153 = loc(fused[#loc24, #loc22])
#loc154 = loc(fused[#loc25, #loc26])
#loc155 = loc(fused[#loc29, #loc28])
#loc156 = loc(fused[#loc32, #loc30])
#loc157 = loc(fused[#loc33, #loc34])
#loc158 = loc(fused[#loc36, #loc37])
#loc159 = loc(fused[#loc38, #loc39])
#loc160 = loc(fused[#loc40, #loc41])
#loc161 = loc(fused[#loc42, #loc43, #loc44, #loc39])
#loc162 = loc(fused[#loc49, #loc50])
#loc163 = loc(fused[#loc51, #loc52])
#loc164 = loc(fused[#loc53, #loc54])
#loc165 = loc(fused[#loc55, #loc56])
#loc166 = loc(fused[#loc57, #loc58])
#loc167 = loc(fused[#loc59, #loc60])
#loc168 = loc(fused[#loc61, #loc62])
#loc169 = loc(fused[#loc63, #loc64])
#loc170 = loc(fused[#loc65, #loc66])
#loc171 = loc(fused[#loc67, #loc68])
#loc172 = loc(fused[#loc71, #loc69])
#loc173 = loc(fused[#loc72, #loc73])
#loc174 = loc(fused[#loc76, #loc75])
#loc175 = loc(fused[#loc79, #loc77])
#loc176 = loc(fused[#loc80, #loc81])
#loc177 = loc(fused[#loc83, #loc84])
#loc178 = loc(fused[#loc85, #loc86])
#loc179 = loc(fused[#loc87, #loc88])
#loc180 = loc(fused[#loc89, #loc90, #loc91, #loc86])
#loc181 = loc(fused[#loc98, #loc99])
#loc182 = loc(fused[#loc100, #loc101])
#loc183 = loc(fused[#loc102, #loc103])
#loc184 = loc(fused[#loc104, #loc105])
#loc185 = loc(fused[#loc106, #loc107])
#loc186 = loc(fused[#loc108, #loc109])
#loc187 = loc(fused[#loc110, #loc111])
#loc188 = loc(fused[#loc114, #loc112])
#loc189 = loc(fused[#loc115, #loc116])
#loc190 = loc(fused[#loc119, #loc118])
#loc191 = loc(fused[#loc122, #loc120])
#loc192 = loc(fused[#loc123, #loc124])
#loc193 = loc(fused[#loc126, #loc127])
#loc194 = loc(fused[#loc128, #loc129])
#loc195 = loc(fused[#loc130, #loc131])
#loc196 = loc(fused[#loc133, #loc135])
#loc197 = loc(fused[#loc136, #loc137, #loc138, #loc129])
