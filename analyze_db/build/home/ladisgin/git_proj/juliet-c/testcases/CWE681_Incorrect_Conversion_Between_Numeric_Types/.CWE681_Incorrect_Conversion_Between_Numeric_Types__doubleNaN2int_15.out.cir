!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc63 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":156:10)
#loc64 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":156:14)
#loc65 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":156:20)
#loc66 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":156:32)
#loc189 = loc(fused[#loc63, #loc64])
#loc190 = loc(fused[#loc65, #loc66])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc169)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc170)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc171)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc172)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc173)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc12)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc13)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc175)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc176)
    cir.br ^bb1 loc(#loc177)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<6> : !s32i loc(#loc22)
    cir.br ^bb2 loc(#loc20)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb12 [
      6: ^bb4
    ] loc(#loc20)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc23)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc178)
  ^bb5:  // pred: ^bb4
    %3 = cir.const #cir.int<0> : !s32i loc(#loc19)
    %4 = cir.cast(int_to_float, %3 : !s32i), !cir.double loc(#loc19)
    cir.store %4, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc176)
    cir.br ^bb6 loc(#loc179)
  ^bb6:  // pred: ^bb5
    %5 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc28)
    %6 = cir.const #cir.int<256> : !s32i loc(#loc29)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc170)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc30)
    %9 = cir.call @fgets(%5, %6, %8) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc31)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc32)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc32)
    %12 = cir.cmp(ne, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc180)
    cir.brcond %12 ^bb7, ^bb8 loc(#loc181)
  ^bb7:  // pred: ^bb6
    %13 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc36)
    %14 = cir.call @atof(%13) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc37)
    cir.store %14, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc182)
    cir.br ^bb9 loc(#loc34)
  ^bb8:  // pred: ^bb6
    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc40)
    cir.br ^bb9 loc(#loc27)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc27)
  ^bb10:  // pred: ^bb9
    %17 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc41)
    %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc42)
    %19 = cir.cast(float_to_int, %18 : !cir.double), !s32i loc(#loc42)
    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc43)
    cir.br ^bb11 loc(#loc25)
  ^bb11:  // pred: ^bb10
    cir.br ^bb13 loc(#loc44)
  ^bb12:  // pred: ^bb2
    %20 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc13)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc13)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc45)
    cir.br ^bb13 loc(#loc46)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc21)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc15)
  } loc(#loc174)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc184)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc185)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    cir.return loc(#loc48)
  } loc(#loc183)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc186)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc187)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc60)
  cir.func @main(%arg0: !s32i loc(fused[#loc63, #loc64]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc65, #loc66])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc189)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc190)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc62)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc67)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc67)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc68)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc69)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc69)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc70)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc57)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %8 = cir.get_global @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc191)
    cir.call @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15_good() : () -> () loc(#loc72)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc58)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc59)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %13 = cir.get_global @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc192)
    cir.call @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15_bad() : () -> () loc(#loc76)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc60)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc79)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc193)
    cir.return %17 : !s32i loc(#loc193)
  } loc(#loc188)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Value is negative\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc81)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc195)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc196)
    cir.br ^bb1 loc(#loc197)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<5> : !s32i loc(#loc90)
    cir.br ^bb2 loc(#loc88)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc88)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc91)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc92)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    cir.br ^bb18 loc(#loc94)
  ^bb5:  // pred: ^bb2
    cir.br ^bb6 loc(#loc198)
  ^bb6:  // pred: ^bb5
    %5 = cir.const #cir.int<0> : !s32i loc(#loc87)
    %6 = cir.cast(int_to_float, %5 : !s32i), !cir.double loc(#loc87)
    cir.store %6, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc196)
    cir.br ^bb7 loc(#loc199)
  ^bb7:  // pred: ^bb6
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc99)
    %8 = cir.const #cir.int<256> : !s32i loc(#loc100)
    %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc170)
    %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc101)
    %11 = cir.call @fgets(%7, %8, %10) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc102)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc103)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc103)
    %14 = cir.cmp(ne, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc200)
    cir.brcond %14 ^bb8, ^bb9 loc(#loc201)
  ^bb8:  // pred: ^bb7
    %15 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc107)
    %16 = cir.call @atof(%15) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc108)
    cir.store %16, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc202)
    cir.br ^bb10 loc(#loc105)
  ^bb9:  // pred: ^bb7
    %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc111)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc111)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc112)
    cir.br ^bb10 loc(#loc98)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc98)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc203)
  ^bb12:  // pred: ^bb11
    %19 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc115)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc116)
    %21 = cir.cast(int_to_float, %20 : !s32i), !cir.double loc(#loc116)
    %22 = cir.cmp(lt, %19, %21) : !cir.double, !cir.bool loc(#loc204)
    cir.brcond %22 ^bb13, ^bb14 loc(#loc205)
  ^bb13:  // pred: ^bb12
    %23 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc81)
    %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc81)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    cir.br ^bb15 loc(#loc118)
  ^bb14:  // pred: ^bb12
    %25 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc121)
    %26 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc122)
    %27 = cir.call @sqrt(%26) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc121)
    %28 = cir.cast(float_to_int, %27 : !cir.double), !s32i loc(#loc121)
    cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc123)
    cir.br ^bb15 loc(#loc114)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc114)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc96)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc124)
  ^bb18:  // 2 preds: ^bb4, ^bb17
    cir.br ^bb19 loc(#loc89)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc83)
  } loc(#loc194)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc207)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc208)
    cir.br ^bb1 loc(#loc209)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<6> : !s32i loc(#loc133)
    cir.br ^bb2 loc(#loc131)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb17 [
      6: ^bb4
    ] loc(#loc131)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc134)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc210)
  ^bb5:  // pred: ^bb4
    %3 = cir.const #cir.int<0> : !s32i loc(#loc130)
    %4 = cir.cast(int_to_float, %3 : !s32i), !cir.double loc(#loc130)
    cir.store %4, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc208)
    cir.br ^bb6 loc(#loc211)
  ^bb6:  // pred: ^bb5
    %5 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc139)
    %6 = cir.const #cir.int<256> : !s32i loc(#loc140)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc170)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc141)
    %9 = cir.call @fgets(%5, %6, %8) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc142)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc143)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc143)
    %12 = cir.cmp(ne, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc212)
    cir.brcond %12 ^bb7, ^bb8 loc(#loc213)
  ^bb7:  // pred: ^bb6
    %13 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc147)
    %14 = cir.call @atof(%13) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc148)
    cir.store %14, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc214)
    cir.br ^bb9 loc(#loc145)
  ^bb8:  // pred: ^bb6
    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc151)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc151)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc152)
    cir.br ^bb9 loc(#loc138)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc138)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc215)
  ^bb11:  // pred: ^bb10
    %17 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc155)
    %18 = cir.const #cir.int<0> : !s32i loc(#loc156)
    %19 = cir.cast(int_to_float, %18 : !s32i), !cir.double loc(#loc156)
    %20 = cir.cmp(lt, %17, %19) : !cir.double, !cir.bool loc(#loc216)
    cir.brcond %20 ^bb12, ^bb13 loc(#loc217)
  ^bb12:  // pred: ^bb11
    %21 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc160)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc160)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc161)
    cir.br ^bb14 loc(#loc158)
  ^bb13:  // pred: ^bb11
    %23 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc162)
    %24 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc163)
    %25 = cir.call @sqrt(%24) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc162)
    %26 = cir.cast(float_to_int, %25 : !cir.double), !s32i loc(#loc162)
    cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc164)
    cir.br ^bb14 loc(#loc154)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc154)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc136)
  ^bb16:  // pred: ^bb15
    cir.br ^bb18 loc(#loc165)
  ^bb17:  // pred: ^bb2
    %27 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc166)
    %28 = cir.cast(array_to_ptrdecay, %27 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc166)
    cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc167)
    cir.br ^bb18 loc(#loc168)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc132)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc126)
  } loc(#loc206)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":102:1)
#loc6 = loc("/usr/include/stdlib.h":103:33)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":42:23)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc13 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":50:19)
#loc14 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":23:1)
#loc15 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":53:1)
#loc16 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":29:9)
#loc17 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":29:41)
#loc18 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":30:9)
#loc19 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":30:31)
#loc20 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":25:5)
#loc21 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":52:5)
#loc22 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":25:12)
#loc23 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":27:5)
#loc24 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":28:5)
#loc25 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":46:5)
#loc26 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":35:9)
#loc27 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":43:9)
#loc28 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":35:19)
#loc29 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":35:32)
#loc30 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":35:49)
#loc31 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":35:13)
#loc32 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":35:59)
#loc33 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":36:9)
#loc34 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":39:9)
#loc35 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":41:9)
#loc36 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":38:33)
#loc37 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":38:28)
#loc38 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":38:13)
#loc39 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":38:44)
#loc40 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":42:13)
#loc41 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":45:33)
#loc42 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":45:28)
#loc43 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":45:9)
#loc44 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":47:5)
#loc45 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":50:9)
#loc46 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":51:9)
#loc47 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":141:1)
#loc48 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":145:1)
#loc49 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":143:5)
#loc50 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":143:11)
#loc51 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":144:5)
#loc52 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":144:11)
#loc53 = loc("/usr/include/stdlib.h":575:1)
#loc54 = loc("/usr/include/stdlib.h":575:41)
#loc55 = loc("/usr/include/time.h":76:1)
#loc56 = loc("/usr/include/time.h":76:38)
#loc57 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":161:15)
#loc58 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":163:15)
#loc59 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":166:15)
#loc60 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":168:15)
#loc61 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":156:1)
#loc62 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":171:1)
#loc67 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":157:1)
#loc68 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":159:27)
#loc69 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":159:22)
#loc70 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":159:5)
#loc71 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":161:5)
#loc72 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":162:5)
#loc73 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":162:78)
#loc74 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":163:5)
#loc75 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":166:5)
#loc76 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":167:5)
#loc77 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":167:77)
#loc78 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":168:5)
#loc79 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":170:12)
#loc80 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":170:5)
#loc81 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":89:23)
#loc82 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":60:1)
#loc83 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":98:1)
#loc84 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":70:9)
#loc85 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":70:41)
#loc86 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":71:9)
#loc87 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":71:31)
#loc88 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":62:5)
#loc89 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":97:5)
#loc90 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":62:12)
#loc91 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":64:5)
#loc92 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":66:19)
#loc93 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":66:9)
#loc94 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":67:9)
#loc95 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":69:5)
#loc96 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":95:5)
#loc97 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":76:9)
#loc98 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":84:9)
#loc99 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":76:19)
#loc100 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":76:32)
#loc101 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":76:49)
#loc102 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":76:13)
#loc103 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":76:59)
#loc104 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":77:9)
#loc105 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":80:9)
#loc106 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":82:9)
#loc107 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":79:33)
#loc108 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":79:28)
#loc109 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":79:13)
#loc110 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":79:44)
#loc111 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":83:23)
#loc112 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":83:13)
#loc113 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":87:9)
#loc114 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":94:9)
#loc115 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":87:13)
#loc116 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":87:28)
#loc117 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":88:9)
#loc118 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":90:9)
#loc119 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":92:9)
#loc120 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":89:13)
#loc121 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":93:32)
#loc122 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":93:37)
#loc123 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":93:13)
#loc124 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":96:5)
#loc125 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":101:1)
#loc126 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":139:1)
#loc127 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":107:9)
#loc128 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":107:41)
#loc129 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":108:9)
#loc130 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":108:31)
#loc131 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":103:5)
#loc132 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":138:5)
#loc133 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":103:12)
#loc134 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":105:5)
#loc135 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":106:5)
#loc136 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":132:5)
#loc137 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":113:9)
#loc138 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":121:9)
#loc139 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":113:19)
#loc140 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":113:32)
#loc141 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":113:49)
#loc142 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":113:13)
#loc143 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":113:59)
#loc144 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":114:9)
#loc145 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":117:9)
#loc146 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":119:9)
#loc147 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":116:33)
#loc148 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":116:28)
#loc149 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":116:13)
#loc150 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":116:44)
#loc151 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":120:23)
#loc152 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":120:13)
#loc153 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":124:9)
#loc154 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":131:9)
#loc155 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":124:13)
#loc156 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":124:28)
#loc157 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":125:9)
#loc158 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":127:9)
#loc159 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":129:9)
#loc160 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":126:23)
#loc161 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":126:13)
#loc162 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":130:32)
#loc163 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":130:37)
#loc164 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":130:13)
#loc165 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":133:5)
#loc166 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":136:19)
#loc167 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":136:9)
#loc168 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15.c":137:9)
#loc169 = loc(fused[#loc1, #loc2])
#loc170 = loc(fused[#loc3, #loc4])
#loc171 = loc(fused[#loc5, #loc6])
#loc172 = loc(fused[#loc7, #loc8])
#loc173 = loc(fused[#loc10, #loc11])
#loc174 = loc(fused[#loc14, #loc15])
#loc175 = loc(fused[#loc16, #loc17])
#loc176 = loc(fused[#loc18, #loc19])
#loc177 = loc(fused[#loc20, #loc21])
#loc178 = loc(fused[#loc24, #loc25])
#loc179 = loc(fused[#loc26, #loc27])
#loc180 = loc(fused[#loc31, #loc32])
#loc181 = loc(fused[#loc33, #loc34, #loc35, #loc27])
#loc182 = loc(fused[#loc38, #loc39])
#loc183 = loc(fused[#loc47, #loc48])
#loc184 = loc(fused[#loc49, #loc50])
#loc185 = loc(fused[#loc51, #loc52])
#loc186 = loc(fused[#loc53, #loc54])
#loc187 = loc(fused[#loc55, #loc56])
#loc188 = loc(fused[#loc61, #loc62])
#loc191 = loc(fused[#loc72, #loc73])
#loc192 = loc(fused[#loc76, #loc77])
#loc193 = loc(fused[#loc80, #loc79])
#loc194 = loc(fused[#loc82, #loc83])
#loc195 = loc(fused[#loc84, #loc85])
#loc196 = loc(fused[#loc86, #loc87])
#loc197 = loc(fused[#loc88, #loc89])
#loc198 = loc(fused[#loc95, #loc96])
#loc199 = loc(fused[#loc97, #loc98])
#loc200 = loc(fused[#loc102, #loc103])
#loc201 = loc(fused[#loc104, #loc105, #loc106, #loc98])
#loc202 = loc(fused[#loc109, #loc110])
#loc203 = loc(fused[#loc113, #loc114])
#loc204 = loc(fused[#loc115, #loc116])
#loc205 = loc(fused[#loc117, #loc118, #loc119, #loc114])
#loc206 = loc(fused[#loc125, #loc126])
#loc207 = loc(fused[#loc127, #loc128])
#loc208 = loc(fused[#loc129, #loc130])
#loc209 = loc(fused[#loc131, #loc132])
#loc210 = loc(fused[#loc135, #loc136])
#loc211 = loc(fused[#loc137, #loc138])
#loc212 = loc(fused[#loc142, #loc143])
#loc213 = loc(fused[#loc144, #loc145, #loc146, #loc138])
#loc214 = loc(fused[#loc149, #loc150])
#loc215 = loc(fused[#loc153, #loc154])
#loc216 = loc(fused[#loc155, #loc156])
#loc217 = loc(fused[#loc157, #loc158, #loc159, #loc154])
