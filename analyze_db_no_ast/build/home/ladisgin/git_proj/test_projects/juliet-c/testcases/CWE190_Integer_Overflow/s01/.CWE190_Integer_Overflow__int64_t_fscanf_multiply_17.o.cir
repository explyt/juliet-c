!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc157)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc158)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc159)
  cir.func private  @printLongLongLine(!s64i) loc(#loc160)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_fscanf_multiply_17_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc162)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc163)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc164)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc16)
    cir.store %3, %2 : !s64i, !cir.ptr<!s64i> loc(#loc165)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc20)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc167)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc23)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc168)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc24)
        cir.condition(%8) loc(#loc24)
      } body {
        cir.scope {
          %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc26)
          %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc158)
          %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc27)
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc159)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc159)
          %10 = cir.call @__isoc99_fscanf(%7, %9, %2) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc26)
        } loc(#loc169)
        cir.yield loc(#loc19)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc29)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc170)
        cir.yield loc(#loc166)
      } loc(#loc166)
    } loc(#loc166)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc32)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc172)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc34)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc35)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc173)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc36)
        cir.condition(%8) loc(#loc36)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc40)
            %6 = cir.const #cir.int<0> : !s32i loc(#loc41)
            %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc41)
            %8 = cir.cmp(gt, %5, %7) : !s64i, !s32i loc(#loc176)
            %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc42)
            cir.if %9 {
              %10 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc178)
              %11 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc46)
              %12 = cir.const #cir.int<2> : !s32i loc(#loc45)
              %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc45)
              %14 = cir.binop(mul, %11, %13) nsw : !s64i loc(#loc46)
              cir.store %14, %10 : !s64i, !cir.ptr<!s64i> loc(#loc178)
              %15 = cir.load %10 : !cir.ptr<!s64i>, !s64i loc(#loc47)
              cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc48)
            } loc(#loc177)
          } loc(#loc175)
        } loc(#loc174)
        cir.yield loc(#loc31)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc49)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc50)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc179)
        cir.yield loc(#loc171)
      } loc(#loc171)
    } loc(#loc171)
    cir.return loc(#loc10)
  } loc(#loc161)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_fscanf_multiply_17_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc181)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc53)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc182)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc55)
    cir.return loc(#loc52)
  } loc(#loc180)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc183)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc59)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc185)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc186)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc187)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc67)
    cir.store %3, %2 : !s64i, !cir.ptr<!s64i> loc(#loc188)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc71)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc74)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc191)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc75)
        cir.condition(%8) loc(#loc75)
      } body {
        cir.scope {
          %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc77)
          %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc158)
          %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc78)
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc193)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc193)
          %10 = cir.call @__isoc99_fscanf(%7, %9, %2) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc77)
        } loc(#loc192)
        cir.yield loc(#loc70)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc82)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc194)
        cir.yield loc(#loc189)
      } loc(#loc189)
    } loc(#loc189)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc85)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc196)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc87)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc88)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc197)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc89)
        cir.condition(%8) loc(#loc89)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc93)
            %6 = cir.const #cir.int<0> : !s32i loc(#loc94)
            %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc94)
            %8 = cir.cmp(gt, %5, %7) : !s64i, !s32i loc(#loc200)
            %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc95)
            cir.if %9 {
              cir.scope {
                %10 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc99)
                %11 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc100)
                %12 = cir.const #cir.int<2> : !s32i loc(#loc101)
                %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc101)
                %14 = cir.binop(div, %11, %13) : !s64i loc(#loc203)
                %15 = cir.cmp(lt, %10, %14) : !s64i, !s32i loc(#loc204)
                %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc103)
                cir.if %16 {
                  %17 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc206)
                  %18 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc109)
                  %19 = cir.const #cir.int<2> : !s32i loc(#loc108)
                  %20 = cir.cast(integral, %19 : !s32i), !s64i loc(#loc108)
                  %21 = cir.binop(mul, %18, %20) nsw : !s64i loc(#loc109)
                  cir.store %21, %17 : !s64i, !cir.ptr<!s64i> loc(#loc206)
                  %22 = cir.load %17 : !cir.ptr<!s64i>, !s64i loc(#loc110)
                  cir.call @printLongLongLine(%22) : (!s64i) -> () loc(#loc111)
                } else {
                  %17 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc59)
                  %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc59)
                  cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc112)
                } loc(#loc205)
              } loc(#loc202)
            } loc(#loc201)
          } loc(#loc199)
        } loc(#loc198)
        cir.yield loc(#loc84)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc113)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc114)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc207)
        cir.yield loc(#loc195)
      } loc(#loc195)
    } loc(#loc195)
    cir.return loc(#loc61)
  } loc(#loc184)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc209)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc210)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc211)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc122)
    cir.store %3, %2 : !s64i, !cir.ptr<!s64i> loc(#loc212)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc126)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc214)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc128)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc129)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc215)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc130)
        cir.condition(%8) loc(#loc130)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<2> : !s32i loc(#loc132)
          %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc132)
          cir.store %6, %2 : !s64i, !cir.ptr<!s64i> loc(#loc217)
        } loc(#loc216)
        cir.yield loc(#loc125)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc134)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc135)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc218)
        cir.yield loc(#loc213)
      } loc(#loc213)
    } loc(#loc213)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc138)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc220)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc140)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc141)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc221)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc142)
        cir.condition(%8) loc(#loc142)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc146)
            %6 = cir.const #cir.int<0> : !s32i loc(#loc147)
            %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc147)
            %8 = cir.cmp(gt, %5, %7) : !s64i, !s32i loc(#loc224)
            %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc148)
            cir.if %9 {
              %10 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc226)
              %11 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc152)
              %12 = cir.const #cir.int<2> : !s32i loc(#loc151)
              %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc151)
              %14 = cir.binop(mul, %11, %13) nsw : !s64i loc(#loc152)
              cir.store %14, %10 : !s64i, !cir.ptr<!s64i> loc(#loc226)
              %15 = cir.load %10 : !cir.ptr<!s64i>, !s64i loc(#loc153)
              cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc154)
            } loc(#loc225)
          } loc(#loc223)
        } loc(#loc222)
        cir.yield loc(#loc137)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc155)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc156)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc227)
        cir.yield loc(#loc219)
      } loc(#loc219)
    } loc(#loc219)
    cir.return loc(#loc116)
  } loc(#loc208)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":31:24)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":31:28)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":23:1)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":42:1)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":25:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":25:9)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":25:11)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":26:13)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":27:12)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":27:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":28:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":32:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":28:13)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":28:9)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":28:16)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":28:20)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":28:18)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":29:5)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":31:9)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":31:17)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":28:24)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":28:23)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":33:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":41:5)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":33:13)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":33:9)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":33:16)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":33:20)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":33:18)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":34:5)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":35:9)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":40:9)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":35:12)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":35:19)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":35:17)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":36:9)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":38:13)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":38:37)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":38:30)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":39:31)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":39:13)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":33:24)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":33:23)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":99:1)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":103:1)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":101:5)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":101:13)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":102:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":102:13)
#loc57 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc58 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":71:27)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":49:1)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":75:1)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":51:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":51:9)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":51:11)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":52:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":52:13)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":53:12)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":53:5)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":54:5)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":58:5)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":54:13)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":54:9)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":54:16)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":54:20)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":54:18)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":55:5)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":57:9)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":57:17)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":57:24)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":57:28)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":54:24)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":54:23)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":59:5)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":74:5)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":59:13)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":59:9)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":59:16)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":59:20)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":59:18)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":60:5)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":61:9)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":73:9)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":61:12)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":61:19)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":61:17)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":62:9)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":64:13)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":72:13)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":64:17)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":64:25)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":64:35)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":64:36)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":64:22)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":65:13)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":68:13)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":70:13)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":66:17)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":66:41)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":66:34)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":67:35)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":67:17)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":71:17)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":59:24)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":59:23)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":78:1)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":97:1)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":80:5)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":80:9)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":80:11)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":81:5)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":81:13)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":82:12)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":82:5)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":83:5)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":87:5)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":83:13)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":83:9)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":83:16)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":83:20)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":83:18)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":84:5)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":86:16)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":86:9)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":83:24)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":83:23)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":88:5)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":96:5)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":88:13)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":88:9)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":88:16)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":88:20)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":88:18)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":89:5)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":90:9)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":95:9)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":90:12)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":90:19)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":90:17)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":91:9)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":93:13)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":93:37)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":93:30)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":94:31)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":94:13)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":88:24)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_17.c":88:23)
#loc157 = loc(fused[#loc1, #loc2])
#loc158 = loc(fused[#loc3, #loc4])
#loc159 = loc(fused[#loc5, #loc6])
#loc160 = loc(fused[#loc7, #loc8])
#loc161 = loc(fused[#loc9, #loc10])
#loc162 = loc(fused[#loc11, #loc12])
#loc163 = loc(fused[#loc11, #loc13])
#loc164 = loc(fused[#loc14, #loc15])
#loc165 = loc(fused[#loc17, #loc16])
#loc166 = loc(fused[#loc18, #loc19])
#loc167 = loc(fused[#loc21, #loc20])
#loc168 = loc(fused[#loc22, #loc23])
#loc169 = loc(fused[#loc25, #loc19])
#loc170 = loc(fused[#loc29, #loc28])
#loc171 = loc(fused[#loc30, #loc31])
#loc172 = loc(fused[#loc33, #loc32])
#loc173 = loc(fused[#loc34, #loc35])
#loc174 = loc(fused[#loc37, #loc31])
#loc175 = loc(fused[#loc38, #loc39])
#loc176 = loc(fused[#loc40, #loc41])
#loc177 = loc(fused[#loc43, #loc39])
#loc178 = loc(fused[#loc44, #loc45])
#loc179 = loc(fused[#loc50, #loc49])
#loc180 = loc(fused[#loc51, #loc52])
#loc181 = loc(fused[#loc53, #loc54])
#loc182 = loc(fused[#loc55, #loc56])
#loc183 = loc(fused[#loc57, #loc58])
#loc184 = loc(fused[#loc60, #loc61])
#loc185 = loc(fused[#loc62, #loc63])
#loc186 = loc(fused[#loc62, #loc64])
#loc187 = loc(fused[#loc65, #loc66])
#loc188 = loc(fused[#loc68, #loc67])
#loc189 = loc(fused[#loc69, #loc70])
#loc190 = loc(fused[#loc72, #loc71])
#loc191 = loc(fused[#loc73, #loc74])
#loc192 = loc(fused[#loc76, #loc70])
#loc193 = loc(fused[#loc79, #loc80])
#loc194 = loc(fused[#loc82, #loc81])
#loc195 = loc(fused[#loc83, #loc84])
#loc196 = loc(fused[#loc86, #loc85])
#loc197 = loc(fused[#loc87, #loc88])
#loc198 = loc(fused[#loc90, #loc84])
#loc199 = loc(fused[#loc91, #loc92])
#loc200 = loc(fused[#loc93, #loc94])
#loc201 = loc(fused[#loc96, #loc92])
#loc202 = loc(fused[#loc97, #loc98])
#loc203 = loc(fused[#loc100, #loc101])
#loc204 = loc(fused[#loc99, #loc102])
#loc205 = loc(fused[#loc104, #loc105, #loc106, #loc98])
#loc206 = loc(fused[#loc107, #loc108])
#loc207 = loc(fused[#loc114, #loc113])
#loc208 = loc(fused[#loc115, #loc116])
#loc209 = loc(fused[#loc117, #loc118])
#loc210 = loc(fused[#loc117, #loc119])
#loc211 = loc(fused[#loc120, #loc121])
#loc212 = loc(fused[#loc123, #loc122])
#loc213 = loc(fused[#loc124, #loc125])
#loc214 = loc(fused[#loc127, #loc126])
#loc215 = loc(fused[#loc128, #loc129])
#loc216 = loc(fused[#loc131, #loc125])
#loc217 = loc(fused[#loc133, #loc132])
#loc218 = loc(fused[#loc135, #loc134])
#loc219 = loc(fused[#loc136, #loc137])
#loc220 = loc(fused[#loc139, #loc138])
#loc221 = loc(fused[#loc140, #loc141])
#loc222 = loc(fused[#loc143, #loc137])
#loc223 = loc(fused[#loc144, #loc145])
#loc224 = loc(fused[#loc146, #loc147])
#loc225 = loc(fused[#loc149, #loc145])
#loc226 = loc(fused[#loc150, #loc151])
#loc227 = loc(fused[#loc156, #loc155])
