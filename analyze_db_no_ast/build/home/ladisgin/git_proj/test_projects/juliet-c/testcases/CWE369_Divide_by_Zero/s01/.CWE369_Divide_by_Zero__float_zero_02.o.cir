!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc161)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_zero_02_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc163)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc7)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc164)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc11)
      cir.if %3 {
        %4 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc13)
        cir.store %4, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc167)
      } loc(#loc166)
    } loc(#loc165)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc17)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc171)
          %5 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc23)
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc24)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc24)
          %8 = cir.binop(div, %5, %7) : !cir.double loc(#loc172)
          %9 = cir.cast(float_to_int, %8 : !cir.double), !s32i loc(#loc172)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc171)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc25)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc26)
        } loc(#loc170)
      } loc(#loc169)
    } loc(#loc168)
    cir.return loc(#loc4)
  } loc(#loc162)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_zero_02_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc174)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc176)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc177)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc28)
  } loc(#loc173)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc178)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc39)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc40)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc180)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc45)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc181)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc49)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc49)
      cir.if %3 {
        %4 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc51)
        cir.store %4, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc184)
      } loc(#loc183)
    } loc(#loc182)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc55)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc55)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc39)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc39)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc59)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc62)
          %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc62)
          %6 = cir.fabs %5 : !cir.double loc(#loc62)
          %7 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc63)
          %8 = cir.cmp(gt, %6, %7) : !cir.double, !s32i loc(#loc188)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc65)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc190)
            %11 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc71)
            %12 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc72)
            %13 = cir.cast(floating, %12 : !cir.float), !cir.double loc(#loc72)
            %14 = cir.binop(div, %11, %13) : !cir.double loc(#loc191)
            %15 = cir.cast(float_to_int, %14 : !cir.double), !s32i loc(#loc191)
            cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc190)
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc73)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc74)
          } else {
            %10 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc40)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc40)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc75)
          } loc(#loc189)
        } loc(#loc187)
      } loc(#loc186)
    } loc(#loc185)
    cir.return loc(#loc42)
  } loc(#loc179)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc193)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc80)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc194)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc84)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc84)
      cir.if %3 {
        %4 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc86)
        cir.store %4, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc197)
      } loc(#loc196)
    } loc(#loc195)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc90)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc90)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc94)
          %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc94)
          %6 = cir.fabs %5 : !cir.double loc(#loc94)
          %7 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc95)
          %8 = cir.cmp(gt, %6, %7) : !cir.double, !s32i loc(#loc201)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc97)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc203)
            %11 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc103)
            %12 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc104)
            %13 = cir.cast(floating, %12 : !cir.float), !cir.double loc(#loc104)
            %14 = cir.binop(div, %11, %13) : !cir.double loc(#loc204)
            %15 = cir.cast(float_to_int, %14 : !cir.double), !s32i loc(#loc204)
            cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc203)
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc105)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc106)
          } else {
            %10 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc107)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc107)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc108)
          } loc(#loc202)
        } loc(#loc200)
      } loc(#loc199)
    } loc(#loc198)
    cir.return loc(#loc77)
  } loc(#loc192)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc206)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc113)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc207)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc117)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc117)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc121)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc121)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc122)
      } else {
        %4 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc123)
        cir.store %4, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc210)
      } loc(#loc209)
    } loc(#loc208)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc127)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc127)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc214)
          %5 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc133)
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc134)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc134)
          %8 = cir.binop(div, %5, %7) : !cir.double loc(#loc215)
          %9 = cir.cast(float_to_int, %8 : !cir.double), !s32i loc(#loc215)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc214)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc135)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc136)
        } loc(#loc213)
      } loc(#loc212)
    } loc(#loc211)
    cir.return loc(#loc110)
  } loc(#loc205)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc217)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc141)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc218)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc145)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc145)
      cir.if %3 {
        %4 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc147)
        cir.store %4, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc221)
      } loc(#loc220)
    } loc(#loc219)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc151)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc151)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc225)
          %5 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc157)
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc158)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc158)
          %8 = cir.binop(div, %5, %7) : !cir.double loc(#loc226)
          %9 = cir.cast(float_to_int, %8 : !cir.double), !s32i loc(#loc226)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc225)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc159)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc160)
        } loc(#loc224)
      } loc(#loc223)
    } loc(#loc222)
    cir.return loc(#loc138)
  } loc(#loc216)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_02.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__float_zero_02.c":24:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_zero_02.c":42:1)
#loc5 = loc("CWE369_Divide_by_Zero__float_zero_02.c":26:5)
#loc6 = loc("CWE369_Divide_by_Zero__float_zero_02.c":26:11)
#loc7 = loc("CWE369_Divide_by_Zero__float_zero_02.c":28:12)
#loc8 = loc("CWE369_Divide_by_Zero__float_zero_02.c":28:5)
#loc9 = loc("CWE369_Divide_by_Zero__float_zero_02.c":29:5)
#loc10 = loc("CWE369_Divide_by_Zero__float_zero_02.c":33:5)
#loc11 = loc("CWE369_Divide_by_Zero__float_zero_02.c":29:8)
#loc12 = loc("CWE369_Divide_by_Zero__float_zero_02.c":30:5)
#loc13 = loc("CWE369_Divide_by_Zero__float_zero_02.c":32:16)
#loc14 = loc("CWE369_Divide_by_Zero__float_zero_02.c":32:9)
#loc15 = loc("CWE369_Divide_by_Zero__float_zero_02.c":34:5)
#loc16 = loc("CWE369_Divide_by_Zero__float_zero_02.c":41:5)
#loc17 = loc("CWE369_Divide_by_Zero__float_zero_02.c":34:8)
#loc18 = loc("CWE369_Divide_by_Zero__float_zero_02.c":35:5)
#loc19 = loc("CWE369_Divide_by_Zero__float_zero_02.c":36:9)
#loc20 = loc("CWE369_Divide_by_Zero__float_zero_02.c":40:9)
#loc21 = loc("CWE369_Divide_by_Zero__float_zero_02.c":38:13)
#loc22 = loc("CWE369_Divide_by_Zero__float_zero_02.c":38:44)
#loc23 = loc("CWE369_Divide_by_Zero__float_zero_02.c":38:32)
#loc24 = loc("CWE369_Divide_by_Zero__float_zero_02.c":38:40)
#loc25 = loc("CWE369_Divide_by_Zero__float_zero_02.c":39:26)
#loc26 = loc("CWE369_Divide_by_Zero__float_zero_02.c":39:13)
#loc27 = loc("CWE369_Divide_by_Zero__float_zero_02.c":152:1)
#loc28 = loc("CWE369_Divide_by_Zero__float_zero_02.c":158:1)
#loc29 = loc("CWE369_Divide_by_Zero__float_zero_02.c":154:5)
#loc30 = loc("CWE369_Divide_by_Zero__float_zero_02.c":154:14)
#loc31 = loc("CWE369_Divide_by_Zero__float_zero_02.c":155:5)
#loc32 = loc("CWE369_Divide_by_Zero__float_zero_02.c":155:14)
#loc33 = loc("CWE369_Divide_by_Zero__float_zero_02.c":156:5)
#loc34 = loc("CWE369_Divide_by_Zero__float_zero_02.c":156:14)
#loc35 = loc("CWE369_Divide_by_Zero__float_zero_02.c":157:5)
#loc36 = loc("CWE369_Divide_by_Zero__float_zero_02.c":157:14)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE369_Divide_by_Zero__float_zero_02.c":62:19)
#loc40 = loc("CWE369_Divide_by_Zero__float_zero_02.c":74:23)
#loc41 = loc("CWE369_Divide_by_Zero__float_zero_02.c":49:1)
#loc42 = loc("CWE369_Divide_by_Zero__float_zero_02.c":77:1)
#loc43 = loc("CWE369_Divide_by_Zero__float_zero_02.c":51:5)
#loc44 = loc("CWE369_Divide_by_Zero__float_zero_02.c":51:11)
#loc45 = loc("CWE369_Divide_by_Zero__float_zero_02.c":53:12)
#loc46 = loc("CWE369_Divide_by_Zero__float_zero_02.c":53:5)
#loc47 = loc("CWE369_Divide_by_Zero__float_zero_02.c":54:5)
#loc48 = loc("CWE369_Divide_by_Zero__float_zero_02.c":58:5)
#loc49 = loc("CWE369_Divide_by_Zero__float_zero_02.c":54:8)
#loc50 = loc("CWE369_Divide_by_Zero__float_zero_02.c":55:5)
#loc51 = loc("CWE369_Divide_by_Zero__float_zero_02.c":57:16)
#loc52 = loc("CWE369_Divide_by_Zero__float_zero_02.c":57:9)
#loc53 = loc("CWE369_Divide_by_Zero__float_zero_02.c":59:5)
#loc54 = loc("CWE369_Divide_by_Zero__float_zero_02.c":76:5)
#loc55 = loc("CWE369_Divide_by_Zero__float_zero_02.c":59:8)
#loc56 = loc("CWE369_Divide_by_Zero__float_zero_02.c":60:5)
#loc57 = loc("CWE369_Divide_by_Zero__float_zero_02.c":63:5)
#loc58 = loc("CWE369_Divide_by_Zero__float_zero_02.c":65:5)
#loc59 = loc("CWE369_Divide_by_Zero__float_zero_02.c":62:9)
#loc60 = loc("CWE369_Divide_by_Zero__float_zero_02.c":67:9)
#loc61 = loc("CWE369_Divide_by_Zero__float_zero_02.c":75:9)
#loc62 = loc("CWE369_Divide_by_Zero__float_zero_02.c":67:17)
#loc63 = loc("CWE369_Divide_by_Zero__float_zero_02.c":67:25)
#loc64 = loc("CWE369_Divide_by_Zero__float_zero_02.c":67:12)
#loc65 = loc("CWE369_Divide_by_Zero__float_zero_02.c":67:23)
#loc66 = loc("CWE369_Divide_by_Zero__float_zero_02.c":68:9)
#loc67 = loc("CWE369_Divide_by_Zero__float_zero_02.c":71:9)
#loc68 = loc("CWE369_Divide_by_Zero__float_zero_02.c":73:9)
#loc69 = loc("CWE369_Divide_by_Zero__float_zero_02.c":69:13)
#loc70 = loc("CWE369_Divide_by_Zero__float_zero_02.c":69:44)
#loc71 = loc("CWE369_Divide_by_Zero__float_zero_02.c":69:32)
#loc72 = loc("CWE369_Divide_by_Zero__float_zero_02.c":69:40)
#loc73 = loc("CWE369_Divide_by_Zero__float_zero_02.c":70:26)
#loc74 = loc("CWE369_Divide_by_Zero__float_zero_02.c":70:13)
#loc75 = loc("CWE369_Divide_by_Zero__float_zero_02.c":74:13)
#loc76 = loc("CWE369_Divide_by_Zero__float_zero_02.c":80:1)
#loc77 = loc("CWE369_Divide_by_Zero__float_zero_02.c":103:1)
#loc78 = loc("CWE369_Divide_by_Zero__float_zero_02.c":82:5)
#loc79 = loc("CWE369_Divide_by_Zero__float_zero_02.c":82:11)
#loc80 = loc("CWE369_Divide_by_Zero__float_zero_02.c":84:12)
#loc81 = loc("CWE369_Divide_by_Zero__float_zero_02.c":84:5)
#loc82 = loc("CWE369_Divide_by_Zero__float_zero_02.c":85:5)
#loc83 = loc("CWE369_Divide_by_Zero__float_zero_02.c":89:5)
#loc84 = loc("CWE369_Divide_by_Zero__float_zero_02.c":85:8)
#loc85 = loc("CWE369_Divide_by_Zero__float_zero_02.c":86:5)
#loc86 = loc("CWE369_Divide_by_Zero__float_zero_02.c":88:16)
#loc87 = loc("CWE369_Divide_by_Zero__float_zero_02.c":88:9)
#loc88 = loc("CWE369_Divide_by_Zero__float_zero_02.c":90:5)
#loc89 = loc("CWE369_Divide_by_Zero__float_zero_02.c":102:5)
#loc90 = loc("CWE369_Divide_by_Zero__float_zero_02.c":90:8)
#loc91 = loc("CWE369_Divide_by_Zero__float_zero_02.c":91:5)
#loc92 = loc("CWE369_Divide_by_Zero__float_zero_02.c":93:9)
#loc93 = loc("CWE369_Divide_by_Zero__float_zero_02.c":101:9)
#loc94 = loc("CWE369_Divide_by_Zero__float_zero_02.c":93:17)
#loc95 = loc("CWE369_Divide_by_Zero__float_zero_02.c":93:25)
#loc96 = loc("CWE369_Divide_by_Zero__float_zero_02.c":93:12)
#loc97 = loc("CWE369_Divide_by_Zero__float_zero_02.c":93:23)
#loc98 = loc("CWE369_Divide_by_Zero__float_zero_02.c":94:9)
#loc99 = loc("CWE369_Divide_by_Zero__float_zero_02.c":97:9)
#loc100 = loc("CWE369_Divide_by_Zero__float_zero_02.c":99:9)
#loc101 = loc("CWE369_Divide_by_Zero__float_zero_02.c":95:13)
#loc102 = loc("CWE369_Divide_by_Zero__float_zero_02.c":95:44)
#loc103 = loc("CWE369_Divide_by_Zero__float_zero_02.c":95:32)
#loc104 = loc("CWE369_Divide_by_Zero__float_zero_02.c":95:40)
#loc105 = loc("CWE369_Divide_by_Zero__float_zero_02.c":96:26)
#loc106 = loc("CWE369_Divide_by_Zero__float_zero_02.c":96:13)
#loc107 = loc("CWE369_Divide_by_Zero__float_zero_02.c":100:23)
#loc108 = loc("CWE369_Divide_by_Zero__float_zero_02.c":100:13)
#loc109 = loc("CWE369_Divide_by_Zero__float_zero_02.c":106:1)
#loc110 = loc("CWE369_Divide_by_Zero__float_zero_02.c":129:1)
#loc111 = loc("CWE369_Divide_by_Zero__float_zero_02.c":108:5)
#loc112 = loc("CWE369_Divide_by_Zero__float_zero_02.c":108:11)
#loc113 = loc("CWE369_Divide_by_Zero__float_zero_02.c":110:12)
#loc114 = loc("CWE369_Divide_by_Zero__float_zero_02.c":110:5)
#loc115 = loc("CWE369_Divide_by_Zero__float_zero_02.c":111:5)
#loc116 = loc("CWE369_Divide_by_Zero__float_zero_02.c":120:5)
#loc117 = loc("CWE369_Divide_by_Zero__float_zero_02.c":111:8)
#loc118 = loc("CWE369_Divide_by_Zero__float_zero_02.c":112:5)
#loc119 = loc("CWE369_Divide_by_Zero__float_zero_02.c":115:5)
#loc120 = loc("CWE369_Divide_by_Zero__float_zero_02.c":117:5)
#loc121 = loc("CWE369_Divide_by_Zero__float_zero_02.c":114:19)
#loc122 = loc("CWE369_Divide_by_Zero__float_zero_02.c":114:9)
#loc123 = loc("CWE369_Divide_by_Zero__float_zero_02.c":119:16)
#loc124 = loc("CWE369_Divide_by_Zero__float_zero_02.c":119:9)
#loc125 = loc("CWE369_Divide_by_Zero__float_zero_02.c":121:5)
#loc126 = loc("CWE369_Divide_by_Zero__float_zero_02.c":128:5)
#loc127 = loc("CWE369_Divide_by_Zero__float_zero_02.c":121:8)
#loc128 = loc("CWE369_Divide_by_Zero__float_zero_02.c":122:5)
#loc129 = loc("CWE369_Divide_by_Zero__float_zero_02.c":123:9)
#loc130 = loc("CWE369_Divide_by_Zero__float_zero_02.c":127:9)
#loc131 = loc("CWE369_Divide_by_Zero__float_zero_02.c":125:13)
#loc132 = loc("CWE369_Divide_by_Zero__float_zero_02.c":125:44)
#loc133 = loc("CWE369_Divide_by_Zero__float_zero_02.c":125:32)
#loc134 = loc("CWE369_Divide_by_Zero__float_zero_02.c":125:40)
#loc135 = loc("CWE369_Divide_by_Zero__float_zero_02.c":126:26)
#loc136 = loc("CWE369_Divide_by_Zero__float_zero_02.c":126:13)
#loc137 = loc("CWE369_Divide_by_Zero__float_zero_02.c":132:1)
#loc138 = loc("CWE369_Divide_by_Zero__float_zero_02.c":150:1)
#loc139 = loc("CWE369_Divide_by_Zero__float_zero_02.c":134:5)
#loc140 = loc("CWE369_Divide_by_Zero__float_zero_02.c":134:11)
#loc141 = loc("CWE369_Divide_by_Zero__float_zero_02.c":136:12)
#loc142 = loc("CWE369_Divide_by_Zero__float_zero_02.c":136:5)
#loc143 = loc("CWE369_Divide_by_Zero__float_zero_02.c":137:5)
#loc144 = loc("CWE369_Divide_by_Zero__float_zero_02.c":141:5)
#loc145 = loc("CWE369_Divide_by_Zero__float_zero_02.c":137:8)
#loc146 = loc("CWE369_Divide_by_Zero__float_zero_02.c":138:5)
#loc147 = loc("CWE369_Divide_by_Zero__float_zero_02.c":140:16)
#loc148 = loc("CWE369_Divide_by_Zero__float_zero_02.c":140:9)
#loc149 = loc("CWE369_Divide_by_Zero__float_zero_02.c":142:5)
#loc150 = loc("CWE369_Divide_by_Zero__float_zero_02.c":149:5)
#loc151 = loc("CWE369_Divide_by_Zero__float_zero_02.c":142:8)
#loc152 = loc("CWE369_Divide_by_Zero__float_zero_02.c":143:5)
#loc153 = loc("CWE369_Divide_by_Zero__float_zero_02.c":144:9)
#loc154 = loc("CWE369_Divide_by_Zero__float_zero_02.c":148:9)
#loc155 = loc("CWE369_Divide_by_Zero__float_zero_02.c":146:13)
#loc156 = loc("CWE369_Divide_by_Zero__float_zero_02.c":146:44)
#loc157 = loc("CWE369_Divide_by_Zero__float_zero_02.c":146:32)
#loc158 = loc("CWE369_Divide_by_Zero__float_zero_02.c":146:40)
#loc159 = loc("CWE369_Divide_by_Zero__float_zero_02.c":147:26)
#loc160 = loc("CWE369_Divide_by_Zero__float_zero_02.c":147:13)
#loc161 = loc(fused[#loc1, #loc2])
#loc162 = loc(fused[#loc3, #loc4])
#loc163 = loc(fused[#loc5, #loc6])
#loc164 = loc(fused[#loc8, #loc7])
#loc165 = loc(fused[#loc9, #loc10])
#loc166 = loc(fused[#loc12, #loc10])
#loc167 = loc(fused[#loc14, #loc13])
#loc168 = loc(fused[#loc15, #loc16])
#loc169 = loc(fused[#loc18, #loc16])
#loc170 = loc(fused[#loc19, #loc20])
#loc171 = loc(fused[#loc21, #loc22])
#loc172 = loc(fused[#loc23, #loc24])
#loc173 = loc(fused[#loc27, #loc28])
#loc174 = loc(fused[#loc29, #loc30])
#loc175 = loc(fused[#loc31, #loc32])
#loc176 = loc(fused[#loc33, #loc34])
#loc177 = loc(fused[#loc35, #loc36])
#loc178 = loc(fused[#loc37, #loc38])
#loc179 = loc(fused[#loc41, #loc42])
#loc180 = loc(fused[#loc43, #loc44])
#loc181 = loc(fused[#loc46, #loc45])
#loc182 = loc(fused[#loc47, #loc48])
#loc183 = loc(fused[#loc50, #loc48])
#loc184 = loc(fused[#loc52, #loc51])
#loc185 = loc(fused[#loc53, #loc54])
#loc186 = loc(fused[#loc56, #loc57, #loc58, #loc54])
#loc187 = loc(fused[#loc60, #loc61])
#loc188 = loc(fused[#loc64, #loc63])
#loc189 = loc(fused[#loc66, #loc67, #loc68, #loc61])
#loc190 = loc(fused[#loc69, #loc70])
#loc191 = loc(fused[#loc71, #loc72])
#loc192 = loc(fused[#loc76, #loc77])
#loc193 = loc(fused[#loc78, #loc79])
#loc194 = loc(fused[#loc81, #loc80])
#loc195 = loc(fused[#loc82, #loc83])
#loc196 = loc(fused[#loc85, #loc83])
#loc197 = loc(fused[#loc87, #loc86])
#loc198 = loc(fused[#loc88, #loc89])
#loc199 = loc(fused[#loc91, #loc89])
#loc200 = loc(fused[#loc92, #loc93])
#loc201 = loc(fused[#loc96, #loc95])
#loc202 = loc(fused[#loc98, #loc99, #loc100, #loc93])
#loc203 = loc(fused[#loc101, #loc102])
#loc204 = loc(fused[#loc103, #loc104])
#loc205 = loc(fused[#loc109, #loc110])
#loc206 = loc(fused[#loc111, #loc112])
#loc207 = loc(fused[#loc114, #loc113])
#loc208 = loc(fused[#loc115, #loc116])
#loc209 = loc(fused[#loc118, #loc119, #loc120, #loc116])
#loc210 = loc(fused[#loc124, #loc123])
#loc211 = loc(fused[#loc125, #loc126])
#loc212 = loc(fused[#loc128, #loc126])
#loc213 = loc(fused[#loc129, #loc130])
#loc214 = loc(fused[#loc131, #loc132])
#loc215 = loc(fused[#loc133, #loc134])
#loc216 = loc(fused[#loc137, #loc138])
#loc217 = loc(fused[#loc139, #loc140])
#loc218 = loc(fused[#loc142, #loc141])
#loc219 = loc(fused[#loc143, #loc144])
#loc220 = loc(fused[#loc146, #loc144])
#loc221 = loc(fused[#loc148, #loc147])
#loc222 = loc(fused[#loc149, #loc150])
#loc223 = loc(fused[#loc152, #loc150])
#loc224 = loc(fused[#loc153, #loc154])
#loc225 = loc(fused[#loc155, #loc156])
#loc226 = loc(fused[#loc157, #loc158])
