!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":26:21)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":26:29)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":165:10)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":165:14)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":165:20)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":165:32)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":59:26)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":59:34)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":95:26)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":95:34)
#loc180 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":126:25)
#loc181 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":126:33)
#loc215 = loc(fused[#loc13, #loc14])
#loc234 = loc(fused[#loc62, #loc63])
#loc235 = loc(fused[#loc64, #loc65])
#loc241 = loc(fused[#loc86, #loc87])
#loc259 = loc(fused[#loc134, #loc135])
#loc277 = loc(fused[#loc180, #loc181])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc209)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc210)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc211)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc212)
  cir.func private @printLongLongLine(!s64i) loc(#loc213)
  cir.func internal private @badSink(%arg0: !s64i loc(fused[#loc13, #loc14])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc215)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc15)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc212)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc18)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc18)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc22)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc23)
          %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc23)
          %7 = cir.cmp(gt, %4, %6) : !s64i, !cir.bool loc(#loc219)
          cir.if %7 {
            %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc221)
            %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc27)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc26)
            %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc26)
            %12 = cir.binop(mul, %9, %11) nsw : !s64i loc(#loc27)
            cir.store %12, %8 : !s64i, !cir.ptr<!s64i> loc(#loc221)
            %13 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc28)
            cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc29)
          } loc(#loc220)
        } loc(#loc218)
      } loc(#loc217)
    } loc(#loc216)
    cir.return loc(#loc12)
  } loc(#loc214)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_multiply_21_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc223)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc34)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc224)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc36)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc210)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc37)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc211)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc211)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc36)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc38)
    %9 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc212)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc40)
    cir.call @badSink(%10) : (!s64i) -> () loc(#loc41)
    cir.return loc(#loc31)
  } loc(#loc222)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_multiply_21_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc227)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc228)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc229)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    cir.return loc(#loc43)
  } loc(#loc226)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc230)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc231)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc232)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc59)
  cir.func @main(%arg0: !s32i loc(fused[#loc62, #loc63]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc64, #loc65])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc234)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc235)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc61)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc66)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc66)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc67)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc68)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc68)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc69)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc56)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %8 = cir.get_global @CWE190_Integer_Overflow__int64_t_fscanf_multiply_21_good : !cir.ptr<!cir.func<!void ()>> loc(#loc236)
    cir.call @CWE190_Integer_Overflow__int64_t_fscanf_multiply_21_good() : () -> () loc(#loc71)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc57)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc58)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %13 = cir.get_global @CWE190_Integer_Overflow__int64_t_fscanf_multiply_21_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc237)
    cir.call @CWE190_Integer_Overflow__int64_t_fscanf_multiply_21_bad() : () -> () loc(#loc75)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc59)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc78)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc238)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc238)
    cir.return %17 : !s32i loc(#loc238)
  } loc(#loc233)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc239)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc83)
  cir.func internal private @goodB2G1Sink(%arg0: !s64i loc(fused[#loc86, #loc87])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc241)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc88)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc239)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc91)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc91)
      cir.if %3 {
        %4 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc82)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc82)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc95)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc98)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc99)
          %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc99)
          %7 = cir.cmp(gt, %4, %6) : !s64i, !cir.bool loc(#loc245)
          cir.if %7 {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc103)
              %9 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc104)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc105)
              %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc105)
              %12 = cir.binop(div, %9, %11) : !s64i loc(#loc248)
              %13 = cir.cmp(lt, %8, %12) : !s64i, !cir.bool loc(#loc249)
              cir.if %13 {
                %14 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc251)
                %15 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc112)
                %16 = cir.const #cir.int<2> : !s32i loc(#loc111)
                %17 = cir.cast(integral, %16 : !s32i), !s64i loc(#loc111)
                %18 = cir.binop(mul, %15, %17) nsw : !s64i loc(#loc112)
                cir.store %18, %14 : !s64i, !cir.ptr<!s64i> loc(#loc251)
                %19 = cir.load %14 : !cir.ptr<!s64i>, !s64i loc(#loc113)
                cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc114)
              } else {
                %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc83)
                %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc83)
                cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc115)
              } loc(#loc250)
            } loc(#loc247)
          } loc(#loc246)
        } loc(#loc244)
      } loc(#loc243)
    } loc(#loc242)
    cir.return loc(#loc85)
  } loc(#loc240)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc253)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc120)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc254)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc122)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc210)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc123)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc255)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc255)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc122)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc126)
    %9 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc239)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc256)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc128)
    cir.call @goodB2G1Sink(%10) : (!s64i) -> () loc(#loc129)
    cir.return loc(#loc117)
  } loc(#loc252)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc257)
  cir.func internal private @goodB2G2Sink(%arg0: !s64i loc(fused[#loc134, #loc135])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc259)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc136)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc257)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc139)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc139)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc143)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc144)
          %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc144)
          %7 = cir.cmp(gt, %4, %6) : !s64i, !cir.bool loc(#loc263)
          cir.if %7 {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc148)
              %9 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc149)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc150)
              %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc150)
              %12 = cir.binop(div, %9, %11) : !s64i loc(#loc266)
              %13 = cir.cmp(lt, %8, %12) : !s64i, !cir.bool loc(#loc267)
              cir.if %13 {
                %14 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc269)
                %15 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc157)
                %16 = cir.const #cir.int<2> : !s32i loc(#loc156)
                %17 = cir.cast(integral, %16 : !s32i), !s64i loc(#loc156)
                %18 = cir.binop(mul, %15, %17) nsw : !s64i loc(#loc157)
                cir.store %18, %14 : !s64i, !cir.ptr<!s64i> loc(#loc269)
                %19 = cir.load %14 : !cir.ptr<!s64i>, !s64i loc(#loc158)
                cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc159)
              } else {
                %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc160)
                %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc160)
                cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc161)
              } loc(#loc268)
            } loc(#loc265)
          } loc(#loc264)
        } loc(#loc262)
      } loc(#loc261)
    } loc(#loc260)
    cir.return loc(#loc133)
  } loc(#loc258)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc271)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc166)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc272)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc168)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc210)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc169)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc273)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc273)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc168)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc172)
    %9 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc257)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc274)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc174)
    cir.call @goodB2G2Sink(%10) : (!s64i) -> () loc(#loc175)
    cir.return loc(#loc163)
  } loc(#loc270)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc275)
  cir.func internal private @goodG2BSink(%arg0: !s64i loc(fused[#loc180, #loc181])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc277)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc182)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc275)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc185)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc185)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc189)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc190)
          %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc190)
          %7 = cir.cmp(gt, %4, %6) : !s64i, !cir.bool loc(#loc281)
          cir.if %7 {
            %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc283)
            %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc194)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc193)
            %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc193)
            %12 = cir.binop(mul, %9, %11) nsw : !s64i loc(#loc194)
            cir.store %12, %8 : !s64i, !cir.ptr<!s64i> loc(#loc283)
            %13 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc195)
            cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc196)
          } loc(#loc282)
        } loc(#loc280)
      } loc(#loc279)
    } loc(#loc278)
    cir.return loc(#loc179)
  } loc(#loc276)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc285)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc201)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc286)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc203)
    %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc203)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc287)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc205)
    %5 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc275)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc288)
    %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc207)
    cir.call @goodG2BSink(%6) : (!s64i) -> () loc(#loc208)
    cir.return loc(#loc198)
  } loc(#loc284)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":44:20)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":44:24)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":24:1)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":24:24)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":26:1)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":37:1)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":27:1)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":28:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":36:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":28:8)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":29:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":30:9)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":35:9)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":30:12)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":30:19)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":31:9)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":33:13)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":33:37)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":33:30)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":34:31)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":34:13)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":39:1)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":47:1)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":41:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":41:13)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":42:12)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":42:5)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":44:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":44:13)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":45:17)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":45:5)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":46:13)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":46:5)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":149:1)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":154:1)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":151:5)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":151:14)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":152:5)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":152:14)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":153:5)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":153:13)
#loc50 = loc("/usr/include/stdlib.h":575:1)
#loc51 = loc("/usr/include/stdlib.h":575:41)
#loc52 = loc("/usr/include/time.h":76:1)
#loc53 = loc("/usr/include/time.h":76:38)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":170:15)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":172:15)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":175:15)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":177:15)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":165:1)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":180:1)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":166:1)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":168:27)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":168:22)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":168:5)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":170:5)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":171:5)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":171:62)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":172:5)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":175:5)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":176:5)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":176:61)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":177:5)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":179:12)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":179:5)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":54:1)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":54:29)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":64:19)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":78:27)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":59:1)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":82:1)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":60:1)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":61:5)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":81:5)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":61:8)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":62:5)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":65:5)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":67:5)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":64:9)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":68:9)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":80:9)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":68:12)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":68:19)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":69:9)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":71:13)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":79:13)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":71:17)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":71:25)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":71:35)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":71:36)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":72:13)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":75:13)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":77:13)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":73:17)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":73:41)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":73:34)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":74:35)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":74:17)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":78:17)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":84:1)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":92:1)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":86:5)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":86:13)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":87:12)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":87:5)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":89:5)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":89:13)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":89:20)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":89:24)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":90:22)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":90:5)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":91:18)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":91:5)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":55:1)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":55:29)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":95:1)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":113:1)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":96:1)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":97:5)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":112:5)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":97:8)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":98:5)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":99:9)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":111:9)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":99:12)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":99:19)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":100:9)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":102:13)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":110:13)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":102:17)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":102:25)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":102:35)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":102:36)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":103:13)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":106:13)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":108:13)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":104:17)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":104:41)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":104:34)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":105:35)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":105:17)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":109:27)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":109:17)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":115:1)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":123:1)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":117:5)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":117:13)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":118:12)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":118:5)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":120:5)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":120:13)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":120:20)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":120:24)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":121:22)
#loc173 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":121:5)
#loc174 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":122:18)
#loc175 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":122:5)
#loc176 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":56:1)
#loc177 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":56:28)
#loc178 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":126:1)
#loc179 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":137:1)
#loc182 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":127:1)
#loc183 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":128:5)
#loc184 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":136:5)
#loc185 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":128:8)
#loc186 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":129:5)
#loc187 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":130:9)
#loc188 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":135:9)
#loc189 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":130:12)
#loc190 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":130:19)
#loc191 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":131:9)
#loc192 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":133:13)
#loc193 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":133:37)
#loc194 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":133:30)
#loc195 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":134:31)
#loc196 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":134:13)
#loc197 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":139:1)
#loc198 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":147:1)
#loc199 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":141:5)
#loc200 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":141:13)
#loc201 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":142:12)
#loc202 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":142:5)
#loc203 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":144:12)
#loc204 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":144:5)
#loc205 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":145:21)
#loc206 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":145:5)
#loc207 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":146:17)
#loc208 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":146:5)
#loc209 = loc(fused[#loc1, #loc2])
#loc210 = loc(fused[#loc3, #loc4])
#loc211 = loc(fused[#loc5, #loc6])
#loc212 = loc(fused[#loc7, #loc8])
#loc213 = loc(fused[#loc9, #loc10])
#loc214 = loc(fused[#loc11, #loc12])
#loc216 = loc(fused[#loc16, #loc17])
#loc217 = loc(fused[#loc19, #loc17])
#loc218 = loc(fused[#loc20, #loc21])
#loc219 = loc(fused[#loc22, #loc23])
#loc220 = loc(fused[#loc24, #loc21])
#loc221 = loc(fused[#loc25, #loc26])
#loc222 = loc(fused[#loc30, #loc31])
#loc223 = loc(fused[#loc32, #loc33])
#loc224 = loc(fused[#loc35, #loc34])
#loc225 = loc(fused[#loc39, #loc38])
#loc226 = loc(fused[#loc42, #loc43])
#loc227 = loc(fused[#loc44, #loc45])
#loc228 = loc(fused[#loc46, #loc47])
#loc229 = loc(fused[#loc48, #loc49])
#loc230 = loc(fused[#loc50, #loc51])
#loc231 = loc(fused[#loc52, #loc53])
#loc232 = loc(fused[#loc54, #loc55])
#loc233 = loc(fused[#loc60, #loc61])
#loc236 = loc(fused[#loc71, #loc72])
#loc237 = loc(fused[#loc75, #loc76])
#loc238 = loc(fused[#loc79, #loc78])
#loc239 = loc(fused[#loc80, #loc81])
#loc240 = loc(fused[#loc84, #loc85])
#loc242 = loc(fused[#loc89, #loc90])
#loc243 = loc(fused[#loc92, #loc93, #loc94, #loc90])
#loc244 = loc(fused[#loc96, #loc97])
#loc245 = loc(fused[#loc98, #loc99])
#loc246 = loc(fused[#loc100, #loc97])
#loc247 = loc(fused[#loc101, #loc102])
#loc248 = loc(fused[#loc104, #loc105])
#loc249 = loc(fused[#loc103, #loc106])
#loc250 = loc(fused[#loc107, #loc108, #loc109, #loc102])
#loc251 = loc(fused[#loc110, #loc111])
#loc252 = loc(fused[#loc116, #loc117])
#loc253 = loc(fused[#loc118, #loc119])
#loc254 = loc(fused[#loc121, #loc120])
#loc255 = loc(fused[#loc124, #loc125])
#loc256 = loc(fused[#loc127, #loc126])
#loc257 = loc(fused[#loc130, #loc131])
#loc258 = loc(fused[#loc132, #loc133])
#loc260 = loc(fused[#loc137, #loc138])
#loc261 = loc(fused[#loc140, #loc138])
#loc262 = loc(fused[#loc141, #loc142])
#loc263 = loc(fused[#loc143, #loc144])
#loc264 = loc(fused[#loc145, #loc142])
#loc265 = loc(fused[#loc146, #loc147])
#loc266 = loc(fused[#loc149, #loc150])
#loc267 = loc(fused[#loc148, #loc151])
#loc268 = loc(fused[#loc152, #loc153, #loc154, #loc147])
#loc269 = loc(fused[#loc155, #loc156])
#loc270 = loc(fused[#loc162, #loc163])
#loc271 = loc(fused[#loc164, #loc165])
#loc272 = loc(fused[#loc167, #loc166])
#loc273 = loc(fused[#loc170, #loc171])
#loc274 = loc(fused[#loc173, #loc172])
#loc275 = loc(fused[#loc176, #loc177])
#loc276 = loc(fused[#loc178, #loc179])
#loc278 = loc(fused[#loc183, #loc184])
#loc279 = loc(fused[#loc186, #loc184])
#loc280 = loc(fused[#loc187, #loc188])
#loc281 = loc(fused[#loc189, #loc190])
#loc282 = loc(fused[#loc191, #loc188])
#loc283 = loc(fused[#loc192, #loc193])
#loc284 = loc(fused[#loc197, #loc198])
#loc285 = loc(fused[#loc199, #loc200])
#loc286 = loc(fused[#loc202, #loc201])
#loc287 = loc(fused[#loc204, #loc203])
#loc288 = loc(fused[#loc206, #loc205])
