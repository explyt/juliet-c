!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":85:10)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":85:14)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":85:20)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":85:32)
#loc155 = loc(fused[#loc65, #loc66])
#loc156 = loc(fused[#loc67, #loc68])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc129)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc131)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc132)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc9)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc133)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc13)
      cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc135)
      cir.for : cond {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc15)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc16)
        %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc136)
        cir.condition(%6) loc(#loc17)
      } body {
        cir.scope {
          %4 = cir.const #cir.int<10> : !s32i loc(#loc19)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc19)
          %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc19)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc19)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc19)
          cir.store %8, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc138)
        } loc(#loc137)
        cir.yield loc(#loc12)
      } step {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
        %5 = cir.unary(inc, %4) : !s32i, !s32i loc(#loc22)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc139)
        cir.yield loc(#loc134)
      } loc(#loc134)
    } loc(#loc134)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc141)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc142)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc141)
      cir.store %5, %3 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc141)
      cir.scope {
        %10 = cir.const #cir.int<0> : !s32i loc(#loc31)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc31)
        cir.store %11, %4 : !u64i, !cir.ptr<!u64i> loc(#loc144)
        cir.for : cond {
          %12 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc33)
          %13 = cir.const #cir.int<10> : !s32i loc(#loc34)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc34)
          %15 = cir.cmp(lt, %12, %14) : !u64i, !cir.bool loc(#loc145)
          cir.condition(%15) loc(#loc35)
        } body {
          cir.scope {
            %12 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc37)
            %13 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc38)
            %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !u64i), !cir.ptr<!s32i> loc(#loc38)
            %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc38)
            %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
            %17 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc40)
            %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !u64i), !cir.ptr<!s32i> loc(#loc41)
            cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc147)
          } loc(#loc146)
          cir.yield loc(#loc30)
        } step {
          %12 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc43)
          %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc44)
          cir.store %13, %4 : !u64i, !cir.ptr<!u64i> loc(#loc148)
          cir.yield loc(#loc143)
        } loc(#loc143)
      } loc(#loc143)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc45)
      %7 = cir.const #cir.int<0> : !s32i loc(#loc46)
      %8 = cir.ptr_stride(%6 : !cir.ptr<!s32i>, %7 : !s32i), !cir.ptr<!s32i> loc(#loc47)
      %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc45)
      cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc48)
    } loc(#loc140)
    cir.return loc(#loc4)
  } loc(#loc130)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc150)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    cir.return loc(#loc50)
  } loc(#loc149)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc151)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc152)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc153)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc62)
  cir.func @main(%arg0: !s32i loc(fused[#loc65, #loc66]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc67, #loc68])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc155)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc156)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc64)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc69)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc70)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc71)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc71)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc72)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc59)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc157)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17_good() : () -> () loc(#loc74)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc60)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc61)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc158)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17_bad() : () -> () loc(#loc78)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc62)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc81)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc159)
    cir.return %17 : !s32i loc(#loc159)
  } loc(#loc154)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc161)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc162)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc89)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc163)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc93)
      cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc165)
      cir.for : cond {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc95)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc96)
        %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc166)
        cir.condition(%6) loc(#loc97)
      } body {
        cir.scope {
          %4 = cir.const #cir.int<10> : !s32i loc(#loc99)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc99)
          %6 = cir.const #cir.int<4> : !u64i loc(#loc99)
          %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc99)
          %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc99)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc99)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc99)
          cir.store %10, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc168)
        } loc(#loc167)
        cir.yield loc(#loc92)
      } step {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
        %5 = cir.unary(inc, %4) : !s32i, !s32i loc(#loc102)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc169)
        cir.yield loc(#loc164)
      } loc(#loc164)
    } loc(#loc164)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc171)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc172)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc171)
      cir.store %5, %3 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc171)
      cir.scope {
        %10 = cir.const #cir.int<0> : !s32i loc(#loc111)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc111)
        cir.store %11, %4 : !u64i, !cir.ptr<!u64i> loc(#loc174)
        cir.for : cond {
          %12 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc113)
          %13 = cir.const #cir.int<10> : !s32i loc(#loc114)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc114)
          %15 = cir.cmp(lt, %12, %14) : !u64i, !cir.bool loc(#loc175)
          cir.condition(%15) loc(#loc115)
        } body {
          cir.scope {
            %12 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc117)
            %13 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc118)
            %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !u64i), !cir.ptr<!s32i> loc(#loc118)
            %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc118)
            %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc119)
            %17 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc120)
            %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !u64i), !cir.ptr<!s32i> loc(#loc121)
            cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc177)
          } loc(#loc176)
          cir.yield loc(#loc110)
        } step {
          %12 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc123)
          %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc124)
          cir.store %13, %4 : !u64i, !cir.ptr<!u64i> loc(#loc178)
          cir.yield loc(#loc173)
        } loc(#loc173)
      } loc(#loc173)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc125)
      %7 = cir.const #cir.int<0> : !s32i loc(#loc126)
      %8 = cir.ptr_stride(%6 : !cir.ptr<!s32i>, %7 : !s32i), !cir.ptr<!s32i> loc(#loc127)
      %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc125)
      cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc128)
    } loc(#loc170)
    cir.return loc(#loc84)
  } loc(#loc160)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":41:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":23:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":23:9)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":24:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":24:11)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":25:12)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":25:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":26:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":30:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":26:13)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":26:9)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":26:16)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":26:20)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":26:18)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":27:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":29:23)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":29:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":26:24)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":26:23)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":31:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":40:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":32:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":32:28)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":33:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":33:16)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":35:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":38:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":35:18)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":35:14)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":35:21)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":35:25)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":35:23)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":36:9)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":37:30)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":37:23)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":37:13)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":37:18)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":37:19)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":37:31)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":35:30)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":35:29)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":39:22)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":39:27)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":39:28)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":39:9)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":70:1)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":73:1)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":72:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":72:13)
#loc53 = loc("/usr/include/stdlib.h":575:1)
#loc54 = loc("/usr/include/stdlib.h":575:41)
#loc55 = loc("/usr/include/time.h":76:1)
#loc56 = loc("/usr/include/time.h":76:38)
#loc57 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc58 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":90:15)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":92:15)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":95:15)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":97:15)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":85:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":100:1)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":86:1)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":88:27)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":88:22)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":88:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":90:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":91:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":91:61)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":92:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":95:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":96:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":96:60)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":97:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":99:12)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":99:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":48:1)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":68:1)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":50:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":50:9)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":51:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":51:11)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":52:12)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":52:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":53:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":57:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":53:13)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":53:9)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":53:16)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":53:20)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":53:18)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":54:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":56:23)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":56:9)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":53:24)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":53:23)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":58:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":67:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":59:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":59:28)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":60:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":60:16)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":62:9)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":65:9)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":62:18)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":62:14)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":62:21)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":62:25)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":62:23)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":63:9)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":64:30)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":64:23)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":64:13)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":64:18)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":64:19)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":64:31)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":62:30)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":62:29)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":66:22)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":66:27)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":66:28)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c":66:9)
#loc129 = loc(fused[#loc1, #loc2])
#loc130 = loc(fused[#loc3, #loc4])
#loc131 = loc(fused[#loc5, #loc6])
#loc132 = loc(fused[#loc7, #loc8])
#loc133 = loc(fused[#loc10, #loc9])
#loc134 = loc(fused[#loc11, #loc12])
#loc135 = loc(fused[#loc14, #loc13])
#loc136 = loc(fused[#loc15, #loc16])
#loc137 = loc(fused[#loc18, #loc12])
#loc138 = loc(fused[#loc20, #loc19])
#loc139 = loc(fused[#loc22, #loc21])
#loc140 = loc(fused[#loc23, #loc24])
#loc141 = loc(fused[#loc25, #loc26])
#loc142 = loc(fused[#loc27, #loc28])
#loc143 = loc(fused[#loc29, #loc30])
#loc144 = loc(fused[#loc32, #loc31])
#loc145 = loc(fused[#loc33, #loc34])
#loc146 = loc(fused[#loc36, #loc30])
#loc147 = loc(fused[#loc39, #loc42])
#loc148 = loc(fused[#loc44, #loc43])
#loc149 = loc(fused[#loc49, #loc50])
#loc150 = loc(fused[#loc51, #loc52])
#loc151 = loc(fused[#loc53, #loc54])
#loc152 = loc(fused[#loc55, #loc56])
#loc153 = loc(fused[#loc57, #loc58])
#loc154 = loc(fused[#loc63, #loc64])
#loc157 = loc(fused[#loc74, #loc75])
#loc158 = loc(fused[#loc78, #loc79])
#loc159 = loc(fused[#loc82, #loc81])
#loc160 = loc(fused[#loc83, #loc84])
#loc161 = loc(fused[#loc85, #loc86])
#loc162 = loc(fused[#loc87, #loc88])
#loc163 = loc(fused[#loc90, #loc89])
#loc164 = loc(fused[#loc91, #loc92])
#loc165 = loc(fused[#loc94, #loc93])
#loc166 = loc(fused[#loc95, #loc96])
#loc167 = loc(fused[#loc98, #loc92])
#loc168 = loc(fused[#loc100, #loc99])
#loc169 = loc(fused[#loc102, #loc101])
#loc170 = loc(fused[#loc103, #loc104])
#loc171 = loc(fused[#loc105, #loc106])
#loc172 = loc(fused[#loc107, #loc108])
#loc173 = loc(fused[#loc109, #loc110])
#loc174 = loc(fused[#loc112, #loc111])
#loc175 = loc(fused[#loc113, #loc114])
#loc176 = loc(fused[#loc116, #loc110])
#loc177 = loc(fused[#loc119, #loc122])
#loc178 = loc(fused[#loc124, #loc123])
