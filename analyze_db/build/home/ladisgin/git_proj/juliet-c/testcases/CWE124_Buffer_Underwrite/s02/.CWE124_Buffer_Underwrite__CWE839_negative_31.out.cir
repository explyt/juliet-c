!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc68 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":138:10)
#loc69 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":138:14)
#loc70 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":138:20)
#loc71 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":138:32)
#true = #cir.bool<true> : !cir.bool
#loc210 = loc(fused[#loc68, #loc69])
#loc211 = loc(fused[#loc70, #loc71])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_negative_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc183)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc184)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE124_Buffer_Underwrite__CWE839_negative_31_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc186)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc13)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc14)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc190)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc191)
      %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc190)
      %8 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      cir.store %8, %6 : !s32i, !cir.ptr<!s32i> loc(#loc191)
      cir.scope {
        %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc193)
        %10 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc194)
        %11 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc194)
        cir.store %11, %10 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc194)
        cir.scope {
          %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc30)
          %13 = cir.const #cir.int<10> : !s32i loc(#loc31)
          %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc196)
          cir.if %14 {
            %15 = cir.const #cir.int<1> : !s32i loc(#loc35)
            %16 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc36)
            %17 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc37)
            %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc37)
            cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc198)
            cir.scope {
              %19 = cir.const #cir.int<0> : !s32i loc(#loc40)
              cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc200)
              cir.for : cond {
                %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc42)
                %21 = cir.const #cir.int<10> : !s32i loc(#loc43)
                %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc201)
                cir.condition(%22) loc(#loc44)
              } body {
                cir.scope {
                  %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc46)
                  %21 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc47)
                  %22 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc47)
                  %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc47)
                  cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc48)
                } loc(#loc202)
                cir.yield loc(#loc39)
              } step {
                %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc49)
                %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc50)
                cir.store %21, %9 : !s32i, !cir.ptr<!s32i> loc(#loc203)
                cir.yield loc(#loc199)
              } loc(#loc199)
            } loc(#loc199)
          } else {
            %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc51)
          } loc(#loc197)
        } loc(#loc195)
      } loc(#loc192)
    } loc(#loc189)
    cir.return loc(#loc7)
  } loc(#loc185)
  cir.func no_proto @CWE124_Buffer_Underwrite__CWE839_negative_31_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc205)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc206)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    cir.return loc(#loc53)
  } loc(#loc204)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc207)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc208)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc64)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc65)
  cir.func @main(%arg0: !s32i loc(fused[#loc68, #loc69]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc70, #loc71])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc210)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc211)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc67)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc72)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc72)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc73)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc74)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc74)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc75)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc62)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %8 = cir.get_global @CWE124_Buffer_Underwrite__CWE839_negative_31_good : !cir.ptr<!cir.func<!void ()>> loc(#loc212)
    cir.call @CWE124_Buffer_Underwrite__CWE839_negative_31_good() : () -> () loc(#loc77)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc63)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc64)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %13 = cir.get_global @CWE124_Buffer_Underwrite__CWE839_negative_31_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc213)
    cir.call @CWE124_Buffer_Underwrite__CWE839_negative_31_bad() : () -> () loc(#loc81)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc65)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc84)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc214)
    cir.return %17 : !s32i loc(#loc214)
  } loc(#loc209)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc216)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc91)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc93)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc218)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc220)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc221)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc98)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc220)
      %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc100)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc221)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc223)
        %9 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc224)
        %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc224)
        cir.store %10, %9 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc224)
        cir.scope {
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc109)
          %12 = cir.const #cir.int<10> : !s32i loc(#loc110)
          %13 = cir.cmp(lt, %11, %12) : !s32i, !cir.bool loc(#loc226)
          cir.if %13 {
            %14 = cir.const #cir.int<1> : !s32i loc(#loc114)
            %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc115)
            %16 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc116)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc116)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc228)
            cir.scope {
              %18 = cir.const #cir.int<0> : !s32i loc(#loc119)
              cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc230)
              cir.for : cond {
                %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc121)
                %20 = cir.const #cir.int<10> : !s32i loc(#loc122)
                %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc231)
                cir.condition(%21) loc(#loc123)
              } body {
                cir.scope {
                  %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc125)
                  %20 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc126)
                  %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc126)
                  %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc126)
                  cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc127)
                } loc(#loc232)
                cir.yield loc(#loc118)
              } step {
                %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc128)
                %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc129)
                cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc233)
                cir.yield loc(#loc229)
              } loc(#loc229)
            } loc(#loc229)
          } else {
            %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc130)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc130)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc131)
          } loc(#loc227)
        } loc(#loc225)
      } loc(#loc222)
    } loc(#loc219)
    cir.return loc(#loc87)
  } loc(#loc215)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc132)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc235)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc137)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc138)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc236)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc140)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc141)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc239)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc240)
      %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc146)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc239)
      %8 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc148)
      cir.store %8, %6 : !s32i, !cir.ptr<!s32i> loc(#loc240)
      cir.scope {
        %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc242)
        %10 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc243)
        %11 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc243)
        cir.store %11, %10 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc243)
        cir.scope {
          %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc157)
          %13 = cir.const #cir.int<0> : !s32i loc(#loc158)
          %14 = cir.cmp(ge, %12, %13) : !s32i, !cir.bool loc(#loc245)
          %15 = cir.ternary(%14, true {
            %16 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc160)
            %17 = cir.const #cir.int<10> : !s32i loc(#loc161)
            %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc246)
            %19 = cir.ternary(%18, true {
              %20 = cir.const #true loc(#loc159)
              cir.yield %20 : !cir.bool loc(#loc159)
            }, false {
              %20 = cir.const #false loc(#loc159)
              cir.yield %20 : !cir.bool loc(#loc159)
            }) : (!cir.bool) -> !cir.bool loc(#loc159)
            cir.yield %19 : !cir.bool loc(#loc159)
          }, false {
            %16 = cir.const #false loc(#loc159)
            cir.yield %16 : !cir.bool loc(#loc159)
          }) : (!cir.bool) -> !cir.bool loc(#loc159)
          cir.if %15 {
            %16 = cir.const #cir.int<1> : !s32i loc(#loc166)
            %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc167)
            %18 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc168)
            %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc168)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc248)
            cir.scope {
              %20 = cir.const #cir.int<0> : !s32i loc(#loc171)
              cir.store %20, %9 : !s32i, !cir.ptr<!s32i> loc(#loc250)
              cir.for : cond {
                %21 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc173)
                %22 = cir.const #cir.int<10> : !s32i loc(#loc174)
                %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc251)
                cir.condition(%23) loc(#loc175)
              } body {
                cir.scope {
                  %21 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc177)
                  %22 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc178)
                  %23 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc178)
                  %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc178)
                  cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc179)
                } loc(#loc252)
                cir.yield loc(#loc170)
              } step {
                %21 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc180)
                %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc181)
                cir.store %22, %9 : !s32i, !cir.ptr<!s32i> loc(#loc253)
                cir.yield loc(#loc249)
              } loc(#loc249)
            } loc(#loc249)
          } else {
            %16 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc132)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc132)
            cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc182)
          } loc(#loc247)
        } loc(#loc244)
      } loc(#loc241)
    } loc(#loc238)
    cir.return loc(#loc134)
  } loc(#loc234)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_negative_31.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":48:27)
#loc6 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":22:1)
#loc7 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":52:1)
#loc8 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":24:5)
#loc9 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":24:9)
#loc10 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":26:13)
#loc11 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":26:12)
#loc12 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":26:5)
#loc13 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":28:13)
#loc14 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":28:12)
#loc15 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":28:5)
#loc16 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":29:5)
#loc17 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":51:5)
#loc18 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":30:9)
#loc19 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":30:24)
#loc20 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":31:9)
#loc21 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":31:20)
#loc22 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":32:9)
#loc23 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":50:9)
#loc24 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":33:13)
#loc25 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":33:17)
#loc26 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":34:13)
#loc27 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":34:34)
#loc28 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":37:13)
#loc29 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":49:13)
#loc30 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":37:17)
#loc31 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":37:24)
#loc32 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":38:13)
#loc33 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":45:13)
#loc34 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":47:13)
#loc35 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":39:32)
#loc36 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":39:24)
#loc37 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":39:17)
#loc38 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":41:17)
#loc39 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":44:17)
#loc40 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":41:25)
#loc41 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":41:21)
#loc42 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":41:28)
#loc43 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":41:32)
#loc44 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":41:30)
#loc45 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":42:17)
#loc46 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":43:41)
#loc47 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":43:34)
#loc48 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":43:21)
#loc49 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":41:37)
#loc50 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":41:36)
#loc51 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":48:17)
#loc52 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":124:1)
#loc53 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":128:1)
#loc54 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":126:5)
#loc55 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":126:13)
#loc56 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":127:5)
#loc57 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":127:13)
#loc58 = loc("/usr/include/stdlib.h":575:1)
#loc59 = loc("/usr/include/stdlib.h":575:41)
#loc60 = loc("/usr/include/time.h":76:1)
#loc61 = loc("/usr/include/time.h":76:38)
#loc62 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":143:15)
#loc63 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":145:15)
#loc64 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":148:15)
#loc65 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":150:15)
#loc66 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":138:1)
#loc67 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":153:1)
#loc72 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":139:1)
#loc73 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":141:27)
#loc74 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":141:22)
#loc75 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":141:5)
#loc76 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":143:5)
#loc77 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":144:5)
#loc78 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":144:55)
#loc79 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":145:5)
#loc80 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":148:5)
#loc81 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":149:5)
#loc82 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":149:54)
#loc83 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":150:5)
#loc84 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":152:12)
#loc85 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":152:5)
#loc86 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":59:1)
#loc87 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":90:1)
#loc88 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":61:5)
#loc89 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":61:9)
#loc90 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":63:13)
#loc91 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":63:12)
#loc92 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":63:5)
#loc93 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":66:12)
#loc94 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":66:5)
#loc95 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":67:5)
#loc96 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":89:5)
#loc97 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":68:9)
#loc98 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":68:24)
#loc99 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":69:9)
#loc100 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":69:20)
#loc101 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":70:9)
#loc102 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":88:9)
#loc103 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":71:13)
#loc104 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":71:17)
#loc105 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":72:13)
#loc106 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":72:34)
#loc107 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":75:13)
#loc108 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":87:13)
#loc109 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":75:17)
#loc110 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":75:24)
#loc111 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":76:13)
#loc112 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":83:13)
#loc113 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":85:13)
#loc114 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":77:32)
#loc115 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":77:24)
#loc116 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":77:17)
#loc117 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":79:17)
#loc118 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":82:17)
#loc119 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":79:25)
#loc120 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":79:21)
#loc121 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":79:28)
#loc122 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":79:32)
#loc123 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":79:30)
#loc124 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":80:17)
#loc125 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":81:41)
#loc126 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":81:34)
#loc127 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":81:21)
#loc128 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":79:37)
#loc129 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":79:36)
#loc130 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":86:27)
#loc131 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":86:17)
#loc132 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":118:27)
#loc133 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":93:1)
#loc134 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":122:1)
#loc135 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":95:5)
#loc136 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":95:9)
#loc137 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":97:13)
#loc138 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":97:12)
#loc139 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":97:5)
#loc140 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":99:13)
#loc141 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":99:12)
#loc142 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":99:5)
#loc143 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":100:5)
#loc144 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":121:5)
#loc145 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":101:9)
#loc146 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":101:24)
#loc147 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":102:9)
#loc148 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":102:20)
#loc149 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":103:9)
#loc150 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":120:9)
#loc151 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":104:13)
#loc152 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":104:17)
#loc153 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":105:13)
#loc154 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":105:34)
#loc155 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":107:13)
#loc156 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":119:13)
#loc157 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":107:17)
#loc158 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":107:25)
#loc159 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":107:27)
#loc160 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":107:30)
#loc161 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":107:38)
#loc162 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":107:40)
#loc163 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":108:13)
#loc164 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":115:13)
#loc165 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":117:13)
#loc166 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":109:32)
#loc167 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":109:24)
#loc168 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":109:17)
#loc169 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":111:17)
#loc170 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":114:17)
#loc171 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":111:25)
#loc172 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":111:21)
#loc173 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":111:28)
#loc174 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":111:32)
#loc175 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":111:30)
#loc176 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":112:17)
#loc177 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":113:41)
#loc178 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":113:34)
#loc179 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":113:21)
#loc180 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":111:37)
#loc181 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":111:36)
#loc182 = loc("CWE124_Buffer_Underwrite__CWE839_negative_31.c":118:17)
#loc183 = loc(fused[#loc1, #loc2])
#loc184 = loc(fused[#loc3, #loc4])
#loc185 = loc(fused[#loc6, #loc7])
#loc186 = loc(fused[#loc8, #loc9])
#loc187 = loc(fused[#loc12, #loc10])
#loc188 = loc(fused[#loc15, #loc13])
#loc189 = loc(fused[#loc16, #loc17])
#loc190 = loc(fused[#loc18, #loc19])
#loc191 = loc(fused[#loc20, #loc21])
#loc192 = loc(fused[#loc22, #loc23])
#loc193 = loc(fused[#loc24, #loc25])
#loc194 = loc(fused[#loc26, #loc27])
#loc195 = loc(fused[#loc28, #loc29])
#loc196 = loc(fused[#loc30, #loc31])
#loc197 = loc(fused[#loc32, #loc33, #loc34, #loc29])
#loc198 = loc(fused[#loc37, #loc35])
#loc199 = loc(fused[#loc38, #loc39])
#loc200 = loc(fused[#loc41, #loc40])
#loc201 = loc(fused[#loc42, #loc43])
#loc202 = loc(fused[#loc45, #loc39])
#loc203 = loc(fused[#loc50, #loc49])
#loc204 = loc(fused[#loc52, #loc53])
#loc205 = loc(fused[#loc54, #loc55])
#loc206 = loc(fused[#loc56, #loc57])
#loc207 = loc(fused[#loc58, #loc59])
#loc208 = loc(fused[#loc60, #loc61])
#loc209 = loc(fused[#loc66, #loc67])
#loc212 = loc(fused[#loc77, #loc78])
#loc213 = loc(fused[#loc81, #loc82])
#loc214 = loc(fused[#loc85, #loc84])
#loc215 = loc(fused[#loc86, #loc87])
#loc216 = loc(fused[#loc88, #loc89])
#loc217 = loc(fused[#loc92, #loc90])
#loc218 = loc(fused[#loc94, #loc93])
#loc219 = loc(fused[#loc95, #loc96])
#loc220 = loc(fused[#loc97, #loc98])
#loc221 = loc(fused[#loc99, #loc100])
#loc222 = loc(fused[#loc101, #loc102])
#loc223 = loc(fused[#loc103, #loc104])
#loc224 = loc(fused[#loc105, #loc106])
#loc225 = loc(fused[#loc107, #loc108])
#loc226 = loc(fused[#loc109, #loc110])
#loc227 = loc(fused[#loc111, #loc112, #loc113, #loc108])
#loc228 = loc(fused[#loc116, #loc114])
#loc229 = loc(fused[#loc117, #loc118])
#loc230 = loc(fused[#loc120, #loc119])
#loc231 = loc(fused[#loc121, #loc122])
#loc232 = loc(fused[#loc124, #loc118])
#loc233 = loc(fused[#loc129, #loc128])
#loc234 = loc(fused[#loc133, #loc134])
#loc235 = loc(fused[#loc135, #loc136])
#loc236 = loc(fused[#loc139, #loc137])
#loc237 = loc(fused[#loc142, #loc140])
#loc238 = loc(fused[#loc143, #loc144])
#loc239 = loc(fused[#loc145, #loc146])
#loc240 = loc(fused[#loc147, #loc148])
#loc241 = loc(fused[#loc149, #loc150])
#loc242 = loc(fused[#loc151, #loc152])
#loc243 = loc(fused[#loc153, #loc154])
#loc244 = loc(fused[#loc155, #loc156])
#loc245 = loc(fused[#loc157, #loc158])
#loc246 = loc(fused[#loc160, #loc162])
#loc247 = loc(fused[#loc163, #loc164, #loc165, #loc156])
#loc248 = loc(fused[#loc168, #loc166])
#loc249 = loc(fused[#loc169, #loc170])
#loc250 = loc(fused[#loc172, #loc171])
#loc251 = loc(fused[#loc173, #loc174])
#loc252 = loc(fused[#loc176, #loc170])
#loc253 = loc(fused[#loc181, #loc180])
