!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":134:10)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":134:14)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":134:20)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":134:32)
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc225 = loc(fused[#loc73, #loc74])
#loc226 = loc(fused[#loc75, #loc76])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s05/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc195)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc197)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc198)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc8)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc8)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc8)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc8)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc8)
    %7 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc199)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc8)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc8)
    cir.store %9, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc198)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc10)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc10)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc10)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc10)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc10)
    cir.store %16, %7 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc199)
    cir.scope {
      %17 = cir.const #cir.int<5> : !s32i loc(#loc13)
      %18 = cir.const #cir.int<5> : !s32i loc(#loc14)
      %19 = cir.cmp(eq, %17, %18) : !s32i, !cir.bool loc(#loc201)
      cir.if %19 {
        %20 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc16)
        cir.store %20, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc203)
      } loc(#loc202)
    } loc(#loc200)
    cir.scope {
      %17 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc205)
      cir.scope {
        %29 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc207)
        cir.scope {
          %30 = cir.const #cir.int<0> : !s32i loc(#loc28)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc28)
          cir.store %31, %29 : !u64i, !cir.ptr<!u64i> loc(#loc209)
          cir.for : cond {
            %32 = cir.load %29 : !cir.ptr<!u64i>, !u64i loc(#loc30)
            %33 = cir.const #cir.int<100> : !s32i loc(#loc31)
            %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc31)
            %35 = cir.cmp(lt, %32, %34) : !u64i, !cir.bool loc(#loc210)
            cir.condition(%35) loc(#loc32)
          } body {
            cir.scope {
              %32 = cir.const #cir.int<0> : !s32i loc(#loc34)
              %33 = cir.load %29 : !cir.ptr<!u64i>, !u64i loc(#loc35)
              %34 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc36)
              %35 = cir.ptr_stride(%34 : !cir.ptr<!ty__twoIntsStruct>, %33 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc36)
              %36 = cir.get_member %35[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc37)
              cir.store %32, %36 : !s32i, !cir.ptr<!s32i> loc(#loc212)
              %37 = cir.const #cir.int<0> : !s32i loc(#loc38)
              %38 = cir.load %29 : !cir.ptr<!u64i>, !u64i loc(#loc39)
              %39 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc40)
              %40 = cir.ptr_stride(%39 : !cir.ptr<!ty__twoIntsStruct>, %38 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc40)
              %41 = cir.get_member %40[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc41)
              cir.store %37, %41 : !s32i, !cir.ptr<!s32i> loc(#loc213)
            } loc(#loc211)
            cir.yield loc(#loc27)
          } step {
            %32 = cir.load %29 : !cir.ptr<!u64i>, !u64i loc(#loc42)
            %33 = cir.unary(inc, %32) : !u64i, !u64i loc(#loc43)
            cir.store %33, %29 : !u64i, !cir.ptr<!u64i> loc(#loc214)
            cir.yield loc(#loc208)
          } loc(#loc208)
        } loc(#loc208)
      } loc(#loc206)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc44)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc44)
      %20 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc45)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc45)
      %22 = cir.const #cir.int<100> : !s32i loc(#loc46)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc46)
      %24 = cir.const #cir.int<8> : !u64i loc(#loc215)
      %25 = cir.binop(mul, %23, %24) : !u64i loc(#loc216)
      cir.libc.memmove %25 bytes from %21 to %19 : !cir.ptr<!void>, !u64i loc(#loc217)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc51)
      %27 = cir.const #cir.int<0> : !s32i loc(#loc52)
      %28 = cir.ptr_stride(%26 : !cir.ptr<!ty__twoIntsStruct>, %27 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc53)
      cir.call @printStructLine(%28) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc54)
    } loc(#loc204)
    cir.return loc(#loc4)
  } loc(#loc196)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc219)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc57)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    cir.return loc(#loc56)
  } loc(#loc218)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc221)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc222)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc223)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc70)
  cir.func @main(%arg0: !s32i loc(fused[#loc73, #loc74]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc75, #loc76])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc225)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc226)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc72)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc77)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc77)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc78)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc79)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc79)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc80)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc67)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06_good : !cir.ptr<!cir.func<!void ()>> loc(#loc227)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06_good() : () -> () loc(#loc82)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc68)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc84)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc69)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc228)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06_bad() : () -> () loc(#loc86)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc70)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc89)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc229)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc229)
    cir.return %17 : !s32i loc(#loc229)
  } loc(#loc224)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc91)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc231)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc232)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc97)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc97)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc97)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc97)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc97)
    %7 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc233)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc97)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc97)
    cir.store %9, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc232)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc99)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc99)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc99)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc99)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc99)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc99)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc99)
    cir.store %16, %7 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc233)
    cir.scope {
      %17 = cir.const #cir.int<5> : !s32i loc(#loc102)
      %18 = cir.const #cir.int<5> : !s32i loc(#loc103)
      %19 = cir.cmp(ne, %17, %18) : !s32i, !cir.bool loc(#loc235)
      cir.if %19 {
        %20 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc91)
        %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc91)
        cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc107)
      } else {
        %20 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc108)
        cir.store %20, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc237)
      } loc(#loc236)
    } loc(#loc234)
    cir.scope {
      %17 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc239)
      cir.scope {
        %29 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc241)
        cir.scope {
          %30 = cir.const #cir.int<0> : !s32i loc(#loc120)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc120)
          cir.store %31, %29 : !u64i, !cir.ptr<!u64i> loc(#loc243)
          cir.for : cond {
            %32 = cir.load %29 : !cir.ptr<!u64i>, !u64i loc(#loc122)
            %33 = cir.const #cir.int<100> : !s32i loc(#loc123)
            %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc123)
            %35 = cir.cmp(lt, %32, %34) : !u64i, !cir.bool loc(#loc244)
            cir.condition(%35) loc(#loc124)
          } body {
            cir.scope {
              %32 = cir.const #cir.int<0> : !s32i loc(#loc126)
              %33 = cir.load %29 : !cir.ptr<!u64i>, !u64i loc(#loc127)
              %34 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc128)
              %35 = cir.ptr_stride(%34 : !cir.ptr<!ty__twoIntsStruct>, %33 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc128)
              %36 = cir.get_member %35[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc37)
              cir.store %32, %36 : !s32i, !cir.ptr<!s32i> loc(#loc246)
              %37 = cir.const #cir.int<0> : !s32i loc(#loc129)
              %38 = cir.load %29 : !cir.ptr<!u64i>, !u64i loc(#loc130)
              %39 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc131)
              %40 = cir.ptr_stride(%39 : !cir.ptr<!ty__twoIntsStruct>, %38 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc131)
              %41 = cir.get_member %40[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc41)
              cir.store %37, %41 : !s32i, !cir.ptr<!s32i> loc(#loc247)
            } loc(#loc245)
            cir.yield loc(#loc119)
          } step {
            %32 = cir.load %29 : !cir.ptr<!u64i>, !u64i loc(#loc132)
            %33 = cir.unary(inc, %32) : !u64i, !u64i loc(#loc133)
            cir.store %33, %29 : !u64i, !cir.ptr<!u64i> loc(#loc248)
            cir.yield loc(#loc242)
          } loc(#loc242)
        } loc(#loc242)
      } loc(#loc240)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc134)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc134)
      %20 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc135)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc135)
      %22 = cir.const #cir.int<100> : !s32i loc(#loc136)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc136)
      %24 = cir.const #cir.int<8> : !u64i loc(#loc249)
      %25 = cir.binop(mul, %23, %24) : !u64i loc(#loc250)
      cir.libc.memmove %25 bytes from %21 to %19 : !cir.ptr<!void>, !u64i loc(#loc251)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc141)
      %27 = cir.const #cir.int<0> : !s32i loc(#loc142)
      %28 = cir.ptr_stride(%26 : !cir.ptr<!ty__twoIntsStruct>, %27 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc143)
      cir.call @printStructLine(%28) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc144)
    } loc(#loc238)
    cir.return loc(#loc93)
  } loc(#loc230)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc253)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc254)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc150)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc150)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc150)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc150)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc150)
    %7 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc255)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc150)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc150)
    cir.store %9, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc254)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc152)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc152)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc152)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc152)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc152)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc152)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc152)
    cir.store %16, %7 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc255)
    cir.scope {
      %17 = cir.const #cir.int<5> : !s32i loc(#loc155)
      %18 = cir.const #cir.int<5> : !s32i loc(#loc156)
      %19 = cir.cmp(eq, %17, %18) : !s32i, !cir.bool loc(#loc257)
      cir.if %19 {
        %20 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc158)
        cir.store %20, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc259)
      } loc(#loc258)
    } loc(#loc256)
    cir.scope {
      %17 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc261)
      cir.scope {
        %29 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc263)
        cir.scope {
          %30 = cir.const #cir.int<0> : !s32i loc(#loc170)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc170)
          cir.store %31, %29 : !u64i, !cir.ptr<!u64i> loc(#loc265)
          cir.for : cond {
            %32 = cir.load %29 : !cir.ptr<!u64i>, !u64i loc(#loc172)
            %33 = cir.const #cir.int<100> : !s32i loc(#loc173)
            %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc173)
            %35 = cir.cmp(lt, %32, %34) : !u64i, !cir.bool loc(#loc266)
            cir.condition(%35) loc(#loc174)
          } body {
            cir.scope {
              %32 = cir.const #cir.int<0> : !s32i loc(#loc176)
              %33 = cir.load %29 : !cir.ptr<!u64i>, !u64i loc(#loc177)
              %34 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc178)
              %35 = cir.ptr_stride(%34 : !cir.ptr<!ty__twoIntsStruct>, %33 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc178)
              %36 = cir.get_member %35[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc37)
              cir.store %32, %36 : !s32i, !cir.ptr<!s32i> loc(#loc268)
              %37 = cir.const #cir.int<0> : !s32i loc(#loc179)
              %38 = cir.load %29 : !cir.ptr<!u64i>, !u64i loc(#loc180)
              %39 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc181)
              %40 = cir.ptr_stride(%39 : !cir.ptr<!ty__twoIntsStruct>, %38 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc181)
              %41 = cir.get_member %40[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc41)
              cir.store %37, %41 : !s32i, !cir.ptr<!s32i> loc(#loc269)
            } loc(#loc267)
            cir.yield loc(#loc169)
          } step {
            %32 = cir.load %29 : !cir.ptr<!u64i>, !u64i loc(#loc182)
            %33 = cir.unary(inc, %32) : !u64i, !u64i loc(#loc183)
            cir.store %33, %29 : !u64i, !cir.ptr<!u64i> loc(#loc270)
            cir.yield loc(#loc264)
          } loc(#loc264)
        } loc(#loc264)
      } loc(#loc262)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc184)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc184)
      %20 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc185)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc185)
      %22 = cir.const #cir.int<100> : !s32i loc(#loc186)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc186)
      %24 = cir.const #cir.int<8> : !u64i loc(#loc271)
      %25 = cir.binop(mul, %23, %24) : !u64i loc(#loc272)
      cir.libc.memmove %25 bytes from %21 to %19 : !cir.ptr<!void>, !u64i loc(#loc273)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc191)
      %27 = cir.const #cir.int<0> : !s32i loc(#loc192)
      %28 = cir.ptr_stride(%26 : !cir.ptr<!ty__twoIntsStruct>, %27 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc193)
      cir.call @printStructLine(%28) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc194)
    } loc(#loc260)
    cir.return loc(#loc146)
  } loc(#loc252)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s05/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":25:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":51:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":27:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":27:21)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":28:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":28:54)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":29:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":29:55)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":30:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":35:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":30:8)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":30:27)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":31:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":34:16)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":34:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":36:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":50:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":37:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":37:33)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":38:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":46:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":39:13)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":39:20)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":41:13)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":45:13)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":41:22)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":41:18)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":41:25)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":41:29)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":41:27)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":42:13)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":43:36)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":43:24)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":43:17)
#loc37 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":44:36)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":44:24)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":44:17)
#loc41 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":41:35)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":41:34)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":48:17)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":48:23)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":48:31)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":48:35)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":48:55)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":48:9)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":48:56)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":49:26)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":49:31)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":49:32)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":49:9)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":118:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":122:1)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":120:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":120:14)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":121:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":121:14)
#loc61 = loc("/usr/include/stdlib.h":575:1)
#loc62 = loc("/usr/include/stdlib.h":575:41)
#loc63 = loc("/usr/include/time.h":76:1)
#loc64 = loc("/usr/include/time.h":76:38)
#loc65 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc66 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":139:15)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":141:15)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":144:15)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":146:15)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":134:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":149:1)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":135:1)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":137:27)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":137:22)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":137:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":139:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":140:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":140:78)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":141:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":144:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":145:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":145:77)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":146:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":148:12)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":148:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":66:19)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":58:1)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":88:1)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":60:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":60:21)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":61:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":61:54)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":62:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":62:55)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":63:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":72:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":63:8)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":63:27)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":64:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":67:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":69:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":66:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":71:16)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":71:9)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":73:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":87:5)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":74:9)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":74:33)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":75:9)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":83:9)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":76:13)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":76:20)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":78:13)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":82:13)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":78:22)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":78:18)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":78:25)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":78:29)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":78:27)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":79:13)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":80:36)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":80:24)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":80:17)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":81:36)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":81:24)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":81:17)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":78:35)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":78:34)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":85:17)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":85:23)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":85:31)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":85:35)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":85:55)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":85:9)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":85:56)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":86:26)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":86:31)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":86:32)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":86:9)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":91:1)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":116:1)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":93:5)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":93:21)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":94:5)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":94:54)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":95:5)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":95:55)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":96:5)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":100:5)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":96:8)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":96:27)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":97:5)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":99:16)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":99:9)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":101:5)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":115:5)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":102:9)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":102:33)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":103:9)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":111:9)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":104:13)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":104:20)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":106:13)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":110:13)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":106:22)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":106:18)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":106:25)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":106:29)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":106:27)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":107:13)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":108:36)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":108:24)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":108:17)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":109:36)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":109:24)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":109:17)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":106:35)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":106:34)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":113:17)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":113:23)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":113:31)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":113:35)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":113:55)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":113:9)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":113:56)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":114:26)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":114:31)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":114:32)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c":114:9)
#loc195 = loc(fused[#loc1, #loc2])
#loc196 = loc(fused[#loc3, #loc4])
#loc197 = loc(fused[#loc5, #loc6])
#loc198 = loc(fused[#loc7, #loc8])
#loc199 = loc(fused[#loc9, #loc10])
#loc200 = loc(fused[#loc11, #loc12])
#loc201 = loc(fused[#loc13, #loc14])
#loc202 = loc(fused[#loc15, #loc12])
#loc203 = loc(fused[#loc17, #loc16])
#loc204 = loc(fused[#loc18, #loc19])
#loc205 = loc(fused[#loc20, #loc21])
#loc206 = loc(fused[#loc22, #loc23])
#loc207 = loc(fused[#loc24, #loc25])
#loc208 = loc(fused[#loc26, #loc27])
#loc209 = loc(fused[#loc29, #loc28])
#loc210 = loc(fused[#loc30, #loc31])
#loc211 = loc(fused[#loc33, #loc27])
#loc212 = loc(fused[#loc36, #loc34])
#loc213 = loc(fused[#loc40, #loc38])
#loc214 = loc(fused[#loc43, #loc42])
#loc215 = loc(fused[#loc47, #loc48])
#loc216 = loc(fused[#loc46, #loc48])
#loc217 = loc(fused[#loc49, #loc50])
#loc218 = loc(fused[#loc55, #loc56])
#loc219 = loc(fused[#loc57, #loc58])
#loc220 = loc(fused[#loc59, #loc60])
#loc221 = loc(fused[#loc61, #loc62])
#loc222 = loc(fused[#loc63, #loc64])
#loc223 = loc(fused[#loc65, #loc66])
#loc224 = loc(fused[#loc71, #loc72])
#loc227 = loc(fused[#loc82, #loc83])
#loc228 = loc(fused[#loc86, #loc87])
#loc229 = loc(fused[#loc90, #loc89])
#loc230 = loc(fused[#loc92, #loc93])
#loc231 = loc(fused[#loc94, #loc95])
#loc232 = loc(fused[#loc96, #loc97])
#loc233 = loc(fused[#loc98, #loc99])
#loc234 = loc(fused[#loc100, #loc101])
#loc235 = loc(fused[#loc102, #loc103])
#loc236 = loc(fused[#loc104, #loc105, #loc106, #loc101])
#loc237 = loc(fused[#loc109, #loc108])
#loc238 = loc(fused[#loc110, #loc111])
#loc239 = loc(fused[#loc112, #loc113])
#loc240 = loc(fused[#loc114, #loc115])
#loc241 = loc(fused[#loc116, #loc117])
#loc242 = loc(fused[#loc118, #loc119])
#loc243 = loc(fused[#loc121, #loc120])
#loc244 = loc(fused[#loc122, #loc123])
#loc245 = loc(fused[#loc125, #loc119])
#loc246 = loc(fused[#loc128, #loc126])
#loc247 = loc(fused[#loc131, #loc129])
#loc248 = loc(fused[#loc133, #loc132])
#loc249 = loc(fused[#loc137, #loc138])
#loc250 = loc(fused[#loc136, #loc138])
#loc251 = loc(fused[#loc139, #loc140])
#loc252 = loc(fused[#loc145, #loc146])
#loc253 = loc(fused[#loc147, #loc148])
#loc254 = loc(fused[#loc149, #loc150])
#loc255 = loc(fused[#loc151, #loc152])
#loc256 = loc(fused[#loc153, #loc154])
#loc257 = loc(fused[#loc155, #loc156])
#loc258 = loc(fused[#loc157, #loc154])
#loc259 = loc(fused[#loc159, #loc158])
#loc260 = loc(fused[#loc160, #loc161])
#loc261 = loc(fused[#loc162, #loc163])
#loc262 = loc(fused[#loc164, #loc165])
#loc263 = loc(fused[#loc166, #loc167])
#loc264 = loc(fused[#loc168, #loc169])
#loc265 = loc(fused[#loc171, #loc170])
#loc266 = loc(fused[#loc172, #loc173])
#loc267 = loc(fused[#loc175, #loc169])
#loc268 = loc(fused[#loc178, #loc176])
#loc269 = loc(fused[#loc181, #loc179])
#loc270 = loc(fused[#loc183, #loc182])
#loc271 = loc(fused[#loc187, #loc188])
#loc272 = loc(fused[#loc186, #loc188])
#loc273 = loc(fused[#loc189, #loc190])
