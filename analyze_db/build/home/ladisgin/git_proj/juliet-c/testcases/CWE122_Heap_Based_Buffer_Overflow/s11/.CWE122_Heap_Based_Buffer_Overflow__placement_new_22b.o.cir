!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc3 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":29:14)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":29:21)
#loc39 = loc("../../../testcasesupport/std_testcase.h":68:7)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":61:19)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":61:26)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":86:19)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":86:26)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":106:19)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":106:26)
!ty_OneIntClass = !cir.struct<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
#loc120 = loc(fused[#loc10, #loc11])
#loc131 = loc(fused[#loc42, #loc43])
#loc140 = loc(fused[#loc70, #loc71])
#loc149 = loc(fused[#loc94, #loc95])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_229badGlobalE : !s32i {alignment = 4 : i64} loc(#loc116)
  cir.func linkonce_odr @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc3)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc3)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc3)
    cir.return loc(#loc3)
  } loc(#loc3)
  cir.func private @printIntLine(!s32i) loc(#loc117)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr1) loc(#loc118)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_227badSinkEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc10, #loc11])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc121)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc120)
    cir.store %arg0, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc14)
    cir.br ^bb1 loc(#loc122)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_229badGlobalE : !cir.ptr<!s32i> loc(#loc116)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %4 ^bb2, ^bb5 loc(#loc123)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc124)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<8> : !u64i loc(#loc125)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc22)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc22)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc125)
    cir.call @_ZN12TwoIntsClassC2Ev(%8) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr1) loc(#loc13)
    cir.store %8, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc121)
    %9 = cir.const #cir.int<5> : !s32i loc(#loc23)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc24)
    %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc25)
    cir.store %9, %11 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    %12 = cir.const #cir.int<10> : !s32i loc(#loc26)
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc27)
    %14 = cir.get_member %13[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc28)
    cir.store %12, %14 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc29)
    %16 = cir.get_member %15[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc25)
    %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc31)
    %18 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc32)
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc33)
    cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc32)
    cir.br ^bb4 loc(#loc20)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc16)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc16)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc9)
  } loc(#loc119)
  cir.global "private" external @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_2214goodB2G1GlobalE : !s32i {alignment = 4 : i64} loc(#loc128)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc129)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc38)
  cir.func linkonce_odr @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc39)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc39)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc39)
    cir.return loc(#loc39)
  } loc(#loc39)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_2212goodB2G1SinkEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc42, #loc43])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc132)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc131)
    cir.store %arg0, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc46)
    cir.br ^bb1 loc(#loc133)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_2214goodB2G1GlobalE : !cir.ptr<!s32i> loc(#loc128)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc49)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc134)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc38)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    cir.br ^bb6 loc(#loc51)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc135)
  ^bb4:  // pred: ^bb3
    %7 = cir.const #cir.int<4> : !u64i loc(#loc136)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc57)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc136)
    cir.call @_ZN11OneIntClassC2Ev(%10) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr1) loc(#loc45)
    cir.store %10, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc132)
    %11 = cir.const #cir.int<5> : !s32i loc(#loc58)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc59)
    %13 = cir.get_member %12[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc60)
    cir.store %11, %13 : !s32i, !cir.ptr<!s32i> loc(#loc137)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc61)
    %15 = cir.get_member %14[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc60)
    %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc63)
    %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc64)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc65)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc65)
    cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc64)
    cir.br ^bb5 loc(#loc55)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc48)
  ^bb6:  // 2 preds: ^bb2, ^bb5
    cir.br ^bb7 loc(#loc48)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc41)
  } loc(#loc130)
  cir.global "private" external @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_2214goodB2G2GlobalE : !s32i {alignment = 4 : i64} loc(#loc138)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_2212goodB2G2SinkEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc70, #loc71])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc141)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc140)
    cir.store %arg0, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc74)
    cir.br ^bb1 loc(#loc142)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_2214goodB2G2GlobalE : !cir.ptr<!s32i> loc(#loc138)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc77)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc77)
    cir.brcond %4 ^bb2, ^bb5 loc(#loc143)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc144)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<4> : !u64i loc(#loc145)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc82)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc82)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc145)
    cir.call @_ZN11OneIntClassC2Ev(%8) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr1) loc(#loc73)
    cir.store %8, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc141)
    %9 = cir.const #cir.int<5> : !s32i loc(#loc83)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc84)
    %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc60)
    cir.store %9, %11 : !s32i, !cir.ptr<!s32i> loc(#loc146)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc85)
    %13 = cir.get_member %12[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc60)
    %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc87)
    %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc88)
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc89)
    cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc88)
    cir.br ^bb4 loc(#loc80)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc76)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc76)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc69)
  } loc(#loc139)
  cir.global "private" external @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_2214goodG2B1GlobalE : !s32i {alignment = 4 : i64} loc(#loc147)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_2212goodG2B1SinkEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc94, #loc95])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc150)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc149)
    cir.store %arg0, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc98)
    cir.br ^bb1 loc(#loc151)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_2214goodG2B1GlobalE : !cir.ptr<!s32i> loc(#loc147)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc101)
    cir.brcond %4 ^bb2, ^bb5 loc(#loc152)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc153)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<8> : !u64i loc(#loc154)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc106)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc106)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc154)
    cir.call @_ZN12TwoIntsClassC2Ev(%8) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr1) loc(#loc97)
    cir.store %8, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc150)
    %9 = cir.const #cir.int<5> : !s32i loc(#loc107)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc108)
    %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc25)
    cir.store %9, %11 : !s32i, !cir.ptr<!s32i> loc(#loc155)
    %12 = cir.const #cir.int<10> : !s32i loc(#loc109)
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc110)
    %14 = cir.get_member %13[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc28)
    cir.store %12, %14 : !s32i, !cir.ptr<!s32i> loc(#loc156)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc111)
    %16 = cir.get_member %15[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc25)
    %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc113)
    %18 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc114)
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc115)
    cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc114)
    cir.br ^bb4 loc(#loc104)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc100)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc100)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc93)
  } loc(#loc148)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":27:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":27:12)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc6 = loc("/usr/include/stdlib.h":687:1)
#loc7 = loc("/usr/include/stdlib.h":687:32)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":29:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":48:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":39:13)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":39:49)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":30:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":31:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":47:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":31:8)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":32:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":33:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":46:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":39:39)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":39:43)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":41:32)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":41:13)
#loc25 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":42:32)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":42:13)
#loc28 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":43:26)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":43:36)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":43:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":45:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":45:18)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":56:1)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":56:12)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":66:19)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":61:1)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":83:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":76:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":76:48)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":62:1)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":63:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":82:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":63:8)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":64:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":67:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":69:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":66:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":70:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":81:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":76:38)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":76:42)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":78:32)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":78:13)
#loc60 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":79:26)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":79:36)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":79:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":80:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":80:18)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":57:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":57:12)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":86:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":103:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":96:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":96:48)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":87:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":88:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":102:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":88:8)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":89:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":90:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":101:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":96:38)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":96:42)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":98:32)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":98:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":99:26)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":99:36)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":99:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":100:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":100:18)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":58:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":58:12)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":106:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":125:1)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":116:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":116:49)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":107:1)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":108:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":124:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":108:8)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":109:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":110:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":123:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":116:39)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":116:43)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":118:32)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":118:13)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":119:32)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":119:13)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":120:26)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":120:36)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":120:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":122:13)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_22b.cpp":122:18)
#loc116 = loc(fused[#loc1, #loc2])
#loc117 = loc(fused[#loc4, #loc5])
#loc118 = loc(fused[#loc6, #loc7])
#loc119 = loc(fused[#loc8, #loc9])
#loc121 = loc(fused[#loc12, #loc13])
#loc122 = loc(fused[#loc15, #loc16])
#loc123 = loc(fused[#loc18, #loc16])
#loc124 = loc(fused[#loc19, #loc20])
#loc125 = loc(fused[#loc21, #loc13])
#loc126 = loc(fused[#loc24, #loc23])
#loc127 = loc(fused[#loc27, #loc26])
#loc128 = loc(fused[#loc34, #loc35])
#loc129 = loc(fused[#loc36, #loc37])
#loc130 = loc(fused[#loc40, #loc41])
#loc132 = loc(fused[#loc44, #loc45])
#loc133 = loc(fused[#loc47, #loc48])
#loc134 = loc(fused[#loc50, #loc51, #loc52, #loc48])
#loc135 = loc(fused[#loc54, #loc55])
#loc136 = loc(fused[#loc56, #loc45])
#loc137 = loc(fused[#loc59, #loc58])
#loc138 = loc(fused[#loc66, #loc67])
#loc139 = loc(fused[#loc68, #loc69])
#loc141 = loc(fused[#loc72, #loc73])
#loc142 = loc(fused[#loc75, #loc76])
#loc143 = loc(fused[#loc78, #loc76])
#loc144 = loc(fused[#loc79, #loc80])
#loc145 = loc(fused[#loc81, #loc73])
#loc146 = loc(fused[#loc84, #loc83])
#loc147 = loc(fused[#loc90, #loc91])
#loc148 = loc(fused[#loc92, #loc93])
#loc150 = loc(fused[#loc96, #loc97])
#loc151 = loc(fused[#loc99, #loc100])
#loc152 = loc(fused[#loc102, #loc100])
#loc153 = loc(fused[#loc103, #loc104])
#loc154 = loc(fused[#loc105, #loc97])
#loc155 = loc(fused[#loc108, #loc107])
#loc156 = loc(fused[#loc110, #loc109])
