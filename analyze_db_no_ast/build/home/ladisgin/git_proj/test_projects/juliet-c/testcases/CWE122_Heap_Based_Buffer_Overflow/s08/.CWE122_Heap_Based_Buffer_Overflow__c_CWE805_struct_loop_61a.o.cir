!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61b_badSource(!cir.ptr<!ty__twoIntsStruct>) -> !cir.ptr<!ty__twoIntsStruct> loc(#loc133)
  cir.func private  @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc134)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc135)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc137)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc11)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc138)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc13)
    %3 = cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61b_badSource(%2) : (!cir.ptr<!ty__twoIntsStruct>) -> !cir.ptr<!ty__twoIntsStruct> loc(#loc14)
    cir.store %3, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc139)
    cir.scope {
      %4 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc141)
      cir.scope {
        %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc143)
        cir.scope {
          %6 = cir.const #cir.int<0> : !s32i loc(#loc27)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc27)
          cir.store %7, %5 : !u64i, !cir.ptr<!u64i> loc(#loc145)
          cir.for : cond {
            %8 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc29)
            %9 = cir.const #cir.int<100> : !s32i loc(#loc30)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc30)
            %11 = cir.cmp(lt, %8, %10) : !u64i, !s32i loc(#loc146)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc31)
            cir.condition(%12) loc(#loc31)
          } body {
            cir.scope {
              %8 = cir.const #cir.int<0> : !s32i loc(#loc33)
              %9 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc34)
              %10 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc35)
              %11 = cir.ptr_stride(%10 : !cir.ptr<!ty__twoIntsStruct>, %9 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc35)
              %12 = cir.get_member %11[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc36)
              cir.store %8, %12 : !s32i, !cir.ptr<!s32i> loc(#loc148)
              %13 = cir.const #cir.int<0> : !s32i loc(#loc37)
              %14 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc38)
              %15 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc39)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!ty__twoIntsStruct>, %14 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc39)
              %17 = cir.get_member %16[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc40)
              cir.store %13, %17 : !s32i, !cir.ptr<!s32i> loc(#loc149)
            } loc(#loc147)
            cir.yield loc(#loc26)
          } step {
            %8 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc41)
            %9 = cir.unary(inc, %8) : !u64i, !u64i loc(#loc42)
            cir.store %9, %5 : !u64i, !cir.ptr<!u64i> loc(#loc150)
            cir.yield loc(#loc144)
          } loc(#loc144)
        } loc(#loc144)
      } loc(#loc142)
      cir.scope {
        %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc152)
        cir.scope {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc49)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc49)
          cir.store %13, %5 : !u64i, !cir.ptr<!u64i> loc(#loc154)
          cir.for : cond {
            %14 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc51)
            %15 = cir.const #cir.int<100> : !s32i loc(#loc52)
            %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc52)
            %17 = cir.cmp(lt, %14, %16) : !u64i, !s32i loc(#loc155)
            %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc53)
            cir.condition(%18) loc(#loc53)
          } body {
            cir.scope {
              %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc55)
              %15 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc56)
              %16 = cir.ptr_stride(%14 : !cir.ptr<!ty__twoIntsStruct>, %15 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc57)
              %17 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc58)
              %18 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc59)
              %19 = cir.ptr_stride(%18 : !cir.ptr<!ty__twoIntsStruct>, %17 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc59)
              cir.copy %19 to %16 : !cir.ptr<!ty__twoIntsStruct> loc(#loc57)
            } loc(#loc156)
            cir.yield loc(#loc48)
          } step {
            %14 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc60)
            %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc61)
            cir.store %15, %5 : !u64i, !cir.ptr<!u64i> loc(#loc157)
            cir.yield loc(#loc153)
          } loc(#loc153)
        } loc(#loc153)
        %6 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc62)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc63)
        %8 = cir.ptr_stride(%6 : !cir.ptr<!ty__twoIntsStruct>, %7 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc64)
        cir.call @printStructLine(%8) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc65)
        %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc66)
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc67)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc67)
        cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc66)
      } loc(#loc151)
    } loc(#loc140)
    cir.return loc(#loc8)
  } loc(#loc136)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc159)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc70)
    cir.return loc(#loc69)
  } loc(#loc158)
  cir.func private  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61b_goodG2BSource(!cir.ptr<!ty__twoIntsStruct>) -> !cir.ptr<!ty__twoIntsStruct> loc(#loc160)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc162)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc78)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc163)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc80)
    %3 = cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61b_goodG2BSource(%2) : (!cir.ptr<!ty__twoIntsStruct>) -> !cir.ptr<!ty__twoIntsStruct> loc(#loc81)
    cir.store %3, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc164)
    cir.scope {
      %4 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc166)
      cir.scope {
        %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc168)
        cir.scope {
          %6 = cir.const #cir.int<0> : !s32i loc(#loc94)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc94)
          cir.store %7, %5 : !u64i, !cir.ptr<!u64i> loc(#loc170)
          cir.for : cond {
            %8 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc96)
            %9 = cir.const #cir.int<100> : !s32i loc(#loc97)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc97)
            %11 = cir.cmp(lt, %8, %10) : !u64i, !s32i loc(#loc171)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc98)
            cir.condition(%12) loc(#loc98)
          } body {
            cir.scope {
              %8 = cir.const #cir.int<0> : !s32i loc(#loc100)
              %9 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc101)
              %10 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc102)
              %11 = cir.ptr_stride(%10 : !cir.ptr<!ty__twoIntsStruct>, %9 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc102)
              %12 = cir.get_member %11[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc36)
              cir.store %8, %12 : !s32i, !cir.ptr<!s32i> loc(#loc173)
              %13 = cir.const #cir.int<0> : !s32i loc(#loc103)
              %14 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc104)
              %15 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc105)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!ty__twoIntsStruct>, %14 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc105)
              %17 = cir.get_member %16[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc40)
              cir.store %13, %17 : !s32i, !cir.ptr<!s32i> loc(#loc174)
            } loc(#loc172)
            cir.yield loc(#loc93)
          } step {
            %8 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc106)
            %9 = cir.unary(inc, %8) : !u64i, !u64i loc(#loc107)
            cir.store %9, %5 : !u64i, !cir.ptr<!u64i> loc(#loc175)
            cir.yield loc(#loc169)
          } loc(#loc169)
        } loc(#loc169)
      } loc(#loc167)
      cir.scope {
        %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc177)
        cir.scope {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc114)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc114)
          cir.store %13, %5 : !u64i, !cir.ptr<!u64i> loc(#loc179)
          cir.for : cond {
            %14 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc116)
            %15 = cir.const #cir.int<100> : !s32i loc(#loc117)
            %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc117)
            %17 = cir.cmp(lt, %14, %16) : !u64i, !s32i loc(#loc180)
            %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc118)
            cir.condition(%18) loc(#loc118)
          } body {
            cir.scope {
              %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc120)
              %15 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc121)
              %16 = cir.ptr_stride(%14 : !cir.ptr<!ty__twoIntsStruct>, %15 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc122)
              %17 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc123)
              %18 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc124)
              %19 = cir.ptr_stride(%18 : !cir.ptr<!ty__twoIntsStruct>, %17 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc124)
              cir.copy %19 to %16 : !cir.ptr<!ty__twoIntsStruct> loc(#loc122)
            } loc(#loc181)
            cir.yield loc(#loc113)
          } step {
            %14 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc125)
            %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc126)
            cir.store %15, %5 : !u64i, !cir.ptr<!u64i> loc(#loc182)
            cir.yield loc(#loc178)
          } loc(#loc178)
        } loc(#loc178)
        %6 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc127)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc128)
        %8 = cir.ptr_stride(%6 : !cir.ptr<!ty__twoIntsStruct>, %7 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc129)
        cir.call @printStructLine(%8) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc130)
        %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc131)
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc132)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc132)
        cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc131)
      } loc(#loc176)
    } loc(#loc165)
    cir.return loc(#loc75)
  } loc(#loc161)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":22:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":22:107)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc5 = loc("/usr/include/stdlib.h":687:1)
#loc6 = loc("/usr/include/stdlib.h":687:32)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":24:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":51:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":26:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":26:21)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":27:12)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":27:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":28:82)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":28:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":28:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":28:86)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":29:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":50:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":30:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":30:33)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":31:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":39:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":32:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":32:20)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":34:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":38:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":34:22)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":34:18)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":34:25)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":34:29)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":34:27)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":35:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":36:36)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":36:24)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":36:17)
#loc36 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":37:36)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":37:24)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":37:17)
#loc40 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":34:35)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":34:34)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":40:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":49:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":41:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":41:20)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":43:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":46:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":43:22)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":43:18)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":43:25)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":43:29)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":43:27)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":44:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":45:17)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":45:22)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":45:23)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":45:34)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":45:27)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":43:35)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":43:34)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":47:30)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":47:35)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":47:36)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":47:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":48:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":48:18)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":89:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":92:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":91:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":91:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":58:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":58:111)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":60:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":87:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":62:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":62:21)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":63:12)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":63:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":64:86)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":64:12)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":64:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":64:90)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":65:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":86:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":66:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":66:33)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":67:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":75:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":68:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":68:20)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":70:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":74:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":70:22)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":70:18)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":70:25)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":70:29)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":70:27)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":71:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":72:36)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":72:24)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":72:17)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":73:36)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":73:24)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":73:17)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":70:35)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":70:34)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":76:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":85:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":77:13)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":77:20)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":79:13)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":82:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":79:22)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":79:18)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":79:25)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":79:29)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":79:27)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":80:13)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":81:17)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":81:22)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":81:23)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":81:34)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":81:27)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":79:35)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":79:34)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":83:30)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":83:35)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":83:36)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":83:13)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":84:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c":84:18)
#loc133 = loc(fused[#loc1, #loc2])
#loc134 = loc(fused[#loc3, #loc4])
#loc135 = loc(fused[#loc5, #loc6])
#loc136 = loc(fused[#loc7, #loc8])
#loc137 = loc(fused[#loc9, #loc10])
#loc138 = loc(fused[#loc12, #loc11])
#loc139 = loc(fused[#loc15, #loc16])
#loc140 = loc(fused[#loc17, #loc18])
#loc141 = loc(fused[#loc19, #loc20])
#loc142 = loc(fused[#loc21, #loc22])
#loc143 = loc(fused[#loc23, #loc24])
#loc144 = loc(fused[#loc25, #loc26])
#loc145 = loc(fused[#loc28, #loc27])
#loc146 = loc(fused[#loc29, #loc30])
#loc147 = loc(fused[#loc32, #loc26])
#loc148 = loc(fused[#loc35, #loc33])
#loc149 = loc(fused[#loc39, #loc37])
#loc150 = loc(fused[#loc42, #loc41])
#loc151 = loc(fused[#loc43, #loc44])
#loc152 = loc(fused[#loc45, #loc46])
#loc153 = loc(fused[#loc47, #loc48])
#loc154 = loc(fused[#loc50, #loc49])
#loc155 = loc(fused[#loc51, #loc52])
#loc156 = loc(fused[#loc54, #loc48])
#loc157 = loc(fused[#loc61, #loc60])
#loc158 = loc(fused[#loc68, #loc69])
#loc159 = loc(fused[#loc70, #loc71])
#loc160 = loc(fused[#loc72, #loc73])
#loc161 = loc(fused[#loc74, #loc75])
#loc162 = loc(fused[#loc76, #loc77])
#loc163 = loc(fused[#loc79, #loc78])
#loc164 = loc(fused[#loc82, #loc83])
#loc165 = loc(fused[#loc84, #loc85])
#loc166 = loc(fused[#loc86, #loc87])
#loc167 = loc(fused[#loc88, #loc89])
#loc168 = loc(fused[#loc90, #loc91])
#loc169 = loc(fused[#loc92, #loc93])
#loc170 = loc(fused[#loc95, #loc94])
#loc171 = loc(fused[#loc96, #loc97])
#loc172 = loc(fused[#loc99, #loc93])
#loc173 = loc(fused[#loc102, #loc100])
#loc174 = loc(fused[#loc105, #loc103])
#loc175 = loc(fused[#loc107, #loc106])
#loc176 = loc(fused[#loc108, #loc109])
#loc177 = loc(fused[#loc110, #loc111])
#loc178 = loc(fused[#loc112, #loc113])
#loc179 = loc(fused[#loc115, #loc114])
#loc180 = loc(fused[#loc116, #loc117])
#loc181 = loc(fused[#loc119, #loc113])
#loc182 = loc(fused[#loc126, #loc125])
