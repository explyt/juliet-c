!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc62 = loc("CWE401_Memory_Leak__int_realloc_16.c":110:10)
#loc63 = loc("CWE401_Memory_Leak__int_realloc_16.c":110:14)
#loc64 = loc("CWE401_Memory_Leak__int_realloc_16.c":110:20)
#loc65 = loc("CWE401_Memory_Leak__int_realloc_16.c":110:32)
#loc168 = loc(fused[#loc62, #loc63])
#loc169 = loc(fused[#loc64, #loc65])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int_realloc_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @realloc(!cir.ptr<!void>, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc145)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc146)
  cir.func private @printIntLine(!s32i) loc(#loc147)
  cir.func no_proto @CWE401_Memory_Leak__int_realloc_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc149)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc11)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc150)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc15)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc15)
        cir.condition(%3) loc(#loc15)
      } do {
        %2 = cir.get_global @realloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!cir.ptr<!void>, !u64i)>> loc(#loc16)
        %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc17)
        %4 = cir.cast(bitcast, %3 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc17)
        %5 = cir.const #cir.int<100> : !s32i loc(#loc18)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc18)
        %7 = cir.const #cir.int<4> : !u64i loc(#loc152)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc153)
        %9 = cir.call @realloc(%4, %8) : (!cir.ptr<!void>, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc16)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc154)
        cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc155)
        cir.scope {
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
          %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc26)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc26)
          %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc157)
          cir.if %22 {
            %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc28)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc29)
            %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc30)
            cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
          } loc(#loc158)
        } loc(#loc156)
        %11 = cir.const #cir.int<5> : !s32i loc(#loc31)
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc33)
        %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc34)
        cir.store %11, %14 : !s32i, !cir.ptr<!s32i> loc(#loc159)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc35)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc36)
        %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc37)
        %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc35)
        cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc38)
        cir.break loc(#loc39)
      } loc(#loc151)
    } loc(#loc151)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc42)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc42)
        cir.condition(%3) loc(#loc42)
      } do {
        cir.break loc(#loc43)
      } loc(#loc160)
    } loc(#loc160)
    cir.return loc(#loc8)
  } loc(#loc148)
  cir.func no_proto @CWE401_Memory_Leak__int_realloc_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc162)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc163)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    cir.return loc(#loc45)
  } loc(#loc161)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc164)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc165)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc166)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc59)
  cir.func @main(%arg0: !s32i loc(fused[#loc62, #loc63]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc64, #loc65])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc168)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc169)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc61)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc66)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc66)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc67)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc68)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc68)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc69)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc56)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %8 = cir.get_global @CWE401_Memory_Leak__int_realloc_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc170)
    cir.call @CWE401_Memory_Leak__int_realloc_16_good() : () -> () loc(#loc71)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc57)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc58)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %13 = cir.get_global @CWE401_Memory_Leak__int_realloc_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc171)
    cir.call @CWE401_Memory_Leak__int_realloc_16_bad() : () -> () loc(#loc75)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc59)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc78)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc172)
    cir.return %17 : !s32i loc(#loc172)
  } loc(#loc167)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc173)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc175)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc86)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc176)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc90)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc90)
        cir.condition(%3) loc(#loc90)
      } do {
        %2 = cir.get_global @realloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!cir.ptr<!void>, !u64i)>> loc(#loc91)
        %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc92)
        %4 = cir.cast(bitcast, %3 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc92)
        %5 = cir.const #cir.int<100> : !s32i loc(#loc93)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc93)
        %7 = cir.const #cir.int<4> : !u64i loc(#loc178)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc179)
        %9 = cir.call @realloc(%4, %8) : (!cir.ptr<!void>, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc91)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc180)
        cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc181)
        cir.scope {
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc100)
          %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc101)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc101)
          %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc183)
          cir.if %22 {
            %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc103)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc104)
            %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc105)
            cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc103)
          } loc(#loc184)
        } loc(#loc182)
        %11 = cir.const #cir.int<5> : !s32i loc(#loc106)
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc107)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc108)
        %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc109)
        cir.store %11, %14 : !s32i, !cir.ptr<!s32i> loc(#loc185)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc110)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc111)
        %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc112)
        %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc110)
        cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc113)
        cir.break loc(#loc114)
      } loc(#loc177)
    } loc(#loc177)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc117)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc117)
        cir.condition(%3) loc(#loc117)
      } do {
        %2 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc118)
        %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc119)
        %4 = cir.cast(bitcast, %3 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc119)
        cir.call @free(%4) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc118)
        cir.break loc(#loc120)
      } loc(#loc186)
    } loc(#loc186)
    cir.return loc(#loc83)
  } loc(#loc174)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc188)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc125)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc189)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc129)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc129)
        cir.condition(%3) loc(#loc129)
      } do {
        %2 = cir.const #cir.int<100> : !s32i loc(#loc130)
        %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc130)
        %4 = cir.const #cir.int<4> : !u64i loc(#loc130)
        %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc130)
        %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc130)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc130)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc130)
        cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc191)
        %9 = cir.const #cir.int<5> : !s32i loc(#loc132)
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc133)
        %11 = cir.const #cir.int<0> : !s32i loc(#loc134)
        %12 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc135)
        cir.store %9, %12 : !s32i, !cir.ptr<!s32i> loc(#loc192)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc136)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc137)
        %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc138)
        %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc136)
        cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc139)
        cir.break loc(#loc140)
      } loc(#loc190)
    } loc(#loc190)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc143)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc143)
        cir.condition(%3) loc(#loc143)
      } do {
        cir.break loc(#loc144)
      } loc(#loc193)
    } loc(#loc193)
    cir.return loc(#loc122)
  } loc(#loc187)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int_realloc_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":683:1)
#loc2 = loc("/usr/include/stdlib.h":684:14)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE401_Memory_Leak__int_realloc_16.c":24:1)
#loc8 = loc("CWE401_Memory_Leak__int_realloc_16.c":44:1)
#loc9 = loc("CWE401_Memory_Leak__int_realloc_16.c":26:5)
#loc10 = loc("CWE401_Memory_Leak__int_realloc_16.c":26:11)
#loc11 = loc("CWE401_Memory_Leak__int_realloc_16.c":27:12)
#loc12 = loc("CWE401_Memory_Leak__int_realloc_16.c":27:5)
#loc13 = loc("CWE401_Memory_Leak__int_realloc_16.c":28:5)
#loc14 = loc("CWE401_Memory_Leak__int_realloc_16.c":37:5)
#loc15 = loc("CWE401_Memory_Leak__int_realloc_16.c":28:11)
#loc16 = loc("CWE401_Memory_Leak__int_realloc_16.c":31:23)
#loc17 = loc("CWE401_Memory_Leak__int_realloc_16.c":31:31)
#loc18 = loc("CWE401_Memory_Leak__int_realloc_16.c":31:37)
#loc19 = loc("CWE401_Memory_Leak__int_realloc_16.c":31:41)
#loc20 = loc("CWE401_Memory_Leak__int_realloc_16.c":31:51)
#loc21 = loc("CWE401_Memory_Leak__int_realloc_16.c":31:52)
#loc22 = loc("CWE401_Memory_Leak__int_realloc_16.c":31:9)
#loc23 = loc("CWE401_Memory_Leak__int_realloc_16.c":32:9)
#loc24 = loc("CWE401_Memory_Leak__int_realloc_16.c":32:37)
#loc25 = loc("CWE401_Memory_Leak__int_realloc_16.c":32:13)
#loc26 = loc("CWE401_Memory_Leak__int_realloc_16.c":32:21)
#loc27 = loc("CWE401_Memory_Leak__int_realloc_16.c":32:27)
#loc28 = loc("CWE401_Memory_Leak__int_realloc_16.c":32:28)
#loc29 = loc("CWE401_Memory_Leak__int_realloc_16.c":32:34)
#loc30 = loc("CWE401_Memory_Leak__int_realloc_16.c":32:33)
#loc31 = loc("CWE401_Memory_Leak__int_realloc_16.c":34:19)
#loc32 = loc("CWE401_Memory_Leak__int_realloc_16.c":34:9)
#loc33 = loc("CWE401_Memory_Leak__int_realloc_16.c":34:14)
#loc34 = loc("CWE401_Memory_Leak__int_realloc_16.c":34:15)
#loc35 = loc("CWE401_Memory_Leak__int_realloc_16.c":35:22)
#loc36 = loc("CWE401_Memory_Leak__int_realloc_16.c":35:27)
#loc37 = loc("CWE401_Memory_Leak__int_realloc_16.c":35:28)
#loc38 = loc("CWE401_Memory_Leak__int_realloc_16.c":35:9)
#loc39 = loc("CWE401_Memory_Leak__int_realloc_16.c":36:9)
#loc40 = loc("CWE401_Memory_Leak__int_realloc_16.c":38:5)
#loc41 = loc("CWE401_Memory_Leak__int_realloc_16.c":43:5)
#loc42 = loc("CWE401_Memory_Leak__int_realloc_16.c":38:11)
#loc43 = loc("CWE401_Memory_Leak__int_realloc_16.c":42:9)
#loc44 = loc("CWE401_Memory_Leak__int_realloc_16.c":95:1)
#loc45 = loc("CWE401_Memory_Leak__int_realloc_16.c":99:1)
#loc46 = loc("CWE401_Memory_Leak__int_realloc_16.c":97:5)
#loc47 = loc("CWE401_Memory_Leak__int_realloc_16.c":97:13)
#loc48 = loc("CWE401_Memory_Leak__int_realloc_16.c":98:5)
#loc49 = loc("CWE401_Memory_Leak__int_realloc_16.c":98:13)
#loc50 = loc("/usr/include/stdlib.h":575:1)
#loc51 = loc("/usr/include/stdlib.h":575:41)
#loc52 = loc("/usr/include/time.h":76:1)
#loc53 = loc("/usr/include/time.h":76:38)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc56 = loc("CWE401_Memory_Leak__int_realloc_16.c":115:15)
#loc57 = loc("CWE401_Memory_Leak__int_realloc_16.c":117:15)
#loc58 = loc("CWE401_Memory_Leak__int_realloc_16.c":120:15)
#loc59 = loc("CWE401_Memory_Leak__int_realloc_16.c":122:15)
#loc60 = loc("CWE401_Memory_Leak__int_realloc_16.c":110:1)
#loc61 = loc("CWE401_Memory_Leak__int_realloc_16.c":125:1)
#loc66 = loc("CWE401_Memory_Leak__int_realloc_16.c":111:1)
#loc67 = loc("CWE401_Memory_Leak__int_realloc_16.c":113:27)
#loc68 = loc("CWE401_Memory_Leak__int_realloc_16.c":113:22)
#loc69 = loc("CWE401_Memory_Leak__int_realloc_16.c":113:5)
#loc70 = loc("CWE401_Memory_Leak__int_realloc_16.c":115:5)
#loc71 = loc("CWE401_Memory_Leak__int_realloc_16.c":116:5)
#loc72 = loc("CWE401_Memory_Leak__int_realloc_16.c":116:45)
#loc73 = loc("CWE401_Memory_Leak__int_realloc_16.c":117:5)
#loc74 = loc("CWE401_Memory_Leak__int_realloc_16.c":120:5)
#loc75 = loc("CWE401_Memory_Leak__int_realloc_16.c":121:5)
#loc76 = loc("CWE401_Memory_Leak__int_realloc_16.c":121:44)
#loc77 = loc("CWE401_Memory_Leak__int_realloc_16.c":122:5)
#loc78 = loc("CWE401_Memory_Leak__int_realloc_16.c":124:12)
#loc79 = loc("CWE401_Memory_Leak__int_realloc_16.c":124:5)
#loc80 = loc("/usr/include/stdlib.h":687:1)
#loc81 = loc("/usr/include/stdlib.h":687:32)
#loc82 = loc("CWE401_Memory_Leak__int_realloc_16.c":51:1)
#loc83 = loc("CWE401_Memory_Leak__int_realloc_16.c":71:1)
#loc84 = loc("CWE401_Memory_Leak__int_realloc_16.c":53:5)
#loc85 = loc("CWE401_Memory_Leak__int_realloc_16.c":53:11)
#loc86 = loc("CWE401_Memory_Leak__int_realloc_16.c":54:12)
#loc87 = loc("CWE401_Memory_Leak__int_realloc_16.c":54:5)
#loc88 = loc("CWE401_Memory_Leak__int_realloc_16.c":55:5)
#loc89 = loc("CWE401_Memory_Leak__int_realloc_16.c":64:5)
#loc90 = loc("CWE401_Memory_Leak__int_realloc_16.c":55:11)
#loc91 = loc("CWE401_Memory_Leak__int_realloc_16.c":58:23)
#loc92 = loc("CWE401_Memory_Leak__int_realloc_16.c":58:31)
#loc93 = loc("CWE401_Memory_Leak__int_realloc_16.c":58:37)
#loc94 = loc("CWE401_Memory_Leak__int_realloc_16.c":58:41)
#loc95 = loc("CWE401_Memory_Leak__int_realloc_16.c":58:51)
#loc96 = loc("CWE401_Memory_Leak__int_realloc_16.c":58:52)
#loc97 = loc("CWE401_Memory_Leak__int_realloc_16.c":58:9)
#loc98 = loc("CWE401_Memory_Leak__int_realloc_16.c":59:9)
#loc99 = loc("CWE401_Memory_Leak__int_realloc_16.c":59:37)
#loc100 = loc("CWE401_Memory_Leak__int_realloc_16.c":59:13)
#loc101 = loc("CWE401_Memory_Leak__int_realloc_16.c":59:21)
#loc102 = loc("CWE401_Memory_Leak__int_realloc_16.c":59:27)
#loc103 = loc("CWE401_Memory_Leak__int_realloc_16.c":59:28)
#loc104 = loc("CWE401_Memory_Leak__int_realloc_16.c":59:34)
#loc105 = loc("CWE401_Memory_Leak__int_realloc_16.c":59:33)
#loc106 = loc("CWE401_Memory_Leak__int_realloc_16.c":61:19)
#loc107 = loc("CWE401_Memory_Leak__int_realloc_16.c":61:9)
#loc108 = loc("CWE401_Memory_Leak__int_realloc_16.c":61:14)
#loc109 = loc("CWE401_Memory_Leak__int_realloc_16.c":61:15)
#loc110 = loc("CWE401_Memory_Leak__int_realloc_16.c":62:22)
#loc111 = loc("CWE401_Memory_Leak__int_realloc_16.c":62:27)
#loc112 = loc("CWE401_Memory_Leak__int_realloc_16.c":62:28)
#loc113 = loc("CWE401_Memory_Leak__int_realloc_16.c":62:9)
#loc114 = loc("CWE401_Memory_Leak__int_realloc_16.c":63:9)
#loc115 = loc("CWE401_Memory_Leak__int_realloc_16.c":65:5)
#loc116 = loc("CWE401_Memory_Leak__int_realloc_16.c":70:5)
#loc117 = loc("CWE401_Memory_Leak__int_realloc_16.c":65:11)
#loc118 = loc("CWE401_Memory_Leak__int_realloc_16.c":68:9)
#loc119 = loc("CWE401_Memory_Leak__int_realloc_16.c":68:14)
#loc120 = loc("CWE401_Memory_Leak__int_realloc_16.c":69:9)
#loc121 = loc("CWE401_Memory_Leak__int_realloc_16.c":74:1)
#loc122 = loc("CWE401_Memory_Leak__int_realloc_16.c":93:1)
#loc123 = loc("CWE401_Memory_Leak__int_realloc_16.c":76:5)
#loc124 = loc("CWE401_Memory_Leak__int_realloc_16.c":76:11)
#loc125 = loc("CWE401_Memory_Leak__int_realloc_16.c":77:12)
#loc126 = loc("CWE401_Memory_Leak__int_realloc_16.c":77:5)
#loc127 = loc("CWE401_Memory_Leak__int_realloc_16.c":78:5)
#loc128 = loc("CWE401_Memory_Leak__int_realloc_16.c":86:5)
#loc129 = loc("CWE401_Memory_Leak__int_realloc_16.c":78:11)
#loc130 = loc("CWE401_Memory_Leak__int_realloc_16.c":81:23)
#loc131 = loc("CWE401_Memory_Leak__int_realloc_16.c":81:9)
#loc132 = loc("CWE401_Memory_Leak__int_realloc_16.c":83:19)
#loc133 = loc("CWE401_Memory_Leak__int_realloc_16.c":83:9)
#loc134 = loc("CWE401_Memory_Leak__int_realloc_16.c":83:14)
#loc135 = loc("CWE401_Memory_Leak__int_realloc_16.c":83:15)
#loc136 = loc("CWE401_Memory_Leak__int_realloc_16.c":84:22)
#loc137 = loc("CWE401_Memory_Leak__int_realloc_16.c":84:27)
#loc138 = loc("CWE401_Memory_Leak__int_realloc_16.c":84:28)
#loc139 = loc("CWE401_Memory_Leak__int_realloc_16.c":84:9)
#loc140 = loc("CWE401_Memory_Leak__int_realloc_16.c":85:9)
#loc141 = loc("CWE401_Memory_Leak__int_realloc_16.c":87:5)
#loc142 = loc("CWE401_Memory_Leak__int_realloc_16.c":92:5)
#loc143 = loc("CWE401_Memory_Leak__int_realloc_16.c":87:11)
#loc144 = loc("CWE401_Memory_Leak__int_realloc_16.c":91:9)
#loc145 = loc(fused[#loc1, #loc2])
#loc146 = loc(fused[#loc3, #loc4])
#loc147 = loc(fused[#loc5, #loc6])
#loc148 = loc(fused[#loc7, #loc8])
#loc149 = loc(fused[#loc9, #loc10])
#loc150 = loc(fused[#loc12, #loc11])
#loc151 = loc(fused[#loc13, #loc14])
#loc152 = loc(fused[#loc19, #loc20])
#loc153 = loc(fused[#loc18, #loc20])
#loc154 = loc(fused[#loc16, #loc21])
#loc155 = loc(fused[#loc22, #loc21])
#loc156 = loc(fused[#loc23, #loc24])
#loc157 = loc(fused[#loc25, #loc26])
#loc158 = loc(fused[#loc27, #loc24])
#loc159 = loc(fused[#loc32, #loc31])
#loc160 = loc(fused[#loc40, #loc41])
#loc161 = loc(fused[#loc44, #loc45])
#loc162 = loc(fused[#loc46, #loc47])
#loc163 = loc(fused[#loc48, #loc49])
#loc164 = loc(fused[#loc50, #loc51])
#loc165 = loc(fused[#loc52, #loc53])
#loc166 = loc(fused[#loc54, #loc55])
#loc167 = loc(fused[#loc60, #loc61])
#loc170 = loc(fused[#loc71, #loc72])
#loc171 = loc(fused[#loc75, #loc76])
#loc172 = loc(fused[#loc79, #loc78])
#loc173 = loc(fused[#loc80, #loc81])
#loc174 = loc(fused[#loc82, #loc83])
#loc175 = loc(fused[#loc84, #loc85])
#loc176 = loc(fused[#loc87, #loc86])
#loc177 = loc(fused[#loc88, #loc89])
#loc178 = loc(fused[#loc94, #loc95])
#loc179 = loc(fused[#loc93, #loc95])
#loc180 = loc(fused[#loc91, #loc96])
#loc181 = loc(fused[#loc97, #loc96])
#loc182 = loc(fused[#loc98, #loc99])
#loc183 = loc(fused[#loc100, #loc101])
#loc184 = loc(fused[#loc102, #loc99])
#loc185 = loc(fused[#loc107, #loc106])
#loc186 = loc(fused[#loc115, #loc116])
#loc187 = loc(fused[#loc121, #loc122])
#loc188 = loc(fused[#loc123, #loc124])
#loc189 = loc(fused[#loc126, #loc125])
#loc190 = loc(fused[#loc127, #loc128])
#loc191 = loc(fused[#loc131, #loc130])
#loc192 = loc(fused[#loc133, #loc132])
#loc193 = loc(fused[#loc141, #loc142])
