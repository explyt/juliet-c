!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\0A\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc4)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc105)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"snprintf failed!\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc7)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc13)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc109)
            %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc110)
            %3 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc109)
            cir.store %3, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc109)
            %4 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc20)
            cir.store %4, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc110)
            cir.scope {
              %5 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc23)
              %6 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc24)
              %7 = cir.const #cir.int<100> : !s32i loc(#loc25)
              %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc25)
              %9 = cir.const #cir.int<6> : !u64i loc(#loc112)
              %10 = cir.binop(sub, %8, %9) : !u64i loc(#loc113)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc28)
              %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc28)
              %13 = cir.binop(sub, %10, %12) : !u64i loc(#loc114)
              %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc3)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc3)
              %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc4)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc4)
              %18 = cir.call @snprintf(%6, %13, %15, %17) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc23)
              %19 = cir.const #cir.int<0> : !s32i loc(#loc29)
              %20 = cir.cmp(eq, %18, %19) : !s32i, !cir.bool loc(#loc115)
              cir.if %20 {
                %21 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc7)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc7)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc31)
              } loc(#loc116)
            } loc(#loc111)
          } loc(#loc108)
          cir.break loc(#loc32)
        } loc(#loc14)
        cir.case(default, []) {
          %1 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc8)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc8)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc34)
          cir.break loc(#loc35)
        } loc(#loc33)
        cir.yield loc(#loc11)
      } loc(#loc11)
    } loc(#loc107)
    cir.return loc(#loc10)
  } loc(#loc106)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc118)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc119)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    cir.return loc(#loc37)
  } loc(#loc117)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc46)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc48)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc48)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc49)
          cir.break loc(#loc50)
        } loc(#loc47)
        cir.case(default, []) {
          cir.scope {
            %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc123)
            %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc124)
            %3 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc123)
            cir.store %3, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc123)
            %4 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc57)
            cir.store %4, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc124)
            cir.scope {
              %5 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc60)
              %6 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
              %7 = cir.const #cir.int<100> : !s32i loc(#loc62)
              %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc62)
              %9 = cir.const #cir.int<6> : !u64i loc(#loc126)
              %10 = cir.binop(sub, %8, %9) : !u64i loc(#loc127)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc65)
              %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc65)
              %13 = cir.binop(sub, %10, %12) : !u64i loc(#loc128)
              %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc66)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc66)
              %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc67)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc67)
              %18 = cir.call @snprintf(%6, %13, %15, %17) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc60)
              %19 = cir.const #cir.int<0> : !s32i loc(#loc68)
              %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc129)
              cir.if %20 {
                %21 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc70)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc70)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc71)
              } loc(#loc130)
            } loc(#loc125)
          } loc(#loc122)
          cir.break loc(#loc72)
        } loc(#loc51)
        cir.yield loc(#loc44)
      } loc(#loc44)
    } loc(#loc121)
    cir.return loc(#loc43)
  } loc(#loc120)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc77)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc134)
            %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc135)
            %3 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc134)
            cir.store %3, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc134)
            %4 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc84)
            cir.store %4, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc135)
            cir.scope {
              %5 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc87)
              %6 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc88)
              %7 = cir.const #cir.int<100> : !s32i loc(#loc89)
              %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc89)
              %9 = cir.const #cir.int<6> : !u64i loc(#loc137)
              %10 = cir.binop(sub, %8, %9) : !u64i loc(#loc138)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc92)
              %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc92)
              %13 = cir.binop(sub, %10, %12) : !u64i loc(#loc139)
              %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc93)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc93)
              %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc94)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc94)
              %18 = cir.call @snprintf(%6, %13, %15, %17) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc87)
              %19 = cir.const #cir.int<0> : !s32i loc(#loc95)
              %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc140)
              cir.if %20 {
                %21 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc97)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc97)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc98)
              } loc(#loc141)
            } loc(#loc136)
          } loc(#loc133)
          cir.break loc(#loc99)
        } loc(#loc78)
        cir.case(default, []) {
          %1 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc101)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc101)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc102)
          cir.break loc(#loc103)
        } loc(#loc100)
        cir.yield loc(#loc75)
      } loc(#loc75)
    } loc(#loc132)
    cir.return loc(#loc74)
  } loc(#loc131)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":385:1)
#loc2 = loc("/usr/include/stdio.h":387:62)
#loc3 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":44:53)
#loc4 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":44:61)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":46:23)
#loc8 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":52:19)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":32:1)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":55:1)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":34:5)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":54:5)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":34:12)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":36:5)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":37:5)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":48:5)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":40:9)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":40:32)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":41:9)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":41:23)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":44:9)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":47:9)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":44:13)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":44:22)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":44:27)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":44:31)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":44:48)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":44:50)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":44:76)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":45:9)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":46:13)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":49:5)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":50:5)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":52:9)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":53:9)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":111:1)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":115:1)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":113:5)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":113:11)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":114:5)
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":114:11)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":62:1)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":84:1)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":64:5)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":83:5)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":64:12)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":66:5)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":68:19)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":68:9)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":69:9)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":70:5)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":71:5)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":81:5)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":74:9)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":74:32)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":75:9)
#loc57 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":75:23)
#loc58 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":77:9)
#loc59 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":80:9)
#loc60 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":77:13)
#loc61 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":77:22)
#loc62 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":77:27)
#loc63 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":77:31)
#loc64 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":77:48)
#loc65 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":77:50)
#loc66 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":77:53)
#loc67 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":77:61)
#loc68 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":77:75)
#loc69 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":78:9)
#loc70 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":79:23)
#loc71 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":79:13)
#loc72 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":82:5)
#loc73 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":87:1)
#loc74 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":109:1)
#loc75 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":89:5)
#loc76 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":108:5)
#loc77 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":89:12)
#loc78 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":91:5)
#loc79 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":92:5)
#loc80 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":102:5)
#loc81 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":95:9)
#loc82 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":95:32)
#loc83 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":96:9)
#loc84 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":96:23)
#loc85 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":98:9)
#loc86 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":101:9)
#loc87 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":98:13)
#loc88 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":98:22)
#loc89 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":98:27)
#loc90 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":98:31)
#loc91 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":98:48)
#loc92 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":98:50)
#loc93 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":98:53)
#loc94 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":98:61)
#loc95 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":98:75)
#loc96 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":99:9)
#loc97 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":100:23)
#loc98 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":100:13)
#loc99 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":103:5)
#loc100 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":104:5)
#loc101 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":106:19)
#loc102 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":106:9)
#loc103 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":107:9)
#loc104 = loc(fused[#loc1, #loc2])
#loc105 = loc(fused[#loc5, #loc6])
#loc106 = loc(fused[#loc9, #loc10])
#loc107 = loc(fused[#loc11, #loc12])
#loc108 = loc(fused[#loc15, #loc16])
#loc109 = loc(fused[#loc17, #loc18])
#loc110 = loc(fused[#loc19, #loc20])
#loc111 = loc(fused[#loc21, #loc22])
#loc112 = loc(fused[#loc26, #loc27])
#loc113 = loc(fused[#loc25, #loc27])
#loc114 = loc(fused[#loc25, #loc28])
#loc115 = loc(fused[#loc23, #loc29])
#loc116 = loc(fused[#loc30, #loc22])
#loc117 = loc(fused[#loc36, #loc37])
#loc118 = loc(fused[#loc38, #loc39])
#loc119 = loc(fused[#loc40, #loc41])
#loc120 = loc(fused[#loc42, #loc43])
#loc121 = loc(fused[#loc44, #loc45])
#loc122 = loc(fused[#loc52, #loc53])
#loc123 = loc(fused[#loc54, #loc55])
#loc124 = loc(fused[#loc56, #loc57])
#loc125 = loc(fused[#loc58, #loc59])
#loc126 = loc(fused[#loc63, #loc64])
#loc127 = loc(fused[#loc62, #loc64])
#loc128 = loc(fused[#loc62, #loc65])
#loc129 = loc(fused[#loc60, #loc68])
#loc130 = loc(fused[#loc69, #loc59])
#loc131 = loc(fused[#loc73, #loc74])
#loc132 = loc(fused[#loc75, #loc76])
#loc133 = loc(fused[#loc79, #loc80])
#loc134 = loc(fused[#loc81, #loc82])
#loc135 = loc(fused[#loc83, #loc84])
#loc136 = loc(fused[#loc85, #loc86])
#loc137 = loc(fused[#loc90, #loc91])
#loc138 = loc(fused[#loc89, #loc91])
#loc139 = loc(fused[#loc89, #loc92])
#loc140 = loc(fused[#loc87, #loc95])
#loc141 = loc(fused[#loc96, #loc86])
