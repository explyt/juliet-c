!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_multiply_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc99)
  cir.func no_proto  @CWE191_Integer_Underflow__int_min_multiply_18_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc101)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc7)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc102)
    cir.goto "source" loc(#loc103)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc11)
    %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc12)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc12)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc12)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    cir.goto "sink" loc(#loc105)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc16)
    cir.scope {
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %7 = cir.const #cir.int<0> : !s32i loc(#loc20)
      %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc107)
      %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc21)
      cir.if %9 {
        %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc109)
        %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
        %12 = cir.const #cir.int<2> : !s32i loc(#loc24)
        %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc25)
        cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc109)
        %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc26)
        cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc27)
      } loc(#loc108)
    } loc(#loc106)
    cir.return loc(#loc4)
  } loc(#loc100)
  cir.func no_proto  @CWE191_Integer_Underflow__int_min_multiply_18_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc111)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc112)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc110)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc113)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc36)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc115)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc41)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc116)
    cir.goto "source" loc(#loc117)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc45)
    %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc46)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc46)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc46)
    %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc46)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    cir.goto "sink" loc(#loc119)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc50)
    cir.scope {
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc53)
      %7 = cir.const #cir.int<0> : !s32i loc(#loc54)
      %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc121)
      %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc55)
      cir.if %9 {
        cir.scope {
          %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
          %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc60)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc60)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc60)
          %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc60)
          %15 = cir.const #cir.int<2> : !s32i loc(#loc61)
          %16 = cir.binop(div, %14, %15) : !s32i loc(#loc124)
          %17 = cir.cmp(gt, %10, %16) : !s32i, !s32i loc(#loc125)
          %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc63)
          cir.if %18 {
            %19 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc127)
            %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
            %21 = cir.const #cir.int<2> : !s32i loc(#loc68)
            %22 = cir.binop(mul, %20, %21) nsw : !s32i loc(#loc69)
            cir.store %22, %19 : !s32i, !cir.ptr<!s32i> loc(#loc127)
            %23 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc70)
            cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc71)
          } else {
            %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc36)
            %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc36)
            cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc72)
          } loc(#loc126)
        } loc(#loc123)
      } loc(#loc122)
    } loc(#loc120)
    cir.return loc(#loc38)
  } loc(#loc114)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc129)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc77)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    cir.goto "source" loc(#loc131)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc81)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc82)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc83)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc132)
    cir.goto "sink" loc(#loc133)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc87)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc90)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc91)
      %6 = cir.cmp(lt, %4, %5) : !s32i, !s32i loc(#loc135)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc92)
      cir.if %7 {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc137)
        %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc96)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc95)
        %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc96)
        cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc137)
        %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc97)
        cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc98)
      } loc(#loc136)
    } loc(#loc134)
    cir.return loc(#loc74)
  } loc(#loc128)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_multiply_18.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":39:1)
#loc5 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":24:5)
#loc6 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":24:9)
#loc7 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":26:12)
#loc8 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":26:5)
#loc9 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":27:5)
#loc10 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":27:10)
#loc11 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":28:1)
#loc12 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":30:12)
#loc13 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":30:5)
#loc14 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":31:5)
#loc15 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":31:10)
#loc16 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":32:1)
#loc17 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":33:5)
#loc18 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":38:5)
#loc19 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":33:8)
#loc20 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":33:15)
#loc21 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":33:13)
#loc22 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":34:5)
#loc23 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":36:9)
#loc24 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":36:29)
#loc25 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":36:22)
#loc26 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":37:22)
#loc27 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":37:9)
#loc28 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":92:1)
#loc29 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":96:1)
#loc30 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":94:5)
#loc31 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":94:13)
#loc32 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":95:5)
#loc33 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":95:13)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc36 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":67:23)
#loc37 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":46:1)
#loc38 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":70:1)
#loc39 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":48:5)
#loc40 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":48:9)
#loc41 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":50:12)
#loc42 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":50:5)
#loc43 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":51:5)
#loc44 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":51:10)
#loc45 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":52:1)
#loc46 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":54:12)
#loc47 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":54:5)
#loc48 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":55:5)
#loc49 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":55:10)
#loc50 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":56:1)
#loc51 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":57:5)
#loc52 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":69:5)
#loc53 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":57:8)
#loc54 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":57:15)
#loc55 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":57:13)
#loc56 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":58:5)
#loc57 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":60:9)
#loc58 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":68:9)
#loc59 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":60:13)
#loc60 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":60:21)
#loc61 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":60:29)
#loc62 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":60:30)
#loc63 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":60:18)
#loc64 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":61:9)
#loc65 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":64:9)
#loc66 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":66:9)
#loc67 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":62:13)
#loc68 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":62:33)
#loc69 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":62:26)
#loc70 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":63:26)
#loc71 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":63:13)
#loc72 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":67:13)
#loc73 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":73:1)
#loc74 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":90:1)
#loc75 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":75:5)
#loc76 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":75:9)
#loc77 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":77:12)
#loc78 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":77:5)
#loc79 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":78:5)
#loc80 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":78:10)
#loc81 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":79:1)
#loc82 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":81:13)
#loc83 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":81:12)
#loc84 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":81:5)
#loc85 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":82:5)
#loc86 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":82:10)
#loc87 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":83:1)
#loc88 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":84:5)
#loc89 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":89:5)
#loc90 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":84:8)
#loc91 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":84:15)
#loc92 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":84:13)
#loc93 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":85:5)
#loc94 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":87:9)
#loc95 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":87:29)
#loc96 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":87:22)
#loc97 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":88:22)
#loc98 = loc("CWE191_Integer_Underflow__int_min_multiply_18.c":88:9)
#loc99 = loc(fused[#loc1, #loc2])
#loc100 = loc(fused[#loc3, #loc4])
#loc101 = loc(fused[#loc5, #loc6])
#loc102 = loc(fused[#loc8, #loc7])
#loc103 = loc(fused[#loc9, #loc10])
#loc104 = loc(fused[#loc13, #loc12])
#loc105 = loc(fused[#loc14, #loc15])
#loc106 = loc(fused[#loc17, #loc18])
#loc107 = loc(fused[#loc19, #loc20])
#loc108 = loc(fused[#loc22, #loc18])
#loc109 = loc(fused[#loc23, #loc24])
#loc110 = loc(fused[#loc28, #loc29])
#loc111 = loc(fused[#loc30, #loc31])
#loc112 = loc(fused[#loc32, #loc33])
#loc113 = loc(fused[#loc34, #loc35])
#loc114 = loc(fused[#loc37, #loc38])
#loc115 = loc(fused[#loc39, #loc40])
#loc116 = loc(fused[#loc42, #loc41])
#loc117 = loc(fused[#loc43, #loc44])
#loc118 = loc(fused[#loc47, #loc46])
#loc119 = loc(fused[#loc48, #loc49])
#loc120 = loc(fused[#loc51, #loc52])
#loc121 = loc(fused[#loc53, #loc54])
#loc122 = loc(fused[#loc56, #loc52])
#loc123 = loc(fused[#loc57, #loc58])
#loc124 = loc(fused[#loc60, #loc61])
#loc125 = loc(fused[#loc59, #loc62])
#loc126 = loc(fused[#loc64, #loc65, #loc66, #loc58])
#loc127 = loc(fused[#loc67, #loc68])
#loc128 = loc(fused[#loc73, #loc74])
#loc129 = loc(fused[#loc75, #loc76])
#loc130 = loc(fused[#loc78, #loc77])
#loc131 = loc(fused[#loc79, #loc80])
#loc132 = loc(fused[#loc84, #loc82])
#loc133 = loc(fused[#loc85, #loc86])
#loc134 = loc(fused[#loc88, #loc89])
#loc135 = loc(fused[#loc90, #loc91])
#loc136 = loc(fused[#loc93, #loc89])
#loc137 = loc(fused[#loc94, #loc95])
