!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @putchar(!s32i) -> !s32i loc(#loc39)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"putchar failed!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16_bad() extra(#fn_attr) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc10)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc10)
        cir.condition(%1) loc(#loc10)
      } do {
        cir.scope {
          cir.scope {
            %0 = cir.const #cir.int<65> : !s32i loc(#loc14)
            %1 = cir.call @putchar(%0) : (!s32i) -> !s32i loc(#loc15)
            %2 = cir.const #cir.int<0> : !s32i loc(#loc16)
            %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc45)
            cir.if %3 {
              %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc5)
              %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc5)
              cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc18)
            } loc(#loc46)
          } loc(#loc44)
          cir.break loc(#loc19)
        } loc(#loc43)
        cir.yield loc(#loc9)
      } loc(#loc42)
    } loc(#loc42)
    cir.return loc(#loc7)
  } loc(#loc41)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc48)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc22)
    cir.return loc(#loc21)
  } loc(#loc47)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc28)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc28)
        cir.condition(%1) loc(#loc28)
      } do {
        cir.scope {
          cir.scope {
            %0 = cir.const #cir.int<65> : !s32i loc(#loc32)
            %1 = cir.call @putchar(%0) : (!s32i) -> !s32i loc(#loc33)
            %2 = cir.const #cir.int<1> : !s32i loc(#loc34)
            %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc34)
            %4 = cir.cmp(eq, %1, %3) : !s32i, !cir.bool loc(#loc53)
            cir.if %4 {
              %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
              %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc36)
              cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc37)
            } loc(#loc54)
          } loc(#loc52)
          cir.break loc(#loc38)
        } loc(#loc51)
        cir.yield loc(#loc27)
      } loc(#loc50)
    } loc(#loc50)
    cir.return loc(#loc25)
  } loc(#loc49)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":618:1)
#loc2 = loc("/usr/include/stdio.h":618:28)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":32:23)
#loc6 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":24:1)
#loc7 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":36:1)
#loc8 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":26:5)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":35:5)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":26:11)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":27:5)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":30:9)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":33:9)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":30:26)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":30:13)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":30:34)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":31:9)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":32:13)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":34:9)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":56:1)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":59:1)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":58:5)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":58:11)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":43:1)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":54:1)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":45:5)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":53:5)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":45:11)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":46:5)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":48:9)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":51:9)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":48:26)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":48:13)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":48:34)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":49:9)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":50:23)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":50:13)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_16.c":52:9)
#loc39 = loc(fused[#loc1, #loc2])
#loc40 = loc(fused[#loc3, #loc4])
#loc41 = loc(fused[#loc6, #loc7])
#loc42 = loc(fused[#loc8, #loc9])
#loc43 = loc(fused[#loc11, #loc9])
#loc44 = loc(fused[#loc12, #loc13])
#loc45 = loc(fused[#loc15, #loc16])
#loc46 = loc(fused[#loc17, #loc13])
#loc47 = loc(fused[#loc20, #loc21])
#loc48 = loc(fused[#loc22, #loc23])
#loc49 = loc(fused[#loc24, #loc25])
#loc50 = loc(fused[#loc26, #loc27])
#loc51 = loc(fused[#loc29, #loc27])
#loc52 = loc(fused[#loc30, #loc31])
#loc53 = loc(fused[#loc33, #loc34])
#loc54 = loc(fused[#loc35, #loc31])
