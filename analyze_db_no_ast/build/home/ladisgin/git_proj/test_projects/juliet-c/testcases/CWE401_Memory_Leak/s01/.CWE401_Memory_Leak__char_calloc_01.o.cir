!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__char_calloc_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc84)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc85)
  cir.func private  @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc86)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"A String\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc7)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc87)
  cir.func no_proto  @CWE401_Memory_Leak__char_calloc_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc89)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc14)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc90)
    %2 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc16)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc17)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc17)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc91)
    %6 = cir.call @calloc(%4, %5) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc16)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc92)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc93)
    cir.scope {
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc24)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc25)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc25)
      %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !s32i loc(#loc95)
      %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc26)
      cir.if %18 {
        %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc28)
        %20 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc30)
        cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
      } loc(#loc96)
    } loc(#loc94)
    %8 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc31)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc7)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc7)
    %12 = cir.call @strcpy(%9, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc31)
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc34)
    cir.return loc(#loc11)
  } loc(#loc88)
  cir.func no_proto  @CWE401_Memory_Leak__char_calloc_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc98)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc99)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc36)
  } loc(#loc97)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc101)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc45)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc102)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc47)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc47)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc47)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc47)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc47)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc47)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc47)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc103)
    %9 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc49)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc51)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc51)
    %13 = cir.call @strcpy(%10, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc49)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    cir.return loc(#loc42)
  } loc(#loc100)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc104)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc106)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc60)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc107)
    %2 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc62)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc63)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc63)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc108)
    %6 = cir.call @calloc(%4, %5) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc62)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc109)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc110)
    cir.scope {
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
      %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc71)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc71)
      %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s8i>, !s32i loc(#loc112)
      %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc72)
      cir.if %21 {
        %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc74)
        %23 = cir.const #cir.int<1> : !s32i loc(#loc75)
        %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc76)
        cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc74)
      } loc(#loc113)
    } loc(#loc111)
    %8 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc77)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc79)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc79)
    %12 = cir.call @strcpy(%9, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc77)
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc80)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc82)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc83)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc83)
    cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc82)
    cir.return loc(#loc57)
  } loc(#loc105)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__char_calloc_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":675:1)
#loc2 = loc("/usr/include/stdlib.h":676:14)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":141:1)
#loc6 = loc("/usr/include/string.h":142:14)
#loc7 = loc("CWE401_Memory_Leak__char_calloc_01.c":32:18)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE401_Memory_Leak__char_calloc_01.c":24:1)
#loc11 = loc("CWE401_Memory_Leak__char_calloc_01.c":36:1)
#loc12 = loc("CWE401_Memory_Leak__char_calloc_01.c":26:5)
#loc13 = loc("CWE401_Memory_Leak__char_calloc_01.c":26:12)
#loc14 = loc("CWE401_Memory_Leak__char_calloc_01.c":27:12)
#loc15 = loc("CWE401_Memory_Leak__char_calloc_01.c":27:5)
#loc16 = loc("CWE401_Memory_Leak__char_calloc_01.c":29:20)
#loc17 = loc("CWE401_Memory_Leak__char_calloc_01.c":29:27)
#loc18 = loc("CWE401_Memory_Leak__char_calloc_01.c":29:32)
#loc19 = loc("CWE401_Memory_Leak__char_calloc_01.c":29:43)
#loc20 = loc("CWE401_Memory_Leak__char_calloc_01.c":29:44)
#loc21 = loc("CWE401_Memory_Leak__char_calloc_01.c":29:5)
#loc22 = loc("CWE401_Memory_Leak__char_calloc_01.c":30:5)
#loc23 = loc("CWE401_Memory_Leak__char_calloc_01.c":30:33)
#loc24 = loc("CWE401_Memory_Leak__char_calloc_01.c":30:9)
#loc25 = loc("CWE401_Memory_Leak__char_calloc_01.c":30:17)
#loc26 = loc("CWE401_Memory_Leak__char_calloc_01.c":30:14)
#loc27 = loc("CWE401_Memory_Leak__char_calloc_01.c":30:23)
#loc28 = loc("CWE401_Memory_Leak__char_calloc_01.c":30:24)
#loc29 = loc("CWE401_Memory_Leak__char_calloc_01.c":30:30)
#loc30 = loc("CWE401_Memory_Leak__char_calloc_01.c":30:29)
#loc31 = loc("CWE401_Memory_Leak__char_calloc_01.c":32:5)
#loc32 = loc("CWE401_Memory_Leak__char_calloc_01.c":32:12)
#loc33 = loc("CWE401_Memory_Leak__char_calloc_01.c":33:15)
#loc34 = loc("CWE401_Memory_Leak__char_calloc_01.c":33:5)
#loc35 = loc("CWE401_Memory_Leak__char_calloc_01.c":71:1)
#loc36 = loc("CWE401_Memory_Leak__char_calloc_01.c":75:1)
#loc37 = loc("CWE401_Memory_Leak__char_calloc_01.c":73:5)
#loc38 = loc("CWE401_Memory_Leak__char_calloc_01.c":73:13)
#loc39 = loc("CWE401_Memory_Leak__char_calloc_01.c":74:5)
#loc40 = loc("CWE401_Memory_Leak__char_calloc_01.c":74:13)
#loc41 = loc("CWE401_Memory_Leak__char_calloc_01.c":43:1)
#loc42 = loc("CWE401_Memory_Leak__char_calloc_01.c":54:1)
#loc43 = loc("CWE401_Memory_Leak__char_calloc_01.c":45:5)
#loc44 = loc("CWE401_Memory_Leak__char_calloc_01.c":45:12)
#loc45 = loc("CWE401_Memory_Leak__char_calloc_01.c":46:12)
#loc46 = loc("CWE401_Memory_Leak__char_calloc_01.c":46:5)
#loc47 = loc("CWE401_Memory_Leak__char_calloc_01.c":48:20)
#loc48 = loc("CWE401_Memory_Leak__char_calloc_01.c":48:5)
#loc49 = loc("CWE401_Memory_Leak__char_calloc_01.c":50:5)
#loc50 = loc("CWE401_Memory_Leak__char_calloc_01.c":50:12)
#loc51 = loc("CWE401_Memory_Leak__char_calloc_01.c":50:18)
#loc52 = loc("CWE401_Memory_Leak__char_calloc_01.c":51:15)
#loc53 = loc("CWE401_Memory_Leak__char_calloc_01.c":51:5)
#loc54 = loc("/usr/include/stdlib.h":687:1)
#loc55 = loc("/usr/include/stdlib.h":687:32)
#loc56 = loc("CWE401_Memory_Leak__char_calloc_01.c":57:1)
#loc57 = loc("CWE401_Memory_Leak__char_calloc_01.c":69:1)
#loc58 = loc("CWE401_Memory_Leak__char_calloc_01.c":59:5)
#loc59 = loc("CWE401_Memory_Leak__char_calloc_01.c":59:12)
#loc60 = loc("CWE401_Memory_Leak__char_calloc_01.c":60:12)
#loc61 = loc("CWE401_Memory_Leak__char_calloc_01.c":60:5)
#loc62 = loc("CWE401_Memory_Leak__char_calloc_01.c":62:20)
#loc63 = loc("CWE401_Memory_Leak__char_calloc_01.c":62:27)
#loc64 = loc("CWE401_Memory_Leak__char_calloc_01.c":62:32)
#loc65 = loc("CWE401_Memory_Leak__char_calloc_01.c":62:43)
#loc66 = loc("CWE401_Memory_Leak__char_calloc_01.c":62:44)
#loc67 = loc("CWE401_Memory_Leak__char_calloc_01.c":62:5)
#loc68 = loc("CWE401_Memory_Leak__char_calloc_01.c":63:5)
#loc69 = loc("CWE401_Memory_Leak__char_calloc_01.c":63:33)
#loc70 = loc("CWE401_Memory_Leak__char_calloc_01.c":63:9)
#loc71 = loc("CWE401_Memory_Leak__char_calloc_01.c":63:17)
#loc72 = loc("CWE401_Memory_Leak__char_calloc_01.c":63:14)
#loc73 = loc("CWE401_Memory_Leak__char_calloc_01.c":63:23)
#loc74 = loc("CWE401_Memory_Leak__char_calloc_01.c":63:24)
#loc75 = loc("CWE401_Memory_Leak__char_calloc_01.c":63:30)
#loc76 = loc("CWE401_Memory_Leak__char_calloc_01.c":63:29)
#loc77 = loc("CWE401_Memory_Leak__char_calloc_01.c":65:5)
#loc78 = loc("CWE401_Memory_Leak__char_calloc_01.c":65:12)
#loc79 = loc("CWE401_Memory_Leak__char_calloc_01.c":65:18)
#loc80 = loc("CWE401_Memory_Leak__char_calloc_01.c":66:15)
#loc81 = loc("CWE401_Memory_Leak__char_calloc_01.c":66:5)
#loc82 = loc("CWE401_Memory_Leak__char_calloc_01.c":68:5)
#loc83 = loc("CWE401_Memory_Leak__char_calloc_01.c":68:10)
#loc84 = loc(fused[#loc1, #loc2])
#loc85 = loc(fused[#loc3, #loc4])
#loc86 = loc(fused[#loc5, #loc6])
#loc87 = loc(fused[#loc8, #loc9])
#loc88 = loc(fused[#loc10, #loc11])
#loc89 = loc(fused[#loc12, #loc13])
#loc90 = loc(fused[#loc15, #loc14])
#loc91 = loc(fused[#loc18, #loc19])
#loc92 = loc(fused[#loc16, #loc20])
#loc93 = loc(fused[#loc21, #loc20])
#loc94 = loc(fused[#loc22, #loc23])
#loc95 = loc(fused[#loc24, #loc25])
#loc96 = loc(fused[#loc27, #loc23])
#loc97 = loc(fused[#loc35, #loc36])
#loc98 = loc(fused[#loc37, #loc38])
#loc99 = loc(fused[#loc39, #loc40])
#loc100 = loc(fused[#loc41, #loc42])
#loc101 = loc(fused[#loc43, #loc44])
#loc102 = loc(fused[#loc46, #loc45])
#loc103 = loc(fused[#loc48, #loc47])
#loc104 = loc(fused[#loc54, #loc55])
#loc105 = loc(fused[#loc56, #loc57])
#loc106 = loc(fused[#loc58, #loc59])
#loc107 = loc(fused[#loc61, #loc60])
#loc108 = loc(fused[#loc64, #loc65])
#loc109 = loc(fused[#loc62, #loc66])
#loc110 = loc(fused[#loc67, #loc66])
#loc111 = loc(fused[#loc68, #loc69])
#loc112 = loc(fused[#loc70, #loc71])
#loc113 = loc(fused[#loc73, #loc69])
