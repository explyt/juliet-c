!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc15 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":29:19)
#loc45 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":104:10)
#loc46 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":104:14)
#loc47 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":104:20)
#loc48 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":104:32)
#loc74 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":52:19)
#loc137 = loc(fused[#loc45, #loc46])
#loc138 = loc(fused[#loc47, #loc48])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_rand_multiply_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc118)
  cir.func private @printIntLine(!s32i) loc(#loc119)
  cir.func no_proto @CWE190_Integer_Overflow__short_rand_multiply_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc121)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc122)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc11)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc123)
    cir.br ^bb1 loc(#loc124)
  ^bb1:  // pred: ^bb0
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc15)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc15)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc15)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc15)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc15)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc15)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc15)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc15)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc15)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc15)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc15)
    cir.br ^bb4(%19 : !u32i) loc(#loc15)
  ^bb3:  // pred: ^bb1
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc15)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc15)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc15)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc15)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc15)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc15)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc15)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc15)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc15)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc15)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc15)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc15)
    cir.br ^bb4(%35 : !u32i) loc(#loc15)
  ^bb4(%36: !u32i loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":29:19)):  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc15)
  ^bb5:  // pred: ^bb4
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc15)
    %38 = cir.cast(integral, %37 : !s32i), !s16i loc(#loc15)
    cir.store %38, %1 : !s16i, !cir.ptr<!s16i> loc(#loc125)
    cir.br ^bb6 loc(#loc126)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc127)
  ^bb7:  // pred: ^bb6
    %39 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc21)
    %40 = cir.cast(integral, %39 : !s16i), !s32i loc(#loc21)
    %41 = cir.const #cir.int<0> : !s32i loc(#loc22)
    %42 = cir.cmp(gt, %40, %41) : !s32i, !cir.bool loc(#loc128)
    cir.brcond %42 ^bb8, ^bb9 loc(#loc129)
  ^bb8:  // pred: ^bb7
    %43 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc24)
    %44 = cir.cast(integral, %43 : !s16i), !s32i loc(#loc24)
    %45 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %46 = cir.binop(mul, %44, %45) nsw : !s32i loc(#loc24)
    %47 = cir.cast(integral, %46 : !s32i), !s16i loc(#loc24)
    cir.store %47, %0 : !s16i, !cir.ptr<!s16i> loc(#loc121)
    %48 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc25)
    %49 = cir.cast(integral, %48 : !s16i), !s32i loc(#loc25)
    cir.call @printIntLine(%49) : (!s32i) -> () loc(#loc26)
    cir.br ^bb9 loc(#loc20)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc20)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc6)
  } loc(#loc120)
  cir.func no_proto @CWE190_Integer_Overflow__short_rand_multiply_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc131)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc132)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc130)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc133)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc134)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc135)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc42)
  cir.func @main(%arg0: !s32i loc(fused[#loc45, #loc46]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc47, #loc48])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc137)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc138)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc44)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc49)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc49)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc50)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc51)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc51)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc52)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc39)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %8 = cir.get_global @CWE190_Integer_Overflow__short_rand_multiply_18_good : !cir.ptr<!cir.func<!void ()>> loc(#loc139)
    cir.call @CWE190_Integer_Overflow__short_rand_multiply_18_good() : () -> () loc(#loc54)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc40)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc41)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %13 = cir.get_global @CWE190_Integer_Overflow__short_rand_multiply_18_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc140)
    cir.call @CWE190_Integer_Overflow__short_rand_multiply_18_bad() : () -> () loc(#loc58)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc42)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc61)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc141)
    cir.return %17 : !s32i loc(#loc141)
  } loc(#loc136)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc63)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc143)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc144)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc70)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc70)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc145)
    cir.br ^bb1 loc(#loc146)
  ^bb1:  // pred: ^bb0
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc74)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc74)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc74)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc74)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc74)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc74)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc74)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc74)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc74)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc74)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc74)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc74)
    cir.br ^bb4(%19 : !u32i) loc(#loc74)
  ^bb3:  // pred: ^bb1
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc74)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc74)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc74)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc74)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc74)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc74)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc74)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc74)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc74)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc74)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc74)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc74)
    cir.br ^bb4(%35 : !u32i) loc(#loc74)
  ^bb4(%36: !u32i loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":52:19)):  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc74)
  ^bb5:  // pred: ^bb4
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc74)
    %38 = cir.cast(integral, %37 : !s32i), !s16i loc(#loc74)
    cir.store %38, %1 : !s16i, !cir.ptr<!s16i> loc(#loc147)
    cir.br ^bb6 loc(#loc148)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc149)
  ^bb7:  // pred: ^bb6
    %39 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc80)
    %40 = cir.cast(integral, %39 : !s16i), !s32i loc(#loc80)
    %41 = cir.const #cir.int<0> : !s32i loc(#loc81)
    %42 = cir.cmp(gt, %40, %41) : !s32i, !cir.bool loc(#loc150)
    cir.brcond %42 ^bb8, ^bb14 loc(#loc151)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc152)
  ^bb9:  // pred: ^bb8
    %43 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc85)
    %44 = cir.cast(integral, %43 : !s16i), !s32i loc(#loc85)
    %45 = cir.const #cir.int<32767> : !s32i loc(#loc86)
    %46 = cir.const #cir.int<2> : !s32i loc(#loc87)
    %47 = cir.binop(div, %45, %46) : !s32i loc(#loc153)
    %48 = cir.cmp(lt, %44, %47) : !s32i, !cir.bool loc(#loc154)
    cir.brcond %48 ^bb10, ^bb11 loc(#loc155)
  ^bb10:  // pred: ^bb9
    %49 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc92)
    %50 = cir.cast(integral, %49 : !s16i), !s32i loc(#loc92)
    %51 = cir.const #cir.int<2> : !s32i loc(#loc67)
    %52 = cir.binop(mul, %50, %51) nsw : !s32i loc(#loc92)
    %53 = cir.cast(integral, %52 : !s32i), !s16i loc(#loc92)
    cir.store %53, %0 : !s16i, !cir.ptr<!s16i> loc(#loc143)
    %54 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc93)
    %55 = cir.cast(integral, %54 : !s16i), !s32i loc(#loc93)
    cir.call @printIntLine(%55) : (!s32i) -> () loc(#loc94)
    cir.br ^bb12 loc(#loc90)
  ^bb11:  // pred: ^bb9
    %56 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc63)
    %57 = cir.cast(array_to_ptrdecay, %56 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%57) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    cir.br ^bb12 loc(#loc84)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc84)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc79)
  ^bb14:  // 2 preds: ^bb7, ^bb13
    cir.br ^bb15 loc(#loc79)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc65)
  } loc(#loc142)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc157)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc158)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc102)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc102)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc159)
    cir.br ^bb1 loc(#loc160)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<2> : !s32i loc(#loc106)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc106)
    cir.store %5, %1 : !s16i, !cir.ptr<!s16i> loc(#loc161)
    cir.br ^bb2 loc(#loc162)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc163)
  ^bb3:  // pred: ^bb2
    %6 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc112)
    %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc112)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc113)
    %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc164)
    cir.brcond %9 ^bb4, ^bb5 loc(#loc165)
  ^bb4:  // pred: ^bb3
    %10 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc115)
    %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc115)
    %12 = cir.const #cir.int<2> : !s32i loc(#loc99)
    %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc115)
    %14 = cir.cast(integral, %13 : !s32i), !s16i loc(#loc115)
    cir.store %14, %0 : !s16i, !cir.ptr<!s16i> loc(#loc157)
    %15 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc116)
    %16 = cir.cast(integral, %15 : !s16i), !s32i loc(#loc116)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc117)
    cir.br ^bb5 loc(#loc111)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc111)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc97)
  } loc(#loc156)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_rand_multiply_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":38:1)
#loc7 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":35:9)
#loc8 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":35:31)
#loc9 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":24:5)
#loc10 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":24:11)
#loc11 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":25:12)
#loc12 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":25:5)
#loc13 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":26:5)
#loc14 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":26:10)
#loc16 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":29:5)
#loc17 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":30:5)
#loc18 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":30:10)
#loc19 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":32:5)
#loc20 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":37:5)
#loc21 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":32:8)
#loc22 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":32:15)
#loc23 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":33:5)
#loc24 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":35:24)
#loc25 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":36:22)
#loc26 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":36:9)
#loc27 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":89:1)
#loc28 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":93:1)
#loc29 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":91:5)
#loc30 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":91:13)
#loc31 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":92:5)
#loc32 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":92:13)
#loc33 = loc("/usr/include/stdlib.h":575:1)
#loc34 = loc("/usr/include/stdlib.h":575:41)
#loc35 = loc("/usr/include/time.h":76:1)
#loc36 = loc("/usr/include/time.h":76:38)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":109:15)
#loc40 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":111:15)
#loc41 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":114:15)
#loc42 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":116:15)
#loc43 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":104:1)
#loc44 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":119:1)
#loc49 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":105:1)
#loc50 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":107:27)
#loc51 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":107:22)
#loc52 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":107:5)
#loc53 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":109:5)
#loc54 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":110:5)
#loc55 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":110:58)
#loc56 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":111:5)
#loc57 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":114:5)
#loc58 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":115:5)
#loc59 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":115:57)
#loc60 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":116:5)
#loc61 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":118:12)
#loc62 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":118:5)
#loc63 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":65:23)
#loc64 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":45:1)
#loc65 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":68:1)
#loc66 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":60:13)
#loc67 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":60:35)
#loc68 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":47:5)
#loc69 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":47:11)
#loc70 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":48:12)
#loc71 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":48:5)
#loc72 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":49:5)
#loc73 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":49:10)
#loc75 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":52:5)
#loc76 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":53:5)
#loc77 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":53:10)
#loc78 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":55:5)
#loc79 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":67:5)
#loc80 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":55:8)
#loc81 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":55:15)
#loc82 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":56:5)
#loc83 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":58:9)
#loc84 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":66:9)
#loc85 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":58:13)
#loc86 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":58:21)
#loc87 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":58:30)
#loc88 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":58:31)
#loc89 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":59:9)
#loc90 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":62:9)
#loc91 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":64:9)
#loc92 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":60:28)
#loc93 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":61:26)
#loc94 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":61:13)
#loc95 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":65:13)
#loc96 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":71:1)
#loc97 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":87:1)
#loc98 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":84:9)
#loc99 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":84:31)
#loc100 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":73:5)
#loc101 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":73:11)
#loc102 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":74:12)
#loc103 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":74:5)
#loc104 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":75:5)
#loc105 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":75:10)
#loc106 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":78:12)
#loc107 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":78:5)
#loc108 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":79:5)
#loc109 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":79:10)
#loc110 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":81:5)
#loc111 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":86:5)
#loc112 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":81:8)
#loc113 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":81:15)
#loc114 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":82:5)
#loc115 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":84:24)
#loc116 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":85:22)
#loc117 = loc("CWE190_Integer_Overflow__short_rand_multiply_18.c":85:9)
#loc118 = loc(fused[#loc1, #loc2])
#loc119 = loc(fused[#loc3, #loc4])
#loc120 = loc(fused[#loc5, #loc6])
#loc121 = loc(fused[#loc7, #loc8])
#loc122 = loc(fused[#loc9, #loc10])
#loc123 = loc(fused[#loc12, #loc11])
#loc124 = loc(fused[#loc13, #loc14])
#loc125 = loc(fused[#loc16, #loc15])
#loc126 = loc(fused[#loc17, #loc18])
#loc127 = loc(fused[#loc19, #loc20])
#loc128 = loc(fused[#loc21, #loc22])
#loc129 = loc(fused[#loc23, #loc20])
#loc130 = loc(fused[#loc27, #loc28])
#loc131 = loc(fused[#loc29, #loc30])
#loc132 = loc(fused[#loc31, #loc32])
#loc133 = loc(fused[#loc33, #loc34])
#loc134 = loc(fused[#loc35, #loc36])
#loc135 = loc(fused[#loc37, #loc38])
#loc136 = loc(fused[#loc43, #loc44])
#loc139 = loc(fused[#loc54, #loc55])
#loc140 = loc(fused[#loc58, #loc59])
#loc141 = loc(fused[#loc62, #loc61])
#loc142 = loc(fused[#loc64, #loc65])
#loc143 = loc(fused[#loc66, #loc67])
#loc144 = loc(fused[#loc68, #loc69])
#loc145 = loc(fused[#loc71, #loc70])
#loc146 = loc(fused[#loc72, #loc73])
#loc147 = loc(fused[#loc75, #loc74])
#loc148 = loc(fused[#loc76, #loc77])
#loc149 = loc(fused[#loc78, #loc79])
#loc150 = loc(fused[#loc80, #loc81])
#loc151 = loc(fused[#loc82, #loc79])
#loc152 = loc(fused[#loc83, #loc84])
#loc153 = loc(fused[#loc86, #loc87])
#loc154 = loc(fused[#loc85, #loc88])
#loc155 = loc(fused[#loc89, #loc90, #loc91, #loc84])
#loc156 = loc(fused[#loc96, #loc97])
#loc157 = loc(fused[#loc98, #loc99])
#loc158 = loc(fused[#loc100, #loc101])
#loc159 = loc(fused[#loc103, #loc102])
#loc160 = loc(fused[#loc104, #loc105])
#loc161 = loc(fused[#loc107, #loc106])
#loc162 = loc(fused[#loc108, #loc109])
#loc163 = loc(fused[#loc110, #loc111])
#loc164 = loc(fused[#loc112, #loc113])
#loc165 = loc(fused[#loc114, #loc111])
