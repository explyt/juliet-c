!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"shouldn't see this value\00" : !cir.array<!s8i x 25>> : !cir.array<!s8i x 25> {alignment = 1 : i64} loc(#loc1)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc109)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc4)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc110)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc112)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc113)
    cir.br ^bb1 loc(#loc114)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<6> : !s32i loc(#loc16)
    cir.br ^bb2 loc(#loc14)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb14 [
      6: ^bb4
    ] loc(#loc14)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc115)
  ^bb5:  // pred: ^bb4
    %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc1)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc1)
    cir.store %4, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc112)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %6 = cir.const #cir.int<3> : !s32i loc(#loc21)
    %7 = cir.binop(rem, %5, %6) : !s32i loc(#loc116)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    cir.br ^bb6 loc(#loc118)
  ^bb6:  // pred: ^bb5
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    cir.br ^bb7 loc(#loc24)
  ^bb7:  // pred: ^bb6
    cir.switch.flat %8 : !s32i, ^bb11 [
      0: ^bb9,
      1: ^bb10
    ] loc(#loc24)
  ^bb8:  // no predecessors
    cir.br ^bb9 loc(#loc27)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc4)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc4)
    cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc119)
    cir.br ^bb11 loc(#loc29)
  ^bb10:  // pred: ^bb7
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc5)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc5)
    cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc120)
    cir.br ^bb11 loc(#loc31)
  ^bb11:  // 3 preds: ^bb7, ^bb9, ^bb10
    cir.br ^bb12 loc(#loc25)
  ^bb12:  // pred: ^bb11
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc33)
    cir.br ^bb13 loc(#loc19)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc34)
  ^bb14:  // pred: ^bb2
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc8)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc8)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc35)
    cir.br ^bb15 loc(#loc36)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc15)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc10)
  } loc(#loc111)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc122)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc123)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc38)
  } loc(#loc121)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc125)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc126)
    cir.br ^bb1 loc(#loc127)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<5> : !s32i loc(#loc51)
    cir.br ^bb2 loc(#loc49)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc49)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc52)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %3 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc53)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    cir.br ^bb16 loc(#loc55)
  ^bb5:  // pred: ^bb2
    cir.br ^bb6 loc(#loc128)
  ^bb6:  // pred: ^bb5
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc46)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc46)
    cir.store %6, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc125)
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
    %8 = cir.const #cir.int<3> : !s32i loc(#loc59)
    %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc129)
    cir.store %9, %1 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    cir.br ^bb7 loc(#loc131)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    cir.br ^bb8 loc(#loc62)
  ^bb8:  // pred: ^bb7
    cir.switch.flat %10 : !s32i, ^bb12 [
      0: ^bb10,
      1: ^bb11
    ] loc(#loc62)
  ^bb9:  // no predecessors
    cir.br ^bb10 loc(#loc65)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc66)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc66)
    cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc132)
    cir.br ^bb13 loc(#loc68)
  ^bb11:  // pred: ^bb8
    %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc69)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc69)
    cir.store %14, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc133)
    cir.br ^bb13 loc(#loc71)
  ^bb12:  // pred: ^bb8
    cir.return loc(#loc72)
  ^bb13:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb14 loc(#loc63)
  ^bb14:  // pred: ^bb13
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    cir.br ^bb15 loc(#loc57)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc75)
  ^bb16:  // 2 preds: ^bb4, ^bb15
    cir.br ^bb17 loc(#loc50)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc44)
  } loc(#loc124)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc135)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc136)
    cir.br ^bb1 loc(#loc137)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<6> : !s32i loc(#loc84)
    cir.br ^bb2 loc(#loc82)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb15 [
      6: ^bb4
    ] loc(#loc82)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc85)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc138)
  ^bb5:  // pred: ^bb4
    %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc79)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc79)
    cir.store %4, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc135)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %6 = cir.const #cir.int<3> : !s32i loc(#loc89)
    %7 = cir.binop(rem, %5, %6) : !s32i loc(#loc139)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    cir.br ^bb6 loc(#loc141)
  ^bb6:  // pred: ^bb5
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    cir.br ^bb7 loc(#loc92)
  ^bb7:  // pred: ^bb6
    cir.switch.flat %8 : !s32i, ^bb11 [
      0: ^bb9,
      1: ^bb10
    ] loc(#loc92)
  ^bb8:  // no predecessors
    cir.br ^bb9 loc(#loc95)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc96)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc96)
    cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc142)
    cir.br ^bb12 loc(#loc98)
  ^bb10:  // pred: ^bb7
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc99)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc99)
    cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc143)
    cir.br ^bb12 loc(#loc101)
  ^bb11:  // pred: ^bb7
    cir.return loc(#loc102)
  ^bb12:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb13 loc(#loc93)
  ^bb13:  // pred: ^bb12
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc103)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc104)
    cir.br ^bb14 loc(#loc87)
  ^bb14:  // pred: ^bb13
    cir.br ^bb16 loc(#loc105)
  ^bb15:  // pred: ^bb2
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc106)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc106)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc107)
    cir.br ^bb16 loc(#loc108)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc83)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc77)
  } loc(#loc134)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_15.c":0:0)
#loc1 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":26:34)
#loc2 = loc("/usr/include/stdlib.h":573:1)
#loc3 = loc("/usr/include/stdlib.h":573:24)
#loc4 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":32:26)
#loc5 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":35:26)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":44:19)
#loc9 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":20:1)
#loc10 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":47:1)
#loc11 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":26:9)
#loc12 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":27:9)
#loc13 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":27:13)
#loc14 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":22:5)
#loc15 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":46:5)
#loc16 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":22:12)
#loc17 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":24:5)
#loc18 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":25:5)
#loc19 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":40:5)
#loc20 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":28:14)
#loc21 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":28:23)
#loc22 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":28:9)
#loc23 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":28:24)
#loc24 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":29:9)
#loc25 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":38:9)
#loc26 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":29:17)
#loc27 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":31:9)
#loc28 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":32:13)
#loc29 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":33:13)
#loc30 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":35:13)
#loc31 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":36:13)
#loc32 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":39:19)
#loc33 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":39:9)
#loc34 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":41:5)
#loc35 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":44:9)
#loc36 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":45:9)
#loc37 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":117:1)
#loc38 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":121:1)
#loc39 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":119:5)
#loc40 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":119:11)
#loc41 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":120:5)
#loc42 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":120:11)
#loc43 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":54:1)
#loc44 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":83:1)
#loc45 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":64:9)
#loc46 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":64:34)
#loc47 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":65:9)
#loc48 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":65:13)
#loc49 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":56:5)
#loc50 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":82:5)
#loc51 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":56:12)
#loc52 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":58:5)
#loc53 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":60:19)
#loc54 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":60:9)
#loc55 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":61:9)
#loc56 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":63:5)
#loc57 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":80:5)
#loc58 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":66:14)
#loc59 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":66:23)
#loc60 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":66:9)
#loc61 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":66:24)
#loc62 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":67:9)
#loc63 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":78:9)
#loc64 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":67:17)
#loc65 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":69:9)
#loc66 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":70:26)
#loc67 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":70:13)
#loc68 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":71:13)
#loc69 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":73:26)
#loc70 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":73:13)
#loc71 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":74:13)
#loc72 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":77:13)
#loc73 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":79:19)
#loc74 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":79:9)
#loc75 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":81:5)
#loc76 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":86:1)
#loc77 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":115:1)
#loc78 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":92:9)
#loc79 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":92:34)
#loc80 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":93:9)
#loc81 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":93:13)
#loc82 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":88:5)
#loc83 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":114:5)
#loc84 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":88:12)
#loc85 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":90:5)
#loc86 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":91:5)
#loc87 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":108:5)
#loc88 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":94:14)
#loc89 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":94:23)
#loc90 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":94:9)
#loc91 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":94:24)
#loc92 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":95:9)
#loc93 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":106:9)
#loc94 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":95:17)
#loc95 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":97:9)
#loc96 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":98:26)
#loc97 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":98:13)
#loc98 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":99:13)
#loc99 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":101:26)
#loc100 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":101:13)
#loc101 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":102:13)
#loc102 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":105:13)
#loc103 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":107:19)
#loc104 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":107:9)
#loc105 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":109:5)
#loc106 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":112:19)
#loc107 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":112:9)
#loc108 = loc("CWE478_Missing_Default_Case_in_Switch__basic_15.c":113:9)
#loc109 = loc(fused[#loc2, #loc3])
#loc110 = loc(fused[#loc6, #loc7])
#loc111 = loc(fused[#loc9, #loc10])
#loc112 = loc(fused[#loc11, #loc1])
#loc113 = loc(fused[#loc12, #loc13])
#loc114 = loc(fused[#loc14, #loc15])
#loc115 = loc(fused[#loc18, #loc19])
#loc116 = loc(fused[#loc20, #loc21])
#loc117 = loc(fused[#loc22, #loc23])
#loc118 = loc(fused[#loc24, #loc25])
#loc119 = loc(fused[#loc28, #loc4])
#loc120 = loc(fused[#loc30, #loc5])
#loc121 = loc(fused[#loc37, #loc38])
#loc122 = loc(fused[#loc39, #loc40])
#loc123 = loc(fused[#loc41, #loc42])
#loc124 = loc(fused[#loc43, #loc44])
#loc125 = loc(fused[#loc45, #loc46])
#loc126 = loc(fused[#loc47, #loc48])
#loc127 = loc(fused[#loc49, #loc50])
#loc128 = loc(fused[#loc56, #loc57])
#loc129 = loc(fused[#loc58, #loc59])
#loc130 = loc(fused[#loc60, #loc61])
#loc131 = loc(fused[#loc62, #loc63])
#loc132 = loc(fused[#loc67, #loc66])
#loc133 = loc(fused[#loc70, #loc69])
#loc134 = loc(fused[#loc76, #loc77])
#loc135 = loc(fused[#loc78, #loc79])
#loc136 = loc(fused[#loc80, #loc81])
#loc137 = loc(fused[#loc82, #loc83])
#loc138 = loc(fused[#loc86, #loc87])
#loc139 = loc(fused[#loc88, #loc89])
#loc140 = loc(fused[#loc90, #loc91])
#loc141 = loc(fused[#loc92, #loc93])
#loc142 = loc(fused[#loc97, #loc96])
#loc143 = loc(fused[#loc100, #loc99])
