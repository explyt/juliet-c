!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":164:10)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":164:14)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":164:20)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":164:32)
#loc213 = loc(fused[#loc50, #loc51])
#loc214 = loc(fused[#loc52, #loc53])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc191)
  cir.func private @printUnsignedLine(!u32i) loc(#loc192)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_square_10_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc194)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc9)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc195)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc191)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc13)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc15)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc15)
        %8 = cir.const #cir.int<2> : !u32i loc(#loc15)
        %9 = cir.binop(mul, %7, %8) : !u32i loc(#loc15)
        %10 = cir.const #cir.int<1> : !u32i loc(#loc15)
        %11 = cir.binop(add, %9, %10) : !u32i loc(#loc15)
        cir.store %11, %0 : !u32i, !cir.ptr<!u32i> loc(#loc198)
      } loc(#loc197)
    } loc(#loc196)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc191)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc202)
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc25)
          %8 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc24)
          %9 = cir.binop(mul, %7, %8) : !u32i loc(#loc203)
          cir.store %9, %6 : !u32i, !cir.ptr<!u32i> loc(#loc202)
          %10 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc26)
          cir.call @printUnsignedLine(%10) : (!u32i) -> () loc(#loc27)
        } loc(#loc201)
      } loc(#loc200)
    } loc(#loc199)
    cir.return loc(#loc6)
  } loc(#loc193)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_square_10_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc205)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc206)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc29)
  } loc(#loc204)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc209)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc210)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc211)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc47)
  cir.func @main(%arg0: !s32i loc(fused[#loc50, #loc51]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc52, #loc53])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc213)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc214)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc49)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc54)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc54)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc55)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc56)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc56)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc57)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc44)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %8 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_max_square_10_good : !cir.ptr<!cir.func<!void ()>> loc(#loc215)
    cir.call @CWE190_Integer_Overflow__unsigned_int_max_square_10_good() : () -> () loc(#loc59)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc45)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc46)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %13 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_max_square_10_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc216)
    cir.call @CWE190_Integer_Overflow__unsigned_int_max_square_10_bad() : () -> () loc(#loc63)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc47)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc66)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc217)
    cir.return %17 : !s32i loc(#loc217)
  } loc(#loc212)
  cir.global "private" external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc218)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc70)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc72)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc220)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc77)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc77)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc221)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc191)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc81)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc81)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc83)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc83)
        %8 = cir.const #cir.int<2> : !u32i loc(#loc83)
        %9 = cir.binop(mul, %7, %8) : !u32i loc(#loc83)
        %10 = cir.const #cir.int<1> : !u32i loc(#loc83)
        %11 = cir.binop(add, %9, %10) : !u32i loc(#loc83)
        cir.store %11, %0 : !u32i, !cir.ptr<!u32i> loc(#loc224)
      } loc(#loc223)
    } loc(#loc222)
    cir.scope {
      %3 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc218)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc87)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc87)
      cir.if %5 {
        %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc70)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc70)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc91)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc94)
          %7 = cir.cast(integral, %6 : !u32i), !s64i loc(#loc94)
          %8 = cir.cast(integral, %7 : !s64i), !s32i loc(#loc94)
          %9 = cir.abs %8 poison : !s32i loc(#loc95)
          %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc95)
          %11 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc96)
          %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc97)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc97)
          %14 = cir.const #cir.int<2> : !u32i loc(#loc97)
          %15 = cir.binop(mul, %13, %14) : !u32i loc(#loc97)
          %16 = cir.const #cir.int<1> : !u32i loc(#loc97)
          %17 = cir.binop(add, %15, %16) : !u32i loc(#loc97)
          %18 = cir.cast(int_to_float, %17 : !u32i), !cir.double loc(#loc97)
          %19 = cir.call @sqrt(%18) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc96)
          %20 = cir.cast(float_to_int, %19 : !cir.double), !s64i loc(#loc96)
          %21 = cir.cmp(lt, %10, %20) : !s64i, !cir.bool loc(#loc228)
          cir.if %21 {
            %22 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc230)
            %23 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc104)
            %24 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc103)
            %25 = cir.binop(mul, %23, %24) : !u32i loc(#loc231)
            cir.store %25, %22 : !u32i, !cir.ptr<!u32i> loc(#loc230)
            %26 = cir.load %22 : !cir.ptr<!u32i>, !u32i loc(#loc105)
            cir.call @printUnsignedLine(%26) : (!u32i) -> () loc(#loc106)
          } else {
            %22 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc72)
            %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc72)
            cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc107)
          } loc(#loc229)
        } loc(#loc227)
      } loc(#loc226)
    } loc(#loc225)
    cir.return loc(#loc74)
  } loc(#loc219)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc233)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc112)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc112)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc234)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc191)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc116)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc116)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc118)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc118)
        %8 = cir.const #cir.int<2> : !u32i loc(#loc118)
        %9 = cir.binop(mul, %7, %8) : !u32i loc(#loc118)
        %10 = cir.const #cir.int<1> : !u32i loc(#loc118)
        %11 = cir.binop(add, %9, %10) : !u32i loc(#loc118)
        cir.store %11, %0 : !u32i, !cir.ptr<!u32i> loc(#loc237)
      } loc(#loc236)
    } loc(#loc235)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc191)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc122)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc122)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc126)
          %7 = cir.cast(integral, %6 : !u32i), !s64i loc(#loc126)
          %8 = cir.cast(integral, %7 : !s64i), !s32i loc(#loc126)
          %9 = cir.abs %8 poison : !s32i loc(#loc127)
          %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc127)
          %11 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc128)
          %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc129)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc129)
          %14 = cir.const #cir.int<2> : !u32i loc(#loc129)
          %15 = cir.binop(mul, %13, %14) : !u32i loc(#loc129)
          %16 = cir.const #cir.int<1> : !u32i loc(#loc129)
          %17 = cir.binop(add, %15, %16) : !u32i loc(#loc129)
          %18 = cir.cast(int_to_float, %17 : !u32i), !cir.double loc(#loc129)
          %19 = cir.call @sqrt(%18) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc128)
          %20 = cir.cast(float_to_int, %19 : !cir.double), !s64i loc(#loc128)
          %21 = cir.cmp(lt, %10, %20) : !s64i, !cir.bool loc(#loc241)
          cir.if %21 {
            %22 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc243)
            %23 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc136)
            %24 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc135)
            %25 = cir.binop(mul, %23, %24) : !u32i loc(#loc244)
            cir.store %25, %22 : !u32i, !cir.ptr<!u32i> loc(#loc243)
            %26 = cir.load %22 : !cir.ptr<!u32i>, !u32i loc(#loc137)
            cir.call @printUnsignedLine(%26) : (!u32i) -> () loc(#loc138)
          } else {
            %22 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc139)
            %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc139)
            cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc140)
          } loc(#loc242)
        } loc(#loc240)
      } loc(#loc239)
    } loc(#loc238)
    cir.return loc(#loc109)
  } loc(#loc232)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc246)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc145)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc145)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc247)
    cir.scope {
      %3 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc218)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc149)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc149)
      cir.if %5 {
        %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc153)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc153)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc154)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc155)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc155)
        cir.store %7, %0 : !u32i, !cir.ptr<!u32i> loc(#loc250)
      } loc(#loc249)
    } loc(#loc248)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc191)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc159)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc159)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc254)
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc165)
          %8 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc164)
          %9 = cir.binop(mul, %7, %8) : !u32i loc(#loc255)
          cir.store %9, %6 : !u32i, !cir.ptr<!u32i> loc(#loc254)
          %10 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc166)
          cir.call @printUnsignedLine(%10) : (!u32i) -> () loc(#loc167)
        } loc(#loc253)
      } loc(#loc252)
    } loc(#loc251)
    cir.return loc(#loc142)
  } loc(#loc245)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc257)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc172)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc172)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc258)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc191)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc176)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc176)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc178)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc178)
        cir.store %7, %0 : !u32i, !cir.ptr<!u32i> loc(#loc261)
      } loc(#loc260)
    } loc(#loc259)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc191)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc182)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc182)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc265)
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc188)
          %8 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc187)
          %9 = cir.binop(mul, %7, %8) : !u32i loc(#loc266)
          cir.store %9, %6 : !u32i, !cir.ptr<!u32i> loc(#loc265)
          %10 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc189)
          cir.call @printUnsignedLine(%10) : (!u32i) -> () loc(#loc190)
        } loc(#loc264)
      } loc(#loc263)
    } loc(#loc262)
    cir.return loc(#loc169)
  } loc(#loc256)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_10.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":116:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":116:12)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":24:1)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":41:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":26:5)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":26:18)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":27:12)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":27:5)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":28:5)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":32:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":28:8)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":29:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":31:16)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":31:9)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":33:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":40:5)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":33:8)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":34:5)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":35:9)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":39:9)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":37:13)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":37:42)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":37:35)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":38:31)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":38:13)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":147:1)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":153:1)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":149:5)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":149:14)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":150:5)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":150:14)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":151:5)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":151:14)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":152:5)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":152:14)
#loc38 = loc("/usr/include/stdlib.h":575:1)
#loc39 = loc("/usr/include/stdlib.h":575:41)
#loc40 = loc("/usr/include/time.h":76:1)
#loc41 = loc("/usr/include/time.h":76:38)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":169:15)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":171:15)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":174:15)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":176:15)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":164:1)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":179:1)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":165:1)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":167:27)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":167:22)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":167:5)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":169:5)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":170:5)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":170:62)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":171:5)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":174:5)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":175:5)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":175:61)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":176:5)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":178:12)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":178:5)
#loc68 = loc("../../../testcasesupport/std_testcase.h":117:1)
#loc69 = loc("../../../testcasesupport/std_testcase.h":117:12)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":60:19)
#loc71 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":72:23)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":48:1)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":75:1)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":50:5)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":50:18)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":51:12)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":51:5)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":52:5)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":56:5)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":52:8)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":53:5)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":55:16)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":55:9)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":57:5)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":74:5)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":57:8)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":58:5)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":61:5)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":63:5)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":60:9)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":65:9)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":73:9)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":65:23)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":65:13)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":65:37)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":65:50)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":65:58)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":66:9)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":69:9)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":71:9)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":67:13)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":67:42)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":67:35)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":68:31)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":68:13)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":72:13)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":78:1)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":100:1)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":80:5)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":80:18)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":81:12)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":81:5)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":82:5)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":86:5)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":82:8)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":83:5)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":85:16)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":85:9)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":87:5)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":99:5)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":87:8)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":88:5)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":90:9)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":98:9)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":90:23)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":90:13)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":90:37)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":90:50)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":90:58)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":91:9)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":94:9)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":96:9)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":92:13)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":92:42)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":92:35)
#loc137 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":93:31)
#loc138 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":93:13)
#loc139 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":97:23)
#loc140 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":97:13)
#loc141 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":103:1)
#loc142 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":125:1)
#loc143 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":105:5)
#loc144 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":105:18)
#loc145 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":106:12)
#loc146 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":106:5)
#loc147 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":107:5)
#loc148 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":116:5)
#loc149 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":107:8)
#loc150 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":108:5)
#loc151 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":111:5)
#loc152 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":113:5)
#loc153 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":110:19)
#loc154 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":110:9)
#loc155 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":115:16)
#loc156 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":115:9)
#loc157 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":117:5)
#loc158 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":124:5)
#loc159 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":117:8)
#loc160 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":118:5)
#loc161 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":119:9)
#loc162 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":123:9)
#loc163 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":121:13)
#loc164 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":121:42)
#loc165 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":121:35)
#loc166 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":122:31)
#loc167 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":122:13)
#loc168 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":128:1)
#loc169 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":145:1)
#loc170 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":130:5)
#loc171 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":130:18)
#loc172 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":131:12)
#loc173 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":131:5)
#loc174 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":132:5)
#loc175 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":136:5)
#loc176 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":132:8)
#loc177 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":133:5)
#loc178 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":135:16)
#loc179 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":135:9)
#loc180 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":137:5)
#loc181 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":144:5)
#loc182 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":137:8)
#loc183 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":138:5)
#loc184 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":139:9)
#loc185 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":143:9)
#loc186 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":141:13)
#loc187 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":141:42)
#loc188 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":141:35)
#loc189 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":142:31)
#loc190 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_10.c":142:13)
#loc191 = loc(fused[#loc1, #loc2])
#loc192 = loc(fused[#loc3, #loc4])
#loc193 = loc(fused[#loc5, #loc6])
#loc194 = loc(fused[#loc7, #loc8])
#loc195 = loc(fused[#loc10, #loc9])
#loc196 = loc(fused[#loc11, #loc12])
#loc197 = loc(fused[#loc14, #loc12])
#loc198 = loc(fused[#loc16, #loc15])
#loc199 = loc(fused[#loc17, #loc18])
#loc200 = loc(fused[#loc20, #loc18])
#loc201 = loc(fused[#loc21, #loc22])
#loc202 = loc(fused[#loc23, #loc24])
#loc203 = loc(fused[#loc25, #loc24])
#loc204 = loc(fused[#loc28, #loc29])
#loc205 = loc(fused[#loc30, #loc31])
#loc206 = loc(fused[#loc32, #loc33])
#loc207 = loc(fused[#loc34, #loc35])
#loc208 = loc(fused[#loc36, #loc37])
#loc209 = loc(fused[#loc38, #loc39])
#loc210 = loc(fused[#loc40, #loc41])
#loc211 = loc(fused[#loc42, #loc43])
#loc212 = loc(fused[#loc48, #loc49])
#loc215 = loc(fused[#loc59, #loc60])
#loc216 = loc(fused[#loc63, #loc64])
#loc217 = loc(fused[#loc67, #loc66])
#loc218 = loc(fused[#loc68, #loc69])
#loc219 = loc(fused[#loc73, #loc74])
#loc220 = loc(fused[#loc75, #loc76])
#loc221 = loc(fused[#loc78, #loc77])
#loc222 = loc(fused[#loc79, #loc80])
#loc223 = loc(fused[#loc82, #loc80])
#loc224 = loc(fused[#loc84, #loc83])
#loc225 = loc(fused[#loc85, #loc86])
#loc226 = loc(fused[#loc88, #loc89, #loc90, #loc86])
#loc227 = loc(fused[#loc92, #loc93])
#loc228 = loc(fused[#loc95, #loc98])
#loc229 = loc(fused[#loc99, #loc100, #loc101, #loc93])
#loc230 = loc(fused[#loc102, #loc103])
#loc231 = loc(fused[#loc104, #loc103])
#loc232 = loc(fused[#loc108, #loc109])
#loc233 = loc(fused[#loc110, #loc111])
#loc234 = loc(fused[#loc113, #loc112])
#loc235 = loc(fused[#loc114, #loc115])
#loc236 = loc(fused[#loc117, #loc115])
#loc237 = loc(fused[#loc119, #loc118])
#loc238 = loc(fused[#loc120, #loc121])
#loc239 = loc(fused[#loc123, #loc121])
#loc240 = loc(fused[#loc124, #loc125])
#loc241 = loc(fused[#loc127, #loc130])
#loc242 = loc(fused[#loc131, #loc132, #loc133, #loc125])
#loc243 = loc(fused[#loc134, #loc135])
#loc244 = loc(fused[#loc136, #loc135])
#loc245 = loc(fused[#loc141, #loc142])
#loc246 = loc(fused[#loc143, #loc144])
#loc247 = loc(fused[#loc146, #loc145])
#loc248 = loc(fused[#loc147, #loc148])
#loc249 = loc(fused[#loc150, #loc151, #loc152, #loc148])
#loc250 = loc(fused[#loc156, #loc155])
#loc251 = loc(fused[#loc157, #loc158])
#loc252 = loc(fused[#loc160, #loc158])
#loc253 = loc(fused[#loc161, #loc162])
#loc254 = loc(fused[#loc163, #loc164])
#loc255 = loc(fused[#loc165, #loc164])
#loc256 = loc(fused[#loc168, #loc169])
#loc257 = loc(fused[#loc170, #loc171])
#loc258 = loc(fused[#loc173, #loc172])
#loc259 = loc(fused[#loc174, #loc175])
#loc260 = loc(fused[#loc177, #loc175])
#loc261 = loc(fused[#loc179, #loc178])
#loc262 = loc(fused[#loc180, #loc181])
#loc263 = loc(fused[#loc183, #loc181])
#loc264 = loc(fused[#loc184, #loc185])
#loc265 = loc(fused[#loc186, #loc187])
#loc266 = loc(fused[#loc188, #loc187])
