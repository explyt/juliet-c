!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":24:21)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":24:34)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":66:25)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":66:38)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":47:25)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":47:38)
#loc98 = loc(fused[#loc10, #loc11])
#loc110 = loc(fused[#loc42, #loc43])
#loc120 = loc(fused[#loc74, #loc75])
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc94)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc95)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%u\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printUnsignedLine(!u32i) loc(#loc96)
  cir.func internal private @badSink(%arg0: !u32i loc(fused[#loc10, #loc11])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc99)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc98)
    cir.store %arg0, %1 : !u32i, !cir.ptr<!u32i> loc(#loc14)
    cir.br ^bb1 loc(#loc100)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc17)
    %3 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc13)
    %4 = cir.binop(mul, %2, %3) : !u32i loc(#loc101)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc99)
    %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc18)
    cir.call @printUnsignedLine(%5) : (!u32i) -> () loc(#loc19)
    cir.br ^bb2 loc(#loc16)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc9)
  } loc(#loc97)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_fscanf_square_41_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc103)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc24)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc24)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc104)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc26)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc95)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc27)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc26)
    %9 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc28)
    cir.call @badSink(%9) : (!u32i) -> () loc(#loc29)
    cir.return loc(#loc21)
  } loc(#loc102)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_fscanf_square_41_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc106)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc107)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc105)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc36)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc108)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc39)
  cir.func internal private @goodB2GSink(%arg0: !u32i loc(fused[#loc42, #loc43])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc111)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc110)
    cir.store %arg0, %1 : !u32i, !cir.ptr<!u32i> loc(#loc46)
    cir.br ^bb1 loc(#loc112)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc49)
    %3 = cir.cast(integral, %2 : !u32i), !s64i loc(#loc49)
    %4 = cir.cast(integral, %3 : !s64i), !s32i loc(#loc49)
    %5 = cir.abs %4 poison : !s32i loc(#loc50)
    %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc50)
    %7 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc51)
    %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc52)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc52)
    %10 = cir.const #cir.int<2> : !u32i loc(#loc52)
    %11 = cir.binop(mul, %9, %10) : !u32i loc(#loc52)
    %12 = cir.const #cir.int<1> : !u32i loc(#loc52)
    %13 = cir.binop(add, %11, %12) : !u32i loc(#loc52)
    %14 = cir.cast(int_to_float, %13 : !u32i), !cir.double loc(#loc52)
    %15 = cir.call @sqrt(%14) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc51)
    %16 = cir.cast(float_to_int, %15 : !cir.double), !s64i loc(#loc51)
    %17 = cir.cmp(lt, %6, %16) : !s64i, !cir.bool loc(#loc113)
    cir.brcond %17 ^bb2, ^bb3 loc(#loc114)
  ^bb2:  // pred: ^bb1
    %18 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc57)
    %19 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc45)
    %20 = cir.binop(mul, %18, %19) : !u32i loc(#loc115)
    cir.store %20, %0 : !u32i, !cir.ptr<!u32i> loc(#loc111)
    %21 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc58)
    cir.call @printUnsignedLine(%21) : (!u32i) -> () loc(#loc59)
    cir.br ^bb4 loc(#loc55)
  ^bb3:  // pred: ^bb1
    %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc39)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    cir.br ^bb4 loc(#loc48)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc48)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc41)
  } loc(#loc109)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc117)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc65)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc65)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc118)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc67)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc95)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc68)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc69)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc69)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc67)
    %9 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc70)
    cir.call @goodB2GSink(%9) : (!u32i) -> () loc(#loc71)
    cir.return loc(#loc62)
  } loc(#loc116)
  cir.func internal private @goodG2BSink(%arg0: !u32i loc(fused[#loc74, #loc75])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc121)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc120)
    cir.store %arg0, %1 : !u32i, !cir.ptr<!u32i> loc(#loc78)
    cir.br ^bb1 loc(#loc122)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc81)
    %3 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc77)
    %4 = cir.binop(mul, %2, %3) : !u32i loc(#loc123)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc121)
    %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc82)
    cir.call @printUnsignedLine(%5) : (!u32i) -> () loc(#loc83)
    cir.br ^bb2 loc(#loc80)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc73)
  } loc(#loc119)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc125)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc88)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc88)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc126)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc90)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc90)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc127)
    %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc92)
    cir.call @goodG2BSink(%5) : (!u32i) -> () loc(#loc93)
    cir.return loc(#loc85)
  } loc(#loc124)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":38:20)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":24:1)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":31:1)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":28:9)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":28:38)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":25:1)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":26:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":30:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":28:31)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":29:27)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":29:9)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":33:1)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":40:1)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":35:5)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":35:18)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":36:12)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":36:5)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":38:5)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":38:13)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":39:13)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":39:5)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":89:1)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":93:1)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":91:5)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":91:13)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":92:5)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":92:13)
#loc36 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":76:19)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":66:1)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":78:1)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":71:9)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":71:38)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":67:1)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":69:5)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":77:5)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":69:19)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":69:9)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":69:33)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":69:46)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":69:54)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":70:5)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":73:5)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":75:5)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":71:31)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":72:27)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":72:9)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":76:9)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":80:1)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":87:1)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":82:5)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":82:18)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":83:12)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":83:5)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":85:5)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":85:13)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":85:20)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":86:17)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":86:5)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":47:1)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":54:1)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":51:9)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":51:38)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":48:1)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":49:5)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":53:5)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":51:31)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":52:27)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":52:9)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":56:1)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":63:1)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":58:5)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":58:18)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":59:12)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":59:5)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":61:12)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":61:5)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":62:17)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c":62:5)
#loc94 = loc(fused[#loc1, #loc2])
#loc95 = loc(fused[#loc3, #loc4])
#loc96 = loc(fused[#loc6, #loc7])
#loc97 = loc(fused[#loc8, #loc9])
#loc99 = loc(fused[#loc12, #loc13])
#loc100 = loc(fused[#loc15, #loc16])
#loc101 = loc(fused[#loc17, #loc13])
#loc102 = loc(fused[#loc20, #loc21])
#loc103 = loc(fused[#loc22, #loc23])
#loc104 = loc(fused[#loc25, #loc24])
#loc105 = loc(fused[#loc30, #loc31])
#loc106 = loc(fused[#loc32, #loc33])
#loc107 = loc(fused[#loc34, #loc35])
#loc108 = loc(fused[#loc37, #loc38])
#loc109 = loc(fused[#loc40, #loc41])
#loc111 = loc(fused[#loc44, #loc45])
#loc112 = loc(fused[#loc47, #loc48])
#loc113 = loc(fused[#loc50, #loc53])
#loc114 = loc(fused[#loc54, #loc55, #loc56, #loc48])
#loc115 = loc(fused[#loc57, #loc45])
#loc116 = loc(fused[#loc61, #loc62])
#loc117 = loc(fused[#loc63, #loc64])
#loc118 = loc(fused[#loc66, #loc65])
#loc119 = loc(fused[#loc72, #loc73])
#loc121 = loc(fused[#loc76, #loc77])
#loc122 = loc(fused[#loc79, #loc80])
#loc123 = loc(fused[#loc81, #loc77])
#loc124 = loc(fused[#loc84, #loc85])
#loc125 = loc(fused[#loc86, #loc87])
#loc126 = loc(fused[#loc89, #loc88])
#loc127 = loc(fused[#loc91, #loc90])
