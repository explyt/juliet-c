!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const.goodG2B.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc127)
  cir.global "private" constant cir_private @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18_bad.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc128)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc129)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc130)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc131)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc132)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc133)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc135)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc19)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc136)
    cir.goto "source" loc(#loc137)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc23)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc24)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc25)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc25)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc138)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc139)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc140)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc141)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc33)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc143)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc35)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc36)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc37)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc35)
      } loc(#loc144)
    } loc(#loc142)
    cir.scope {
      %9 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc128)
      %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc146)
      %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc147)
      %12 = cir.get_global @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18_bad.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc128)
      cir.copy %12 to %9 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc128)
      %13 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc43)
      %14 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc44)
      %15 = cir.call @strlen(%14) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc43)
      cir.store %15, %11 : !u64i, !cir.ptr<!u64i> loc(#loc148)
      cir.scope {
        %20 = cir.const #cir.int<0> : !s32i loc(#loc49)
        %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc49)
        cir.store %21, %10 : !u64i, !cir.ptr<!u64i> loc(#loc150)
        cir.for : cond {
          %22 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc51)
          %23 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc52)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc53)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc53)
          %26 = cir.binop(add, %23, %25) : !u64i loc(#loc151)
          %27 = cir.cmp(lt, %22, %26) : !u64i, !cir.bool loc(#loc152)
          cir.condition(%27) loc(#loc54)
        } body {
          cir.scope {
            %22 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc56)
            %23 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc57)
            %24 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %22 : !u64i), !cir.ptr<!s8i> loc(#loc57)
            %25 = cir.load %24 : !cir.ptr<!s8i>, !s8i loc(#loc57)
            %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc58)
            %27 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc59)
            %28 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %27 : !u64i), !cir.ptr<!s8i> loc(#loc60)
            cir.store %25, %28 : !s8i, !cir.ptr<!s8i> loc(#loc154)
          } loc(#loc153)
          cir.yield loc(#loc48)
        } step {
          %22 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc62)
          %23 = cir.unary(inc, %22) : !u64i, !u64i loc(#loc63)
          cir.store %23, %10 : !u64i, !cir.ptr<!u64i> loc(#loc155)
          cir.yield loc(#loc149)
        } loc(#loc149)
      } loc(#loc149)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
      cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc65)
      %17 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc66)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc67)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc67)
      cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc66)
    } loc(#loc145)
    cir.return loc(#loc16)
  } loc(#loc134)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc157)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc70)
    cir.return loc(#loc69)
  } loc(#loc156)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc159)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc76)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc160)
    cir.goto "source" loc(#loc161)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc80)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc81)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc82)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc82)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc82)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc162)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc163)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc81)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc164)
    cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc165)
    cir.scope {
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc91)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc92)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc92)
      %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc167)
      cir.if %14 {
        %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc94)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc95)
        %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc96)
        cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc94)
      } loc(#loc168)
    } loc(#loc166)
    cir.scope {
      %11 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc127)
      %12 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc170)
      %13 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc171)
      %14 = cir.get_global @__const.goodG2B.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc127)
      cir.copy %14 to %11 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc127)
      %15 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc102)
      %16 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc103)
      %17 = cir.call @strlen(%16) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc102)
      cir.store %17, %13 : !u64i, !cir.ptr<!u64i> loc(#loc172)
      cir.scope {
        %22 = cir.const #cir.int<0> : !s32i loc(#loc108)
        %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc108)
        cir.store %23, %12 : !u64i, !cir.ptr<!u64i> loc(#loc174)
        cir.for : cond {
          %24 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc110)
          %25 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc111)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc112)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc112)
          %28 = cir.binop(add, %25, %27) : !u64i loc(#loc175)
          %29 = cir.cmp(lt, %24, %28) : !u64i, !cir.bool loc(#loc176)
          cir.condition(%29) loc(#loc113)
        } body {
          cir.scope {
            %24 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc115)
            %25 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc116)
            %26 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %24 : !u64i), !cir.ptr<!s8i> loc(#loc116)
            %27 = cir.load %26 : !cir.ptr<!s8i>, !s8i loc(#loc116)
            %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc117)
            %29 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc118)
            %30 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc119)
            cir.store %27, %30 : !s8i, !cir.ptr<!s8i> loc(#loc178)
          } loc(#loc177)
          cir.yield loc(#loc107)
        } step {
          %24 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc121)
          %25 = cir.unary(inc, %24) : !u64i, !u64i loc(#loc122)
          cir.store %25, %12 : !u64i, !cir.ptr<!u64i> loc(#loc179)
          cir.yield loc(#loc173)
        } loc(#loc173)
      } loc(#loc173)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
      cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc124)
      %19 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc125)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc126)
      cir.call @free(%21) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc125)
    } loc(#loc169)
    cir.return loc(#loc73)
  } loc(#loc158)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":67:9)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":67:29)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":38:9)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":38:29)
#loc5 = loc("/usr/include/stdlib.h":672:1)
#loc6 = loc("/usr/include/stdlib.h":672:45)
#loc7 = loc("/usr/include/stdlib.h":756:1)
#loc8 = loc("/usr/include/stdlib.h":756:70)
#loc9 = loc("/usr/include/string.h":407:1)
#loc10 = loc("/usr/include/string.h":408:33)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc13 = loc("/usr/include/stdlib.h":687:1)
#loc14 = loc("/usr/include/stdlib.h":687:32)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":28:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":50:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":30:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":30:12)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":31:12)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":31:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":32:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":32:10)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":33:1)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":35:20)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":35:27)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":35:30)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":35:41)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":35:42)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":35:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":36:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":36:33)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":36:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":36:17)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":36:23)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":36:24)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":36:30)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":36:29)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":37:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":49:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":39:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":39:16)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":39:19)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":40:21)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":40:28)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":40:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":40:34)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":43:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":46:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":43:18)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":43:14)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":43:21)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":43:25)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":43:37)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":43:23)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":44:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":45:30)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":45:23)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":45:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":45:18)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":45:19)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":45:31)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":43:41)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":43:40)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":47:19)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":47:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":48:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":48:14)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":81:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":84:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":83:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":83:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":57:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":79:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":59:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":59:12)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":60:12)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":60:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":61:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":61:10)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":62:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":64:20)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":64:28)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":64:31)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":64:34)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":64:45)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":64:27)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":64:46)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":64:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":65:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":65:33)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":65:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":65:17)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":65:23)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":65:24)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":65:30)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":65:29)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":66:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":78:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":68:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":68:16)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":68:19)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":69:21)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":69:28)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":69:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":69:34)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":72:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":75:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":72:18)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":72:14)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":72:21)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":72:25)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":72:37)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":72:23)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":73:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":74:30)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":74:23)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":74:13)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":74:18)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":74:19)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":74:31)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":72:41)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":72:40)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":76:19)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":76:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":77:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":77:14)
#loc127 = loc(fused[#loc1, #loc2])
#loc128 = loc(fused[#loc3, #loc4])
#loc129 = loc(fused[#loc5, #loc6])
#loc130 = loc(fused[#loc7, #loc8])
#loc131 = loc(fused[#loc9, #loc10])
#loc132 = loc(fused[#loc11, #loc12])
#loc133 = loc(fused[#loc13, #loc14])
#loc134 = loc(fused[#loc15, #loc16])
#loc135 = loc(fused[#loc17, #loc18])
#loc136 = loc(fused[#loc20, #loc19])
#loc137 = loc(fused[#loc21, #loc22])
#loc138 = loc(fused[#loc26, #loc27])
#loc139 = loc(fused[#loc25, #loc27])
#loc140 = loc(fused[#loc24, #loc28])
#loc141 = loc(fused[#loc29, #loc28])
#loc142 = loc(fused[#loc30, #loc31])
#loc143 = loc(fused[#loc32, #loc33])
#loc144 = loc(fused[#loc34, #loc31])
#loc145 = loc(fused[#loc38, #loc39])
#loc146 = loc(fused[#loc40, #loc41])
#loc147 = loc(fused[#loc40, #loc42])
#loc148 = loc(fused[#loc45, #loc46])
#loc149 = loc(fused[#loc47, #loc48])
#loc150 = loc(fused[#loc50, #loc49])
#loc151 = loc(fused[#loc52, #loc53])
#loc152 = loc(fused[#loc51, #loc53])
#loc153 = loc(fused[#loc55, #loc48])
#loc154 = loc(fused[#loc58, #loc61])
#loc155 = loc(fused[#loc63, #loc62])
#loc156 = loc(fused[#loc68, #loc69])
#loc157 = loc(fused[#loc70, #loc71])
#loc158 = loc(fused[#loc72, #loc73])
#loc159 = loc(fused[#loc74, #loc75])
#loc160 = loc(fused[#loc77, #loc76])
#loc161 = loc(fused[#loc78, #loc79])
#loc162 = loc(fused[#loc84, #loc85])
#loc163 = loc(fused[#loc86, #loc85])
#loc164 = loc(fused[#loc81, #loc87])
#loc165 = loc(fused[#loc88, #loc87])
#loc166 = loc(fused[#loc89, #loc90])
#loc167 = loc(fused[#loc91, #loc92])
#loc168 = loc(fused[#loc93, #loc90])
#loc169 = loc(fused[#loc97, #loc98])
#loc170 = loc(fused[#loc99, #loc100])
#loc171 = loc(fused[#loc99, #loc101])
#loc172 = loc(fused[#loc104, #loc105])
#loc173 = loc(fused[#loc106, #loc107])
#loc174 = loc(fused[#loc109, #loc108])
#loc175 = loc(fused[#loc111, #loc112])
#loc176 = loc(fused[#loc110, #loc112])
#loc177 = loc(fused[#loc114, #loc107])
#loc178 = loc(fused[#loc117, #loc120])
#loc179 = loc(fused[#loc122, #loc121])
