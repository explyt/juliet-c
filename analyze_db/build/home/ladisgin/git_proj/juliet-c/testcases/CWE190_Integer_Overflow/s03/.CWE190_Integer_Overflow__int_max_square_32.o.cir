!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc108 = loc("CWE190_Integer_Overflow__int_max_square_32.c":92:28)
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc121)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_32_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc123)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc124)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc125)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc126)
    %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc127)
    %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc128)
    cir.store %3, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc127)
    cir.store %3, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc128)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc17)
    cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    cir.br ^bb1 loc(#loc130)
  ^bb1:  // pred: ^bb0
    %7 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc6)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc123)
    %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc22)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %11 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
    cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc132)
    cir.br ^bb2 loc(#loc20)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc133)
  ^bb3:  // pred: ^bb2
    %12 = cir.load deref %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc8)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    cir.br ^bb4 loc(#loc134)
  ^bb4:  // pred: ^bb3
    %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc32)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc34)
    cir.br ^bb5 loc(#loc31)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc28)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc4)
  } loc(#loc122)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_32_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc136)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc36)
  } loc(#loc135)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc139)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc140)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc141)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc142)
    %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc143)
    %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc144)
    cir.store %3, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc143)
    cir.store %3, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc144)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc55)
    cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    cir.br ^bb1 loc(#loc146)
  ^bb1:  // pred: ^bb0
    %7 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc139)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc60)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    %11 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc63)
    cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc148)
    cir.br ^bb2 loc(#loc58)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc149)
  ^bb3:  // pred: ^bb2
    %12 = cir.load deref %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc46)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    cir.br ^bb4 loc(#loc150)
  ^bb4:  // pred: ^bb3
    %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc48)
    %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc70)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc71)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc72)
    cir.br ^bb5 loc(#loc69)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc66)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc42)
  } loc(#loc138)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc73)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc151)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc76)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc153)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc154)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc155)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc156)
    %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc157)
    %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc158)
    cir.store %3, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc157)
    cir.store %3, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc158)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc91)
    cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    cir.br ^bb1 loc(#loc160)
  ^bb1:  // pred: ^bb0
    %7 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc80)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc153)
    %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc96)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc98)
    %11 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc99)
    cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc162)
    cir.br ^bb2 loc(#loc94)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc163)
  ^bb3:  // pred: ^bb2
    %12 = cir.load deref %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc82)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc103)
    cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc154)
    cir.br ^bb4 loc(#loc164)
  ^bb4:  // pred: ^bb3
    %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc106)
    %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc107)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc107)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc107)
    %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc107)
    %19 = cir.cmp(gt, %14, %18) : !s32i, !cir.bool loc(#loc165)
    cir.brcond %19 ^bb5, ^bb10 loc(#loc108)
  ^bb5:  // pred: ^bb4
    %20 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc109)
    %21 = cir.abs %20 poison : !s32i loc(#loc110)
    %22 = cir.cast(integral, %21 : !s32i), !s64i loc(#loc110)
    %23 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc111)
    %24 = cir.const #cir.int<2147483647> : !s32i loc(#loc112)
    %25 = cir.cast(int_to_float, %24 : !s32i), !cir.double loc(#loc112)
    %26 = cir.call @sqrt(%25) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc111)
    %27 = cir.cast(float_to_int, %26 : !cir.double), !s64i loc(#loc111)
    %28 = cir.cmp(lt, %22, %27) : !s64i, !cir.bool loc(#loc166)
    cir.brcond %28 ^bb6, ^bb7 loc(#loc108)
  ^bb6:  // pred: ^bb5
    %29 = cir.const #true loc(#loc108)
    cir.br ^bb8(%29 : !cir.bool) loc(#loc108)
  ^bb7:  // pred: ^bb5
    %30 = cir.const #false loc(#loc108)
    cir.br ^bb8(%30 : !cir.bool) loc(#loc108)
  ^bb8(%31: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_32.c":92:28)):  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc108)
  ^bb9:  // pred: ^bb8
    cir.br ^bb11(%31 : !cir.bool) loc(#loc108)
  ^bb10:  // pred: ^bb4
    %32 = cir.const #false loc(#loc108)
    cir.br ^bb11(%32 : !cir.bool) loc(#loc108)
  ^bb11(%33: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_32.c":92:28)):  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc108)
  ^bb12:  // pred: ^bb11
    cir.brcond %33 ^bb13, ^bb14 loc(#loc167)
  ^bb13:  // pred: ^bb12
    %34 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    %35 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc84)
    %36 = cir.binop(mul, %34, %35) nsw : !s32i loc(#loc117)
    cir.store %36, %2 : !s32i, !cir.ptr<!s32i> loc(#loc155)
    %37 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    cir.call @printIntLine(%37) : (!s32i) -> () loc(#loc119)
    cir.br ^bb15 loc(#loc115)
  ^bb14:  // pred: ^bb12
    %38 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc76)
    %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    cir.br ^bb15 loc(#loc105)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc105)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc102)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc78)
  } loc(#loc152)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_32.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_square_32.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_square_32.c":45:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_square_32.c":32:9)
#loc6 = loc("CWE190_Integer_Overflow__int_max_square_32.c":32:21)
#loc7 = loc("CWE190_Integer_Overflow__int_max_square_32.c":38:9)
#loc8 = loc("CWE190_Integer_Overflow__int_max_square_32.c":38:21)
#loc9 = loc("CWE190_Integer_Overflow__int_max_square_32.c":41:13)
#loc10 = loc("CWE190_Integer_Overflow__int_max_square_32.c":41:33)
#loc11 = loc("CWE190_Integer_Overflow__int_max_square_32.c":26:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_square_32.c":26:9)
#loc13 = loc("CWE190_Integer_Overflow__int_max_square_32.c":27:5)
#loc14 = loc("CWE190_Integer_Overflow__int_max_square_32.c":27:22)
#loc15 = loc("CWE190_Integer_Overflow__int_max_square_32.c":28:5)
#loc16 = loc("CWE190_Integer_Overflow__int_max_square_32.c":28:22)
#loc17 = loc("CWE190_Integer_Overflow__int_max_square_32.c":30:12)
#loc18 = loc("CWE190_Integer_Overflow__int_max_square_32.c":30:5)
#loc19 = loc("CWE190_Integer_Overflow__int_max_square_32.c":31:5)
#loc20 = loc("CWE190_Integer_Overflow__int_max_square_32.c":36:5)
#loc21 = loc("CWE190_Integer_Overflow__int_max_square_32.c":32:20)
#loc22 = loc("CWE190_Integer_Overflow__int_max_square_32.c":34:16)
#loc23 = loc("CWE190_Integer_Overflow__int_max_square_32.c":34:9)
#loc24 = loc("CWE190_Integer_Overflow__int_max_square_32.c":35:21)
#loc25 = loc("CWE190_Integer_Overflow__int_max_square_32.c":35:10)
#loc26 = loc("CWE190_Integer_Overflow__int_max_square_32.c":35:9)
#loc27 = loc("CWE190_Integer_Overflow__int_max_square_32.c":37:5)
#loc28 = loc("CWE190_Integer_Overflow__int_max_square_32.c":44:5)
#loc29 = loc("CWE190_Integer_Overflow__int_max_square_32.c":38:20)
#loc30 = loc("CWE190_Integer_Overflow__int_max_square_32.c":39:9)
#loc31 = loc("CWE190_Integer_Overflow__int_max_square_32.c":43:9)
#loc32 = loc("CWE190_Integer_Overflow__int_max_square_32.c":41:26)
#loc33 = loc("CWE190_Integer_Overflow__int_max_square_32.c":42:26)
#loc34 = loc("CWE190_Integer_Overflow__int_max_square_32.c":42:13)
#loc35 = loc("CWE190_Integer_Overflow__int_max_square_32.c":104:1)
#loc36 = loc("CWE190_Integer_Overflow__int_max_square_32.c":108:1)
#loc37 = loc("CWE190_Integer_Overflow__int_max_square_32.c":106:5)
#loc38 = loc("CWE190_Integer_Overflow__int_max_square_32.c":106:13)
#loc39 = loc("CWE190_Integer_Overflow__int_max_square_32.c":107:5)
#loc40 = loc("CWE190_Integer_Overflow__int_max_square_32.c":107:13)
#loc41 = loc("CWE190_Integer_Overflow__int_max_square_32.c":52:1)
#loc42 = loc("CWE190_Integer_Overflow__int_max_square_32.c":73:1)
#loc43 = loc("CWE190_Integer_Overflow__int_max_square_32.c":60:9)
#loc44 = loc("CWE190_Integer_Overflow__int_max_square_32.c":60:21)
#loc45 = loc("CWE190_Integer_Overflow__int_max_square_32.c":66:9)
#loc46 = loc("CWE190_Integer_Overflow__int_max_square_32.c":66:21)
#loc47 = loc("CWE190_Integer_Overflow__int_max_square_32.c":69:13)
#loc48 = loc("CWE190_Integer_Overflow__int_max_square_32.c":69:33)
#loc49 = loc("CWE190_Integer_Overflow__int_max_square_32.c":54:5)
#loc50 = loc("CWE190_Integer_Overflow__int_max_square_32.c":54:9)
#loc51 = loc("CWE190_Integer_Overflow__int_max_square_32.c":55:5)
#loc52 = loc("CWE190_Integer_Overflow__int_max_square_32.c":55:22)
#loc53 = loc("CWE190_Integer_Overflow__int_max_square_32.c":56:5)
#loc54 = loc("CWE190_Integer_Overflow__int_max_square_32.c":56:22)
#loc55 = loc("CWE190_Integer_Overflow__int_max_square_32.c":58:12)
#loc56 = loc("CWE190_Integer_Overflow__int_max_square_32.c":58:5)
#loc57 = loc("CWE190_Integer_Overflow__int_max_square_32.c":59:5)
#loc58 = loc("CWE190_Integer_Overflow__int_max_square_32.c":64:5)
#loc59 = loc("CWE190_Integer_Overflow__int_max_square_32.c":60:20)
#loc60 = loc("CWE190_Integer_Overflow__int_max_square_32.c":62:16)
#loc61 = loc("CWE190_Integer_Overflow__int_max_square_32.c":62:9)
#loc62 = loc("CWE190_Integer_Overflow__int_max_square_32.c":63:21)
#loc63 = loc("CWE190_Integer_Overflow__int_max_square_32.c":63:10)
#loc64 = loc("CWE190_Integer_Overflow__int_max_square_32.c":63:9)
#loc65 = loc("CWE190_Integer_Overflow__int_max_square_32.c":65:5)
#loc66 = loc("CWE190_Integer_Overflow__int_max_square_32.c":72:5)
#loc67 = loc("CWE190_Integer_Overflow__int_max_square_32.c":66:20)
#loc68 = loc("CWE190_Integer_Overflow__int_max_square_32.c":67:9)
#loc69 = loc("CWE190_Integer_Overflow__int_max_square_32.c":71:9)
#loc70 = loc("CWE190_Integer_Overflow__int_max_square_32.c":69:26)
#loc71 = loc("CWE190_Integer_Overflow__int_max_square_32.c":70:26)
#loc72 = loc("CWE190_Integer_Overflow__int_max_square_32.c":70:13)
#loc73 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc74 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc75 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc76 = loc("CWE190_Integer_Overflow__int_max_square_32.c":99:23)
#loc77 = loc("CWE190_Integer_Overflow__int_max_square_32.c":76:1)
#loc78 = loc("CWE190_Integer_Overflow__int_max_square_32.c":102:1)
#loc79 = loc("CWE190_Integer_Overflow__int_max_square_32.c":84:9)
#loc80 = loc("CWE190_Integer_Overflow__int_max_square_32.c":84:21)
#loc81 = loc("CWE190_Integer_Overflow__int_max_square_32.c":90:9)
#loc82 = loc("CWE190_Integer_Overflow__int_max_square_32.c":90:21)
#loc83 = loc("CWE190_Integer_Overflow__int_max_square_32.c":94:13)
#loc84 = loc("CWE190_Integer_Overflow__int_max_square_32.c":94:33)
#loc85 = loc("CWE190_Integer_Overflow__int_max_square_32.c":78:5)
#loc86 = loc("CWE190_Integer_Overflow__int_max_square_32.c":78:9)
#loc87 = loc("CWE190_Integer_Overflow__int_max_square_32.c":79:5)
#loc88 = loc("CWE190_Integer_Overflow__int_max_square_32.c":79:22)
#loc89 = loc("CWE190_Integer_Overflow__int_max_square_32.c":80:5)
#loc90 = loc("CWE190_Integer_Overflow__int_max_square_32.c":80:22)
#loc91 = loc("CWE190_Integer_Overflow__int_max_square_32.c":82:12)
#loc92 = loc("CWE190_Integer_Overflow__int_max_square_32.c":82:5)
#loc93 = loc("CWE190_Integer_Overflow__int_max_square_32.c":83:5)
#loc94 = loc("CWE190_Integer_Overflow__int_max_square_32.c":88:5)
#loc95 = loc("CWE190_Integer_Overflow__int_max_square_32.c":84:20)
#loc96 = loc("CWE190_Integer_Overflow__int_max_square_32.c":86:16)
#loc97 = loc("CWE190_Integer_Overflow__int_max_square_32.c":86:9)
#loc98 = loc("CWE190_Integer_Overflow__int_max_square_32.c":87:21)
#loc99 = loc("CWE190_Integer_Overflow__int_max_square_32.c":87:10)
#loc100 = loc("CWE190_Integer_Overflow__int_max_square_32.c":87:9)
#loc101 = loc("CWE190_Integer_Overflow__int_max_square_32.c":89:5)
#loc102 = loc("CWE190_Integer_Overflow__int_max_square_32.c":101:5)
#loc103 = loc("CWE190_Integer_Overflow__int_max_square_32.c":90:20)
#loc104 = loc("CWE190_Integer_Overflow__int_max_square_32.c":92:9)
#loc105 = loc("CWE190_Integer_Overflow__int_max_square_32.c":100:9)
#loc106 = loc("CWE190_Integer_Overflow__int_max_square_32.c":92:13)
#loc107 = loc("CWE190_Integer_Overflow__int_max_square_32.c":92:20)
#loc109 = loc("CWE190_Integer_Overflow__int_max_square_32.c":92:35)
#loc110 = loc("CWE190_Integer_Overflow__int_max_square_32.c":92:31)
#loc111 = loc("CWE190_Integer_Overflow__int_max_square_32.c":92:49)
#loc112 = loc("CWE190_Integer_Overflow__int_max_square_32.c":92:62)
#loc113 = loc("CWE190_Integer_Overflow__int_max_square_32.c":92:69)
#loc114 = loc("CWE190_Integer_Overflow__int_max_square_32.c":93:9)
#loc115 = loc("CWE190_Integer_Overflow__int_max_square_32.c":96:9)
#loc116 = loc("CWE190_Integer_Overflow__int_max_square_32.c":98:9)
#loc117 = loc("CWE190_Integer_Overflow__int_max_square_32.c":94:26)
#loc118 = loc("CWE190_Integer_Overflow__int_max_square_32.c":95:26)
#loc119 = loc("CWE190_Integer_Overflow__int_max_square_32.c":95:13)
#loc120 = loc("CWE190_Integer_Overflow__int_max_square_32.c":99:13)
#loc121 = loc(fused[#loc1, #loc2])
#loc122 = loc(fused[#loc3, #loc4])
#loc123 = loc(fused[#loc5, #loc6])
#loc124 = loc(fused[#loc7, #loc8])
#loc125 = loc(fused[#loc9, #loc10])
#loc126 = loc(fused[#loc11, #loc12])
#loc127 = loc(fused[#loc13, #loc14])
#loc128 = loc(fused[#loc15, #loc16])
#loc129 = loc(fused[#loc18, #loc17])
#loc130 = loc(fused[#loc19, #loc20])
#loc131 = loc(fused[#loc23, #loc22])
#loc132 = loc(fused[#loc26, #loc24])
#loc133 = loc(fused[#loc27, #loc28])
#loc134 = loc(fused[#loc30, #loc31])
#loc135 = loc(fused[#loc35, #loc36])
#loc136 = loc(fused[#loc37, #loc38])
#loc137 = loc(fused[#loc39, #loc40])
#loc138 = loc(fused[#loc41, #loc42])
#loc139 = loc(fused[#loc43, #loc44])
#loc140 = loc(fused[#loc45, #loc46])
#loc141 = loc(fused[#loc47, #loc48])
#loc142 = loc(fused[#loc49, #loc50])
#loc143 = loc(fused[#loc51, #loc52])
#loc144 = loc(fused[#loc53, #loc54])
#loc145 = loc(fused[#loc56, #loc55])
#loc146 = loc(fused[#loc57, #loc58])
#loc147 = loc(fused[#loc61, #loc60])
#loc148 = loc(fused[#loc64, #loc62])
#loc149 = loc(fused[#loc65, #loc66])
#loc150 = loc(fused[#loc68, #loc69])
#loc151 = loc(fused[#loc74, #loc75])
#loc152 = loc(fused[#loc77, #loc78])
#loc153 = loc(fused[#loc79, #loc80])
#loc154 = loc(fused[#loc81, #loc82])
#loc155 = loc(fused[#loc83, #loc84])
#loc156 = loc(fused[#loc85, #loc86])
#loc157 = loc(fused[#loc87, #loc88])
#loc158 = loc(fused[#loc89, #loc90])
#loc159 = loc(fused[#loc92, #loc91])
#loc160 = loc(fused[#loc93, #loc94])
#loc161 = loc(fused[#loc97, #loc96])
#loc162 = loc(fused[#loc100, #loc98])
#loc163 = loc(fused[#loc101, #loc102])
#loc164 = loc(fused[#loc104, #loc105])
#loc165 = loc(fused[#loc106, #loc107])
#loc166 = loc(fused[#loc110, #loc113])
#loc167 = loc(fused[#loc114, #loc115, #loc116, #loc105])
