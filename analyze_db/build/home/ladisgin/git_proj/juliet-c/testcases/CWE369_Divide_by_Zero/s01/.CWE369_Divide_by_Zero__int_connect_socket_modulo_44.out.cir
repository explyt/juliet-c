!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":44:21)
#loc6 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":44:25)
#loc142 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":232:10)
#loc143 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":232:14)
#loc144 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":232:20)
#loc145 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":232:32)
#loc162 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":122:25)
#loc163 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":122:29)
#loc184 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":140:25)
#loc185 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":140:29)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc295 = loc(fused[#loc5, #loc6])
#loc347 = loc(fused[#loc142, #loc143])
#loc348 = loc(fused[#loc144, #loc145])
#loc353 = loc(fused[#loc162, #loc163])
#loc361 = loc(fused[#loc184, #loc185])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc293)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc295)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc8)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc9)
    %3 = cir.binop(rem, %1, %2) : !s32i loc(#loc296)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc10)
    cir.return loc(#loc4)
  } loc(#loc294)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc297)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr1) loc(#loc298)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc15)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr1) loc(#loc299)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc300)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc301)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr1) loc(#loc302)
  cir.func private @close(!s32i) -> !s32i loc(#loc303)
  cir.func no_proto @CWE369_Divide_by_Zero__int_connect_socket_modulo_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc305)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc306)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc31)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc306)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc33)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc307)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc309)
      %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc310)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc311)
      %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc312)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc42)
      %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc42)
      cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc311)
      cir.scope {
        cir.do {
          %13 = cir.const #cir.int<2> : !s32i loc(#loc47)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc48)
          %15 = cir.const #cir.int<6> : !s32i loc(#loc49)
          %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc50)
          cir.store %16, %9 : !s32i, !cir.ptr<!s32i> loc(#loc314)
          cir.scope {
            %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc55)
            %56 = cir.const #cir.int<1> : !s32i loc(#loc56)
            %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc56)
            %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc316)
            cir.if %58 {
              cir.break loc(#loc58)
            } loc(#loc317)
          } loc(#loc315)
          %17 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc318)
          %18 = cir.const #cir.int<0> : !s32i loc(#loc61)
          %19 = cir.const #cir.int<16> : !u64i loc(#loc319)
          cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc320)
          %20 = cir.const #cir.int<2> : !s32i loc(#loc66)
          %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc66)
          %22 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
          cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc321)
          %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc15)
          %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc15)
          %25 = cir.call @inet_addr(%24) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr1) loc(#loc69)
          %26 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc70)
          %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc71)
          cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc322)
          %28 = cir.const #cir.int<27015> : !s32i loc(#loc74)
          %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc74)
          %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr1) loc(#loc75)
          %31 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc76)
          cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc323)
          cir.scope {
            %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc81)
            %56 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc325)
            %57 = cir.const #cir.int<16> : !u64i loc(#loc326)
            %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc326)
            %59 = cir.call @connect(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc86)
            %60 = cir.const #cir.int<1> : !s32i loc(#loc87)
            %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc87)
            %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc327)
            cir.if %62 {
              cir.break loc(#loc89)
            } loc(#loc328)
          } loc(#loc324)
          %32 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc90)
          %33 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc91)
          %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc91)
          %35 = cir.const #cir.int<3> : !s32i loc(#loc92)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc92)
          %37 = cir.const #cir.int<4> : !u64i loc(#loc92)
          %38 = cir.binop(mul, %36, %37) : !u64i loc(#loc92)
          %39 = cir.const #cir.int<2> : !s32i loc(#loc92)
          %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc92)
          %41 = cir.binop(add, %38, %40) : !u64i loc(#loc92)
          %42 = cir.const #cir.int<1> : !s32i loc(#loc93)
          %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc93)
          %44 = cir.binop(sub, %41, %43) : !u64i loc(#loc329)
          %45 = cir.const #cir.int<0> : !s32i loc(#loc94)
          %46 = cir.call @recv(%32, %34, %44, %45) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc95)
          %47 = cir.cast(integral, %46 : !s64i), !s32i loc(#loc95)
          cir.store %47, %7 : !s32i, !cir.ptr<!s32i> loc(#loc330)
          cir.scope {
            %55 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc100)
            %56 = cir.const #cir.int<1> : !s32i loc(#loc101)
            %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc101)
            %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc332)
            %59 = cir.ternary(%58, true {
              %60 = cir.const #true loc(#loc102)
              cir.yield %60 : !cir.bool loc(#loc102)
            }, false {
              %60 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc103)
              %61 = cir.const #cir.int<0> : !s32i loc(#loc104)
              %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc333)
              %63 = cir.ternary(%62, true {
                %64 = cir.const #true loc(#loc102)
                cir.yield %64 : !cir.bool loc(#loc102)
              }, false {
                %64 = cir.const #false loc(#loc102)
                cir.yield %64 : !cir.bool loc(#loc102)
              }) : (!cir.bool) -> !cir.bool loc(#loc102)
              cir.yield %63 : !cir.bool loc(#loc102)
            }) : (!cir.bool) -> !cir.bool loc(#loc102)
            cir.if %59 {
              cir.break loc(#loc106)
            } loc(#loc334)
          } loc(#loc331)
          %48 = cir.const #cir.int<0> : !s32i loc(#loc107)
          %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc107)
          %50 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc108)
          %51 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc109)
          %52 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc109)
          cir.store %49, %52 : !s8i, !cir.ptr<!s8i> loc(#loc335)
          %53 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc110)
          %54 = cir.call @atoi(%53) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr1) loc(#loc111)
          cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc336)
          cir.yield loc(#loc46)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc114)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc114)
          cir.condition(%14) loc(#loc114)
        } loc(#loc313)
      } loc(#loc313)
      cir.scope {
        %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc117)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc118)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc118)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc338)
        cir.if %16 {
          %17 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc120)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc121)
        } loc(#loc339)
      } loc(#loc337)
    } loc(#loc308)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc122)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
    cir.call %5(%6) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc122)
    cir.return loc(#loc27)
  } loc(#loc304)
  cir.func no_proto @CWE369_Divide_by_Zero__int_connect_socket_modulo_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc341)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc126)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc342)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc128)
    cir.return loc(#loc125)
  } loc(#loc340)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc343)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc344)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc345)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc136)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc137)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc138)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc139)
  cir.func @main(%arg0: !s32i loc(fused[#loc142, #loc143]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc144, #loc145])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc347)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc348)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc141)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc146)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc146)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc147)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc148)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc148)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc149)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc136)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc136)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc150)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_connect_socket_modulo_44_good : !cir.ptr<!cir.func<!void ()>> loc(#loc349)
    cir.call @CWE369_Divide_by_Zero__int_connect_socket_modulo_44_good() : () -> () loc(#loc151)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc137)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc137)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc153)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc138)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc138)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc154)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_connect_socket_modulo_44_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc350)
    cir.call @CWE369_Divide_by_Zero__int_connect_socket_modulo_44_bad() : () -> () loc(#loc155)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc139)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc139)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc157)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc158)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc351)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc351)
    cir.return %17 : !s32i loc(#loc351)
  } loc(#loc346)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc162, #loc163])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc353)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc165)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc166)
    %3 = cir.binop(rem, %1, %2) : !s32i loc(#loc354)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc167)
    cir.return loc(#loc161)
  } loc(#loc352)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc356)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc357)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc173)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc357)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc174)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc175)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc358)
    %5 = cir.const #cir.int<7> : !s32i loc(#loc177)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc359)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc179)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc180)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc179)
    cir.return loc(#loc169)
  } loc(#loc355)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc181)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc184, #loc185])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc361)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc189)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc190)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc363)
      cir.if %3 {
        %4 = cir.const #cir.int<100> : !s32i loc(#loc194)
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc195)
        %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc365)
        cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc196)
      } else {
        %4 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc181)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc181)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc197)
      } loc(#loc364)
    } loc(#loc362)
    cir.return loc(#loc183)
  } loc(#loc360)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc367)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc368)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc203)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc368)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc204)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc205)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc369)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc371)
      %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc372)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc373)
      %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc374)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc214)
      %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc214)
      cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc373)
      cir.scope {
        cir.do {
          %13 = cir.const #cir.int<2> : !s32i loc(#loc219)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc220)
          %15 = cir.const #cir.int<6> : !s32i loc(#loc221)
          %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc222)
          cir.store %16, %9 : !s32i, !cir.ptr<!s32i> loc(#loc376)
          cir.scope {
            %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc227)
            %56 = cir.const #cir.int<1> : !s32i loc(#loc228)
            %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc228)
            %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc378)
            cir.if %58 {
              cir.break loc(#loc230)
            } loc(#loc379)
          } loc(#loc377)
          %17 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc380)
          %18 = cir.const #cir.int<0> : !s32i loc(#loc233)
          %19 = cir.const #cir.int<16> : !u64i loc(#loc381)
          cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc382)
          %20 = cir.const #cir.int<2> : !s32i loc(#loc238)
          %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc238)
          %22 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
          cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc383)
          %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc240)
          %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc240)
          %25 = cir.call @inet_addr(%24) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr1) loc(#loc241)
          %26 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc70)
          %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc71)
          cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc384)
          %28 = cir.const #cir.int<27015> : !s32i loc(#loc244)
          %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc244)
          %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr1) loc(#loc245)
          %31 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc76)
          cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc385)
          cir.scope {
            %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc250)
            %56 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc387)
            %57 = cir.const #cir.int<16> : !u64i loc(#loc388)
            %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc388)
            %59 = cir.call @connect(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc255)
            %60 = cir.const #cir.int<1> : !s32i loc(#loc256)
            %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc256)
            %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc389)
            cir.if %62 {
              cir.break loc(#loc258)
            } loc(#loc390)
          } loc(#loc386)
          %32 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc259)
          %33 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc260)
          %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc260)
          %35 = cir.const #cir.int<3> : !s32i loc(#loc261)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc261)
          %37 = cir.const #cir.int<4> : !u64i loc(#loc261)
          %38 = cir.binop(mul, %36, %37) : !u64i loc(#loc261)
          %39 = cir.const #cir.int<2> : !s32i loc(#loc261)
          %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc261)
          %41 = cir.binop(add, %38, %40) : !u64i loc(#loc261)
          %42 = cir.const #cir.int<1> : !s32i loc(#loc262)
          %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc262)
          %44 = cir.binop(sub, %41, %43) : !u64i loc(#loc391)
          %45 = cir.const #cir.int<0> : !s32i loc(#loc263)
          %46 = cir.call @recv(%32, %34, %44, %45) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc264)
          %47 = cir.cast(integral, %46 : !s64i), !s32i loc(#loc264)
          cir.store %47, %7 : !s32i, !cir.ptr<!s32i> loc(#loc392)
          cir.scope {
            %55 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc269)
            %56 = cir.const #cir.int<1> : !s32i loc(#loc270)
            %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc270)
            %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc394)
            %59 = cir.ternary(%58, true {
              %60 = cir.const #true loc(#loc271)
              cir.yield %60 : !cir.bool loc(#loc271)
            }, false {
              %60 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc272)
              %61 = cir.const #cir.int<0> : !s32i loc(#loc273)
              %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc395)
              %63 = cir.ternary(%62, true {
                %64 = cir.const #true loc(#loc271)
                cir.yield %64 : !cir.bool loc(#loc271)
              }, false {
                %64 = cir.const #false loc(#loc271)
                cir.yield %64 : !cir.bool loc(#loc271)
              }) : (!cir.bool) -> !cir.bool loc(#loc271)
              cir.yield %63 : !cir.bool loc(#loc271)
            }) : (!cir.bool) -> !cir.bool loc(#loc271)
            cir.if %59 {
              cir.break loc(#loc275)
            } loc(#loc396)
          } loc(#loc393)
          %48 = cir.const #cir.int<0> : !s32i loc(#loc276)
          %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc276)
          %50 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc277)
          %51 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc278)
          %52 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc278)
          cir.store %49, %52 : !s8i, !cir.ptr<!s8i> loc(#loc397)
          %53 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc279)
          %54 = cir.call @atoi(%53) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr1) loc(#loc280)
          cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc398)
          cir.yield loc(#loc218)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc283)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc283)
          cir.condition(%14) loc(#loc283)
        } loc(#loc375)
      } loc(#loc375)
      cir.scope {
        %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc286)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc287)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc287)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc400)
        cir.if %16 {
          %17 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc289)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc290)
        } loc(#loc401)
      } loc(#loc399)
    } loc(#loc370)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc291)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc292)
    cir.call %5(%6) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc291)
    cir.return loc(#loc199)
  } loc(#loc366)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":44:1)
#loc4 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":48:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":45:1)
#loc8 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":47:18)
#loc9 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":47:24)
#loc10 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":47:5)
#loc11 = loc("/usr/include/sys/socket.h":102:1)
#loc12 = loc("/usr/include/sys/socket.h":102:62)
#loc13 = loc("/usr/include/arpa/inet.h":34:1)
#loc14 = loc("/usr/include/arpa/inet.h":34:47)
#loc15 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":83:49)
#loc16 = loc("/usr/include/netinet/in.h":404:1)
#loc17 = loc("/usr/include/netinet/in.h":405:40)
#loc18 = loc("/usr/include/sys/socket.h":126:1)
#loc19 = loc("/usr/include/sys/socket.h":126:75)
#loc20 = loc("/usr/include/sys/socket.h":145:1)
#loc21 = loc("/usr/include/sys/socket.h":145:68)
#loc22 = loc("/usr/include/stdlib.h":105:1)
#loc23 = loc("/usr/include/stdlib.h":106:33)
#loc24 = loc("/usr/include/unistd.h":358:1)
#loc25 = loc("/usr/include/unistd.h":358:27)
#loc26 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":50:1)
#loc27 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":115:1)
#loc28 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":52:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":52:9)
#loc30 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":54:5)
#loc31 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":54:29)
#loc32 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":56:13)
#loc33 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":56:12)
#loc34 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":56:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":57:5)
#loc36 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":112:5)
#loc37 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":62:9)
#loc38 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":62:13)
#loc39 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":63:9)
#loc40 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":63:28)
#loc41 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":64:9)
#loc42 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":64:32)
#loc43 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":65:9)
#loc44 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":65:41)
#loc45 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":66:9)
#loc46 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":101:17)
#loc47 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":76:36)
#loc48 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":76:45)
#loc49 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":76:58)
#loc50 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":76:29)
#loc51 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":76:13)
#loc52 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":76:69)
#loc53 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":77:13)
#loc54 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":80:13)
#loc55 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":77:17)
#loc56 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":77:34)
#loc57 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":78:13)
#loc58 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":79:17)
#loc59 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":81:20)
#loc60 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":81:21)
#loc61 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":81:30)
#loc62 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":81:33)
#loc63 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":81:47)
#loc64 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":81:13)
#loc65 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":81:48)
#loc66 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":82:34)
#loc67 = loc("/usr/include/netinet/in.h":249:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":82:13)
#loc69 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":83:39)
#loc70 = loc("/usr/include/netinet/in.h":251:20)
#loc71 = loc("/usr/include/netinet/in.h":33:15)
#loc72 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":83:13)
#loc73 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":83:59)
#loc74 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":84:38)
#loc75 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":84:32)
#loc76 = loc("/usr/include/netinet/in.h":250:15)
#loc77 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":84:13)
#loc78 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":84:46)
#loc79 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":85:13)
#loc80 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":88:13)
#loc81 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":85:25)
#loc82 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":85:58)
#loc83 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":85:59)
#loc84 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":85:68)
#loc85 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":85:82)
#loc86 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":85:17)
#loc87 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":85:88)
#loc88 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":86:13)
#loc89 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":87:17)
#loc90 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":91:31)
#loc91 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":91:46)
#loc92 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":91:59)
#loc93 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":91:77)
#loc94 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":91:80)
#loc95 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":91:26)
#loc96 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":91:13)
#loc97 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":91:81)
#loc98 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":92:13)
#loc99 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":95:13)
#loc100 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":92:17)
#loc101 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":92:31)
#loc102 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":92:44)
#loc103 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":92:47)
#loc104 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":92:61)
#loc105 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":93:13)
#loc106 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":94:17)
#loc107 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":97:39)
#loc108 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":97:25)
#loc109 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":97:13)
#loc110 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":99:25)
#loc111 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":99:20)
#loc112 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":99:13)
#loc113 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":99:36)
#loc114 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":101:16)
#loc115 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":102:9)
#loc116 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":105:9)
#loc117 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":102:13)
#loc118 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":102:30)
#loc119 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":103:9)
#loc120 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":104:26)
#loc121 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":104:13)
#loc122 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":114:5)
#loc123 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":114:13)
#loc124 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":218:1)
#loc125 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":222:1)
#loc126 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":220:5)
#loc127 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":220:13)
#loc128 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":221:5)
#loc129 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":221:13)
#loc130 = loc("/usr/include/stdlib.h":575:1)
#loc131 = loc("/usr/include/stdlib.h":575:41)
#loc132 = loc("/usr/include/time.h":76:1)
#loc133 = loc("/usr/include/time.h":76:38)
#loc134 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc135 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc136 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":237:15)
#loc137 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":239:15)
#loc138 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":242:15)
#loc139 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":244:15)
#loc140 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":232:1)
#loc141 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":247:1)
#loc146 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":233:1)
#loc147 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":235:27)
#loc148 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":235:22)
#loc149 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":235:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":237:5)
#loc151 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":238:5)
#loc152 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":238:62)
#loc153 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":239:5)
#loc154 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":242:5)
#loc155 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":243:5)
#loc156 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":243:61)
#loc157 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":244:5)
#loc158 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":246:12)
#loc159 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":246:5)
#loc160 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":122:1)
#loc161 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":126:1)
#loc164 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":123:1)
#loc165 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":125:18)
#loc166 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":125:24)
#loc167 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":125:5)
#loc168 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":128:1)
#loc169 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":137:1)
#loc170 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":130:5)
#loc171 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":130:9)
#loc172 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":131:5)
#loc173 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":131:29)
#loc174 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":133:13)
#loc175 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":133:12)
#loc176 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":133:5)
#loc177 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":135:12)
#loc178 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":135:5)
#loc179 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":136:5)
#loc180 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":136:13)
#loc181 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":149:19)
#loc182 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":140:1)
#loc183 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":151:1)
#loc186 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":141:1)
#loc187 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":143:5)
#loc188 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":150:5)
#loc189 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":143:9)
#loc190 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":143:17)
#loc191 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":144:5)
#loc192 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":146:5)
#loc193 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":148:5)
#loc194 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":145:22)
#loc195 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":145:28)
#loc196 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":145:9)
#loc197 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":149:9)
#loc198 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":153:1)
#loc199 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":216:1)
#loc200 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":155:5)
#loc201 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":155:9)
#loc202 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":156:5)
#loc203 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":156:29)
#loc204 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":158:13)
#loc205 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":158:12)
#loc206 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":158:5)
#loc207 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":159:5)
#loc208 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":214:5)
#loc209 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":164:9)
#loc210 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":164:13)
#loc211 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":165:9)
#loc212 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":165:28)
#loc213 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":166:9)
#loc214 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":166:32)
#loc215 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":167:9)
#loc216 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":167:41)
#loc217 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":168:9)
#loc218 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":203:17)
#loc219 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":178:36)
#loc220 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":178:45)
#loc221 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":178:58)
#loc222 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":178:29)
#loc223 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":178:13)
#loc224 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":178:69)
#loc225 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":179:13)
#loc226 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":182:13)
#loc227 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":179:17)
#loc228 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":179:34)
#loc229 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":180:13)
#loc230 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":181:17)
#loc231 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":183:20)
#loc232 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":183:21)
#loc233 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":183:30)
#loc234 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":183:33)
#loc235 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":183:47)
#loc236 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":183:13)
#loc237 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":183:48)
#loc238 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":184:34)
#loc239 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":184:13)
#loc240 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":185:49)
#loc241 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":185:39)
#loc242 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":185:13)
#loc243 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":185:59)
#loc244 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":186:38)
#loc245 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":186:32)
#loc246 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":186:13)
#loc247 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":186:46)
#loc248 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":187:13)
#loc249 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":190:13)
#loc250 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":187:25)
#loc251 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":187:58)
#loc252 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":187:59)
#loc253 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":187:68)
#loc254 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":187:82)
#loc255 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":187:17)
#loc256 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":187:88)
#loc257 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":188:13)
#loc258 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":189:17)
#loc259 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":193:31)
#loc260 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":193:46)
#loc261 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":193:59)
#loc262 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":193:77)
#loc263 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":193:80)
#loc264 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":193:26)
#loc265 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":193:13)
#loc266 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":193:81)
#loc267 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":194:13)
#loc268 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":197:13)
#loc269 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":194:17)
#loc270 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":194:31)
#loc271 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":194:44)
#loc272 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":194:47)
#loc273 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":194:61)
#loc274 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":195:13)
#loc275 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":196:17)
#loc276 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":199:39)
#loc277 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":199:25)
#loc278 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":199:13)
#loc279 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":201:25)
#loc280 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":201:20)
#loc281 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":201:13)
#loc282 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":201:36)
#loc283 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":203:16)
#loc284 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":204:9)
#loc285 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":207:9)
#loc286 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":204:13)
#loc287 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":204:30)
#loc288 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":205:9)
#loc289 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":206:26)
#loc290 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":206:13)
#loc291 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":215:5)
#loc292 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_44.c":215:13)
#loc293 = loc(fused[#loc1, #loc2])
#loc294 = loc(fused[#loc3, #loc4])
#loc296 = loc(fused[#loc8, #loc9])
#loc297 = loc(fused[#loc11, #loc12])
#loc298 = loc(fused[#loc13, #loc14])
#loc299 = loc(fused[#loc16, #loc17])
#loc300 = loc(fused[#loc18, #loc19])
#loc301 = loc(fused[#loc20, #loc21])
#loc302 = loc(fused[#loc22, #loc23])
#loc303 = loc(fused[#loc24, #loc25])
#loc304 = loc(fused[#loc26, #loc27])
#loc305 = loc(fused[#loc28, #loc29])
#loc306 = loc(fused[#loc30, #loc31])
#loc307 = loc(fused[#loc34, #loc32])
#loc308 = loc(fused[#loc35, #loc36])
#loc309 = loc(fused[#loc37, #loc38])
#loc310 = loc(fused[#loc39, #loc40])
#loc311 = loc(fused[#loc41, #loc42])
#loc312 = loc(fused[#loc43, #loc44])
#loc313 = loc(fused[#loc45, #loc46])
#loc314 = loc(fused[#loc51, #loc52])
#loc315 = loc(fused[#loc53, #loc54])
#loc316 = loc(fused[#loc55, #loc56])
#loc317 = loc(fused[#loc57, #loc54])
#loc318 = loc(fused[#loc59, #loc60])
#loc319 = loc(fused[#loc62, #loc63])
#loc320 = loc(fused[#loc64, #loc65])
#loc321 = loc(fused[#loc68, #loc66])
#loc322 = loc(fused[#loc72, #loc73])
#loc323 = loc(fused[#loc77, #loc78])
#loc324 = loc(fused[#loc79, #loc80])
#loc325 = loc(fused[#loc82, #loc83])
#loc326 = loc(fused[#loc84, #loc85])
#loc327 = loc(fused[#loc86, #loc87])
#loc328 = loc(fused[#loc88, #loc80])
#loc329 = loc(fused[#loc92, #loc93])
#loc330 = loc(fused[#loc96, #loc97])
#loc331 = loc(fused[#loc98, #loc99])
#loc332 = loc(fused[#loc100, #loc101])
#loc333 = loc(fused[#loc103, #loc104])
#loc334 = loc(fused[#loc105, #loc99])
#loc335 = loc(fused[#loc109, #loc107])
#loc336 = loc(fused[#loc112, #loc113])
#loc337 = loc(fused[#loc115, #loc116])
#loc338 = loc(fused[#loc117, #loc118])
#loc339 = loc(fused[#loc119, #loc116])
#loc340 = loc(fused[#loc124, #loc125])
#loc341 = loc(fused[#loc126, #loc127])
#loc342 = loc(fused[#loc128, #loc129])
#loc343 = loc(fused[#loc130, #loc131])
#loc344 = loc(fused[#loc132, #loc133])
#loc345 = loc(fused[#loc134, #loc135])
#loc346 = loc(fused[#loc140, #loc141])
#loc349 = loc(fused[#loc151, #loc152])
#loc350 = loc(fused[#loc155, #loc156])
#loc351 = loc(fused[#loc159, #loc158])
#loc352 = loc(fused[#loc160, #loc161])
#loc354 = loc(fused[#loc165, #loc166])
#loc355 = loc(fused[#loc168, #loc169])
#loc356 = loc(fused[#loc170, #loc171])
#loc357 = loc(fused[#loc172, #loc173])
#loc358 = loc(fused[#loc176, #loc174])
#loc359 = loc(fused[#loc178, #loc177])
#loc360 = loc(fused[#loc182, #loc183])
#loc362 = loc(fused[#loc187, #loc188])
#loc363 = loc(fused[#loc189, #loc190])
#loc364 = loc(fused[#loc191, #loc192, #loc193, #loc188])
#loc365 = loc(fused[#loc194, #loc195])
#loc366 = loc(fused[#loc198, #loc199])
#loc367 = loc(fused[#loc200, #loc201])
#loc368 = loc(fused[#loc202, #loc203])
#loc369 = loc(fused[#loc206, #loc204])
#loc370 = loc(fused[#loc207, #loc208])
#loc371 = loc(fused[#loc209, #loc210])
#loc372 = loc(fused[#loc211, #loc212])
#loc373 = loc(fused[#loc213, #loc214])
#loc374 = loc(fused[#loc215, #loc216])
#loc375 = loc(fused[#loc217, #loc218])
#loc376 = loc(fused[#loc223, #loc224])
#loc377 = loc(fused[#loc225, #loc226])
#loc378 = loc(fused[#loc227, #loc228])
#loc379 = loc(fused[#loc229, #loc226])
#loc380 = loc(fused[#loc231, #loc232])
#loc381 = loc(fused[#loc234, #loc235])
#loc382 = loc(fused[#loc236, #loc237])
#loc383 = loc(fused[#loc239, #loc238])
#loc384 = loc(fused[#loc242, #loc243])
#loc385 = loc(fused[#loc246, #loc247])
#loc386 = loc(fused[#loc248, #loc249])
#loc387 = loc(fused[#loc251, #loc252])
#loc388 = loc(fused[#loc253, #loc254])
#loc389 = loc(fused[#loc255, #loc256])
#loc390 = loc(fused[#loc257, #loc249])
#loc391 = loc(fused[#loc261, #loc262])
#loc392 = loc(fused[#loc265, #loc266])
#loc393 = loc(fused[#loc267, #loc268])
#loc394 = loc(fused[#loc269, #loc270])
#loc395 = loc(fused[#loc272, #loc273])
#loc396 = loc(fused[#loc274, #loc268])
#loc397 = loc(fused[#loc278, #loc276])
#loc398 = loc(fused[#loc281, #loc282])
#loc399 = loc(fused[#loc284, #loc285])
#loc400 = loc(fused[#loc286, #loc287])
#loc401 = loc(fused[#loc288, #loc285])
