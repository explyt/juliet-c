!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc24 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":65:25)
#loc25 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":65:32)
#loc186 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":186:10)
#loc187 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":186:14)
#loc188 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":186:20)
#loc189 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":186:32)
#loc209 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":152:29)
#loc210 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":152:36)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc243 = loc(fused[#loc24, #loc25])
#loc303 = loc(fused[#loc186, #loc187])
#loc304 = loc(fused[#loc188, #loc189])
#loc310 = loc(fused[#loc209, #loc210])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execl_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2B.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc232)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_connect_socket_execl_42_bad.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc233)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc234)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc235)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc236)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc11)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc237)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc238)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc239)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc240)
  cir.func private @close(!s32i) -> !s32i loc(#loc241)
  cir.func internal private @badSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc24, #loc25])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc243)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc23)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc26)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc245)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc246)
      %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc247)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc248)
      %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc249)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc36)
      %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc36)
      cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc248)
      %11 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc39)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
      %13 = cir.call @strlen(%12) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc39)
      cir.store %13, %8 : !u64i, !cir.ptr<!u64i> loc(#loc249)
      cir.scope {
        cir.do {
          %14 = cir.const #cir.int<2> : !s32i loc(#loc43)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc44)
          %16 = cir.const #cir.int<6> : !s32i loc(#loc45)
          %17 = cir.call @socket(%14, %15, %16) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc46)
          cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc251)
          cir.scope {
            %68 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc51)
            %69 = cir.const #cir.int<1> : !s32i loc(#loc52)
            %70 = cir.unary(minus, %69) : !s32i, !s32i loc(#loc52)
            %71 = cir.cmp(eq, %68, %70) : !s32i, !cir.bool loc(#loc253)
            cir.if %71 {
              cir.break loc(#loc54)
            } loc(#loc254)
          } loc(#loc252)
          %18 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc255)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc57)
          %20 = cir.const #cir.int<16> : !u64i loc(#loc256)
          cir.libc.memset %20 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc257)
          %21 = cir.const #cir.int<2> : !s32i loc(#loc62)
          %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc62)
          %23 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc63)
          cir.store %22, %23 : !u16i, !cir.ptr<!u16i> loc(#loc258)
          %24 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc11)
          %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc11)
          %26 = cir.call @inet_addr(%25) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc65)
          %27 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc66)
          %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc67)
          cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc259)
          %29 = cir.const #cir.int<27015> : !s32i loc(#loc70)
          %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc70)
          %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc71)
          %32 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
          cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc260)
          cir.scope {
            %68 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc77)
            %69 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc262)
            %70 = cir.const #cir.int<16> : !u64i loc(#loc263)
            %71 = cir.cast(integral, %70 : !u64i), !u32i loc(#loc263)
            %72 = cir.call @connect(%68, %69, %71) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc82)
            %73 = cir.const #cir.int<1> : !s32i loc(#loc83)
            %74 = cir.unary(minus, %73) : !s32i, !s32i loc(#loc83)
            %75 = cir.cmp(eq, %72, %74) : !s32i, !cir.bool loc(#loc264)
            cir.if %75 {
              cir.break loc(#loc85)
            } loc(#loc265)
          } loc(#loc261)
          %33 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc86)
          %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc87)
          %35 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc88)
          %36 = cir.ptr_stride(%34 : !cir.ptr<!s8i>, %35 : !u64i), !cir.ptr<!s8i> loc(#loc89)
          %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc266)
          %38 = cir.const #cir.int<1> : !u64i loc(#loc267)
          %39 = cir.const #cir.int<100> : !s32i loc(#loc94)
          %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc94)
          %41 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc95)
          %42 = cir.binop(sub, %40, %41) : !u64i loc(#loc268)
          %43 = cir.const #cir.int<1> : !s32i loc(#loc96)
          %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc96)
          %45 = cir.binop(sub, %42, %44) : !u64i loc(#loc269)
          %46 = cir.binop(mul, %38, %45) : !u64i loc(#loc270)
          %47 = cir.const #cir.int<0> : !s32i loc(#loc98)
          %48 = cir.call @recv(%33, %37, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc99)
          %49 = cir.cast(integral, %48 : !s64i), !s32i loc(#loc99)
          cir.store %49, %4 : !s32i, !cir.ptr<!s32i> loc(#loc271)
          cir.scope {
            %68 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc104)
            %69 = cir.const #cir.int<1> : !s32i loc(#loc105)
            %70 = cir.unary(minus, %69) : !s32i, !s32i loc(#loc105)
            %71 = cir.cmp(eq, %68, %70) : !s32i, !cir.bool loc(#loc273)
            %72 = cir.ternary(%71, true {
              %73 = cir.const #true loc(#loc106)
              cir.yield %73 : !cir.bool loc(#loc106)
            }, false {
              %73 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc107)
              %74 = cir.const #cir.int<0> : !s32i loc(#loc108)
              %75 = cir.cmp(eq, %73, %74) : !s32i, !cir.bool loc(#loc274)
              %76 = cir.ternary(%75, true {
                %77 = cir.const #true loc(#loc106)
                cir.yield %77 : !cir.bool loc(#loc106)
              }, false {
                %77 = cir.const #false loc(#loc106)
                cir.yield %77 : !cir.bool loc(#loc106)
              }) : (!cir.bool) -> !cir.bool loc(#loc106)
              cir.yield %76 : !cir.bool loc(#loc106)
            }) : (!cir.bool) -> !cir.bool loc(#loc106)
            cir.if %72 {
              cir.break loc(#loc110)
            } loc(#loc275)
          } loc(#loc272)
          %50 = cir.const #cir.int<0> : !s32i loc(#loc111)
          %51 = cir.cast(integral, %50 : !s32i), !s8i loc(#loc111)
          %52 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc112)
          %53 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc113)
          %54 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc114)
          %55 = cir.cast(integral, %54 : !s32i), !u64i loc(#loc114)
          %56 = cir.const #cir.int<1> : !u64i loc(#loc276)
          %57 = cir.binop(div, %55, %56) : !u64i loc(#loc277)
          %58 = cir.binop(add, %53, %57) : !u64i loc(#loc278)
          %59 = cir.ptr_stride(%52 : !cir.ptr<!s8i>, %58 : !u64i), !cir.ptr<!s8i> loc(#loc117)
          cir.store %51, %59 : !s8i, !cir.ptr<!s8i> loc(#loc279)
          %60 = cir.get_global @strchr : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !s32i)>> loc(#loc118)
          %61 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
          %62 = cir.const #cir.int<13> : !s32i loc(#loc120)
          %63 = cir.call @strchr(%61, %62) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc118)
          cir.store %63, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc280)
          cir.scope {
            %68 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
            %69 = cir.cast(ptr_to_bool, %68 : !cir.ptr<!s8i>), !cir.bool loc(#loc125)
            cir.if %69 {
              %70 = cir.const #cir.int<0> : !s32i loc(#loc127)
              %71 = cir.cast(integral, %70 : !s32i), !s8i loc(#loc127)
              %72 = cir.load deref %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc128)
              cir.store %71, %72 : !s8i, !cir.ptr<!s8i> loc(#loc283)
            } loc(#loc282)
          } loc(#loc281)
          %64 = cir.get_global @strchr : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !s32i)>> loc(#loc130)
          %65 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
          %66 = cir.const #cir.int<10> : !s32i loc(#loc132)
          %67 = cir.call @strchr(%65, %66) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc130)
          cir.store %67, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc284)
          cir.scope {
            %68 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc137)
            %69 = cir.cast(ptr_to_bool, %68 : !cir.ptr<!s8i>), !cir.bool loc(#loc137)
            cir.if %69 {
              %70 = cir.const #cir.int<0> : !s32i loc(#loc139)
              %71 = cir.cast(integral, %70 : !s32i), !s8i loc(#loc139)
              %72 = cir.load deref %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc140)
              cir.store %71, %72 : !s8i, !cir.ptr<!s8i> loc(#loc287)
            } loc(#loc286)
          } loc(#loc285)
          cir.yield loc(#loc42)
        } while {
          %14 = cir.const #cir.int<0> : !s32i loc(#loc142)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc142)
          cir.condition(%15) loc(#loc142)
        } loc(#loc250)
      } loc(#loc250)
      cir.scope {
        %14 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc145)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc146)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc146)
        %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc289)
        cir.if %17 {
          %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc148)
          %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc149)
        } loc(#loc290)
      } loc(#loc288)
    } loc(#loc244)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc150)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc291)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc291)
    cir.return %3 : !cir.ptr<!s8i> loc(#loc291)
  } loc(#loc242)
  cir.func private @execl(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc292)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"/bin/sh\00" : !cir.array<!s8i x 8>> : !cir.array<!s8i x 8> {alignment = 1 : i64} loc(#loc154)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"-c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc155)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execl_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc294)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc233)
    %2 = cir.get_global @__const.CWE78_OS_Command_Injection__char_connect_socket_execl_42_bad.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc233)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc233)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc160)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc295)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc162)
    %5 = cir.call @badSource(%4) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc163)
    cir.store %5, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc296)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc154)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc154)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc166)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc166)
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc155)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc155)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc167)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc168)
    %14 = cir.call @execl(%7, %9, %11, %12, %13) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc169)
    cir.return loc(#loc157)
  } loc(#loc293)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execl_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc298)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc172)
    cir.return loc(#loc171)
  } loc(#loc297)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc299)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc300)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc301)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc180)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc181)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc182)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc183)
  cir.func @main(%arg0: !s32i loc(fused[#loc186, #loc187]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc188, #loc189])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc303)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc304)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc185)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc190)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc191)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc192)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc192)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc193)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc180)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc180)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc194)
    %8 = cir.get_global @CWE78_OS_Command_Injection__char_connect_socket_execl_42_good : !cir.ptr<!cir.func<!void ()>> loc(#loc305)
    cir.call @CWE78_OS_Command_Injection__char_connect_socket_execl_42_good() : () -> () loc(#loc195)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc181)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc181)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc197)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc182)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc182)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc198)
    %13 = cir.get_global @CWE78_OS_Command_Injection__char_connect_socket_execl_42_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc306)
    cir.call @CWE78_OS_Command_Injection__char_connect_socket_execl_42_bad() : () -> () loc(#loc199)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc183)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc183)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc201)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc202)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc307)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc307)
    cir.return %17 : !s32i loc(#loc307)
  } loc(#loc302)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc308)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc206)
  cir.func internal private @goodG2BSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc209, #loc210])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc310)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc208)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc211)
    %2 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc212)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc213)
    %4 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc206)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc206)
    %6 = cir.call @strcat(%3, %5) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc212)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc214)
    cir.store %7, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc311)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc311)
    cir.return %8 : !cir.ptr<!s8i> loc(#loc311)
  } loc(#loc309)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc313)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc232)
    %2 = cir.get_global @__const.goodG2B.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc232)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc232)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc220)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc314)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc222)
    %5 = cir.call @goodG2BSource(%4) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc223)
    cir.store %5, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc315)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc226)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc226)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc227)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc227)
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc228)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc228)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc229)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc230)
    %14 = cir.call @execl(%7, %9, %11, %12, %13) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc231)
    cir.return loc(#loc217)
  } loc(#loc312)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":163:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":163:28)
#loc3 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":140:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":140:28)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/sys/socket.h":102:1)
#loc8 = loc("/usr/include/sys/socket.h":102:62)
#loc9 = loc("/usr/include/arpa/inet.h":34:1)
#loc10 = loc("/usr/include/arpa/inet.h":34:47)
#loc11 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":94:49)
#loc12 = loc("/usr/include/netinet/in.h":404:1)
#loc13 = loc("/usr/include/netinet/in.h":405:40)
#loc14 = loc("/usr/include/sys/socket.h":126:1)
#loc15 = loc("/usr/include/sys/socket.h":126:75)
#loc16 = loc("/usr/include/sys/socket.h":145:1)
#loc17 = loc("/usr/include/sys/socket.h":145:68)
#loc18 = loc("/usr/include/string.h":246:1)
#loc19 = loc("/usr/include/string.h":247:33)
#loc20 = loc("/usr/include/unistd.h":358:1)
#loc21 = loc("/usr/include/unistd.h":358:27)
#loc22 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":65:1)
#loc23 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":135:1)
#loc26 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":66:1)
#loc27 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":67:5)
#loc28 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":133:5)
#loc29 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":72:9)
#loc30 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":72:13)
#loc31 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":73:9)
#loc32 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":73:28)
#loc33 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":74:9)
#loc34 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":74:15)
#loc35 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":75:9)
#loc36 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":75:32)
#loc37 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":76:9)
#loc38 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":76:37)
#loc39 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":76:26)
#loc40 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":76:33)
#loc41 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":77:9)
#loc42 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":122:17)
#loc43 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":87:36)
#loc44 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":87:45)
#loc45 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":87:58)
#loc46 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":87:29)
#loc47 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":87:13)
#loc48 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":87:69)
#loc49 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":88:13)
#loc50 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":91:13)
#loc51 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":88:17)
#loc52 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":88:34)
#loc53 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":89:13)
#loc54 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":90:17)
#loc55 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":92:20)
#loc56 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":92:21)
#loc57 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":92:30)
#loc58 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":92:33)
#loc59 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":92:47)
#loc60 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":92:13)
#loc61 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":92:48)
#loc62 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":93:34)
#loc63 = loc("/usr/include/netinet/in.h":249:5)
#loc64 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":93:13)
#loc65 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":94:39)
#loc66 = loc("/usr/include/netinet/in.h":251:20)
#loc67 = loc("/usr/include/netinet/in.h":33:15)
#loc68 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":94:13)
#loc69 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":94:59)
#loc70 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":95:38)
#loc71 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":95:32)
#loc72 = loc("/usr/include/netinet/in.h":250:15)
#loc73 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":95:13)
#loc74 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":95:46)
#loc75 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":96:13)
#loc76 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":99:13)
#loc77 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":96:25)
#loc78 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":96:58)
#loc79 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":96:59)
#loc80 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":96:68)
#loc81 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":96:82)
#loc82 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":96:17)
#loc83 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":96:88)
#loc84 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":97:13)
#loc85 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":98:17)
#loc86 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":103:31)
#loc87 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":103:55)
#loc88 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":103:62)
#loc89 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":103:60)
#loc90 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":103:46)
#loc91 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":103:69)
#loc92 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":103:72)
#loc93 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":103:83)
#loc94 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":103:88)
#loc95 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":103:94)
#loc96 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":103:104)
#loc97 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":103:105)
#loc98 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":103:108)
#loc99 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":103:26)
#loc100 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":103:13)
#loc101 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":103:109)
#loc102 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":104:13)
#loc103 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":107:13)
#loc104 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":104:17)
#loc105 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":104:31)
#loc106 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":104:44)
#loc107 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":104:47)
#loc108 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":104:61)
#loc109 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":105:13)
#loc110 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":106:17)
#loc111 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":109:57)
#loc112 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":109:13)
#loc113 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":109:18)
#loc114 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":109:28)
#loc115 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":109:41)
#loc116 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":109:52)
#loc117 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":109:53)
#loc118 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":111:23)
#loc119 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":111:30)
#loc120 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":111:36)
#loc121 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":111:13)
#loc122 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":111:40)
#loc123 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":112:13)
#loc124 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":115:13)
#loc125 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":112:17)
#loc126 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":113:13)
#loc127 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":114:28)
#loc128 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":114:18)
#loc129 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":114:17)
#loc130 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":116:23)
#loc131 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":116:30)
#loc132 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":116:36)
#loc133 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":116:13)
#loc134 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":116:40)
#loc135 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":117:13)
#loc136 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":120:13)
#loc137 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":117:17)
#loc138 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":118:13)
#loc139 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":119:28)
#loc140 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":119:18)
#loc141 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":119:17)
#loc142 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":122:16)
#loc143 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":123:9)
#loc144 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":126:9)
#loc145 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":123:13)
#loc146 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":123:30)
#loc147 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":124:9)
#loc148 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":125:26)
#loc149 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":125:13)
#loc150 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":134:12)
#loc151 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":134:5)
#loc152 = loc("/usr/include/unistd.h":594:1)
#loc153 = loc("/usr/include/unistd.h":595:14)
#loc154 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":145:11)
#loc155 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":145:47)
#loc156 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":137:1)
#loc157 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":146:1)
#loc158 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":139:5)
#loc159 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":139:12)
#loc160 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":141:12)
#loc161 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":141:5)
#loc162 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":142:22)
#loc163 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":142:12)
#loc164 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":142:5)
#loc165 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":142:26)
#loc166 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":145:29)
#loc167 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":145:61)
#loc168 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":145:75)
#loc169 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":145:5)
#loc170 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":171:1)
#loc171 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":174:1)
#loc172 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":173:5)
#loc173 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":173:13)
#loc174 = loc("/usr/include/stdlib.h":575:1)
#loc175 = loc("/usr/include/stdlib.h":575:41)
#loc176 = loc("/usr/include/time.h":76:1)
#loc177 = loc("/usr/include/time.h":76:38)
#loc178 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc179 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc180 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":191:15)
#loc181 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":193:15)
#loc182 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":196:15)
#loc183 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":198:15)
#loc184 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":186:1)
#loc185 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":201:1)
#loc190 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":187:1)
#loc191 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":189:27)
#loc192 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":189:22)
#loc193 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":189:5)
#loc194 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":191:5)
#loc195 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":192:5)
#loc196 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":192:67)
#loc197 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":193:5)
#loc198 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":196:5)
#loc199 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":197:5)
#loc200 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":197:66)
#loc201 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":198:5)
#loc202 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":200:12)
#loc203 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":200:5)
#loc204 = loc("/usr/include/string.h":149:1)
#loc205 = loc("/usr/include/string.h":150:14)
#loc206 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":155:18)
#loc207 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":152:1)
#loc208 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":157:1)
#loc211 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":153:1)
#loc212 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":155:5)
#loc213 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":155:12)
#loc214 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":156:12)
#loc215 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":156:5)
#loc216 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":160:1)
#loc217 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":169:1)
#loc218 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":162:5)
#loc219 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":162:12)
#loc220 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":164:12)
#loc221 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":164:5)
#loc222 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":165:26)
#loc223 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":165:12)
#loc224 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":165:5)
#loc225 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":165:30)
#loc226 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":168:11)
#loc227 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":168:29)
#loc228 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":168:47)
#loc229 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":168:61)
#loc230 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":168:75)
#loc231 = loc("CWE78_OS_Command_Injection__char_connect_socket_execl_42.c":168:5)
#loc232 = loc(fused[#loc1, #loc2])
#loc233 = loc(fused[#loc3, #loc4])
#loc234 = loc(fused[#loc5, #loc6])
#loc235 = loc(fused[#loc7, #loc8])
#loc236 = loc(fused[#loc9, #loc10])
#loc237 = loc(fused[#loc12, #loc13])
#loc238 = loc(fused[#loc14, #loc15])
#loc239 = loc(fused[#loc16, #loc17])
#loc240 = loc(fused[#loc18, #loc19])
#loc241 = loc(fused[#loc20, #loc21])
#loc242 = loc(fused[#loc22, #loc23])
#loc244 = loc(fused[#loc27, #loc28])
#loc245 = loc(fused[#loc29, #loc30])
#loc246 = loc(fused[#loc31, #loc32])
#loc247 = loc(fused[#loc33, #loc34])
#loc248 = loc(fused[#loc35, #loc36])
#loc249 = loc(fused[#loc37, #loc38])
#loc250 = loc(fused[#loc41, #loc42])
#loc251 = loc(fused[#loc47, #loc48])
#loc252 = loc(fused[#loc49, #loc50])
#loc253 = loc(fused[#loc51, #loc52])
#loc254 = loc(fused[#loc53, #loc50])
#loc255 = loc(fused[#loc55, #loc56])
#loc256 = loc(fused[#loc58, #loc59])
#loc257 = loc(fused[#loc60, #loc61])
#loc258 = loc(fused[#loc64, #loc62])
#loc259 = loc(fused[#loc68, #loc69])
#loc260 = loc(fused[#loc73, #loc74])
#loc261 = loc(fused[#loc75, #loc76])
#loc262 = loc(fused[#loc78, #loc79])
#loc263 = loc(fused[#loc80, #loc81])
#loc264 = loc(fused[#loc82, #loc83])
#loc265 = loc(fused[#loc84, #loc76])
#loc266 = loc(fused[#loc90, #loc91])
#loc267 = loc(fused[#loc92, #loc93])
#loc268 = loc(fused[#loc94, #loc95])
#loc269 = loc(fused[#loc94, #loc96])
#loc270 = loc(fused[#loc92, #loc97])
#loc271 = loc(fused[#loc100, #loc101])
#loc272 = loc(fused[#loc102, #loc103])
#loc273 = loc(fused[#loc104, #loc105])
#loc274 = loc(fused[#loc107, #loc108])
#loc275 = loc(fused[#loc109, #loc103])
#loc276 = loc(fused[#loc115, #loc116])
#loc277 = loc(fused[#loc114, #loc116])
#loc278 = loc(fused[#loc113, #loc116])
#loc279 = loc(fused[#loc112, #loc111])
#loc280 = loc(fused[#loc121, #loc122])
#loc281 = loc(fused[#loc123, #loc124])
#loc282 = loc(fused[#loc126, #loc124])
#loc283 = loc(fused[#loc129, #loc127])
#loc284 = loc(fused[#loc133, #loc134])
#loc285 = loc(fused[#loc135, #loc136])
#loc286 = loc(fused[#loc138, #loc136])
#loc287 = loc(fused[#loc141, #loc139])
#loc288 = loc(fused[#loc143, #loc144])
#loc289 = loc(fused[#loc145, #loc146])
#loc290 = loc(fused[#loc147, #loc144])
#loc291 = loc(fused[#loc151, #loc150])
#loc292 = loc(fused[#loc152, #loc153])
#loc293 = loc(fused[#loc156, #loc157])
#loc294 = loc(fused[#loc158, #loc159])
#loc295 = loc(fused[#loc161, #loc160])
#loc296 = loc(fused[#loc164, #loc165])
#loc297 = loc(fused[#loc170, #loc171])
#loc298 = loc(fused[#loc172, #loc173])
#loc299 = loc(fused[#loc174, #loc175])
#loc300 = loc(fused[#loc176, #loc177])
#loc301 = loc(fused[#loc178, #loc179])
#loc302 = loc(fused[#loc184, #loc185])
#loc305 = loc(fused[#loc195, #loc196])
#loc306 = loc(fused[#loc199, #loc200])
#loc307 = loc(fused[#loc203, #loc202])
#loc308 = loc(fused[#loc204, #loc205])
#loc309 = loc(fused[#loc207, #loc208])
#loc311 = loc(fused[#loc215, #loc214])
#loc312 = loc(fused[#loc216, #loc217])
#loc313 = loc(fused[#loc218, #loc219])
#loc314 = loc(fused[#loc221, #loc220])
#loc315 = loc(fused[#loc224, #loc225])
