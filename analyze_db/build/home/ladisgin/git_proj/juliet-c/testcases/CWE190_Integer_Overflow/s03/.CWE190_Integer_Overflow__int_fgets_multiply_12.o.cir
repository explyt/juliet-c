!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc238)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc239)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc240)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc241)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc242)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private @printIntLine(!s32i) loc(#loc243)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc14)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_multiply_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc245)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc246)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc247)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc248)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc25)
    cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc249)
    cir.br ^bb1 loc(#loc250)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc251)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc251)
    %7 = cir.call %6() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc29)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc29)
    cir.brcond %8 ^bb2, ^bb10 loc(#loc252)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc253)
  ^bb3:  // pred: ^bb2
    %9 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc245)
    cir.store %9, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc245)
    cir.br ^bb4 loc(#loc254)
  ^bb4:  // pred: ^bb3
    %10 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc38)
    %11 = cir.const #cir.int<3> : !s32i loc(#loc39)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc39)
    %13 = cir.const #cir.int<4> : !u64i loc(#loc39)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc39)
    %15 = cir.const #cir.int<2> : !s32i loc(#loc39)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc39)
    %17 = cir.binop(add, %14, %16) : !u64i loc(#loc39)
    %18 = cir.cast(integral, %17 : !u64i), !s32i loc(#loc39)
    %19 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc240)
    %20 = cir.load %19 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc40)
    %21 = cir.call @fgets(%10, %18, %20) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc41)
    %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc42)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc42)
    %24 = cir.cmp(ne, %21, %23) : !cir.ptr<!s8i>, !cir.bool loc(#loc255)
    cir.brcond %24 ^bb5, ^bb6 loc(#loc256)
  ^bb5:  // pred: ^bb4
    %25 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc46)
    %26 = cir.call @atoi(%25) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc47)
    cir.store %26, %3 : !s32i, !cir.ptr<!s32i> loc(#loc257)
    cir.br ^bb7 loc(#loc44)
  ^bb6:  // pred: ^bb4
    %27 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
    %28 = cir.cast(array_to_ptrdecay, %27 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
    cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    cir.br ^bb7 loc(#loc37)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc37)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc35)
  ^bb9:  // pred: ^bb8
    cir.br ^bb11 loc(#loc32)
  ^bb10:  // pred: ^bb1
    %29 = cir.const #cir.int<2> : !s32i loc(#loc51)
    cir.store %29, %3 : !s32i, !cir.ptr<!s32i> loc(#loc258)
    cir.br ^bb11 loc(#loc28)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc28)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc259)
  ^bb13:  // pred: ^bb12
    %30 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc260)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc260)
    %32 = cir.call %31() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc55)
    %33 = cir.cast(int_to_bool, %32 : !s32i), !cir.bool loc(#loc55)
    cir.brcond %33 ^bb14, ^bb19 loc(#loc261)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc262)
  ^bb15:  // pred: ^bb14
    %34 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    %35 = cir.const #cir.int<0> : !s32i loc(#loc63)
    %36 = cir.cmp(gt, %34, %35) : !s32i, !cir.bool loc(#loc263)
    cir.brcond %36 ^bb16, ^bb17 loc(#loc264)
  ^bb16:  // pred: ^bb15
    %37 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc65)
    %38 = cir.const #cir.int<2> : !s32i loc(#loc20)
    %39 = cir.binop(mul, %37, %38) nsw : !s32i loc(#loc65)
    cir.store %39, %1 : !s32i, !cir.ptr<!s32i> loc(#loc246)
    %40 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    cir.call @printIntLine(%40) : (!s32i) -> () loc(#loc67)
    cir.br ^bb17 loc(#loc61)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc61)
  ^bb18:  // pred: ^bb17
    cir.br ^bb29 loc(#loc58)
  ^bb19:  // pred: ^bb13
    cir.br ^bb20 loc(#loc265)
  ^bb20:  // pred: ^bb19
    %41 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    %42 = cir.const #cir.int<0> : !s32i loc(#loc71)
    %43 = cir.cmp(gt, %41, %42) : !s32i, !cir.bool loc(#loc266)
    cir.brcond %43 ^bb21, ^bb27 loc(#loc267)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc268)
  ^bb22:  // pred: ^bb21
    %44 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    %45 = cir.const #cir.int<2147483647> : !s32i loc(#loc76)
    %46 = cir.const #cir.int<2> : !s32i loc(#loc77)
    %47 = cir.binop(div, %45, %46) : !s32i loc(#loc269)
    %48 = cir.cmp(lt, %44, %47) : !s32i, !cir.bool loc(#loc270)
    cir.brcond %48 ^bb23, ^bb24 loc(#loc271)
  ^bb23:  // pred: ^bb22
    %49 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    %50 = cir.const #cir.int<2> : !s32i loc(#loc22)
    %51 = cir.binop(mul, %49, %50) nsw : !s32i loc(#loc82)
    cir.store %51, %2 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    %52 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc83)
    cir.call @printIntLine(%52) : (!s32i) -> () loc(#loc84)
    cir.br ^bb25 loc(#loc80)
  ^bb24:  // pred: ^bb22
    %53 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc14)
    %54 = cir.cast(array_to_ptrdecay, %53 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc14)
    cir.call @printLine(%54) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    cir.br ^bb25 loc(#loc74)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    cir.br ^bb26 loc(#loc74)
  ^bb26:  // pred: ^bb25
    cir.br ^bb27 loc(#loc69)
  ^bb27:  // 2 preds: ^bb20, ^bb26
    cir.br ^bb28 loc(#loc69)
  ^bb28:  // pred: ^bb27
    cir.br ^bb29 loc(#loc54)
  ^bb29:  // 2 preds: ^bb18, ^bb28
    cir.br ^bb30 loc(#loc54)
  ^bb30:  // pred: ^bb29
    cir.return loc(#loc16)
  } loc(#loc244)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_multiply_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc273)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc88)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc274)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc90)
    cir.return loc(#loc87)
  } loc(#loc272)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc276)
    %1 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc277)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc278)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc279)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc280)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc104)
    cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc281)
    cir.br ^bb1 loc(#loc282)
  ^bb1:  // pred: ^bb0
    %6 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc283)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc283)
    %8 = cir.call %7() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc108)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc108)
    cir.brcond %9 ^bb2, ^bb10 loc(#loc284)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc285)
  ^bb3:  // pred: ^bb2
    %10 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc276)
    cir.store %10, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc276)
    cir.br ^bb4 loc(#loc286)
  ^bb4:  // pred: ^bb3
    %11 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc117)
    %12 = cir.const #cir.int<3> : !s32i loc(#loc118)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc118)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc118)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc118)
    %16 = cir.const #cir.int<2> : !s32i loc(#loc118)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc118)
    %18 = cir.binop(add, %15, %17) : !u64i loc(#loc118)
    %19 = cir.cast(integral, %18 : !u64i), !s32i loc(#loc118)
    %20 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc240)
    %21 = cir.load %20 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc119)
    %22 = cir.call @fgets(%11, %19, %21) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc120)
    %23 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc121)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc121)
    %25 = cir.cmp(ne, %22, %24) : !cir.ptr<!s8i>, !cir.bool loc(#loc287)
    cir.brcond %25 ^bb5, ^bb6 loc(#loc288)
  ^bb5:  // pred: ^bb4
    %26 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc125)
    %27 = cir.call @atoi(%26) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc126)
    cir.store %27, %4 : !s32i, !cir.ptr<!s32i> loc(#loc289)
    cir.br ^bb7 loc(#loc123)
  ^bb6:  // pred: ^bb4
    %28 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc129)
    %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc129)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc130)
    cir.br ^bb7 loc(#loc116)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc116)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc114)
  ^bb9:  // pred: ^bb8
    cir.br ^bb18 loc(#loc111)
  ^bb10:  // pred: ^bb1
    cir.br ^bb11 loc(#loc290)
  ^bb11:  // pred: ^bb10
    %30 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc277)
    cir.store %30, %1 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc277)
    cir.br ^bb12 loc(#loc291)
  ^bb12:  // pred: ^bb11
    %31 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc135)
    %32 = cir.const #cir.int<3> : !s32i loc(#loc136)
    %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc136)
    %34 = cir.const #cir.int<4> : !u64i loc(#loc136)
    %35 = cir.binop(mul, %33, %34) : !u64i loc(#loc136)
    %36 = cir.const #cir.int<2> : !s32i loc(#loc136)
    %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc136)
    %38 = cir.binop(add, %35, %37) : !u64i loc(#loc136)
    %39 = cir.cast(integral, %38 : !u64i), !s32i loc(#loc136)
    %40 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc240)
    %41 = cir.load %40 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc137)
    %42 = cir.call @fgets(%31, %39, %41) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc138)
    %43 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc139)
    %44 = cir.cast(bitcast, %43 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc139)
    %45 = cir.cmp(ne, %42, %44) : !cir.ptr<!s8i>, !cir.bool loc(#loc292)
    cir.brcond %45 ^bb13, ^bb14 loc(#loc293)
  ^bb13:  // pred: ^bb12
    %46 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc143)
    %47 = cir.call @atoi(%46) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc144)
    cir.store %47, %4 : !s32i, !cir.ptr<!s32i> loc(#loc294)
    cir.br ^bb15 loc(#loc141)
  ^bb14:  // pred: ^bb12
    %48 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc147)
    %49 = cir.cast(array_to_ptrdecay, %48 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc147)
    cir.call @printLine(%49) : (!cir.ptr<!s8i>) -> () loc(#loc148)
    cir.br ^bb15 loc(#loc134)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc134)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc132)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc107)
  ^bb18:  // 2 preds: ^bb9, ^bb17
    cir.br ^bb19 loc(#loc107)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc295)
  ^bb20:  // pred: ^bb19
    %50 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc296)
    %51 = cir.cast(bitcast, %50 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc296)
    %52 = cir.call %51() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc151)
    %53 = cir.cast(int_to_bool, %52 : !s32i), !cir.bool loc(#loc151)
    cir.brcond %53 ^bb21, ^bb31 loc(#loc297)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc298)
  ^bb22:  // pred: ^bb21
    %54 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    %55 = cir.const #cir.int<0> : !s32i loc(#loc159)
    %56 = cir.cmp(gt, %54, %55) : !s32i, !cir.bool loc(#loc299)
    cir.brcond %56 ^bb23, ^bb29 loc(#loc300)
  ^bb23:  // pred: ^bb22
    cir.br ^bb24 loc(#loc301)
  ^bb24:  // pred: ^bb23
    %57 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc163)
    %58 = cir.const #cir.int<2147483647> : !s32i loc(#loc164)
    %59 = cir.const #cir.int<2> : !s32i loc(#loc165)
    %60 = cir.binop(div, %58, %59) : !s32i loc(#loc302)
    %61 = cir.cmp(lt, %57, %60) : !s32i, !cir.bool loc(#loc303)
    cir.brcond %61 ^bb25, ^bb26 loc(#loc304)
  ^bb25:  // pred: ^bb24
    %62 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc170)
    %63 = cir.const #cir.int<2> : !s32i loc(#loc99)
    %64 = cir.binop(mul, %62, %63) nsw : !s32i loc(#loc170)
    cir.store %64, %2 : !s32i, !cir.ptr<!s32i> loc(#loc278)
    %65 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc171)
    cir.call @printIntLine(%65) : (!s32i) -> () loc(#loc172)
    cir.br ^bb27 loc(#loc168)
  ^bb26:  // pred: ^bb24
    %66 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc173)
    %67 = cir.cast(array_to_ptrdecay, %66 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc173)
    cir.call @printLine(%67) : (!cir.ptr<!s8i>) -> () loc(#loc174)
    cir.br ^bb27 loc(#loc162)
  ^bb27:  // 2 preds: ^bb25, ^bb26
    cir.br ^bb28 loc(#loc162)
  ^bb28:  // pred: ^bb27
    cir.br ^bb29 loc(#loc157)
  ^bb29:  // 2 preds: ^bb22, ^bb28
    cir.br ^bb30 loc(#loc157)
  ^bb30:  // pred: ^bb29
    cir.br ^bb41 loc(#loc154)
  ^bb31:  // pred: ^bb20
    cir.br ^bb32 loc(#loc305)
  ^bb32:  // pred: ^bb31
    %68 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc177)
    %69 = cir.const #cir.int<0> : !s32i loc(#loc178)
    %70 = cir.cmp(gt, %68, %69) : !s32i, !cir.bool loc(#loc306)
    cir.brcond %70 ^bb33, ^bb39 loc(#loc307)
  ^bb33:  // pred: ^bb32
    cir.br ^bb34 loc(#loc308)
  ^bb34:  // pred: ^bb33
    %71 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc182)
    %72 = cir.const #cir.int<2147483647> : !s32i loc(#loc183)
    %73 = cir.const #cir.int<2> : !s32i loc(#loc184)
    %74 = cir.binop(div, %72, %73) : !s32i loc(#loc309)
    %75 = cir.cmp(lt, %71, %74) : !s32i, !cir.bool loc(#loc310)
    cir.brcond %75 ^bb35, ^bb36 loc(#loc311)
  ^bb35:  // pred: ^bb34
    %76 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc189)
    %77 = cir.const #cir.int<2> : !s32i loc(#loc101)
    %78 = cir.binop(mul, %76, %77) nsw : !s32i loc(#loc189)
    cir.store %78, %3 : !s32i, !cir.ptr<!s32i> loc(#loc279)
    %79 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc190)
    cir.call @printIntLine(%79) : (!s32i) -> () loc(#loc191)
    cir.br ^bb37 loc(#loc187)
  ^bb36:  // pred: ^bb34
    %80 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc192)
    %81 = cir.cast(array_to_ptrdecay, %80 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc192)
    cir.call @printLine(%81) : (!cir.ptr<!s8i>) -> () loc(#loc193)
    cir.br ^bb37 loc(#loc181)
  ^bb37:  // 2 preds: ^bb35, ^bb36
    cir.br ^bb38 loc(#loc181)
  ^bb38:  // pred: ^bb37
    cir.br ^bb39 loc(#loc176)
  ^bb39:  // 2 preds: ^bb32, ^bb38
    cir.br ^bb40 loc(#loc176)
  ^bb40:  // pred: ^bb39
    cir.br ^bb41 loc(#loc150)
  ^bb41:  // 2 preds: ^bb30, ^bb40
    cir.br ^bb42 loc(#loc150)
  ^bb42:  // pred: ^bb41
    cir.return loc(#loc93)
  } loc(#loc275)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc313)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc314)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc315)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc202)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc316)
    cir.br ^bb1 loc(#loc317)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc318)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc318)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc206)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc206)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc319)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc211)
    cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc320)
    cir.br ^bb4 loc(#loc209)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<2> : !s32i loc(#loc213)
    cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc321)
    cir.br ^bb4 loc(#loc205)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc205)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc322)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc323)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc323)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc217)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc217)
    cir.brcond %13 ^bb7, ^bb12 loc(#loc324)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc325)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc224)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc225)
    %16 = cir.cmp(gt, %14, %15) : !s32i, !cir.bool loc(#loc326)
    cir.brcond %16 ^bb9, ^bb10 loc(#loc327)
  ^bb9:  // pred: ^bb8
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc227)
    %18 = cir.const #cir.int<2> : !s32i loc(#loc197)
    %19 = cir.binop(mul, %17, %18) nsw : !s32i loc(#loc227)
    cir.store %19, %0 : !s32i, !cir.ptr<!s32i> loc(#loc313)
    %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc228)
    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc229)
    cir.br ^bb10 loc(#loc223)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc223)
  ^bb11:  // pred: ^bb10
    cir.br ^bb17 loc(#loc220)
  ^bb12:  // pred: ^bb6
    cir.br ^bb13 loc(#loc328)
  ^bb13:  // pred: ^bb12
    %21 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc232)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc233)
    %23 = cir.cmp(gt, %21, %22) : !s32i, !cir.bool loc(#loc329)
    cir.brcond %23 ^bb14, ^bb15 loc(#loc330)
  ^bb14:  // pred: ^bb13
    %24 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc235)
    %25 = cir.const #cir.int<2> : !s32i loc(#loc199)
    %26 = cir.binop(mul, %24, %25) nsw : !s32i loc(#loc235)
    cir.store %26, %1 : !s32i, !cir.ptr<!s32i> loc(#loc314)
    %27 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc236)
    cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc237)
    cir.br ^bb15 loc(#loc231)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc231)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc216)
  ^bb17:  // 2 preds: ^bb11, ^bb16
    cir.br ^bb18 loc(#loc216)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc195)
  } loc(#loc312)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":105:1)
#loc8 = loc("/usr/include/stdlib.h":106:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":41:27)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":71:27)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":24:1)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":75:1)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":32:13)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":32:49)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":55:13)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":55:33)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":66:17)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":66:37)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":26:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":26:9)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":28:12)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":28:5)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":29:5)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":49:5)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":29:8)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":29:33)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":30:5)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":44:5)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":46:5)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":31:9)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":43:9)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":34:13)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":42:13)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":34:23)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":34:36)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":34:53)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":34:17)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":34:63)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":35:13)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":38:13)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":40:13)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":37:29)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":37:24)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":37:17)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":37:40)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":41:17)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":48:16)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":48:9)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":50:5)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":74:5)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":50:8)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":50:33)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":51:5)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":58:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":60:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":52:9)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":57:9)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":52:12)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":52:19)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":53:9)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":55:26)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":56:26)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":56:13)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":61:9)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":73:9)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":61:12)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":61:19)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":62:9)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":64:13)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":72:13)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":64:17)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":64:25)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":64:33)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":64:34)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":65:13)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":68:13)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":70:13)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":66:30)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":67:30)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":67:17)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":71:17)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":193:1)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":197:1)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":195:5)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":195:13)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":196:5)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":196:13)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":84:1)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":153:1)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":92:13)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":92:49)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":108:13)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":108:49)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":128:17)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":128:37)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":144:17)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":144:37)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":86:5)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":86:9)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":88:12)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":88:5)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":89:5)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":120:5)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":89:8)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":89:33)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":90:5)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":104:5)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":106:5)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":91:9)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":103:9)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":94:13)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":102:13)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":94:23)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":94:36)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":94:53)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":94:17)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":94:63)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":95:13)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":98:13)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":100:13)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":97:29)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":97:24)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":97:17)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":97:40)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":101:27)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":101:17)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":107:9)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":119:9)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":110:13)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":118:13)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":110:23)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":110:36)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":110:53)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":110:17)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":110:63)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":111:13)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":114:13)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":116:13)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":113:29)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":113:24)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":113:17)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":113:40)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":117:27)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":117:17)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":121:5)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":152:5)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":121:8)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":121:33)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":122:5)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":136:5)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":138:5)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":123:9)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":135:9)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":123:12)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":123:19)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":124:9)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":126:13)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":134:13)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":126:17)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":126:25)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":126:33)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":126:34)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":127:13)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":130:13)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":132:13)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":128:30)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":129:30)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":129:17)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":133:27)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":133:17)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":139:9)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":151:9)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":139:12)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":139:19)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":140:9)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":142:13)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":150:13)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":142:17)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":142:25)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":142:33)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":142:34)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":143:13)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":146:13)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":148:13)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":144:30)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":145:30)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":145:17)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":149:27)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":149:17)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":158:1)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":191:1)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":178:13)
#loc197 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":178:33)
#loc198 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":187:13)
#loc199 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":187:33)
#loc200 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":160:5)
#loc201 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":160:9)
#loc202 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":162:12)
#loc203 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":162:5)
#loc204 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":163:5)
#loc205 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":172:5)
#loc206 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":163:8)
#loc207 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":163:33)
#loc208 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":164:5)
#loc209 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":167:5)
#loc210 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":169:5)
#loc211 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":166:16)
#loc212 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":166:9)
#loc213 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":171:16)
#loc214 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":171:9)
#loc215 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":173:5)
#loc216 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":190:5)
#loc217 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":173:8)
#loc218 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":173:33)
#loc219 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":174:5)
#loc220 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":181:5)
#loc221 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":183:5)
#loc222 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":175:9)
#loc223 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":180:9)
#loc224 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":175:12)
#loc225 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":175:19)
#loc226 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":176:9)
#loc227 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":178:26)
#loc228 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":179:26)
#loc229 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":179:13)
#loc230 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":184:9)
#loc231 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":189:9)
#loc232 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":184:12)
#loc233 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":184:19)
#loc234 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":185:9)
#loc235 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":187:26)
#loc236 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":188:26)
#loc237 = loc("CWE190_Integer_Overflow__int_fgets_multiply_12.c":188:13)
#loc238 = loc(fused[#loc1, #loc2])
#loc239 = loc(fused[#loc3, #loc4])
#loc240 = loc(fused[#loc5, #loc6])
#loc241 = loc(fused[#loc7, #loc8])
#loc242 = loc(fused[#loc9, #loc10])
#loc243 = loc(fused[#loc12, #loc13])
#loc244 = loc(fused[#loc15, #loc16])
#loc245 = loc(fused[#loc17, #loc18])
#loc246 = loc(fused[#loc19, #loc20])
#loc247 = loc(fused[#loc21, #loc22])
#loc248 = loc(fused[#loc23, #loc24])
#loc249 = loc(fused[#loc26, #loc25])
#loc250 = loc(fused[#loc27, #loc28])
#loc251 = loc(fused[#loc29, #loc30])
#loc252 = loc(fused[#loc31, #loc32, #loc33, #loc28])
#loc253 = loc(fused[#loc34, #loc35])
#loc254 = loc(fused[#loc36, #loc37])
#loc255 = loc(fused[#loc41, #loc42])
#loc256 = loc(fused[#loc43, #loc44, #loc45, #loc37])
#loc257 = loc(fused[#loc48, #loc49])
#loc258 = loc(fused[#loc52, #loc51])
#loc259 = loc(fused[#loc53, #loc54])
#loc260 = loc(fused[#loc55, #loc56])
#loc261 = loc(fused[#loc57, #loc58, #loc59, #loc54])
#loc262 = loc(fused[#loc60, #loc61])
#loc263 = loc(fused[#loc62, #loc63])
#loc264 = loc(fused[#loc64, #loc61])
#loc265 = loc(fused[#loc68, #loc69])
#loc266 = loc(fused[#loc70, #loc71])
#loc267 = loc(fused[#loc72, #loc69])
#loc268 = loc(fused[#loc73, #loc74])
#loc269 = loc(fused[#loc76, #loc77])
#loc270 = loc(fused[#loc75, #loc78])
#loc271 = loc(fused[#loc79, #loc80, #loc81, #loc74])
#loc272 = loc(fused[#loc86, #loc87])
#loc273 = loc(fused[#loc88, #loc89])
#loc274 = loc(fused[#loc90, #loc91])
#loc275 = loc(fused[#loc92, #loc93])
#loc276 = loc(fused[#loc94, #loc95])
#loc277 = loc(fused[#loc96, #loc97])
#loc278 = loc(fused[#loc98, #loc99])
#loc279 = loc(fused[#loc100, #loc101])
#loc280 = loc(fused[#loc102, #loc103])
#loc281 = loc(fused[#loc105, #loc104])
#loc282 = loc(fused[#loc106, #loc107])
#loc283 = loc(fused[#loc108, #loc109])
#loc284 = loc(fused[#loc110, #loc111, #loc112, #loc107])
#loc285 = loc(fused[#loc113, #loc114])
#loc286 = loc(fused[#loc115, #loc116])
#loc287 = loc(fused[#loc120, #loc121])
#loc288 = loc(fused[#loc122, #loc123, #loc124, #loc116])
#loc289 = loc(fused[#loc127, #loc128])
#loc290 = loc(fused[#loc131, #loc132])
#loc291 = loc(fused[#loc133, #loc134])
#loc292 = loc(fused[#loc138, #loc139])
#loc293 = loc(fused[#loc140, #loc141, #loc142, #loc134])
#loc294 = loc(fused[#loc145, #loc146])
#loc295 = loc(fused[#loc149, #loc150])
#loc296 = loc(fused[#loc151, #loc152])
#loc297 = loc(fused[#loc153, #loc154, #loc155, #loc150])
#loc298 = loc(fused[#loc156, #loc157])
#loc299 = loc(fused[#loc158, #loc159])
#loc300 = loc(fused[#loc160, #loc157])
#loc301 = loc(fused[#loc161, #loc162])
#loc302 = loc(fused[#loc164, #loc165])
#loc303 = loc(fused[#loc163, #loc166])
#loc304 = loc(fused[#loc167, #loc168, #loc169, #loc162])
#loc305 = loc(fused[#loc175, #loc176])
#loc306 = loc(fused[#loc177, #loc178])
#loc307 = loc(fused[#loc179, #loc176])
#loc308 = loc(fused[#loc180, #loc181])
#loc309 = loc(fused[#loc183, #loc184])
#loc310 = loc(fused[#loc182, #loc185])
#loc311 = loc(fused[#loc186, #loc187, #loc188, #loc181])
#loc312 = loc(fused[#loc194, #loc195])
#loc313 = loc(fused[#loc196, #loc197])
#loc314 = loc(fused[#loc198, #loc199])
#loc315 = loc(fused[#loc200, #loc201])
#loc316 = loc(fused[#loc203, #loc202])
#loc317 = loc(fused[#loc204, #loc205])
#loc318 = loc(fused[#loc206, #loc207])
#loc319 = loc(fused[#loc208, #loc209, #loc210, #loc205])
#loc320 = loc(fused[#loc212, #loc211])
#loc321 = loc(fused[#loc214, #loc213])
#loc322 = loc(fused[#loc215, #loc216])
#loc323 = loc(fused[#loc217, #loc218])
#loc324 = loc(fused[#loc219, #loc220, #loc221, #loc216])
#loc325 = loc(fused[#loc222, #loc223])
#loc326 = loc(fused[#loc224, #loc225])
#loc327 = loc(fused[#loc226, #loc223])
#loc328 = loc(fused[#loc230, #loc231])
#loc329 = loc(fused[#loc232, #loc233])
#loc330 = loc(fused[#loc234, #loc231])
