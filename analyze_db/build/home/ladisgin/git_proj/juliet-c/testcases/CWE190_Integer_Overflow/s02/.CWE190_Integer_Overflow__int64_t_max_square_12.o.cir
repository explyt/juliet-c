!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc160)
  cir.func private @printLongLongLine(!s64i) loc(#loc161)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr) loc(#loc162)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc7)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc163)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc10)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_square_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc165)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc166)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc167)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc19)
    cir.store %3, %2 : !s64i, !cir.ptr<!s64i> loc(#loc168)
    cir.br ^bb1 loc(#loc169)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc170)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc170)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc23)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc23)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc171)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc28)
    cir.store %8, %2 : !s64i, !cir.ptr<!s64i> loc(#loc172)
    cir.br ^bb4 loc(#loc26)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<2> : !s32i loc(#loc30)
    %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc30)
    cir.store %10, %2 : !s64i, !cir.ptr<!s64i> loc(#loc173)
    cir.br ^bb4 loc(#loc22)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc22)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc174)
  ^bb6:  // pred: ^bb5
    %11 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc175)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc175)
    %13 = cir.call %12() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc34)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc34)
    cir.brcond %14 ^bb7, ^bb10 loc(#loc176)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc177)
  ^bb8:  // pred: ^bb7
    %15 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc41)
    %16 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc14)
    %17 = cir.binop(mul, %15, %16) nsw : !s64i loc(#loc41)
    cir.store %17, %0 : !s64i, !cir.ptr<!s64i> loc(#loc165)
    %18 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc42)
    cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc43)
    cir.br ^bb9 loc(#loc40)
  ^bb9:  // pred: ^bb8
    cir.br ^bb16 loc(#loc37)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc178)
  ^bb11:  // pred: ^bb10
    %19 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc46)
    %20 = cir.call @imaxabs(%19) : (!s64i) -> !s64i extra(#fn_attr) loc(#loc47)
    %21 = cir.cast(int_to_float, %20 : !s64i), !cir.long_double<!cir.f80> loc(#loc47)
    %22 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc48)
    %23 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc49)
    %24 = cir.cast(int_to_float, %23 : !s64i), !cir.long_double<!cir.f80> loc(#loc49)
    %25 = cir.call @sqrtl(%24) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc48)
    %26 = cir.cmp(le, %21, %25) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc179)
    cir.brcond %26 ^bb12, ^bb13 loc(#loc180)
  ^bb12:  // pred: ^bb11
    %27 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc54)
    %28 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc16)
    %29 = cir.binop(mul, %27, %28) nsw : !s64i loc(#loc54)
    cir.store %29, %1 : !s64i, !cir.ptr<!s64i> loc(#loc166)
    %30 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc55)
    cir.call @printLongLongLine(%30) : (!s64i) -> () loc(#loc56)
    cir.br ^bb14 loc(#loc52)
  ^bb13:  // pred: ^bb11
    %31 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc10)
    %32 = cir.cast(array_to_ptrdecay, %31 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc10)
    cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    cir.br ^bb14 loc(#loc45)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc45)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc33)
  ^bb16:  // 2 preds: ^bb9, ^bb15
    cir.br ^bb17 loc(#loc33)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc12)
  } loc(#loc164)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_square_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc182)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc183)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc62)
    cir.return loc(#loc59)
  } loc(#loc181)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc185)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc186)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc187)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc72)
    cir.store %3, %2 : !s64i, !cir.ptr<!s64i> loc(#loc188)
    cir.br ^bb1 loc(#loc189)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc190)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc190)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc76)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc76)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc191)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc81)
    cir.store %8, %2 : !s64i, !cir.ptr<!s64i> loc(#loc192)
    cir.br ^bb4 loc(#loc79)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc83)
    cir.store %9, %2 : !s64i, !cir.ptr<!s64i> loc(#loc193)
    cir.br ^bb4 loc(#loc75)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc75)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc194)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc195)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc195)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc87)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc87)
    cir.brcond %13 ^bb7, ^bb13 loc(#loc196)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc197)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc94)
    %15 = cir.call @imaxabs(%14) : (!s64i) -> !s64i extra(#fn_attr) loc(#loc95)
    %16 = cir.cast(int_to_float, %15 : !s64i), !cir.long_double<!cir.f80> loc(#loc95)
    %17 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc96)
    %18 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc97)
    %19 = cir.cast(int_to_float, %18 : !s64i), !cir.long_double<!cir.f80> loc(#loc97)
    %20 = cir.call @sqrtl(%19) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc96)
    %21 = cir.cmp(le, %16, %20) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc198)
    cir.brcond %21 ^bb9, ^bb10 loc(#loc199)
  ^bb9:  // pred: ^bb8
    %22 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc102)
    %23 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc67)
    %24 = cir.binop(mul, %22, %23) nsw : !s64i loc(#loc102)
    cir.store %24, %0 : !s64i, !cir.ptr<!s64i> loc(#loc185)
    %25 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc103)
    cir.call @printLongLongLine(%25) : (!s64i) -> () loc(#loc104)
    cir.br ^bb11 loc(#loc100)
  ^bb10:  // pred: ^bb8
    %26 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc105)
    %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc105)
    cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc106)
    cir.br ^bb11 loc(#loc93)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc93)
  ^bb12:  // pred: ^bb11
    cir.br ^bb19 loc(#loc90)
  ^bb13:  // pred: ^bb6
    cir.br ^bb14 loc(#loc200)
  ^bb14:  // pred: ^bb13
    %28 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc109)
    %29 = cir.call @imaxabs(%28) : (!s64i) -> !s64i extra(#fn_attr) loc(#loc110)
    %30 = cir.cast(int_to_float, %29 : !s64i), !cir.long_double<!cir.f80> loc(#loc110)
    %31 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc111)
    %32 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc112)
    %33 = cir.cast(int_to_float, %32 : !s64i), !cir.long_double<!cir.f80> loc(#loc112)
    %34 = cir.call @sqrtl(%33) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc111)
    %35 = cir.cmp(le, %30, %34) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc201)
    cir.brcond %35 ^bb15, ^bb16 loc(#loc202)
  ^bb15:  // pred: ^bb14
    %36 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc117)
    %37 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc69)
    %38 = cir.binop(mul, %36, %37) nsw : !s64i loc(#loc117)
    cir.store %38, %1 : !s64i, !cir.ptr<!s64i> loc(#loc186)
    %39 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc118)
    cir.call @printLongLongLine(%39) : (!s64i) -> () loc(#loc119)
    cir.br ^bb17 loc(#loc115)
  ^bb16:  // pred: ^bb14
    %40 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc120)
    %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc120)
    cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    cir.br ^bb17 loc(#loc108)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc108)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc86)
  ^bb19:  // 2 preds: ^bb12, ^bb18
    cir.br ^bb20 loc(#loc86)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc65)
  } loc(#loc184)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc204)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc205)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc206)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc130)
    cir.store %3, %2 : !s64i, !cir.ptr<!s64i> loc(#loc207)
    cir.br ^bb1 loc(#loc208)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc209)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc209)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc134)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc134)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc210)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc139)
    %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc139)
    cir.store %9, %2 : !s64i, !cir.ptr<!s64i> loc(#loc211)
    cir.br ^bb4 loc(#loc137)
  ^bb3:  // pred: ^bb1
    %10 = cir.const #cir.int<2> : !s32i loc(#loc141)
    %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc141)
    cir.store %11, %2 : !s64i, !cir.ptr<!s64i> loc(#loc212)
    cir.br ^bb4 loc(#loc133)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc133)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc213)
  ^bb6:  // pred: ^bb5
    %12 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc214)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc214)
    %14 = cir.call %13() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc145)
    %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc145)
    cir.brcond %15 ^bb7, ^bb10 loc(#loc215)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc216)
  ^bb8:  // pred: ^bb7
    %16 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc152)
    %17 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc125)
    %18 = cir.binop(mul, %16, %17) nsw : !s64i loc(#loc152)
    cir.store %18, %0 : !s64i, !cir.ptr<!s64i> loc(#loc204)
    %19 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc153)
    cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc154)
    cir.br ^bb9 loc(#loc151)
  ^bb9:  // pred: ^bb8
    cir.br ^bb13 loc(#loc148)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc217)
  ^bb11:  // pred: ^bb10
    %20 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc157)
    %21 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc127)
    %22 = cir.binop(mul, %20, %21) nsw : !s64i loc(#loc157)
    cir.store %22, %1 : !s64i, !cir.ptr<!s64i> loc(#loc205)
    %23 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc158)
    cir.call @printLongLongLine(%23) : (!s64i) -> () loc(#loc159)
    cir.br ^bb12 loc(#loc156)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc144)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc144)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc123)
  } loc(#loc203)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("/usr/include/inttypes.h":351:1)
#loc6 = loc("/usr/include/inttypes.h":351:74)
#loc7 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":57:23)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":25:1)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":60:1)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":43:13)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":43:37)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":52:13)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":52:37)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":27:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":27:13)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":28:12)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":28:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":29:5)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":38:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":29:8)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":29:33)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":30:5)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":33:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":35:5)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":32:16)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":32:9)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":37:16)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":37:9)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":39:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":59:5)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":39:8)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":39:33)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":40:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":46:5)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":48:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":41:9)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":45:9)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":43:30)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":44:31)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":44:13)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":50:9)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":58:9)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":50:31)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":50:13)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":50:40)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":50:46)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":50:55)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":51:9)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":54:9)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":56:9)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":52:30)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":53:31)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":53:13)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":57:13)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":146:1)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":150:1)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":148:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":148:13)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":149:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":149:13)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":69:1)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":109:1)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":88:13)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":88:37)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":101:13)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":101:37)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":71:5)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":71:13)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":72:12)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":72:5)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":73:5)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":82:5)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":73:8)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":73:33)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":74:5)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":77:5)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":79:5)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":76:16)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":76:9)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":81:16)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":81:9)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":83:5)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":108:5)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":83:8)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":83:33)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":84:5)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":95:5)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":97:5)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":86:9)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":94:9)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":86:31)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":86:13)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":86:40)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":86:46)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":86:55)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":87:9)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":90:9)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":92:9)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":88:30)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":89:31)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":89:13)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":93:23)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":93:13)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":99:9)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":107:9)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":99:31)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":99:13)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":99:40)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":99:46)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":99:55)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":100:9)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":103:9)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":105:9)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":101:30)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":102:31)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":102:13)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":106:23)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":106:13)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":114:1)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":144:1)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":132:13)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":132:37)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":140:13)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":140:37)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":116:5)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":116:13)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":117:12)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":117:5)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":118:5)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":127:5)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":118:8)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":118:33)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":119:5)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":122:5)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":124:5)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":121:16)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":121:9)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":126:16)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":126:9)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":128:5)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":143:5)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":128:8)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":128:33)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":129:5)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":135:5)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":137:5)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":130:9)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":134:9)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":132:30)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":133:31)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":133:13)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":138:9)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":142:9)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":140:30)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":141:31)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_max_square_12.c":141:13)
#loc160 = loc(fused[#loc1, #loc2])
#loc161 = loc(fused[#loc3, #loc4])
#loc162 = loc(fused[#loc5, #loc6])
#loc163 = loc(fused[#loc8, #loc9])
#loc164 = loc(fused[#loc11, #loc12])
#loc165 = loc(fused[#loc13, #loc14])
#loc166 = loc(fused[#loc15, #loc16])
#loc167 = loc(fused[#loc17, #loc18])
#loc168 = loc(fused[#loc20, #loc19])
#loc169 = loc(fused[#loc21, #loc22])
#loc170 = loc(fused[#loc23, #loc24])
#loc171 = loc(fused[#loc25, #loc26, #loc27, #loc22])
#loc172 = loc(fused[#loc29, #loc28])
#loc173 = loc(fused[#loc31, #loc30])
#loc174 = loc(fused[#loc32, #loc33])
#loc175 = loc(fused[#loc34, #loc35])
#loc176 = loc(fused[#loc36, #loc37, #loc38, #loc33])
#loc177 = loc(fused[#loc39, #loc40])
#loc178 = loc(fused[#loc44, #loc45])
#loc179 = loc(fused[#loc47, #loc50])
#loc180 = loc(fused[#loc51, #loc52, #loc53, #loc45])
#loc181 = loc(fused[#loc58, #loc59])
#loc182 = loc(fused[#loc60, #loc61])
#loc183 = loc(fused[#loc62, #loc63])
#loc184 = loc(fused[#loc64, #loc65])
#loc185 = loc(fused[#loc66, #loc67])
#loc186 = loc(fused[#loc68, #loc69])
#loc187 = loc(fused[#loc70, #loc71])
#loc188 = loc(fused[#loc73, #loc72])
#loc189 = loc(fused[#loc74, #loc75])
#loc190 = loc(fused[#loc76, #loc77])
#loc191 = loc(fused[#loc78, #loc79, #loc80, #loc75])
#loc192 = loc(fused[#loc82, #loc81])
#loc193 = loc(fused[#loc84, #loc83])
#loc194 = loc(fused[#loc85, #loc86])
#loc195 = loc(fused[#loc87, #loc88])
#loc196 = loc(fused[#loc89, #loc90, #loc91, #loc86])
#loc197 = loc(fused[#loc92, #loc93])
#loc198 = loc(fused[#loc95, #loc98])
#loc199 = loc(fused[#loc99, #loc100, #loc101, #loc93])
#loc200 = loc(fused[#loc107, #loc108])
#loc201 = loc(fused[#loc110, #loc113])
#loc202 = loc(fused[#loc114, #loc115, #loc116, #loc108])
#loc203 = loc(fused[#loc122, #loc123])
#loc204 = loc(fused[#loc124, #loc125])
#loc205 = loc(fused[#loc126, #loc127])
#loc206 = loc(fused[#loc128, #loc129])
#loc207 = loc(fused[#loc131, #loc130])
#loc208 = loc(fused[#loc132, #loc133])
#loc209 = loc(fused[#loc134, #loc135])
#loc210 = loc(fused[#loc136, #loc137, #loc138, #loc133])
#loc211 = loc(fused[#loc140, #loc139])
#loc212 = loc(fused[#loc142, #loc141])
#loc213 = loc(fused[#loc143, #loc144])
#loc214 = loc(fused[#loc145, #loc146])
#loc215 = loc(fused[#loc147, #loc148, #loc149, #loc144])
#loc216 = loc(fused[#loc150, #loc151])
#loc217 = loc(fused[#loc155, #loc156])
