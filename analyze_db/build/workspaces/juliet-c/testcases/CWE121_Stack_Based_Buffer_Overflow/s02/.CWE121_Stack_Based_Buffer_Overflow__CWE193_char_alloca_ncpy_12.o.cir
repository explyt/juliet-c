!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2B.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc91)
  cir.global "private" constant cir_private @__const.CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12_bad.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc92)
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc93)
  cir.func private @strncpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc94)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc95)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc96)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc98)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc99)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc18)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc18)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc18)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc18)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc18)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc100)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc18)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc18)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc99)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc20)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc20)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc20)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc20)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc20)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc20)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc20)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc20)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc100)
    cir.scope {
      %19 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc102)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc102)
      %21 = cir.call %20() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc23)
      %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc23)
      cir.if %22 {
        %23 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
        cir.store %23, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc104)
        %24 = cir.const #cir.int<0> : !s32i loc(#loc30)
        %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc30)
        %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
        %27 = cir.const #cir.int<0> : !s32i loc(#loc32)
        %28 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %27 : !s32i), !cir.ptr<!s8i> loc(#loc33)
        cir.store %25, %28 : !s8i, !cir.ptr<!s8i> loc(#loc105)
      } else {
        %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
        cir.store %23, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc106)
        %24 = cir.const #cir.int<0> : !s32i loc(#loc36)
        %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc36)
        %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
        %27 = cir.const #cir.int<0> : !s32i loc(#loc38)
        %28 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %27 : !s32i), !cir.ptr<!s8i> loc(#loc39)
        cir.store %25, %28 : !s8i, !cir.ptr<!s8i> loc(#loc107)
      } loc(#loc103)
    } loc(#loc101)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc92)
      %20 = cir.get_global @__const.CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12_bad.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc92)
      cir.copy %20 to %19 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc92)
      %21 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc42)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc43)
      %23 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc44)
      %24 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc45)
      %25 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc46)
      %26 = cir.call @strlen(%25) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc45)
      %27 = cir.const #cir.int<1> : !s32i loc(#loc47)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc47)
      %29 = cir.binop(add, %26, %28) : !u64i loc(#loc109)
      %30 = cir.call @strncpy(%22, %23, %29) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc42)
      %31 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
      cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    } loc(#loc108)
    cir.return loc(#loc14)
  } loc(#loc97)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc111)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc52)
    cir.return loc(#loc51)
  } loc(#loc110)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc113)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc114)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc59)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc59)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc59)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc59)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc59)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc115)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc59)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc59)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc114)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc61)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc61)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc61)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc61)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc61)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc61)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc61)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc61)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc61)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc115)
    cir.scope {
      %19 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc117)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc117)
      %21 = cir.call %20() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc64)
      %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc64)
      cir.if %22 {
        %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc69)
        cir.store %23, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc119)
        %24 = cir.const #cir.int<0> : !s32i loc(#loc71)
        %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc71)
        %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc72)
        %27 = cir.const #cir.int<0> : !s32i loc(#loc73)
        %28 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %27 : !s32i), !cir.ptr<!s8i> loc(#loc74)
        cir.store %25, %28 : !s8i, !cir.ptr<!s8i> loc(#loc120)
      } else {
        %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
        cir.store %23, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc121)
        %24 = cir.const #cir.int<0> : !s32i loc(#loc77)
        %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc77)
        %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
        %27 = cir.const #cir.int<0> : !s32i loc(#loc79)
        %28 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %27 : !s32i), !cir.ptr<!s8i> loc(#loc80)
        cir.store %25, %28 : !s8i, !cir.ptr<!s8i> loc(#loc122)
      } loc(#loc118)
    } loc(#loc116)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc91)
      %20 = cir.get_global @__const.goodG2B.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc91)
      cir.copy %20 to %19 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc91)
      %21 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc83)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc84)
      %23 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc85)
      %24 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc86)
      %25 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc87)
      %26 = cir.call @strlen(%25) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc86)
      %27 = cir.const #cir.int<1> : !s32i loc(#loc88)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc88)
      %29 = cir.binop(add, %26, %28) : !u64i loc(#loc124)
      %30 = cir.call @strncpy(%22, %23, %29) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc83)
      %31 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
      cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    } loc(#loc123)
    cir.return loc(#loc55)
  } loc(#loc112)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":82:9)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":82:29)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":48:9)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":48:29)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc7 = loc("/usr/include/string.h":144:1)
#loc8 = loc("/usr/include/string.h":146:14)
#loc9 = loc("/usr/include/string.h":407:1)
#loc10 = loc("/usr/include/string.h":408:33)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":28:1)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":54:1)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":30:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":30:12)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":31:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":31:36)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":32:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":32:37)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":33:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":46:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":33:8)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":33:33)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":34:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":39:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":41:5)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":37:16)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":37:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":38:19)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":38:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":38:14)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":38:15)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":44:16)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":44:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":45:19)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":45:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":45:14)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":45:15)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":47:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":53:5)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":51:9)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":51:17)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":51:23)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":51:31)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":51:38)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":51:48)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":52:19)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":52:9)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":90:1)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":93:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":92:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":92:13)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":62:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":88:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":64:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":64:12)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":65:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":65:36)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":66:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":66:37)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":67:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":80:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":67:8)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":67:33)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":68:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":73:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":75:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":71:16)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":71:9)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":72:19)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":72:9)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":72:14)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":72:15)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":78:16)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":78:9)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":79:19)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":79:9)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":79:14)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":79:15)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":81:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":87:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":85:9)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":85:17)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":85:23)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":85:31)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":85:38)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":85:48)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":86:19)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c":86:9)
#loc91 = loc(fused[#loc1, #loc2])
#loc92 = loc(fused[#loc3, #loc4])
#loc93 = loc(fused[#loc5, #loc6])
#loc94 = loc(fused[#loc7, #loc8])
#loc95 = loc(fused[#loc9, #loc10])
#loc96 = loc(fused[#loc11, #loc12])
#loc97 = loc(fused[#loc13, #loc14])
#loc98 = loc(fused[#loc15, #loc16])
#loc99 = loc(fused[#loc17, #loc18])
#loc100 = loc(fused[#loc19, #loc20])
#loc101 = loc(fused[#loc21, #loc22])
#loc102 = loc(fused[#loc23, #loc24])
#loc103 = loc(fused[#loc25, #loc26, #loc27, #loc22])
#loc104 = loc(fused[#loc29, #loc28])
#loc105 = loc(fused[#loc31, #loc30])
#loc106 = loc(fused[#loc35, #loc34])
#loc107 = loc(fused[#loc37, #loc36])
#loc108 = loc(fused[#loc40, #loc41])
#loc109 = loc(fused[#loc45, #loc47])
#loc110 = loc(fused[#loc50, #loc51])
#loc111 = loc(fused[#loc52, #loc53])
#loc112 = loc(fused[#loc54, #loc55])
#loc113 = loc(fused[#loc56, #loc57])
#loc114 = loc(fused[#loc58, #loc59])
#loc115 = loc(fused[#loc60, #loc61])
#loc116 = loc(fused[#loc62, #loc63])
#loc117 = loc(fused[#loc64, #loc65])
#loc118 = loc(fused[#loc66, #loc67, #loc68, #loc63])
#loc119 = loc(fused[#loc70, #loc69])
#loc120 = loc(fused[#loc72, #loc71])
#loc121 = loc(fused[#loc76, #loc75])
#loc122 = loc(fused[#loc78, #loc77])
#loc123 = loc(fused[#loc81, #loc82])
#loc124 = loc(fused[#loc86, #loc88])
