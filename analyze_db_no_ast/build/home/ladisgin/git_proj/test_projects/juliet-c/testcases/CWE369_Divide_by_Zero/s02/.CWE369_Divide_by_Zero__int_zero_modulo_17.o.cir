!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_modulo_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc126)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_zero_modulo_17_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc128)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc129)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc130)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc11)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc15)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc133)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc18)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc134)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc19)
        cir.condition(%9) loc(#loc19)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<0> : !s32i loc(#loc21)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc136)
        } loc(#loc135)
        cir.yield loc(#loc14)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc24)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc137)
        cir.yield loc(#loc132)
      } loc(#loc132)
    } loc(#loc132)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc27)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc139)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc29)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc30)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc140)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc31)
        cir.condition(%9) loc(#loc31)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<100> : !s32i loc(#loc33)
          %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc34)
          %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc142)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc35)
        } loc(#loc141)
        cir.yield loc(#loc26)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc36)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc37)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc143)
        cir.yield loc(#loc138)
      } loc(#loc138)
    } loc(#loc138)
    cir.return loc(#loc4)
  } loc(#loc127)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_zero_modulo_17_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc145)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc146)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc39)
  } loc(#loc144)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc147)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc46)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc149)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc150)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc151)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc54)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc55)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc59)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc154)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc62)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc155)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc63)
        cir.condition(%9) loc(#loc63)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<0> : !s32i loc(#loc65)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc157)
        } loc(#loc156)
        cir.yield loc(#loc58)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc67)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc68)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc158)
        cir.yield loc(#loc153)
      } loc(#loc153)
    } loc(#loc153)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc71)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc160)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc73)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc74)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc161)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc75)
        cir.condition(%9) loc(#loc75)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc79)
            %7 = cir.const #cir.int<0> : !s32i loc(#loc80)
            %8 = cir.cmp(ne, %6, %7) : !s32i, !s32i loc(#loc164)
            %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc81)
            cir.if %9 {
              %10 = cir.const #cir.int<100> : !s32i loc(#loc85)
              %11 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc86)
              %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc166)
              cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc87)
            } else {
              %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc46)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc46)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc88)
            } loc(#loc165)
          } loc(#loc163)
        } loc(#loc162)
        cir.yield loc(#loc70)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc89)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc90)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc167)
        cir.yield loc(#loc159)
      } loc(#loc159)
    } loc(#loc159)
    cir.return loc(#loc48)
  } loc(#loc148)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc169)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc170)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc171)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc98)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc99)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc103)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc174)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc105)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc106)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc175)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc107)
        cir.condition(%9) loc(#loc107)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<7> : !s32i loc(#loc109)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc177)
        } loc(#loc176)
        cir.yield loc(#loc102)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc112)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc178)
        cir.yield loc(#loc173)
      } loc(#loc173)
    } loc(#loc173)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc115)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc180)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc117)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc118)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc181)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc119)
        cir.condition(%9) loc(#loc119)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<100> : !s32i loc(#loc121)
          %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc122)
          %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc183)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc123)
        } loc(#loc182)
        cir.yield loc(#loc114)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc124)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc125)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc184)
        cir.yield loc(#loc179)
      } loc(#loc179)
    } loc(#loc179)
    cir.return loc(#loc92)
  } loc(#loc168)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_modulo_17.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":22:1)
#loc4 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":38:1)
#loc5 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":24:5)
#loc6 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":24:9)
#loc7 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":24:11)
#loc8 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":25:5)
#loc9 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":25:9)
#loc10 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":27:13)
#loc11 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":27:12)
#loc12 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":27:5)
#loc13 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":28:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":32:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":28:13)
#loc16 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":28:9)
#loc17 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":28:16)
#loc18 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":28:20)
#loc19 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":28:18)
#loc20 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":29:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":31:16)
#loc22 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":31:9)
#loc23 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":28:24)
#loc24 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":28:23)
#loc25 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":33:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":37:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":33:13)
#loc28 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":33:9)
#loc29 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":33:16)
#loc30 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":33:20)
#loc31 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":33:18)
#loc32 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":34:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":36:22)
#loc34 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":36:28)
#loc35 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":36:9)
#loc36 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":33:24)
#loc37 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":33:23)
#loc38 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":89:1)
#loc39 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":93:1)
#loc40 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":91:5)
#loc41 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":91:13)
#loc42 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":92:5)
#loc43 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":92:13)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":65:23)
#loc47 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":45:1)
#loc48 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":68:1)
#loc49 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":47:5)
#loc50 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":47:9)
#loc51 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":47:11)
#loc52 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":48:5)
#loc53 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":48:9)
#loc54 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":50:13)
#loc55 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":50:12)
#loc56 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":50:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":51:5)
#loc58 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":55:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":51:13)
#loc60 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":51:9)
#loc61 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":51:16)
#loc62 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":51:20)
#loc63 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":51:18)
#loc64 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":52:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":54:16)
#loc66 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":54:9)
#loc67 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":51:24)
#loc68 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":51:23)
#loc69 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":56:5)
#loc70 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":67:5)
#loc71 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":56:13)
#loc72 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":56:9)
#loc73 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":56:16)
#loc74 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":56:20)
#loc75 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":56:18)
#loc76 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":57:5)
#loc77 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":59:9)
#loc78 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":66:9)
#loc79 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":59:13)
#loc80 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":59:21)
#loc81 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":59:18)
#loc82 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":60:9)
#loc83 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":62:9)
#loc84 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":64:9)
#loc85 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":61:26)
#loc86 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":61:32)
#loc87 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":61:13)
#loc88 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":65:13)
#loc89 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":56:24)
#loc90 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":56:23)
#loc91 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":71:1)
#loc92 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":87:1)
#loc93 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":73:5)
#loc94 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":73:9)
#loc95 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":73:11)
#loc96 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":74:5)
#loc97 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":74:9)
#loc98 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":76:13)
#loc99 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":76:12)
#loc100 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":76:5)
#loc101 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":77:5)
#loc102 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":81:5)
#loc103 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":77:13)
#loc104 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":77:9)
#loc105 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":77:16)
#loc106 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":77:20)
#loc107 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":77:18)
#loc108 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":78:5)
#loc109 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":80:16)
#loc110 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":80:9)
#loc111 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":77:24)
#loc112 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":77:23)
#loc113 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":82:5)
#loc114 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":86:5)
#loc115 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":82:13)
#loc116 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":82:9)
#loc117 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":82:16)
#loc118 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":82:20)
#loc119 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":82:18)
#loc120 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":83:5)
#loc121 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":85:22)
#loc122 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":85:28)
#loc123 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":85:9)
#loc124 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":82:24)
#loc125 = loc("CWE369_Divide_by_Zero__int_zero_modulo_17.c":82:23)
#loc126 = loc(fused[#loc1, #loc2])
#loc127 = loc(fused[#loc3, #loc4])
#loc128 = loc(fused[#loc5, #loc6])
#loc129 = loc(fused[#loc5, #loc7])
#loc130 = loc(fused[#loc8, #loc9])
#loc131 = loc(fused[#loc12, #loc10])
#loc132 = loc(fused[#loc13, #loc14])
#loc133 = loc(fused[#loc16, #loc15])
#loc134 = loc(fused[#loc17, #loc18])
#loc135 = loc(fused[#loc20, #loc14])
#loc136 = loc(fused[#loc22, #loc21])
#loc137 = loc(fused[#loc24, #loc23])
#loc138 = loc(fused[#loc25, #loc26])
#loc139 = loc(fused[#loc28, #loc27])
#loc140 = loc(fused[#loc29, #loc30])
#loc141 = loc(fused[#loc32, #loc26])
#loc142 = loc(fused[#loc33, #loc34])
#loc143 = loc(fused[#loc37, #loc36])
#loc144 = loc(fused[#loc38, #loc39])
#loc145 = loc(fused[#loc40, #loc41])
#loc146 = loc(fused[#loc42, #loc43])
#loc147 = loc(fused[#loc44, #loc45])
#loc148 = loc(fused[#loc47, #loc48])
#loc149 = loc(fused[#loc49, #loc50])
#loc150 = loc(fused[#loc49, #loc51])
#loc151 = loc(fused[#loc52, #loc53])
#loc152 = loc(fused[#loc56, #loc54])
#loc153 = loc(fused[#loc57, #loc58])
#loc154 = loc(fused[#loc60, #loc59])
#loc155 = loc(fused[#loc61, #loc62])
#loc156 = loc(fused[#loc64, #loc58])
#loc157 = loc(fused[#loc66, #loc65])
#loc158 = loc(fused[#loc68, #loc67])
#loc159 = loc(fused[#loc69, #loc70])
#loc160 = loc(fused[#loc72, #loc71])
#loc161 = loc(fused[#loc73, #loc74])
#loc162 = loc(fused[#loc76, #loc70])
#loc163 = loc(fused[#loc77, #loc78])
#loc164 = loc(fused[#loc79, #loc80])
#loc165 = loc(fused[#loc82, #loc83, #loc84, #loc78])
#loc166 = loc(fused[#loc85, #loc86])
#loc167 = loc(fused[#loc90, #loc89])
#loc168 = loc(fused[#loc91, #loc92])
#loc169 = loc(fused[#loc93, #loc94])
#loc170 = loc(fused[#loc93, #loc95])
#loc171 = loc(fused[#loc96, #loc97])
#loc172 = loc(fused[#loc100, #loc98])
#loc173 = loc(fused[#loc101, #loc102])
#loc174 = loc(fused[#loc104, #loc103])
#loc175 = loc(fused[#loc105, #loc106])
#loc176 = loc(fused[#loc108, #loc102])
#loc177 = loc(fused[#loc110, #loc109])
#loc178 = loc(fused[#loc112, #loc111])
#loc179 = loc(fused[#loc113, #loc114])
#loc180 = loc(fused[#loc116, #loc115])
#loc181 = loc(fused[#loc117, #loc118])
#loc182 = loc(fused[#loc120, #loc114])
#loc183 = loc(fused[#loc121, #loc122])
#loc184 = loc(fused[#loc125, #loc124])
