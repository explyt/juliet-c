!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"shouldn't see this value\00" : !cir.array<!s8i x 25>> : !cir.array<!s8i x 25> {alignment = 1 : i64} loc(#loc1)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc4)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc107)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_02_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc12)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc12)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc112)
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc113)
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc1)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc1)
          cir.store %5, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc112)
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %7 = cir.const #cir.int<3> : !s32i loc(#loc20)
          %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc114)
          cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc115)
          cir.scope {
            %10 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc25)
            cir.switch (%10 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc4)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc4)
                cir.store %12, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc117)
                cir.break loc(#loc28)
              } loc(#loc26)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc5)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc5)
                cir.store %12, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc118)
                cir.break loc(#loc31)
              } loc(#loc29)
              cir.yield loc(#loc23)
            } loc(#loc23)
          } loc(#loc116)
          %9 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
          cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc33)
        } loc(#loc111)
      } loc(#loc110)
    } loc(#loc109)
    cir.return loc(#loc9)
  } loc(#loc108)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc120)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc121)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    cir.return loc(#loc35)
  } loc(#loc119)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc40)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<0> : !s32i loc(#loc45)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc45)
      cir.if %1 {
        %2 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc40)
        %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc40)
        cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc49)
      } else {
        cir.scope {
          %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc126)
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc127)
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc53)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc53)
          cir.store %5, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc126)
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %7 = cir.const #cir.int<3> : !s32i loc(#loc57)
          %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc128)
          cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc129)
          cir.scope {
            %10 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc62)
            cir.switch (%10 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc64)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc64)
                cir.store %12, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc131)
                cir.break loc(#loc66)
              } loc(#loc63)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc68)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc68)
                cir.store %12, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc132)
                cir.break loc(#loc70)
              } loc(#loc67)
              cir.case(default, []) {
                cir.return loc(#loc72)
              } loc(#loc71)
              cir.yield loc(#loc60)
            } loc(#loc60)
          } loc(#loc130)
          %9 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc73)
          cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc74)
        } loc(#loc125)
      } loc(#loc124)
    } loc(#loc123)
    cir.return loc(#loc42)
  } loc(#loc122)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc79)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc79)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc137)
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc138)
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc84)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc84)
          cir.store %5, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc137)
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
          %7 = cir.const #cir.int<3> : !s32i loc(#loc88)
          %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc139)
          cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc140)
          cir.scope {
            %10 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc93)
            cir.switch (%10 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc95)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc95)
                cir.store %12, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc142)
                cir.break loc(#loc97)
              } loc(#loc94)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc99)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc99)
                cir.store %12, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc143)
                cir.break loc(#loc101)
              } loc(#loc98)
              cir.case(default, []) {
                cir.return loc(#loc103)
              } loc(#loc102)
              cir.yield loc(#loc91)
            } loc(#loc91)
          } loc(#loc141)
          %9 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc104)
          cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc105)
        } loc(#loc136)
      } loc(#loc135)
    } loc(#loc134)
    cir.return loc(#loc76)
  } loc(#loc133)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_02.c":0:0)
#loc1 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":25:38)
#loc2 = loc("/usr/include/stdlib.h":573:1)
#loc3 = loc("/usr/include/stdlib.h":573:24)
#loc4 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":31:30)
#loc5 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":34:30)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":20:1)
#loc9 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":41:1)
#loc10 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":22:5)
#loc11 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":40:5)
#loc12 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":22:8)
#loc13 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":23:5)
#loc14 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":24:9)
#loc15 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":39:9)
#loc16 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":25:13)
#loc17 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":26:13)
#loc18 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":26:17)
#loc19 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":27:18)
#loc20 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":27:27)
#loc21 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":27:13)
#loc22 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":27:28)
#loc23 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":28:13)
#loc24 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":37:13)
#loc25 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":28:21)
#loc26 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":30:13)
#loc27 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":31:17)
#loc28 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":32:17)
#loc29 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":33:13)
#loc30 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":34:17)
#loc31 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":35:17)
#loc32 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":38:23)
#loc33 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":38:13)
#loc34 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":104:1)
#loc35 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":108:1)
#loc36 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":106:5)
#loc37 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":106:11)
#loc38 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":107:5)
#loc39 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":107:11)
#loc40 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":53:19)
#loc41 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":48:1)
#loc42 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":76:1)
#loc43 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":50:5)
#loc44 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":75:5)
#loc45 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":50:8)
#loc46 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":51:5)
#loc47 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":54:5)
#loc48 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":56:5)
#loc49 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":53:9)
#loc50 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":57:9)
#loc51 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":74:9)
#loc52 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":58:13)
#loc53 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":58:38)
#loc54 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":59:13)
#loc55 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":59:17)
#loc56 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":60:18)
#loc57 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":60:27)
#loc58 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":60:13)
#loc59 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":60:28)
#loc60 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":61:13)
#loc61 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":72:13)
#loc62 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":61:21)
#loc63 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":63:13)
#loc64 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":64:30)
#loc65 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":64:17)
#loc66 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":65:17)
#loc67 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":66:13)
#loc68 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":67:30)
#loc69 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":67:17)
#loc70 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":68:17)
#loc71 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":70:13)
#loc72 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":71:17)
#loc73 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":73:23)
#loc74 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":73:13)
#loc75 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":79:1)
#loc76 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":102:1)
#loc77 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":81:5)
#loc78 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":101:5)
#loc79 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":81:8)
#loc80 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":82:5)
#loc81 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":83:9)
#loc82 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":100:9)
#loc83 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":84:13)
#loc84 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":84:38)
#loc85 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":85:13)
#loc86 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":85:17)
#loc87 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":86:18)
#loc88 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":86:27)
#loc89 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":86:13)
#loc90 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":86:28)
#loc91 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":87:13)
#loc92 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":98:13)
#loc93 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":87:21)
#loc94 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":89:13)
#loc95 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":90:30)
#loc96 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":90:17)
#loc97 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":91:17)
#loc98 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":92:13)
#loc99 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":93:30)
#loc100 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":93:17)
#loc101 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":94:17)
#loc102 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":96:13)
#loc103 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":97:17)
#loc104 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":99:23)
#loc105 = loc("CWE478_Missing_Default_Case_in_Switch__basic_02.c":99:13)
#loc106 = loc(fused[#loc2, #loc3])
#loc107 = loc(fused[#loc6, #loc7])
#loc108 = loc(fused[#loc8, #loc9])
#loc109 = loc(fused[#loc10, #loc11])
#loc110 = loc(fused[#loc13, #loc11])
#loc111 = loc(fused[#loc14, #loc15])
#loc112 = loc(fused[#loc16, #loc1])
#loc113 = loc(fused[#loc17, #loc18])
#loc114 = loc(fused[#loc19, #loc20])
#loc115 = loc(fused[#loc21, #loc22])
#loc116 = loc(fused[#loc23, #loc24])
#loc117 = loc(fused[#loc27, #loc4])
#loc118 = loc(fused[#loc30, #loc5])
#loc119 = loc(fused[#loc34, #loc35])
#loc120 = loc(fused[#loc36, #loc37])
#loc121 = loc(fused[#loc38, #loc39])
#loc122 = loc(fused[#loc41, #loc42])
#loc123 = loc(fused[#loc43, #loc44])
#loc124 = loc(fused[#loc46, #loc47, #loc48, #loc44])
#loc125 = loc(fused[#loc50, #loc51])
#loc126 = loc(fused[#loc52, #loc53])
#loc127 = loc(fused[#loc54, #loc55])
#loc128 = loc(fused[#loc56, #loc57])
#loc129 = loc(fused[#loc58, #loc59])
#loc130 = loc(fused[#loc60, #loc61])
#loc131 = loc(fused[#loc65, #loc64])
#loc132 = loc(fused[#loc69, #loc68])
#loc133 = loc(fused[#loc75, #loc76])
#loc134 = loc(fused[#loc77, #loc78])
#loc135 = loc(fused[#loc80, #loc78])
#loc136 = loc(fused[#loc81, #loc82])
#loc137 = loc(fused[#loc83, #loc84])
#loc138 = loc(fused[#loc85, #loc86])
#loc139 = loc(fused[#loc87, #loc88])
#loc140 = loc(fused[#loc89, #loc90])
#loc141 = loc(fused[#loc91, #loc92])
#loc142 = loc(fused[#loc96, #loc95])
#loc143 = loc(fused[#loc100, #loc99])
