!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s04/CWE78_OS_Command_Injection__char_listen_socket_popen_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2B2.data_buf = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc291)
  cir.global "private" constant cir_private @__const.goodG2B1.data_buf = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc292)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_listen_socket_popen_15_bad.data_buf = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc293)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc294)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc295)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc296)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc297)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc298)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc299)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc300)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc301)
  cir.func private @close(!s32i) -> !s32i loc(#loc302)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc303)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc27)
  cir.func private @popen(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc304)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"w\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc30)
  cir.func private @pclose(!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc305)
  cir.func no_proto @CWE78_OS_Command_Injection__char_listen_socket_popen_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc307)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["data_buf"] {alignment = 16 : i64} loc(#loc293)
    %2 = cir.get_global @__const.CWE78_OS_Command_Injection__char_listen_socket_popen_15_bad.data_buf : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc293)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc293)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc37)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc308)
    cir.scope {
      %4 = cir.const #cir.int<6> : !s32i loc(#loc41)
      cir.switch (%4 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc311)
            %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc312)
            %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc313)
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc314)
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc315)
            %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc316)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc52)
            %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc52)
            cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc314)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc54)
            %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc54)
            cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc315)
            %15 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc57)
            %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc58)
            %17 = cir.call @strlen(%16) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc57)
            cir.store %17, %10 : !u64i, !cir.ptr<!u64i> loc(#loc316)
            cir.scope {
              cir.do {
                cir.scope {
                  %18 = cir.const #cir.int<2> : !s32i loc(#loc63)
                  %19 = cir.const #cir.int<1> : !s32i loc(#loc64)
                  %20 = cir.const #cir.int<6> : !s32i loc(#loc65)
                  %21 = cir.call @socket(%18, %19, %20) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc66)
                  cir.store %21, %8 : !s32i, !cir.ptr<!s32i> loc(#loc319)
                  cir.scope {
                    %75 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc71)
                    %76 = cir.const #cir.int<1> : !s32i loc(#loc72)
                    %77 = cir.unary(minus, %76) nsw : !s32i, !s32i loc(#loc72)
                    %78 = cir.cmp(eq, %75, %77) : !s32i, !cir.bool loc(#loc321)
                    cir.if %78 {
                      cir.break loc(#loc74)
                    } loc(#loc322)
                  } loc(#loc320)
                  %22 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc323)
                  %23 = cir.const #cir.int<0> : !s32i loc(#loc77)
                  %24 = cir.const #cir.int<16> : !u64i loc(#loc324)
                  cir.libc.memset %24 bytes from %22 set to %23 : !cir.ptr<!void>, !s32i, !u64i loc(#loc325)
                  %25 = cir.const #cir.int<2> : !s32i loc(#loc82)
                  %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc82)
                  %27 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc83)
                  cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc326)
                  %28 = cir.const #cir.int<0> : !s32i loc(#loc85)
                  %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc85)
                  %30 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc86)
                  %31 = cir.get_member %30[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc87)
                  cir.store %29, %31 : !u32i, !cir.ptr<!u32i> loc(#loc327)
                  %32 = cir.const #cir.int<27015> : !s32i loc(#loc89)
                  %33 = cir.cast(integral, %32 : !s32i), !u16i loc(#loc89)
                  %34 = cir.call @htons(%33) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc90)
                  %35 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc91)
                  cir.store %34, %35 : !u16i, !cir.ptr<!u16i> loc(#loc328)
                  cir.scope {
                    %75 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc96)
                    %76 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc330)
                    %77 = cir.const #cir.int<16> : !u64i loc(#loc331)
                    %78 = cir.cast(integral, %77 : !u64i), !u32i loc(#loc331)
                    %79 = cir.call @bind(%75, %76, %78) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc101)
                    %80 = cir.const #cir.int<1> : !s32i loc(#loc102)
                    %81 = cir.unary(minus, %80) nsw : !s32i, !s32i loc(#loc102)
                    %82 = cir.cmp(eq, %79, %81) : !s32i, !cir.bool loc(#loc332)
                    cir.if %82 {
                      cir.break loc(#loc104)
                    } loc(#loc333)
                  } loc(#loc329)
                  cir.scope {
                    %75 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc107)
                    %76 = cir.const #cir.int<5> : !s32i loc(#loc108)
                    %77 = cir.call @listen(%75, %76) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc109)
                    %78 = cir.const #cir.int<1> : !s32i loc(#loc110)
                    %79 = cir.unary(minus, %78) nsw : !s32i, !s32i loc(#loc110)
                    %80 = cir.cmp(eq, %77, %79) : !s32i, !cir.bool loc(#loc335)
                    cir.if %80 {
                      cir.break loc(#loc112)
                    } loc(#loc336)
                  } loc(#loc334)
                  %36 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc113)
                  %37 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc114)
                  %38 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc115)
                  %39 = cir.call @accept(%36, %37, %38) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc116)
                  cir.store %39, %9 : !s32i, !cir.ptr<!s32i> loc(#loc337)
                  cir.scope {
                    %75 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc121)
                    %76 = cir.const #cir.int<1> : !s32i loc(#loc122)
                    %77 = cir.unary(minus, %76) nsw : !s32i, !s32i loc(#loc122)
                    %78 = cir.cmp(eq, %75, %77) : !s32i, !cir.bool loc(#loc339)
                    cir.if %78 {
                      cir.break loc(#loc124)
                    } loc(#loc340)
                  } loc(#loc338)
                  %40 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc125)
                  %41 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
                  %42 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc127)
                  %43 = cir.ptr_stride(%41 : !cir.ptr<!s8i>, %42 : !u64i), !cir.ptr<!s8i> loc(#loc128)
                  %44 = cir.cast(bitcast, %43 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc341)
                  %45 = cir.const #cir.int<1> : !u64i loc(#loc342)
                  %46 = cir.const #cir.int<100> : !s32i loc(#loc133)
                  %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc133)
                  %48 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc134)
                  %49 = cir.binop(sub, %47, %48) : !u64i loc(#loc343)
                  %50 = cir.const #cir.int<1> : !s32i loc(#loc135)
                  %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc135)
                  %52 = cir.binop(sub, %49, %51) : !u64i loc(#loc344)
                  %53 = cir.binop(mul, %45, %52) : !u64i loc(#loc345)
                  %54 = cir.const #cir.int<0> : !s32i loc(#loc137)
                  %55 = cir.call @recv(%40, %44, %53, %54) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc138)
                  %56 = cir.cast(integral, %55 : !s64i), !s32i loc(#loc138)
                  cir.store %56, %5 : !s32i, !cir.ptr<!s32i> loc(#loc346)
                  cir.scope {
                    %75 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc143)
                    %76 = cir.const #cir.int<1> : !s32i loc(#loc144)
                    %77 = cir.unary(minus, %76) nsw : !s32i, !s32i loc(#loc144)
                    %78 = cir.cmp(eq, %75, %77) : !s32i, !cir.bool loc(#loc348)
                    %79 = cir.ternary(%78, true {
                      %80 = cir.const #true loc(#loc145)
                      cir.yield %80 : !cir.bool loc(#loc145)
                    }, false {
                      %80 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc146)
                      %81 = cir.const #cir.int<0> : !s32i loc(#loc147)
                      %82 = cir.cmp(eq, %80, %81) : !s32i, !cir.bool loc(#loc349)
                      %83 = cir.ternary(%82, true {
                        %84 = cir.const #true loc(#loc145)
                        cir.yield %84 : !cir.bool loc(#loc145)
                      }, false {
                        %84 = cir.const #false loc(#loc145)
                        cir.yield %84 : !cir.bool loc(#loc145)
                      }) : (!cir.bool) -> !cir.bool loc(#loc145)
                      cir.yield %83 : !cir.bool loc(#loc145)
                    }) : (!cir.bool) -> !cir.bool loc(#loc145)
                    cir.if %79 {
                      cir.break loc(#loc149)
                    } loc(#loc350)
                  } loc(#loc347)
                  %57 = cir.const #cir.int<0> : !s32i loc(#loc150)
                  %58 = cir.cast(integral, %57 : !s32i), !s8i loc(#loc150)
                  %59 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
                  %60 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc152)
                  %61 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc153)
                  %62 = cir.cast(integral, %61 : !s32i), !u64i loc(#loc153)
                  %63 = cir.const #cir.int<1> : !u64i loc(#loc351)
                  %64 = cir.binop(div, %62, %63) : !u64i loc(#loc352)
                  %65 = cir.binop(add, %60, %64) : !u64i loc(#loc353)
                  %66 = cir.ptr_stride(%59 : !cir.ptr<!s8i>, %65 : !u64i), !cir.ptr<!s8i> loc(#loc156)
                  cir.store %58, %66 : !s8i, !cir.ptr<!s8i> loc(#loc354)
                  %67 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc157)
                  %68 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc158)
                  %69 = cir.const #cir.int<13> : !s32i loc(#loc159)
                  %70 = cir.call @strchr(%68, %69) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc157)
                  cir.store %70, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc355)
                  cir.scope {
                    %75 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc164)
                    %76 = cir.cast(ptr_to_bool, %75 : !cir.ptr<!s8i>), !cir.bool loc(#loc164)
                    cir.if %76 {
                      %77 = cir.const #cir.int<0> : !s32i loc(#loc166)
                      %78 = cir.cast(integral, %77 : !s32i), !s8i loc(#loc166)
                      %79 = cir.load deref %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc167)
                      cir.store %78, %79 : !s8i, !cir.ptr<!s8i> loc(#loc358)
                    } loc(#loc357)
                  } loc(#loc356)
                  %71 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc169)
                  %72 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc170)
                  %73 = cir.const #cir.int<10> : !s32i loc(#loc171)
                  %74 = cir.call @strchr(%72, %73) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc169)
                  cir.store %74, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc359)
                  cir.scope {
                    %75 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc176)
                    %76 = cir.cast(ptr_to_bool, %75 : !cir.ptr<!s8i>), !cir.bool loc(#loc176)
                    cir.if %76 {
                      %77 = cir.const #cir.int<0> : !s32i loc(#loc178)
                      %78 = cir.cast(integral, %77 : !s32i), !s8i loc(#loc178)
                      %79 = cir.load deref %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc179)
                      cir.store %78, %79 : !s8i, !cir.ptr<!s8i> loc(#loc362)
                    } loc(#loc361)
                  } loc(#loc360)
                } loc(#loc318)
                cir.yield loc(#loc60)
              } while {
                %18 = cir.const #cir.int<0> : !s32i loc(#loc181)
                %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc181)
                cir.condition(%19) loc(#loc181)
              } loc(#loc317)
            } loc(#loc317)
            cir.scope {
              %18 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc184)
              %19 = cir.const #cir.int<1> : !s32i loc(#loc185)
              %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc185)
              %21 = cir.cmp(ne, %18, %20) : !s32i, !cir.bool loc(#loc364)
              cir.if %21 {
                %22 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc187)
                %23 = cir.call @close(%22) : (!s32i) -> !s32i loc(#loc188)
              } loc(#loc365)
            } loc(#loc363)
            cir.scope {
              %18 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc191)
              %19 = cir.const #cir.int<1> : !s32i loc(#loc192)
              %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc192)
              %21 = cir.cmp(ne, %18, %20) : !s32i, !cir.bool loc(#loc367)
              cir.if %21 {
                %22 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc194)
                %23 = cir.call @close(%22) : (!s32i) -> !s32i loc(#loc195)
              } loc(#loc368)
            } loc(#loc366)
          } loc(#loc310)
          cir.break loc(#loc196)
        } loc(#loc42)
        cir.case(default, []) {
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc27)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc27)
          cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc198)
          cir.break loc(#loc199)
        } loc(#loc197)
        cir.yield loc(#loc39)
      } loc(#loc39)
    } loc(#loc309)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>>, ["pipe"] {alignment = 8 : i64} loc(#loc370)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc204)
      %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc30)
      %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc30)
      %8 = cir.call @popen(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc205)
      cir.store %8, %4 : !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc371)
      cir.scope {
        %9 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc210)
        %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc211)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__IO_FILE> loc(#loc211)
        %12 = cir.cmp(ne, %9, %11) : !cir.ptr<!ty__IO_FILE>, !cir.bool loc(#loc373)
        cir.if %12 {
          %13 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc213)
          %14 = cir.call @pclose(%13) : (!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc214)
        } loc(#loc374)
      } loc(#loc372)
    } loc(#loc369)
    cir.return loc(#loc34)
  } loc(#loc306)
  cir.func no_proto @CWE78_OS_Command_Injection__char_listen_socket_popen_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc376)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc217)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc377)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc219)
    cir.return loc(#loc216)
  } loc(#loc375)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc378)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc223)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc380)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["data_buf"] {alignment = 16 : i64} loc(#loc292)
    %2 = cir.get_global @__const.goodG2B1.data_buf : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc292)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc292)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc228)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc381)
    cir.scope {
      %4 = cir.const #cir.int<5> : !s32i loc(#loc232)
      cir.switch (%4 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc234)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc234)
          cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc235)
          cir.break loc(#loc236)
        } loc(#loc233)
        cir.case(default, []) {
          %5 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc238)
          %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc239)
          %7 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc223)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc223)
          %9 = cir.call @strcat(%6, %8) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc238)
          cir.break loc(#loc240)
        } loc(#loc237)
        cir.yield loc(#loc230)
      } loc(#loc230)
    } loc(#loc382)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>>, ["pipe"] {alignment = 8 : i64} loc(#loc384)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc245)
      %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc246)
      %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc246)
      %8 = cir.call @popen(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc247)
      cir.store %8, %4 : !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc385)
      cir.scope {
        %9 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc252)
        %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc253)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__IO_FILE> loc(#loc253)
        %12 = cir.cmp(ne, %9, %11) : !cir.ptr<!ty__IO_FILE>, !cir.bool loc(#loc387)
        cir.if %12 {
          %13 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc255)
          %14 = cir.call @pclose(%13) : (!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc256)
        } loc(#loc388)
      } loc(#loc386)
    } loc(#loc383)
    cir.return loc(#loc225)
  } loc(#loc379)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc390)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["data_buf"] {alignment = 16 : i64} loc(#loc291)
    %2 = cir.get_global @__const.goodG2B2.data_buf : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc291)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc291)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc261)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc391)
    cir.scope {
      %4 = cir.const #cir.int<6> : !s32i loc(#loc265)
      cir.switch (%4 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %5 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc267)
          %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc268)
          %7 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc269)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc269)
          %9 = cir.call @strcat(%6, %8) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc267)
          cir.break loc(#loc270)
        } loc(#loc266)
        cir.case(default, []) {
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc272)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc272)
          cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc273)
          cir.break loc(#loc274)
        } loc(#loc271)
        cir.yield loc(#loc263)
      } loc(#loc263)
    } loc(#loc392)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>>, ["pipe"] {alignment = 8 : i64} loc(#loc394)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc279)
      %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc280)
      %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc280)
      %8 = cir.call @popen(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc281)
      cir.store %8, %4 : !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc395)
      cir.scope {
        %9 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc286)
        %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc287)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__IO_FILE> loc(#loc287)
        %12 = cir.cmp(ne, %9, %11) : !cir.ptr<!ty__IO_FILE>, !cir.bool loc(#loc397)
        cir.if %12 {
          %13 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc289)
          %14 = cir.call @pclose(%13) : (!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc290)
        } loc(#loc398)
      } loc(#loc396)
    } loc(#loc393)
    cir.return loc(#loc258)
  } loc(#loc389)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s04/CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":199:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":199:26)
#loc3 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":171:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":171:26)
#loc5 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":62:5)
#loc6 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":62:26)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc11 = loc("/usr/include/netinet/in.h":402:1)
#loc12 = loc("/usr/include/netinet/in.h":403:40)
#loc13 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc14 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc15 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc16 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc17 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc18 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc19 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc20 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc21 = loc("/usr/include/string.h":246:1)
#loc22 = loc("/usr/include/string.h":247:33)
#loc23 = loc("/usr/include/unistd.h":358:1)
#loc24 = loc("/usr/include/unistd.h":358:27)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc26 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc27 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":149:19)
#loc28 = loc("/usr/include/stdio.h":903:1)
#loc29 = loc("/usr/include/stdio.h":904:3)
#loc30 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":155:28)
#loc31 = loc("/usr/include/stdio.h":897:1)
#loc32 = loc("/usr/include/stdio.h":897:36)
#loc33 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":59:1)
#loc34 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":161:1)
#loc35 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":61:5)
#loc36 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":61:12)
#loc37 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":63:12)
#loc38 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":63:5)
#loc39 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":64:5)
#loc40 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":151:5)
#loc41 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":64:12)
#loc42 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":66:5)
#loc43 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":67:5)
#loc44 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":145:5)
#loc45 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":72:9)
#loc46 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":72:13)
#loc47 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":73:9)
#loc48 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":73:28)
#loc49 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":74:9)
#loc50 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":74:15)
#loc51 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":75:9)
#loc52 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":75:31)
#loc53 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":76:9)
#loc54 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":76:31)
#loc55 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":77:9)
#loc56 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":77:37)
#loc57 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":77:26)
#loc58 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":77:33)
#loc59 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":78:9)
#loc60 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":130:17)
#loc61 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":79:9)
#loc62 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":129:9)
#loc63 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":88:35)
#loc64 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":88:44)
#loc65 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":88:57)
#loc66 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":88:28)
#loc67 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":88:13)
#loc68 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":88:68)
#loc69 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":89:13)
#loc70 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":92:13)
#loc71 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":89:17)
#loc72 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":89:33)
#loc73 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":90:13)
#loc74 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":91:17)
#loc75 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":93:20)
#loc76 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":93:21)
#loc77 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":93:30)
#loc78 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":93:33)
#loc79 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":93:47)
#loc80 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":93:13)
#loc81 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":93:48)
#loc82 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":94:34)
#loc83 = loc("/usr/include/netinet/in.h":249:5)
#loc84 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":94:13)
#loc85 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":95:39)
#loc86 = loc("/usr/include/netinet/in.h":251:20)
#loc87 = loc("/usr/include/netinet/in.h":33:15)
#loc88 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":95:13)
#loc89 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":96:38)
#loc90 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":96:32)
#loc91 = loc("/usr/include/netinet/in.h":250:15)
#loc92 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":96:13)
#loc93 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":96:46)
#loc94 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":97:13)
#loc95 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":100:13)
#loc96 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":97:22)
#loc97 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":97:54)
#loc98 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":97:55)
#loc99 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":97:64)
#loc100 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":97:78)
#loc101 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":97:17)
#loc102 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":97:84)
#loc103 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":98:13)
#loc104 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":99:17)
#loc105 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":101:13)
#loc106 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":104:13)
#loc107 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":101:24)
#loc108 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":101:38)
#loc109 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":101:17)
#loc110 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":101:57)
#loc111 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":102:13)
#loc112 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":103:17)
#loc113 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":105:35)
#loc114 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":105:49)
#loc115 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":105:55)
#loc116 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":105:28)
#loc117 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":105:13)
#loc118 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":105:59)
#loc119 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":106:13)
#loc120 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":109:13)
#loc121 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":106:17)
#loc122 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":106:33)
#loc123 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":107:13)
#loc124 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":108:17)
#loc125 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":111:31)
#loc126 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":111:54)
#loc127 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":111:61)
#loc128 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":111:59)
#loc129 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":111:45)
#loc130 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":111:68)
#loc131 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":111:71)
#loc132 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":111:82)
#loc133 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":111:87)
#loc134 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":111:93)
#loc135 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":111:103)
#loc136 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":111:104)
#loc137 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":111:107)
#loc138 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":111:26)
#loc139 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":111:13)
#loc140 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":111:108)
#loc141 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":112:13)
#loc142 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":115:13)
#loc143 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":112:17)
#loc144 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":112:31)
#loc145 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":112:44)
#loc146 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":112:47)
#loc147 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":112:61)
#loc148 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":113:13)
#loc149 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":114:17)
#loc150 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":117:57)
#loc151 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":117:13)
#loc152 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":117:18)
#loc153 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":117:28)
#loc154 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":117:41)
#loc155 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":117:52)
#loc156 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":117:53)
#loc157 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":119:23)
#loc158 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":119:30)
#loc159 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":119:36)
#loc160 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":119:13)
#loc161 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":119:40)
#loc162 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":120:13)
#loc163 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":123:13)
#loc164 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":120:17)
#loc165 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":121:13)
#loc166 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":122:28)
#loc167 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":122:18)
#loc168 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":122:17)
#loc169 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":124:23)
#loc170 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":124:30)
#loc171 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":124:36)
#loc172 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":124:13)
#loc173 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":124:40)
#loc174 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":125:13)
#loc175 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":128:13)
#loc176 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":125:17)
#loc177 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":126:13)
#loc178 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":127:28)
#loc179 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":127:18)
#loc180 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":127:17)
#loc181 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":130:16)
#loc182 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":131:9)
#loc183 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":134:9)
#loc184 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":131:13)
#loc185 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":131:29)
#loc186 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":132:9)
#loc187 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":133:26)
#loc188 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":133:13)
#loc189 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":135:9)
#loc190 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":138:9)
#loc191 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":135:13)
#loc192 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":135:29)
#loc193 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":136:9)
#loc194 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":137:26)
#loc195 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":137:13)
#loc196 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":146:5)
#loc197 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":147:5)
#loc198 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":149:9)
#loc199 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":150:9)
#loc200 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":152:5)
#loc201 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":160:5)
#loc202 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":153:9)
#loc203 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":153:15)
#loc204 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":155:22)
#loc205 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":155:16)
#loc206 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":155:9)
#loc207 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":155:31)
#loc208 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":156:9)
#loc209 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":159:9)
#loc210 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":156:13)
#loc211 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":156:21)
#loc212 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":157:9)
#loc213 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":158:20)
#loc214 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":158:13)
#loc215 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":223:1)
#loc216 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":227:1)
#loc217 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":225:5)
#loc218 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":225:14)
#loc219 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":226:5)
#loc220 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":226:14)
#loc221 = loc("/usr/include/string.h":149:1)
#loc222 = loc("/usr/include/string.h":150:14)
#loc223 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":181:22)
#loc224 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":168:1)
#loc225 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":193:1)
#loc226 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":170:5)
#loc227 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":170:12)
#loc228 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":172:12)
#loc229 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":172:5)
#loc230 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":173:5)
#loc231 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":183:5)
#loc232 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":173:12)
#loc233 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":175:5)
#loc234 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":177:19)
#loc235 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":177:9)
#loc236 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":178:9)
#loc237 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":179:5)
#loc238 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":181:9)
#loc239 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":181:16)
#loc240 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":182:9)
#loc241 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":184:5)
#loc242 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":192:5)
#loc243 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":185:9)
#loc244 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":185:15)
#loc245 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":187:22)
#loc246 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":187:28)
#loc247 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":187:16)
#loc248 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":187:9)
#loc249 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":187:31)
#loc250 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":188:9)
#loc251 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":191:9)
#loc252 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":188:13)
#loc253 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":188:21)
#loc254 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":189:9)
#loc255 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":190:20)
#loc256 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":190:13)
#loc257 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":196:1)
#loc258 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":221:1)
#loc259 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":198:5)
#loc260 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":198:12)
#loc261 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":200:12)
#loc262 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":200:5)
#loc263 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":201:5)
#loc264 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":211:5)
#loc265 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":201:12)
#loc266 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":203:5)
#loc267 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":205:9)
#loc268 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":205:16)
#loc269 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":205:22)
#loc270 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":206:9)
#loc271 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":207:5)
#loc272 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":209:19)
#loc273 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":209:9)
#loc274 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":210:9)
#loc275 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":212:5)
#loc276 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":220:5)
#loc277 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":213:9)
#loc278 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":213:15)
#loc279 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":215:22)
#loc280 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":215:28)
#loc281 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":215:16)
#loc282 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":215:9)
#loc283 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":215:31)
#loc284 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":216:9)
#loc285 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":219:9)
#loc286 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":216:13)
#loc287 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":216:21)
#loc288 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":217:9)
#loc289 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":218:20)
#loc290 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_15.c":218:13)
#loc291 = loc(fused[#loc1, #loc2])
#loc292 = loc(fused[#loc3, #loc4])
#loc293 = loc(fused[#loc5, #loc6])
#loc294 = loc(fused[#loc7, #loc8])
#loc295 = loc(fused[#loc9, #loc10])
#loc296 = loc(fused[#loc11, #loc12])
#loc297 = loc(fused[#loc13, #loc14])
#loc298 = loc(fused[#loc15, #loc16])
#loc299 = loc(fused[#loc17, #loc18])
#loc300 = loc(fused[#loc19, #loc20])
#loc301 = loc(fused[#loc21, #loc22])
#loc302 = loc(fused[#loc23, #loc24])
#loc303 = loc(fused[#loc25, #loc26])
#loc304 = loc(fused[#loc28, #loc29])
#loc305 = loc(fused[#loc31, #loc32])
#loc306 = loc(fused[#loc33, #loc34])
#loc307 = loc(fused[#loc35, #loc36])
#loc308 = loc(fused[#loc38, #loc37])
#loc309 = loc(fused[#loc39, #loc40])
#loc310 = loc(fused[#loc43, #loc44])
#loc311 = loc(fused[#loc45, #loc46])
#loc312 = loc(fused[#loc47, #loc48])
#loc313 = loc(fused[#loc49, #loc50])
#loc314 = loc(fused[#loc51, #loc52])
#loc315 = loc(fused[#loc53, #loc54])
#loc316 = loc(fused[#loc55, #loc56])
#loc317 = loc(fused[#loc59, #loc60])
#loc318 = loc(fused[#loc61, #loc62])
#loc319 = loc(fused[#loc67, #loc68])
#loc320 = loc(fused[#loc69, #loc70])
#loc321 = loc(fused[#loc71, #loc72])
#loc322 = loc(fused[#loc73, #loc70])
#loc323 = loc(fused[#loc75, #loc76])
#loc324 = loc(fused[#loc78, #loc79])
#loc325 = loc(fused[#loc80, #loc81])
#loc326 = loc(fused[#loc84, #loc82])
#loc327 = loc(fused[#loc88, #loc85])
#loc328 = loc(fused[#loc92, #loc93])
#loc329 = loc(fused[#loc94, #loc95])
#loc330 = loc(fused[#loc97, #loc98])
#loc331 = loc(fused[#loc99, #loc100])
#loc332 = loc(fused[#loc101, #loc102])
#loc333 = loc(fused[#loc103, #loc95])
#loc334 = loc(fused[#loc105, #loc106])
#loc335 = loc(fused[#loc109, #loc110])
#loc336 = loc(fused[#loc111, #loc106])
#loc337 = loc(fused[#loc117, #loc118])
#loc338 = loc(fused[#loc119, #loc120])
#loc339 = loc(fused[#loc121, #loc122])
#loc340 = loc(fused[#loc123, #loc120])
#loc341 = loc(fused[#loc129, #loc130])
#loc342 = loc(fused[#loc131, #loc132])
#loc343 = loc(fused[#loc133, #loc134])
#loc344 = loc(fused[#loc133, #loc135])
#loc345 = loc(fused[#loc131, #loc136])
#loc346 = loc(fused[#loc139, #loc140])
#loc347 = loc(fused[#loc141, #loc142])
#loc348 = loc(fused[#loc143, #loc144])
#loc349 = loc(fused[#loc146, #loc147])
#loc350 = loc(fused[#loc148, #loc142])
#loc351 = loc(fused[#loc154, #loc155])
#loc352 = loc(fused[#loc153, #loc155])
#loc353 = loc(fused[#loc152, #loc155])
#loc354 = loc(fused[#loc151, #loc150])
#loc355 = loc(fused[#loc160, #loc161])
#loc356 = loc(fused[#loc162, #loc163])
#loc357 = loc(fused[#loc165, #loc163])
#loc358 = loc(fused[#loc168, #loc166])
#loc359 = loc(fused[#loc172, #loc173])
#loc360 = loc(fused[#loc174, #loc175])
#loc361 = loc(fused[#loc177, #loc175])
#loc362 = loc(fused[#loc180, #loc178])
#loc363 = loc(fused[#loc182, #loc183])
#loc364 = loc(fused[#loc184, #loc185])
#loc365 = loc(fused[#loc186, #loc183])
#loc366 = loc(fused[#loc189, #loc190])
#loc367 = loc(fused[#loc191, #loc192])
#loc368 = loc(fused[#loc193, #loc190])
#loc369 = loc(fused[#loc200, #loc201])
#loc370 = loc(fused[#loc202, #loc203])
#loc371 = loc(fused[#loc206, #loc207])
#loc372 = loc(fused[#loc208, #loc209])
#loc373 = loc(fused[#loc210, #loc211])
#loc374 = loc(fused[#loc212, #loc209])
#loc375 = loc(fused[#loc215, #loc216])
#loc376 = loc(fused[#loc217, #loc218])
#loc377 = loc(fused[#loc219, #loc220])
#loc378 = loc(fused[#loc221, #loc222])
#loc379 = loc(fused[#loc224, #loc225])
#loc380 = loc(fused[#loc226, #loc227])
#loc381 = loc(fused[#loc229, #loc228])
#loc382 = loc(fused[#loc230, #loc231])
#loc383 = loc(fused[#loc241, #loc242])
#loc384 = loc(fused[#loc243, #loc244])
#loc385 = loc(fused[#loc248, #loc249])
#loc386 = loc(fused[#loc250, #loc251])
#loc387 = loc(fused[#loc252, #loc253])
#loc388 = loc(fused[#loc254, #loc251])
#loc389 = loc(fused[#loc257, #loc258])
#loc390 = loc(fused[#loc259, #loc260])
#loc391 = loc(fused[#loc262, #loc261])
#loc392 = loc(fused[#loc263, #loc264])
#loc393 = loc(fused[#loc275, #loc276])
#loc394 = loc(fused[#loc277, #loc278])
#loc395 = loc(fused[#loc282, #loc283])
#loc396 = loc(fused[#loc284, #loc285])
#loc397 = loc(fused[#loc286, #loc287])
#loc398 = loc(fused[#loc288, #loc285])
