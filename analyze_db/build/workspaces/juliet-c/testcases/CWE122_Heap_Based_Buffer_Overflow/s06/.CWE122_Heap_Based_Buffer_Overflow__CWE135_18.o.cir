!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc215)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc216)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc217)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc218)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc219)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc220)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc221)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc222)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc224)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc225)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc226)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc227)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc27)
    cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc228)
    cir.br ^bb1 loc(#loc229)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc31)
    %6 = cir.const #cir.int<50> : !s32i loc(#loc32)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc32)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc230)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc231)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc31)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc232)
    cir.store %11, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc225)
    cir.br ^bb2 loc(#loc233)
  ^bb2:  // pred: ^bb1
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc37)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc38)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc38)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc234)
    cir.brcond %15 ^bb3, ^bb4 loc(#loc235)
  ^bb3:  // pred: ^bb2
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc40)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc42)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc40)
    cir.br ^bb4 loc(#loc36)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc36)
  ^bb5:  // pred: ^bb4
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
    %20 = cir.const #cir.int<65> : !s32i loc(#loc44)
    %21 = cir.const #cir.int<50> : !s32i loc(#loc45)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc46)
    %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc45)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc45)
    %25 = cir.call @wmemset(%19, %20, %24) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc47)
    %26 = cir.const #cir.int<0> : !s32i loc(#loc48)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
    %28 = cir.const #cir.int<50> : !s32i loc(#loc50)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc50)
    %31 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc52)
    cir.store %26, %31 : !s32i, !cir.ptr<!s32i> loc(#loc236)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc53)
    cir.store %33, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc237)
    cir.br ^bb6 loc(#loc238)
  ^bb6:  // pred: ^bb5
    %34 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc57)
    %35 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc58)
    %36 = cir.cast(bitcast, %35 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc58)
    %37 = cir.call @strlen(%36) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc57)
    cir.store %37, %2 : !u64i, !cir.ptr<!u64i> loc(#loc226)
    %38 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc59)
    %39 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc60)
    %40 = cir.const #cir.int<1> : !s32i loc(#loc61)
    %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc61)
    %42 = cir.binop(add, %39, %41) : !u64i loc(#loc239)
    %43 = cir.const #cir.int<4> : !u64i loc(#loc240)
    %44 = cir.call @calloc(%42, %43) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc59)
    cir.store %44, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc227)
    cir.br ^bb7 loc(#loc241)
  ^bb7:  // pred: ^bb6
    %45 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc66)
    %46 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc67)
    %47 = cir.cmp(eq, %45, %46) : !cir.ptr<!void>, !cir.bool loc(#loc242)
    cir.brcond %47 ^bb8, ^bb9 loc(#loc243)
  ^bb8:  // pred: ^bb7
    %48 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc69)
    %49 = cir.const #cir.int<1> : !s32i loc(#loc70)
    %50 = cir.unary(minus, %49) nsw : !s32i, !s32i loc(#loc71)
    cir.call @exit(%50) : (!s32i) -> () extra(#fn_attr) loc(#loc69)
    cir.br ^bb9 loc(#loc65)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc65)
  ^bb10:  // pred: ^bb9
    %51 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc72)
    %52 = cir.cast(bitcast, %51 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc72)
    %53 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc73)
    %54 = cir.cast(bitcast, %53 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc73)
    %55 = cir.call @wcscpy(%52, %54) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc74)
    %56 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc75)
    %57 = cir.cast(bitcast, %56 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%57) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %58 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc77)
    cir.call @free(%58) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc78)
    cir.return loc(#loc18)
  } loc(#loc223)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc245)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc81)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc246)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc83)
    cir.return loc(#loc80)
  } loc(#loc244)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc247)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc248)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc250)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc251)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc252)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc253)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc99)
    cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc254)
    cir.br ^bb1 loc(#loc255)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc103)
    %6 = cir.const #cir.int<50> : !s32i loc(#loc104)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc104)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc256)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc257)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc103)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc258)
    cir.store %11, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc251)
    cir.br ^bb2 loc(#loc259)
  ^bb2:  // pred: ^bb1
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc109)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc110)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc110)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc260)
    cir.brcond %15 ^bb3, ^bb4 loc(#loc261)
  ^bb3:  // pred: ^bb2
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc112)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc113)
    %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc114)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc112)
    cir.br ^bb4 loc(#loc108)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc108)
  ^bb5:  // pred: ^bb4
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc115)
    %20 = cir.const #cir.int<65> : !s32i loc(#loc116)
    %21 = cir.const #cir.int<50> : !s32i loc(#loc117)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc117)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc117)
    %25 = cir.call @wmemset(%19, %20, %24) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc119)
    %26 = cir.const #cir.int<0> : !s32i loc(#loc120)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc121)
    %28 = cir.const #cir.int<50> : !s32i loc(#loc122)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc123)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc122)
    %31 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc124)
    cir.store %26, %31 : !s32i, !cir.ptr<!s32i> loc(#loc262)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc125)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc125)
    cir.store %33, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc263)
    cir.br ^bb6 loc(#loc264)
  ^bb6:  // pred: ^bb5
    %34 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc129)
    %35 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc130)
    %36 = cir.cast(bitcast, %35 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc130)
    %37 = cir.call @wcslen(%36) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc129)
    cir.store %37, %2 : !u64i, !cir.ptr<!u64i> loc(#loc252)
    %38 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc131)
    %39 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc132)
    %40 = cir.const #cir.int<1> : !s32i loc(#loc133)
    %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc133)
    %42 = cir.binop(add, %39, %41) : !u64i loc(#loc265)
    %43 = cir.const #cir.int<4> : !u64i loc(#loc266)
    %44 = cir.call @calloc(%42, %43) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc131)
    cir.store %44, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc253)
    cir.br ^bb7 loc(#loc267)
  ^bb7:  // pred: ^bb6
    %45 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc138)
    %46 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc139)
    %47 = cir.cmp(eq, %45, %46) : !cir.ptr<!void>, !cir.bool loc(#loc268)
    cir.brcond %47 ^bb8, ^bb9 loc(#loc269)
  ^bb8:  // pred: ^bb7
    %48 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc141)
    %49 = cir.const #cir.int<1> : !s32i loc(#loc142)
    %50 = cir.unary(minus, %49) nsw : !s32i, !s32i loc(#loc143)
    cir.call @exit(%50) : (!s32i) -> () extra(#fn_attr) loc(#loc141)
    cir.br ^bb9 loc(#loc137)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc137)
  ^bb10:  // pred: ^bb9
    %51 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc144)
    %52 = cir.cast(bitcast, %51 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc144)
    %53 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc145)
    %54 = cir.cast(bitcast, %53 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc145)
    %55 = cir.call @wcscpy(%52, %54) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc146)
    %56 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc147)
    %57 = cir.cast(bitcast, %56 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc147)
    cir.call @printWLine(%57) : (!cir.ptr<!s32i>) -> () loc(#loc148)
    %58 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc149)
    cir.call @free(%58) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc150)
    cir.return loc(#loc90)
  } loc(#loc249)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc270)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc272)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc273)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc274)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc275)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc163)
    cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc276)
    cir.br ^bb1 loc(#loc277)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc167)
    %6 = cir.const #cir.int<50> : !s32i loc(#loc168)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc168)
    %8 = cir.const #cir.int<1> : !u64i loc(#loc278)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc279)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc167)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc280)
    cir.store %11, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc273)
    cir.br ^bb2 loc(#loc281)
  ^bb2:  // pred: ^bb1
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc173)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc174)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc174)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc282)
    cir.brcond %15 ^bb3, ^bb4 loc(#loc283)
  ^bb3:  // pred: ^bb2
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc176)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc177)
    %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc178)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc176)
    cir.br ^bb4 loc(#loc172)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc172)
  ^bb5:  // pred: ^bb4
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc179)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc179)
    %21 = cir.const #cir.int<65> : !s32i loc(#loc180)
    %22 = cir.const #cir.int<50> : !s32i loc(#loc181)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc182)
    %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc181)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc181)
    cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc284)
    %26 = cir.const #cir.int<0> : !s32i loc(#loc185)
    %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc185)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc186)
    %29 = cir.const #cir.int<50> : !s32i loc(#loc187)
    %30 = cir.const #cir.int<1> : !s32i loc(#loc188)
    %31 = cir.binop(sub, %29, %30) nsw : !s32i loc(#loc187)
    %32 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %31 : !s32i), !cir.ptr<!s8i> loc(#loc189)
    cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc285)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc190)
    %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc190)
    cir.store %34, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc286)
    cir.br ^bb6 loc(#loc287)
  ^bb6:  // pred: ^bb5
    %35 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc194)
    %36 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc195)
    %37 = cir.cast(bitcast, %36 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc195)
    %38 = cir.call @strlen(%37) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc194)
    cir.store %38, %2 : !u64i, !cir.ptr<!u64i> loc(#loc274)
    %39 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc196)
    %40 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc197)
    %41 = cir.const #cir.int<1> : !s32i loc(#loc198)
    %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc198)
    %43 = cir.binop(add, %40, %42) : !u64i loc(#loc288)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc199)
    %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc199)
    %46 = cir.call @calloc(%43, %45) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc196)
    cir.store %46, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc275)
    cir.br ^bb7 loc(#loc289)
  ^bb7:  // pred: ^bb6
    %47 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc202)
    %48 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc203)
    %49 = cir.cmp(eq, %47, %48) : !cir.ptr<!void>, !cir.bool loc(#loc290)
    cir.brcond %49 ^bb8, ^bb9 loc(#loc291)
  ^bb8:  // pred: ^bb7
    %50 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc205)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc206)
    %52 = cir.unary(minus, %51) nsw : !s32i, !s32i loc(#loc207)
    cir.call @exit(%52) : (!s32i) -> () extra(#fn_attr) loc(#loc205)
    cir.br ^bb9 loc(#loc201)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc201)
  ^bb10:  // pred: ^bb9
    %53 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc208)
    %54 = cir.cast(bitcast, %53 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc208)
    %55 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc209)
    %56 = cir.cast(bitcast, %55 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc209)
    %57 = cir.call @strcpy(%54, %56) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc210)
    %58 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc211)
    %59 = cir.cast(bitcast, %58 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc211)
    cir.call @printLine(%59) : (!cir.ptr<!s8i>) -> () loc(#loc212)
    %60 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc213)
    cir.call @free(%60) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc214)
    cir.return loc(#loc154)
  } loc(#loc271)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/stdlib.h":675:1)
#loc10 = loc("/usr/include/stdlib.h":676:14)
#loc11 = loc("/usr/include/wchar.h":98:1)
#loc12 = loc("/usr/include/wchar.h":100:14)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc15 = loc("/usr/include/stdlib.h":687:1)
#loc16 = loc("/usr/include/stdlib.h":687:32)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":24:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":49:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":26:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":26:12)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":31:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":31:71)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":42:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":42:45)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":43:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":43:64)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":27:12)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":27:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":28:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":28:10)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":31:46)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":31:53)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":31:56)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":31:70)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":32:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":32:46)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":32:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":32:30)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":32:36)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":32:37)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":32:43)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":32:42)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":33:17)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":33:32)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":33:38)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":33:41)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":33:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":34:31)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":34:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":34:23)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":34:26)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":34:27)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":36:24)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":36:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":38:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":38:10)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":42:26)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":42:41)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":43:31)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":43:38)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":43:46)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":43:49)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":43:63)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":44:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":44:37)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":44:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":44:21)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":44:27)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":44:28)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":44:34)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":44:33)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":45:22)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":45:28)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":45:15)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":46:27)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":46:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":47:14)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":47:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":111:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":115:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":113:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":113:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":114:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":114:13)
#loc85 = loc("/usr/include/wchar.h":247:1)
#loc86 = loc("/usr/include/wchar.h":247:51)
#loc87 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc88 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":56:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":81:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":58:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":58:12)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":63:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":63:71)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":74:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":74:48)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":75:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":75:64)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":59:12)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":59:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":60:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":60:10)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":63:46)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":63:53)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":63:56)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":63:70)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":64:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":64:46)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":64:13)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":64:30)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":64:36)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":64:37)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":64:43)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":64:42)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":65:17)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":65:32)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":65:38)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":65:41)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":65:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":66:31)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":66:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":66:23)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":66:26)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":66:27)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":68:24)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":68:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":70:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":70:10)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":74:26)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":74:44)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":75:31)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":75:38)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":75:46)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":75:49)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":75:63)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":76:9)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":76:37)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":76:13)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":76:21)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":76:27)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":76:28)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":76:34)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":76:33)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":77:22)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":77:28)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":77:15)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":78:31)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":78:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":79:14)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":79:9)
#loc151 = loc("/usr/include/string.h":141:1)
#loc152 = loc("/usr/include/string.h":142:14)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":84:1)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":109:1)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":86:5)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":86:12)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":91:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":91:63)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":102:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":102:45)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":103:9)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":103:50)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":87:12)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":87:5)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":88:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":88:10)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":91:41)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":91:48)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":91:51)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":91:62)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":92:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":92:47)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":92:13)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":92:31)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":92:37)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":92:38)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":92:44)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":92:43)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":93:16)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":93:32)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":93:37)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":93:40)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":93:9)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":93:41)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":94:32)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":94:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":94:24)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":94:27)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":94:28)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":96:24)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":96:9)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":98:5)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":98:10)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":102:26)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":102:41)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":103:31)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":103:38)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":103:46)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":103:49)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":104:9)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":104:37)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":104:13)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":104:21)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":104:27)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":104:28)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":104:34)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":104:33)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":105:22)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":105:28)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":105:15)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":106:27)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":106:9)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":107:14)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c":107:9)
#loc215 = loc(fused[#loc1, #loc2])
#loc216 = loc(fused[#loc3, #loc4])
#loc217 = loc(fused[#loc5, #loc6])
#loc218 = loc(fused[#loc7, #loc8])
#loc219 = loc(fused[#loc9, #loc10])
#loc220 = loc(fused[#loc11, #loc12])
#loc221 = loc(fused[#loc13, #loc14])
#loc222 = loc(fused[#loc15, #loc16])
#loc223 = loc(fused[#loc17, #loc18])
#loc224 = loc(fused[#loc19, #loc20])
#loc225 = loc(fused[#loc21, #loc22])
#loc226 = loc(fused[#loc23, #loc24])
#loc227 = loc(fused[#loc25, #loc26])
#loc228 = loc(fused[#loc28, #loc27])
#loc229 = loc(fused[#loc29, #loc30])
#loc230 = loc(fused[#loc33, #loc34])
#loc231 = loc(fused[#loc32, #loc34])
#loc232 = loc(fused[#loc31, #loc22])
#loc233 = loc(fused[#loc35, #loc36])
#loc234 = loc(fused[#loc37, #loc38])
#loc235 = loc(fused[#loc39, #loc36])
#loc236 = loc(fused[#loc49, #loc48])
#loc237 = loc(fused[#loc54, #loc53])
#loc238 = loc(fused[#loc55, #loc56])
#loc239 = loc(fused[#loc60, #loc61])
#loc240 = loc(fused[#loc62, #loc63])
#loc241 = loc(fused[#loc64, #loc65])
#loc242 = loc(fused[#loc66, #loc67])
#loc243 = loc(fused[#loc68, #loc65])
#loc244 = loc(fused[#loc79, #loc80])
#loc245 = loc(fused[#loc81, #loc82])
#loc246 = loc(fused[#loc83, #loc84])
#loc247 = loc(fused[#loc85, #loc86])
#loc248 = loc(fused[#loc87, #loc88])
#loc249 = loc(fused[#loc89, #loc90])
#loc250 = loc(fused[#loc91, #loc92])
#loc251 = loc(fused[#loc93, #loc94])
#loc252 = loc(fused[#loc95, #loc96])
#loc253 = loc(fused[#loc97, #loc98])
#loc254 = loc(fused[#loc100, #loc99])
#loc255 = loc(fused[#loc101, #loc102])
#loc256 = loc(fused[#loc105, #loc106])
#loc257 = loc(fused[#loc104, #loc106])
#loc258 = loc(fused[#loc103, #loc94])
#loc259 = loc(fused[#loc107, #loc108])
#loc260 = loc(fused[#loc109, #loc110])
#loc261 = loc(fused[#loc111, #loc108])
#loc262 = loc(fused[#loc121, #loc120])
#loc263 = loc(fused[#loc126, #loc125])
#loc264 = loc(fused[#loc127, #loc128])
#loc265 = loc(fused[#loc132, #loc133])
#loc266 = loc(fused[#loc134, #loc135])
#loc267 = loc(fused[#loc136, #loc137])
#loc268 = loc(fused[#loc138, #loc139])
#loc269 = loc(fused[#loc140, #loc137])
#loc270 = loc(fused[#loc151, #loc152])
#loc271 = loc(fused[#loc153, #loc154])
#loc272 = loc(fused[#loc155, #loc156])
#loc273 = loc(fused[#loc157, #loc158])
#loc274 = loc(fused[#loc159, #loc160])
#loc275 = loc(fused[#loc161, #loc162])
#loc276 = loc(fused[#loc164, #loc163])
#loc277 = loc(fused[#loc165, #loc166])
#loc278 = loc(fused[#loc169, #loc170])
#loc279 = loc(fused[#loc168, #loc170])
#loc280 = loc(fused[#loc167, #loc158])
#loc281 = loc(fused[#loc171, #loc172])
#loc282 = loc(fused[#loc173, #loc174])
#loc283 = loc(fused[#loc175, #loc172])
#loc284 = loc(fused[#loc183, #loc184])
#loc285 = loc(fused[#loc186, #loc185])
#loc286 = loc(fused[#loc191, #loc190])
#loc287 = loc(fused[#loc192, #loc193])
#loc288 = loc(fused[#loc197, #loc198])
#loc289 = loc(fused[#loc200, #loc201])
#loc290 = loc(fused[#loc202, #loc203])
#loc291 = loc(fused[#loc204, #loc201])
