!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":27:57)
#loc6 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":27:110)
#loc20 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":42:61)
#loc21 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":42:114)
#loc37 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":53:61)
#loc38 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":53:114)
!ty__CWE190_Integer_Overflow__char_rand_add_67_structType = !cir.struct<struct "_CWE190_Integer_Overflow__char_rand_add_67_structType" {!s8i}>
#loc58 = loc(fused[#loc5, #loc6])
#loc63 = loc(fused[#loc20, #loc21])
#loc69 = loc(fused[#loc37, #loc38])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_add_67b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printHexCharLine(!s8i) loc(#loc56)
  cir.func  @CWE190_Integer_Overflow__char_rand_add_67b_badSink(%arg0: !ty__CWE190_Integer_Overflow__char_rand_add_67_structType loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !ty__CWE190_Integer_Overflow__char_rand_add_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__char_rand_add_67_structType>, ["myStruct", init] {alignment = 1 : i64} loc(#loc58)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc59)
    cir.store %arg0, %0 : !ty__CWE190_Integer_Overflow__char_rand_add_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__char_rand_add_67_structType> loc(#loc9)
    %2 = cir.get_member %0[0] {name = "structFirst"} : !cir.ptr<!ty__CWE190_Integer_Overflow__char_rand_add_67_structType> -> !cir.ptr<!s8i> loc(#loc10)
    %3 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc8)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc59)
    cir.scope {
      %4 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc61)
      %5 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc15)
      %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc15)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc14)
      %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc15)
      %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc15)
      cir.store %9, %4 : !s8i, !cir.ptr<!s8i> loc(#loc61)
      %10 = cir.load %4 : !cir.ptr<!s8i>, !s8i loc(#loc16)
      cir.call @printHexCharLine(%10) : (!s8i) -> () loc(#loc17)
    } loc(#loc60)
    cir.return loc(#loc4)
  } loc(#loc57)
  cir.func  @CWE190_Integer_Overflow__char_rand_add_67b_goodG2BSink(%arg0: !ty__CWE190_Integer_Overflow__char_rand_add_67_structType loc(fused[#loc20, #loc21])) extra(#fn_attr) {
    %0 = cir.alloca !ty__CWE190_Integer_Overflow__char_rand_add_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__char_rand_add_67_structType>, ["myStruct", init] {alignment = 1 : i64} loc(#loc63)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc64)
    cir.store %arg0, %0 : !ty__CWE190_Integer_Overflow__char_rand_add_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__char_rand_add_67_structType> loc(#loc24)
    %2 = cir.get_member %0[0] {name = "structFirst"} : !cir.ptr<!ty__CWE190_Integer_Overflow__char_rand_add_67_structType> -> !cir.ptr<!s8i> loc(#loc10)
    %3 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc23)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc64)
    cir.scope {
      %4 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc66)
      %5 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc29)
      %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc29)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc28)
      %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc29)
      %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc29)
      cir.store %9, %4 : !s8i, !cir.ptr<!s8i> loc(#loc66)
      %10 = cir.load %4 : !cir.ptr<!s8i>, !s8i loc(#loc30)
      cir.call @printHexCharLine(%10) : (!s8i) -> () loc(#loc31)
    } loc(#loc65)
    cir.return loc(#loc19)
  } loc(#loc62)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc67)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc34)
  cir.func  @CWE190_Integer_Overflow__char_rand_add_67b_goodB2GSink(%arg0: !ty__CWE190_Integer_Overflow__char_rand_add_67_structType loc(fused[#loc37, #loc38])) extra(#fn_attr) {
    %0 = cir.alloca !ty__CWE190_Integer_Overflow__char_rand_add_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__char_rand_add_67_structType>, ["myStruct", init] {alignment = 1 : i64} loc(#loc69)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc70)
    cir.store %arg0, %0 : !ty__CWE190_Integer_Overflow__char_rand_add_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__char_rand_add_67_structType> loc(#loc41)
    %2 = cir.get_member %0[0] {name = "structFirst"} : !cir.ptr<!ty__CWE190_Integer_Overflow__char_rand_add_67_structType> -> !cir.ptr<!s8i> loc(#loc10)
    %3 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc40)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc70)
    cir.scope {
      %4 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc44)
      %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc44)
      %6 = cir.const #cir.int<127> : !s32i loc(#loc45)
      %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc72)
      %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc46)
      cir.if %8 {
        %9 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc74)
        %10 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc52)
        %11 = cir.cast(integral, %10 : !s8i), !s32i loc(#loc52)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc51)
        %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc52)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc52)
        cir.store %14, %9 : !s8i, !cir.ptr<!s8i> loc(#loc74)
        %15 = cir.load %9 : !cir.ptr<!s8i>, !s8i loc(#loc53)
        cir.call @printHexCharLine(%15) : (!s8i) -> () loc(#loc54)
      } else {
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc34)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc34)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc55)
      } loc(#loc73)
    } loc(#loc71)
    cir.return loc(#loc36)
  } loc(#loc68)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_add_67b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc3 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":27:1)
#loc4 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":35:1)
#loc7 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":29:5)
#loc8 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":29:26)
#loc9 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":28:1)
#loc10 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":22:10)
#loc11 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":30:5)
#loc12 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":34:5)
#loc13 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":32:9)
#loc14 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":32:30)
#loc15 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":32:23)
#loc16 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":33:26)
#loc17 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":33:9)
#loc18 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":42:1)
#loc19 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":50:1)
#loc22 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":44:5)
#loc23 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":44:26)
#loc24 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":43:1)
#loc25 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":45:5)
#loc26 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":49:5)
#loc27 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":47:9)
#loc28 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":47:30)
#loc29 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":47:23)
#loc30 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":48:26)
#loc31 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":48:9)
#loc32 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc34 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":64:19)
#loc35 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":53:1)
#loc36 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":66:1)
#loc39 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":55:5)
#loc40 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":55:26)
#loc41 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":54:1)
#loc42 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":57:5)
#loc43 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":65:5)
#loc44 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":57:9)
#loc45 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":57:16)
#loc46 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":57:14)
#loc47 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":58:5)
#loc48 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":61:5)
#loc49 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":63:5)
#loc50 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":59:9)
#loc51 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":59:30)
#loc52 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":59:23)
#loc53 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":60:26)
#loc54 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":60:9)
#loc55 = loc("CWE190_Integer_Overflow__char_rand_add_67b.c":64:9)
#loc56 = loc(fused[#loc1, #loc2])
#loc57 = loc(fused[#loc3, #loc4])
#loc59 = loc(fused[#loc7, #loc8])
#loc60 = loc(fused[#loc11, #loc12])
#loc61 = loc(fused[#loc13, #loc14])
#loc62 = loc(fused[#loc18, #loc19])
#loc64 = loc(fused[#loc22, #loc23])
#loc65 = loc(fused[#loc25, #loc26])
#loc66 = loc(fused[#loc27, #loc28])
#loc67 = loc(fused[#loc32, #loc33])
#loc68 = loc(fused[#loc35, #loc36])
#loc70 = loc(fused[#loc39, #loc40])
#loc71 = loc(fused[#loc42, #loc43])
#loc72 = loc(fused[#loc44, #loc45])
#loc73 = loc(fused[#loc47, #loc48, #loc49, #loc43])
#loc74 = loc(fused[#loc50, #loc51])
