!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc66)
  cir.func private @putc(!s32i, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc67)
  cir.global "private" external @stdout : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc68)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"putc failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05_bad() extra(#fn_attr) {
    cir.br ^bb1 loc(#loc71)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc66)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %2 ^bb2, ^bb7 loc(#loc72)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc73)
  ^bb3:  // pred: ^bb2
    %3 = cir.const #cir.int<65> : !s32i loc(#loc18)
    %4 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc68)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc19)
    %6 = cir.call @putc(%3, %5) : (!s32i, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc20)
    %7 = cir.const #cir.int<0> : !s32i loc(#loc21)
    %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc74)
    cir.brcond %8 ^bb4, ^bb5 loc(#loc75)
  ^bb4:  // pred: ^bb3
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc9)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc23)
    cir.br ^bb5 loc(#loc17)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc17)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc13)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc13)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc11)
  } loc(#loc70)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc77)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc78)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    cir.return loc(#loc25)
  } loc(#loc76)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc79)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc32)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.br ^bb1 loc(#loc81)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc79)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc37)
    cir.brcond %2 ^bb2, ^bb3 loc(#loc82)
  ^bb2:  // pred: ^bb1
    %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc32)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc41)
    cir.br ^bb8 loc(#loc39)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc83)
  ^bb4:  // pred: ^bb3
    %5 = cir.const #cir.int<65> : !s32i loc(#loc44)
    %6 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc68)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc45)
    %8 = cir.call @putc(%5, %7) : (!s32i, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc46)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc47)
    %11 = cir.cmp(eq, %8, %10) : !s32i, !cir.bool loc(#loc84)
    cir.brcond %11 ^bb5, ^bb6 loc(#loc85)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc49)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    cir.br ^bb6 loc(#loc43)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc43)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc36)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc36)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc34)
  } loc(#loc80)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.br ^bb1 loc(#loc87)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc66)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc55)
    cir.brcond %2 ^bb2, ^bb7 loc(#loc88)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc89)
  ^bb3:  // pred: ^bb2
    %3 = cir.const #cir.int<65> : !s32i loc(#loc59)
    %4 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc68)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc60)
    %6 = cir.call @putc(%3, %5) : (!s32i, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc61)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc62)
    %9 = cir.cmp(eq, %6, %8) : !s32i, !cir.bool loc(#loc90)
    cir.brcond %9 ^bb4, ^bb5 loc(#loc91)
  ^bb4:  // pred: ^bb3
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc64)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    cir.br ^bb5 loc(#loc58)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc58)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc54)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc54)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc52)
  } loc(#loc86)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":0:0)
#loc1 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":25:1)
#loc2 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":25:25)
#loc3 = loc("/usr/include/stdio.h":612:1)
#loc4 = loc("/usr/include/stdio.h":612:43)
#loc5 = loc("/usr/include/stdio.h":150:1)
#loc6 = loc("/usr/include/stdio.h":150:14)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":38:23)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":30:1)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":41:1)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":32:5)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":40:5)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":32:8)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":33:5)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":36:9)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":39:9)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":36:23)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":36:28)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":36:13)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":36:39)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":37:9)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":38:13)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":78:1)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":82:1)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":80:5)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":80:11)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":81:5)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":81:11)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":26:1)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":26:26)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":53:19)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":48:1)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":63:1)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":50:5)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":62:5)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":50:8)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":51:5)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":54:5)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":56:5)
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":53:9)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":58:9)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":61:9)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":58:23)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":58:28)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":58:13)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":58:39)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":59:9)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":60:23)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":60:13)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":66:1)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":76:1)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":68:5)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":75:5)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":68:8)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":69:5)
#loc57 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":71:9)
#loc58 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":74:9)
#loc59 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":71:23)
#loc60 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":71:28)
#loc61 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":71:13)
#loc62 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":71:39)
#loc63 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":72:9)
#loc64 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":73:23)
#loc65 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_05.c":73:13)
#loc66 = loc(fused[#loc1, #loc2])
#loc67 = loc(fused[#loc3, #loc4])
#loc68 = loc(fused[#loc5, #loc6])
#loc69 = loc(fused[#loc7, #loc8])
#loc70 = loc(fused[#loc10, #loc11])
#loc71 = loc(fused[#loc12, #loc13])
#loc72 = loc(fused[#loc15, #loc13])
#loc73 = loc(fused[#loc16, #loc17])
#loc74 = loc(fused[#loc20, #loc21])
#loc75 = loc(fused[#loc22, #loc17])
#loc76 = loc(fused[#loc24, #loc25])
#loc77 = loc(fused[#loc26, #loc27])
#loc78 = loc(fused[#loc28, #loc29])
#loc79 = loc(fused[#loc30, #loc31])
#loc80 = loc(fused[#loc33, #loc34])
#loc81 = loc(fused[#loc35, #loc36])
#loc82 = loc(fused[#loc38, #loc39, #loc40, #loc36])
#loc83 = loc(fused[#loc42, #loc43])
#loc84 = loc(fused[#loc46, #loc47])
#loc85 = loc(fused[#loc48, #loc43])
#loc86 = loc(fused[#loc51, #loc52])
#loc87 = loc(fused[#loc53, #loc54])
#loc88 = loc(fused[#loc56, #loc54])
#loc89 = loc(fused[#loc57, #loc58])
#loc90 = loc(fused[#loc61, #loc62])
#loc91 = loc(fused[#loc63, #loc58])
