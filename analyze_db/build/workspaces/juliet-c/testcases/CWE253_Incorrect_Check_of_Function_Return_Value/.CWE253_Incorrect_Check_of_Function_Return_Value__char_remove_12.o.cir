!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc61)
  cir.func private @remove(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"removemebad.txt\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"remove failed!\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc8)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"removemegood.txt\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc66)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc66)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc14)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc14)
      cir.if %3 {
        cir.scope {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc5)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc5)
          %6 = cir.call @remove(%5) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc21)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc22)
          %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc69)
          cir.if %8 {
            %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc8)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc8)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc24)
          } loc(#loc70)
        } loc(#loc68)
      } else {
        cir.scope {
          %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc9)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc9)
          %6 = cir.call @remove(%5) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc27)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc28)
          %8 = cir.cmp(ne, %6, %7) : !s32i, !cir.bool loc(#loc72)
          cir.if %8 {
            %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc30)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc30)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc31)
          } loc(#loc73)
        } loc(#loc71)
      } loc(#loc67)
    } loc(#loc65)
    cir.return loc(#loc11)
  } loc(#loc64)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc75)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    cir.return loc(#loc33)
  } loc(#loc74)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc78)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc78)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc40)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc40)
      cir.if %3 {
        cir.scope {
          %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc47)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc47)
          %6 = cir.call @remove(%5) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc48)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc49)
          %8 = cir.cmp(ne, %6, %7) : !s32i, !cir.bool loc(#loc81)
          cir.if %8 {
            %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc51)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc51)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc52)
          } loc(#loc82)
        } loc(#loc80)
      } else {
        cir.scope {
          %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc55)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc55)
          %6 = cir.call @remove(%5) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc56)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc57)
          %8 = cir.cmp(ne, %6, %7) : !s32i, !cir.bool loc(#loc84)
          cir.if %8 {
            %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc59)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc59)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc60)
          } loc(#loc85)
        } loc(#loc83)
      } loc(#loc79)
    } loc(#loc77)
    cir.return loc(#loc37)
  } loc(#loc76)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdio.h":158:1)
#loc4 = loc("/usr/include/stdio.h":158:44)
#loc5 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":36:20)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":38:23)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":44:20)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":30:1)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":49:1)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":32:5)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":48:5)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":32:8)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":32:33)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":33:5)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":40:5)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":42:5)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":36:9)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":39:9)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":36:13)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":36:42)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":37:9)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":38:13)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":44:9)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":47:9)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":44:13)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":44:43)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":45:9)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":46:23)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":46:13)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":76:1)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":79:1)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":78:5)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":78:11)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":56:1)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":74:1)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":58:5)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":73:5)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":58:8)
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":58:33)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":59:5)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":65:5)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":67:5)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":61:9)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":64:9)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":61:20)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":61:13)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":61:43)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":62:9)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":63:23)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":63:13)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":69:9)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":72:9)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":69:20)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":69:13)
#loc57 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":69:43)
#loc58 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":70:9)
#loc59 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":71:23)
#loc60 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_remove_12.c":71:13)
#loc61 = loc(fused[#loc1, #loc2])
#loc62 = loc(fused[#loc3, #loc4])
#loc63 = loc(fused[#loc6, #loc7])
#loc64 = loc(fused[#loc10, #loc11])
#loc65 = loc(fused[#loc12, #loc13])
#loc66 = loc(fused[#loc14, #loc15])
#loc67 = loc(fused[#loc16, #loc17, #loc18, #loc13])
#loc68 = loc(fused[#loc19, #loc20])
#loc69 = loc(fused[#loc21, #loc22])
#loc70 = loc(fused[#loc23, #loc20])
#loc71 = loc(fused[#loc25, #loc26])
#loc72 = loc(fused[#loc27, #loc28])
#loc73 = loc(fused[#loc29, #loc26])
#loc74 = loc(fused[#loc32, #loc33])
#loc75 = loc(fused[#loc34, #loc35])
#loc76 = loc(fused[#loc36, #loc37])
#loc77 = loc(fused[#loc38, #loc39])
#loc78 = loc(fused[#loc40, #loc41])
#loc79 = loc(fused[#loc42, #loc43, #loc44, #loc39])
#loc80 = loc(fused[#loc45, #loc46])
#loc81 = loc(fused[#loc48, #loc49])
#loc82 = loc(fused[#loc50, #loc46])
#loc83 = loc(fused[#loc53, #loc54])
#loc84 = loc(fused[#loc56, #loc57])
#loc85 = loc(fused[#loc58, #loc54])
