!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":93:10)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":93:14)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":93:20)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":93:32)
#loc200 = loc(fused[#loc129, #loc130])
#loc201 = loc(fused[#loc131, #loc132])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc145)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc146)
  cir.func private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_539badSink_bEPc(!cir.ptr<!s8i>) loc(#loc147)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_533badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc149)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc150)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc151)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc15)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc152)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc153)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc150)
    cir.br ^bb1 loc(#loc154)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc20)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc21)
    %9 = cir.cmp(eq, %7, %8) : !cir.ptr<!s8i>, !cir.bool loc(#loc155)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc156)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc23)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc25)
    cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc23)
    cir.br ^bb3 loc(#loc19)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // pred: ^bb3
    %13 = cir.const #cir.int<8> : !u64i loc(#loc157)
    %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc28)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc158)
    cir.store %15, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc151)
    cir.br ^bb5 loc(#loc159)
  ^bb5:  // pred: ^bb4
    %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc32)
    %18 = cir.cmp(eq, %16, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc160)
    cir.brcond %18 ^bb6, ^bb7 loc(#loc161)
  ^bb6:  // pred: ^bb5
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc34)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc36)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc34)
    cir.br ^bb7 loc(#loc30)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc30)
  ^bb8:  // pred: ^bb7
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
    cir.store %22, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc162)
    %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_539badSink_bEPc(%23) : (!cir.ptr<!s8i>) -> () loc(#loc40)
    cir.return loc(#loc8)
  } loc(#loc148)
  cir.func private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_5313goodG2BSink_bEPc(!cir.ptr<!s8i>) loc(#loc163)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_53L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc165)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc166)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc167)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc51)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc168)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc51)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc169)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc166)
    cir.br ^bb1 loc(#loc170)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc57)
    %9 = cir.cmp(eq, %7, %8) : !cir.ptr<!s8i>, !cir.bool loc(#loc171)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc172)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc59)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc61)
    cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc59)
    cir.br ^bb3 loc(#loc55)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc55)
  ^bb4:  // pred: ^bb3
    %13 = cir.const #cir.int<8> : !u64i loc(#loc173)
    %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc64)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc174)
    cir.store %15, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc167)
    cir.br ^bb5 loc(#loc175)
  ^bb5:  // pred: ^bb4
    %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc67)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc68)
    %18 = cir.cmp(eq, %16, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc176)
    cir.brcond %18 ^bb6, ^bb7 loc(#loc177)
  ^bb6:  // pred: ^bb5
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc70)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc71)
    %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc72)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc70)
    cir.br ^bb7 loc(#loc66)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc66)
  ^bb8:  // pred: ^bb7
    %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc73)
    cir.store %22, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc178)
    %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_5313goodG2BSink_bEPc(%23) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    cir.return loc(#loc44)
  } loc(#loc164)
  cir.func private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_5313goodB2GSink_bEPc(!cir.ptr<!s8i>) loc(#loc179)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_53L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc181)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc182)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc183)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc87)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc184)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc87)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc185)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc182)
    cir.br ^bb1 loc(#loc186)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc92)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc93)
    %9 = cir.cmp(eq, %7, %8) : !cir.ptr<!s8i>, !cir.bool loc(#loc187)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc188)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc95)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc96)
    %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc97)
    cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc95)
    cir.br ^bb3 loc(#loc91)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc91)
  ^bb4:  // pred: ^bb3
    %13 = cir.const #cir.int<8> : !u64i loc(#loc189)
    %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc100)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc190)
    cir.store %15, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc183)
    cir.br ^bb5 loc(#loc191)
  ^bb5:  // pred: ^bb4
    %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc103)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc104)
    %18 = cir.cmp(eq, %16, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc192)
    cir.brcond %18 ^bb6, ^bb7 loc(#loc193)
  ^bb6:  // pred: ^bb5
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc106)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc107)
    %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc108)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc106)
    cir.br ^bb7 loc(#loc102)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc102)
  ^bb8:  // pred: ^bb7
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc109)
    cir.store %22, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc194)
    %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_5313goodB2GSink_bEPc(%23) : (!cir.ptr<!s8i>) -> () loc(#loc112)
    cir.return loc(#loc80)
  } loc(#loc180)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_534goodEv() extra(#fn_attr1) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_53L7goodG2BEv() : () -> () loc(#loc115)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_53L7goodB2GEv() : () -> () loc(#loc116)
    cir.return loc(#loc114)
  } loc(#loc195)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc196)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc197)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc198)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc123)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc124)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc125)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc126)
  cir.func @main(%arg0: !s32i loc(fused[#loc129, #loc130]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc131, #loc132])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc200)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc201)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc128)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc133)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc133)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc134)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc135)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc135)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc136)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc123)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc123)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc137)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_534goodEv() : () -> () loc(#loc138)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc124)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc124)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc139)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc125)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc125)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc140)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_533badEv() : () -> () loc(#loc141)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc126)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc126)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc142)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc143)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc202)
    cir.return %15 : !s32i loc(#loc202)
  } loc(#loc199)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":26:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":26:27)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":28:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":38:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":30:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":30:12)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":31:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":31:62)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":33:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":33:64)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":31:36)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":31:43)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":31:61)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":32:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":32:42)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":32:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":32:26)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":32:32)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":32:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":32:39)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":32:38)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":33:44)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":33:63)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":33:37)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":34:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":34:43)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":34:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":34:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":34:33)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":34:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":34:40)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":34:39)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":36:12)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":36:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":37:15)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":37:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":45:1)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":45:31)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":47:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":57:1)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":49:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":49:12)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":50:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":50:62)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":52:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":52:64)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":50:36)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":50:43)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":50:61)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":51:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":51:42)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":51:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":51:26)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":51:32)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":51:33)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":51:39)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":51:38)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":52:44)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":52:63)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":52:37)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":53:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":53:43)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":53:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":53:27)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":53:33)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":53:34)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":53:40)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":53:39)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":55:12)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":55:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":56:19)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":56:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":60:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":60:31)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":62:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":72:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":64:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":64:12)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":65:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":65:62)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":67:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":67:64)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":65:36)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":65:43)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":65:61)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":66:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":66:42)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":66:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":66:26)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":66:32)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":66:33)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":66:39)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":66:38)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":67:44)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":67:63)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":67:37)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":68:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":68:43)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":68:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":68:27)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":68:33)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":68:34)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":68:40)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":68:39)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":70:12)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":70:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":71:19)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":71:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":74:1)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":78:1)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":76:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":77:5)
#loc117 = loc("/usr/include/stdlib.h":575:1)
#loc118 = loc("/usr/include/stdlib.h":575:41)
#loc119 = loc("/usr/include/time.h":76:1)
#loc120 = loc("/usr/include/time.h":76:38)
#loc121 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc122 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":98:15)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":100:15)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":103:15)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":105:15)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":93:1)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":108:1)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":94:1)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":96:27)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":96:22)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":96:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":98:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":99:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":100:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":103:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":104:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":105:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":107:12)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_53a.cpp":107:5)
#loc145 = loc(fused[#loc1, #loc2])
#loc146 = loc(fused[#loc3, #loc4])
#loc147 = loc(fused[#loc5, #loc6])
#loc148 = loc(fused[#loc7, #loc8])
#loc149 = loc(fused[#loc9, #loc10])
#loc150 = loc(fused[#loc11, #loc12])
#loc151 = loc(fused[#loc13, #loc14])
#loc152 = loc(fused[#loc16, #loc17])
#loc153 = loc(fused[#loc15, #loc12])
#loc154 = loc(fused[#loc18, #loc19])
#loc155 = loc(fused[#loc20, #loc21])
#loc156 = loc(fused[#loc22, #loc19])
#loc157 = loc(fused[#loc26, #loc27])
#loc158 = loc(fused[#loc28, #loc14])
#loc159 = loc(fused[#loc29, #loc30])
#loc160 = loc(fused[#loc31, #loc32])
#loc161 = loc(fused[#loc33, #loc30])
#loc162 = loc(fused[#loc38, #loc37])
#loc163 = loc(fused[#loc41, #loc42])
#loc164 = loc(fused[#loc43, #loc44])
#loc165 = loc(fused[#loc45, #loc46])
#loc166 = loc(fused[#loc47, #loc48])
#loc167 = loc(fused[#loc49, #loc50])
#loc168 = loc(fused[#loc52, #loc53])
#loc169 = loc(fused[#loc51, #loc48])
#loc170 = loc(fused[#loc54, #loc55])
#loc171 = loc(fused[#loc56, #loc57])
#loc172 = loc(fused[#loc58, #loc55])
#loc173 = loc(fused[#loc62, #loc63])
#loc174 = loc(fused[#loc64, #loc50])
#loc175 = loc(fused[#loc65, #loc66])
#loc176 = loc(fused[#loc67, #loc68])
#loc177 = loc(fused[#loc69, #loc66])
#loc178 = loc(fused[#loc74, #loc73])
#loc179 = loc(fused[#loc77, #loc78])
#loc180 = loc(fused[#loc79, #loc80])
#loc181 = loc(fused[#loc81, #loc82])
#loc182 = loc(fused[#loc83, #loc84])
#loc183 = loc(fused[#loc85, #loc86])
#loc184 = loc(fused[#loc88, #loc89])
#loc185 = loc(fused[#loc87, #loc84])
#loc186 = loc(fused[#loc90, #loc91])
#loc187 = loc(fused[#loc92, #loc93])
#loc188 = loc(fused[#loc94, #loc91])
#loc189 = loc(fused[#loc98, #loc99])
#loc190 = loc(fused[#loc100, #loc86])
#loc191 = loc(fused[#loc101, #loc102])
#loc192 = loc(fused[#loc103, #loc104])
#loc193 = loc(fused[#loc105, #loc102])
#loc194 = loc(fused[#loc110, #loc109])
#loc195 = loc(fused[#loc113, #loc114])
#loc196 = loc(fused[#loc117, #loc118])
#loc197 = loc(fused[#loc119, #loc120])
#loc198 = loc(fused[#loc121, #loc122])
#loc199 = loc(fused[#loc127, #loc128])
#loc202 = loc(fused[#loc144, #loc143])
