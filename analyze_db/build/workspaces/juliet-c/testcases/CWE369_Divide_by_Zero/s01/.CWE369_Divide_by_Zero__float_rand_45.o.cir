!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc11 = loc("CWE369_Divide_by_Zero__float_rand_45.c":44:19)
#loc71 = loc("CWE369_Divide_by_Zero__float_rand_45.c":97:19)
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc99)
  cir.global "private" internal dsolocal @CWE369_Divide_by_Zero__float_rand_45_badData = #cir.fp<0.000000e+00> : !cir.float {alignment = 4 : i64} loc(#loc100)
  cir.func no_proto @CWE369_Divide_by_Zero__float_rand_45_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc102)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc9)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc103)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc11)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc11)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc11)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc11)
    %8 = cir.const #cir.int<30> : !s32i loc(#loc11)
    %9 = cir.shift(left, %7 : !u32i, %8 : !s32i) -> !u32i loc(#loc11)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc11)
    %12 = cir.const #cir.int<15> : !s32i loc(#loc11)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc11)
    %14 = cir.binop(xor, %9, %13) : !u32i loc(#loc11)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc11)
    %17 = cir.binop(xor, %14, %16) : !u32i loc(#loc11)
    cir.br ^bb3(%17 : !u32i) loc(#loc11)
  ^bb2:  // pred: ^bb0
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc11)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc11)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc11)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc11)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc11)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc11)
    %26 = cir.binop(xor, %21, %25) : !u32i loc(#loc11)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc11)
    %29 = cir.binop(xor, %26, %28) : !u32i loc(#loc11)
    %30 = cir.unary(minus, %29) : !u32i, !u32i loc(#loc11)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc11)
    %33 = cir.binop(sub, %30, %32) : !u32i loc(#loc11)
    cir.br ^bb3(%33 : !u32i) loc(#loc11)
  ^bb3(%34: !u32i loc("CWE369_Divide_by_Zero__float_rand_45.c":44:19)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc11)
  ^bb4:  // pred: ^bb3
    %35 = cir.cast(integral, %34 : !u32i), !s32i loc(#loc11)
    %36 = cir.cast(int_to_float, %35 : !s32i), !cir.float loc(#loc11)
    cir.store %36, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc104)
    %37 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc13)
    %38 = cir.get_global @CWE369_Divide_by_Zero__float_rand_45_badData : !cir.ptr<!cir.float> loc(#loc100)
    cir.store %37, %38 : !cir.float, !cir.ptr<!cir.float> loc(#loc105)
    %39 = cir.get_global @badSink : !cir.ptr<!cir.func<()>> loc(#loc106)
    cir.call %39() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc15)
    cir.return loc(#loc6)
  } loc(#loc101)
  cir.func no_proto @CWE369_Divide_by_Zero__float_rand_45_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc108)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc19)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc109)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc21)
    cir.return loc(#loc18)
  } loc(#loc107)
  cir.func private @printIntLine(!s32i) loc(#loc110)
  cir.func no_proto internal private @badSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc112)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc113)
    %2 = cir.get_global @CWE369_Divide_by_Zero__float_rand_45_badData : !cir.ptr<!cir.float> loc(#loc100)
    %3 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc30)
    cir.store %3, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc113)
    cir.br ^bb1 loc(#loc114)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc33)
    %5 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc34)
    %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc34)
    %7 = cir.binop(div, %4, %6) : !cir.double loc(#loc115)
    %8 = cir.cast(float_to_int, %7 : !cir.double), !s32i loc(#loc115)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc35)
    cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc36)
    cir.br ^bb2 loc(#loc32)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc26)
  } loc(#loc111)
  cir.global "private" internal dsolocal @CWE369_Divide_by_Zero__float_rand_45_goodG2BData = #cir.fp<0.000000e+00> : !cir.float {alignment = 4 : i64} loc(#loc116)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc118)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc43)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc119)
    %2 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc45)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc120)
    %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc47)
    %4 = cir.get_global @CWE369_Divide_by_Zero__float_rand_45_goodG2BData : !cir.ptr<!cir.float> loc(#loc116)
    cir.store %3, %4 : !cir.float, !cir.ptr<!cir.float> loc(#loc121)
    %5 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<()>> loc(#loc122)
    cir.call %5() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc49)
    cir.return loc(#loc40)
  } loc(#loc117)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc124)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc125)
    %2 = cir.get_global @CWE369_Divide_by_Zero__float_rand_45_goodG2BData : !cir.ptr<!cir.float> loc(#loc116)
    %3 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc56)
    cir.store %3, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc125)
    cir.br ^bb1 loc(#loc126)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc59)
    %5 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc60)
    %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc60)
    %7 = cir.binop(div, %4, %6) : !cir.double loc(#loc127)
    %8 = cir.cast(float_to_int, %7 : !cir.double), !s32i loc(#loc127)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc62)
    cir.br ^bb2 loc(#loc58)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc52)
  } loc(#loc123)
  cir.global "private" internal dsolocal @CWE369_Divide_by_Zero__float_rand_45_goodB2GData = #cir.fp<0.000000e+00> : !cir.float {alignment = 4 : i64} loc(#loc128)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc130)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc69)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc131)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc71)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc71)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc71)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc71)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc71)
    %8 = cir.const #cir.int<30> : !s32i loc(#loc71)
    %9 = cir.shift(left, %7 : !u32i, %8 : !s32i) -> !u32i loc(#loc71)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc71)
    %12 = cir.const #cir.int<15> : !s32i loc(#loc71)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc71)
    %14 = cir.binop(xor, %9, %13) : !u32i loc(#loc71)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc71)
    %17 = cir.binop(xor, %14, %16) : !u32i loc(#loc71)
    cir.br ^bb3(%17 : !u32i) loc(#loc71)
  ^bb2:  // pred: ^bb0
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc71)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc71)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc71)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc71)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc71)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc71)
    %26 = cir.binop(xor, %21, %25) : !u32i loc(#loc71)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc71)
    %29 = cir.binop(xor, %26, %28) : !u32i loc(#loc71)
    %30 = cir.unary(minus, %29) : !u32i, !u32i loc(#loc71)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc71)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc71)
    %33 = cir.binop(sub, %30, %32) : !u32i loc(#loc71)
    cir.br ^bb3(%33 : !u32i) loc(#loc71)
  ^bb3(%34: !u32i loc("CWE369_Divide_by_Zero__float_rand_45.c":97:19)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc71)
  ^bb4:  // pred: ^bb3
    %35 = cir.cast(integral, %34 : !u32i), !s32i loc(#loc71)
    %36 = cir.cast(int_to_float, %35 : !s32i), !cir.float loc(#loc71)
    cir.store %36, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc132)
    %37 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc73)
    %38 = cir.get_global @CWE369_Divide_by_Zero__float_rand_45_goodB2GData : !cir.ptr<!cir.float> loc(#loc128)
    cir.store %37, %38 : !cir.float, !cir.ptr<!cir.float> loc(#loc133)
    %39 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<()>> loc(#loc134)
    cir.call %39() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc75)
    cir.return loc(#loc66)
  } loc(#loc129)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc135)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc79)
  cir.func no_proto internal private @goodB2GSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc137)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc138)
    %2 = cir.get_global @CWE369_Divide_by_Zero__float_rand_45_goodB2GData : !cir.ptr<!cir.float> loc(#loc128)
    %3 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc85)
    cir.store %3, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc138)
    cir.br ^bb1 loc(#loc139)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc88)
    %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc88)
    %6 = cir.fabs %5 : !cir.double loc(#loc88)
    %7 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc89)
    %8 = cir.cmp(gt, %6, %7) : !cir.double, !cir.bool loc(#loc140)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc141)
  ^bb2:  // pred: ^bb1
    %9 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc94)
    %10 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc95)
    %11 = cir.cast(floating, %10 : !cir.float), !cir.double loc(#loc95)
    %12 = cir.binop(div, %9, %11) : !cir.double loc(#loc142)
    %13 = cir.cast(float_to_int, %12 : !cir.double), !s32i loc(#loc142)
    cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc137)
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc96)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc97)
    cir.br ^bb4 loc(#loc92)
  ^bb3:  // pred: ^bb1
    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc79)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc79)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    cir.br ^bb4 loc(#loc87)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc87)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc81)
  } loc(#loc136)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_45.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE369_Divide_by_Zero__float_rand_45.c":22:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_rand_45.c":22:14)
#loc5 = loc("CWE369_Divide_by_Zero__float_rand_45.c":38:1)
#loc6 = loc("CWE369_Divide_by_Zero__float_rand_45.c":47:1)
#loc7 = loc("CWE369_Divide_by_Zero__float_rand_45.c":40:5)
#loc8 = loc("CWE369_Divide_by_Zero__float_rand_45.c":40:11)
#loc9 = loc("CWE369_Divide_by_Zero__float_rand_45.c":42:12)
#loc10 = loc("CWE369_Divide_by_Zero__float_rand_45.c":42:5)
#loc12 = loc("CWE369_Divide_by_Zero__float_rand_45.c":44:5)
#loc13 = loc("CWE369_Divide_by_Zero__float_rand_45.c":45:52)
#loc14 = loc("CWE369_Divide_by_Zero__float_rand_45.c":45:5)
#loc15 = loc("CWE369_Divide_by_Zero__float_rand_45.c":46:5)
#loc16 = loc("CWE369_Divide_by_Zero__float_rand_45.c":46:13)
#loc17 = loc("CWE369_Divide_by_Zero__float_rand_45.c":102:1)
#loc18 = loc("CWE369_Divide_by_Zero__float_rand_45.c":106:1)
#loc19 = loc("CWE369_Divide_by_Zero__float_rand_45.c":104:5)
#loc20 = loc("CWE369_Divide_by_Zero__float_rand_45.c":104:13)
#loc21 = loc("CWE369_Divide_by_Zero__float_rand_45.c":105:5)
#loc22 = loc("CWE369_Divide_by_Zero__float_rand_45.c":105:13)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc24 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc25 = loc("CWE369_Divide_by_Zero__float_rand_45.c":28:1)
#loc26 = loc("CWE369_Divide_by_Zero__float_rand_45.c":36:1)
#loc27 = loc("CWE369_Divide_by_Zero__float_rand_45.c":33:9)
#loc28 = loc("CWE369_Divide_by_Zero__float_rand_45.c":33:40)
#loc29 = loc("CWE369_Divide_by_Zero__float_rand_45.c":30:5)
#loc30 = loc("CWE369_Divide_by_Zero__float_rand_45.c":30:18)
#loc31 = loc("CWE369_Divide_by_Zero__float_rand_45.c":31:5)
#loc32 = loc("CWE369_Divide_by_Zero__float_rand_45.c":35:5)
#loc33 = loc("CWE369_Divide_by_Zero__float_rand_45.c":33:28)
#loc34 = loc("CWE369_Divide_by_Zero__float_rand_45.c":33:36)
#loc35 = loc("CWE369_Divide_by_Zero__float_rand_45.c":34:22)
#loc36 = loc("CWE369_Divide_by_Zero__float_rand_45.c":34:9)
#loc37 = loc("CWE369_Divide_by_Zero__float_rand_45.c":23:1)
#loc38 = loc("CWE369_Divide_by_Zero__float_rand_45.c":23:14)
#loc39 = loc("CWE369_Divide_by_Zero__float_rand_45.c":64:1)
#loc40 = loc("CWE369_Divide_by_Zero__float_rand_45.c":73:1)
#loc41 = loc("CWE369_Divide_by_Zero__float_rand_45.c":66:5)
#loc42 = loc("CWE369_Divide_by_Zero__float_rand_45.c":66:11)
#loc43 = loc("CWE369_Divide_by_Zero__float_rand_45.c":68:12)
#loc44 = loc("CWE369_Divide_by_Zero__float_rand_45.c":68:5)
#loc45 = loc("CWE369_Divide_by_Zero__float_rand_45.c":70:12)
#loc46 = loc("CWE369_Divide_by_Zero__float_rand_45.c":70:5)
#loc47 = loc("CWE369_Divide_by_Zero__float_rand_45.c":71:56)
#loc48 = loc("CWE369_Divide_by_Zero__float_rand_45.c":71:5)
#loc49 = loc("CWE369_Divide_by_Zero__float_rand_45.c":72:5)
#loc50 = loc("CWE369_Divide_by_Zero__float_rand_45.c":72:17)
#loc51 = loc("CWE369_Divide_by_Zero__float_rand_45.c":54:1)
#loc52 = loc("CWE369_Divide_by_Zero__float_rand_45.c":62:1)
#loc53 = loc("CWE369_Divide_by_Zero__float_rand_45.c":59:9)
#loc54 = loc("CWE369_Divide_by_Zero__float_rand_45.c":59:40)
#loc55 = loc("CWE369_Divide_by_Zero__float_rand_45.c":56:5)
#loc56 = loc("CWE369_Divide_by_Zero__float_rand_45.c":56:18)
#loc57 = loc("CWE369_Divide_by_Zero__float_rand_45.c":57:5)
#loc58 = loc("CWE369_Divide_by_Zero__float_rand_45.c":61:5)
#loc59 = loc("CWE369_Divide_by_Zero__float_rand_45.c":59:28)
#loc60 = loc("CWE369_Divide_by_Zero__float_rand_45.c":59:36)
#loc61 = loc("CWE369_Divide_by_Zero__float_rand_45.c":60:22)
#loc62 = loc("CWE369_Divide_by_Zero__float_rand_45.c":60:9)
#loc63 = loc("CWE369_Divide_by_Zero__float_rand_45.c":24:1)
#loc64 = loc("CWE369_Divide_by_Zero__float_rand_45.c":24:14)
#loc65 = loc("CWE369_Divide_by_Zero__float_rand_45.c":91:1)
#loc66 = loc("CWE369_Divide_by_Zero__float_rand_45.c":100:1)
#loc67 = loc("CWE369_Divide_by_Zero__float_rand_45.c":93:5)
#loc68 = loc("CWE369_Divide_by_Zero__float_rand_45.c":93:11)
#loc69 = loc("CWE369_Divide_by_Zero__float_rand_45.c":95:12)
#loc70 = loc("CWE369_Divide_by_Zero__float_rand_45.c":95:5)
#loc72 = loc("CWE369_Divide_by_Zero__float_rand_45.c":97:5)
#loc73 = loc("CWE369_Divide_by_Zero__float_rand_45.c":98:56)
#loc74 = loc("CWE369_Divide_by_Zero__float_rand_45.c":98:5)
#loc75 = loc("CWE369_Divide_by_Zero__float_rand_45.c":99:5)
#loc76 = loc("CWE369_Divide_by_Zero__float_rand_45.c":99:17)
#loc77 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc78 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc79 = loc("CWE369_Divide_by_Zero__float_rand_45.c":87:19)
#loc80 = loc("CWE369_Divide_by_Zero__float_rand_45.c":76:1)
#loc81 = loc("CWE369_Divide_by_Zero__float_rand_45.c":89:1)
#loc82 = loc("CWE369_Divide_by_Zero__float_rand_45.c":82:9)
#loc83 = loc("CWE369_Divide_by_Zero__float_rand_45.c":82:40)
#loc84 = loc("CWE369_Divide_by_Zero__float_rand_45.c":78:5)
#loc85 = loc("CWE369_Divide_by_Zero__float_rand_45.c":78:18)
#loc86 = loc("CWE369_Divide_by_Zero__float_rand_45.c":80:5)
#loc87 = loc("CWE369_Divide_by_Zero__float_rand_45.c":88:5)
#loc88 = loc("CWE369_Divide_by_Zero__float_rand_45.c":80:13)
#loc89 = loc("CWE369_Divide_by_Zero__float_rand_45.c":80:21)
#loc90 = loc("CWE369_Divide_by_Zero__float_rand_45.c":80:8)
#loc91 = loc("CWE369_Divide_by_Zero__float_rand_45.c":81:5)
#loc92 = loc("CWE369_Divide_by_Zero__float_rand_45.c":84:5)
#loc93 = loc("CWE369_Divide_by_Zero__float_rand_45.c":86:5)
#loc94 = loc("CWE369_Divide_by_Zero__float_rand_45.c":82:28)
#loc95 = loc("CWE369_Divide_by_Zero__float_rand_45.c":82:36)
#loc96 = loc("CWE369_Divide_by_Zero__float_rand_45.c":83:22)
#loc97 = loc("CWE369_Divide_by_Zero__float_rand_45.c":83:9)
#loc98 = loc("CWE369_Divide_by_Zero__float_rand_45.c":87:9)
#loc99 = loc(fused[#loc1, #loc2])
#loc100 = loc(fused[#loc3, #loc4])
#loc101 = loc(fused[#loc5, #loc6])
#loc102 = loc(fused[#loc7, #loc8])
#loc103 = loc(fused[#loc10, #loc9])
#loc104 = loc(fused[#loc12, #loc11])
#loc105 = loc(fused[#loc14, #loc13])
#loc106 = loc(fused[#loc15, #loc16])
#loc107 = loc(fused[#loc17, #loc18])
#loc108 = loc(fused[#loc19, #loc20])
#loc109 = loc(fused[#loc21, #loc22])
#loc110 = loc(fused[#loc23, #loc24])
#loc111 = loc(fused[#loc25, #loc26])
#loc112 = loc(fused[#loc27, #loc28])
#loc113 = loc(fused[#loc29, #loc30])
#loc114 = loc(fused[#loc31, #loc32])
#loc115 = loc(fused[#loc33, #loc34])
#loc116 = loc(fused[#loc37, #loc38])
#loc117 = loc(fused[#loc39, #loc40])
#loc118 = loc(fused[#loc41, #loc42])
#loc119 = loc(fused[#loc44, #loc43])
#loc120 = loc(fused[#loc46, #loc45])
#loc121 = loc(fused[#loc48, #loc47])
#loc122 = loc(fused[#loc49, #loc50])
#loc123 = loc(fused[#loc51, #loc52])
#loc124 = loc(fused[#loc53, #loc54])
#loc125 = loc(fused[#loc55, #loc56])
#loc126 = loc(fused[#loc57, #loc58])
#loc127 = loc(fused[#loc59, #loc60])
#loc128 = loc(fused[#loc63, #loc64])
#loc129 = loc(fused[#loc65, #loc66])
#loc130 = loc(fused[#loc67, #loc68])
#loc131 = loc(fused[#loc70, #loc69])
#loc132 = loc(fused[#loc72, #loc71])
#loc133 = loc(fused[#loc74, #loc73])
#loc134 = loc(fused[#loc75, #loc76])
#loc135 = loc(fused[#loc77, #loc78])
#loc136 = loc(fused[#loc80, #loc81])
#loc137 = loc(fused[#loc82, #loc83])
#loc138 = loc(fused[#loc84, #loc85])
#loc139 = loc(fused[#loc86, #loc87])
#loc140 = loc(fused[#loc90, #loc89])
#loc141 = loc(fused[#loc91, #loc92, #loc93, #loc87])
#loc142 = loc(fused[#loc94, #loc95])
