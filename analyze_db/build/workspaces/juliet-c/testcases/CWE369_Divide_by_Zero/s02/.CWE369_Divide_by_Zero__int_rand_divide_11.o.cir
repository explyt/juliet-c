!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc157)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc158)
  cir.func private @printIntLine(!s32i) loc(#loc159)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_divide_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc161)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc12)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc162)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc164)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc164)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc16)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc16)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc19)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc19)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc19)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc19)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc19)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc19)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc19)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc19)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc19)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc19)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc19)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc19)
          cir.yield %24 : !u32i loc(#loc19)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc19)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc19)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc19)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc19)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc19)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc19)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc19)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc19)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc19)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc19)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc19)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc19)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc19)
          cir.yield %28 : !u32i loc(#loc19)
        }) : (!cir.bool) -> !u32i loc(#loc19)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc19)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc166)
      } loc(#loc165)
    } loc(#loc163)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc168)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc168)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc23)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc23)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc26)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc170)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc28)
      } loc(#loc169)
    } loc(#loc167)
    cir.return loc(#loc8)
  } loc(#loc160)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_divide_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc172)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc173)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc174)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc175)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    cir.return loc(#loc30)
  } loc(#loc171)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc176)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc177)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc44)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc179)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc50)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc182)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc182)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc54)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc54)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc57)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc57)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc57)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc57)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc57)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc57)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc57)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc57)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc57)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc57)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc57)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc57)
          cir.yield %24 : !u32i loc(#loc57)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc57)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc57)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc57)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc57)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc57)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc57)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc57)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc57)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc57)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc57)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc57)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc57)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc57)
          cir.yield %28 : !u32i loc(#loc57)
        }) : (!cir.bool) -> !u32i loc(#loc57)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc57)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc184)
      } loc(#loc183)
    } loc(#loc181)
    cir.scope {
      %3 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc186)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc186)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc61)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc61)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc43)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc43)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc66)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc70)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc189)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc74)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
            %12 = cir.binop(div, %10, %11) : !s32i loc(#loc191)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc76)
          } else {
            %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc44)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc44)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc77)
          } loc(#loc190)
        } loc(#loc188)
      } loc(#loc187)
    } loc(#loc185)
    cir.return loc(#loc46)
  } loc(#loc178)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc193)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc83)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc196)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc196)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc87)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc87)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc90)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc90)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc90)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc90)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc90)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc90)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc90)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc90)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc90)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc90)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc90)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc90)
          cir.yield %24 : !u32i loc(#loc90)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc90)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc90)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc90)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc90)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc90)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc90)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc90)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc90)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc90)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc90)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc90)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc90)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc90)
          cir.yield %28 : !u32i loc(#loc90)
        }) : (!cir.bool) -> !u32i loc(#loc90)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc90)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc198)
      } loc(#loc197)
    } loc(#loc195)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc200)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc200)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc94)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc94)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc99)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc100)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc203)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc104)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc105)
            %12 = cir.binop(div, %10, %11) : !s32i loc(#loc205)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc106)
          } else {
            %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc107)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc107)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc108)
          } loc(#loc204)
        } loc(#loc202)
      } loc(#loc201)
    } loc(#loc199)
    cir.return loc(#loc79)
  } loc(#loc192)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc207)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc113)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc114)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc208)
    cir.scope {
      %3 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc210)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc210)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc118)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc118)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc123)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc123)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc124)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc125)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc212)
      } loc(#loc211)
    } loc(#loc209)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc214)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc214)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc129)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc129)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc132)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc133)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc216)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc134)
      } loc(#loc215)
    } loc(#loc213)
    cir.return loc(#loc110)
  } loc(#loc206)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc218)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc139)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc140)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc221)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc221)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc144)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc144)
      cir.if %6 {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc147)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc223)
      } loc(#loc222)
    } loc(#loc220)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc225)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc225)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc151)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc151)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc154)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc155)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc227)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc156)
      } loc(#loc226)
    } loc(#loc224)
    cir.return loc(#loc136)
  } loc(#loc217)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":22:1)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":37:1)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":24:5)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":24:9)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":26:13)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":26:12)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":26:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":27:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":31:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":27:8)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":27:26)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":28:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":30:16)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":30:9)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":32:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":36:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":32:8)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":32:26)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":33:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":35:22)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":35:28)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":35:9)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":139:1)
#loc30 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":145:1)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":141:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":141:14)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":142:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":142:14)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":143:5)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":143:14)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":144:5)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":144:14)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":57:19)
#loc44 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":68:23)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":44:1)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":71:1)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":46:5)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":46:9)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":48:13)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":48:12)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":48:5)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":49:5)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":53:5)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":49:8)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":49:26)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":50:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":52:16)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":52:9)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":54:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":70:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":54:8)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":54:27)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":55:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":58:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":60:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":57:9)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":62:9)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":69:9)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":62:13)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":62:21)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":63:9)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":65:9)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":67:9)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":64:26)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":64:32)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":64:13)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":68:13)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":74:1)
#loc79 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":96:1)
#loc80 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":76:5)
#loc81 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":76:9)
#loc82 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":78:13)
#loc83 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":78:12)
#loc84 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":78:5)
#loc85 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":79:5)
#loc86 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":83:5)
#loc87 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":79:8)
#loc88 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":79:26)
#loc89 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":80:5)
#loc90 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":82:16)
#loc91 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":82:9)
#loc92 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":84:5)
#loc93 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":95:5)
#loc94 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":84:8)
#loc95 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":84:26)
#loc96 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":85:5)
#loc97 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":87:9)
#loc98 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":94:9)
#loc99 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":87:13)
#loc100 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":87:21)
#loc101 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":88:9)
#loc102 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":90:9)
#loc103 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":92:9)
#loc104 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":89:26)
#loc105 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":89:32)
#loc106 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":89:13)
#loc107 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":93:23)
#loc108 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":93:13)
#loc109 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":99:1)
#loc110 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":119:1)
#loc111 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":101:5)
#loc112 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":101:9)
#loc113 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":103:13)
#loc114 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":103:12)
#loc115 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":103:5)
#loc116 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":104:5)
#loc117 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":113:5)
#loc118 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":104:8)
#loc119 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":104:27)
#loc120 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":105:5)
#loc121 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":108:5)
#loc122 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":110:5)
#loc123 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":107:19)
#loc124 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":107:9)
#loc125 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":112:16)
#loc126 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":112:9)
#loc127 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":114:5)
#loc128 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":118:5)
#loc129 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":114:8)
#loc130 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":114:26)
#loc131 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":115:5)
#loc132 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":117:22)
#loc133 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":117:28)
#loc134 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":117:9)
#loc135 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":122:1)
#loc136 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":137:1)
#loc137 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":124:5)
#loc138 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":124:9)
#loc139 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":126:13)
#loc140 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":126:12)
#loc141 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":126:5)
#loc142 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":127:5)
#loc143 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":131:5)
#loc144 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":127:8)
#loc145 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":127:26)
#loc146 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":128:5)
#loc147 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":130:16)
#loc148 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":130:9)
#loc149 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":132:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":136:5)
#loc151 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":132:8)
#loc152 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":132:26)
#loc153 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":133:5)
#loc154 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":135:22)
#loc155 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":135:28)
#loc156 = loc("CWE369_Divide_by_Zero__int_rand_divide_11.c":135:9)
#loc157 = loc(fused[#loc1, #loc2])
#loc158 = loc(fused[#loc3, #loc4])
#loc159 = loc(fused[#loc5, #loc6])
#loc160 = loc(fused[#loc7, #loc8])
#loc161 = loc(fused[#loc9, #loc10])
#loc162 = loc(fused[#loc13, #loc11])
#loc163 = loc(fused[#loc14, #loc15])
#loc164 = loc(fused[#loc16, #loc17])
#loc165 = loc(fused[#loc18, #loc15])
#loc166 = loc(fused[#loc20, #loc19])
#loc167 = loc(fused[#loc21, #loc22])
#loc168 = loc(fused[#loc23, #loc24])
#loc169 = loc(fused[#loc25, #loc22])
#loc170 = loc(fused[#loc26, #loc27])
#loc171 = loc(fused[#loc29, #loc30])
#loc172 = loc(fused[#loc31, #loc32])
#loc173 = loc(fused[#loc33, #loc34])
#loc174 = loc(fused[#loc35, #loc36])
#loc175 = loc(fused[#loc37, #loc38])
#loc176 = loc(fused[#loc39, #loc40])
#loc177 = loc(fused[#loc41, #loc42])
#loc178 = loc(fused[#loc45, #loc46])
#loc179 = loc(fused[#loc47, #loc48])
#loc180 = loc(fused[#loc51, #loc49])
#loc181 = loc(fused[#loc52, #loc53])
#loc182 = loc(fused[#loc54, #loc55])
#loc183 = loc(fused[#loc56, #loc53])
#loc184 = loc(fused[#loc58, #loc57])
#loc185 = loc(fused[#loc59, #loc60])
#loc186 = loc(fused[#loc61, #loc62])
#loc187 = loc(fused[#loc63, #loc64, #loc65, #loc60])
#loc188 = loc(fused[#loc67, #loc68])
#loc189 = loc(fused[#loc69, #loc70])
#loc190 = loc(fused[#loc71, #loc72, #loc73, #loc68])
#loc191 = loc(fused[#loc74, #loc75])
#loc192 = loc(fused[#loc78, #loc79])
#loc193 = loc(fused[#loc80, #loc81])
#loc194 = loc(fused[#loc84, #loc82])
#loc195 = loc(fused[#loc85, #loc86])
#loc196 = loc(fused[#loc87, #loc88])
#loc197 = loc(fused[#loc89, #loc86])
#loc198 = loc(fused[#loc91, #loc90])
#loc199 = loc(fused[#loc92, #loc93])
#loc200 = loc(fused[#loc94, #loc95])
#loc201 = loc(fused[#loc96, #loc93])
#loc202 = loc(fused[#loc97, #loc98])
#loc203 = loc(fused[#loc99, #loc100])
#loc204 = loc(fused[#loc101, #loc102, #loc103, #loc98])
#loc205 = loc(fused[#loc104, #loc105])
#loc206 = loc(fused[#loc109, #loc110])
#loc207 = loc(fused[#loc111, #loc112])
#loc208 = loc(fused[#loc115, #loc113])
#loc209 = loc(fused[#loc116, #loc117])
#loc210 = loc(fused[#loc118, #loc119])
#loc211 = loc(fused[#loc120, #loc121, #loc122, #loc117])
#loc212 = loc(fused[#loc126, #loc125])
#loc213 = loc(fused[#loc127, #loc128])
#loc214 = loc(fused[#loc129, #loc130])
#loc215 = loc(fused[#loc131, #loc128])
#loc216 = loc(fused[#loc132, #loc133])
#loc217 = loc(fused[#loc135, #loc136])
#loc218 = loc(fused[#loc137, #loc138])
#loc219 = loc(fused[#loc141, #loc139])
#loc220 = loc(fused[#loc142, #loc143])
#loc221 = loc(fused[#loc144, #loc145])
#loc222 = loc(fused[#loc146, #loc143])
#loc223 = loc(fused[#loc148, #loc147])
#loc224 = loc(fused[#loc149, #loc150])
#loc225 = loc(fused[#loc151, #loc152])
#loc226 = loc(fused[#loc153, #loc150])
#loc227 = loc(fused[#loc154, #loc155])
