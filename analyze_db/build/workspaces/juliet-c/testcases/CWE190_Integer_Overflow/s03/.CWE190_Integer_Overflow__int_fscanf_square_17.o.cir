!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc145)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc146)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc147)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_17_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc149)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc150)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc151)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc15)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc19)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc154)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc155)
        cir.condition(%7) loc(#loc23)
      } body {
        cir.scope {
          %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc25)
          %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc146)
          %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc26)
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
          %10 = cir.call @__isoc99_fscanf(%7, %9, %2) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc25)
        } loc(#loc156)
        cir.yield loc(#loc18)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc28)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc157)
        cir.yield loc(#loc153)
      } loc(#loc153)
    } loc(#loc153)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc31)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc159)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc33)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc34)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc160)
        cir.condition(%7) loc(#loc35)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc163)
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc41)
            %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc40)
            %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc41)
            cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc163)
            %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc42)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc43)
          } loc(#loc162)
        } loc(#loc161)
        cir.yield loc(#loc30)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc44)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc45)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc164)
        cir.yield loc(#loc158)
      } loc(#loc158)
    } loc(#loc158)
    cir.return loc(#loc9)
  } loc(#loc148)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_17_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc166)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc48)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc167)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc50)
    cir.return loc(#loc47)
  } loc(#loc165)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc52)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc168)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc55)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc170)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc171)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc172)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc63)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc173)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc67)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc175)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc70)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc176)
        cir.condition(%7) loc(#loc71)
      } body {
        cir.scope {
          %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc73)
          %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc146)
          %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc74)
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc75)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc75)
          %10 = cir.call @__isoc99_fscanf(%7, %9, %2) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc73)
        } loc(#loc177)
        cir.yield loc(#loc66)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc76)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc77)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc178)
        cir.yield loc(#loc174)
      } loc(#loc174)
    } loc(#loc174)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc80)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc180)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc82)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc83)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc181)
        cir.condition(%7) loc(#loc84)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc88)
            %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc89)
            %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc89)
            %8 = cir.const #cir.int<1> : !s32i loc(#loc89)
            %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc89)
            %10 = cir.cmp(gt, %5, %9) : !s32i, !cir.bool loc(#loc184)
            %11 = cir.ternary(%10, true {
              %12 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc91)
              %13 = cir.abs %12 poison : !s32i loc(#loc92)
              %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc92)
              %15 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc93)
              %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc94)
              %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc94)
              %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc93)
              %19 = cir.cast(float_to_int, %18 : !cir.double), !s64i loc(#loc93)
              %20 = cir.cmp(lt, %14, %19) : !s64i, !cir.bool loc(#loc185)
              %21 = cir.ternary(%20, true {
                %22 = cir.const #true loc(#loc90)
                cir.yield %22 : !cir.bool loc(#loc90)
              }, false {
                %22 = cir.const #false loc(#loc90)
                cir.yield %22 : !cir.bool loc(#loc90)
              }) : (!cir.bool) -> !cir.bool loc(#loc90)
              cir.yield %21 : !cir.bool loc(#loc90)
            }, false {
              %12 = cir.const #false loc(#loc90)
              cir.yield %12 : !cir.bool loc(#loc90)
            }) : (!cir.bool) -> !cir.bool loc(#loc90)
            cir.if %11 {
              %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc187)
              %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc101)
              %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc100)
              %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc101)
              cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc187)
              %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc102)
              cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc103)
            } else {
              %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc55)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc55)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc104)
            } loc(#loc186)
          } loc(#loc183)
        } loc(#loc182)
        cir.yield loc(#loc79)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc105)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc106)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc188)
        cir.yield loc(#loc179)
      } loc(#loc179)
    } loc(#loc179)
    cir.return loc(#loc57)
  } loc(#loc169)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc190)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc191)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc192)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc114)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc118)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc195)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc120)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc121)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc196)
        cir.condition(%7) loc(#loc122)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<2> : !s32i loc(#loc124)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc198)
        } loc(#loc197)
        cir.yield loc(#loc117)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc126)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc127)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc199)
        cir.yield loc(#loc194)
      } loc(#loc194)
    } loc(#loc194)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc130)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc201)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc132)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc133)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc202)
        cir.condition(%7) loc(#loc134)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc205)
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc140)
            %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc139)
            %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc140)
            cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc205)
            %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc141)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc142)
          } loc(#loc204)
        } loc(#loc203)
        cir.yield loc(#loc129)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc143)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc144)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc206)
        cir.yield loc(#loc200)
      } loc(#loc200)
    } loc(#loc200)
    cir.return loc(#loc108)
  } loc(#loc189)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_17.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":33:23)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":24:1)
#loc9 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":43:1)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":26:5)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":26:9)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":26:11)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":27:5)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":27:9)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":29:12)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":29:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":30:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":34:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":30:13)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":30:9)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":30:16)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":30:20)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":30:18)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":31:5)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":33:9)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":33:16)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":30:24)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":30:23)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":35:5)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":42:5)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":35:13)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":35:9)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":35:16)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":35:20)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":35:18)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":36:5)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":37:9)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":41:9)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":39:13)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":39:33)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":39:26)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":40:26)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":40:13)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":35:24)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":35:23)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":98:1)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":102:1)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":100:5)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":100:13)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":101:5)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":101:13)
#loc52 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":71:23)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":50:1)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":74:1)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":52:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":52:9)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":52:11)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":53:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":53:9)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":55:12)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":55:5)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":56:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":60:5)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":56:13)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":56:9)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":56:16)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":56:20)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":56:18)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":57:5)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":59:9)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":59:16)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":59:23)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":56:24)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":56:23)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":61:5)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":73:5)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":61:13)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":61:9)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":61:16)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":61:20)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":61:18)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":62:5)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":64:9)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":72:9)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":64:13)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":64:20)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":64:28)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":64:35)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":64:31)
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":64:49)
#loc94 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":64:62)
#loc95 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":64:69)
#loc96 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":65:9)
#loc97 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":68:9)
#loc98 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":70:9)
#loc99 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":66:13)
#loc100 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":66:33)
#loc101 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":66:26)
#loc102 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":67:26)
#loc103 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":67:13)
#loc104 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":71:13)
#loc105 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":61:24)
#loc106 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":61:23)
#loc107 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":77:1)
#loc108 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":96:1)
#loc109 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":79:5)
#loc110 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":79:9)
#loc111 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":79:11)
#loc112 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":80:5)
#loc113 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":80:9)
#loc114 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":82:12)
#loc115 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":82:5)
#loc116 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":83:5)
#loc117 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":87:5)
#loc118 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":83:13)
#loc119 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":83:9)
#loc120 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":83:16)
#loc121 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":83:20)
#loc122 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":83:18)
#loc123 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":84:5)
#loc124 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":86:16)
#loc125 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":86:9)
#loc126 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":83:24)
#loc127 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":83:23)
#loc128 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":88:5)
#loc129 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":95:5)
#loc130 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":88:13)
#loc131 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":88:9)
#loc132 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":88:16)
#loc133 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":88:20)
#loc134 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":88:18)
#loc135 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":89:5)
#loc136 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":90:9)
#loc137 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":94:9)
#loc138 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":92:13)
#loc139 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":92:33)
#loc140 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":92:26)
#loc141 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":93:26)
#loc142 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":93:13)
#loc143 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":88:24)
#loc144 = loc("CWE190_Integer_Overflow__int_fscanf_square_17.c":88:23)
#loc145 = loc(fused[#loc1, #loc2])
#loc146 = loc(fused[#loc3, #loc4])
#loc147 = loc(fused[#loc6, #loc7])
#loc148 = loc(fused[#loc8, #loc9])
#loc149 = loc(fused[#loc10, #loc11])
#loc150 = loc(fused[#loc10, #loc12])
#loc151 = loc(fused[#loc13, #loc14])
#loc152 = loc(fused[#loc16, #loc15])
#loc153 = loc(fused[#loc17, #loc18])
#loc154 = loc(fused[#loc20, #loc19])
#loc155 = loc(fused[#loc21, #loc22])
#loc156 = loc(fused[#loc24, #loc18])
#loc157 = loc(fused[#loc28, #loc27])
#loc158 = loc(fused[#loc29, #loc30])
#loc159 = loc(fused[#loc32, #loc31])
#loc160 = loc(fused[#loc33, #loc34])
#loc161 = loc(fused[#loc36, #loc30])
#loc162 = loc(fused[#loc37, #loc38])
#loc163 = loc(fused[#loc39, #loc40])
#loc164 = loc(fused[#loc45, #loc44])
#loc165 = loc(fused[#loc46, #loc47])
#loc166 = loc(fused[#loc48, #loc49])
#loc167 = loc(fused[#loc50, #loc51])
#loc168 = loc(fused[#loc53, #loc54])
#loc169 = loc(fused[#loc56, #loc57])
#loc170 = loc(fused[#loc58, #loc59])
#loc171 = loc(fused[#loc58, #loc60])
#loc172 = loc(fused[#loc61, #loc62])
#loc173 = loc(fused[#loc64, #loc63])
#loc174 = loc(fused[#loc65, #loc66])
#loc175 = loc(fused[#loc68, #loc67])
#loc176 = loc(fused[#loc69, #loc70])
#loc177 = loc(fused[#loc72, #loc66])
#loc178 = loc(fused[#loc77, #loc76])
#loc179 = loc(fused[#loc78, #loc79])
#loc180 = loc(fused[#loc81, #loc80])
#loc181 = loc(fused[#loc82, #loc83])
#loc182 = loc(fused[#loc85, #loc79])
#loc183 = loc(fused[#loc86, #loc87])
#loc184 = loc(fused[#loc88, #loc89])
#loc185 = loc(fused[#loc92, #loc95])
#loc186 = loc(fused[#loc96, #loc97, #loc98, #loc87])
#loc187 = loc(fused[#loc99, #loc100])
#loc188 = loc(fused[#loc106, #loc105])
#loc189 = loc(fused[#loc107, #loc108])
#loc190 = loc(fused[#loc109, #loc110])
#loc191 = loc(fused[#loc109, #loc111])
#loc192 = loc(fused[#loc112, #loc113])
#loc193 = loc(fused[#loc115, #loc114])
#loc194 = loc(fused[#loc116, #loc117])
#loc195 = loc(fused[#loc119, #loc118])
#loc196 = loc(fused[#loc120, #loc121])
#loc197 = loc(fused[#loc123, #loc117])
#loc198 = loc(fused[#loc125, #loc124])
#loc199 = loc(fused[#loc127, #loc126])
#loc200 = loc(fused[#loc128, #loc129])
#loc201 = loc(fused[#loc131, #loc130])
#loc202 = loc(fused[#loc132, #loc133])
#loc203 = loc(fused[#loc135, #loc129])
#loc204 = loc(fused[#loc136, #loc137])
#loc205 = loc(fused[#loc138, #loc139])
#loc206 = loc(fused[#loc144, #loc143])
