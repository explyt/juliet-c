!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc69)
  cir.func private @printIntLine(!s32i) loc(#loc70)
  cir.func no_proto @CWE843_Type_Confusion__char_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charBuffer", init] {alignment = 1 : i64} loc(#loc72)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intBuffer", init] {alignment = 4 : i64} loc(#loc73)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc74)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc13)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc75)
    cir.br ^bb1 loc(#loc76)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc77)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc77)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc17)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %7 ^bb2, ^bb5 loc(#loc78)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc79)
  ^bb3:  // pred: ^bb2
    %8 = cir.const #cir.int<97> : !s32i loc(#loc8)
    %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc8)
    cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc72)
    %10 = cir.cast(bitcast, %0 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc80)
    cir.store %10, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc81)
    cir.br ^bb4 loc(#loc23)
  ^bb4:  // pred: ^bb3
    cir.br ^bb8 loc(#loc20)
  ^bb5:  // pred: ^bb1
    cir.br ^bb6 loc(#loc82)
  ^bb6:  // pred: ^bb5
    %11 = cir.const #cir.int<8> : !s32i loc(#loc10)
    cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc73)
    %12 = cir.cast(bitcast, %1 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc83)
    cir.store %12, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc84)
    cir.br ^bb7 loc(#loc28)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc16)
  ^bb8:  // 2 preds: ^bb4, ^bb7
    cir.br ^bb9 loc(#loc16)
  ^bb9:  // pred: ^bb8
    %13 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc32)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc32)
    %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc34)
    cir.return loc(#loc6)
  } loc(#loc71)
  cir.func no_proto @CWE843_Type_Confusion__char_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc86)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    cir.return loc(#loc36)
  } loc(#loc85)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intBuffer", init] {alignment = 4 : i64} loc(#loc88)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intBuffer", init] {alignment = 4 : i64} loc(#loc89)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc90)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc47)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc91)
    cir.br ^bb1 loc(#loc92)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc93)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc93)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc51)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc51)
    cir.brcond %7 ^bb2, ^bb5 loc(#loc94)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc95)
  ^bb3:  // pred: ^bb2
    %8 = cir.const #cir.int<8> : !s32i loc(#loc42)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    %9 = cir.cast(bitcast, %0 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc96)
    cir.store %9, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc97)
    cir.br ^bb4 loc(#loc57)
  ^bb4:  // pred: ^bb3
    cir.br ^bb8 loc(#loc54)
  ^bb5:  // pred: ^bb1
    cir.br ^bb6 loc(#loc98)
  ^bb6:  // pred: ^bb5
    %10 = cir.const #cir.int<8> : !s32i loc(#loc44)
    cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    %11 = cir.cast(bitcast, %1 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc99)
    cir.store %11, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc100)
    cir.br ^bb7 loc(#loc62)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc50)
  ^bb8:  // 2 preds: ^bb4, ^bb7
    cir.br ^bb9 loc(#loc50)
  ^bb9:  // pred: ^bb8
    %12 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc66)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc66)
    %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc68)
    cir.return loc(#loc40)
  } loc(#loc87)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE843_Type_Confusion__char_12.c":21:1)
#loc6 = loc("CWE843_Type_Confusion__char_12.c":44:1)
#loc7 = loc("CWE843_Type_Confusion__char_12.c":30:13)
#loc8 = loc("CWE843_Type_Confusion__char_12.c":30:31)
#loc9 = loc("CWE843_Type_Confusion__char_12.c":38:13)
#loc10 = loc("CWE843_Type_Confusion__char_12.c":38:29)
#loc11 = loc("CWE843_Type_Confusion__char_12.c":23:5)
#loc12 = loc("CWE843_Type_Confusion__char_12.c":23:12)
#loc13 = loc("CWE843_Type_Confusion__char_12.c":25:12)
#loc14 = loc("CWE843_Type_Confusion__char_12.c":25:5)
#loc15 = loc("CWE843_Type_Confusion__char_12.c":26:5)
#loc16 = loc("CWE843_Type_Confusion__char_12.c":41:5)
#loc17 = loc("CWE843_Type_Confusion__char_12.c":26:8)
#loc18 = loc("CWE843_Type_Confusion__char_12.c":26:33)
#loc19 = loc("CWE843_Type_Confusion__char_12.c":27:5)
#loc20 = loc("CWE843_Type_Confusion__char_12.c":33:5)
#loc21 = loc("CWE843_Type_Confusion__char_12.c":35:5)
#loc22 = loc("CWE843_Type_Confusion__char_12.c":28:9)
#loc23 = loc("CWE843_Type_Confusion__char_12.c":32:9)
#loc24 = loc("CWE843_Type_Confusion__char_12.c":31:20)
#loc25 = loc("CWE843_Type_Confusion__char_12.c":31:21)
#loc26 = loc("CWE843_Type_Confusion__char_12.c":31:13)
#loc27 = loc("CWE843_Type_Confusion__char_12.c":36:9)
#loc28 = loc("CWE843_Type_Confusion__char_12.c":40:9)
#loc29 = loc("CWE843_Type_Confusion__char_12.c":39:20)
#loc30 = loc("CWE843_Type_Confusion__char_12.c":39:21)
#loc31 = loc("CWE843_Type_Confusion__char_12.c":39:13)
#loc32 = loc("CWE843_Type_Confusion__char_12.c":43:26)
#loc33 = loc("CWE843_Type_Confusion__char_12.c":43:18)
#loc34 = loc("CWE843_Type_Confusion__char_12.c":43:5)
#loc35 = loc("CWE843_Type_Confusion__char_12.c":77:1)
#loc36 = loc("CWE843_Type_Confusion__char_12.c":80:1)
#loc37 = loc("CWE843_Type_Confusion__char_12.c":79:5)
#loc38 = loc("CWE843_Type_Confusion__char_12.c":79:13)
#loc39 = loc("CWE843_Type_Confusion__char_12.c":52:1)
#loc40 = loc("CWE843_Type_Confusion__char_12.c":75:1)
#loc41 = loc("CWE843_Type_Confusion__char_12.c":61:13)
#loc42 = loc("CWE843_Type_Confusion__char_12.c":61:29)
#loc43 = loc("CWE843_Type_Confusion__char_12.c":69:13)
#loc44 = loc("CWE843_Type_Confusion__char_12.c":69:29)
#loc45 = loc("CWE843_Type_Confusion__char_12.c":54:5)
#loc46 = loc("CWE843_Type_Confusion__char_12.c":54:12)
#loc47 = loc("CWE843_Type_Confusion__char_12.c":56:12)
#loc48 = loc("CWE843_Type_Confusion__char_12.c":56:5)
#loc49 = loc("CWE843_Type_Confusion__char_12.c":57:5)
#loc50 = loc("CWE843_Type_Confusion__char_12.c":72:5)
#loc51 = loc("CWE843_Type_Confusion__char_12.c":57:8)
#loc52 = loc("CWE843_Type_Confusion__char_12.c":57:33)
#loc53 = loc("CWE843_Type_Confusion__char_12.c":58:5)
#loc54 = loc("CWE843_Type_Confusion__char_12.c":64:5)
#loc55 = loc("CWE843_Type_Confusion__char_12.c":66:5)
#loc56 = loc("CWE843_Type_Confusion__char_12.c":59:9)
#loc57 = loc("CWE843_Type_Confusion__char_12.c":63:9)
#loc58 = loc("CWE843_Type_Confusion__char_12.c":62:20)
#loc59 = loc("CWE843_Type_Confusion__char_12.c":62:21)
#loc60 = loc("CWE843_Type_Confusion__char_12.c":62:13)
#loc61 = loc("CWE843_Type_Confusion__char_12.c":67:9)
#loc62 = loc("CWE843_Type_Confusion__char_12.c":71:9)
#loc63 = loc("CWE843_Type_Confusion__char_12.c":70:20)
#loc64 = loc("CWE843_Type_Confusion__char_12.c":70:21)
#loc65 = loc("CWE843_Type_Confusion__char_12.c":70:13)
#loc66 = loc("CWE843_Type_Confusion__char_12.c":74:26)
#loc67 = loc("CWE843_Type_Confusion__char_12.c":74:18)
#loc68 = loc("CWE843_Type_Confusion__char_12.c":74:5)
#loc69 = loc(fused[#loc1, #loc2])
#loc70 = loc(fused[#loc3, #loc4])
#loc71 = loc(fused[#loc5, #loc6])
#loc72 = loc(fused[#loc7, #loc8])
#loc73 = loc(fused[#loc9, #loc10])
#loc74 = loc(fused[#loc11, #loc12])
#loc75 = loc(fused[#loc14, #loc13])
#loc76 = loc(fused[#loc15, #loc16])
#loc77 = loc(fused[#loc17, #loc18])
#loc78 = loc(fused[#loc19, #loc20, #loc21, #loc16])
#loc79 = loc(fused[#loc22, #loc23])
#loc80 = loc(fused[#loc24, #loc25])
#loc81 = loc(fused[#loc26, #loc25])
#loc82 = loc(fused[#loc27, #loc28])
#loc83 = loc(fused[#loc29, #loc30])
#loc84 = loc(fused[#loc31, #loc30])
#loc85 = loc(fused[#loc35, #loc36])
#loc86 = loc(fused[#loc37, #loc38])
#loc87 = loc(fused[#loc39, #loc40])
#loc88 = loc(fused[#loc41, #loc42])
#loc89 = loc(fused[#loc43, #loc44])
#loc90 = loc(fused[#loc45, #loc46])
#loc91 = loc(fused[#loc48, #loc47])
#loc92 = loc(fused[#loc49, #loc50])
#loc93 = loc(fused[#loc51, #loc52])
#loc94 = loc(fused[#loc53, #loc54, #loc55, #loc50])
#loc95 = loc(fused[#loc56, #loc57])
#loc96 = loc(fused[#loc58, #loc59])
#loc97 = loc(fused[#loc60, #loc59])
#loc98 = loc(fused[#loc61, #loc62])
#loc99 = loc(fused[#loc63, #loc64])
#loc100 = loc(fused[#loc65, #loc64])
