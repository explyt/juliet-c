!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":22:60)
#loc6 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":22:66)
#loc17 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":36:64)
#loc18 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":36:70)
#loc32 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":46:64)
#loc33 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":46:70)
#loc50 = loc(fused[#loc5, #loc6])
#loc54 = loc(fused[#loc17, #loc18])
#loc59 = loc(fused[#loc32, #loc33])
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_add_65b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc48)
  cir.func @CWE190_Integer_Overflow__short_fscanf_add_65b_badSink(%arg0: !s16i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc50)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc52)
      %2 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc12)
      %3 = cir.cast(integral, %2 : !s16i), !s32i loc(#loc12)
      %4 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc12)
      %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc12)
      cir.store %6, %1 : !s16i, !cir.ptr<!s16i> loc(#loc52)
      %7 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc13)
      %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc13)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc14)
    } loc(#loc51)
    cir.return loc(#loc4)
  } loc(#loc49)
  cir.func @CWE190_Integer_Overflow__short_fscanf_add_65b_goodG2BSink(%arg0: !s16i loc(fused[#loc17, #loc18])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc54)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc19)
    cir.scope {
      %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc56)
      %2 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc24)
      %3 = cir.cast(integral, %2 : !s16i), !s32i loc(#loc24)
      %4 = cir.const #cir.int<1> : !s32i loc(#loc23)
      %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc24)
      %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc24)
      cir.store %6, %1 : !s16i, !cir.ptr<!s16i> loc(#loc56)
      %7 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc25)
      %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc25)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc26)
    } loc(#loc55)
    cir.return loc(#loc16)
  } loc(#loc53)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc29)
  cir.func @CWE190_Integer_Overflow__short_fscanf_add_65b_goodB2GSink(%arg0: !s16i loc(fused[#loc32, #loc33])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc59)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc34)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc37)
      %2 = cir.cast(integral, %1 : !s16i), !s32i loc(#loc37)
      %3 = cir.const #cir.int<32767> : !s32i loc(#loc38)
      %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc61)
      cir.if %4 {
        %5 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc63)
        %6 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc44)
        %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc44)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc43)
        %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc44)
        %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc44)
        cir.store %10, %5 : !s16i, !cir.ptr<!s16i> loc(#loc63)
        %11 = cir.load %5 : !cir.ptr<!s16i>, !s16i loc(#loc45)
        %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc45)
        cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc46)
      } else {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc29)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc29)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc47)
      } loc(#loc62)
    } loc(#loc60)
    cir.return loc(#loc31)
  } loc(#loc58)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_add_65b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":29:1)
#loc7 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":23:1)
#loc8 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":24:5)
#loc9 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":28:5)
#loc10 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":26:9)
#loc11 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":26:31)
#loc12 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":26:24)
#loc13 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":27:22)
#loc14 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":27:9)
#loc15 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":36:1)
#loc16 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":43:1)
#loc19 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":37:1)
#loc20 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":38:5)
#loc21 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":42:5)
#loc22 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":40:9)
#loc23 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":40:31)
#loc24 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":40:24)
#loc25 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":41:22)
#loc26 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":41:9)
#loc27 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc28 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc29 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":56:19)
#loc30 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":46:1)
#loc31 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":58:1)
#loc34 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":47:1)
#loc35 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":49:5)
#loc36 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":57:5)
#loc37 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":49:9)
#loc38 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":49:16)
#loc39 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":50:5)
#loc40 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":53:5)
#loc41 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":55:5)
#loc42 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":51:9)
#loc43 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":51:31)
#loc44 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":51:24)
#loc45 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":52:22)
#loc46 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":52:9)
#loc47 = loc("CWE190_Integer_Overflow__short_fscanf_add_65b.c":56:9)
#loc48 = loc(fused[#loc1, #loc2])
#loc49 = loc(fused[#loc3, #loc4])
#loc51 = loc(fused[#loc8, #loc9])
#loc52 = loc(fused[#loc10, #loc11])
#loc53 = loc(fused[#loc15, #loc16])
#loc55 = loc(fused[#loc20, #loc21])
#loc56 = loc(fused[#loc22, #loc23])
#loc57 = loc(fused[#loc27, #loc28])
#loc58 = loc(fused[#loc30, #loc31])
#loc60 = loc(fused[#loc35, #loc36])
#loc61 = loc(fused[#loc37, #loc38])
#loc62 = loc(fused[#loc39, #loc40, #loc41, #loc36])
#loc63 = loc(fused[#loc42, #loc43])
